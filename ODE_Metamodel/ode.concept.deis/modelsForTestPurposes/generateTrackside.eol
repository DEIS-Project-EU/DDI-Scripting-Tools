// Helper functions for building SACM and ODEProduct elements
import "DDIBuilderHelpers.eol";

var MAX_ID : Integer = 9999;
var odeIDMap : Map;

// Retrieve the sole DDI package that will contain all other
// Trackside SACM and ODEProduct packages
var topPackage;
var topPackages = base!DDIPackage.all();

if(topPackages.size() = 0) {
	topPackage = new base!DDIPackage;
}
else {
	topPackage = topPackages.at(0);
}

topPackage.name = "Trackside";
topPackage.description = "Trackside DDI Top Container Package";

// Construct Trackside ODEProductPackages

// FailurePackage
var trackFLPackage : new base!FailureLogicPackage;
trackFLPackage.name = "ETCS Trackside";
topPackage.odeProductPackages.add(trackFLPackage);

var trackFTA = trackFLPackage.BuildFaultTree("ETCS Trackside");

// Trackside Failures
var trackFuncOutCause = trackFTA.BuildOutputEvent("Trackside functions", "Failure of Trackside functions", "Value", 0.0d, false);
var trackErrLoopOutCause = trackFTA.BuildOutputEvent("ErrLoopOut", "Erroneous Euroloop telegram/telegrams interpretable as correct", "Value", 0.0d, false);
var trackOmLoopOutCause = trackFTA.BuildOutputEvent("OmLoopOut", "Omission of Euroloop uplink signal", "O", 0.0d, false);
var trackErrBalOutCause = trackFTA.BuildOutputEvent("ErrBalOut", "Erroneous Eurobalise telegram/telegrams interpretable as correct", "Value", 0.0d, false);
var trackOmBalOutCause = trackFTA.BuildOutputEvent("OmBalOut", "Omission of Eurobalise uplink signal", "O", 0.0d, false);
var trackOmActInCause = trackFTA.BuildInputEvent("OmActIn", "Omission of activation signal", "O", 0.0d, false);
var trackOmTelInCause = trackFTA.BuildInputEvent("OmTelIn", "Omission of tele-powering signal", "O", 0.0d, false);

var loopFTA = trackFLPackage.BuildFaultTree("Euroloop", trackFTA);
var baliseFTA = trackFLPackage.BuildFaultTree("Eurobalise", trackFTA);
var leuFTA = trackFLPackage.BuildFaultTree("LEU", trackFTA);

// Loop FTA
var loopOmActInCause = loopFTA.BuildInputEvent("OmActIn", "Omission of activation signal", "O", 0.0d, false);
var loopErrTelOutCause = loopFTA.BuildOutputEvent("ErrTelOut", "Erroneous telegram/telegrams interpretable as correct", "Value", 0.0d, false);
var loopOmUpOutCause = loopFTA.BuildOutputEvent("OmUpOut", "Omission of uplink signal", "O", 0.0d, false);
var loopErrLEUInCause = loopFTA.BuildInputEvent("ErrLEUIn", "Erroneous LEU data interpretable as correct", "Value", 0.0d, false);

// Balise FTA
var baliseOmUpOutCause = baliseFTA.BuildOutputEvent("OmUpOut", "Omission of uplink data signal", "O", 0.0d, false);
var baliseErrLEUInCause = baliseFTA.BuildInputEvent("ErrLEUIn", "Erroneous LEU data interpretable as correct", "Value", 0.0d, false);
var baliseOmTelInCause = baliseFTA.BuildInputEvent("OmTelIn", "Omission of tele-powering signal", "O", 0.0d, false);
var baliseErrTelOutCause = baliseFTA.BuildOutputEvent("ErrTelOut", "Erroneous telegram interpretable as correct", "Value", 0.0d, false);
var baliseValUpOutCause = baliseFTA.BuildOutputEvent("ValUpOut", "Uplink signal too strong", "Value", 0.0d, false);

// LEU FTA
var leuErrLoopOutFail = leuFTA.BuildOutputEvent("ErrLoopOut", "Erroneous loop data", "Value", 0.0d, false);
var leuErrBalOutFail = leuFTA.BuildOutputEvent("ErrBalOut", "Erroneous balise data", "Value", 0.0d, false);

// Link Trackside events internally
trackErrLoopOutCause.AddCause(loopErrTelOutCause);
trackOmLoopOutCause.AddCause(loopOmUpOutCause);

// This is different from the diagram (links to trackside's events instead of directly to subsystems
// but... more correct ?
var trackOr1 = trackFTA.BuildGate("or1", "OR");
trackOr1.AddCause(trackErrLoopOutCause);
trackOr1.AddCause(trackErrBalOutCause);

trackFuncOutCause.AddCause(trackOr1);

trackErrBalOutCause.AddCause(baliseErrTelOutCause);
trackOmBalOutCause.AddCause(baliseOmUpOutCause);

loopOmActInCause.AddCause(trackOmActInCause);
loopErrLEUInCause.AddCause(leuErrLoopOutFail);

baliseErrLEUInCause.AddCause(leuErrBalOutFail);
baliseOmTelInCause.AddCause(trackOmTelInCause);

// Eurobalise FTA Internal
var baliseOr1 = baliseFTA.BuildGate("or1", "OR");
var baliseOr2 = baliseFTA.BuildGate("or2", "OR");

var baliseOmUpFail = baliseFTA.BuildBasicEvent("OmUpInt", "HW failure leading to omission of uplink signal", "O", 1.0d, false);
var baliseValUpFail = baliseFTA.BuildBasicEvent("ValUpInt", "HW failure leading to uplink signal being too strong", "Val", 1.0d, false);
var baliseErrTelFail = baliseFTA.BuildBasicEvent("ErrTelInt", "HW failure leading to erroneous telegram interpretable as correct", "Val", 0.006d, false);

baliseOr1.AddCause(baliseOmUpFail);
baliseOr1.AddCause(baliseOmTelInCause);

baliseOr2.AddCause(baliseErrTelFail);
baliseOr2.AddCause(baliseErrLEUInCause);

baliseOmUpOutCause.AddCause(baliseOr1);
baliseValUpOutCause.AddCause(baliseValUpFail);
baliseErrTelOutCause.AddCause(baliseOr2);

// Euroloop FTA Internal
var elcFTA = trackFLPackage.BuildFaultTree("ELC", loopFTA);
var loomoFTA = trackFLPackage.BuildFaultTree("Loop Modem", loopFTA);

var elcOmUpOutCause = elcFTA.BuildOutputEvent("OmUpOut", "Omission of uplink signal", "O", 0.0d, false);
var elcErrTelOutCause = elcFTA.BuildOutputEvent("ErrTelOut", "Erroneous telegram/telegrams interpretable as correct", "Val", 0.0d, false);
var elcOmActOutCause = elcFTA.BuildOutputEvent("OmActOut", "Omission of activation signal", "O", 0.0d, false);
var elcOmActInCause = elcFTA.BuildInputEvent("OmActIn", "Omission of activation signal", "O", 0.0d, false);
var elcErrUpInCause = elcFTA.BuildInputEvent("ErrUpIn", "Erroneous uplink signal interpretable as correct", "Val", 0.0d, false);
var elcOmUpInCause = elcFTA.BuildInputEvent("OmUpIn", "Omission of uplink signal", "O", 0.0d, false);

var loomoOmActInCause = loomoFTA.BuildInputEvent("OmActIn", "Omission of activation signal", "O", 0.0d, false);
var loomoErrUpOutCause = loomoFTA.BuildOutputEvent("ErrUpOut", "Erroneous uplink signal interpretable as correct", "Val", 0.0d, false);
var loomoOmUpOutCause = loomoFTA.BuildOutputEvent("OmUpOut", "Omission of uplink signal", "O", 0.0d, false);
var loomoErrLEUInCause = loomoFTA.BuildInputEvent("ErrLEUIn", "Erronoeous LEU data interpretable as correct", "Val", 0.0d, false);

// Link Euroloop events
loopOmUpOutCause.AddCause(elcOmUpOutCause);
loopErrTelOutCause.AddCause(elcErrTelOutCause);

elcOmActInCause.AddCause(loopOmActInCause);
elcErrUpInCause.AddCause(loomoErrUpOutCause);
elcOmUpInCause.AddCause(loomoOmUpOutCause);

loomoOmActInCause.AddCause(elcOmActOutCause);
loomoErrLEUInCause.AddCause(loopErrLEUInCause);

// ELC FTA Internal
var elcOr1 = elcFTA.BuildGate("Or1", "OR");
var elcOr2 = elcFTA.BuildGate("Or2", "OR");

var elcELCFail = elcFTA.BuildBasicEvent("ELCFail", "ELC broken", "", 4.0d, false);

elcOr1.AddCause(elcELCFail);
elcOr1.AddCause(elcOmActInCause);

elcOr2.AddCause(elcELCFail);
elcOr2.AddCause(elcOmUpInCause);

elcOmActOutCause.AddCause(elcOr1);
elcOmUpOutCause.AddCause(elcOr2);
elcErrTelOutCause.AddCause(elcErrUpInCause);

// LOOMO FTA Internal
var loomoOr1 = loomoFTA.BuildGate("Or1", "OR");
var loomoOr2 = loomoFTA.BuildGate("Or2", "OR");

var loomoOmUpFail = loomoFTA.BuildBasicEvent("OmUpFail", "HW failure leading to omission of uplink signal", "O", 1.0d, false);
var loomoErrUpFail = loomoFTA.BuildBasicEvent("ErrUpFail", "HW failure leading to erroneous uplink signal interpretable as correct", "Val", 0.004d, false);

loomoOr1.AddCause(loomoOmActInCause);
loomoOr1.AddCause(loomoOmUpFail);

loomoOr2.AddCause(loomoErrLEUInCause);
loomoOr2.AddCause(loomoOmUpFail);

loomoOmUpOutCause.AddCause(loomoOr1);
loomoErrUpOutCause.AddCause(loomoOr2);

// DependabilityPackage
var trackDependPackage : new base!DependabilityPackage;
trackDependPackage.name = "Trackside";
topPackage.odeProductPackages.add(trackDependPackage);

// DesignPackage
var trackDesignPackage : new base!DesignPackage;
trackDesignPackage.name = "Trackside";
trackDesignPackage.description = "Trackside unit of the ETCS";
topPackage.odeProductPackages.add(trackDesignPackage);

var trackSystem = trackDesignPackage.BuildSystem("Trackside", "");

var trackBalisePort = trackSystem.BuildPort("Balise Antenna Signal", "");
var trackEuroloopPort = trackSystem.BuildPort("Euroloop Antenna Signal", "");

var baliseSystem = trackDesignPackage.BuildSystem("Balise", "Eurobalise");
var loopSystem = trackDesignPackage.BuildSystem("Loop", "Euroloop");
var leuSystem = trackDesignPackage.BuildSystem("LEU", "LEU");

trackSystem.subSystems.add(baliseSystem);
trackSystem.subSystems.add(loopSystem);
trackSystem.subSystems.add(leuSystem);

// Balise subsystem
var baliseLEUPort = baliseSystem.BuildPort("LEU data", "");
var baliseUplinkOutPort = baliseSystem.BuildPort("Uplink signal", "");
var baliseTeleInPort = baliseSystem.BuildPort("Tele-powering signal", "", "IN");

// LEU subsystem
var leuBalisePort = leuSystem.BuildPort("Balise data", "");
var leuLoopOutPort = leuSystem.BuildPort("Loop data", "", "OUT"); 

// Loop subsystem
var loopLEUInPort = loopSystem.BuildPort("LEU data", "", "IN");
var loopActivationInPort = loopSystem.BuildPort("Activation signal", "", "IN");
var loopUplinkOutPort = loopSystem.BuildPort("Uplink signal", "", "OUT");

// Loop subsystem internals
var loomoSystem = trackDesignPackage.BuildSystem("LOOMO", "Loop Modem");
var elcSystem = trackDesignPackage.BuildSystem("ELC", "Euroloop Leaky Cable");

loopSystem.subSystems.add(loomoSystem);
loopSystem.subSystems.add(elcSystem);

var loomoLEUInPort = loomoSystem.BuildPort("LEU data", "", "IN");
var loomoActivationInPort = loomoSystem.BuildPort("Activation signal", "", "IN");
var loomoUplinkOutPort = loomoSystem.BuildPort("UplinkSignal", "", "OUT");

var elcLOOMOOutPort = elcSystem.BuildPort("LOOMO activation", "", "OUT");
var elcUplinkInPort = elcSystem.BuildPort("Uplink signal from LOOMO", "", "IN");
var elcActivationInPort = elcSystem.BuildPort("Activation signal", "", "IN");
var elcUplinkOutPort = elcSystem.BuildPort("Uplink signal", "", "OUT");

// Link Loop subsystem ports
loopSystem.BuildSignal(loopLEUInPort, loomoLEUInPort);
loopSystem.BuildSignal(elcLOOMOOutPort, loomoActivationInPort);
loopSystem.BuildSignal(loomoUplinkOutPort, elcUplinkInPort);
loopSystem.BuildSignal(loopActivationInPort, elcActivationInPort);
loopSystem.BuildSignal(elcUplinkOutPort, loopUplinkOutPort);

// Link Trackside system ports
trackSystem.BuildSignal(leuBalisePort, baliseLEUPort);
trackSystem.BuildSignal(leuLoopOutPort, loopLEUInPort);
trackSystem.BuildSignal(baliseUplinkOutPort, trackBalisePort);
trackSystem.BuildSignal(trackBalisePort, baliseTeleInPort);
trackSystem.BuildSignal(trackEuroloopPort, loopActivationInPort);
trackSystem.BuildSignal(loopUplinkOutPort, trackEuroloopPort);

// Link Trackside subsystems to FailureModels
trackSystem.AddFailureModel(trackFTA);
baliseSystem.AddFailureModel(baliseFTA);
loopSystem.AddFailureModel(loopFTA);
leuSystem.AddFailureModel(leuFTA);

// Link Trackside ports to Input/Output Failures
trackEuroloopPort.AddFailure(trackErrLoopOutCause);
trackEuroloopPort.AddFailure(trackOmLoopOutCause);
trackEuroloopPort.AddFailure(trackOmActInCause);

trackBalisePort.AddFailure(trackErrBalOutCause);
trackBalisePort.AddFailure(trackOmBalOutCause);
trackBalisePort.AddFailure(trackOmTelInCause);

// Link Euroloop subsystems to FailureModels 
elcSystem.AddFailureModel(elcFTA);
loomoSystem.AddFailureModel(loomoFTA);

// Link Euroloop ports to Failures
loopUplinkOutPort.AddFailure(loopOmUpOutCause);
loopUplinkOutPort.AddFailure(loopErrTelOutCause);

loopActivationInPort.AddFailure(loopOmActInCause);
loopLEUInPort.AddFailure(loopErrLEUInCause);

// Link ELC ports to failures
elcUplinkOutPort.AddFailure(elcOmUpOutCause);
elcUplinkOutPort.AddFailure(elcErrTelOutCause);
elcActivationInPort.AddFailure(loopOmActInCause);
elcLOOMOOutPort.AddFailure(elcOmActOutCause);
elcUplinkInPort.AddFailure(elcOmUpInCause);

// Link LOOMO ports to failures
loomoActivationInPort.AddFailure(loomoOmActInCause);
loomoLEUInPort.AddFailure(loopErrLEUInCause);
loomoUplinkOutPort.AddFailure(loomoOmUpOutCause);
loomoUplinkOutPort.AddFailure(loomoErrUpOutCause);

// Link Eurobalise ports to Failures
baliseUplinkOutPort.AddFailure(baliseOmUpOutCause);
baliseUplinkOutPort.AddFailure(baliseValUpOutCause);
baliseUplinkOutPort.AddFailure(baliseErrTelOutCause);

baliseTeleInPort.AddFailure(baliseOmTelInCause);
baliseLEUPort.AddFailure(baliseErrLEUInCause);

// Construct Trackside SACM Packages
var trackACP : new base!AssuranceCasePackage;
trackACP.SetName("Trackside_ACP");
trackACP.SetDescription("Trackside Assurance Case Package");
topPackage.assuranceCasePackages.add(trackACP);

var trackArtP : new base!ArtifactPackage;
trackACP.artifactPackage.add(trackArtP);

var hazFAArt = trackArtP.BuildArtifact("Hazard and failure analysis result", "", "1.1", "29 Nov 2018");
var hazFAAct = trackArtP.BuildActivity("Hazard or failure analysis", "", "29 Apr 2018", "28 Oct 2018");
var hazFAEvt = trackArtP.BuildEvent("Release of hazards and failures", "", "29 Nov 2018");

var safeManPart : new base!Participant;
safeManPart.SetName("Safety manager, designer/implementer");
trackArtP.artifactElement.add(safeManPart);
safeManPart.SetID();

var FMECATech : new base!Technique;
FMECATech.SetName("FMEA");
FMECATech.SetDescription("Techniques that are HR in the tables of E.1-E.10 of the standard EN 50129");
trackArtP.artifactElement.add(FMECATech);
FMECATech.SetID();

var sysDocRes : new base!Resource;
sysDocRes.SetName("System description with system boundary description, design/architecture documents");
trackArtP.artifactElement.add(sysDocRes);
sysDocRes.SetID();

var trackArgP : new base!ArgumentPackage;
trackArgP.SetName("Trackside_ArgP");
trackArgP.SetDescription("Trackside Argument Package");
trackACP.argumentPackage.add(trackArgP);

var trackG4 = trackArgP.BuildGoal("G4", "Trackside functions are acceptably safe");

trackG4.BuildTaggedValue("Activity", "QuantitativeFTA");
trackG4.BuildTaggedValue("TopEvent", base.getElementId(trackFuncOutCause));
trackG4.BuildTaggedValue("TargetFailureRate", "0.01");

// Under G4
var trackG13 = trackArgP.BuildGoal("G13", "Processes according to Safety Integrity Level (SIL) 4 have been applied");
var trackG3 = trackArgP.BuildGoal("G3", "Hazard Rate of trackside functions (\"trusted\" parts) <=0,67e-09/h has been demonstrated");

var trackG4SubGoals = Collection {trackG13, trackG3};

trackArgP.LinkGoalToGoals(trackG4, trackG4SubGoals);

// Under G13
// Renamed to G23 from G14 in old GSN
var trackG14 = trackArgP.BuildGoal("G23", "The information transmission functions of the trackside equipment has been developed according to SIL 4 processes");

trackArgP.LinkGoalToGoal(trackG13, trackG14, "S7", "Argument over compliance with SIL 4 processes for relevant functions");

// Under G14
var trackG15 = trackArgP.BuildGoal("G15", "The interfaces have been well defined between the safety-relate system and non safety-related system and have been analyzed");
var trackG16 = trackArgP.BuildGoal("G16", "The roles of designer, verifier/validator, and assessor are independent.");
var trackG17 = trackArgP.BuildGoal("G17", "The safety-related systems and non safety-related systems are separated.");
var trackG18 = trackArgP.BuildGoal("G18", "The isolation distances are designed at least conform to the EN 50124-1");
var trackG19 = trackArgP.BuildGoal("G19", "The FMECA is used for failure and hazard analysis");
var trackG20 = trackArgP.BuildGoal("G20", "The system has been designed hierarchically and the traceability between requirements and design artifacts is ensured.");
var trackG21 = trackArgP.BuildGoal("G21", "The systems has been tested functionally according to its specification, the conformity to the specification has been proved.");
var trackG22 = trackArgP.BuildGoal("G22", "The operators and maintenance personnels are trained at the beginning and retrained regularly.");

var trackG14SubGoals = Collection {trackG15, trackG16, trackG17, trackG18, trackG19, trackG20, trackG21, trackG22};

trackArgP.LinkGoalToGoals(trackG14, trackG14SubGoals);

// Contexts of G15-G22
var trackC15 = trackArgP.BuildContext("C15", "E.2.1 of EN 50129");
var trackC16 = trackArgP.BuildContext("C16", "E.3.2 of EN 50129");
var trackC17 = trackArgP.BuildContext("C17", "E.4.1 of EN 50129");
var trackC18 = trackArgP.BuildContext("C18", "E.5.5 of EN 50129");
var trackC19 = trackArgP.BuildContext("C19", "E.6.4 of EN 50129");
var trackC20 = trackArgP.BuildContext("C20", "E.7.1 of EN 50129");
var trackC21 = trackArgP.BuildContext("C21", "E.9.3 of EN 50129");
var trackC22 = trackArgP.BuildContext("C22", "E.10 of EN 50129");

trackArgP.LinkGoalToContext(trackG15, trackC15);
trackArgP.LinkGoalToContext(trackG16, trackC16);
trackArgP.LinkGoalToContext(trackG17, trackC17);
trackArgP.LinkGoalToContext(trackG18, trackC18);
trackArgP.LinkGoalToContext(trackG19, trackC19);
trackArgP.LinkGoalToContext(trackG20, trackC20);
trackArgP.LinkGoalToContext(trackG21, trackC21);
trackArgP.LinkGoalToContext(trackG22, trackC22);

// Goals under G19
var trackG1916 = trackArgP.BuildGoal("G1916", "FMECA is performed and its results have been documented");
var trackG1917 = trackArgP.BuildGoal("G1917", "Independent reviews of FMECA have been performed by two person");

var trackG19SubGoals = Collection {trackG1916, trackG1917};

trackArgP.LinkGoalToGoals(trackG19, trackG19SubGoals);

// Solutions under G15-G22

var trackSn8 = trackArgP.BuildSolution("Sn8", "Specification of interfaces");
var trackSn9 = trackArgP.BuildSolution("Sn9", "Organisation plan");
var trackSn10 = trackArgP.BuildSolution("Sn10", "Architecture description of safety-related functions according to System Requirements Specification subset 26-2");
var trackSn11 = trackArgP.BuildSolution("Sn11", "Architecture description of non safety-related functions according to System Requirements Specification subset 26-2");
var trackSn12 = trackArgP.BuildSolution("Sn12", "Physical independence description in the detailed safety-related component documentation");
var trackSn13 = trackArgP.BuildSolution("Sn13", "Documentation of FMECA");
var trackSn14 = trackArgP.BuildSolution("Sn14", "Documentation of structured design and realisation of safety requirements (in Doors). And documentation of the traceability between the safety requirement and design and implementation artifacts.");
var trackSn15 = trackArgP.BuildSolution("Sn15", "Test specification, test report");
var trackSn16 = trackArgP.BuildSolution("Sn16", "Training plan");
var trackSn17 = trackArgP.BuildSolution("Sn17", "Report of the review of the FMECA by independent reviewers John Doe and Jane Doe");

trackArgP.LinkGoalToEvidence(trackG15, trackSn8);
trackArgP.LinkGoalToEvidence(trackG15, trackSn8);

var trackG17Evidence = Collection {trackSn10, trackSn11};
trackArgP.LinkGoalToEvidence(trackG17, trackG17Evidence);

var trackG19Evidence = Collection {trackSn13, trackSn17};
trackArgP.LinkGoalToEvidence(trackG19, trackG19Evidence);

trackArgP.LinkGoalToEvidence(trackG18, trackSn12);
trackArgP.LinkGoalToEvidence(trackG20, trackSn14);
trackArgP.LinkGoalToEvidence(trackG21, trackSn15);
trackArgP.LinkGoalToEvidence(trackG22, trackSn16);

trackSn13.LinkToArtifact(hazFAArt);
trackSn13.LinkToArtifact(hazFAAct);
trackSn13.LinkToArtifact(hazFAEvt);
trackSn13.LinkToArtifact(safeManPart);
trackSn13.LinkToArtifact(FMECATech);
trackSn13.LinkToArtifact(sysDocRes);

// Under G3
var trackG11 = trackArgP.BuildGoal("G11", "Hazard Rate of hazardous events \"Erroneous balise telegram interpretable as correct\" <= 1e-11/h");
var trackG12 = trackArgP.BuildGoal("G12", "Hazard Rate of hazardous events \"Erroneous loop telegram interpretable as correct\" <= 1e-11/h");

var trackG3SubGoals = Collection {trackG11, trackG12};

trackArgP.LinkGoalToGoals(trackG3, trackG3SubGoals, "S6", "Argument over all relevant hazardous events");

var trackSn5 = trackArgP.BuildSolution("Sn5", "Quantitative fault tree analysis of the Top Events \"Erroneous balise telegram interpretable as correct\"");
var trackSn7 = trackArgP.BuildSolution("Sn7", "Quantitative fault tree analysis of the Top Events \"Erroneous loop telegram interpretable as correct\"");

trackArgP.LinkGoalToEvidence(trackG11, trackSn5);
trackArgP.LinkGoalToEvidence(trackG12, trackSn7);

var trackC3 = trackArgP.BuildContext("C3", "UNISIG ERTM/ETCS specification Subset-091, issue: 3.4.0");

trackArgP.LinkGoalToContext(trackG3, trackC3);
trackArgP.LinkGoalToContext(trackG11, trackC3);
trackArgP.LinkGoalToContext(trackG12, trackC3);