/*
MIT License

Copyright (c) 2019 DEIS Project

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// Helper functions for building SACM and ODEProduct elements
import "DDIBuilderHelpers.eol";

var MAX_ID : Integer = 9999;
var ID_LIST = Collection {};

// Retrieve the sole DDI package that will contain all other
// ETCS SACM and ODEProduct packages
var topPackage;
var topPackages = m!DDIPackage.all();

if(topPackages.size() = 0) {
	topPackage = new m!DDIPackage;
}
else {
	topPackage = topPackages.at(0);
}

topPackage.name = "ETCS";
topPackage.description = "ETCS DDI Top Container Package";

// Construct ETCS ODEProductPackages

// ETCS FailureLogic Package
var etcsFLPackage : new m!FailureLogicPackage;
etcsFLPackage.name = "ETCS";
topPackage.odeProductPackages.add(etcsFLPackage);

var etcsFTA = etcsFLPackage.BuildFaultTree("ETCS");

// ETCS FTA Events
// This is listed as having failure rate 'LAMBDA=9.59e-8/h'
var etcsComEBOutCause = etcsFTA.BuildOutputEvent("ComEBOut", "Emergency Brake commanded when not required", "C", 0.0d, false);
// This has a lot of failure rate information associated, how do we represent this
var etcsHazTrackOutCause = etcsFTA.BuildOutputEvent("HazTrackOut", "Hazard rate of trackside functions", "", 0.0d, false);
// This has 'LAMBDA=6.60e-11/h'
var etcsOLateEBOutCause = etcsFTA.BuildOutputEvent("OLateEBOut", "Emergency Brake not or too late commanded when required", "OLate", 0.0d, false);

var etcsOr1 = etcsFTA.BuildGate("Or1", "OR");
var etcsAnd1 = etcsFTA.BuildGate("And1", "AND");

var etcsHighTrain1Cause = etcsFTA.BuildBasicEvent("HighTrainFail1", "Train speed signal 1 too high", "Hi", 4.0d, false);
var etcsHighTrain2Cause = etcsFTA.BuildBasicEvent("HighTrainFail2", "Train speed signal 2 too high", "Hi", 8.0d, false);
var etcsLowTrain1Cause = etcsFTA.BuildBasicEvent("LowTrainFail1", "Train speed signal 1 too low", "Low", 4.0d, false);
var etcsLowTrain2Cause = etcsFTA.BuildBasicEvent("LowTrainFail2", "Train speed signal 2 too low", "Low", 8.0d, false);

var trackFTA = etcsFLPackage.BuildFaultTree("Trackside", etcsFTA);
var onBoardFTA = etcsFLPackage.BuildFaultTree("On-board", etcsFTA);

// Trackside FTA Events
var trackOmUpOutCause = trackFTA.BuildOutputEvent("OmUpOut", "Omission of Eurobalise uplink signal", "O", 0.0d, false);
var trackHazTrackOutCause = trackFTA.BuildOutputEvent("HazTrackOut", "Hazard Rate of trackside functions", "", 0.0d, false);
var trackOmActInCause = trackFTA.BuildInputEvent("OmActIn", "Omission of activation signal", "O", 0.0d, false);
var trackOmTelInCause = trackFTA.BuildInputEvent("OmTelIn", "Omission of tele-powering signal", "O", 0.0d, false);
var trackErrBalOutCause = trackFTA.BuildOutputEvent("ErrBalOut", "Erroneous Eurobalise telegram/telegrams interpretable as correct", "Val", 0.0d, false);
var trackErrLoopOutCause = trackFTA.BuildOutputEvent("ErrLoopOut", "Erroneous Euroloop telegram/telegrams interpretable as correct", "Val", 0.0d, false);

// OnBoard FTA Events
var onBoardComEBvIOOutCause = onBoardFTA.BuildOutputEvent("ComEBvIOOut", "Emergency Brake commanded when not required via IO", "C", 0.0d, false);
var onBoardOmActOutCause = onBoardFTA.BuildOutputEvent("OmActOut", "Omission of activation signal", "O", 0.0d, false);
var onBoardOmTelOutCause = onBoardFTA.BuildOutputEvent("OmTelOut", "Omission of tele-powering signal", "O", 0.0d, false);
var onBoardErrLoopInCause = onBoardFTA.BuildInputEvent("ErrLoopIn", "Erroneous Euroloop telegram/telegrams interpretable as correct", "Val", 0.0d, false);
var onBoardHighTrain1InCause = onBoardFTA.BuildInputEvent("HighTrain1In", "Train speed signal 1 too high", "Hi", 0.0d, false);
var onBoardHighTrain2InCause = onBoardFTA.BuildInputEvent("HighTrain2In", "Train speed singal 2 too high", "Hi", 0.0d, false);
var onBoardLowTrain1InCause = onBoardFTA.BuildInputEvent("LowTrain1In", "Train speed signal 1 too low", "Low", 0.0d, false);
var onBoardLowTrain2InCause = onBoardFTA.BuildInputEvent("LowTrain2In", "Train speed signal 2 too low", "Low", 0.0d, false);
var onBoardOmBalInCause = onBoardFTA.BuildInputEvent("OmBalIn", "Omission of Balise up-link signal", "O", 0.0d, false);
var onBoardErrBalInCause = onBoardFTA.BuildInputEvent("ErrBalIn", "Erroneous Eurobalise telegram/telegrams interpretable as correct", "Val", 0.0d, false);
var onBoardComEBvMVBOutCause = onBoardFTA.BuildOutputEvent("ComEBvMVBOut", "Emergency Brake commanded when not required via MVB", "C", 0.0d, false);
var onBoardOLateEBvIOOutCause = onBoardFTA.BuildOutputEvent("OLateEBvIOOut", "Emergency Brake not or too late commanded when required via IO", "OLate", 0.0d, false);
var onBoardOLateEBvMVBOutCause = onBoardFTA.BuildOutputEvent("OLateEBvMVBOut", "Emergency Brake not or too late commanded when required via MVB", "OLate", 0.0d, false);

// Link ETCS FTA Events
etcsOr1.AddCause(onBoardComEBvIOOutCause);
etcsOr1.AddCause(onBoardComEBvMVBOutCause);
etcsAnd1.AddCause(onBoardOLateEBvMVBOutCause);
etcsAnd1.AddCause(onBoardOLateEBvIOOutCause);

etcsComEBOutCause.AddCause(etcsOr1);
etcsHazTrackOutCause.AddCause(trackHazTrackOutCause);
etcsOLateEBOutCause.AddCause(etcsAnd1);

// Link Trackside - OnBoard Events
// To Trackside FTA
trackOmActInCause.AddCause(onBoardOmActOutCause);
trackOmTelInCause.AddCause(onBoardOmTelOutCause);

// To OnBoard FTA
onBoardOmBalInCause.AddCause(trackOmUpOutCause);
onBoardErrBalInCause.AddCause(trackErrBalOutCause);
onBoardErrLoopInCause.AddCause(trackErrLoopOutCause);
onBoardHighTrain1InCause.AddCause(etcsHighTrain1Cause);
onBoardHighTrain2InCause.AddCause(etcsHighTrain2Cause);
onBoardLowTrain1InCause.AddCause(etcsLowTrain1Cause);
onBoardLowTrain2InCause.AddCause(etcsLowTrain2Cause);

// OnBoard FTA Internal
var biutiuFTA = etcsFLPackage.BuildFaultTree("BIU TIU", onBoardFTA);
var kernelFTA = etcsFLPackage.BuildFaultTree("Kernel", onBoardFTA);
var btmFTA = etcsFLPackage.BuildFaultTree("BTM", onBoardFTA);
var ltmFTA = etcsFLPackage.BuildFaultTree("LTM", onBoardFTA);

var biutiuComEBvIOOutCause = biutiuFTA.BuildOutputEvent("ComEBvIOOut", "Emergency Brake commanded when not required via IO", "C", 0.0d, false);
var biutiuOLateEBvIOOutCause = biutiuFTA.BuildOutputEvent("OLateEBvIOOut", "Emergency Brake not or too late commanded when required via IO", "OLate", 0.0d, false);
var biutiuOLateEBvMVBOutCause = biutiuFTA.BuildOutputEvent("OLateEBvMVBOut", "Emergency Brake not or too late commanded when required via MVB", "OLate", 0.0d, false);
var biutiuComEBvMVBOutCause = biutiuFTA.BuildOutputEvent("ComEBvMVBOut", "Emergency Brake commanded when not required via MVB", "C", 0.0d, false);
var biutiuOEBIInCause = biutiuFTA.BuildInputEvent("OEBIIn", "EBI not signalled when required", "O", 0.0d, false);
var biutiuCEBIInCause = biutiuFTA.BuildInputEvent("CEBIIn", "EBI signalled when not required", "C", 0.0d, false);

var kernelOEBIOutCause = kernelFTA.BuildOutputEvent("OEBIOut", "EBI not signalled when required", "O", 0.0d, false);
var kernelCEBIOutCause = kernelFTA.BuildOutputEvent("CEBIOut", "EBI signalled when not required", "C", 0.0d, false);
var kernelIncTrainvBalInCause = kernelFTA.BuildInputEvent("IncTrainvBalIn", "Incorrect train position via Balise", "Val", 0.0d, false);
var kernelOTrainvBalInCause = kernelFTA.BuildInputEvent("OTrainvBalIn", "No train position via Balise", "O", 0.0d, false);
var kernelIncTrainvLoopInCause = kernelFTA.BuildInputEvent("IncTrainvLoopIn", "Incorrect train position via Euroloop", "Val", 0.0d, false);
var kernelLowTrain1InCause = kernelFTA.BuildInputEvent("LowTrain1In", "Train speed signal 1 too low", "Low", 0.0d, false);
var kernelLowTrain2InCause = kernelFTA.BuildInputEvent("LowTrain2In", "Train speed signal 2 too low", "Low", 0.0d, false);
var kernelHighTrain1InCause = kernelFTA.BuildInputEvent("HighTrain1In", "Train speed signal 1 too high", "Hi", 0.0d, false);
var kernelHighTrain2InCause = kernelFTA.BuildInputEvent("HighTrain2In", "Train speed signal 2 too high", "Hi", 0.0d, false);

var btmIncTrainOutCause = btmFTA.BuildOutputEvent("IncTrainOut", "Incorrect train position", "Val", 0.0d, false);
var btmOBalGroupOutCause = btmFTA.BuildOutputEvent("OBalGroupOut", "Balise group is not detected", "O", 0.0d, false);
var btmOTeleOutCause = btmFTA.BuildOutputEvent("OTeleOut", "Omission of tele-powering signal", "O", 0.0d, false);
var btmErrBalInCause = btmFTA.BuildInputEvent("ErrBalIn", "Erroneous Eurobalise telegram/telegrams interpretable as correct", "Val", 0.0d, false);
var btmOUpInCause = btmFTA.BuildInputEvent("OUpIn", "Omission of up-link signal", "O", 0.0d, false);

var ltmErrTelOutCause = ltmFTA.BuildOutputEvent("ErrTelOut", "Erroneous telegram/telegrams - interpretable as correct", "Val", 0.0d, false);
var ltmOmActOutCause = ltmFTA.BuildOutputEvent("OmActOut", "Omission of activation signal", "O", 0.0d, false);
var ltmErrLoopInCause = ltmFTA.BuildInputEvent("ErrLoopIn", "Erroneous Euroloop telegram/telegrams", "Val", 0.0d, false);

// Link internal-external OnBoard events
onBoardComEBvIOOutCause.AddCause(biutiuComEBvIOOutCause);
onBoardOLateEBvIOOutCause.AddCause(biutiuOLateEBvIOOutCause);
onBoardOLateEBvMVBOutCause.AddCause(biutiuOLateEBvMVBOutCause);
onBoardComEBvMVBOutCause.AddCause(biutiuComEBvMVBOutCause);

biutiuOEBIInCause.AddCause(kernelOEBIOutCause);
biutiuCEBIInCause.AddCause(kernelCEBIOutCause);

kernelIncTrainvBalInCause.AddCause(btmIncTrainOutCause);
kernelOTrainvBalInCause.AddCause(btmOBalGroupOutCause);
kernelIncTrainvLoopInCause.AddCause(ltmErrTelOutCause);
kernelLowTrain1InCause.AddCause(onBoardLowTrain1InCause);
kernelLowTrain2InCause.AddCause(onBoardLowTrain2InCause);
kernelHighTrain1InCause.AddCause(onBoardHighTrain1InCause);
kernelHighTrain2InCause.AddCause(onBoardHighTrain2InCause);

btmErrBalInCause.AddCause(onBoardErrBalInCause);
btmOUpInCause.AddCause(onBoardOmBalInCause);
onBoardOmTelOutCause.AddCause(btmOTeleOutCause);

ltmErrLoopInCause.AddCause(onBoardErrLoopInCause);
onBoardOmActOutCause.AddCause(ltmOmActOutCause);

// Internal BIUTIU Events
var hwDriverIOFTA = etcsFLPackage.BuildFaultTree("HW driver I/O", biutiuFTA);
var busDriverIOFTA = etcsFLPackage.BuildFaultTree("Bus driver I/O", biutiuFTA);
var biutiuInternalBusFTA = etcsFLPackage.BuildFaultTree("BIUTIU Internal bus", biutiuFTA);
var cpuFTA = etcsFLPackage.BuildFaultTree("CPU", biutiuFTA);

var hwOLateEBOutCause = hwDriverIOFTA.BuildOutputEvent("OLateEBOut", "Emergency Brake not or too late commanded when required", "OLate", 0.0d, false);
var hwCEBOutCause = hwDriverIOFTA.BuildOutputEvent("CEBOut", "Emergency Brake commanded when not required", "C", 0.0d, false);
var hwOLateEBInCause = hwDriverIOFTA.BuildInputEvent("OLateEBIn", "Emergency Brake not or too late commanded when required", "OLate", 0.0d, false);
var hwCEBInCause = hwDriverIOFTA.BuildInputEvent("CEBIn", "Emergency Brake commanded when not required", "C", 0.0d, false);

var busOLateEBOutCause = busDriverIOFTA.BuildOutputEvent("OLateEBOut", "Emergency Brake not or too late commanded when required", "OLate", 0.0d, false);
var busCEBOutCause = busDriverIOFTA.BuildOutputEvent("CEBOut", "Emergency Brake commanded when not required", "C", 0.0d, false);
var busCEBIOutCause = busDriverIOFTA.BuildOutputEvent("CEBIOut", "EBI signalled when not required", "C", 0.0d, false);
var busOEBIOutCause = busDriverIOFTA.BuildOutputEvent("OEBIOut", "EBI not signalled when required", "O", 0.0d, false);
var busCEBInCause = busDriverIOFTA.BuildInputEvent("CEBIn", "Emergency Brake commanded when not required", "C", 0.0d, false);
var busOLateEBInCause = busDriverIOFTA.BuildInputEvent("OLateEBIn", "Emergency Brake not or too late commanded when required", "OLate", 0.0d, false);
var busCEBIInCause = busDriverIOFTA.BuildInputEvent("CEBIIn", "EBI signalled when not required", "C", 0.0d, false);
var busOEBIInCause = busDriverIOFTA.BuildInputEvent("OEBIIn", "EBI not signalled when required", "O", 0.0d, false);

var biutiuIntBusCEBOutCause = biutiuInternalBusFTA.BuildOutputEvent("CEBOut", "Emergency Brake commanded when not required", "C", 0.0d, false);
var biutiuIntBusOLateEBOutCause = biutiuInternalBusFTA.BuildOutputEvent("OLateEBOut", "Emergency Brake not or too late commanded when required", "OLate", 0.0d, false);
var biutiuIntBusCEBIOutCause = biutiuInternalBusFTA.BuildOutputEvent("CEBIOut", "EBI signalled when not required", "C", 0.0d, false);
var biutiuIntBusOEBIOutCause = biutiuInternalBusFTA.BuildOutputEvent("OEBIOut", "EBI not signalled when required", "O", 0.0d, false);
var biutiuIntBusCEBIInCause = biutiuInternalBusFTA.BuildInputEvent("CEBIIn", "EBI signalled when not required", "C", 0.0d, false);
var biutiuIntBusOEBIInCause = biutiuInternalBusFTA.BuildInputEvent("OEBIIn", "EBI not signalled when required", "O", 0.0d, false);
var biutiuIntBusCEBInCause = biutiuInternalBusFTA.BuildInputEvent("CEBIn", "Emergency Brake commanded when not required", "C", 0.0d, false);
var biutiuIntBusOLateEBInCause = biutiuInternalBusFTA.BuildInputEvent("OLateEBIn", "Emergency Brake not or too late commanded when required", "OLate", 0.0d, false);

var cpuCEBOutCause = cpuFTA.BuildOutputEvent("CEBOut", "Emergency Brake commanded when not required", "C", 0.0d, false);
var cpuOLateEBOutCause = cpuFTA.BuildOutputEvent("OLateEBOut", "Emergency Brake not or too late commanded when required", "OLate", 0.0d, false);
var cpuCEBIInCause = cpuFTA.BuildInputEvent("CEBIIn", "EBI signalled when not required", "C", 0.0d, false);
var cpuOEBIInCause = cpuFTA.BuildInputEvent("OEBIIn", "EBI not signalled when required", "O", 0.0d, false);

// Link BIUTIU external-internal events
biutiuOLateEBvIOOutCause.AddCause(busOLateEBOutCause);
biutiuComEBvIOOutCause.AddCause(busCEBOutCause);
biutiuComEBvMVBOutCause.AddCause(hwCEBOutCause);
biutiuOLateEBvMVBOutCause.AddCause(hwOLateEBOutCause);

hwOLateEBInCause.AddCause(biutiuIntBusOLateEBOutCause);
hwCEBInCause.AddCause(biutiuIntBusCEBOutCause);

busCEBIInCause.AddCause(biutiuCEBIInCause);
busOLateEBInCause.AddCause(biutiuOEBIInCause);
busCEBIInCause.AddCause(biutiuIntBusCEBOutCause);
busOLateEBInCause.AddCause(biutiuIntBusOLateEBOutCause);

biutiuIntBusCEBIInCause.AddCause(busCEBIOutCause);
biutiuIntBusOEBIInCause.AddCause(busOEBIOutCause);
biutiuIntBusCEBInCause.AddCause(cpuCEBOutCause);
biutiuIntBusOLateEBInCause.AddCause(cpuOLateEBOutCause);

cpuCEBIInCause.AddCause(biutiuIntBusCEBIOutCause);
cpuOEBIInCause.AddCause(biutiuIntBusOEBIOutCause);

// HW Driver Internal FTA
var hwOr1 = hwDriverIOFTA.BuildGate("Or1", "OR");
var hwOr2 = hwDriverIOFTA.BuildGate("Or2", "OR");

var hwCEBCause = hwDriverIOFTA.BuildBasicEvent("CEB", "HW driver failure causing Emergency Brake Signal when not required", "C", 1.4d, false);
var hwOLateEBCause = hwDriverIOFTA.BuildBasicEvent("OLateEB", "HW driver failure causing no or too late Emergency Brake signal", "OLate", 0.4d, false);

hwOr1.AddCause(hwCEBCause);
hwOr1.AddCause(hwCEBInCause);

hwOr2.AddCause(hwOLateEBCause);
hwOr2.AddCause(hwOLateEBInCause);

hwCEBOutCause.AddCause(hwOr1);
hwOLateEBOutCause.AddCause(hwOr2);

// Bus Driver IO Internal FTA
var busOr1 = busDriverIOFTA.BuildGate("Or1", "OR");
var busOr2 = busDriverIOFTA.BuildGate("Or2", "OR");
var busOr3 = busDriverIOFTA.BuildGate("Or3", "OR");
var busOr4 = busDriverIOFTA.BuildGate("Or4", "OR");

var busCSigCause = busDriverIOFTA.BuildBasicEvent("CSig", "Bus driver failure causing signal when not required", "C", 0.0d, false);
var busOLateSigCause = busDriverIOFTA.BuildBasicEvent("OLateSig", "Bus driver causing no signal or signal too late", "OLate", 0.0d, false);

busOr1.AddCause(busOLateSigCause);
busOr1.AddCause(busOEBIInCause);
busOr2.AddCause(busCSigCause);
busOr2.AddCause(busCEBIInCause);
busOr3.AddCause(busCEBInCause);
busOr3.AddCause(busCSigCause);
busOr4.AddCause(busOLateSigCause);
busOr4.AddCause(busOLateEBInCause);

busOEBIOutCause.AddCause(busOr1);
busCEBIOutCause.AddCause(busOr2);
busCEBOutCause.AddCause(busOr3);
busOLateEBOutCause.AddCause(busOr4);

// BIUTIU Internal Bus Internal FTA
var biutiuIntBusOr1 = biutiuInternalBusFTA.BuildGate("Or1", "OR");
var biutiuIntBusOr2 = biutiuInternalBusFTA.BuildGate("Or2", "OR");
var biutiuIntBusOr3 = biutiuInternalBusFTA.BuildGate("Or3", "OR");
var biutiuIntBusOr4 = biutiuInternalBusFTA.BuildGate("Or4", "OR");

var biutiuIntBusErrTrCause = biutiuInternalBusFTA.BuildBasicEvent("ErrTr", "Erroneous internal bus transfer", "Val", 0.07d, false);
var biutiuIntBusDefCause = biutiuInternalBusFTA.BuildBasicEvent("Def", "Internal bus defect", "Def", 0.0d, false);

biutiuIntBusOr1.AddCause(biutiuIntBusErrTrCause);
biutiuIntBusOr1.AddCause(biutiuIntBusCEBIInCause);
biutiuIntBusOr2.AddCause(biutiuIntBusErrTrCause);
biutiuIntBusOr2.AddCause(biutiuIntBusCEBInCause);
biutiuIntBusOr3.AddCause(biutiuIntBusDefCause);
biutiuIntBusOr3.AddCause(biutiuIntBusOEBIInCause);
biutiuIntBusOr4.AddCause(biutiuIntBusDefCause);
biutiuIntBusOr4.AddCause(biutiuIntBusOLateEBInCause);

biutiuIntBusCEBIOutCause.AddCause(biutiuIntBusOr1);
biutiuIntBusCEBOutCause.AddCause(biutiuIntBusOr2);
biutiuIntBusOEBIOutCause.AddCause(biutiuIntBusOr3);
biutiuIntBusOLateEBOutCause.AddCause(biutiuIntBusOr4);

// CPU Internal FTA
var cpuOr1 = cpuFTA.BuildGate("Or1", "OR");
var cpuOr2 = cpuFTA.BuildGate("Or2", "OR");

var cpuCEBCause = cpuFTA.BuildBasicEvent("CEB", "CPU failure causing Emergency Brake Signal when not required", "C", 1.2d, false);
var cpuOLateEBCause = cpuFTA.BuildBasicEvent("OLateEB", "CPU failure causing no or too late Emergency Brake signal", "OLate", 0.01d, false);

cpuOr1.AddCause(cpuCEBIInCause);
cpuOr1.AddCause(cpuCEBCause);
cpuOr2.AddCause(cpuOEBIInCause);
cpuOr2.AddCause(cpuOLateEBCause);

cpuCEBOutCause.AddCause(cpuOr1);
cpuOLateEBOutCause.AddCause(cpuOr2);

// Kernel Internal FTA
var mvbFTA = etcsFLPackage.BuildFaultTree("MVB hardware", kernelFTA);
var kernelIntBusFTA = etcsFLPackage.BuildFaultTree("Kernel Internal Bus", kernelFTA);
var mikroFTA = etcsFLPackage.BuildFaultTree("Mikrocontroller", kernelFTA);
var ioBoardFTA = etcsFLPackage.BuildFaultTree("IO Board", kernelFTA);

var mvbOEBIOutCause = mvbFTA.BuildOutputEvent("OEBIOut", "EBI not signalled when required", "O", 0.0d, false);
var mvbCEBIOutCause = mvbFTA.BuildOutputEvent("CEBIOut", "EBI signalled when not required", "C", 0.0d, false);
var mvbOEBIInCause = mvbFTA.BuildInputEvent("OEBIIn", "Omission of EBI signal", "O", 0.0d, false);
var mvbCEBIInCause = mvbFTA.BuildInputEvent("CEBIIn", "Commission of EBI signal", "C", 0.0d, false);

var kernelIntBusOEBIInCause = kernelIntBusFTA.BuildInputEvent("OEBIIn", "Omission of EBI signal", "O", 0.0d, false);
var kernelIntBusCEBIInCause = kernelIntBusFTA.BuildInputEvent("CEBIIn", "Commission of EBI signal", "C", 0.0d, false);
var kernelIntBusOEBIOutCause = kernelIntBusFTA.BuildOutputEvent("OEBIOut", "Omission of EBI signal", "O", 0.0d, false);
var kernelIntBusCEBIOutCause = kernelIntBusFTA.BuildOutputEvent("CEBIOut", "Commission of EBI signal", "C", 0.0d, false);
var kernelIntBusOTrBalOutCause = kernelIntBusFTA.BuildOutputEvent("OTrBalOut", "No train position via Balise", "O", 0.0d, false);
var kernelIntBusIncTrBalOutCause = kernelIntBusFTA.BuildOutputEvent("IncTrBalOut", "Incorrect train position via Balise", "Val", 0.0d, false);
var kernelIntBusIncTrLoopOutCause = kernelIntBusFTA.BuildOutputEvent("IncTrLoopOut", "Incorrect train position via Euroloop", "Val", 0.0d, false);
var kernelIntBusLowTrain1OutCause = kernelIntBusFTA.BuildOutputEvent("LowTrain1Out", "Train speed signal 1 too low", "Lo", 0.0d, false);
var kernelIntBusLowTrain2OutCause = kernelIntBusFTA.BuildOutputEvent("LowTrain2Out", "Train speed signal 2 too low", "Lo", 0.0d, false);
var kernelIntBusHighTrain1OutCause = kernelIntBusFTA.BuildOutputEvent("HighTrain1Out", "Train speed signal 1 too high", "Hi", 0.0d, false);
var kernelIntBusHighTrain2OutCause = kernelIntBusFTA.BuildOutputEvent("HighTrain2Out", "Train speed signal 2 too high", "Hi", 0.0d, false);

var kernelIntBusOTrBalInCause = kernelIntBusFTA.BuildInputEvent("OTrBalIn", "No train position via Balise", "O", 0.0d, false);
var kernelIntBusIncTrBalInCause = kernelIntBusFTA.BuildInputEvent("IncTrBalIn", "Incorrect train position via Balise", "Val", 0.0d, false);
var kernelIntBusIncTrLoopInCause = kernelIntBusFTA.BuildInputEvent("IncTrLoopIn", "Incorrect train position via Euroloop", "Val", 0.0d, false);
var kernelIntBusLowTrain1InCause = kernelIntBusFTA.BuildInputEvent("LowTrain1In", "Train speed signal 1 too low", "Lo", 0.0d, false);
var kernelIntBusLowTrain2InCause = kernelIntBusFTA.BuildInputEvent("LowTrain2In", "Train speed signal 2 too low", "Lo", 0.0d, false);
var kernelIntBusHighTrain1InCause = kernelIntBusFTA.BuildInputEvent("HighTrain1In", "Train speed signal 1 too high", "Hi", 0.0d, false);
var kernelIntBusHighTrain2InCause = kernelIntBusFTA.BuildInputEvent("HighTrain2In", "Train speed signal 2 too high", "Hi", 0.0d, false);

var mikroOEBIOutCause = mikroFTA.BuildOutputEvent("OEBIOut", "Omission of EBI signal", "O", 0.0d, false);
var mikroCEBIOutCause = mikroFTA.BuildOutputEvent("CEBIOut", "Commission of EBI signal", "C", 0.0d, false);
var mikroIncTrBalInCause = mikroFTA.BuildInputEvent("IncTrBalIn", "Incorrect train position via Balise", "Val", 0.0d, false);
var mikroOTrBalInCause = mikroFTA.BuildInputEvent("OTrBalIn", "No train position via Balise", "O", 0.0d, false);
var mikroIncTrLoopInCause = mikroFTA.BuildInputEvent("IncTrLoopIn", "Incorrect train position via Euroloop", "Val", 0.0d, false);
var mikroLowTrain1InCause = mikroFTA.BuildInputEvent("LowTrain1In", "Train speed signal 1 too low", "Lo", 0.0d, false);
var mikroLowTrain2InCause = mikroFTA.BuildInputEvent("LowTrain2In", "Train speed signal 2 too low", "Lo", 0.0d, false);
var mikroHighTrain1InCause = mikroFTA.BuildInputEvent("HighTrain1In", "Train speed signal 1 too high", "Hi", 0.0d, false);
var mikroHighTrain2InCause = mikroFTA.BuildInputEvent("HighTrain2In", "Train speed signal 2 too high", "Hi", 0.0d, false);

var ioBoardLowTrain1OutCause = ioBoardFTA.BuildOutputEvent("LowTrain1Out", "Train speed signal 1 too low", "Lo", 0.0d, false);
var ioBoardLowTrain2OutCause = ioBoardFTA.BuildOutputEvent("LowTrain2Out", "Train speed signal 2 too low", "Lo", 0.0d, false);
var ioBoardHighTrain1OutCause = ioBoardFTA.BuildOutputEvent("HighTrain1Out", "Train speed signal 1 too high", "Hi", 0.0d, false);
var ioBoardHighTrain2OutCause = ioBoardFTA.BuildOutputEvent("HighTrain2Out", "Train speed signal 2 too high", "Hi", 0.0d, false);
var ioBoardIncTrBalOutCause = ioBoardFTA.BuildOutputEvent("IncTrBalOut", "Incorrect train position via Balise", "Val", 0.0d, false);
var ioBoardOTrBalOutCause = ioBoardFTA.BuildOutputEvent("OTrBalOut", "No train position via Balise", "O", 0.0d, false);
var ioBoardIncTrLoopOutCause = ioBoardFTA.BuildOutputEvent("IncTrLoopOut", "Incorrect train position via Euroloop", "Val", 0.0d, false);

var ioBoardLowTrain1InCause = ioBoardFTA.BuildInputEvent("LowTrain1In", "Train speed signal 1 too low", "Lo", 0.0d, false);
var ioBoardLowTrain2InCause = ioBoardFTA.BuildInputEvent("LowTrain2In", "Train speed signal 2 too low", "Lo", 0.0d, false);
var ioBoardHighTrain1InCause = ioBoardFTA.BuildInputEvent("HighTrain1In", "Train speed signal 1 too high", "Hi", 0.0d, false);
var ioBoardHighTrain2InCause = ioBoardFTA.BuildInputEvent("HighTrain2In", "Train speed signal 2 too high", "Hi", 0.0d, false);
var ioBoardIncTrBalInCause = ioBoardFTA.BuildInputEvent("IncTrBalIn", "Incorrect train position via Balise", "Val", 0.0d, false);
var ioBoardOTrBalInCause = ioBoardFTA.BuildInputEvent("OTrBalIn", "No train position via Balise", "O", 0.0d, false);
var ioBoardIncTrLoopInCause = ioBoardFTA.BuildInputEvent("IncTrLoopIn", "Incorrect train position via Euroloop", "Val", 0.0d, false);

kernelOEBIOutCause.AddCause(mvbOEBIOutCause);
kernelCEBIOutCause.AddCause(mvbCEBIOutCause);

mvbOEBIInCause.AddCause(kernelIntBusOEBIOutCause);
mvbCEBIInCause.AddCause(kernelIntBusCEBIOutCause);

kernelIntBusOEBIInCause.AddCause(mikroOEBIOutCause);
kernelIntBusCEBIInCause.AddCause(mikroCEBIOutCause);
kernelIntBusLowTrain1InCause.AddCause(ioBoardLowTrain1OutCause);
kernelIntBusLowTrain2InCause.AddCause(ioBoardLowTrain2OutCause);
kernelIntBusHighTrain1InCause.AddCause(ioBoardHighTrain1OutCause);
kernelIntBusHighTrain2InCause.AddCause(ioBoardHighTrain2OutCause);
kernelIntBusIncTrBalInCause.AddCause(ioBoardIncTrBalOutCause);
kernelIntBusIncTrLoopInCause.AddCause(ioBoardIncTrLoopOutCause);
kernelIntBusOTrBalInCause.AddCause(ioBoardOTrBalOutCause);

mikroOTrBalInCause.AddCause(kernelIntBusOTrBalOutCause);
mikroIncTrBalInCause.AddCause(kernelIntBusIncTrBalOutCause);
mikroIncTrLoopInCause.AddCause(kernelIntBusIncTrLoopOutCause);
mikroLowTrain1InCause.AddCause(kernelIntBusLowTrain1OutCause);
mikroLowTrain2InCause.AddCause(kernelIntBusLowTrain2OutCause);
mikroHighTrain1InCause.AddCause(kernelIntBusHighTrain1OutCause);
mikroHighTrain2InCause.AddCause(kernelIntBusHighTrain2OutCause);

ioBoardLowTrain1InCause.AddCause(kernelLowTrain1InCause);
ioBoardLowTrain2InCause.AddCause(kernelLowTrain2InCause);
ioBoardHighTrain1InCause.AddCause(kernelHighTrain1InCause);
ioBoardHighTrain2InCause.AddCause(kernelHighTrain2InCause);
ioBoardIncTrBalInCause.AddCause(kernelIncTrainvBalInCause);
ioBoardIncTrLoopInCause.AddCause(kernelIncTrainvLoopInCause);
ioBoardOTrBalInCause.AddCause(kernelOTrainvBalInCause);

// MVB Hardware Internal FTA
var mvbOr1 = mvbFTA.BuildGate("Or1", "OR");
var mvbOr2 = mvbFTA.BuildGate("Or2", "OR");

var mvbCEBICause = mvbFTA.BuildBasicEvent("CEBI", "MVB HW failure causing EBI when not required", "C", 0.004d, false);
var mvbOEBICause = mvbFTA.BuildBasicEvent("OEBI", "MVB HW failure leading to omission of EBI signal", "O", 0.12d, false);

mvbOr1.AddCause(mvbOEBIInCause);
mvbOr1.AddCause(mvbOEBICause);
mvbOr2.AddCause(mvbCEBIInCause);
mvbOr2.AddCause(mvbCEBICause);

mvbOEBIOutCause.AddCause(mvbOr1);
mvbCEBIOutCause.AddCause(mvbOr2);

// Kernel Internal Bus Internal FTA
var kernelIntBusOr1 = kernelIntBusFTA.BuildGate("Or1", "OR");
var kernelIntBusOr2 = kernelIntBusFTA.BuildGate("Or2", "OR");
var kernelIntBusOr3 = kernelIntBusFTA.BuildGate("Or3", "OR");
var kernelIntBusOr4 = kernelIntBusFTA.BuildGate("Or4", "OR");
var kernelIntBusOr5 = kernelIntBusFTA.BuildGate("Or5", "OR");
var kernelIntBusOr6 = kernelIntBusFTA.BuildGate("Or6", "OR");
var kernelIntBusOr7 = kernelIntBusFTA.BuildGate("Or7", "OR");
var kernelIntBusOr8 = kernelIntBusFTA.BuildGate("Or8", "OR");
var kernelIntBusOr9 = kernelIntBusFTA.BuildGate("Or9", "OR");

var kernelIntBusErrTrCause = kernelIntBusFTA.BuildBasicEvent("BusErrTr", "Erroneous transmission", "Val", 0.008d, false);
var kernelIntBusOSignCause = kernelIntBusFTA.BuildBasicEvent("OSign", "Omission of signal", "O", 0.012d, false);

kernelIntBusOr1.AddCause(kernelIntBusIncTrBalInCause);
kernelIntBusOr1.AddCause(kernelIntBusErrTrCause);
kernelIntBusOr2.AddCause(kernelIntBusOEBIInCause);
kernelIntBusOr2.AddCause(kernelIntBusOSignCause);
kernelIntBusOr3.AddCause(kernelIntBusHighTrain1InCause);
kernelIntBusOr3.AddCause(kernelIntBusErrTrCause);
kernelIntBusOr4.AddCause(kernelIntBusLowTrain2InCause);
kernelIntBusOr4.AddCause(kernelIntBusErrTrCause);
kernelIntBusOr5.AddCause(kernelIntBusHighTrain2InCause);
kernelIntBusOr5.AddCause(kernelIntBusErrTrCause);
kernelIntBusOr6.AddCause(kernelIntBusCEBIInCause);
kernelIntBusOr6.AddCause(kernelIntBusErrTrCause);
kernelIntBusOr7.AddCause(kernelIntBusLowTrain1InCause);
kernelIntBusOr7.AddCause(kernelIntBusErrTrCause);
kernelIntBusOr8.AddCause(kernelIntBusOTrBalInCause);
kernelIntBusOr8.AddCause(kernelIntBusOSignCause);
kernelIntBusOr9.AddCause(kernelIntBusIncTrLoopInCause);
kernelIntBusOr9.AddCause(kernelIntBusOSignCause);

kernelIntBusIncTrBalOutCause.AddCause(kernelIntBusOr1);
kernelIntBusLowTrain1OutCause.AddCause(kernelIntBusOr7);
kernelIntBusHighTrain1OutCause.AddCause(kernelIntBusOr3);
kernelIntBusLowTrain2OutCause.AddCause(kernelIntBusOr4);
kernelIntBusHighTrain2OutCause.AddCause(kernelIntBusOr5);
kernelIntBusCEBIOutCause.AddCause(kernelIntBusOr6);
kernelIntBusOEBIOutCause.AddCause(kernelIntBusOr2);
kernelIntBusOTrBalOutCause.AddCause(kernelIntBusOr8);
kernelIntBusIncTrLoopOutCause.AddCause(kernelIntBusOr9);

// Mikrocontroller Internal FTA
var mikroOr1 = mikroFTA.BuildGate("Or1", "OR");
var mikroOr2 = mikroFTA.BuildGate("Or2", "OR");
var mikroAnd1 = mikroFTA.BuildGate("And1", "AND");
var mikroAnd2 = mikroFTA.BuildGate("And2", "AND");
var mikroAnd3 = mikroFTA.BuildGate("And3", "AND");

var mikroUDetCause = mikroFTA.BuildBasicEvent("UDet", "Undetected Kernel failure", "Val", 0.01d, false);
var mikroCActCause = mikroFTA.BuildBasicEvent("CAct", "Spurious activation", "C", 1.0d, false);

mikroOr1.AddCause(mikroCActCause);
mikroOr1.AddCause(mikroOTrBalInCause);
mikroOr1.AddCause(mikroAnd2);
mikroOr2.AddCause(mikroUDetCause);
mikroOr2.AddCause(mikroAnd1);
mikroOr2.AddCause(mikroAnd3);
mikroAnd1.AddCause(mikroLowTrain1InCause);
mikroAnd1.AddCause(mikroLowTrain2InCause);
mikroAnd2.AddCause(mikroHighTrain1InCause);
mikroAnd2.AddCause(mikroHighTrain2InCause);
mikroAnd3.AddCause(mikroIncTrLoopInCause);
mikroAnd3.AddCause(mikroIncTrBalInCause);

mikroCEBIOutCause.AddCause(mikroOr1);
mikroOEBIOutCause.AddCause(mikroOr2);

// IO Board Internal FTA
var ioBoardOr1 = ioBoardFTA.BuildGate("Or1", "OR");
var ioBoardOr2 = ioBoardFTA.BuildGate("Or2", "OR");
var ioBoardOr3 = ioBoardFTA.BuildGate("Or3", "OR");
var ioBoardOr4 = ioBoardFTA.BuildGate("Or4", "OR");
var ioBoardOr5 = ioBoardFTA.BuildGate("Or5", "OR");
var ioBoardOr6 = ioBoardFTA.BuildGate("Or6", "OR");
var ioBoardOr7 = ioBoardFTA.BuildGate("Or7", "OR");

var ioBoardLowTrain1Cause = ioBoardFTA.BuildBasicEvent("LowTrain1", "Internal failure causing speed signal 1 too low", "Lo", 0.6d, false);
var ioBoardLowTrain2Cause = ioBoardFTA.BuildBasicEvent("LowTrain2", "Internal failure causing speed signal 2 too low", "Lo", 0.6d, false);
var ioBoardHighTrain1Cause = ioBoardFTA.BuildBasicEvent("HighTrain1", "Internal failure causing speed signal 1 too high", "Hi", 3.2d, false);
var ioBoardHighTrain2Cause = ioBoardFTA.BuildBasicEvent("HighTrain2", "Internal failure causing speed signal 2 too high", "Hi", 3.8d, false);
var ioBoardIncTrDIO3Cause = ioBoardFTA.BuildBasicEvent("IncTrDIO3", "Internal failure causing incorrect train position DIO 3", "Val", 0.4d, false);
var ioBoardIncTrDIO4Cause = ioBoardFTA.BuildBasicEvent("IncTrDIO4", "Internal failure causing incorrect train position DIO 4", "Val", 0.4d, false);
var ioBoardOTrCause = ioBoardFTA.BuildBasicEvent("OTr", "Internal failure causing omission of train position", "O", 0.4d, false);

ioBoardOr1.AddCause(ioBoardLowTrain1InCause);
ioBoardOr1.AddCause(ioBoardLowTrain1Cause);
ioBoardOr2.AddCause(ioBoardHighTrain1InCause);
ioBoardOr2.AddCause(ioBoardHighTrain1Cause);
ioBoardOr3.AddCause(ioBoardLowTrain2InCause);
ioBoardOr3.AddCause(ioBoardLowTrain2Cause);
ioBoardOr4.AddCause(ioBoardHighTrain2InCause);
ioBoardOr4.AddCause(ioBoardHighTrain2Cause);
ioBoardOr5.AddCause(ioBoardIncTrDIO3Cause);
ioBoardOr5.AddCause(ioBoardIncTrBalInCause);
ioBoardOr6.AddCause(ioBoardOTrCause);
ioBoardOr6.AddCause(ioBoardOTrBalInCause);
ioBoardOr7.AddCause(ioBoardIncTrDIO4Cause);
ioBoardOr7.AddCause(ioBoardIncTrLoopInCause);

ioBoardLowTrain1OutCause.AddCause(ioBoardOr1);
ioBoardHighTrain1OutCause.AddCause(ioBoardOr2);
ioBoardLowTrain2OutCause.AddCause(ioBoardOr3);
ioBoardHighTrain1OutCause.AddCause(ioBoardOr4);
ioBoardIncTrBalOutCause.AddCause(ioBoardOr5);
ioBoardOTrBalOutCause.AddCause(ioBoardOr6);
ioBoardIncTrLoopOutCause.AddCause(ioBoardOr7);

// BTM Internal FTA
var btmOr1 = btmFTA.BuildGate("Or1", "OR");
var btmOr2 = btmFTA.BuildGate("Or2", "OR");

var btmOBalCause = btmFTA.BuildBasicEvent("OBal", "Internal BTM failure leading to balise group not detected", "O", 80.0d, false);
var btmErrBalCause = btmFTA.BuildBasicEvent("ErrBal", "Erroneous balise data processing", "Val", 0.01d, false);
var btmOTelCause = btmFTA.BuildBasicEvent("OTel", "Internal BTM failure leading to omission of tele-powering signal", "O", 10.0d, false);

btmOr1.AddCause(btmErrBalInCause);
btmOr1.AddCause(btmErrBalCause);
btmOr2.AddCause(btmOUpInCause);
btmOr2.AddCause(btmOBalCause);

btmIncTrainOutCause.AddCause(btmOr1);
btmOBalGroupOutCause.AddCause(btmOr2);
btmOTeleOutCause.AddCause(btmOTelCause);

// LTM Internal FTA
var ltmOr1 = ltmFTA.BuildGate("Or1", "OR");

var ltmErrLoopCause = ltmFTA.BuildBasicEvent("ErrLoop", "Erroneous loop data processing", "Val", 0.01d, false);
var ltmOActCause = ltmFTA.BuildBasicEvent("OAct", "Internal failure leading to omission of activation signal", "O", 10.0d, false);

ltmOr1.AddCause(ltmErrLoopCause);
ltmOr1.AddCause(ltmErrLoopInCause);

ltmErrTelOutCause.AddCause(ltmOr1);
ltmOmActOutCause.AddCause(ltmOActCause);

// ETCS Dependability Package
var etcsDependPackage : new m!DependabilityPackage;
etcsDependPackage.name = "ETCS";
topPackage.odeProductPackages.add(etcsDependPackage);

// ETCS Design Package
var etcsDesignPackage : new m!DesignPackage;
etcsDesignPackage.name = "ETCS";
etcsDesignPackage.description = "European Train Control System Design Package";
topPackage.odeProductPackages.add(etcsDesignPackage);

// ETCS System
var etcsSystem = etcsDesignPackage.BuildSystem("ETCS", "ETCS System");
var onBoardSystem = etcsDesignPackage.BuildSystem("OnBoard", "On-Board Unit of the ETCS");
var trackSystem = etcsDesignPackage.BuildSystem("Trackside", "Trackside Unit of the ETCS");

etcsSystem.AddFailureModel(etcsFTA);
onBoardSystem.AddFailureModel(onBoardFTA);
trackSystem.AddFailureModel(trackFTA);

trackSystem.AddKeyValue("isAbstract", "true");

etcsSystem.subSystems.add(onBoardSystem);
etcsSystem.subSystems.add(trackSystem);

// OnBoard System
var onBoardEBCvIOOutPort = onBoardSystem.BuildPort("EBCvIOOut", "Emergency Brake Command via IO", "OUT");
var onBoardEBCvMVBOutPort = onBoardSystem.BuildPort("EBCvMVBOut", "Emergency Brake Command via MVB", "OUT");
var onBoardBaliseAntennaPort = onBoardSystem.BuildPort("BaliseAntenna", "Balise Antenna Signal");
var onBoardEuroloopAntennaPort = onBoardSystem.BuildPort("EuroloopAntenna", "Euroloop Antenna Signal");
var onBoardTrain1InPort = onBoardSystem.BuildPort("Train1In", "Train Speed Signal 1", "IN");
var onBoardTrain2InPort = onBoardSystem.BuildPort("Train2In", "Train Speed Signal 2", "IN");
var onBoardDrivingDirectionInPort = onBoardSystem.BuildPort("DrivingDirectionIn", "Driving Direction Signal", "IN");
var onBoardCabStatusInPort = onBoardSystem.BuildPort("CabStatusIn", "Cab Status Signal", "IN");

// Trackside System
var trackBaliseAntennaPort = trackSystem.BuildPort("BaliseAntenna", "Balise Antenna Signal");
var trackEuroloopAntennaPort = trackSystem.BuildPort("EuroloopAntenna", "Euroloop Antenna Signal");

// Link OnBoard - Trackside external ports
etcsSystem.BuildSignal(trackBaliseAntennaPort, onBoardBaliseAntennaPort);
etcsSystem.BuildSignal(trackEuroloopAntennaPort, onBoardEuroloopAntennaPort);

// Link ETCS Ports to Failures


// OnBoard Internal Subsystems
var biutiuSystem = etcsDesignPackage.BuildSystem("BIUTIU", "BIUTIU");
var kernelSystem = etcsDesignPackage.BuildSystem("Kernel", "Kernel");
var btmSystem = etcsDesignPackage.BuildSystem("BTM", "BTM");
var ltmSystem = etcsDesignPackage.BuildSystem("LTM", "LTM");

biutiuSystem.AddFailureModel(biutiuFTA);
kernelSystem.AddFailureModel(kernelFTA);
btmSystem.AddFailureModel(btmFTA);
ltmSystem.AddFailureModel(ltmFTA);

onBoardSystem.subSystems.add(biutiuSystem);
onBoardSystem.subSystems.add(kernelSystem);
onBoardSystem.subSystems.add(btmSystem);
onBoardSystem.subSystems.add(ltmSystem);

var biutiuEBCvIOOutPort = biutiuSystem.BuildPort("EBCvIOOut", "Emergency Brake Command via IO", "OUT");
var biutiuEBCvMVBOutPort = biutiuSystem.BuildPort("EBCvMCBOut", "Emergency Brake Command via MVB", "OUT");
var biutiuEBIvMVBInPort = biutiuSystem.BuildPort("EBIvMVBIn", "Emergency Brake Intervention via MVB", "IN");

var kernelEBIvMVBOutPort = kernelSystem.BuildPort("EBIvMVBOut", "Emergency Brake Intervention - EBI via MVB", "OUT");
var kernelBaliseInPort = kernelSystem.BuildPort("BaliseIn", "Balise data via IO", "IN");
var kernelEuroloopInPort = kernelSystem.BuildPort("EuroloopIn", "Euroloop data via IO", "IN");
var kernelTrain1InPort = kernelSystem.BuildPort("Train1In", "Train Speed Signal 1 via IO", "IN");
var kernelTrain2InPort = kernelSystem.BuildPort("Train2In", "Train Speed Signal 2 via IO", "IN");

var btmBaliseOutPort = btmSystem.BuildPort("BaliseOut", "Balise data via IO", "OUT");
var btmAntennaPort = btmSystem.BuildPort("AntennaIn", "Antenna Signal");

var ltmLoopOutPort = ltmSystem.BuildPort("LoopOut", "Loop data via IO", "OUT");
var ltmAntennaPort = ltmSystem.BuildPort("AntennaIn", "Antenna Signal");

// Link OnBoard Internal Ports
onBoardSystem.BuildSignal(biutiuEBCvIOOutPort, onBoardEBCvIOOutPort);
onBoardSystem.BuildSignal(biutiuEBCvMVBOutPort, onBoardEBCvMVBOutPort);

onBoardSystem.BuildSignal(kernelEBIvMVBOutPort, biutiuEBIvMVBInPort);
onBoardSystem.BuildSignal(btmBaliseOutPort, kernelBaliseInPort);
onBoardSystem.BuildSignal(ltmLoopOutPort, kernelEuroloopInPort);
onBoardSystem.BuildSignal(onBoardTrain1InPort, kernelTrain1InPort);
onBoardSystem.BuildSignal(onBoardTrain2InPort, kernelTrain2InPort);

onBoardSystem.BuildSignal(onBoardBaliseAntennaPort, btmAntennaPort);
onBoardSystem.BuildSignal(onBoardEuroloopAntennaPort, ltmAntennaPort);

// Link OnBoard Ports to Failures
onBoardEBCvIOOutPort.AddFailure(onBoardComEBvIOOutCause);
onBoardEBCvIOOutPort.AddFailure(onBoardOLateEBvIOOutCause);
onBoardEBCvMVBOutPort.AddFailure(onBoardOLateEBvMVBOutCause);
onBoardEBCvMVBOutPort.AddFailure(onBoardComEBvMVBOutCause);

onBoardBaliseAntennaPort.AddFailure(onBoardErrBalInCause);
onBoardBaliseAntennaPort.AddFailure(onBoardOmBalInCause);
onBoardBaliseAntennaPort.AddFailure(onBoardOmTelOutCause);

onBoardEuroloopAntennaPort.AddFailure(onBoardErrLoopInCause);
onBoardEuroloopAntennaPort.AddFailure(onBoardOmActOutCause);

onBoardTrain1InPort.AddFailure(onBoardLowTrain1InCause);
onBoardTrain1InPort.AddFailure(onBoardHighTrain1InCause);
onBoardTrain2InPort.AddFailure(onBoardLowTrain2InCause);
onBoardTrain2InPort.AddFailure(onBoardHighTrain2InCause);

// BIUTIU Internal Subsystems
var hwDriverIOSystem = etcsDesignPackage.BuildSystem("HWDriverIO", "HW driver I/O");
var busDriverIOSystem = etcsDesignPackage.BuildSystem("BusDriverIO", "Bus driver I/O");
var dataStorageSystem = etcsDesignPackage.BuildSystem("DataStorage", "Data storage unit");
var ramSystem = etcsDesignPackage.BuildSystem("RAM", "RAM");
var cpuSystem = etcsDesignPackage.BuildSystem("CPU", "CPU");
var biutiuIntBusSystem = etcsDesignPackage.BuildSystem("InternalBus", "Internal Bus");

biutiuSystem.subSystems.add(hwDriverIOSystem);
biutiuSystem.subSystems.add(busDriverIOSystem);
biutiuSystem.subSystems.add(dataStorageSystem);
biutiuSystem.subSystems.add(ramSystem);
biutiuSystem.subSystems.add(cpuSystem);
biutiuSystem.subSystems.add(biutiuIntBusSystem);

hwDriverIOSystem.AddFailureModel(hwDriverIOFTA);
busDriverIOSystem.AddFailureModel(busDriverIOFTA);
cpuSystem.AddFailureModel(cpuFTA);
biutiuIntBusSystem.AddFailureModel(biutiuInternalBusFTA);

var hwIOOutPort = biutiuSystem.BuildPort("IOOut", "I/O interface", "OUT");
var hwIntBusPort = biutiuSystem.BuildPort("InternalBus", "Internal bus");
var busDriverIOOutPort = busDriverIOSystem.BuildPort("IOOut", "I/O interface", "OUT");
var busIntBusPort = busDriverIOSystem.BuildPort("InternalBus", "Internal bus");
var busEBIInPort = busDriverIOSystem.BuildPort("EBIIn", "EBI", "IN");
var dataIntBusPort = dataStorageSystem.BuildPort("InternalBus", "Internal bus");
var ramIntBusPort = ramSystem.BuildPort("InternalBus", "Internal bus");
var cpuIntBusPort = cpuSystem.BuildPort("InternalBus", "Internal bus");
var biutiuIntBusPort = biutiuIntBusSystem.BuildPort("InternalBus", "Internal bus");

biutiuSystem.BuildSignal(hwIOOutPort, biutiuEBCvIOOutPort);
biutiuSystem.BuildSignal(busDriverIOOutPort, biutiuEBCvMVBOutPort);
biutiuSystem.BuildSignal(biutiuEBIvMVBInPort, busEBIInPort);

biutiuSystem.BuildSignal(hwIntBusPort, biutiuIntBusPort);
biutiuSystem.BuildSignal(busIntBusPort, biutiuIntBusPort);
biutiuSystem.BuildSignal(dataIntBusPort, biutiuIntBusPort);
biutiuSystem.BuildSignal(ramIntBusPort, biutiuIntBusPort);
biutiuSystem.BuildSignal(cpuIntBusPort, biutiuIntBusPort);

// Link BIUTIU Ports to Failures
biutiuEBCvIOOutPort.AddFailure(biutiuOLateEBvIOOutCause);
biutiuEBCvIOOutPort.AddFailure(biutiuComEBvIOOutCause);
biutiuEBCvMVBOutPort.AddFailure(biutiuOLateEBvMVBOutCause);
biutiuEBCvMVBOutPort.AddFailure(biutiuComEBvMVBOutCause);
biutiuEBIvMVBInPort.AddFailure(biutiuCEBIInCause);
biutiuEBIvMVBInPort.AddFailure(biutiuOEBIInCause);

hwIOOutPort.AddFailure(hwCEBOutCause);
hwIOOutPort.AddFailure(hwOLateEBOutCause);
hwIntBusPort.AddFailure(hwCEBInCause);
hwIntBusPort.AddFailure(hwOLateEBInCause);

busIntBusPort.AddFailure(busOEBIOutCause);
busIntBusPort.AddFailure(busCEBIOutCause);
busIntBusPort.AddFailure(busCEBInCause);
busIntBusPort.AddFailure(busOLateEBInCause);
busEBIInPort.AddFailure(busOEBIInCause);
busEBIInPort.AddFailure(busCEBIInCause);
busDriverIOOutPort.AddFailure(busCEBOutCause);
busDriverIOOutPort.AddFailure(busOLateEBOutCause);

biutiuIntBusPort.AddFailure(biutiuIntBusCEBIInCause);
biutiuIntBusPort.AddFailure(biutiuIntBusCEBInCause);
biutiuIntBusPort.AddFailure(biutiuIntBusOEBIInCause);
biutiuIntBusPort.AddFailure(biutiuIntBusOLateEBInCause);

biutiuIntBusPort.AddFailure(biutiuIntBusCEBIOutCause);
biutiuIntBusPort.AddFailure(biutiuIntBusCEBOutCause);
biutiuIntBusPort.AddFailure(biutiuIntBusOEBIOutCause);
biutiuIntBusPort.AddFailure(biutiuIntBusOLateEBOutCause);

cpuIntBusPort.AddFailure(cpuOEBIInCause);
cpuIntBusPort.AddFailure(cpuCEBIInCause);
cpuIntBusPort.AddFailure(cpuCEBOutCause);
cpuIntBusPort.AddFailure(cpuOLateEBOutCause);

// Kernel Internal Subsystems
var mvbSystem = etcsDesignPackage.BuildSystem("MVB", "MVB hardware");
var ioBoardSystem = etcsDesignPackage.BuildSystem("IOBoard", "IO Board");
var kernelIntBusSystem = etcsDesignPackage.BuildSystem("InternalBus", "Internal Bus");
var mikroSystem = etcsDesignPackage.BuildSystem("Mikrocontroller", "Mikrocontroller");

mvbSystem.AddFailureModel(mvbFTA);
ioBoardSystem.AddFailureModel(ioBoardFTA);
kernelIntBusSystem.AddFailureModel(kernelIntBusFTA);
mikroSystem.AddFailureModel(mikroFTA);

kernelSystem.subSystems.add(mvbSystem);
kernelSystem.subSystems.add(ioBoardSystem);
kernelSystem.subSystems.add(kernelIntBusSystem);
kernelSystem.subSystems.add(mikroSystem);

// Kernel internal ports
var mvbEBIOutPort = mvbSystem.BuildPort("EBIOut", "Emergency brake Intervention - EBI", "OUT");
var mvbIntBusPort = mvbSystem.BuildPort("InternalBus", "Internal Bus");

var ioBoardIntBusPort = ioBoardSystem.BuildPort("InternalBus", "Internal Bus");
var ioBoardDIO1InPort = ioBoardSystem.BuildPort("DIO1", "DIO 1", "IN");
var ioBoardDIO2InPort = ioBoardSystem.BuildPort("DIO2", "DIO 2", "IN");
var ioBoardDIO3InPort = ioBoardSystem.BuildPort("DIO3", "DIO 3", "IN");
var ioBoardDIO4InPort = ioBoardSystem.BuildPort("DIO4", "DIO 4", "IN");

var kernelIntBusPort = kernelIntBusSystem.BuildPort("BusData", "Bus data");

var mikroIntBusPort = mikroSystem.BuildPort("InternalBus", "Internal Bus");

// Link internal-external Kernel Ports
kernelSystem.BuildSignal(mvbEBIOutPort, kernelEBIvMVBOutPort);
kernelSystem.BuildSignal(kernelBaliseInPort, ioBoardDIO1InPort);
kernelSystem.BuildSignal(kernelTrain1InPort, ioBoardDIO2InPort);
kernelSystem.BuildSignal(kernelTrain2InPort, ioBoardDIO3InPort);
kernelSystem.BuildSignal(kernelEuroloopInPort, ioBoardDIO4InPort);

kernelSystem.BuildSignal(ioBoardIntBusPort, kernelIntBusPort);
kernelSystem.BuildSignal(kernelIntBusPort, mikroIntBusPort);
kernelSystem.BuildSignal(kernelIntBusPort, mvbIntBusPort);

// Link Kernel Ports to Failures
kernelEBIvMVBOutPort.AddFailure(kernelOEBIOutCause);
kernelEBIvMVBOutPort.AddFailure(kernelCEBIOutCause);
kernelTrain1InPort.AddFailure(kernelLowTrain1InCause);
kernelTrain1InPort.AddFailure(kernelHighTrain1InCause);
kernelTrain2InPort.AddFailure(kernelLowTrain2InCause);
kernelTrain2InPort.AddFailure(kernelHighTrain2InCause);
kernelBaliseInPort.AddFailure(kernelIncTrainvBalInCause);
kernelBaliseInPort.AddFailure(kernelOTrainvBalInCause);
kernelEuroloopInPort.AddFailure(kernelIncTrainvLoopInCause);

mvbEBIOutPort.AddFailure(mvbOEBIOutCause);
mvbEBIOutPort.AddFailure(mvbCEBIOutCause);
mvbIntBusPort.AddFailure(mvbOEBIInCause);
mvbIntBusPort.AddFailure(mvbCEBIInCause);

kernelIntBusPort.AddFailure(kernelIntBusLowTrain1InCause);
kernelIntBusPort.AddFailure(kernelIntBusLowTrain2InCause);
kernelIntBusPort.AddFailure(kernelIntBusHighTrain1InCause);
kernelIntBusPort.AddFailure(kernelIntBusHighTrain2InCause);
kernelIntBusPort.AddFailure(kernelIntBusIncTrBalInCause);
kernelIntBusPort.AddFailure(kernelIntBusIncTrLoopInCause);
kernelIntBusPort.AddFailure(kernelIntBusOTrBalInCause);
kernelIntBusPort.AddFailure(kernelIntBusCEBIInCause);
kernelIntBusPort.AddFailure(kernelIntBusOEBIInCause);

kernelIntBusPort.AddFailure(kernelIntBusLowTrain1OutCause);
kernelIntBusPort.AddFailure(kernelIntBusLowTrain2OutCause);
kernelIntBusPort.AddFailure(kernelIntBusHighTrain1OutCause);
kernelIntBusPort.AddFailure(kernelIntBusHighTrain2OutCause);
kernelIntBusPort.AddFailure(kernelIntBusIncTrBalOutCause);
kernelIntBusPort.AddFailure(kernelIntBusIncTrLoopOutCause);
kernelIntBusPort.AddFailure(kernelIntBusOTrBalOutCause);
kernelIntBusPort.AddFailure(kernelIntBusCEBIOutCause);
kernelIntBusPort.AddFailure(kernelIntBusOEBIOutCause);

mikroIntBusPort.AddFailure(mikroCEBIOutCause);
mikroIntBusPort.AddFailure(mikroOEBIOutCause);
mikroIntBusPort.AddFailure(mikroIncTrLoopInCause);
mikroIntBusPort.AddFailure(mikroIncTrBalInCause);
mikroIntBusPort.AddFailure(mikroOTrBalInCause);
mikroIntBusPort.AddFailure(mikroLowTrain1InCause);
mikroIntBusPort.AddFailure(mikroLowTrain2InCause);
mikroIntBusPort.AddFailure(mikroHighTrain1InCause);
mikroIntBusPort.AddFailure(mikroHighTrain2InCause);

ioBoardDIO1InPort.AddFailure(ioBoardLowTrain1InCause);
ioBoardDIO1InPort.AddFailure(ioBoardHighTrain1InCause);
ioBoardDIO2InPort.AddFailure(ioBoardLowTrain2InCause);
ioBoardDIO2InPort.AddFailure(ioBoardHighTrain2InCause);
ioBoardDIO3InPort.AddFailure(ioBoardIncTrBalInCause);
ioBoardDIO3InPort.AddFailure(ioBoardOTrBalInCause);
ioBoardDIO4InPort.AddFailure(ioBoardIncTrLoopInCause);

ioBoardIntBusPort.AddFailure(ioBoardLowTrain1OutCause);
ioBoardIntBusPort.AddFailure(ioBoardHighTrain1OutCause);
ioBoardIntBusPort.AddFailure(ioBoardLowTrain2OutCause);
ioBoardIntBusPort.AddFailure(ioBoardHighTrain2OutCause);
ioBoardIntBusPort.AddFailure(ioBoardIncTrBalOutCause);
ioBoardIntBusPort.AddFailure(ioBoardIncTrLoopOutCause);
ioBoardIntBusPort.AddFailure(ioBoardOTrBalOutCause);

// Link BTM Ports to Failures
btmBaliseOutPort.AddFailure(btmOBalGroupOutCause);
btmBaliseOutPort.AddFailure(btmIncTrainOutCause);

btmAntennaPort.AddFailure(btmOUpInCause);
btmAntennaPort.AddFailure(btmErrBalInCause);
btmAntennaPort.AddFailure(btmOTeleOutCause);

// Link LTM Ports to Failures
ltmLoopOutPort.AddFailure(ltmErrTelOutCause);
ltmAntennaPort.AddFailure(ltmErrLoopInCause);
ltmAntennaPort.AddFailure(ltmOmActOutCause);

// Construct ETCS SACM packages

var etcsACP : new m!AssuranceCasePackage;
etcsACP.SetName("ETCS_ACP");
etcsACP.SetDescription("ETCS Assurance Case Package");
topPackage.assuranceCasePackages.add(etcsACP);

var etcsArgP : new m!ArgumentPackage;
etcsArgP.SetName("ETCS_ArgP");
etcsArgP.SetDescription("ETCS Argument Package");
etcsACP.argumentPackage.add(etcsArgP);

var etcsG1 = etcsArgP.BuildGoal("G1", "The European Train Control System (ETCS) is accepted as adequately safe");
var etcsG2 = etcsArgP.BuildGoal("G2", "On-board functions are acceptably safe");
var etcsG4 = etcsArgP.BuildGoal("G4", "Trackside functions are acceptably safe");
etcsG4.isAbstract = true;

var etcsG1SubGoals = Collection {etcsG2, etcsG4};

var etcsS1 = etcsArgP.LinkGoalToGoals(etcsG1, etcsG1SubGoals, "S1", "Argument of compliance with applicable safety standards & regulations (this includes system decomposition and identification of relevant hazards)");

var etcsC1 = etcsArgP.BuildContext("C1", "EN 50129");
var etcsC2 = etcsArgP.BuildContext("C2", "EN 50128");
var etcsC3 = etcsArgP.BuildContext("C3", "UNISIG ERTM/ETCS specification Subset-091, issue: 3.4.0");

var allContexts = Collection {etcsC1, etcsC2, etcsC3};

etcsArgP.LinkStrategyToContexts(etcsS1, allContexts, "", "");

// Under G2
var etcsG5 = etcsArgP.BuildGoal("G5", "Processes according to Safety Integrity Level(SIL) 4 have been applied");
var etcsG6 = etcsArgP.BuildGoal("G6", "System remains safe in the event of single random hardware faults");
var etcsG7 = etcsArgP.BuildGoal("G7", "Hazard Rate of on-board function(\"trusted\" parts)<=0,67e-09/h has been demonstrated");

var etcsG2SubGoals = Collection {etcsG5, etcsG6, etcsG7};

etcsArgP.LinkGoalToGoals(etcsG2, etcsG2SubGoals, "", "");

// Under G5
var etcsG8 = etcsArgP.BuildGoal("G8", "The Emergency Brake Command has been developed according to SIL 4 processes");

etcsArgP.LinkGoalToGoal(etcsG5, etcsG8, "S2", "Argument over compliance with SIL 4 processes for relevant functions");

// Under G8
var etcsSn1 = etcsArgP.BuildSolution("Sn1", "Safety case (including evidences of quality management and safety management");

etcsArgP.LinkGoalToEvidence(etcsG8, etcsSn1);

// Under G6
var etcsG9 = etcsArgP.BuildGoal("G9", "The Emergency Brake Command function remains safe in case of single random hardware faults");

etcsArgP.LinkGoalToGoal(etcsG6, etcsG9, "S3", "Argument over each onboard function remaining safe in case of single random hardware faults");

var etcsSn2 = etcsArgP.BuildSolution("Sn2", "Architectural design (e.g. showing transmission of the Emergency Brake command signal via both ways bus communication and hard-wired");
var etcsSn3 = etcsArgP.BuildSolution("Sn3", "Minimal Cut Set analyses of the Top Events \"Emergency Brake not or too late commanded when required\" and \"Emergency Brake commanded when not required\" do not reveal single-point-of-failures");

var etcsG6Evidence = Collection {etcsSn2, etcsSn3};

etcsArgP.LinkGoalToEvidence(etcsG6, etcsG6Evidence, "S5", "Argument based upon diverse forms of evidence");

// Under G7
var etcsG10 = etcsArgP.BuildGoal("G10", "Hazard Rate of hazardous events of the Emergency Brake Command function <=0,067e-09/h has been demonstrated");

etcsArgP.LinkGoalToGoal(etcsG7, etcsG10, "S4", "Argument over all relevant hazardous events");

var etcsSn4 = etcsArgP.BuildSolution("Sn4", "Quantitative fault tree analysis of the Top Events \"Emergency Brake not or too late commanded when required\" and \"Emergency Brake commanded when not required\"");

etcsArgP.LinkGoalToEvidence(etcsG10, etcsSn4);
