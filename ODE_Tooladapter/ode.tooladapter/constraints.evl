// Architecture package
context PhysicalComponent {

	constraint SubSystemType {
		check: self.subSystems.forAll(s|s.isTypeOf(PhysicalComponent))
		message: "Physical Component " + self.name + " must have only Physical Components as sub-systems."
	}
}

context Function {
	constraint HasPorts {
		check: self.ports.size() > 0
		message: "Function needs to have at least one port"
	}
	
	constraint PortsAreConnected {
		check: Signal.allInstances().collect(s|s.toPort).exist(p|self.ports.includes(p))
		message: "Function ports must be a destination of a signal"
	}
}

context Signal {
	constraint HasFromPort {
		check: self.fromPort.size() > 0
		message: "Signal " + self.name + " must have a from port"
	}
	
	constraint HasToPort {
		check: self.toPort.size() > 0
		message: "Signal " + self.name + " must have a to port"
	}
}


context Port {
	constraint PortWithInputFailure {
		check: self.direction = PortDirection#IN implies self.interfaceFailures.forAll(f|f.originType = FailureOriginType#Input)
		message: "Port " + self.name + " should only have input failures"
	}
	
	constraint PortWithOutputFailure {
		check: self.direction = PortDirection#OUT implies self.interfaceFailures.forAll(f|f.originType = FailureOriginType#Output)
		message: "Port " + self.name + " should only have output failures"
	}
	
	/*constraint PortIsConnectedToOtherPort {
		check {
			var package = self.eContainer();
			var signals = Signal.all();
			var portIsConnected = false;
			
			for(s in signals) {
				if(s.fromPort == self) {
					portIsConnected = true;
				}
				if(s.toPort == self) {
					portIsConnected = true;
				}
			}
			return portIsConnected;
		}
		message: "Port " + self.name + " is not connected to another port."
	}*/
}

// Dependability package
context Malfunction {
	constraint HasCorrespondingFunction {
		check: Function.all().malfunctions.flatten().includes(self)
		message: "Malfunction " + self.name + " must be referenced by a Function" 	
	}
}

context RiskAssessment {
	constraint HasCorrespondingHazard {
		check: self.hazard <> null
		message: "RiskAssessment " + self.name + " must associate to a Hazard"
	}
	
	constraint HasOneAccident {
		check: self.riskParameters.select(r|r.isTypeOf(Accident)).size <= 1
		message: "RiskAssessment " + self.name + " must associate to at most one Accident"
	}
	
	constraint HasOneSituation {
		check: self.riskParameters.select(r|r.isTypeOf(Situation)).size <= 1
		message: "RiskAssessment " + self.name + " must associate to at most one Situation"
	}
	
	constraint HasOneOperatorMeasure {
		check: self.riskParameters.select(r|r.isTypeOf(OperatorMeasure)).size <= 1
		message: "RiskAssessment " + self.name + " must associate to at most one OperatorMeasure"
	}
}

// Failurelogic package
context Cause {

	constraint outPutEventTypeOfGate {
		check {
			if(self.causeType = CauseType#OutputEvent) {
				if(self.isTypeOf(Gate)) {
					return true;
				}
				return false;
			}
	
			if(self.causeType = CauseType#InputEvent) {
				if(self.isTypeOf(Gate)) {
					return true;
				}
				return false;
			}
			return true;
		}
		message: "Out-/Input event "+ self.name +" has to be of type Gate."
	}
}

/*context Gate {
	constraint outPutEventHasCausesReferences{
		check {
			if(self.causeType = CauseType#OutputEvent) {
				if(self.causes.size() > 0){
					return true;
				}
				return false;
			}
			return true;
		}
		message: "Output event " + self.name + " does not reference any causes."
	}
}*/

