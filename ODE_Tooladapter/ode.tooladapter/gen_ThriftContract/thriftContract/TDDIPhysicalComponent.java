/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-14")
public class TDDIPhysicalComponent implements org.apache.thrift.TBase<TDDIPhysicalComponent, TDDIPhysicalComponent._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIPhysicalComponent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIPhysicalComponent");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OVERALL_LIFETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("OverallLifetime", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OVERALL_LIFETIME_TIME_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("OverallLifetimeTimeUnit", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CONTEXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Contexts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CONFIGURATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Configurations", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ports", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField SIGNALS_FIELD_DESC = new org.apache.thrift.protocol.TField("Signals", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SYSTEM_BOUNDARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("SystemBoundaries", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField APPLIED_STANDARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("AppliedStandards", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField REALISED_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("RealisedFunctions", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField AS_ASSET_FIELD_DESC = new org.apache.thrift.protocol.TField("AsAsset", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_REQUIREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityRequirements", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField ASSURANCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceLevel", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField FAILURE_MODELS_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureModels", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField SUB_SYSTEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("SubSystems", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField DIMENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Dimensions", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PRICE_PER_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("PricePerUnit", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField MASS_FIELD_DESC = new org.apache.thrift.protocol.TField("Mass", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField PROTECTION_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("ProtectionCategory", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField USEFUL_LIFETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("UsefulLifetime", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField USEFUL_LIFETIME_TIME_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("UsefulLifetimeTimeUnit", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField LOGICAL_COMPONENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("LogicalComponents", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField LIFECYCLE_CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("LifecycleConditions", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_PROCEDURE_FIELD_DESC = new org.apache.thrift.protocol.TField("MaintenanceProcedure", org.apache.thrift.protocol.TType.STRUCT, (short)27);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIPhysicalComponentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIPhysicalComponentTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public double OverallLifetime; // required
  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDITimeUnit OverallLifetimeTimeUnit; // required
  public java.util.List<TDDIContext> Contexts; // required
  public java.util.List<TDDIConfiguration> Configurations; // required
  public java.util.List<TDDIPort> Ports; // required
  public java.util.List<TDDISignal> Signals; // required
  public java.util.List<TDDISystemBoundary> SystemBoundaries; // required
  public java.util.List<TDDIAbstractStandardRef> AppliedStandards; // required
  public java.util.List<TDDIAbstractFunctionRef> RealisedFunctions; // required
  public TDDIAbstractAsset AsAsset; // required
  public java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements; // required
  public TDDIAssuranceLevel AssuranceLevel; // required
  public java.util.List<TDDIAbstractFailureModelRef> FailureModels; // required
  public java.util.List<TDDIAbstractSystemRef> SubSystems; // required
  public java.lang.String Dimensions; // required
  public int PricePerUnit; // required
  public double Mass; // required
  public int ProtectionCategory; // required
  public double UsefulLifetime; // required
  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDITimeUnit UsefulLifetimeTimeUnit; // required
  public java.util.List<TDDILogicalComponentRef> LogicalComponents; // required
  public java.util.List<TDDILifecycleCondition> LifecycleConditions; // required
  public TDDIMaintenanceProcedure MaintenanceProcedure; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    OVERALL_LIFETIME((short)5, "OverallLifetime"),
    /**
     * 
     * @see TDDITimeUnit
     */
    OVERALL_LIFETIME_TIME_UNIT((short)6, "OverallLifetimeTimeUnit"),
    CONTEXTS((short)7, "Contexts"),
    CONFIGURATIONS((short)8, "Configurations"),
    PORTS((short)9, "Ports"),
    SIGNALS((short)10, "Signals"),
    SYSTEM_BOUNDARIES((short)11, "SystemBoundaries"),
    APPLIED_STANDARDS((short)12, "AppliedStandards"),
    REALISED_FUNCTIONS((short)13, "RealisedFunctions"),
    AS_ASSET((short)14, "AsAsset"),
    DEPENDABILITY_REQUIREMENTS((short)15, "DependabilityRequirements"),
    ASSURANCE_LEVEL((short)16, "AssuranceLevel"),
    FAILURE_MODELS((short)17, "FailureModels"),
    SUB_SYSTEMS((short)18, "SubSystems"),
    DIMENSIONS((short)19, "Dimensions"),
    PRICE_PER_UNIT((short)20, "PricePerUnit"),
    MASS((short)21, "Mass"),
    PROTECTION_CATEGORY((short)22, "ProtectionCategory"),
    USEFUL_LIFETIME((short)23, "UsefulLifetime"),
    /**
     * 
     * @see TDDITimeUnit
     */
    USEFUL_LIFETIME_TIME_UNIT((short)24, "UsefulLifetimeTimeUnit"),
    LOGICAL_COMPONENTS((short)25, "LogicalComponents"),
    LIFECYCLE_CONDITIONS((short)26, "LifecycleConditions"),
    MAINTENANCE_PROCEDURE((short)27, "MaintenanceProcedure");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // OVERALL_LIFETIME
          return OVERALL_LIFETIME;
        case 6: // OVERALL_LIFETIME_TIME_UNIT
          return OVERALL_LIFETIME_TIME_UNIT;
        case 7: // CONTEXTS
          return CONTEXTS;
        case 8: // CONFIGURATIONS
          return CONFIGURATIONS;
        case 9: // PORTS
          return PORTS;
        case 10: // SIGNALS
          return SIGNALS;
        case 11: // SYSTEM_BOUNDARIES
          return SYSTEM_BOUNDARIES;
        case 12: // APPLIED_STANDARDS
          return APPLIED_STANDARDS;
        case 13: // REALISED_FUNCTIONS
          return REALISED_FUNCTIONS;
        case 14: // AS_ASSET
          return AS_ASSET;
        case 15: // DEPENDABILITY_REQUIREMENTS
          return DEPENDABILITY_REQUIREMENTS;
        case 16: // ASSURANCE_LEVEL
          return ASSURANCE_LEVEL;
        case 17: // FAILURE_MODELS
          return FAILURE_MODELS;
        case 18: // SUB_SYSTEMS
          return SUB_SYSTEMS;
        case 19: // DIMENSIONS
          return DIMENSIONS;
        case 20: // PRICE_PER_UNIT
          return PRICE_PER_UNIT;
        case 21: // MASS
          return MASS;
        case 22: // PROTECTION_CATEGORY
          return PROTECTION_CATEGORY;
        case 23: // USEFUL_LIFETIME
          return USEFUL_LIFETIME;
        case 24: // USEFUL_LIFETIME_TIME_UNIT
          return USEFUL_LIFETIME_TIME_UNIT;
        case 25: // LOGICAL_COMPONENTS
          return LOGICAL_COMPONENTS;
        case 26: // LIFECYCLE_CONDITIONS
          return LIFECYCLE_CONDITIONS;
        case 27: // MAINTENANCE_PROCEDURE
          return MAINTENANCE_PROCEDURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __OVERALLLIFETIME_ISSET_ID = 1;
  private static final int __PRICEPERUNIT_ISSET_ID = 2;
  private static final int __MASS_ISSET_ID = 3;
  private static final int __PROTECTIONCATEGORY_ISSET_ID = 4;
  private static final int __USEFULLIFETIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.OVERALL_LIFETIME, new org.apache.thrift.meta_data.FieldMetaData("OverallLifetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERALL_LIFETIME_TIME_UNIT, new org.apache.thrift.meta_data.FieldMetaData("OverallLifetimeTimeUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDITimeUnit.class)));
    tmpMap.put(_Fields.CONTEXTS, new org.apache.thrift.meta_data.FieldMetaData("Contexts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIContext.class))));
    tmpMap.put(_Fields.CONFIGURATIONS, new org.apache.thrift.meta_data.FieldMetaData("Configurations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIConfiguration.class))));
    tmpMap.put(_Fields.PORTS, new org.apache.thrift.meta_data.FieldMetaData("Ports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPort.class))));
    tmpMap.put(_Fields.SIGNALS, new org.apache.thrift.meta_data.FieldMetaData("Signals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISignal.class))));
    tmpMap.put(_Fields.SYSTEM_BOUNDARIES, new org.apache.thrift.meta_data.FieldMetaData("SystemBoundaries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISystemBoundary.class))));
    tmpMap.put(_Fields.APPLIED_STANDARDS, new org.apache.thrift.meta_data.FieldMetaData("AppliedStandards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractStandardRef.class))));
    tmpMap.put(_Fields.REALISED_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("RealisedFunctions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFunctionRef.class))));
    tmpMap.put(_Fields.AS_ASSET, new org.apache.thrift.meta_data.FieldMetaData("AsAsset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractAsset")));
    tmpMap.put(_Fields.DEPENDABILITY_REQUIREMENTS, new org.apache.thrift.meta_data.FieldMetaData("DependabilityRequirements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractDependabilityRequirementRef.class))));
    tmpMap.put(_Fields.ASSURANCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("AssuranceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAssuranceLevel")));
    tmpMap.put(_Fields.FAILURE_MODELS, new org.apache.thrift.meta_data.FieldMetaData("FailureModels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureModelRef.class))));
    tmpMap.put(_Fields.SUB_SYSTEMS, new org.apache.thrift.meta_data.FieldMetaData("SubSystems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractSystemRef.class))));
    tmpMap.put(_Fields.DIMENSIONS, new org.apache.thrift.meta_data.FieldMetaData("Dimensions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE_PER_UNIT, new org.apache.thrift.meta_data.FieldMetaData("PricePerUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MASS, new org.apache.thrift.meta_data.FieldMetaData("Mass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROTECTION_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("ProtectionCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USEFUL_LIFETIME, new org.apache.thrift.meta_data.FieldMetaData("UsefulLifetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USEFUL_LIFETIME_TIME_UNIT, new org.apache.thrift.meta_data.FieldMetaData("UsefulLifetimeTimeUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDITimeUnit.class)));
    tmpMap.put(_Fields.LOGICAL_COMPONENTS, new org.apache.thrift.meta_data.FieldMetaData("LogicalComponents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDILogicalComponentRef.class))));
    tmpMap.put(_Fields.LIFECYCLE_CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("LifecycleConditions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDILifecycleCondition.class))));
    tmpMap.put(_Fields.MAINTENANCE_PROCEDURE, new org.apache.thrift.meta_data.FieldMetaData("MaintenanceProcedure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMaintenanceProcedure.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIPhysicalComponent.class, metaDataMap);
  }

  public TDDIPhysicalComponent() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.OverallLifetime = 0;

    this.OverallLifetimeTimeUnit = thriftContract.TDDITimeUnit.TUHour;

    this.Contexts = new java.util.ArrayList<TDDIContext>();

    this.Configurations = new java.util.ArrayList<TDDIConfiguration>();

    this.Ports = new java.util.ArrayList<TDDIPort>();

    this.Signals = new java.util.ArrayList<TDDISignal>();

    this.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>();

    this.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>();

    this.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();

    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();

    this.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>();

    this.Dimensions = "";

    this.Mass = 0;

    this.UsefulLifetime = 0;

    this.UsefulLifetimeTimeUnit = thriftContract.TDDITimeUnit.TUMillisecond;

    this.LogicalComponents = new java.util.ArrayList<TDDILogicalComponentRef>();

    this.LifecycleConditions = new java.util.ArrayList<TDDILifecycleCondition>();

  }

  public TDDIPhysicalComponent(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    double OverallLifetime,
    TDDITimeUnit OverallLifetimeTimeUnit,
    java.util.List<TDDIContext> Contexts,
    java.util.List<TDDIConfiguration> Configurations,
    java.util.List<TDDIPort> Ports,
    java.util.List<TDDISignal> Signals,
    java.util.List<TDDISystemBoundary> SystemBoundaries,
    java.util.List<TDDIAbstractStandardRef> AppliedStandards,
    java.util.List<TDDIAbstractFunctionRef> RealisedFunctions,
    TDDIAbstractAsset AsAsset,
    java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements,
    TDDIAssuranceLevel AssuranceLevel,
    java.util.List<TDDIAbstractFailureModelRef> FailureModels,
    java.util.List<TDDIAbstractSystemRef> SubSystems,
    java.lang.String Dimensions,
    int PricePerUnit,
    double Mass,
    int ProtectionCategory,
    double UsefulLifetime,
    TDDITimeUnit UsefulLifetimeTimeUnit,
    java.util.List<TDDILogicalComponentRef> LogicalComponents,
    java.util.List<TDDILifecycleCondition> LifecycleConditions,
    TDDIMaintenanceProcedure MaintenanceProcedure)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.OverallLifetime = OverallLifetime;
    setOverallLifetimeIsSet(true);
    this.OverallLifetimeTimeUnit = OverallLifetimeTimeUnit;
    this.Contexts = Contexts;
    this.Configurations = Configurations;
    this.Ports = Ports;
    this.Signals = Signals;
    this.SystemBoundaries = SystemBoundaries;
    this.AppliedStandards = AppliedStandards;
    this.RealisedFunctions = RealisedFunctions;
    this.AsAsset = AsAsset;
    this.DependabilityRequirements = DependabilityRequirements;
    this.AssuranceLevel = AssuranceLevel;
    this.FailureModels = FailureModels;
    this.SubSystems = SubSystems;
    this.Dimensions = Dimensions;
    this.PricePerUnit = PricePerUnit;
    setPricePerUnitIsSet(true);
    this.Mass = Mass;
    setMassIsSet(true);
    this.ProtectionCategory = ProtectionCategory;
    setProtectionCategoryIsSet(true);
    this.UsefulLifetime = UsefulLifetime;
    setUsefulLifetimeIsSet(true);
    this.UsefulLifetimeTimeUnit = UsefulLifetimeTimeUnit;
    this.LogicalComponents = LogicalComponents;
    this.LifecycleConditions = LifecycleConditions;
    this.MaintenanceProcedure = MaintenanceProcedure;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIPhysicalComponent(TDDIPhysicalComponent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    this.OverallLifetime = other.OverallLifetime;
    if (other.isSetOverallLifetimeTimeUnit()) {
      this.OverallLifetimeTimeUnit = other.OverallLifetimeTimeUnit;
    }
    if (other.isSetContexts()) {
      java.util.List<TDDIContext> __this__Contexts = new java.util.ArrayList<TDDIContext>(other.Contexts.size());
      for (TDDIContext other_element : other.Contexts) {
        __this__Contexts.add(new TDDIContext(other_element));
      }
      this.Contexts = __this__Contexts;
    }
    if (other.isSetConfigurations()) {
      java.util.List<TDDIConfiguration> __this__Configurations = new java.util.ArrayList<TDDIConfiguration>(other.Configurations.size());
      for (TDDIConfiguration other_element : other.Configurations) {
        __this__Configurations.add(new TDDIConfiguration(other_element));
      }
      this.Configurations = __this__Configurations;
    }
    if (other.isSetPorts()) {
      java.util.List<TDDIPort> __this__Ports = new java.util.ArrayList<TDDIPort>(other.Ports.size());
      for (TDDIPort other_element : other.Ports) {
        __this__Ports.add(new TDDIPort(other_element));
      }
      this.Ports = __this__Ports;
    }
    if (other.isSetSignals()) {
      java.util.List<TDDISignal> __this__Signals = new java.util.ArrayList<TDDISignal>(other.Signals.size());
      for (TDDISignal other_element : other.Signals) {
        __this__Signals.add(new TDDISignal(other_element));
      }
      this.Signals = __this__Signals;
    }
    if (other.isSetSystemBoundaries()) {
      java.util.List<TDDISystemBoundary> __this__SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>(other.SystemBoundaries.size());
      for (TDDISystemBoundary other_element : other.SystemBoundaries) {
        __this__SystemBoundaries.add(new TDDISystemBoundary(other_element));
      }
      this.SystemBoundaries = __this__SystemBoundaries;
    }
    if (other.isSetAppliedStandards()) {
      java.util.List<TDDIAbstractStandardRef> __this__AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>(other.AppliedStandards.size());
      for (TDDIAbstractStandardRef other_element : other.AppliedStandards) {
        __this__AppliedStandards.add(new TDDIAbstractStandardRef(other_element));
      }
      this.AppliedStandards = __this__AppliedStandards;
    }
    if (other.isSetRealisedFunctions()) {
      java.util.List<TDDIAbstractFunctionRef> __this__RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(other.RealisedFunctions.size());
      for (TDDIAbstractFunctionRef other_element : other.RealisedFunctions) {
        __this__RealisedFunctions.add(new TDDIAbstractFunctionRef(other_element));
      }
      this.RealisedFunctions = __this__RealisedFunctions;
    }
    if (other.isSetAsAsset()) {
      this.AsAsset = new TDDIAbstractAsset(other.AsAsset);
    }
    if (other.isSetDependabilityRequirements()) {
      java.util.List<TDDIAbstractDependabilityRequirementRef> __this__DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(other.DependabilityRequirements.size());
      for (TDDIAbstractDependabilityRequirementRef other_element : other.DependabilityRequirements) {
        __this__DependabilityRequirements.add(new TDDIAbstractDependabilityRequirementRef(other_element));
      }
      this.DependabilityRequirements = __this__DependabilityRequirements;
    }
    if (other.isSetAssuranceLevel()) {
      this.AssuranceLevel = new TDDIAssuranceLevel(other.AssuranceLevel);
    }
    if (other.isSetFailureModels()) {
      java.util.List<TDDIAbstractFailureModelRef> __this__FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(other.FailureModels.size());
      for (TDDIAbstractFailureModelRef other_element : other.FailureModels) {
        __this__FailureModels.add(new TDDIAbstractFailureModelRef(other_element));
      }
      this.FailureModels = __this__FailureModels;
    }
    if (other.isSetSubSystems()) {
      java.util.List<TDDIAbstractSystemRef> __this__SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>(other.SubSystems.size());
      for (TDDIAbstractSystemRef other_element : other.SubSystems) {
        __this__SubSystems.add(new TDDIAbstractSystemRef(other_element));
      }
      this.SubSystems = __this__SubSystems;
    }
    if (other.isSetDimensions()) {
      this.Dimensions = other.Dimensions;
    }
    this.PricePerUnit = other.PricePerUnit;
    this.Mass = other.Mass;
    this.ProtectionCategory = other.ProtectionCategory;
    this.UsefulLifetime = other.UsefulLifetime;
    if (other.isSetUsefulLifetimeTimeUnit()) {
      this.UsefulLifetimeTimeUnit = other.UsefulLifetimeTimeUnit;
    }
    if (other.isSetLogicalComponents()) {
      java.util.List<TDDILogicalComponentRef> __this__LogicalComponents = new java.util.ArrayList<TDDILogicalComponentRef>(other.LogicalComponents.size());
      for (TDDILogicalComponentRef other_element : other.LogicalComponents) {
        __this__LogicalComponents.add(new TDDILogicalComponentRef(other_element));
      }
      this.LogicalComponents = __this__LogicalComponents;
    }
    if (other.isSetLifecycleConditions()) {
      java.util.List<TDDILifecycleCondition> __this__LifecycleConditions = new java.util.ArrayList<TDDILifecycleCondition>(other.LifecycleConditions.size());
      for (TDDILifecycleCondition other_element : other.LifecycleConditions) {
        __this__LifecycleConditions.add(new TDDILifecycleCondition(other_element));
      }
      this.LifecycleConditions = __this__LifecycleConditions;
    }
    if (other.isSetMaintenanceProcedure()) {
      this.MaintenanceProcedure = new TDDIMaintenanceProcedure(other.MaintenanceProcedure);
    }
  }

  public TDDIPhysicalComponent deepCopy() {
    return new TDDIPhysicalComponent(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.OverallLifetime = 0;

    this.OverallLifetimeTimeUnit = thriftContract.TDDITimeUnit.TUHour;

    this.Contexts = new java.util.ArrayList<TDDIContext>();

    this.Configurations = new java.util.ArrayList<TDDIConfiguration>();

    this.Ports = new java.util.ArrayList<TDDIPort>();

    this.Signals = new java.util.ArrayList<TDDISignal>();

    this.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>();

    this.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>();

    this.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();

    this.AsAsset = null;
    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.AssuranceLevel = null;
    this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();

    this.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>();

    this.Dimensions = "";

    setPricePerUnitIsSet(false);
    this.PricePerUnit = 0;
    this.Mass = 0;

    setProtectionCategoryIsSet(false);
    this.ProtectionCategory = 0;
    this.UsefulLifetime = 0;

    this.UsefulLifetimeTimeUnit = thriftContract.TDDITimeUnit.TUMillisecond;

    this.LogicalComponents = new java.util.ArrayList<TDDILogicalComponentRef>();

    this.LifecycleConditions = new java.util.ArrayList<TDDILifecycleCondition>();

    this.MaintenanceProcedure = null;
  }

  public long getId() {
    return this.Id;
  }

  public TDDIPhysicalComponent setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIPhysicalComponent setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIPhysicalComponent setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIPhysicalComponent setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public double getOverallLifetime() {
    return this.OverallLifetime;
  }

  public TDDIPhysicalComponent setOverallLifetime(double OverallLifetime) {
    this.OverallLifetime = OverallLifetime;
    setOverallLifetimeIsSet(true);
    return this;
  }

  public void unsetOverallLifetime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERALLLIFETIME_ISSET_ID);
  }

  /** Returns true if field OverallLifetime is set (has been assigned a value) and false otherwise */
  public boolean isSetOverallLifetime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERALLLIFETIME_ISSET_ID);
  }

  public void setOverallLifetimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERALLLIFETIME_ISSET_ID, value);
  }

  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDITimeUnit getOverallLifetimeTimeUnit() {
    return this.OverallLifetimeTimeUnit;
  }

  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDIPhysicalComponent setOverallLifetimeTimeUnit(TDDITimeUnit OverallLifetimeTimeUnit) {
    this.OverallLifetimeTimeUnit = OverallLifetimeTimeUnit;
    return this;
  }

  public void unsetOverallLifetimeTimeUnit() {
    this.OverallLifetimeTimeUnit = null;
  }

  /** Returns true if field OverallLifetimeTimeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetOverallLifetimeTimeUnit() {
    return this.OverallLifetimeTimeUnit != null;
  }

  public void setOverallLifetimeTimeUnitIsSet(boolean value) {
    if (!value) {
      this.OverallLifetimeTimeUnit = null;
    }
  }

  public int getContextsSize() {
    return (this.Contexts == null) ? 0 : this.Contexts.size();
  }

  public java.util.Iterator<TDDIContext> getContextsIterator() {
    return (this.Contexts == null) ? null : this.Contexts.iterator();
  }

  public void addToContexts(TDDIContext elem) {
    if (this.Contexts == null) {
      this.Contexts = new java.util.ArrayList<TDDIContext>();
    }
    this.Contexts.add(elem);
  }

  public java.util.List<TDDIContext> getContexts() {
    return this.Contexts;
  }

  public TDDIPhysicalComponent setContexts(java.util.List<TDDIContext> Contexts) {
    this.Contexts = Contexts;
    return this;
  }

  public void unsetContexts() {
    this.Contexts = null;
  }

  /** Returns true if field Contexts is set (has been assigned a value) and false otherwise */
  public boolean isSetContexts() {
    return this.Contexts != null;
  }

  public void setContextsIsSet(boolean value) {
    if (!value) {
      this.Contexts = null;
    }
  }

  public int getConfigurationsSize() {
    return (this.Configurations == null) ? 0 : this.Configurations.size();
  }

  public java.util.Iterator<TDDIConfiguration> getConfigurationsIterator() {
    return (this.Configurations == null) ? null : this.Configurations.iterator();
  }

  public void addToConfigurations(TDDIConfiguration elem) {
    if (this.Configurations == null) {
      this.Configurations = new java.util.ArrayList<TDDIConfiguration>();
    }
    this.Configurations.add(elem);
  }

  public java.util.List<TDDIConfiguration> getConfigurations() {
    return this.Configurations;
  }

  public TDDIPhysicalComponent setConfigurations(java.util.List<TDDIConfiguration> Configurations) {
    this.Configurations = Configurations;
    return this;
  }

  public void unsetConfigurations() {
    this.Configurations = null;
  }

  /** Returns true if field Configurations is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigurations() {
    return this.Configurations != null;
  }

  public void setConfigurationsIsSet(boolean value) {
    if (!value) {
      this.Configurations = null;
    }
  }

  public int getPortsSize() {
    return (this.Ports == null) ? 0 : this.Ports.size();
  }

  public java.util.Iterator<TDDIPort> getPortsIterator() {
    return (this.Ports == null) ? null : this.Ports.iterator();
  }

  public void addToPorts(TDDIPort elem) {
    if (this.Ports == null) {
      this.Ports = new java.util.ArrayList<TDDIPort>();
    }
    this.Ports.add(elem);
  }

  public java.util.List<TDDIPort> getPorts() {
    return this.Ports;
  }

  public TDDIPhysicalComponent setPorts(java.util.List<TDDIPort> Ports) {
    this.Ports = Ports;
    return this;
  }

  public void unsetPorts() {
    this.Ports = null;
  }

  /** Returns true if field Ports is set (has been assigned a value) and false otherwise */
  public boolean isSetPorts() {
    return this.Ports != null;
  }

  public void setPortsIsSet(boolean value) {
    if (!value) {
      this.Ports = null;
    }
  }

  public int getSignalsSize() {
    return (this.Signals == null) ? 0 : this.Signals.size();
  }

  public java.util.Iterator<TDDISignal> getSignalsIterator() {
    return (this.Signals == null) ? null : this.Signals.iterator();
  }

  public void addToSignals(TDDISignal elem) {
    if (this.Signals == null) {
      this.Signals = new java.util.ArrayList<TDDISignal>();
    }
    this.Signals.add(elem);
  }

  public java.util.List<TDDISignal> getSignals() {
    return this.Signals;
  }

  public TDDIPhysicalComponent setSignals(java.util.List<TDDISignal> Signals) {
    this.Signals = Signals;
    return this;
  }

  public void unsetSignals() {
    this.Signals = null;
  }

  /** Returns true if field Signals is set (has been assigned a value) and false otherwise */
  public boolean isSetSignals() {
    return this.Signals != null;
  }

  public void setSignalsIsSet(boolean value) {
    if (!value) {
      this.Signals = null;
    }
  }

  public int getSystemBoundariesSize() {
    return (this.SystemBoundaries == null) ? 0 : this.SystemBoundaries.size();
  }

  public java.util.Iterator<TDDISystemBoundary> getSystemBoundariesIterator() {
    return (this.SystemBoundaries == null) ? null : this.SystemBoundaries.iterator();
  }

  public void addToSystemBoundaries(TDDISystemBoundary elem) {
    if (this.SystemBoundaries == null) {
      this.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>();
    }
    this.SystemBoundaries.add(elem);
  }

  public java.util.List<TDDISystemBoundary> getSystemBoundaries() {
    return this.SystemBoundaries;
  }

  public TDDIPhysicalComponent setSystemBoundaries(java.util.List<TDDISystemBoundary> SystemBoundaries) {
    this.SystemBoundaries = SystemBoundaries;
    return this;
  }

  public void unsetSystemBoundaries() {
    this.SystemBoundaries = null;
  }

  /** Returns true if field SystemBoundaries is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemBoundaries() {
    return this.SystemBoundaries != null;
  }

  public void setSystemBoundariesIsSet(boolean value) {
    if (!value) {
      this.SystemBoundaries = null;
    }
  }

  public int getAppliedStandardsSize() {
    return (this.AppliedStandards == null) ? 0 : this.AppliedStandards.size();
  }

  public java.util.Iterator<TDDIAbstractStandardRef> getAppliedStandardsIterator() {
    return (this.AppliedStandards == null) ? null : this.AppliedStandards.iterator();
  }

  public void addToAppliedStandards(TDDIAbstractStandardRef elem) {
    if (this.AppliedStandards == null) {
      this.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>();
    }
    this.AppliedStandards.add(elem);
  }

  public java.util.List<TDDIAbstractStandardRef> getAppliedStandards() {
    return this.AppliedStandards;
  }

  public TDDIPhysicalComponent setAppliedStandards(java.util.List<TDDIAbstractStandardRef> AppliedStandards) {
    this.AppliedStandards = AppliedStandards;
    return this;
  }

  public void unsetAppliedStandards() {
    this.AppliedStandards = null;
  }

  /** Returns true if field AppliedStandards is set (has been assigned a value) and false otherwise */
  public boolean isSetAppliedStandards() {
    return this.AppliedStandards != null;
  }

  public void setAppliedStandardsIsSet(boolean value) {
    if (!value) {
      this.AppliedStandards = null;
    }
  }

  public int getRealisedFunctionsSize() {
    return (this.RealisedFunctions == null) ? 0 : this.RealisedFunctions.size();
  }

  public java.util.Iterator<TDDIAbstractFunctionRef> getRealisedFunctionsIterator() {
    return (this.RealisedFunctions == null) ? null : this.RealisedFunctions.iterator();
  }

  public void addToRealisedFunctions(TDDIAbstractFunctionRef elem) {
    if (this.RealisedFunctions == null) {
      this.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();
    }
    this.RealisedFunctions.add(elem);
  }

  public java.util.List<TDDIAbstractFunctionRef> getRealisedFunctions() {
    return this.RealisedFunctions;
  }

  public TDDIPhysicalComponent setRealisedFunctions(java.util.List<TDDIAbstractFunctionRef> RealisedFunctions) {
    this.RealisedFunctions = RealisedFunctions;
    return this;
  }

  public void unsetRealisedFunctions() {
    this.RealisedFunctions = null;
  }

  /** Returns true if field RealisedFunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetRealisedFunctions() {
    return this.RealisedFunctions != null;
  }

  public void setRealisedFunctionsIsSet(boolean value) {
    if (!value) {
      this.RealisedFunctions = null;
    }
  }

  public TDDIAbstractAsset getAsAsset() {
    return this.AsAsset;
  }

  public TDDIPhysicalComponent setAsAsset(TDDIAbstractAsset AsAsset) {
    this.AsAsset = AsAsset;
    return this;
  }

  public void unsetAsAsset() {
    this.AsAsset = null;
  }

  /** Returns true if field AsAsset is set (has been assigned a value) and false otherwise */
  public boolean isSetAsAsset() {
    return this.AsAsset != null;
  }

  public void setAsAssetIsSet(boolean value) {
    if (!value) {
      this.AsAsset = null;
    }
  }

  public int getDependabilityRequirementsSize() {
    return (this.DependabilityRequirements == null) ? 0 : this.DependabilityRequirements.size();
  }

  public java.util.Iterator<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirementsIterator() {
    return (this.DependabilityRequirements == null) ? null : this.DependabilityRequirements.iterator();
  }

  public void addToDependabilityRequirements(TDDIAbstractDependabilityRequirementRef elem) {
    if (this.DependabilityRequirements == null) {
      this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();
    }
    this.DependabilityRequirements.add(elem);
  }

  public java.util.List<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirements() {
    return this.DependabilityRequirements;
  }

  public TDDIPhysicalComponent setDependabilityRequirements(java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements) {
    this.DependabilityRequirements = DependabilityRequirements;
    return this;
  }

  public void unsetDependabilityRequirements() {
    this.DependabilityRequirements = null;
  }

  /** Returns true if field DependabilityRequirements is set (has been assigned a value) and false otherwise */
  public boolean isSetDependabilityRequirements() {
    return this.DependabilityRequirements != null;
  }

  public void setDependabilityRequirementsIsSet(boolean value) {
    if (!value) {
      this.DependabilityRequirements = null;
    }
  }

  public TDDIAssuranceLevel getAssuranceLevel() {
    return this.AssuranceLevel;
  }

  public TDDIPhysicalComponent setAssuranceLevel(TDDIAssuranceLevel AssuranceLevel) {
    this.AssuranceLevel = AssuranceLevel;
    return this;
  }

  public void unsetAssuranceLevel() {
    this.AssuranceLevel = null;
  }

  /** Returns true if field AssuranceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceLevel() {
    return this.AssuranceLevel != null;
  }

  public void setAssuranceLevelIsSet(boolean value) {
    if (!value) {
      this.AssuranceLevel = null;
    }
  }

  public int getFailureModelsSize() {
    return (this.FailureModels == null) ? 0 : this.FailureModels.size();
  }

  public java.util.Iterator<TDDIAbstractFailureModelRef> getFailureModelsIterator() {
    return (this.FailureModels == null) ? null : this.FailureModels.iterator();
  }

  public void addToFailureModels(TDDIAbstractFailureModelRef elem) {
    if (this.FailureModels == null) {
      this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();
    }
    this.FailureModels.add(elem);
  }

  public java.util.List<TDDIAbstractFailureModelRef> getFailureModels() {
    return this.FailureModels;
  }

  public TDDIPhysicalComponent setFailureModels(java.util.List<TDDIAbstractFailureModelRef> FailureModels) {
    this.FailureModels = FailureModels;
    return this;
  }

  public void unsetFailureModels() {
    this.FailureModels = null;
  }

  /** Returns true if field FailureModels is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureModels() {
    return this.FailureModels != null;
  }

  public void setFailureModelsIsSet(boolean value) {
    if (!value) {
      this.FailureModels = null;
    }
  }

  public int getSubSystemsSize() {
    return (this.SubSystems == null) ? 0 : this.SubSystems.size();
  }

  public java.util.Iterator<TDDIAbstractSystemRef> getSubSystemsIterator() {
    return (this.SubSystems == null) ? null : this.SubSystems.iterator();
  }

  public void addToSubSystems(TDDIAbstractSystemRef elem) {
    if (this.SubSystems == null) {
      this.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>();
    }
    this.SubSystems.add(elem);
  }

  public java.util.List<TDDIAbstractSystemRef> getSubSystems() {
    return this.SubSystems;
  }

  public TDDIPhysicalComponent setSubSystems(java.util.List<TDDIAbstractSystemRef> SubSystems) {
    this.SubSystems = SubSystems;
    return this;
  }

  public void unsetSubSystems() {
    this.SubSystems = null;
  }

  /** Returns true if field SubSystems is set (has been assigned a value) and false otherwise */
  public boolean isSetSubSystems() {
    return this.SubSystems != null;
  }

  public void setSubSystemsIsSet(boolean value) {
    if (!value) {
      this.SubSystems = null;
    }
  }

  public java.lang.String getDimensions() {
    return this.Dimensions;
  }

  public TDDIPhysicalComponent setDimensions(java.lang.String Dimensions) {
    this.Dimensions = Dimensions;
    return this;
  }

  public void unsetDimensions() {
    this.Dimensions = null;
  }

  /** Returns true if field Dimensions is set (has been assigned a value) and false otherwise */
  public boolean isSetDimensions() {
    return this.Dimensions != null;
  }

  public void setDimensionsIsSet(boolean value) {
    if (!value) {
      this.Dimensions = null;
    }
  }

  public int getPricePerUnit() {
    return this.PricePerUnit;
  }

  public TDDIPhysicalComponent setPricePerUnit(int PricePerUnit) {
    this.PricePerUnit = PricePerUnit;
    setPricePerUnitIsSet(true);
    return this;
  }

  public void unsetPricePerUnit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEPERUNIT_ISSET_ID);
  }

  /** Returns true if field PricePerUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetPricePerUnit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEPERUNIT_ISSET_ID);
  }

  public void setPricePerUnitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEPERUNIT_ISSET_ID, value);
  }

  public double getMass() {
    return this.Mass;
  }

  public TDDIPhysicalComponent setMass(double Mass) {
    this.Mass = Mass;
    setMassIsSet(true);
    return this;
  }

  public void unsetMass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MASS_ISSET_ID);
  }

  /** Returns true if field Mass is set (has been assigned a value) and false otherwise */
  public boolean isSetMass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MASS_ISSET_ID);
  }

  public void setMassIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MASS_ISSET_ID, value);
  }

  public int getProtectionCategory() {
    return this.ProtectionCategory;
  }

  public TDDIPhysicalComponent setProtectionCategory(int ProtectionCategory) {
    this.ProtectionCategory = ProtectionCategory;
    setProtectionCategoryIsSet(true);
    return this;
  }

  public void unsetProtectionCategory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROTECTIONCATEGORY_ISSET_ID);
  }

  /** Returns true if field ProtectionCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetProtectionCategory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROTECTIONCATEGORY_ISSET_ID);
  }

  public void setProtectionCategoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROTECTIONCATEGORY_ISSET_ID, value);
  }

  public double getUsefulLifetime() {
    return this.UsefulLifetime;
  }

  public TDDIPhysicalComponent setUsefulLifetime(double UsefulLifetime) {
    this.UsefulLifetime = UsefulLifetime;
    setUsefulLifetimeIsSet(true);
    return this;
  }

  public void unsetUsefulLifetime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USEFULLIFETIME_ISSET_ID);
  }

  /** Returns true if field UsefulLifetime is set (has been assigned a value) and false otherwise */
  public boolean isSetUsefulLifetime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USEFULLIFETIME_ISSET_ID);
  }

  public void setUsefulLifetimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USEFULLIFETIME_ISSET_ID, value);
  }

  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDITimeUnit getUsefulLifetimeTimeUnit() {
    return this.UsefulLifetimeTimeUnit;
  }

  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDIPhysicalComponent setUsefulLifetimeTimeUnit(TDDITimeUnit UsefulLifetimeTimeUnit) {
    this.UsefulLifetimeTimeUnit = UsefulLifetimeTimeUnit;
    return this;
  }

  public void unsetUsefulLifetimeTimeUnit() {
    this.UsefulLifetimeTimeUnit = null;
  }

  /** Returns true if field UsefulLifetimeTimeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetUsefulLifetimeTimeUnit() {
    return this.UsefulLifetimeTimeUnit != null;
  }

  public void setUsefulLifetimeTimeUnitIsSet(boolean value) {
    if (!value) {
      this.UsefulLifetimeTimeUnit = null;
    }
  }

  public int getLogicalComponentsSize() {
    return (this.LogicalComponents == null) ? 0 : this.LogicalComponents.size();
  }

  public java.util.Iterator<TDDILogicalComponentRef> getLogicalComponentsIterator() {
    return (this.LogicalComponents == null) ? null : this.LogicalComponents.iterator();
  }

  public void addToLogicalComponents(TDDILogicalComponentRef elem) {
    if (this.LogicalComponents == null) {
      this.LogicalComponents = new java.util.ArrayList<TDDILogicalComponentRef>();
    }
    this.LogicalComponents.add(elem);
  }

  public java.util.List<TDDILogicalComponentRef> getLogicalComponents() {
    return this.LogicalComponents;
  }

  public TDDIPhysicalComponent setLogicalComponents(java.util.List<TDDILogicalComponentRef> LogicalComponents) {
    this.LogicalComponents = LogicalComponents;
    return this;
  }

  public void unsetLogicalComponents() {
    this.LogicalComponents = null;
  }

  /** Returns true if field LogicalComponents is set (has been assigned a value) and false otherwise */
  public boolean isSetLogicalComponents() {
    return this.LogicalComponents != null;
  }

  public void setLogicalComponentsIsSet(boolean value) {
    if (!value) {
      this.LogicalComponents = null;
    }
  }

  public int getLifecycleConditionsSize() {
    return (this.LifecycleConditions == null) ? 0 : this.LifecycleConditions.size();
  }

  public java.util.Iterator<TDDILifecycleCondition> getLifecycleConditionsIterator() {
    return (this.LifecycleConditions == null) ? null : this.LifecycleConditions.iterator();
  }

  public void addToLifecycleConditions(TDDILifecycleCondition elem) {
    if (this.LifecycleConditions == null) {
      this.LifecycleConditions = new java.util.ArrayList<TDDILifecycleCondition>();
    }
    this.LifecycleConditions.add(elem);
  }

  public java.util.List<TDDILifecycleCondition> getLifecycleConditions() {
    return this.LifecycleConditions;
  }

  public TDDIPhysicalComponent setLifecycleConditions(java.util.List<TDDILifecycleCondition> LifecycleConditions) {
    this.LifecycleConditions = LifecycleConditions;
    return this;
  }

  public void unsetLifecycleConditions() {
    this.LifecycleConditions = null;
  }

  /** Returns true if field LifecycleConditions is set (has been assigned a value) and false otherwise */
  public boolean isSetLifecycleConditions() {
    return this.LifecycleConditions != null;
  }

  public void setLifecycleConditionsIsSet(boolean value) {
    if (!value) {
      this.LifecycleConditions = null;
    }
  }

  public TDDIMaintenanceProcedure getMaintenanceProcedure() {
    return this.MaintenanceProcedure;
  }

  public TDDIPhysicalComponent setMaintenanceProcedure(TDDIMaintenanceProcedure MaintenanceProcedure) {
    this.MaintenanceProcedure = MaintenanceProcedure;
    return this;
  }

  public void unsetMaintenanceProcedure() {
    this.MaintenanceProcedure = null;
  }

  /** Returns true if field MaintenanceProcedure is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceProcedure() {
    return this.MaintenanceProcedure != null;
  }

  public void setMaintenanceProcedureIsSet(boolean value) {
    if (!value) {
      this.MaintenanceProcedure = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case OVERALL_LIFETIME:
      if (value == null) {
        unsetOverallLifetime();
      } else {
        setOverallLifetime((java.lang.Double)value);
      }
      break;

    case OVERALL_LIFETIME_TIME_UNIT:
      if (value == null) {
        unsetOverallLifetimeTimeUnit();
      } else {
        setOverallLifetimeTimeUnit((TDDITimeUnit)value);
      }
      break;

    case CONTEXTS:
      if (value == null) {
        unsetContexts();
      } else {
        setContexts((java.util.List<TDDIContext>)value);
      }
      break;

    case CONFIGURATIONS:
      if (value == null) {
        unsetConfigurations();
      } else {
        setConfigurations((java.util.List<TDDIConfiguration>)value);
      }
      break;

    case PORTS:
      if (value == null) {
        unsetPorts();
      } else {
        setPorts((java.util.List<TDDIPort>)value);
      }
      break;

    case SIGNALS:
      if (value == null) {
        unsetSignals();
      } else {
        setSignals((java.util.List<TDDISignal>)value);
      }
      break;

    case SYSTEM_BOUNDARIES:
      if (value == null) {
        unsetSystemBoundaries();
      } else {
        setSystemBoundaries((java.util.List<TDDISystemBoundary>)value);
      }
      break;

    case APPLIED_STANDARDS:
      if (value == null) {
        unsetAppliedStandards();
      } else {
        setAppliedStandards((java.util.List<TDDIAbstractStandardRef>)value);
      }
      break;

    case REALISED_FUNCTIONS:
      if (value == null) {
        unsetRealisedFunctions();
      } else {
        setRealisedFunctions((java.util.List<TDDIAbstractFunctionRef>)value);
      }
      break;

    case AS_ASSET:
      if (value == null) {
        unsetAsAsset();
      } else {
        setAsAsset((TDDIAbstractAsset)value);
      }
      break;

    case DEPENDABILITY_REQUIREMENTS:
      if (value == null) {
        unsetDependabilityRequirements();
      } else {
        setDependabilityRequirements((java.util.List<TDDIAbstractDependabilityRequirementRef>)value);
      }
      break;

    case ASSURANCE_LEVEL:
      if (value == null) {
        unsetAssuranceLevel();
      } else {
        setAssuranceLevel((TDDIAssuranceLevel)value);
      }
      break;

    case FAILURE_MODELS:
      if (value == null) {
        unsetFailureModels();
      } else {
        setFailureModels((java.util.List<TDDIAbstractFailureModelRef>)value);
      }
      break;

    case SUB_SYSTEMS:
      if (value == null) {
        unsetSubSystems();
      } else {
        setSubSystems((java.util.List<TDDIAbstractSystemRef>)value);
      }
      break;

    case DIMENSIONS:
      if (value == null) {
        unsetDimensions();
      } else {
        setDimensions((java.lang.String)value);
      }
      break;

    case PRICE_PER_UNIT:
      if (value == null) {
        unsetPricePerUnit();
      } else {
        setPricePerUnit((java.lang.Integer)value);
      }
      break;

    case MASS:
      if (value == null) {
        unsetMass();
      } else {
        setMass((java.lang.Double)value);
      }
      break;

    case PROTECTION_CATEGORY:
      if (value == null) {
        unsetProtectionCategory();
      } else {
        setProtectionCategory((java.lang.Integer)value);
      }
      break;

    case USEFUL_LIFETIME:
      if (value == null) {
        unsetUsefulLifetime();
      } else {
        setUsefulLifetime((java.lang.Double)value);
      }
      break;

    case USEFUL_LIFETIME_TIME_UNIT:
      if (value == null) {
        unsetUsefulLifetimeTimeUnit();
      } else {
        setUsefulLifetimeTimeUnit((TDDITimeUnit)value);
      }
      break;

    case LOGICAL_COMPONENTS:
      if (value == null) {
        unsetLogicalComponents();
      } else {
        setLogicalComponents((java.util.List<TDDILogicalComponentRef>)value);
      }
      break;

    case LIFECYCLE_CONDITIONS:
      if (value == null) {
        unsetLifecycleConditions();
      } else {
        setLifecycleConditions((java.util.List<TDDILifecycleCondition>)value);
      }
      break;

    case MAINTENANCE_PROCEDURE:
      if (value == null) {
        unsetMaintenanceProcedure();
      } else {
        setMaintenanceProcedure((TDDIMaintenanceProcedure)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case OVERALL_LIFETIME:
      return getOverallLifetime();

    case OVERALL_LIFETIME_TIME_UNIT:
      return getOverallLifetimeTimeUnit();

    case CONTEXTS:
      return getContexts();

    case CONFIGURATIONS:
      return getConfigurations();

    case PORTS:
      return getPorts();

    case SIGNALS:
      return getSignals();

    case SYSTEM_BOUNDARIES:
      return getSystemBoundaries();

    case APPLIED_STANDARDS:
      return getAppliedStandards();

    case REALISED_FUNCTIONS:
      return getRealisedFunctions();

    case AS_ASSET:
      return getAsAsset();

    case DEPENDABILITY_REQUIREMENTS:
      return getDependabilityRequirements();

    case ASSURANCE_LEVEL:
      return getAssuranceLevel();

    case FAILURE_MODELS:
      return getFailureModels();

    case SUB_SYSTEMS:
      return getSubSystems();

    case DIMENSIONS:
      return getDimensions();

    case PRICE_PER_UNIT:
      return getPricePerUnit();

    case MASS:
      return getMass();

    case PROTECTION_CATEGORY:
      return getProtectionCategory();

    case USEFUL_LIFETIME:
      return getUsefulLifetime();

    case USEFUL_LIFETIME_TIME_UNIT:
      return getUsefulLifetimeTimeUnit();

    case LOGICAL_COMPONENTS:
      return getLogicalComponents();

    case LIFECYCLE_CONDITIONS:
      return getLifecycleConditions();

    case MAINTENANCE_PROCEDURE:
      return getMaintenanceProcedure();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case OVERALL_LIFETIME:
      return isSetOverallLifetime();
    case OVERALL_LIFETIME_TIME_UNIT:
      return isSetOverallLifetimeTimeUnit();
    case CONTEXTS:
      return isSetContexts();
    case CONFIGURATIONS:
      return isSetConfigurations();
    case PORTS:
      return isSetPorts();
    case SIGNALS:
      return isSetSignals();
    case SYSTEM_BOUNDARIES:
      return isSetSystemBoundaries();
    case APPLIED_STANDARDS:
      return isSetAppliedStandards();
    case REALISED_FUNCTIONS:
      return isSetRealisedFunctions();
    case AS_ASSET:
      return isSetAsAsset();
    case DEPENDABILITY_REQUIREMENTS:
      return isSetDependabilityRequirements();
    case ASSURANCE_LEVEL:
      return isSetAssuranceLevel();
    case FAILURE_MODELS:
      return isSetFailureModels();
    case SUB_SYSTEMS:
      return isSetSubSystems();
    case DIMENSIONS:
      return isSetDimensions();
    case PRICE_PER_UNIT:
      return isSetPricePerUnit();
    case MASS:
      return isSetMass();
    case PROTECTION_CATEGORY:
      return isSetProtectionCategory();
    case USEFUL_LIFETIME:
      return isSetUsefulLifetime();
    case USEFUL_LIFETIME_TIME_UNIT:
      return isSetUsefulLifetimeTimeUnit();
    case LOGICAL_COMPONENTS:
      return isSetLogicalComponents();
    case LIFECYCLE_CONDITIONS:
      return isSetLifecycleConditions();
    case MAINTENANCE_PROCEDURE:
      return isSetMaintenanceProcedure();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIPhysicalComponent)
      return this.equals((TDDIPhysicalComponent)that);
    return false;
  }

  public boolean equals(TDDIPhysicalComponent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_OverallLifetime = true;
    boolean that_present_OverallLifetime = true;
    if (this_present_OverallLifetime || that_present_OverallLifetime) {
      if (!(this_present_OverallLifetime && that_present_OverallLifetime))
        return false;
      if (this.OverallLifetime != that.OverallLifetime)
        return false;
    }

    boolean this_present_OverallLifetimeTimeUnit = true && this.isSetOverallLifetimeTimeUnit();
    boolean that_present_OverallLifetimeTimeUnit = true && that.isSetOverallLifetimeTimeUnit();
    if (this_present_OverallLifetimeTimeUnit || that_present_OverallLifetimeTimeUnit) {
      if (!(this_present_OverallLifetimeTimeUnit && that_present_OverallLifetimeTimeUnit))
        return false;
      if (!this.OverallLifetimeTimeUnit.equals(that.OverallLifetimeTimeUnit))
        return false;
    }

    boolean this_present_Contexts = true && this.isSetContexts();
    boolean that_present_Contexts = true && that.isSetContexts();
    if (this_present_Contexts || that_present_Contexts) {
      if (!(this_present_Contexts && that_present_Contexts))
        return false;
      if (!this.Contexts.equals(that.Contexts))
        return false;
    }

    boolean this_present_Configurations = true && this.isSetConfigurations();
    boolean that_present_Configurations = true && that.isSetConfigurations();
    if (this_present_Configurations || that_present_Configurations) {
      if (!(this_present_Configurations && that_present_Configurations))
        return false;
      if (!this.Configurations.equals(that.Configurations))
        return false;
    }

    boolean this_present_Ports = true && this.isSetPorts();
    boolean that_present_Ports = true && that.isSetPorts();
    if (this_present_Ports || that_present_Ports) {
      if (!(this_present_Ports && that_present_Ports))
        return false;
      if (!this.Ports.equals(that.Ports))
        return false;
    }

    boolean this_present_Signals = true && this.isSetSignals();
    boolean that_present_Signals = true && that.isSetSignals();
    if (this_present_Signals || that_present_Signals) {
      if (!(this_present_Signals && that_present_Signals))
        return false;
      if (!this.Signals.equals(that.Signals))
        return false;
    }

    boolean this_present_SystemBoundaries = true && this.isSetSystemBoundaries();
    boolean that_present_SystemBoundaries = true && that.isSetSystemBoundaries();
    if (this_present_SystemBoundaries || that_present_SystemBoundaries) {
      if (!(this_present_SystemBoundaries && that_present_SystemBoundaries))
        return false;
      if (!this.SystemBoundaries.equals(that.SystemBoundaries))
        return false;
    }

    boolean this_present_AppliedStandards = true && this.isSetAppliedStandards();
    boolean that_present_AppliedStandards = true && that.isSetAppliedStandards();
    if (this_present_AppliedStandards || that_present_AppliedStandards) {
      if (!(this_present_AppliedStandards && that_present_AppliedStandards))
        return false;
      if (!this.AppliedStandards.equals(that.AppliedStandards))
        return false;
    }

    boolean this_present_RealisedFunctions = true && this.isSetRealisedFunctions();
    boolean that_present_RealisedFunctions = true && that.isSetRealisedFunctions();
    if (this_present_RealisedFunctions || that_present_RealisedFunctions) {
      if (!(this_present_RealisedFunctions && that_present_RealisedFunctions))
        return false;
      if (!this.RealisedFunctions.equals(that.RealisedFunctions))
        return false;
    }

    boolean this_present_AsAsset = true && this.isSetAsAsset();
    boolean that_present_AsAsset = true && that.isSetAsAsset();
    if (this_present_AsAsset || that_present_AsAsset) {
      if (!(this_present_AsAsset && that_present_AsAsset))
        return false;
      if (!this.AsAsset.equals(that.AsAsset))
        return false;
    }

    boolean this_present_DependabilityRequirements = true && this.isSetDependabilityRequirements();
    boolean that_present_DependabilityRequirements = true && that.isSetDependabilityRequirements();
    if (this_present_DependabilityRequirements || that_present_DependabilityRequirements) {
      if (!(this_present_DependabilityRequirements && that_present_DependabilityRequirements))
        return false;
      if (!this.DependabilityRequirements.equals(that.DependabilityRequirements))
        return false;
    }

    boolean this_present_AssuranceLevel = true && this.isSetAssuranceLevel();
    boolean that_present_AssuranceLevel = true && that.isSetAssuranceLevel();
    if (this_present_AssuranceLevel || that_present_AssuranceLevel) {
      if (!(this_present_AssuranceLevel && that_present_AssuranceLevel))
        return false;
      if (!this.AssuranceLevel.equals(that.AssuranceLevel))
        return false;
    }

    boolean this_present_FailureModels = true && this.isSetFailureModels();
    boolean that_present_FailureModels = true && that.isSetFailureModels();
    if (this_present_FailureModels || that_present_FailureModels) {
      if (!(this_present_FailureModels && that_present_FailureModels))
        return false;
      if (!this.FailureModels.equals(that.FailureModels))
        return false;
    }

    boolean this_present_SubSystems = true && this.isSetSubSystems();
    boolean that_present_SubSystems = true && that.isSetSubSystems();
    if (this_present_SubSystems || that_present_SubSystems) {
      if (!(this_present_SubSystems && that_present_SubSystems))
        return false;
      if (!this.SubSystems.equals(that.SubSystems))
        return false;
    }

    boolean this_present_Dimensions = true && this.isSetDimensions();
    boolean that_present_Dimensions = true && that.isSetDimensions();
    if (this_present_Dimensions || that_present_Dimensions) {
      if (!(this_present_Dimensions && that_present_Dimensions))
        return false;
      if (!this.Dimensions.equals(that.Dimensions))
        return false;
    }

    boolean this_present_PricePerUnit = true;
    boolean that_present_PricePerUnit = true;
    if (this_present_PricePerUnit || that_present_PricePerUnit) {
      if (!(this_present_PricePerUnit && that_present_PricePerUnit))
        return false;
      if (this.PricePerUnit != that.PricePerUnit)
        return false;
    }

    boolean this_present_Mass = true;
    boolean that_present_Mass = true;
    if (this_present_Mass || that_present_Mass) {
      if (!(this_present_Mass && that_present_Mass))
        return false;
      if (this.Mass != that.Mass)
        return false;
    }

    boolean this_present_ProtectionCategory = true;
    boolean that_present_ProtectionCategory = true;
    if (this_present_ProtectionCategory || that_present_ProtectionCategory) {
      if (!(this_present_ProtectionCategory && that_present_ProtectionCategory))
        return false;
      if (this.ProtectionCategory != that.ProtectionCategory)
        return false;
    }

    boolean this_present_UsefulLifetime = true;
    boolean that_present_UsefulLifetime = true;
    if (this_present_UsefulLifetime || that_present_UsefulLifetime) {
      if (!(this_present_UsefulLifetime && that_present_UsefulLifetime))
        return false;
      if (this.UsefulLifetime != that.UsefulLifetime)
        return false;
    }

    boolean this_present_UsefulLifetimeTimeUnit = true && this.isSetUsefulLifetimeTimeUnit();
    boolean that_present_UsefulLifetimeTimeUnit = true && that.isSetUsefulLifetimeTimeUnit();
    if (this_present_UsefulLifetimeTimeUnit || that_present_UsefulLifetimeTimeUnit) {
      if (!(this_present_UsefulLifetimeTimeUnit && that_present_UsefulLifetimeTimeUnit))
        return false;
      if (!this.UsefulLifetimeTimeUnit.equals(that.UsefulLifetimeTimeUnit))
        return false;
    }

    boolean this_present_LogicalComponents = true && this.isSetLogicalComponents();
    boolean that_present_LogicalComponents = true && that.isSetLogicalComponents();
    if (this_present_LogicalComponents || that_present_LogicalComponents) {
      if (!(this_present_LogicalComponents && that_present_LogicalComponents))
        return false;
      if (!this.LogicalComponents.equals(that.LogicalComponents))
        return false;
    }

    boolean this_present_LifecycleConditions = true && this.isSetLifecycleConditions();
    boolean that_present_LifecycleConditions = true && that.isSetLifecycleConditions();
    if (this_present_LifecycleConditions || that_present_LifecycleConditions) {
      if (!(this_present_LifecycleConditions && that_present_LifecycleConditions))
        return false;
      if (!this.LifecycleConditions.equals(that.LifecycleConditions))
        return false;
    }

    boolean this_present_MaintenanceProcedure = true && this.isSetMaintenanceProcedure();
    boolean that_present_MaintenanceProcedure = true && that.isSetMaintenanceProcedure();
    if (this_present_MaintenanceProcedure || that_present_MaintenanceProcedure) {
      if (!(this_present_MaintenanceProcedure && that_present_MaintenanceProcedure))
        return false;
      if (!this.MaintenanceProcedure.equals(that.MaintenanceProcedure))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(OverallLifetime);

    hashCode = hashCode * 8191 + ((isSetOverallLifetimeTimeUnit()) ? 131071 : 524287);
    if (isSetOverallLifetimeTimeUnit())
      hashCode = hashCode * 8191 + OverallLifetimeTimeUnit.getValue();

    hashCode = hashCode * 8191 + ((isSetContexts()) ? 131071 : 524287);
    if (isSetContexts())
      hashCode = hashCode * 8191 + Contexts.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfigurations()) ? 131071 : 524287);
    if (isSetConfigurations())
      hashCode = hashCode * 8191 + Configurations.hashCode();

    hashCode = hashCode * 8191 + ((isSetPorts()) ? 131071 : 524287);
    if (isSetPorts())
      hashCode = hashCode * 8191 + Ports.hashCode();

    hashCode = hashCode * 8191 + ((isSetSignals()) ? 131071 : 524287);
    if (isSetSignals())
      hashCode = hashCode * 8191 + Signals.hashCode();

    hashCode = hashCode * 8191 + ((isSetSystemBoundaries()) ? 131071 : 524287);
    if (isSetSystemBoundaries())
      hashCode = hashCode * 8191 + SystemBoundaries.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppliedStandards()) ? 131071 : 524287);
    if (isSetAppliedStandards())
      hashCode = hashCode * 8191 + AppliedStandards.hashCode();

    hashCode = hashCode * 8191 + ((isSetRealisedFunctions()) ? 131071 : 524287);
    if (isSetRealisedFunctions())
      hashCode = hashCode * 8191 + RealisedFunctions.hashCode();

    hashCode = hashCode * 8191 + ((isSetAsAsset()) ? 131071 : 524287);
    if (isSetAsAsset())
      hashCode = hashCode * 8191 + AsAsset.hashCode();

    hashCode = hashCode * 8191 + ((isSetDependabilityRequirements()) ? 131071 : 524287);
    if (isSetDependabilityRequirements())
      hashCode = hashCode * 8191 + DependabilityRequirements.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssuranceLevel()) ? 131071 : 524287);
    if (isSetAssuranceLevel())
      hashCode = hashCode * 8191 + AssuranceLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailureModels()) ? 131071 : 524287);
    if (isSetFailureModels())
      hashCode = hashCode * 8191 + FailureModels.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubSystems()) ? 131071 : 524287);
    if (isSetSubSystems())
      hashCode = hashCode * 8191 + SubSystems.hashCode();

    hashCode = hashCode * 8191 + ((isSetDimensions()) ? 131071 : 524287);
    if (isSetDimensions())
      hashCode = hashCode * 8191 + Dimensions.hashCode();

    hashCode = hashCode * 8191 + PricePerUnit;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Mass);

    hashCode = hashCode * 8191 + ProtectionCategory;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(UsefulLifetime);

    hashCode = hashCode * 8191 + ((isSetUsefulLifetimeTimeUnit()) ? 131071 : 524287);
    if (isSetUsefulLifetimeTimeUnit())
      hashCode = hashCode * 8191 + UsefulLifetimeTimeUnit.getValue();

    hashCode = hashCode * 8191 + ((isSetLogicalComponents()) ? 131071 : 524287);
    if (isSetLogicalComponents())
      hashCode = hashCode * 8191 + LogicalComponents.hashCode();

    hashCode = hashCode * 8191 + ((isSetLifecycleConditions()) ? 131071 : 524287);
    if (isSetLifecycleConditions())
      hashCode = hashCode * 8191 + LifecycleConditions.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaintenanceProcedure()) ? 131071 : 524287);
    if (isSetMaintenanceProcedure())
      hashCode = hashCode * 8191 + MaintenanceProcedure.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIPhysicalComponent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOverallLifetime()).compareTo(other.isSetOverallLifetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverallLifetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OverallLifetime, other.OverallLifetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOverallLifetimeTimeUnit()).compareTo(other.isSetOverallLifetimeTimeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverallLifetimeTimeUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OverallLifetimeTimeUnit, other.OverallLifetimeTimeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContexts()).compareTo(other.isSetContexts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContexts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Contexts, other.Contexts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfigurations()).compareTo(other.isSetConfigurations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigurations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Configurations, other.Configurations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPorts()).compareTo(other.isSetPorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ports, other.Ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignals()).compareTo(other.isSetSignals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Signals, other.Signals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSystemBoundaries()).compareTo(other.isSetSystemBoundaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemBoundaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SystemBoundaries, other.SystemBoundaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppliedStandards()).compareTo(other.isSetAppliedStandards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppliedStandards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AppliedStandards, other.AppliedStandards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRealisedFunctions()).compareTo(other.isSetRealisedFunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealisedFunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RealisedFunctions, other.RealisedFunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAsAsset()).compareTo(other.isSetAsAsset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsAsset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AsAsset, other.AsAsset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDependabilityRequirements()).compareTo(other.isSetDependabilityRequirements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependabilityRequirements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DependabilityRequirements, other.DependabilityRequirements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssuranceLevel()).compareTo(other.isSetAssuranceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssuranceLevel, other.AssuranceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureModels()).compareTo(other.isSetFailureModels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureModels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureModels, other.FailureModels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubSystems()).compareTo(other.isSetSubSystems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubSystems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SubSystems, other.SubSystems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDimensions()).compareTo(other.isSetDimensions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimensions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Dimensions, other.Dimensions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPricePerUnit()).compareTo(other.isSetPricePerUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPricePerUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PricePerUnit, other.PricePerUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMass()).compareTo(other.isSetMass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Mass, other.Mass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProtectionCategory()).compareTo(other.isSetProtectionCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtectionCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProtectionCategory, other.ProtectionCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsefulLifetime()).compareTo(other.isSetUsefulLifetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsefulLifetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsefulLifetime, other.UsefulLifetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsefulLifetimeTimeUnit()).compareTo(other.isSetUsefulLifetimeTimeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsefulLifetimeTimeUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsefulLifetimeTimeUnit, other.UsefulLifetimeTimeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogicalComponents()).compareTo(other.isSetLogicalComponents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogicalComponents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LogicalComponents, other.LogicalComponents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLifecycleConditions()).compareTo(other.isSetLifecycleConditions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLifecycleConditions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LifecycleConditions, other.LifecycleConditions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaintenanceProcedure()).compareTo(other.isSetMaintenanceProcedure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceProcedure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MaintenanceProcedure, other.MaintenanceProcedure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIPhysicalComponent(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OverallLifetime:");
    sb.append(this.OverallLifetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("OverallLifetimeTimeUnit:");
    if (this.OverallLifetimeTimeUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.OverallLifetimeTimeUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Contexts:");
    if (this.Contexts == null) {
      sb.append("null");
    } else {
      sb.append(this.Contexts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Configurations:");
    if (this.Configurations == null) {
      sb.append("null");
    } else {
      sb.append(this.Configurations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Ports:");
    if (this.Ports == null) {
      sb.append("null");
    } else {
      sb.append(this.Ports);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Signals:");
    if (this.Signals == null) {
      sb.append("null");
    } else {
      sb.append(this.Signals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SystemBoundaries:");
    if (this.SystemBoundaries == null) {
      sb.append("null");
    } else {
      sb.append(this.SystemBoundaries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AppliedStandards:");
    if (this.AppliedStandards == null) {
      sb.append("null");
    } else {
      sb.append(this.AppliedStandards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RealisedFunctions:");
    if (this.RealisedFunctions == null) {
      sb.append("null");
    } else {
      sb.append(this.RealisedFunctions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AsAsset:");
    if (this.AsAsset == null) {
      sb.append("null");
    } else {
      sb.append(this.AsAsset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DependabilityRequirements:");
    if (this.DependabilityRequirements == null) {
      sb.append("null");
    } else {
      sb.append(this.DependabilityRequirements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssuranceLevel:");
    if (this.AssuranceLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.AssuranceLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureModels:");
    if (this.FailureModels == null) {
      sb.append("null");
    } else {
      sb.append(this.FailureModels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SubSystems:");
    if (this.SubSystems == null) {
      sb.append("null");
    } else {
      sb.append(this.SubSystems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Dimensions:");
    if (this.Dimensions == null) {
      sb.append("null");
    } else {
      sb.append(this.Dimensions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PricePerUnit:");
    sb.append(this.PricePerUnit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Mass:");
    sb.append(this.Mass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ProtectionCategory:");
    sb.append(this.ProtectionCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsefulLifetime:");
    sb.append(this.UsefulLifetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsefulLifetimeTimeUnit:");
    if (this.UsefulLifetimeTimeUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.UsefulLifetimeTimeUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LogicalComponents:");
    if (this.LogicalComponents == null) {
      sb.append("null");
    } else {
      sb.append(this.LogicalComponents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LifecycleConditions:");
    if (this.LifecycleConditions == null) {
      sb.append("null");
    } else {
      sb.append(this.LifecycleConditions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MaintenanceProcedure:");
    if (this.MaintenanceProcedure == null) {
      sb.append("null");
    } else {
      sb.append(this.MaintenanceProcedure);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (MaintenanceProcedure != null) {
      MaintenanceProcedure.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIPhysicalComponentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIPhysicalComponentStandardScheme getScheme() {
      return new TDDIPhysicalComponentStandardScheme();
    }
  }

  private static class TDDIPhysicalComponentStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIPhysicalComponent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIPhysicalComponent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list584 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list584.size);
                TDDIKeyValueMap _elem585;
                for (int _i586 = 0; _i586 < _list584.size; ++_i586)
                {
                  _elem585 = new TDDIKeyValueMap();
                  _elem585.read(iprot);
                  struct.KeyValueMaps.add(_elem585);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OVERALL_LIFETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.OverallLifetime = iprot.readDouble();
              struct.setOverallLifetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OVERALL_LIFETIME_TIME_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.OverallLifetimeTimeUnit = thriftContract.TDDITimeUnit.findByValue(iprot.readI32());
              struct.setOverallLifetimeTimeUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTEXTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list587 = iprot.readListBegin();
                struct.Contexts = new java.util.ArrayList<TDDIContext>(_list587.size);
                TDDIContext _elem588;
                for (int _i589 = 0; _i589 < _list587.size; ++_i589)
                {
                  _elem588 = new TDDIContext();
                  _elem588.read(iprot);
                  struct.Contexts.add(_elem588);
                }
                iprot.readListEnd();
              }
              struct.setContextsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONFIGURATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list590 = iprot.readListBegin();
                struct.Configurations = new java.util.ArrayList<TDDIConfiguration>(_list590.size);
                TDDIConfiguration _elem591;
                for (int _i592 = 0; _i592 < _list590.size; ++_i592)
                {
                  _elem591 = new TDDIConfiguration();
                  _elem591.read(iprot);
                  struct.Configurations.add(_elem591);
                }
                iprot.readListEnd();
              }
              struct.setConfigurationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list593 = iprot.readListBegin();
                struct.Ports = new java.util.ArrayList<TDDIPort>(_list593.size);
                TDDIPort _elem594;
                for (int _i595 = 0; _i595 < _list593.size; ++_i595)
                {
                  _elem594 = new TDDIPort();
                  _elem594.read(iprot);
                  struct.Ports.add(_elem594);
                }
                iprot.readListEnd();
              }
              struct.setPortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SIGNALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list596 = iprot.readListBegin();
                struct.Signals = new java.util.ArrayList<TDDISignal>(_list596.size);
                TDDISignal _elem597;
                for (int _i598 = 0; _i598 < _list596.size; ++_i598)
                {
                  _elem597 = new TDDISignal();
                  _elem597.read(iprot);
                  struct.Signals.add(_elem597);
                }
                iprot.readListEnd();
              }
              struct.setSignalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SYSTEM_BOUNDARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list599 = iprot.readListBegin();
                struct.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>(_list599.size);
                TDDISystemBoundary _elem600;
                for (int _i601 = 0; _i601 < _list599.size; ++_i601)
                {
                  _elem600 = new TDDISystemBoundary();
                  _elem600.read(iprot);
                  struct.SystemBoundaries.add(_elem600);
                }
                iprot.readListEnd();
              }
              struct.setSystemBoundariesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // APPLIED_STANDARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list602 = iprot.readListBegin();
                struct.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>(_list602.size);
                TDDIAbstractStandardRef _elem603;
                for (int _i604 = 0; _i604 < _list602.size; ++_i604)
                {
                  _elem603 = new TDDIAbstractStandardRef();
                  _elem603.read(iprot);
                  struct.AppliedStandards.add(_elem603);
                }
                iprot.readListEnd();
              }
              struct.setAppliedStandardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REALISED_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list605 = iprot.readListBegin();
                struct.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(_list605.size);
                TDDIAbstractFunctionRef _elem606;
                for (int _i607 = 0; _i607 < _list605.size; ++_i607)
                {
                  _elem606 = new TDDIAbstractFunctionRef();
                  _elem606.read(iprot);
                  struct.RealisedFunctions.add(_elem606);
                }
                iprot.readListEnd();
              }
              struct.setRealisedFunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AS_ASSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AsAsset = new TDDIAbstractAsset();
              struct.AsAsset.read(iprot);
              struct.setAsAssetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEPENDABILITY_REQUIREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list608 = iprot.readListBegin();
                struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list608.size);
                TDDIAbstractDependabilityRequirementRef _elem609;
                for (int _i610 = 0; _i610 < _list608.size; ++_i610)
                {
                  _elem609 = new TDDIAbstractDependabilityRequirementRef();
                  _elem609.read(iprot);
                  struct.DependabilityRequirements.add(_elem609);
                }
                iprot.readListEnd();
              }
              struct.setDependabilityRequirementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ASSURANCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AssuranceLevel = new TDDIAssuranceLevel();
              struct.AssuranceLevel.read(iprot);
              struct.setAssuranceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FAILURE_MODELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list611 = iprot.readListBegin();
                struct.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(_list611.size);
                TDDIAbstractFailureModelRef _elem612;
                for (int _i613 = 0; _i613 < _list611.size; ++_i613)
                {
                  _elem612 = new TDDIAbstractFailureModelRef();
                  _elem612.read(iprot);
                  struct.FailureModels.add(_elem612);
                }
                iprot.readListEnd();
              }
              struct.setFailureModelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SUB_SYSTEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
                struct.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>(_list614.size);
                TDDIAbstractSystemRef _elem615;
                for (int _i616 = 0; _i616 < _list614.size; ++_i616)
                {
                  _elem615 = new TDDIAbstractSystemRef();
                  _elem615.read(iprot);
                  struct.SubSystems.add(_elem615);
                }
                iprot.readListEnd();
              }
              struct.setSubSystemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DIMENSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Dimensions = iprot.readString();
              struct.setDimensionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PRICE_PER_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PricePerUnit = iprot.readI32();
              struct.setPricePerUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MASS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Mass = iprot.readDouble();
              struct.setMassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PROTECTION_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ProtectionCategory = iprot.readI32();
              struct.setProtectionCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // USEFUL_LIFETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.UsefulLifetime = iprot.readDouble();
              struct.setUsefulLifetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // USEFUL_LIFETIME_TIME_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsefulLifetimeTimeUnit = thriftContract.TDDITimeUnit.findByValue(iprot.readI32());
              struct.setUsefulLifetimeTimeUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LOGICAL_COMPONENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list617 = iprot.readListBegin();
                struct.LogicalComponents = new java.util.ArrayList<TDDILogicalComponentRef>(_list617.size);
                TDDILogicalComponentRef _elem618;
                for (int _i619 = 0; _i619 < _list617.size; ++_i619)
                {
                  _elem618 = new TDDILogicalComponentRef();
                  _elem618.read(iprot);
                  struct.LogicalComponents.add(_elem618);
                }
                iprot.readListEnd();
              }
              struct.setLogicalComponentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LIFECYCLE_CONDITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list620 = iprot.readListBegin();
                struct.LifecycleConditions = new java.util.ArrayList<TDDILifecycleCondition>(_list620.size);
                TDDILifecycleCondition _elem621;
                for (int _i622 = 0; _i622 < _list620.size; ++_i622)
                {
                  _elem621 = new TDDILifecycleCondition();
                  _elem621.read(iprot);
                  struct.LifecycleConditions.add(_elem621);
                }
                iprot.readListEnd();
              }
              struct.setLifecycleConditionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MAINTENANCE_PROCEDURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.MaintenanceProcedure = new TDDIMaintenanceProcedure();
              struct.MaintenanceProcedure.read(iprot);
              struct.setMaintenanceProcedureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIPhysicalComponent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter623 : struct.KeyValueMaps)
          {
            _iter623.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERALL_LIFETIME_FIELD_DESC);
      oprot.writeDouble(struct.OverallLifetime);
      oprot.writeFieldEnd();
      if (struct.OverallLifetimeTimeUnit != null) {
        oprot.writeFieldBegin(OVERALL_LIFETIME_TIME_UNIT_FIELD_DESC);
        oprot.writeI32(struct.OverallLifetimeTimeUnit.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.Contexts != null) {
        oprot.writeFieldBegin(CONTEXTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Contexts.size()));
          for (TDDIContext _iter624 : struct.Contexts)
          {
            _iter624.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Configurations != null) {
        oprot.writeFieldBegin(CONFIGURATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Configurations.size()));
          for (TDDIConfiguration _iter625 : struct.Configurations)
          {
            _iter625.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Ports != null) {
        oprot.writeFieldBegin(PORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Ports.size()));
          for (TDDIPort _iter626 : struct.Ports)
          {
            _iter626.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Signals != null) {
        oprot.writeFieldBegin(SIGNALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Signals.size()));
          for (TDDISignal _iter627 : struct.Signals)
          {
            _iter627.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SystemBoundaries != null) {
        oprot.writeFieldBegin(SYSTEM_BOUNDARIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SystemBoundaries.size()));
          for (TDDISystemBoundary _iter628 : struct.SystemBoundaries)
          {
            _iter628.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AppliedStandards != null) {
        oprot.writeFieldBegin(APPLIED_STANDARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AppliedStandards.size()));
          for (TDDIAbstractStandardRef _iter629 : struct.AppliedStandards)
          {
            _iter629.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.RealisedFunctions != null) {
        oprot.writeFieldBegin(REALISED_FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.RealisedFunctions.size()));
          for (TDDIAbstractFunctionRef _iter630 : struct.RealisedFunctions)
          {
            _iter630.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AsAsset != null) {
        oprot.writeFieldBegin(AS_ASSET_FIELD_DESC);
        struct.AsAsset.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.DependabilityRequirements != null) {
        oprot.writeFieldBegin(DEPENDABILITY_REQUIREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DependabilityRequirements.size()));
          for (TDDIAbstractDependabilityRequirementRef _iter631 : struct.DependabilityRequirements)
          {
            _iter631.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AssuranceLevel != null) {
        oprot.writeFieldBegin(ASSURANCE_LEVEL_FIELD_DESC);
        struct.AssuranceLevel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.FailureModels != null) {
        oprot.writeFieldBegin(FAILURE_MODELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FailureModels.size()));
          for (TDDIAbstractFailureModelRef _iter632 : struct.FailureModels)
          {
            _iter632.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SubSystems != null) {
        oprot.writeFieldBegin(SUB_SYSTEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SubSystems.size()));
          for (TDDIAbstractSystemRef _iter633 : struct.SubSystems)
          {
            _iter633.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Dimensions != null) {
        oprot.writeFieldBegin(DIMENSIONS_FIELD_DESC);
        oprot.writeString(struct.Dimensions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_PER_UNIT_FIELD_DESC);
      oprot.writeI32(struct.PricePerUnit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MASS_FIELD_DESC);
      oprot.writeDouble(struct.Mass);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROTECTION_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.ProtectionCategory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USEFUL_LIFETIME_FIELD_DESC);
      oprot.writeDouble(struct.UsefulLifetime);
      oprot.writeFieldEnd();
      if (struct.UsefulLifetimeTimeUnit != null) {
        oprot.writeFieldBegin(USEFUL_LIFETIME_TIME_UNIT_FIELD_DESC);
        oprot.writeI32(struct.UsefulLifetimeTimeUnit.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.LogicalComponents != null) {
        oprot.writeFieldBegin(LOGICAL_COMPONENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.LogicalComponents.size()));
          for (TDDILogicalComponentRef _iter634 : struct.LogicalComponents)
          {
            _iter634.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.LifecycleConditions != null) {
        oprot.writeFieldBegin(LIFECYCLE_CONDITIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.LifecycleConditions.size()));
          for (TDDILifecycleCondition _iter635 : struct.LifecycleConditions)
          {
            _iter635.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.MaintenanceProcedure != null) {
        oprot.writeFieldBegin(MAINTENANCE_PROCEDURE_FIELD_DESC);
        struct.MaintenanceProcedure.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIPhysicalComponentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIPhysicalComponentTupleScheme getScheme() {
      return new TDDIPhysicalComponentTupleScheme();
    }
  }

  private static class TDDIPhysicalComponentTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIPhysicalComponent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIPhysicalComponent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetOverallLifetime()) {
        optionals.set(4);
      }
      if (struct.isSetOverallLifetimeTimeUnit()) {
        optionals.set(5);
      }
      if (struct.isSetContexts()) {
        optionals.set(6);
      }
      if (struct.isSetConfigurations()) {
        optionals.set(7);
      }
      if (struct.isSetPorts()) {
        optionals.set(8);
      }
      if (struct.isSetSignals()) {
        optionals.set(9);
      }
      if (struct.isSetSystemBoundaries()) {
        optionals.set(10);
      }
      if (struct.isSetAppliedStandards()) {
        optionals.set(11);
      }
      if (struct.isSetRealisedFunctions()) {
        optionals.set(12);
      }
      if (struct.isSetAsAsset()) {
        optionals.set(13);
      }
      if (struct.isSetDependabilityRequirements()) {
        optionals.set(14);
      }
      if (struct.isSetAssuranceLevel()) {
        optionals.set(15);
      }
      if (struct.isSetFailureModels()) {
        optionals.set(16);
      }
      if (struct.isSetSubSystems()) {
        optionals.set(17);
      }
      if (struct.isSetDimensions()) {
        optionals.set(18);
      }
      if (struct.isSetPricePerUnit()) {
        optionals.set(19);
      }
      if (struct.isSetMass()) {
        optionals.set(20);
      }
      if (struct.isSetProtectionCategory()) {
        optionals.set(21);
      }
      if (struct.isSetUsefulLifetime()) {
        optionals.set(22);
      }
      if (struct.isSetUsefulLifetimeTimeUnit()) {
        optionals.set(23);
      }
      if (struct.isSetLogicalComponents()) {
        optionals.set(24);
      }
      if (struct.isSetLifecycleConditions()) {
        optionals.set(25);
      }
      if (struct.isSetMaintenanceProcedure()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter636 : struct.KeyValueMaps)
          {
            _iter636.write(oprot);
          }
        }
      }
      if (struct.isSetOverallLifetime()) {
        oprot.writeDouble(struct.OverallLifetime);
      }
      if (struct.isSetOverallLifetimeTimeUnit()) {
        oprot.writeI32(struct.OverallLifetimeTimeUnit.getValue());
      }
      if (struct.isSetContexts()) {
        {
          oprot.writeI32(struct.Contexts.size());
          for (TDDIContext _iter637 : struct.Contexts)
          {
            _iter637.write(oprot);
          }
        }
      }
      if (struct.isSetConfigurations()) {
        {
          oprot.writeI32(struct.Configurations.size());
          for (TDDIConfiguration _iter638 : struct.Configurations)
          {
            _iter638.write(oprot);
          }
        }
      }
      if (struct.isSetPorts()) {
        {
          oprot.writeI32(struct.Ports.size());
          for (TDDIPort _iter639 : struct.Ports)
          {
            _iter639.write(oprot);
          }
        }
      }
      if (struct.isSetSignals()) {
        {
          oprot.writeI32(struct.Signals.size());
          for (TDDISignal _iter640 : struct.Signals)
          {
            _iter640.write(oprot);
          }
        }
      }
      if (struct.isSetSystemBoundaries()) {
        {
          oprot.writeI32(struct.SystemBoundaries.size());
          for (TDDISystemBoundary _iter641 : struct.SystemBoundaries)
          {
            _iter641.write(oprot);
          }
        }
      }
      if (struct.isSetAppliedStandards()) {
        {
          oprot.writeI32(struct.AppliedStandards.size());
          for (TDDIAbstractStandardRef _iter642 : struct.AppliedStandards)
          {
            _iter642.write(oprot);
          }
        }
      }
      if (struct.isSetRealisedFunctions()) {
        {
          oprot.writeI32(struct.RealisedFunctions.size());
          for (TDDIAbstractFunctionRef _iter643 : struct.RealisedFunctions)
          {
            _iter643.write(oprot);
          }
        }
      }
      if (struct.isSetAsAsset()) {
        struct.AsAsset.write(oprot);
      }
      if (struct.isSetDependabilityRequirements()) {
        {
          oprot.writeI32(struct.DependabilityRequirements.size());
          for (TDDIAbstractDependabilityRequirementRef _iter644 : struct.DependabilityRequirements)
          {
            _iter644.write(oprot);
          }
        }
      }
      if (struct.isSetAssuranceLevel()) {
        struct.AssuranceLevel.write(oprot);
      }
      if (struct.isSetFailureModels()) {
        {
          oprot.writeI32(struct.FailureModels.size());
          for (TDDIAbstractFailureModelRef _iter645 : struct.FailureModels)
          {
            _iter645.write(oprot);
          }
        }
      }
      if (struct.isSetSubSystems()) {
        {
          oprot.writeI32(struct.SubSystems.size());
          for (TDDIAbstractSystemRef _iter646 : struct.SubSystems)
          {
            _iter646.write(oprot);
          }
        }
      }
      if (struct.isSetDimensions()) {
        oprot.writeString(struct.Dimensions);
      }
      if (struct.isSetPricePerUnit()) {
        oprot.writeI32(struct.PricePerUnit);
      }
      if (struct.isSetMass()) {
        oprot.writeDouble(struct.Mass);
      }
      if (struct.isSetProtectionCategory()) {
        oprot.writeI32(struct.ProtectionCategory);
      }
      if (struct.isSetUsefulLifetime()) {
        oprot.writeDouble(struct.UsefulLifetime);
      }
      if (struct.isSetUsefulLifetimeTimeUnit()) {
        oprot.writeI32(struct.UsefulLifetimeTimeUnit.getValue());
      }
      if (struct.isSetLogicalComponents()) {
        {
          oprot.writeI32(struct.LogicalComponents.size());
          for (TDDILogicalComponentRef _iter647 : struct.LogicalComponents)
          {
            _iter647.write(oprot);
          }
        }
      }
      if (struct.isSetLifecycleConditions()) {
        {
          oprot.writeI32(struct.LifecycleConditions.size());
          for (TDDILifecycleCondition _iter648 : struct.LifecycleConditions)
          {
            _iter648.write(oprot);
          }
        }
      }
      if (struct.isSetMaintenanceProcedure()) {
        struct.MaintenanceProcedure.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIPhysicalComponent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list649 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list649.size);
          TDDIKeyValueMap _elem650;
          for (int _i651 = 0; _i651 < _list649.size; ++_i651)
          {
            _elem650 = new TDDIKeyValueMap();
            _elem650.read(iprot);
            struct.KeyValueMaps.add(_elem650);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.OverallLifetime = iprot.readDouble();
        struct.setOverallLifetimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.OverallLifetimeTimeUnit = thriftContract.TDDITimeUnit.findByValue(iprot.readI32());
        struct.setOverallLifetimeTimeUnitIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list652 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Contexts = new java.util.ArrayList<TDDIContext>(_list652.size);
          TDDIContext _elem653;
          for (int _i654 = 0; _i654 < _list652.size; ++_i654)
          {
            _elem653 = new TDDIContext();
            _elem653.read(iprot);
            struct.Contexts.add(_elem653);
          }
        }
        struct.setContextsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list655 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Configurations = new java.util.ArrayList<TDDIConfiguration>(_list655.size);
          TDDIConfiguration _elem656;
          for (int _i657 = 0; _i657 < _list655.size; ++_i657)
          {
            _elem656 = new TDDIConfiguration();
            _elem656.read(iprot);
            struct.Configurations.add(_elem656);
          }
        }
        struct.setConfigurationsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list658 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Ports = new java.util.ArrayList<TDDIPort>(_list658.size);
          TDDIPort _elem659;
          for (int _i660 = 0; _i660 < _list658.size; ++_i660)
          {
            _elem659 = new TDDIPort();
            _elem659.read(iprot);
            struct.Ports.add(_elem659);
          }
        }
        struct.setPortsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list661 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Signals = new java.util.ArrayList<TDDISignal>(_list661.size);
          TDDISignal _elem662;
          for (int _i663 = 0; _i663 < _list661.size; ++_i663)
          {
            _elem662 = new TDDISignal();
            _elem662.read(iprot);
            struct.Signals.add(_elem662);
          }
        }
        struct.setSignalsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list664 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>(_list664.size);
          TDDISystemBoundary _elem665;
          for (int _i666 = 0; _i666 < _list664.size; ++_i666)
          {
            _elem665 = new TDDISystemBoundary();
            _elem665.read(iprot);
            struct.SystemBoundaries.add(_elem665);
          }
        }
        struct.setSystemBoundariesIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list667 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>(_list667.size);
          TDDIAbstractStandardRef _elem668;
          for (int _i669 = 0; _i669 < _list667.size; ++_i669)
          {
            _elem668 = new TDDIAbstractStandardRef();
            _elem668.read(iprot);
            struct.AppliedStandards.add(_elem668);
          }
        }
        struct.setAppliedStandardsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list670 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(_list670.size);
          TDDIAbstractFunctionRef _elem671;
          for (int _i672 = 0; _i672 < _list670.size; ++_i672)
          {
            _elem671 = new TDDIAbstractFunctionRef();
            _elem671.read(iprot);
            struct.RealisedFunctions.add(_elem671);
          }
        }
        struct.setRealisedFunctionsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.AsAsset = new TDDIAbstractAsset();
        struct.AsAsset.read(iprot);
        struct.setAsAssetIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list673 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list673.size);
          TDDIAbstractDependabilityRequirementRef _elem674;
          for (int _i675 = 0; _i675 < _list673.size; ++_i675)
          {
            _elem674 = new TDDIAbstractDependabilityRequirementRef();
            _elem674.read(iprot);
            struct.DependabilityRequirements.add(_elem674);
          }
        }
        struct.setDependabilityRequirementsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.AssuranceLevel = new TDDIAssuranceLevel();
        struct.AssuranceLevel.read(iprot);
        struct.setAssuranceLevelIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list676 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(_list676.size);
          TDDIAbstractFailureModelRef _elem677;
          for (int _i678 = 0; _i678 < _list676.size; ++_i678)
          {
            _elem677 = new TDDIAbstractFailureModelRef();
            _elem677.read(iprot);
            struct.FailureModels.add(_elem677);
          }
        }
        struct.setFailureModelsIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list679 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>(_list679.size);
          TDDIAbstractSystemRef _elem680;
          for (int _i681 = 0; _i681 < _list679.size; ++_i681)
          {
            _elem680 = new TDDIAbstractSystemRef();
            _elem680.read(iprot);
            struct.SubSystems.add(_elem680);
          }
        }
        struct.setSubSystemsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.Dimensions = iprot.readString();
        struct.setDimensionsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.PricePerUnit = iprot.readI32();
        struct.setPricePerUnitIsSet(true);
      }
      if (incoming.get(20)) {
        struct.Mass = iprot.readDouble();
        struct.setMassIsSet(true);
      }
      if (incoming.get(21)) {
        struct.ProtectionCategory = iprot.readI32();
        struct.setProtectionCategoryIsSet(true);
      }
      if (incoming.get(22)) {
        struct.UsefulLifetime = iprot.readDouble();
        struct.setUsefulLifetimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.UsefulLifetimeTimeUnit = thriftContract.TDDITimeUnit.findByValue(iprot.readI32());
        struct.setUsefulLifetimeTimeUnitIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list682 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.LogicalComponents = new java.util.ArrayList<TDDILogicalComponentRef>(_list682.size);
          TDDILogicalComponentRef _elem683;
          for (int _i684 = 0; _i684 < _list682.size; ++_i684)
          {
            _elem683 = new TDDILogicalComponentRef();
            _elem683.read(iprot);
            struct.LogicalComponents.add(_elem683);
          }
        }
        struct.setLogicalComponentsIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TList _list685 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.LifecycleConditions = new java.util.ArrayList<TDDILifecycleCondition>(_list685.size);
          TDDILifecycleCondition _elem686;
          for (int _i687 = 0; _i687 < _list685.size; ++_i687)
          {
            _elem686 = new TDDILifecycleCondition();
            _elem686.read(iprot);
            struct.LifecycleConditions.add(_elem686);
          }
        }
        struct.setLifecycleConditionsIsSet(true);
      }
      if (incoming.get(26)) {
        struct.MaintenanceProcedure = new TDDIMaintenanceProcedure();
        struct.MaintenanceProcedure.read(iprot);
        struct.setMaintenanceProcedureIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

