/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-04")
public class TDDIHARAPackage implements org.apache.thrift.TBase<TDDIHARAPackage, TDDIHARAPackage._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIHARAPackage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIHARAPackage");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField HAZARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("Hazards", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField HAZARD_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("HazardTypes", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField HAZARD_TYPE_SYSTEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("HazardTypeSystems", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MALFUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Malfunctions", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField RISK_ASSESSMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("RiskAssessments", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField RISK_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("RiskParameters", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIHARAPackageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIHARAPackageTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.util.List<TDDIHazard> Hazards; // required
  public java.util.List<TDDIHazardType> HazardTypes; // required
  public java.util.List<TDDIHazardTypeSystem> HazardTypeSystems; // required
  public java.util.List<TDDIMalfunction> Malfunctions; // required
  public java.util.List<TDDIRiskAssessment> RiskAssessments; // required
  public java.util.List<TDDIAbstractRiskParameter> RiskParameters; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    HAZARDS((short)5, "Hazards"),
    HAZARD_TYPES((short)6, "HazardTypes"),
    HAZARD_TYPE_SYSTEMS((short)7, "HazardTypeSystems"),
    MALFUNCTIONS((short)8, "Malfunctions"),
    RISK_ASSESSMENTS((short)9, "RiskAssessments"),
    RISK_PARAMETERS((short)10, "RiskParameters");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // HAZARDS
          return HAZARDS;
        case 6: // HAZARD_TYPES
          return HAZARD_TYPES;
        case 7: // HAZARD_TYPE_SYSTEMS
          return HAZARD_TYPE_SYSTEMS;
        case 8: // MALFUNCTIONS
          return MALFUNCTIONS;
        case 9: // RISK_ASSESSMENTS
          return RISK_ASSESSMENTS;
        case 10: // RISK_PARAMETERS
          return RISK_PARAMETERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.HAZARDS, new org.apache.thrift.meta_data.FieldMetaData("Hazards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIHazard.class))));
    tmpMap.put(_Fields.HAZARD_TYPES, new org.apache.thrift.meta_data.FieldMetaData("HazardTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIHazardType.class))));
    tmpMap.put(_Fields.HAZARD_TYPE_SYSTEMS, new org.apache.thrift.meta_data.FieldMetaData("HazardTypeSystems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIHazardTypeSystem.class))));
    tmpMap.put(_Fields.MALFUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("Malfunctions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMalfunction.class))));
    tmpMap.put(_Fields.RISK_ASSESSMENTS, new org.apache.thrift.meta_data.FieldMetaData("RiskAssessments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIRiskAssessment.class))));
    tmpMap.put(_Fields.RISK_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("RiskParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractRiskParameter.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIHARAPackage.class, metaDataMap);
  }

  public TDDIHARAPackage() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.Hazards = new java.util.ArrayList<TDDIHazard>();

    this.HazardTypes = new java.util.ArrayList<TDDIHazardType>();

    this.HazardTypeSystems = new java.util.ArrayList<TDDIHazardTypeSystem>();

    this.Malfunctions = new java.util.ArrayList<TDDIMalfunction>();

    this.RiskAssessments = new java.util.ArrayList<TDDIRiskAssessment>();

    this.RiskParameters = new java.util.ArrayList<TDDIAbstractRiskParameter>();

  }

  public TDDIHARAPackage(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.util.List<TDDIHazard> Hazards,
    java.util.List<TDDIHazardType> HazardTypes,
    java.util.List<TDDIHazardTypeSystem> HazardTypeSystems,
    java.util.List<TDDIMalfunction> Malfunctions,
    java.util.List<TDDIRiskAssessment> RiskAssessments,
    java.util.List<TDDIAbstractRiskParameter> RiskParameters)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.Hazards = Hazards;
    this.HazardTypes = HazardTypes;
    this.HazardTypeSystems = HazardTypeSystems;
    this.Malfunctions = Malfunctions;
    this.RiskAssessments = RiskAssessments;
    this.RiskParameters = RiskParameters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIHARAPackage(TDDIHARAPackage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetHazards()) {
      java.util.List<TDDIHazard> __this__Hazards = new java.util.ArrayList<TDDIHazard>(other.Hazards.size());
      for (TDDIHazard other_element : other.Hazards) {
        __this__Hazards.add(new TDDIHazard(other_element));
      }
      this.Hazards = __this__Hazards;
    }
    if (other.isSetHazardTypes()) {
      java.util.List<TDDIHazardType> __this__HazardTypes = new java.util.ArrayList<TDDIHazardType>(other.HazardTypes.size());
      for (TDDIHazardType other_element : other.HazardTypes) {
        __this__HazardTypes.add(new TDDIHazardType(other_element));
      }
      this.HazardTypes = __this__HazardTypes;
    }
    if (other.isSetHazardTypeSystems()) {
      java.util.List<TDDIHazardTypeSystem> __this__HazardTypeSystems = new java.util.ArrayList<TDDIHazardTypeSystem>(other.HazardTypeSystems.size());
      for (TDDIHazardTypeSystem other_element : other.HazardTypeSystems) {
        __this__HazardTypeSystems.add(new TDDIHazardTypeSystem(other_element));
      }
      this.HazardTypeSystems = __this__HazardTypeSystems;
    }
    if (other.isSetMalfunctions()) {
      java.util.List<TDDIMalfunction> __this__Malfunctions = new java.util.ArrayList<TDDIMalfunction>(other.Malfunctions.size());
      for (TDDIMalfunction other_element : other.Malfunctions) {
        __this__Malfunctions.add(new TDDIMalfunction(other_element));
      }
      this.Malfunctions = __this__Malfunctions;
    }
    if (other.isSetRiskAssessments()) {
      java.util.List<TDDIRiskAssessment> __this__RiskAssessments = new java.util.ArrayList<TDDIRiskAssessment>(other.RiskAssessments.size());
      for (TDDIRiskAssessment other_element : other.RiskAssessments) {
        __this__RiskAssessments.add(new TDDIRiskAssessment(other_element));
      }
      this.RiskAssessments = __this__RiskAssessments;
    }
    if (other.isSetRiskParameters()) {
      java.util.List<TDDIAbstractRiskParameter> __this__RiskParameters = new java.util.ArrayList<TDDIAbstractRiskParameter>(other.RiskParameters.size());
      for (TDDIAbstractRiskParameter other_element : other.RiskParameters) {
        __this__RiskParameters.add(new TDDIAbstractRiskParameter(other_element));
      }
      this.RiskParameters = __this__RiskParameters;
    }
  }

  public TDDIHARAPackage deepCopy() {
    return new TDDIHARAPackage(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.Hazards = new java.util.ArrayList<TDDIHazard>();

    this.HazardTypes = new java.util.ArrayList<TDDIHazardType>();

    this.HazardTypeSystems = new java.util.ArrayList<TDDIHazardTypeSystem>();

    this.Malfunctions = new java.util.ArrayList<TDDIMalfunction>();

    this.RiskAssessments = new java.util.ArrayList<TDDIRiskAssessment>();

    this.RiskParameters = new java.util.ArrayList<TDDIAbstractRiskParameter>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDIHARAPackage setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIHARAPackage setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIHARAPackage setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIHARAPackage setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public int getHazardsSize() {
    return (this.Hazards == null) ? 0 : this.Hazards.size();
  }

  public java.util.Iterator<TDDIHazard> getHazardsIterator() {
    return (this.Hazards == null) ? null : this.Hazards.iterator();
  }

  public void addToHazards(TDDIHazard elem) {
    if (this.Hazards == null) {
      this.Hazards = new java.util.ArrayList<TDDIHazard>();
    }
    this.Hazards.add(elem);
  }

  public java.util.List<TDDIHazard> getHazards() {
    return this.Hazards;
  }

  public TDDIHARAPackage setHazards(java.util.List<TDDIHazard> Hazards) {
    this.Hazards = Hazards;
    return this;
  }

  public void unsetHazards() {
    this.Hazards = null;
  }

  /** Returns true if field Hazards is set (has been assigned a value) and false otherwise */
  public boolean isSetHazards() {
    return this.Hazards != null;
  }

  public void setHazardsIsSet(boolean value) {
    if (!value) {
      this.Hazards = null;
    }
  }

  public int getHazardTypesSize() {
    return (this.HazardTypes == null) ? 0 : this.HazardTypes.size();
  }

  public java.util.Iterator<TDDIHazardType> getHazardTypesIterator() {
    return (this.HazardTypes == null) ? null : this.HazardTypes.iterator();
  }

  public void addToHazardTypes(TDDIHazardType elem) {
    if (this.HazardTypes == null) {
      this.HazardTypes = new java.util.ArrayList<TDDIHazardType>();
    }
    this.HazardTypes.add(elem);
  }

  public java.util.List<TDDIHazardType> getHazardTypes() {
    return this.HazardTypes;
  }

  public TDDIHARAPackage setHazardTypes(java.util.List<TDDIHazardType> HazardTypes) {
    this.HazardTypes = HazardTypes;
    return this;
  }

  public void unsetHazardTypes() {
    this.HazardTypes = null;
  }

  /** Returns true if field HazardTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetHazardTypes() {
    return this.HazardTypes != null;
  }

  public void setHazardTypesIsSet(boolean value) {
    if (!value) {
      this.HazardTypes = null;
    }
  }

  public int getHazardTypeSystemsSize() {
    return (this.HazardTypeSystems == null) ? 0 : this.HazardTypeSystems.size();
  }

  public java.util.Iterator<TDDIHazardTypeSystem> getHazardTypeSystemsIterator() {
    return (this.HazardTypeSystems == null) ? null : this.HazardTypeSystems.iterator();
  }

  public void addToHazardTypeSystems(TDDIHazardTypeSystem elem) {
    if (this.HazardTypeSystems == null) {
      this.HazardTypeSystems = new java.util.ArrayList<TDDIHazardTypeSystem>();
    }
    this.HazardTypeSystems.add(elem);
  }

  public java.util.List<TDDIHazardTypeSystem> getHazardTypeSystems() {
    return this.HazardTypeSystems;
  }

  public TDDIHARAPackage setHazardTypeSystems(java.util.List<TDDIHazardTypeSystem> HazardTypeSystems) {
    this.HazardTypeSystems = HazardTypeSystems;
    return this;
  }

  public void unsetHazardTypeSystems() {
    this.HazardTypeSystems = null;
  }

  /** Returns true if field HazardTypeSystems is set (has been assigned a value) and false otherwise */
  public boolean isSetHazardTypeSystems() {
    return this.HazardTypeSystems != null;
  }

  public void setHazardTypeSystemsIsSet(boolean value) {
    if (!value) {
      this.HazardTypeSystems = null;
    }
  }

  public int getMalfunctionsSize() {
    return (this.Malfunctions == null) ? 0 : this.Malfunctions.size();
  }

  public java.util.Iterator<TDDIMalfunction> getMalfunctionsIterator() {
    return (this.Malfunctions == null) ? null : this.Malfunctions.iterator();
  }

  public void addToMalfunctions(TDDIMalfunction elem) {
    if (this.Malfunctions == null) {
      this.Malfunctions = new java.util.ArrayList<TDDIMalfunction>();
    }
    this.Malfunctions.add(elem);
  }

  public java.util.List<TDDIMalfunction> getMalfunctions() {
    return this.Malfunctions;
  }

  public TDDIHARAPackage setMalfunctions(java.util.List<TDDIMalfunction> Malfunctions) {
    this.Malfunctions = Malfunctions;
    return this;
  }

  public void unsetMalfunctions() {
    this.Malfunctions = null;
  }

  /** Returns true if field Malfunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetMalfunctions() {
    return this.Malfunctions != null;
  }

  public void setMalfunctionsIsSet(boolean value) {
    if (!value) {
      this.Malfunctions = null;
    }
  }

  public int getRiskAssessmentsSize() {
    return (this.RiskAssessments == null) ? 0 : this.RiskAssessments.size();
  }

  public java.util.Iterator<TDDIRiskAssessment> getRiskAssessmentsIterator() {
    return (this.RiskAssessments == null) ? null : this.RiskAssessments.iterator();
  }

  public void addToRiskAssessments(TDDIRiskAssessment elem) {
    if (this.RiskAssessments == null) {
      this.RiskAssessments = new java.util.ArrayList<TDDIRiskAssessment>();
    }
    this.RiskAssessments.add(elem);
  }

  public java.util.List<TDDIRiskAssessment> getRiskAssessments() {
    return this.RiskAssessments;
  }

  public TDDIHARAPackage setRiskAssessments(java.util.List<TDDIRiskAssessment> RiskAssessments) {
    this.RiskAssessments = RiskAssessments;
    return this;
  }

  public void unsetRiskAssessments() {
    this.RiskAssessments = null;
  }

  /** Returns true if field RiskAssessments is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskAssessments() {
    return this.RiskAssessments != null;
  }

  public void setRiskAssessmentsIsSet(boolean value) {
    if (!value) {
      this.RiskAssessments = null;
    }
  }

  public int getRiskParametersSize() {
    return (this.RiskParameters == null) ? 0 : this.RiskParameters.size();
  }

  public java.util.Iterator<TDDIAbstractRiskParameter> getRiskParametersIterator() {
    return (this.RiskParameters == null) ? null : this.RiskParameters.iterator();
  }

  public void addToRiskParameters(TDDIAbstractRiskParameter elem) {
    if (this.RiskParameters == null) {
      this.RiskParameters = new java.util.ArrayList<TDDIAbstractRiskParameter>();
    }
    this.RiskParameters.add(elem);
  }

  public java.util.List<TDDIAbstractRiskParameter> getRiskParameters() {
    return this.RiskParameters;
  }

  public TDDIHARAPackage setRiskParameters(java.util.List<TDDIAbstractRiskParameter> RiskParameters) {
    this.RiskParameters = RiskParameters;
    return this;
  }

  public void unsetRiskParameters() {
    this.RiskParameters = null;
  }

  /** Returns true if field RiskParameters is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskParameters() {
    return this.RiskParameters != null;
  }

  public void setRiskParametersIsSet(boolean value) {
    if (!value) {
      this.RiskParameters = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case HAZARDS:
      if (value == null) {
        unsetHazards();
      } else {
        setHazards((java.util.List<TDDIHazard>)value);
      }
      break;

    case HAZARD_TYPES:
      if (value == null) {
        unsetHazardTypes();
      } else {
        setHazardTypes((java.util.List<TDDIHazardType>)value);
      }
      break;

    case HAZARD_TYPE_SYSTEMS:
      if (value == null) {
        unsetHazardTypeSystems();
      } else {
        setHazardTypeSystems((java.util.List<TDDIHazardTypeSystem>)value);
      }
      break;

    case MALFUNCTIONS:
      if (value == null) {
        unsetMalfunctions();
      } else {
        setMalfunctions((java.util.List<TDDIMalfunction>)value);
      }
      break;

    case RISK_ASSESSMENTS:
      if (value == null) {
        unsetRiskAssessments();
      } else {
        setRiskAssessments((java.util.List<TDDIRiskAssessment>)value);
      }
      break;

    case RISK_PARAMETERS:
      if (value == null) {
        unsetRiskParameters();
      } else {
        setRiskParameters((java.util.List<TDDIAbstractRiskParameter>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case HAZARDS:
      return getHazards();

    case HAZARD_TYPES:
      return getHazardTypes();

    case HAZARD_TYPE_SYSTEMS:
      return getHazardTypeSystems();

    case MALFUNCTIONS:
      return getMalfunctions();

    case RISK_ASSESSMENTS:
      return getRiskAssessments();

    case RISK_PARAMETERS:
      return getRiskParameters();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case HAZARDS:
      return isSetHazards();
    case HAZARD_TYPES:
      return isSetHazardTypes();
    case HAZARD_TYPE_SYSTEMS:
      return isSetHazardTypeSystems();
    case MALFUNCTIONS:
      return isSetMalfunctions();
    case RISK_ASSESSMENTS:
      return isSetRiskAssessments();
    case RISK_PARAMETERS:
      return isSetRiskParameters();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIHARAPackage)
      return this.equals((TDDIHARAPackage)that);
    return false;
  }

  public boolean equals(TDDIHARAPackage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_Hazards = true && this.isSetHazards();
    boolean that_present_Hazards = true && that.isSetHazards();
    if (this_present_Hazards || that_present_Hazards) {
      if (!(this_present_Hazards && that_present_Hazards))
        return false;
      if (!this.Hazards.equals(that.Hazards))
        return false;
    }

    boolean this_present_HazardTypes = true && this.isSetHazardTypes();
    boolean that_present_HazardTypes = true && that.isSetHazardTypes();
    if (this_present_HazardTypes || that_present_HazardTypes) {
      if (!(this_present_HazardTypes && that_present_HazardTypes))
        return false;
      if (!this.HazardTypes.equals(that.HazardTypes))
        return false;
    }

    boolean this_present_HazardTypeSystems = true && this.isSetHazardTypeSystems();
    boolean that_present_HazardTypeSystems = true && that.isSetHazardTypeSystems();
    if (this_present_HazardTypeSystems || that_present_HazardTypeSystems) {
      if (!(this_present_HazardTypeSystems && that_present_HazardTypeSystems))
        return false;
      if (!this.HazardTypeSystems.equals(that.HazardTypeSystems))
        return false;
    }

    boolean this_present_Malfunctions = true && this.isSetMalfunctions();
    boolean that_present_Malfunctions = true && that.isSetMalfunctions();
    if (this_present_Malfunctions || that_present_Malfunctions) {
      if (!(this_present_Malfunctions && that_present_Malfunctions))
        return false;
      if (!this.Malfunctions.equals(that.Malfunctions))
        return false;
    }

    boolean this_present_RiskAssessments = true && this.isSetRiskAssessments();
    boolean that_present_RiskAssessments = true && that.isSetRiskAssessments();
    if (this_present_RiskAssessments || that_present_RiskAssessments) {
      if (!(this_present_RiskAssessments && that_present_RiskAssessments))
        return false;
      if (!this.RiskAssessments.equals(that.RiskAssessments))
        return false;
    }

    boolean this_present_RiskParameters = true && this.isSetRiskParameters();
    boolean that_present_RiskParameters = true && that.isSetRiskParameters();
    if (this_present_RiskParameters || that_present_RiskParameters) {
      if (!(this_present_RiskParameters && that_present_RiskParameters))
        return false;
      if (!this.RiskParameters.equals(that.RiskParameters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetHazards()) ? 131071 : 524287);
    if (isSetHazards())
      hashCode = hashCode * 8191 + Hazards.hashCode();

    hashCode = hashCode * 8191 + ((isSetHazardTypes()) ? 131071 : 524287);
    if (isSetHazardTypes())
      hashCode = hashCode * 8191 + HazardTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetHazardTypeSystems()) ? 131071 : 524287);
    if (isSetHazardTypeSystems())
      hashCode = hashCode * 8191 + HazardTypeSystems.hashCode();

    hashCode = hashCode * 8191 + ((isSetMalfunctions()) ? 131071 : 524287);
    if (isSetMalfunctions())
      hashCode = hashCode * 8191 + Malfunctions.hashCode();

    hashCode = hashCode * 8191 + ((isSetRiskAssessments()) ? 131071 : 524287);
    if (isSetRiskAssessments())
      hashCode = hashCode * 8191 + RiskAssessments.hashCode();

    hashCode = hashCode * 8191 + ((isSetRiskParameters()) ? 131071 : 524287);
    if (isSetRiskParameters())
      hashCode = hashCode * 8191 + RiskParameters.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIHARAPackage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHazards()).compareTo(other.isSetHazards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHazards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Hazards, other.Hazards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHazardTypes()).compareTo(other.isSetHazardTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHazardTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.HazardTypes, other.HazardTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHazardTypeSystems()).compareTo(other.isSetHazardTypeSystems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHazardTypeSystems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.HazardTypeSystems, other.HazardTypeSystems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMalfunctions()).compareTo(other.isSetMalfunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMalfunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Malfunctions, other.Malfunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRiskAssessments()).compareTo(other.isSetRiskAssessments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskAssessments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RiskAssessments, other.RiskAssessments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRiskParameters()).compareTo(other.isSetRiskParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RiskParameters, other.RiskParameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIHARAPackage(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Hazards:");
    if (this.Hazards == null) {
      sb.append("null");
    } else {
      sb.append(this.Hazards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("HazardTypes:");
    if (this.HazardTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.HazardTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("HazardTypeSystems:");
    if (this.HazardTypeSystems == null) {
      sb.append("null");
    } else {
      sb.append(this.HazardTypeSystems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Malfunctions:");
    if (this.Malfunctions == null) {
      sb.append("null");
    } else {
      sb.append(this.Malfunctions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RiskAssessments:");
    if (this.RiskAssessments == null) {
      sb.append("null");
    } else {
      sb.append(this.RiskAssessments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RiskParameters:");
    if (this.RiskParameters == null) {
      sb.append("null");
    } else {
      sb.append(this.RiskParameters);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIHARAPackageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIHARAPackageStandardScheme getScheme() {
      return new TDDIHARAPackageStandardScheme();
    }
  }

  private static class TDDIHARAPackageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIHARAPackage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIHARAPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1144 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list1144.size);
                TDDIKeyValueMap _elem1145;
                for (int _i1146 = 0; _i1146 < _list1144.size; ++_i1146)
                {
                  _elem1145 = new TDDIKeyValueMap();
                  _elem1145.read(iprot);
                  struct.KeyValueMaps.add(_elem1145);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HAZARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1147 = iprot.readListBegin();
                struct.Hazards = new java.util.ArrayList<TDDIHazard>(_list1147.size);
                TDDIHazard _elem1148;
                for (int _i1149 = 0; _i1149 < _list1147.size; ++_i1149)
                {
                  _elem1148 = new TDDIHazard();
                  _elem1148.read(iprot);
                  struct.Hazards.add(_elem1148);
                }
                iprot.readListEnd();
              }
              struct.setHazardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HAZARD_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1150 = iprot.readListBegin();
                struct.HazardTypes = new java.util.ArrayList<TDDIHazardType>(_list1150.size);
                TDDIHazardType _elem1151;
                for (int _i1152 = 0; _i1152 < _list1150.size; ++_i1152)
                {
                  _elem1151 = new TDDIHazardType();
                  _elem1151.read(iprot);
                  struct.HazardTypes.add(_elem1151);
                }
                iprot.readListEnd();
              }
              struct.setHazardTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAZARD_TYPE_SYSTEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1153 = iprot.readListBegin();
                struct.HazardTypeSystems = new java.util.ArrayList<TDDIHazardTypeSystem>(_list1153.size);
                TDDIHazardTypeSystem _elem1154;
                for (int _i1155 = 0; _i1155 < _list1153.size; ++_i1155)
                {
                  _elem1154 = new TDDIHazardTypeSystem();
                  _elem1154.read(iprot);
                  struct.HazardTypeSystems.add(_elem1154);
                }
                iprot.readListEnd();
              }
              struct.setHazardTypeSystemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MALFUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1156 = iprot.readListBegin();
                struct.Malfunctions = new java.util.ArrayList<TDDIMalfunction>(_list1156.size);
                TDDIMalfunction _elem1157;
                for (int _i1158 = 0; _i1158 < _list1156.size; ++_i1158)
                {
                  _elem1157 = new TDDIMalfunction();
                  _elem1157.read(iprot);
                  struct.Malfunctions.add(_elem1157);
                }
                iprot.readListEnd();
              }
              struct.setMalfunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RISK_ASSESSMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1159 = iprot.readListBegin();
                struct.RiskAssessments = new java.util.ArrayList<TDDIRiskAssessment>(_list1159.size);
                TDDIRiskAssessment _elem1160;
                for (int _i1161 = 0; _i1161 < _list1159.size; ++_i1161)
                {
                  _elem1160 = new TDDIRiskAssessment();
                  _elem1160.read(iprot);
                  struct.RiskAssessments.add(_elem1160);
                }
                iprot.readListEnd();
              }
              struct.setRiskAssessmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RISK_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1162 = iprot.readListBegin();
                struct.RiskParameters = new java.util.ArrayList<TDDIAbstractRiskParameter>(_list1162.size);
                TDDIAbstractRiskParameter _elem1163;
                for (int _i1164 = 0; _i1164 < _list1162.size; ++_i1164)
                {
                  _elem1163 = new TDDIAbstractRiskParameter();
                  _elem1163.read(iprot);
                  struct.RiskParameters.add(_elem1163);
                }
                iprot.readListEnd();
              }
              struct.setRiskParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIHARAPackage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter1165 : struct.KeyValueMaps)
          {
            _iter1165.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Hazards != null) {
        oprot.writeFieldBegin(HAZARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Hazards.size()));
          for (TDDIHazard _iter1166 : struct.Hazards)
          {
            _iter1166.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.HazardTypes != null) {
        oprot.writeFieldBegin(HAZARD_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.HazardTypes.size()));
          for (TDDIHazardType _iter1167 : struct.HazardTypes)
          {
            _iter1167.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.HazardTypeSystems != null) {
        oprot.writeFieldBegin(HAZARD_TYPE_SYSTEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.HazardTypeSystems.size()));
          for (TDDIHazardTypeSystem _iter1168 : struct.HazardTypeSystems)
          {
            _iter1168.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Malfunctions != null) {
        oprot.writeFieldBegin(MALFUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Malfunctions.size()));
          for (TDDIMalfunction _iter1169 : struct.Malfunctions)
          {
            _iter1169.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.RiskAssessments != null) {
        oprot.writeFieldBegin(RISK_ASSESSMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.RiskAssessments.size()));
          for (TDDIRiskAssessment _iter1170 : struct.RiskAssessments)
          {
            _iter1170.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.RiskParameters != null) {
        oprot.writeFieldBegin(RISK_PARAMETERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.RiskParameters.size()));
          for (TDDIAbstractRiskParameter _iter1171 : struct.RiskParameters)
          {
            _iter1171.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIHARAPackageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIHARAPackageTupleScheme getScheme() {
      return new TDDIHARAPackageTupleScheme();
    }
  }

  private static class TDDIHARAPackageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIHARAPackage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIHARAPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetHazards()) {
        optionals.set(4);
      }
      if (struct.isSetHazardTypes()) {
        optionals.set(5);
      }
      if (struct.isSetHazardTypeSystems()) {
        optionals.set(6);
      }
      if (struct.isSetMalfunctions()) {
        optionals.set(7);
      }
      if (struct.isSetRiskAssessments()) {
        optionals.set(8);
      }
      if (struct.isSetRiskParameters()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter1172 : struct.KeyValueMaps)
          {
            _iter1172.write(oprot);
          }
        }
      }
      if (struct.isSetHazards()) {
        {
          oprot.writeI32(struct.Hazards.size());
          for (TDDIHazard _iter1173 : struct.Hazards)
          {
            _iter1173.write(oprot);
          }
        }
      }
      if (struct.isSetHazardTypes()) {
        {
          oprot.writeI32(struct.HazardTypes.size());
          for (TDDIHazardType _iter1174 : struct.HazardTypes)
          {
            _iter1174.write(oprot);
          }
        }
      }
      if (struct.isSetHazardTypeSystems()) {
        {
          oprot.writeI32(struct.HazardTypeSystems.size());
          for (TDDIHazardTypeSystem _iter1175 : struct.HazardTypeSystems)
          {
            _iter1175.write(oprot);
          }
        }
      }
      if (struct.isSetMalfunctions()) {
        {
          oprot.writeI32(struct.Malfunctions.size());
          for (TDDIMalfunction _iter1176 : struct.Malfunctions)
          {
            _iter1176.write(oprot);
          }
        }
      }
      if (struct.isSetRiskAssessments()) {
        {
          oprot.writeI32(struct.RiskAssessments.size());
          for (TDDIRiskAssessment _iter1177 : struct.RiskAssessments)
          {
            _iter1177.write(oprot);
          }
        }
      }
      if (struct.isSetRiskParameters()) {
        {
          oprot.writeI32(struct.RiskParameters.size());
          for (TDDIAbstractRiskParameter _iter1178 : struct.RiskParameters)
          {
            _iter1178.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIHARAPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list1179 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list1179.size);
          TDDIKeyValueMap _elem1180;
          for (int _i1181 = 0; _i1181 < _list1179.size; ++_i1181)
          {
            _elem1180 = new TDDIKeyValueMap();
            _elem1180.read(iprot);
            struct.KeyValueMaps.add(_elem1180);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list1182 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Hazards = new java.util.ArrayList<TDDIHazard>(_list1182.size);
          TDDIHazard _elem1183;
          for (int _i1184 = 0; _i1184 < _list1182.size; ++_i1184)
          {
            _elem1183 = new TDDIHazard();
            _elem1183.read(iprot);
            struct.Hazards.add(_elem1183);
          }
        }
        struct.setHazardsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list1185 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.HazardTypes = new java.util.ArrayList<TDDIHazardType>(_list1185.size);
          TDDIHazardType _elem1186;
          for (int _i1187 = 0; _i1187 < _list1185.size; ++_i1187)
          {
            _elem1186 = new TDDIHazardType();
            _elem1186.read(iprot);
            struct.HazardTypes.add(_elem1186);
          }
        }
        struct.setHazardTypesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list1188 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.HazardTypeSystems = new java.util.ArrayList<TDDIHazardTypeSystem>(_list1188.size);
          TDDIHazardTypeSystem _elem1189;
          for (int _i1190 = 0; _i1190 < _list1188.size; ++_i1190)
          {
            _elem1189 = new TDDIHazardTypeSystem();
            _elem1189.read(iprot);
            struct.HazardTypeSystems.add(_elem1189);
          }
        }
        struct.setHazardTypeSystemsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list1191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Malfunctions = new java.util.ArrayList<TDDIMalfunction>(_list1191.size);
          TDDIMalfunction _elem1192;
          for (int _i1193 = 0; _i1193 < _list1191.size; ++_i1193)
          {
            _elem1192 = new TDDIMalfunction();
            _elem1192.read(iprot);
            struct.Malfunctions.add(_elem1192);
          }
        }
        struct.setMalfunctionsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list1194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.RiskAssessments = new java.util.ArrayList<TDDIRiskAssessment>(_list1194.size);
          TDDIRiskAssessment _elem1195;
          for (int _i1196 = 0; _i1196 < _list1194.size; ++_i1196)
          {
            _elem1195 = new TDDIRiskAssessment();
            _elem1195.read(iprot);
            struct.RiskAssessments.add(_elem1195);
          }
        }
        struct.setRiskAssessmentsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list1197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.RiskParameters = new java.util.ArrayList<TDDIAbstractRiskParameter>(_list1197.size);
          TDDIAbstractRiskParameter _elem1198;
          for (int _i1199 = 0; _i1199 < _list1197.size; ++_i1199)
          {
            _elem1198 = new TDDIAbstractRiskParameter();
            _elem1198.read(iprot);
            struct.RiskParameters.add(_elem1198);
          }
        }
        struct.setRiskParametersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

