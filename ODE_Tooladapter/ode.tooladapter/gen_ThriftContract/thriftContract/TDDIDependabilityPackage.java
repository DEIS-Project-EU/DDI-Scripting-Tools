/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-14")
public class TDDIDependabilityPackage implements org.apache.thrift.TBase<TDDIDependabilityPackage, TDDIDependabilityPackage._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIDependabilityPackage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIDependabilityPackage");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MEASURES_FIELD_DESC = new org.apache.thrift.protocol.TField("Measures", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField MEASURE_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("MeasureTypes", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_PROCEDURES_FIELD_DESC = new org.apache.thrift.protocol.TField("MaintenanceProcedures", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DOMAIN_PACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("DomainPackages", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TARAPACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("TARAPackages", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField HARAPACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("HARAPackages", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_PACKAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("RequirementPackages", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIDependabilityPackageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIDependabilityPackageTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.util.List<TDDIAbstractMeasure> Measures; // required
  public java.util.List<TDDIMeasureType> MeasureTypes; // required
  public java.util.List<TDDIMaintenanceProcedure> MaintenanceProcedures; // required
  public java.util.List<TDDIDomainPackage> DomainPackages; // required
  public java.util.List<TDDITARAPackage> TARAPackages; // required
  public java.util.List<TDDIHARAPackage> HARAPackages; // required
  public java.util.List<TDDIRequirementPackage> RequirementPackages; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    MEASURES((short)5, "Measures"),
    MEASURE_TYPES((short)6, "MeasureTypes"),
    MAINTENANCE_PROCEDURES((short)7, "MaintenanceProcedures"),
    DOMAIN_PACKAGES((short)8, "DomainPackages"),
    TARAPACKAGES((short)9, "TARAPackages"),
    HARAPACKAGES((short)10, "HARAPackages"),
    REQUIREMENT_PACKAGES((short)11, "RequirementPackages");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // MEASURES
          return MEASURES;
        case 6: // MEASURE_TYPES
          return MEASURE_TYPES;
        case 7: // MAINTENANCE_PROCEDURES
          return MAINTENANCE_PROCEDURES;
        case 8: // DOMAIN_PACKAGES
          return DOMAIN_PACKAGES;
        case 9: // TARAPACKAGES
          return TARAPACKAGES;
        case 10: // HARAPACKAGES
          return HARAPACKAGES;
        case 11: // REQUIREMENT_PACKAGES
          return REQUIREMENT_PACKAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.MEASURES, new org.apache.thrift.meta_data.FieldMetaData("Measures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractMeasure.class))));
    tmpMap.put(_Fields.MEASURE_TYPES, new org.apache.thrift.meta_data.FieldMetaData("MeasureTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMeasureType.class))));
    tmpMap.put(_Fields.MAINTENANCE_PROCEDURES, new org.apache.thrift.meta_data.FieldMetaData("MaintenanceProcedures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMaintenanceProcedure.class))));
    tmpMap.put(_Fields.DOMAIN_PACKAGES, new org.apache.thrift.meta_data.FieldMetaData("DomainPackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TDDIDomainPackage"))));
    tmpMap.put(_Fields.TARAPACKAGES, new org.apache.thrift.meta_data.FieldMetaData("TARAPackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TDDITARAPackage"))));
    tmpMap.put(_Fields.HARAPACKAGES, new org.apache.thrift.meta_data.FieldMetaData("HARAPackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TDDIHARAPackage"))));
    tmpMap.put(_Fields.REQUIREMENT_PACKAGES, new org.apache.thrift.meta_data.FieldMetaData("RequirementPackages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TDDIRequirementPackage"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIDependabilityPackage.class, metaDataMap);
  }

  public TDDIDependabilityPackage() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.Measures = new java.util.ArrayList<TDDIAbstractMeasure>();

    this.MeasureTypes = new java.util.ArrayList<TDDIMeasureType>();

    this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedure>();

    this.DomainPackages = new java.util.ArrayList<TDDIDomainPackage>();

    this.TARAPackages = new java.util.ArrayList<TDDITARAPackage>();

    this.HARAPackages = new java.util.ArrayList<TDDIHARAPackage>();

    this.RequirementPackages = new java.util.ArrayList<TDDIRequirementPackage>();

  }

  public TDDIDependabilityPackage(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.util.List<TDDIAbstractMeasure> Measures,
    java.util.List<TDDIMeasureType> MeasureTypes,
    java.util.List<TDDIMaintenanceProcedure> MaintenanceProcedures,
    java.util.List<TDDIDomainPackage> DomainPackages,
    java.util.List<TDDITARAPackage> TARAPackages,
    java.util.List<TDDIHARAPackage> HARAPackages,
    java.util.List<TDDIRequirementPackage> RequirementPackages)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.Measures = Measures;
    this.MeasureTypes = MeasureTypes;
    this.MaintenanceProcedures = MaintenanceProcedures;
    this.DomainPackages = DomainPackages;
    this.TARAPackages = TARAPackages;
    this.HARAPackages = HARAPackages;
    this.RequirementPackages = RequirementPackages;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIDependabilityPackage(TDDIDependabilityPackage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetMeasures()) {
      java.util.List<TDDIAbstractMeasure> __this__Measures = new java.util.ArrayList<TDDIAbstractMeasure>(other.Measures.size());
      for (TDDIAbstractMeasure other_element : other.Measures) {
        __this__Measures.add(new TDDIAbstractMeasure(other_element));
      }
      this.Measures = __this__Measures;
    }
    if (other.isSetMeasureTypes()) {
      java.util.List<TDDIMeasureType> __this__MeasureTypes = new java.util.ArrayList<TDDIMeasureType>(other.MeasureTypes.size());
      for (TDDIMeasureType other_element : other.MeasureTypes) {
        __this__MeasureTypes.add(new TDDIMeasureType(other_element));
      }
      this.MeasureTypes = __this__MeasureTypes;
    }
    if (other.isSetMaintenanceProcedures()) {
      java.util.List<TDDIMaintenanceProcedure> __this__MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedure>(other.MaintenanceProcedures.size());
      for (TDDIMaintenanceProcedure other_element : other.MaintenanceProcedures) {
        __this__MaintenanceProcedures.add(new TDDIMaintenanceProcedure(other_element));
      }
      this.MaintenanceProcedures = __this__MaintenanceProcedures;
    }
    if (other.isSetDomainPackages()) {
      java.util.List<TDDIDomainPackage> __this__DomainPackages = new java.util.ArrayList<TDDIDomainPackage>(other.DomainPackages.size());
      for (TDDIDomainPackage other_element : other.DomainPackages) {
        __this__DomainPackages.add(new TDDIDomainPackage(other_element));
      }
      this.DomainPackages = __this__DomainPackages;
    }
    if (other.isSetTARAPackages()) {
      java.util.List<TDDITARAPackage> __this__TARAPackages = new java.util.ArrayList<TDDITARAPackage>(other.TARAPackages.size());
      for (TDDITARAPackage other_element : other.TARAPackages) {
        __this__TARAPackages.add(new TDDITARAPackage(other_element));
      }
      this.TARAPackages = __this__TARAPackages;
    }
    if (other.isSetHARAPackages()) {
      java.util.List<TDDIHARAPackage> __this__HARAPackages = new java.util.ArrayList<TDDIHARAPackage>(other.HARAPackages.size());
      for (TDDIHARAPackage other_element : other.HARAPackages) {
        __this__HARAPackages.add(new TDDIHARAPackage(other_element));
      }
      this.HARAPackages = __this__HARAPackages;
    }
    if (other.isSetRequirementPackages()) {
      java.util.List<TDDIRequirementPackage> __this__RequirementPackages = new java.util.ArrayList<TDDIRequirementPackage>(other.RequirementPackages.size());
      for (TDDIRequirementPackage other_element : other.RequirementPackages) {
        __this__RequirementPackages.add(new TDDIRequirementPackage(other_element));
      }
      this.RequirementPackages = __this__RequirementPackages;
    }
  }

  public TDDIDependabilityPackage deepCopy() {
    return new TDDIDependabilityPackage(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.Measures = new java.util.ArrayList<TDDIAbstractMeasure>();

    this.MeasureTypes = new java.util.ArrayList<TDDIMeasureType>();

    this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedure>();

    this.DomainPackages = new java.util.ArrayList<TDDIDomainPackage>();

    this.TARAPackages = new java.util.ArrayList<TDDITARAPackage>();

    this.HARAPackages = new java.util.ArrayList<TDDIHARAPackage>();

    this.RequirementPackages = new java.util.ArrayList<TDDIRequirementPackage>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDIDependabilityPackage setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIDependabilityPackage setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIDependabilityPackage setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIDependabilityPackage setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public int getMeasuresSize() {
    return (this.Measures == null) ? 0 : this.Measures.size();
  }

  public java.util.Iterator<TDDIAbstractMeasure> getMeasuresIterator() {
    return (this.Measures == null) ? null : this.Measures.iterator();
  }

  public void addToMeasures(TDDIAbstractMeasure elem) {
    if (this.Measures == null) {
      this.Measures = new java.util.ArrayList<TDDIAbstractMeasure>();
    }
    this.Measures.add(elem);
  }

  public java.util.List<TDDIAbstractMeasure> getMeasures() {
    return this.Measures;
  }

  public TDDIDependabilityPackage setMeasures(java.util.List<TDDIAbstractMeasure> Measures) {
    this.Measures = Measures;
    return this;
  }

  public void unsetMeasures() {
    this.Measures = null;
  }

  /** Returns true if field Measures is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasures() {
    return this.Measures != null;
  }

  public void setMeasuresIsSet(boolean value) {
    if (!value) {
      this.Measures = null;
    }
  }

  public int getMeasureTypesSize() {
    return (this.MeasureTypes == null) ? 0 : this.MeasureTypes.size();
  }

  public java.util.Iterator<TDDIMeasureType> getMeasureTypesIterator() {
    return (this.MeasureTypes == null) ? null : this.MeasureTypes.iterator();
  }

  public void addToMeasureTypes(TDDIMeasureType elem) {
    if (this.MeasureTypes == null) {
      this.MeasureTypes = new java.util.ArrayList<TDDIMeasureType>();
    }
    this.MeasureTypes.add(elem);
  }

  public java.util.List<TDDIMeasureType> getMeasureTypes() {
    return this.MeasureTypes;
  }

  public TDDIDependabilityPackage setMeasureTypes(java.util.List<TDDIMeasureType> MeasureTypes) {
    this.MeasureTypes = MeasureTypes;
    return this;
  }

  public void unsetMeasureTypes() {
    this.MeasureTypes = null;
  }

  /** Returns true if field MeasureTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasureTypes() {
    return this.MeasureTypes != null;
  }

  public void setMeasureTypesIsSet(boolean value) {
    if (!value) {
      this.MeasureTypes = null;
    }
  }

  public int getMaintenanceProceduresSize() {
    return (this.MaintenanceProcedures == null) ? 0 : this.MaintenanceProcedures.size();
  }

  public java.util.Iterator<TDDIMaintenanceProcedure> getMaintenanceProceduresIterator() {
    return (this.MaintenanceProcedures == null) ? null : this.MaintenanceProcedures.iterator();
  }

  public void addToMaintenanceProcedures(TDDIMaintenanceProcedure elem) {
    if (this.MaintenanceProcedures == null) {
      this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedure>();
    }
    this.MaintenanceProcedures.add(elem);
  }

  public java.util.List<TDDIMaintenanceProcedure> getMaintenanceProcedures() {
    return this.MaintenanceProcedures;
  }

  public TDDIDependabilityPackage setMaintenanceProcedures(java.util.List<TDDIMaintenanceProcedure> MaintenanceProcedures) {
    this.MaintenanceProcedures = MaintenanceProcedures;
    return this;
  }

  public void unsetMaintenanceProcedures() {
    this.MaintenanceProcedures = null;
  }

  /** Returns true if field MaintenanceProcedures is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceProcedures() {
    return this.MaintenanceProcedures != null;
  }

  public void setMaintenanceProceduresIsSet(boolean value) {
    if (!value) {
      this.MaintenanceProcedures = null;
    }
  }

  public int getDomainPackagesSize() {
    return (this.DomainPackages == null) ? 0 : this.DomainPackages.size();
  }

  public java.util.Iterator<TDDIDomainPackage> getDomainPackagesIterator() {
    return (this.DomainPackages == null) ? null : this.DomainPackages.iterator();
  }

  public void addToDomainPackages(TDDIDomainPackage elem) {
    if (this.DomainPackages == null) {
      this.DomainPackages = new java.util.ArrayList<TDDIDomainPackage>();
    }
    this.DomainPackages.add(elem);
  }

  public java.util.List<TDDIDomainPackage> getDomainPackages() {
    return this.DomainPackages;
  }

  public TDDIDependabilityPackage setDomainPackages(java.util.List<TDDIDomainPackage> DomainPackages) {
    this.DomainPackages = DomainPackages;
    return this;
  }

  public void unsetDomainPackages() {
    this.DomainPackages = null;
  }

  /** Returns true if field DomainPackages is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainPackages() {
    return this.DomainPackages != null;
  }

  public void setDomainPackagesIsSet(boolean value) {
    if (!value) {
      this.DomainPackages = null;
    }
  }

  public int getTARAPackagesSize() {
    return (this.TARAPackages == null) ? 0 : this.TARAPackages.size();
  }

  public java.util.Iterator<TDDITARAPackage> getTARAPackagesIterator() {
    return (this.TARAPackages == null) ? null : this.TARAPackages.iterator();
  }

  public void addToTARAPackages(TDDITARAPackage elem) {
    if (this.TARAPackages == null) {
      this.TARAPackages = new java.util.ArrayList<TDDITARAPackage>();
    }
    this.TARAPackages.add(elem);
  }

  public java.util.List<TDDITARAPackage> getTARAPackages() {
    return this.TARAPackages;
  }

  public TDDIDependabilityPackage setTARAPackages(java.util.List<TDDITARAPackage> TARAPackages) {
    this.TARAPackages = TARAPackages;
    return this;
  }

  public void unsetTARAPackages() {
    this.TARAPackages = null;
  }

  /** Returns true if field TARAPackages is set (has been assigned a value) and false otherwise */
  public boolean isSetTARAPackages() {
    return this.TARAPackages != null;
  }

  public void setTARAPackagesIsSet(boolean value) {
    if (!value) {
      this.TARAPackages = null;
    }
  }

  public int getHARAPackagesSize() {
    return (this.HARAPackages == null) ? 0 : this.HARAPackages.size();
  }

  public java.util.Iterator<TDDIHARAPackage> getHARAPackagesIterator() {
    return (this.HARAPackages == null) ? null : this.HARAPackages.iterator();
  }

  public void addToHARAPackages(TDDIHARAPackage elem) {
    if (this.HARAPackages == null) {
      this.HARAPackages = new java.util.ArrayList<TDDIHARAPackage>();
    }
    this.HARAPackages.add(elem);
  }

  public java.util.List<TDDIHARAPackage> getHARAPackages() {
    return this.HARAPackages;
  }

  public TDDIDependabilityPackage setHARAPackages(java.util.List<TDDIHARAPackage> HARAPackages) {
    this.HARAPackages = HARAPackages;
    return this;
  }

  public void unsetHARAPackages() {
    this.HARAPackages = null;
  }

  /** Returns true if field HARAPackages is set (has been assigned a value) and false otherwise */
  public boolean isSetHARAPackages() {
    return this.HARAPackages != null;
  }

  public void setHARAPackagesIsSet(boolean value) {
    if (!value) {
      this.HARAPackages = null;
    }
  }

  public int getRequirementPackagesSize() {
    return (this.RequirementPackages == null) ? 0 : this.RequirementPackages.size();
  }

  public java.util.Iterator<TDDIRequirementPackage> getRequirementPackagesIterator() {
    return (this.RequirementPackages == null) ? null : this.RequirementPackages.iterator();
  }

  public void addToRequirementPackages(TDDIRequirementPackage elem) {
    if (this.RequirementPackages == null) {
      this.RequirementPackages = new java.util.ArrayList<TDDIRequirementPackage>();
    }
    this.RequirementPackages.add(elem);
  }

  public java.util.List<TDDIRequirementPackage> getRequirementPackages() {
    return this.RequirementPackages;
  }

  public TDDIDependabilityPackage setRequirementPackages(java.util.List<TDDIRequirementPackage> RequirementPackages) {
    this.RequirementPackages = RequirementPackages;
    return this;
  }

  public void unsetRequirementPackages() {
    this.RequirementPackages = null;
  }

  /** Returns true if field RequirementPackages is set (has been assigned a value) and false otherwise */
  public boolean isSetRequirementPackages() {
    return this.RequirementPackages != null;
  }

  public void setRequirementPackagesIsSet(boolean value) {
    if (!value) {
      this.RequirementPackages = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case MEASURES:
      if (value == null) {
        unsetMeasures();
      } else {
        setMeasures((java.util.List<TDDIAbstractMeasure>)value);
      }
      break;

    case MEASURE_TYPES:
      if (value == null) {
        unsetMeasureTypes();
      } else {
        setMeasureTypes((java.util.List<TDDIMeasureType>)value);
      }
      break;

    case MAINTENANCE_PROCEDURES:
      if (value == null) {
        unsetMaintenanceProcedures();
      } else {
        setMaintenanceProcedures((java.util.List<TDDIMaintenanceProcedure>)value);
      }
      break;

    case DOMAIN_PACKAGES:
      if (value == null) {
        unsetDomainPackages();
      } else {
        setDomainPackages((java.util.List<TDDIDomainPackage>)value);
      }
      break;

    case TARAPACKAGES:
      if (value == null) {
        unsetTARAPackages();
      } else {
        setTARAPackages((java.util.List<TDDITARAPackage>)value);
      }
      break;

    case HARAPACKAGES:
      if (value == null) {
        unsetHARAPackages();
      } else {
        setHARAPackages((java.util.List<TDDIHARAPackage>)value);
      }
      break;

    case REQUIREMENT_PACKAGES:
      if (value == null) {
        unsetRequirementPackages();
      } else {
        setRequirementPackages((java.util.List<TDDIRequirementPackage>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case MEASURES:
      return getMeasures();

    case MEASURE_TYPES:
      return getMeasureTypes();

    case MAINTENANCE_PROCEDURES:
      return getMaintenanceProcedures();

    case DOMAIN_PACKAGES:
      return getDomainPackages();

    case TARAPACKAGES:
      return getTARAPackages();

    case HARAPACKAGES:
      return getHARAPackages();

    case REQUIREMENT_PACKAGES:
      return getRequirementPackages();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case MEASURES:
      return isSetMeasures();
    case MEASURE_TYPES:
      return isSetMeasureTypes();
    case MAINTENANCE_PROCEDURES:
      return isSetMaintenanceProcedures();
    case DOMAIN_PACKAGES:
      return isSetDomainPackages();
    case TARAPACKAGES:
      return isSetTARAPackages();
    case HARAPACKAGES:
      return isSetHARAPackages();
    case REQUIREMENT_PACKAGES:
      return isSetRequirementPackages();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIDependabilityPackage)
      return this.equals((TDDIDependabilityPackage)that);
    return false;
  }

  public boolean equals(TDDIDependabilityPackage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_Measures = true && this.isSetMeasures();
    boolean that_present_Measures = true && that.isSetMeasures();
    if (this_present_Measures || that_present_Measures) {
      if (!(this_present_Measures && that_present_Measures))
        return false;
      if (!this.Measures.equals(that.Measures))
        return false;
    }

    boolean this_present_MeasureTypes = true && this.isSetMeasureTypes();
    boolean that_present_MeasureTypes = true && that.isSetMeasureTypes();
    if (this_present_MeasureTypes || that_present_MeasureTypes) {
      if (!(this_present_MeasureTypes && that_present_MeasureTypes))
        return false;
      if (!this.MeasureTypes.equals(that.MeasureTypes))
        return false;
    }

    boolean this_present_MaintenanceProcedures = true && this.isSetMaintenanceProcedures();
    boolean that_present_MaintenanceProcedures = true && that.isSetMaintenanceProcedures();
    if (this_present_MaintenanceProcedures || that_present_MaintenanceProcedures) {
      if (!(this_present_MaintenanceProcedures && that_present_MaintenanceProcedures))
        return false;
      if (!this.MaintenanceProcedures.equals(that.MaintenanceProcedures))
        return false;
    }

    boolean this_present_DomainPackages = true && this.isSetDomainPackages();
    boolean that_present_DomainPackages = true && that.isSetDomainPackages();
    if (this_present_DomainPackages || that_present_DomainPackages) {
      if (!(this_present_DomainPackages && that_present_DomainPackages))
        return false;
      if (!this.DomainPackages.equals(that.DomainPackages))
        return false;
    }

    boolean this_present_TARAPackages = true && this.isSetTARAPackages();
    boolean that_present_TARAPackages = true && that.isSetTARAPackages();
    if (this_present_TARAPackages || that_present_TARAPackages) {
      if (!(this_present_TARAPackages && that_present_TARAPackages))
        return false;
      if (!this.TARAPackages.equals(that.TARAPackages))
        return false;
    }

    boolean this_present_HARAPackages = true && this.isSetHARAPackages();
    boolean that_present_HARAPackages = true && that.isSetHARAPackages();
    if (this_present_HARAPackages || that_present_HARAPackages) {
      if (!(this_present_HARAPackages && that_present_HARAPackages))
        return false;
      if (!this.HARAPackages.equals(that.HARAPackages))
        return false;
    }

    boolean this_present_RequirementPackages = true && this.isSetRequirementPackages();
    boolean that_present_RequirementPackages = true && that.isSetRequirementPackages();
    if (this_present_RequirementPackages || that_present_RequirementPackages) {
      if (!(this_present_RequirementPackages && that_present_RequirementPackages))
        return false;
      if (!this.RequirementPackages.equals(that.RequirementPackages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeasures()) ? 131071 : 524287);
    if (isSetMeasures())
      hashCode = hashCode * 8191 + Measures.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeasureTypes()) ? 131071 : 524287);
    if (isSetMeasureTypes())
      hashCode = hashCode * 8191 + MeasureTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaintenanceProcedures()) ? 131071 : 524287);
    if (isSetMaintenanceProcedures())
      hashCode = hashCode * 8191 + MaintenanceProcedures.hashCode();

    hashCode = hashCode * 8191 + ((isSetDomainPackages()) ? 131071 : 524287);
    if (isSetDomainPackages())
      hashCode = hashCode * 8191 + DomainPackages.hashCode();

    hashCode = hashCode * 8191 + ((isSetTARAPackages()) ? 131071 : 524287);
    if (isSetTARAPackages())
      hashCode = hashCode * 8191 + TARAPackages.hashCode();

    hashCode = hashCode * 8191 + ((isSetHARAPackages()) ? 131071 : 524287);
    if (isSetHARAPackages())
      hashCode = hashCode * 8191 + HARAPackages.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequirementPackages()) ? 131071 : 524287);
    if (isSetRequirementPackages())
      hashCode = hashCode * 8191 + RequirementPackages.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIDependabilityPackage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMeasures()).compareTo(other.isSetMeasures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Measures, other.Measures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMeasureTypes()).compareTo(other.isSetMeasureTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasureTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MeasureTypes, other.MeasureTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaintenanceProcedures()).compareTo(other.isSetMaintenanceProcedures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceProcedures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MaintenanceProcedures, other.MaintenanceProcedures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainPackages()).compareTo(other.isSetDomainPackages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainPackages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DomainPackages, other.DomainPackages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTARAPackages()).compareTo(other.isSetTARAPackages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTARAPackages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TARAPackages, other.TARAPackages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHARAPackages()).compareTo(other.isSetHARAPackages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHARAPackages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.HARAPackages, other.HARAPackages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequirementPackages()).compareTo(other.isSetRequirementPackages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequirementPackages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RequirementPackages, other.RequirementPackages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIDependabilityPackage(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Measures:");
    if (this.Measures == null) {
      sb.append("null");
    } else {
      sb.append(this.Measures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MeasureTypes:");
    if (this.MeasureTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.MeasureTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MaintenanceProcedures:");
    if (this.MaintenanceProcedures == null) {
      sb.append("null");
    } else {
      sb.append(this.MaintenanceProcedures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DomainPackages:");
    if (this.DomainPackages == null) {
      sb.append("null");
    } else {
      sb.append(this.DomainPackages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TARAPackages:");
    if (this.TARAPackages == null) {
      sb.append("null");
    } else {
      sb.append(this.TARAPackages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("HARAPackages:");
    if (this.HARAPackages == null) {
      sb.append("null");
    } else {
      sb.append(this.HARAPackages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequirementPackages:");
    if (this.RequirementPackages == null) {
      sb.append("null");
    } else {
      sb.append(this.RequirementPackages);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIDependabilityPackageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIDependabilityPackageStandardScheme getScheme() {
      return new TDDIDependabilityPackageStandardScheme();
    }
  }

  private static class TDDIDependabilityPackageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIDependabilityPackage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIDependabilityPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list40.size);
                TDDIKeyValueMap _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new TDDIKeyValueMap();
                  _elem41.read(iprot);
                  struct.KeyValueMaps.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEASURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.Measures = new java.util.ArrayList<TDDIAbstractMeasure>(_list43.size);
                TDDIAbstractMeasure _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new TDDIAbstractMeasure();
                  _elem44.read(iprot);
                  struct.Measures.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setMeasuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEASURE_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.MeasureTypes = new java.util.ArrayList<TDDIMeasureType>(_list46.size);
                TDDIMeasureType _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = new TDDIMeasureType();
                  _elem47.read(iprot);
                  struct.MeasureTypes.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setMeasureTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAINTENANCE_PROCEDURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedure>(_list49.size);
                TDDIMaintenanceProcedure _elem50;
                for (int _i51 = 0; _i51 < _list49.size; ++_i51)
                {
                  _elem50 = new TDDIMaintenanceProcedure();
                  _elem50.read(iprot);
                  struct.MaintenanceProcedures.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setMaintenanceProceduresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOMAIN_PACKAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.DomainPackages = new java.util.ArrayList<TDDIDomainPackage>(_list52.size);
                TDDIDomainPackage _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = new TDDIDomainPackage();
                  _elem53.read(iprot);
                  struct.DomainPackages.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setDomainPackagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TARAPACKAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.TARAPackages = new java.util.ArrayList<TDDITARAPackage>(_list55.size);
                TDDITARAPackage _elem56;
                for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                {
                  _elem56 = new TDDITARAPackage();
                  _elem56.read(iprot);
                  struct.TARAPackages.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setTARAPackagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HARAPACKAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.HARAPackages = new java.util.ArrayList<TDDIHARAPackage>(_list58.size);
                TDDIHARAPackage _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = new TDDIHARAPackage();
                  _elem59.read(iprot);
                  struct.HARAPackages.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setHARAPackagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQUIREMENT_PACKAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.RequirementPackages = new java.util.ArrayList<TDDIRequirementPackage>(_list61.size);
                TDDIRequirementPackage _elem62;
                for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                {
                  _elem62 = new TDDIRequirementPackage();
                  _elem62.read(iprot);
                  struct.RequirementPackages.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setRequirementPackagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIDependabilityPackage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter64 : struct.KeyValueMaps)
          {
            _iter64.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Measures != null) {
        oprot.writeFieldBegin(MEASURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Measures.size()));
          for (TDDIAbstractMeasure _iter65 : struct.Measures)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.MeasureTypes != null) {
        oprot.writeFieldBegin(MEASURE_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.MeasureTypes.size()));
          for (TDDIMeasureType _iter66 : struct.MeasureTypes)
          {
            _iter66.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.MaintenanceProcedures != null) {
        oprot.writeFieldBegin(MAINTENANCE_PROCEDURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.MaintenanceProcedures.size()));
          for (TDDIMaintenanceProcedure _iter67 : struct.MaintenanceProcedures)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.DomainPackages != null) {
        oprot.writeFieldBegin(DOMAIN_PACKAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DomainPackages.size()));
          for (TDDIDomainPackage _iter68 : struct.DomainPackages)
          {
            _iter68.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.TARAPackages != null) {
        oprot.writeFieldBegin(TARAPACKAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.TARAPackages.size()));
          for (TDDITARAPackage _iter69 : struct.TARAPackages)
          {
            _iter69.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.HARAPackages != null) {
        oprot.writeFieldBegin(HARAPACKAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.HARAPackages.size()));
          for (TDDIHARAPackage _iter70 : struct.HARAPackages)
          {
            _iter70.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.RequirementPackages != null) {
        oprot.writeFieldBegin(REQUIREMENT_PACKAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.RequirementPackages.size()));
          for (TDDIRequirementPackage _iter71 : struct.RequirementPackages)
          {
            _iter71.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIDependabilityPackageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIDependabilityPackageTupleScheme getScheme() {
      return new TDDIDependabilityPackageTupleScheme();
    }
  }

  private static class TDDIDependabilityPackageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIDependabilityPackage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIDependabilityPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetMeasures()) {
        optionals.set(4);
      }
      if (struct.isSetMeasureTypes()) {
        optionals.set(5);
      }
      if (struct.isSetMaintenanceProcedures()) {
        optionals.set(6);
      }
      if (struct.isSetDomainPackages()) {
        optionals.set(7);
      }
      if (struct.isSetTARAPackages()) {
        optionals.set(8);
      }
      if (struct.isSetHARAPackages()) {
        optionals.set(9);
      }
      if (struct.isSetRequirementPackages()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter72 : struct.KeyValueMaps)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetMeasures()) {
        {
          oprot.writeI32(struct.Measures.size());
          for (TDDIAbstractMeasure _iter73 : struct.Measures)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetMeasureTypes()) {
        {
          oprot.writeI32(struct.MeasureTypes.size());
          for (TDDIMeasureType _iter74 : struct.MeasureTypes)
          {
            _iter74.write(oprot);
          }
        }
      }
      if (struct.isSetMaintenanceProcedures()) {
        {
          oprot.writeI32(struct.MaintenanceProcedures.size());
          for (TDDIMaintenanceProcedure _iter75 : struct.MaintenanceProcedures)
          {
            _iter75.write(oprot);
          }
        }
      }
      if (struct.isSetDomainPackages()) {
        {
          oprot.writeI32(struct.DomainPackages.size());
          for (TDDIDomainPackage _iter76 : struct.DomainPackages)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetTARAPackages()) {
        {
          oprot.writeI32(struct.TARAPackages.size());
          for (TDDITARAPackage _iter77 : struct.TARAPackages)
          {
            _iter77.write(oprot);
          }
        }
      }
      if (struct.isSetHARAPackages()) {
        {
          oprot.writeI32(struct.HARAPackages.size());
          for (TDDIHARAPackage _iter78 : struct.HARAPackages)
          {
            _iter78.write(oprot);
          }
        }
      }
      if (struct.isSetRequirementPackages()) {
        {
          oprot.writeI32(struct.RequirementPackages.size());
          for (TDDIRequirementPackage _iter79 : struct.RequirementPackages)
          {
            _iter79.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIDependabilityPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list80 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list80.size);
          TDDIKeyValueMap _elem81;
          for (int _i82 = 0; _i82 < _list80.size; ++_i82)
          {
            _elem81 = new TDDIKeyValueMap();
            _elem81.read(iprot);
            struct.KeyValueMaps.add(_elem81);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Measures = new java.util.ArrayList<TDDIAbstractMeasure>(_list83.size);
          TDDIAbstractMeasure _elem84;
          for (int _i85 = 0; _i85 < _list83.size; ++_i85)
          {
            _elem84 = new TDDIAbstractMeasure();
            _elem84.read(iprot);
            struct.Measures.add(_elem84);
          }
        }
        struct.setMeasuresIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.MeasureTypes = new java.util.ArrayList<TDDIMeasureType>(_list86.size);
          TDDIMeasureType _elem87;
          for (int _i88 = 0; _i88 < _list86.size; ++_i88)
          {
            _elem87 = new TDDIMeasureType();
            _elem87.read(iprot);
            struct.MeasureTypes.add(_elem87);
          }
        }
        struct.setMeasureTypesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedure>(_list89.size);
          TDDIMaintenanceProcedure _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = new TDDIMaintenanceProcedure();
            _elem90.read(iprot);
            struct.MaintenanceProcedures.add(_elem90);
          }
        }
        struct.setMaintenanceProceduresIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DomainPackages = new java.util.ArrayList<TDDIDomainPackage>(_list92.size);
          TDDIDomainPackage _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            _elem93 = new TDDIDomainPackage();
            _elem93.read(iprot);
            struct.DomainPackages.add(_elem93);
          }
        }
        struct.setDomainPackagesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.TARAPackages = new java.util.ArrayList<TDDITARAPackage>(_list95.size);
          TDDITARAPackage _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = new TDDITARAPackage();
            _elem96.read(iprot);
            struct.TARAPackages.add(_elem96);
          }
        }
        struct.setTARAPackagesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.HARAPackages = new java.util.ArrayList<TDDIHARAPackage>(_list98.size);
          TDDIHARAPackage _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = new TDDIHARAPackage();
            _elem99.read(iprot);
            struct.HARAPackages.add(_elem99);
          }
        }
        struct.setHARAPackagesIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.RequirementPackages = new java.util.ArrayList<TDDIRequirementPackage>(_list101.size);
          TDDIRequirementPackage _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = new TDDIRequirementPackage();
            _elem102.read(iprot);
            struct.RequirementPackages.add(_elem102);
          }
        }
        struct.setRequirementPackagesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

