/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIArgumentPackageUnion extends org.apache.thrift.TUnion<TDDIArgumentPackageUnion, TDDIArgumentPackageUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIArgumentPackageUnion");
  private static final org.apache.thrift.protocol.TField ARGUMENT_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ArgumentPackage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ARGUMENT_PACKAGE_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ArgumentPackageInterface", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ARGUMENT_PACKAGE_BINDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ArgumentPackageBinding", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ARGUMENT_PACKAGE((short)1, "ArgumentPackage"),
    ARGUMENT_PACKAGE_INTERFACE((short)2, "ArgumentPackageInterface"),
    ARGUMENT_PACKAGE_BINDING((short)3, "ArgumentPackageBinding");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARGUMENT_PACKAGE
          return ARGUMENT_PACKAGE;
        case 2: // ARGUMENT_PACKAGE_INTERFACE
          return ARGUMENT_PACKAGE_INTERFACE;
        case 3: // ARGUMENT_PACKAGE_BINDING
          return ARGUMENT_PACKAGE_BINDING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARGUMENT_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ArgumentPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIArgumentPackage")));
    tmpMap.put(_Fields.ARGUMENT_PACKAGE_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("ArgumentPackageInterface", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIArgumentPackageInterface")));
    tmpMap.put(_Fields.ARGUMENT_PACKAGE_BINDING, new org.apache.thrift.meta_data.FieldMetaData("ArgumentPackageBinding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIArgumentPackageBinding")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIArgumentPackageUnion.class, metaDataMap);
  }

  public TDDIArgumentPackageUnion() {
    super();
  }

  public TDDIArgumentPackageUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIArgumentPackageUnion(TDDIArgumentPackageUnion other) {
    super(other);
  }
  public TDDIArgumentPackageUnion deepCopy() {
    return new TDDIArgumentPackageUnion(this);
  }

  public static TDDIArgumentPackageUnion ArgumentPackage(TDDIArgumentPackage value) {
    TDDIArgumentPackageUnion x = new TDDIArgumentPackageUnion();
    x.setArgumentPackage(value);
    return x;
  }

  public static TDDIArgumentPackageUnion ArgumentPackageInterface(TDDIArgumentPackageInterface value) {
    TDDIArgumentPackageUnion x = new TDDIArgumentPackageUnion();
    x.setArgumentPackageInterface(value);
    return x;
  }

  public static TDDIArgumentPackageUnion ArgumentPackageBinding(TDDIArgumentPackageBinding value) {
    TDDIArgumentPackageUnion x = new TDDIArgumentPackageUnion();
    x.setArgumentPackageBinding(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case ARGUMENT_PACKAGE:
        if (value instanceof TDDIArgumentPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIArgumentPackage for field 'ArgumentPackage', but got " + value.getClass().getSimpleName());
      case ARGUMENT_PACKAGE_INTERFACE:
        if (value instanceof TDDIArgumentPackageInterface) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIArgumentPackageInterface for field 'ArgumentPackageInterface', but got " + value.getClass().getSimpleName());
      case ARGUMENT_PACKAGE_BINDING:
        if (value instanceof TDDIArgumentPackageBinding) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIArgumentPackageBinding for field 'ArgumentPackageBinding', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case ARGUMENT_PACKAGE:
          if (field.type == ARGUMENT_PACKAGE_FIELD_DESC.type) {
            TDDIArgumentPackage ArgumentPackage;
            ArgumentPackage = new TDDIArgumentPackage();
            ArgumentPackage.read(iprot);
            return ArgumentPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARGUMENT_PACKAGE_INTERFACE:
          if (field.type == ARGUMENT_PACKAGE_INTERFACE_FIELD_DESC.type) {
            TDDIArgumentPackageInterface ArgumentPackageInterface;
            ArgumentPackageInterface = new TDDIArgumentPackageInterface();
            ArgumentPackageInterface.read(iprot);
            return ArgumentPackageInterface;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARGUMENT_PACKAGE_BINDING:
          if (field.type == ARGUMENT_PACKAGE_BINDING_FIELD_DESC.type) {
            TDDIArgumentPackageBinding ArgumentPackageBinding;
            ArgumentPackageBinding = new TDDIArgumentPackageBinding();
            ArgumentPackageBinding.read(iprot);
            return ArgumentPackageBinding;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ARGUMENT_PACKAGE:
        TDDIArgumentPackage ArgumentPackage = (TDDIArgumentPackage)value_;
        ArgumentPackage.write(oprot);
        return;
      case ARGUMENT_PACKAGE_INTERFACE:
        TDDIArgumentPackageInterface ArgumentPackageInterface = (TDDIArgumentPackageInterface)value_;
        ArgumentPackageInterface.write(oprot);
        return;
      case ARGUMENT_PACKAGE_BINDING:
        TDDIArgumentPackageBinding ArgumentPackageBinding = (TDDIArgumentPackageBinding)value_;
        ArgumentPackageBinding.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case ARGUMENT_PACKAGE:
          TDDIArgumentPackage ArgumentPackage;
          ArgumentPackage = new TDDIArgumentPackage();
          ArgumentPackage.read(iprot);
          return ArgumentPackage;
        case ARGUMENT_PACKAGE_INTERFACE:
          TDDIArgumentPackageInterface ArgumentPackageInterface;
          ArgumentPackageInterface = new TDDIArgumentPackageInterface();
          ArgumentPackageInterface.read(iprot);
          return ArgumentPackageInterface;
        case ARGUMENT_PACKAGE_BINDING:
          TDDIArgumentPackageBinding ArgumentPackageBinding;
          ArgumentPackageBinding = new TDDIArgumentPackageBinding();
          ArgumentPackageBinding.read(iprot);
          return ArgumentPackageBinding;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ARGUMENT_PACKAGE:
        TDDIArgumentPackage ArgumentPackage = (TDDIArgumentPackage)value_;
        ArgumentPackage.write(oprot);
        return;
      case ARGUMENT_PACKAGE_INTERFACE:
        TDDIArgumentPackageInterface ArgumentPackageInterface = (TDDIArgumentPackageInterface)value_;
        ArgumentPackageInterface.write(oprot);
        return;
      case ARGUMENT_PACKAGE_BINDING:
        TDDIArgumentPackageBinding ArgumentPackageBinding = (TDDIArgumentPackageBinding)value_;
        ArgumentPackageBinding.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case ARGUMENT_PACKAGE:
        return ARGUMENT_PACKAGE_FIELD_DESC;
      case ARGUMENT_PACKAGE_INTERFACE:
        return ARGUMENT_PACKAGE_INTERFACE_FIELD_DESC;
      case ARGUMENT_PACKAGE_BINDING:
        return ARGUMENT_PACKAGE_BINDING_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIArgumentPackage getArgumentPackage() {
    if (getSetField() == _Fields.ARGUMENT_PACKAGE) {
      return (TDDIArgumentPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArgumentPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArgumentPackage(TDDIArgumentPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARGUMENT_PACKAGE;
    value_ = value;
  }

  public TDDIArgumentPackageInterface getArgumentPackageInterface() {
    if (getSetField() == _Fields.ARGUMENT_PACKAGE_INTERFACE) {
      return (TDDIArgumentPackageInterface)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArgumentPackageInterface' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArgumentPackageInterface(TDDIArgumentPackageInterface value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARGUMENT_PACKAGE_INTERFACE;
    value_ = value;
  }

  public TDDIArgumentPackageBinding getArgumentPackageBinding() {
    if (getSetField() == _Fields.ARGUMENT_PACKAGE_BINDING) {
      return (TDDIArgumentPackageBinding)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArgumentPackageBinding' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArgumentPackageBinding(TDDIArgumentPackageBinding value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARGUMENT_PACKAGE_BINDING;
    value_ = value;
  }

  public boolean isSetArgumentPackage() {
    return setField_ == _Fields.ARGUMENT_PACKAGE;
  }


  public boolean isSetArgumentPackageInterface() {
    return setField_ == _Fields.ARGUMENT_PACKAGE_INTERFACE;
  }


  public boolean isSetArgumentPackageBinding() {
    return setField_ == _Fields.ARGUMENT_PACKAGE_BINDING;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIArgumentPackageUnion) {
      return equals((TDDIArgumentPackageUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIArgumentPackageUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIArgumentPackageUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
