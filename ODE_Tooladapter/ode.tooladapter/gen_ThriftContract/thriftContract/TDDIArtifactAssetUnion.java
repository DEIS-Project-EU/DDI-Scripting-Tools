/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIArtifactAssetUnion extends org.apache.thrift.TUnion<TDDIArtifactAssetUnion, TDDIArtifactAssetUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIArtifactAssetUnion");
  private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("Property", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TECHNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField("Technique", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_FIELD_DESC = new org.apache.thrift.protocol.TField("Participant", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("Activity", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("Event", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("Resource", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ARTIFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("Artifact", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ARTIFACT_ASSET_RELATIONSHIP_FIELD_DESC = new org.apache.thrift.protocol.TField("ArtifactAssetRelationship", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPERTY((short)1, "Property"),
    TECHNIQUE((short)2, "Technique"),
    PARTICIPANT((short)3, "Participant"),
    ACTIVITY((short)4, "Activity"),
    EVENT((short)5, "Event"),
    RESOURCE((short)6, "Resource"),
    ARTIFACT((short)7, "Artifact"),
    ARTIFACT_ASSET_RELATIONSHIP((short)8, "ArtifactAssetRelationship");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPERTY
          return PROPERTY;
        case 2: // TECHNIQUE
          return TECHNIQUE;
        case 3: // PARTICIPANT
          return PARTICIPANT;
        case 4: // ACTIVITY
          return ACTIVITY;
        case 5: // EVENT
          return EVENT;
        case 6: // RESOURCE
          return RESOURCE;
        case 7: // ARTIFACT
          return ARTIFACT;
        case 8: // ARTIFACT_ASSET_RELATIONSHIP
          return ARTIFACT_ASSET_RELATIONSHIP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("Property", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIProperty.class)));
    tmpMap.put(_Fields.TECHNIQUE, new org.apache.thrift.meta_data.FieldMetaData("Technique", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDITechnique.class)));
    tmpMap.put(_Fields.PARTICIPANT, new org.apache.thrift.meta_data.FieldMetaData("Participant", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIParticipant.class)));
    tmpMap.put(_Fields.ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("Activity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIActivity.class)));
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("Event", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIEvent.class)));
    tmpMap.put(_Fields.RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("Resource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIResource.class)));
    tmpMap.put(_Fields.ARTIFACT, new org.apache.thrift.meta_data.FieldMetaData("Artifact", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIArtifact.class)));
    tmpMap.put(_Fields.ARTIFACT_ASSET_RELATIONSHIP, new org.apache.thrift.meta_data.FieldMetaData("ArtifactAssetRelationship", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIArtifactAssetRelationship.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIArtifactAssetUnion.class, metaDataMap);
  }

  public TDDIArtifactAssetUnion() {
    super();
  }

  public TDDIArtifactAssetUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIArtifactAssetUnion(TDDIArtifactAssetUnion other) {
    super(other);
  }
  public TDDIArtifactAssetUnion deepCopy() {
    return new TDDIArtifactAssetUnion(this);
  }

  public static TDDIArtifactAssetUnion Property(TDDIProperty value) {
    TDDIArtifactAssetUnion x = new TDDIArtifactAssetUnion();
    x.setProperty(value);
    return x;
  }

  public static TDDIArtifactAssetUnion Technique(TDDITechnique value) {
    TDDIArtifactAssetUnion x = new TDDIArtifactAssetUnion();
    x.setTechnique(value);
    return x;
  }

  public static TDDIArtifactAssetUnion Participant(TDDIParticipant value) {
    TDDIArtifactAssetUnion x = new TDDIArtifactAssetUnion();
    x.setParticipant(value);
    return x;
  }

  public static TDDIArtifactAssetUnion Activity(TDDIActivity value) {
    TDDIArtifactAssetUnion x = new TDDIArtifactAssetUnion();
    x.setActivity(value);
    return x;
  }

  public static TDDIArtifactAssetUnion Event(TDDIEvent value) {
    TDDIArtifactAssetUnion x = new TDDIArtifactAssetUnion();
    x.setEvent(value);
    return x;
  }

  public static TDDIArtifactAssetUnion Resource(TDDIResource value) {
    TDDIArtifactAssetUnion x = new TDDIArtifactAssetUnion();
    x.setResource(value);
    return x;
  }

  public static TDDIArtifactAssetUnion Artifact(TDDIArtifact value) {
    TDDIArtifactAssetUnion x = new TDDIArtifactAssetUnion();
    x.setArtifact(value);
    return x;
  }

  public static TDDIArtifactAssetUnion ArtifactAssetRelationship(TDDIArtifactAssetRelationship value) {
    TDDIArtifactAssetUnion x = new TDDIArtifactAssetUnion();
    x.setArtifactAssetRelationship(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case PROPERTY:
        if (value instanceof TDDIProperty) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIProperty for field 'Property', but got " + value.getClass().getSimpleName());
      case TECHNIQUE:
        if (value instanceof TDDITechnique) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDITechnique for field 'Technique', but got " + value.getClass().getSimpleName());
      case PARTICIPANT:
        if (value instanceof TDDIParticipant) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIParticipant for field 'Participant', but got " + value.getClass().getSimpleName());
      case ACTIVITY:
        if (value instanceof TDDIActivity) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIActivity for field 'Activity', but got " + value.getClass().getSimpleName());
      case EVENT:
        if (value instanceof TDDIEvent) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIEvent for field 'Event', but got " + value.getClass().getSimpleName());
      case RESOURCE:
        if (value instanceof TDDIResource) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIResource for field 'Resource', but got " + value.getClass().getSimpleName());
      case ARTIFACT:
        if (value instanceof TDDIArtifact) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIArtifact for field 'Artifact', but got " + value.getClass().getSimpleName());
      case ARTIFACT_ASSET_RELATIONSHIP:
        if (value instanceof TDDIArtifactAssetRelationship) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIArtifactAssetRelationship for field 'ArtifactAssetRelationship', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case PROPERTY:
          if (field.type == PROPERTY_FIELD_DESC.type) {
            TDDIProperty Property;
            Property = new TDDIProperty();
            Property.read(iprot);
            return Property;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TECHNIQUE:
          if (field.type == TECHNIQUE_FIELD_DESC.type) {
            TDDITechnique Technique;
            Technique = new TDDITechnique();
            Technique.read(iprot);
            return Technique;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PARTICIPANT:
          if (field.type == PARTICIPANT_FIELD_DESC.type) {
            TDDIParticipant Participant;
            Participant = new TDDIParticipant();
            Participant.read(iprot);
            return Participant;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ACTIVITY:
          if (field.type == ACTIVITY_FIELD_DESC.type) {
            TDDIActivity Activity;
            Activity = new TDDIActivity();
            Activity.read(iprot);
            return Activity;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case EVENT:
          if (field.type == EVENT_FIELD_DESC.type) {
            TDDIEvent Event;
            Event = new TDDIEvent();
            Event.read(iprot);
            return Event;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RESOURCE:
          if (field.type == RESOURCE_FIELD_DESC.type) {
            TDDIResource Resource;
            Resource = new TDDIResource();
            Resource.read(iprot);
            return Resource;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARTIFACT:
          if (field.type == ARTIFACT_FIELD_DESC.type) {
            TDDIArtifact Artifact;
            Artifact = new TDDIArtifact();
            Artifact.read(iprot);
            return Artifact;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARTIFACT_ASSET_RELATIONSHIP:
          if (field.type == ARTIFACT_ASSET_RELATIONSHIP_FIELD_DESC.type) {
            TDDIArtifactAssetRelationship ArtifactAssetRelationship;
            ArtifactAssetRelationship = new TDDIArtifactAssetRelationship();
            ArtifactAssetRelationship.read(iprot);
            return ArtifactAssetRelationship;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PROPERTY:
        TDDIProperty Property = (TDDIProperty)value_;
        Property.write(oprot);
        return;
      case TECHNIQUE:
        TDDITechnique Technique = (TDDITechnique)value_;
        Technique.write(oprot);
        return;
      case PARTICIPANT:
        TDDIParticipant Participant = (TDDIParticipant)value_;
        Participant.write(oprot);
        return;
      case ACTIVITY:
        TDDIActivity Activity = (TDDIActivity)value_;
        Activity.write(oprot);
        return;
      case EVENT:
        TDDIEvent Event = (TDDIEvent)value_;
        Event.write(oprot);
        return;
      case RESOURCE:
        TDDIResource Resource = (TDDIResource)value_;
        Resource.write(oprot);
        return;
      case ARTIFACT:
        TDDIArtifact Artifact = (TDDIArtifact)value_;
        Artifact.write(oprot);
        return;
      case ARTIFACT_ASSET_RELATIONSHIP:
        TDDIArtifactAssetRelationship ArtifactAssetRelationship = (TDDIArtifactAssetRelationship)value_;
        ArtifactAssetRelationship.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case PROPERTY:
          TDDIProperty Property;
          Property = new TDDIProperty();
          Property.read(iprot);
          return Property;
        case TECHNIQUE:
          TDDITechnique Technique;
          Technique = new TDDITechnique();
          Technique.read(iprot);
          return Technique;
        case PARTICIPANT:
          TDDIParticipant Participant;
          Participant = new TDDIParticipant();
          Participant.read(iprot);
          return Participant;
        case ACTIVITY:
          TDDIActivity Activity;
          Activity = new TDDIActivity();
          Activity.read(iprot);
          return Activity;
        case EVENT:
          TDDIEvent Event;
          Event = new TDDIEvent();
          Event.read(iprot);
          return Event;
        case RESOURCE:
          TDDIResource Resource;
          Resource = new TDDIResource();
          Resource.read(iprot);
          return Resource;
        case ARTIFACT:
          TDDIArtifact Artifact;
          Artifact = new TDDIArtifact();
          Artifact.read(iprot);
          return Artifact;
        case ARTIFACT_ASSET_RELATIONSHIP:
          TDDIArtifactAssetRelationship ArtifactAssetRelationship;
          ArtifactAssetRelationship = new TDDIArtifactAssetRelationship();
          ArtifactAssetRelationship.read(iprot);
          return ArtifactAssetRelationship;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PROPERTY:
        TDDIProperty Property = (TDDIProperty)value_;
        Property.write(oprot);
        return;
      case TECHNIQUE:
        TDDITechnique Technique = (TDDITechnique)value_;
        Technique.write(oprot);
        return;
      case PARTICIPANT:
        TDDIParticipant Participant = (TDDIParticipant)value_;
        Participant.write(oprot);
        return;
      case ACTIVITY:
        TDDIActivity Activity = (TDDIActivity)value_;
        Activity.write(oprot);
        return;
      case EVENT:
        TDDIEvent Event = (TDDIEvent)value_;
        Event.write(oprot);
        return;
      case RESOURCE:
        TDDIResource Resource = (TDDIResource)value_;
        Resource.write(oprot);
        return;
      case ARTIFACT:
        TDDIArtifact Artifact = (TDDIArtifact)value_;
        Artifact.write(oprot);
        return;
      case ARTIFACT_ASSET_RELATIONSHIP:
        TDDIArtifactAssetRelationship ArtifactAssetRelationship = (TDDIArtifactAssetRelationship)value_;
        ArtifactAssetRelationship.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case PROPERTY:
        return PROPERTY_FIELD_DESC;
      case TECHNIQUE:
        return TECHNIQUE_FIELD_DESC;
      case PARTICIPANT:
        return PARTICIPANT_FIELD_DESC;
      case ACTIVITY:
        return ACTIVITY_FIELD_DESC;
      case EVENT:
        return EVENT_FIELD_DESC;
      case RESOURCE:
        return RESOURCE_FIELD_DESC;
      case ARTIFACT:
        return ARTIFACT_FIELD_DESC;
      case ARTIFACT_ASSET_RELATIONSHIP:
        return ARTIFACT_ASSET_RELATIONSHIP_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIProperty getProperty() {
    if (getSetField() == _Fields.PROPERTY) {
      return (TDDIProperty)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Property' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setProperty(TDDIProperty value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PROPERTY;
    value_ = value;
  }

  public TDDITechnique getTechnique() {
    if (getSetField() == _Fields.TECHNIQUE) {
      return (TDDITechnique)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Technique' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTechnique(TDDITechnique value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TECHNIQUE;
    value_ = value;
  }

  public TDDIParticipant getParticipant() {
    if (getSetField() == _Fields.PARTICIPANT) {
      return (TDDIParticipant)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Participant' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setParticipant(TDDIParticipant value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PARTICIPANT;
    value_ = value;
  }

  public TDDIActivity getActivity() {
    if (getSetField() == _Fields.ACTIVITY) {
      return (TDDIActivity)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Activity' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setActivity(TDDIActivity value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ACTIVITY;
    value_ = value;
  }

  public TDDIEvent getEvent() {
    if (getSetField() == _Fields.EVENT) {
      return (TDDIEvent)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Event' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEvent(TDDIEvent value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.EVENT;
    value_ = value;
  }

  public TDDIResource getResource() {
    if (getSetField() == _Fields.RESOURCE) {
      return (TDDIResource)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Resource' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setResource(TDDIResource value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.RESOURCE;
    value_ = value;
  }

  public TDDIArtifact getArtifact() {
    if (getSetField() == _Fields.ARTIFACT) {
      return (TDDIArtifact)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Artifact' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArtifact(TDDIArtifact value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARTIFACT;
    value_ = value;
  }

  public TDDIArtifactAssetRelationship getArtifactAssetRelationship() {
    if (getSetField() == _Fields.ARTIFACT_ASSET_RELATIONSHIP) {
      return (TDDIArtifactAssetRelationship)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArtifactAssetRelationship' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArtifactAssetRelationship(TDDIArtifactAssetRelationship value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARTIFACT_ASSET_RELATIONSHIP;
    value_ = value;
  }

  public boolean isSetProperty() {
    return setField_ == _Fields.PROPERTY;
  }


  public boolean isSetTechnique() {
    return setField_ == _Fields.TECHNIQUE;
  }


  public boolean isSetParticipant() {
    return setField_ == _Fields.PARTICIPANT;
  }


  public boolean isSetActivity() {
    return setField_ == _Fields.ACTIVITY;
  }


  public boolean isSetEvent() {
    return setField_ == _Fields.EVENT;
  }


  public boolean isSetResource() {
    return setField_ == _Fields.RESOURCE;
  }


  public boolean isSetArtifact() {
    return setField_ == _Fields.ARTIFACT;
  }


  public boolean isSetArtifactAssetRelationship() {
    return setField_ == _Fields.ARTIFACT_ASSET_RELATIONSHIP;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIArtifactAssetUnion) {
      return equals((TDDIArtifactAssetUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIArtifactAssetUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIArtifactAssetUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
