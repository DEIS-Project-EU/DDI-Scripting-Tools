/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-14")
public class TDDIFailure implements org.apache.thrift.TBase<TDDIFailure, TDDIFailure._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIFailure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIFailure");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ORIGIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("OriginType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FAILURE_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureClass", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FAILURE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureRate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField IS_CCF_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCCF", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField CCFFAILURES_FIELD_DESC = new org.apache.thrift.protocol.TField("CCFFailures", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField FAILURE_PROB_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureProbDistribution", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIFailureStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIFailureTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  /**
   * 
   * @see TDDIFailureOriginType
   */
  public TDDIFailureOriginType OriginType; // required
  public java.lang.String FailureClass; // required
  public double FailureRate; // required
  public boolean IsCCF; // required
  public java.util.List<TDDIAbstractFailureRef> CCFFailures; // required
  public TDDIProbDist FailureProbDistribution; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    /**
     * 
     * @see TDDIFailureOriginType
     */
    ORIGIN_TYPE((short)5, "OriginType"),
    FAILURE_CLASS((short)6, "FailureClass"),
    FAILURE_RATE((short)7, "FailureRate"),
    IS_CCF((short)8, "IsCCF"),
    CCFFAILURES((short)9, "CCFFailures"),
    FAILURE_PROB_DISTRIBUTION((short)10, "FailureProbDistribution");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // ORIGIN_TYPE
          return ORIGIN_TYPE;
        case 6: // FAILURE_CLASS
          return FAILURE_CLASS;
        case 7: // FAILURE_RATE
          return FAILURE_RATE;
        case 8: // IS_CCF
          return IS_CCF;
        case 9: // CCFFAILURES
          return CCFFAILURES;
        case 10: // FAILURE_PROB_DISTRIBUTION
          return FAILURE_PROB_DISTRIBUTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FAILURERATE_ISSET_ID = 1;
  private static final int __ISCCF_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.ORIGIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("OriginType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIFailureOriginType.class)));
    tmpMap.put(_Fields.FAILURE_CLASS, new org.apache.thrift.meta_data.FieldMetaData("FailureClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAILURE_RATE, new org.apache.thrift.meta_data.FieldMetaData("FailureRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_CCF, new org.apache.thrift.meta_data.FieldMetaData("IsCCF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CCFFAILURES, new org.apache.thrift.meta_data.FieldMetaData("CCFFailures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureRef.class))));
    tmpMap.put(_Fields.FAILURE_PROB_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("FailureProbDistribution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIProbDist.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIFailure.class, metaDataMap);
  }

  public TDDIFailure() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.CCFFailures = new java.util.ArrayList<TDDIAbstractFailureRef>();

  }

  public TDDIFailure(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    TDDIFailureOriginType OriginType,
    java.lang.String FailureClass,
    double FailureRate,
    boolean IsCCF,
    java.util.List<TDDIAbstractFailureRef> CCFFailures,
    TDDIProbDist FailureProbDistribution)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.OriginType = OriginType;
    this.FailureClass = FailureClass;
    this.FailureRate = FailureRate;
    setFailureRateIsSet(true);
    this.IsCCF = IsCCF;
    setIsCCFIsSet(true);
    this.CCFFailures = CCFFailures;
    this.FailureProbDistribution = FailureProbDistribution;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIFailure(TDDIFailure other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetOriginType()) {
      this.OriginType = other.OriginType;
    }
    if (other.isSetFailureClass()) {
      this.FailureClass = other.FailureClass;
    }
    this.FailureRate = other.FailureRate;
    this.IsCCF = other.IsCCF;
    if (other.isSetCCFFailures()) {
      java.util.List<TDDIAbstractFailureRef> __this__CCFFailures = new java.util.ArrayList<TDDIAbstractFailureRef>(other.CCFFailures.size());
      for (TDDIAbstractFailureRef other_element : other.CCFFailures) {
        __this__CCFFailures.add(new TDDIAbstractFailureRef(other_element));
      }
      this.CCFFailures = __this__CCFFailures;
    }
    if (other.isSetFailureProbDistribution()) {
      this.FailureProbDistribution = new TDDIProbDist(other.FailureProbDistribution);
    }
  }

  public TDDIFailure deepCopy() {
    return new TDDIFailure(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.OriginType = null;
    this.FailureClass = null;
    setFailureRateIsSet(false);
    this.FailureRate = 0.0;
    setIsCCFIsSet(false);
    this.IsCCF = false;
    this.CCFFailures = new java.util.ArrayList<TDDIAbstractFailureRef>();

    this.FailureProbDistribution = null;
  }

  public long getId() {
    return this.Id;
  }

  public TDDIFailure setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIFailure setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIFailure setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIFailure setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  /**
   * 
   * @see TDDIFailureOriginType
   */
  public TDDIFailureOriginType getOriginType() {
    return this.OriginType;
  }

  /**
   * 
   * @see TDDIFailureOriginType
   */
  public TDDIFailure setOriginType(TDDIFailureOriginType OriginType) {
    this.OriginType = OriginType;
    return this;
  }

  public void unsetOriginType() {
    this.OriginType = null;
  }

  /** Returns true if field OriginType is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginType() {
    return this.OriginType != null;
  }

  public void setOriginTypeIsSet(boolean value) {
    if (!value) {
      this.OriginType = null;
    }
  }

  public java.lang.String getFailureClass() {
    return this.FailureClass;
  }

  public TDDIFailure setFailureClass(java.lang.String FailureClass) {
    this.FailureClass = FailureClass;
    return this;
  }

  public void unsetFailureClass() {
    this.FailureClass = null;
  }

  /** Returns true if field FailureClass is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureClass() {
    return this.FailureClass != null;
  }

  public void setFailureClassIsSet(boolean value) {
    if (!value) {
      this.FailureClass = null;
    }
  }

  public double getFailureRate() {
    return this.FailureRate;
  }

  public TDDIFailure setFailureRate(double FailureRate) {
    this.FailureRate = FailureRate;
    setFailureRateIsSet(true);
    return this;
  }

  public void unsetFailureRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILURERATE_ISSET_ID);
  }

  /** Returns true if field FailureRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILURERATE_ISSET_ID);
  }

  public void setFailureRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILURERATE_ISSET_ID, value);
  }

  public boolean isIsCCF() {
    return this.IsCCF;
  }

  public TDDIFailure setIsCCF(boolean IsCCF) {
    this.IsCCF = IsCCF;
    setIsCCFIsSet(true);
    return this;
  }

  public void unsetIsCCF() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCCF_ISSET_ID);
  }

  /** Returns true if field IsCCF is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCCF() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCCF_ISSET_ID);
  }

  public void setIsCCFIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCCF_ISSET_ID, value);
  }

  public int getCCFFailuresSize() {
    return (this.CCFFailures == null) ? 0 : this.CCFFailures.size();
  }

  public java.util.Iterator<TDDIAbstractFailureRef> getCCFFailuresIterator() {
    return (this.CCFFailures == null) ? null : this.CCFFailures.iterator();
  }

  public void addToCCFFailures(TDDIAbstractFailureRef elem) {
    if (this.CCFFailures == null) {
      this.CCFFailures = new java.util.ArrayList<TDDIAbstractFailureRef>();
    }
    this.CCFFailures.add(elem);
  }

  public java.util.List<TDDIAbstractFailureRef> getCCFFailures() {
    return this.CCFFailures;
  }

  public TDDIFailure setCCFFailures(java.util.List<TDDIAbstractFailureRef> CCFFailures) {
    this.CCFFailures = CCFFailures;
    return this;
  }

  public void unsetCCFFailures() {
    this.CCFFailures = null;
  }

  /** Returns true if field CCFFailures is set (has been assigned a value) and false otherwise */
  public boolean isSetCCFFailures() {
    return this.CCFFailures != null;
  }

  public void setCCFFailuresIsSet(boolean value) {
    if (!value) {
      this.CCFFailures = null;
    }
  }

  public TDDIProbDist getFailureProbDistribution() {
    return this.FailureProbDistribution;
  }

  public TDDIFailure setFailureProbDistribution(TDDIProbDist FailureProbDistribution) {
    this.FailureProbDistribution = FailureProbDistribution;
    return this;
  }

  public void unsetFailureProbDistribution() {
    this.FailureProbDistribution = null;
  }

  /** Returns true if field FailureProbDistribution is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureProbDistribution() {
    return this.FailureProbDistribution != null;
  }

  public void setFailureProbDistributionIsSet(boolean value) {
    if (!value) {
      this.FailureProbDistribution = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case ORIGIN_TYPE:
      if (value == null) {
        unsetOriginType();
      } else {
        setOriginType((TDDIFailureOriginType)value);
      }
      break;

    case FAILURE_CLASS:
      if (value == null) {
        unsetFailureClass();
      } else {
        setFailureClass((java.lang.String)value);
      }
      break;

    case FAILURE_RATE:
      if (value == null) {
        unsetFailureRate();
      } else {
        setFailureRate((java.lang.Double)value);
      }
      break;

    case IS_CCF:
      if (value == null) {
        unsetIsCCF();
      } else {
        setIsCCF((java.lang.Boolean)value);
      }
      break;

    case CCFFAILURES:
      if (value == null) {
        unsetCCFFailures();
      } else {
        setCCFFailures((java.util.List<TDDIAbstractFailureRef>)value);
      }
      break;

    case FAILURE_PROB_DISTRIBUTION:
      if (value == null) {
        unsetFailureProbDistribution();
      } else {
        setFailureProbDistribution((TDDIProbDist)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case ORIGIN_TYPE:
      return getOriginType();

    case FAILURE_CLASS:
      return getFailureClass();

    case FAILURE_RATE:
      return getFailureRate();

    case IS_CCF:
      return isIsCCF();

    case CCFFAILURES:
      return getCCFFailures();

    case FAILURE_PROB_DISTRIBUTION:
      return getFailureProbDistribution();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case ORIGIN_TYPE:
      return isSetOriginType();
    case FAILURE_CLASS:
      return isSetFailureClass();
    case FAILURE_RATE:
      return isSetFailureRate();
    case IS_CCF:
      return isSetIsCCF();
    case CCFFAILURES:
      return isSetCCFFailures();
    case FAILURE_PROB_DISTRIBUTION:
      return isSetFailureProbDistribution();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIFailure)
      return this.equals((TDDIFailure)that);
    return false;
  }

  public boolean equals(TDDIFailure that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_OriginType = true && this.isSetOriginType();
    boolean that_present_OriginType = true && that.isSetOriginType();
    if (this_present_OriginType || that_present_OriginType) {
      if (!(this_present_OriginType && that_present_OriginType))
        return false;
      if (!this.OriginType.equals(that.OriginType))
        return false;
    }

    boolean this_present_FailureClass = true && this.isSetFailureClass();
    boolean that_present_FailureClass = true && that.isSetFailureClass();
    if (this_present_FailureClass || that_present_FailureClass) {
      if (!(this_present_FailureClass && that_present_FailureClass))
        return false;
      if (!this.FailureClass.equals(that.FailureClass))
        return false;
    }

    boolean this_present_FailureRate = true;
    boolean that_present_FailureRate = true;
    if (this_present_FailureRate || that_present_FailureRate) {
      if (!(this_present_FailureRate && that_present_FailureRate))
        return false;
      if (this.FailureRate != that.FailureRate)
        return false;
    }

    boolean this_present_IsCCF = true;
    boolean that_present_IsCCF = true;
    if (this_present_IsCCF || that_present_IsCCF) {
      if (!(this_present_IsCCF && that_present_IsCCF))
        return false;
      if (this.IsCCF != that.IsCCF)
        return false;
    }

    boolean this_present_CCFFailures = true && this.isSetCCFFailures();
    boolean that_present_CCFFailures = true && that.isSetCCFFailures();
    if (this_present_CCFFailures || that_present_CCFFailures) {
      if (!(this_present_CCFFailures && that_present_CCFFailures))
        return false;
      if (!this.CCFFailures.equals(that.CCFFailures))
        return false;
    }

    boolean this_present_FailureProbDistribution = true && this.isSetFailureProbDistribution();
    boolean that_present_FailureProbDistribution = true && that.isSetFailureProbDistribution();
    if (this_present_FailureProbDistribution || that_present_FailureProbDistribution) {
      if (!(this_present_FailureProbDistribution && that_present_FailureProbDistribution))
        return false;
      if (!this.FailureProbDistribution.equals(that.FailureProbDistribution))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetOriginType()) ? 131071 : 524287);
    if (isSetOriginType())
      hashCode = hashCode * 8191 + OriginType.getValue();

    hashCode = hashCode * 8191 + ((isSetFailureClass()) ? 131071 : 524287);
    if (isSetFailureClass())
      hashCode = hashCode * 8191 + FailureClass.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(FailureRate);

    hashCode = hashCode * 8191 + ((IsCCF) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCCFFailures()) ? 131071 : 524287);
    if (isSetCCFFailures())
      hashCode = hashCode * 8191 + CCFFailures.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailureProbDistribution()) ? 131071 : 524287);
    if (isSetFailureProbDistribution())
      hashCode = hashCode * 8191 + FailureProbDistribution.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIFailure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginType()).compareTo(other.isSetOriginType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OriginType, other.OriginType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureClass()).compareTo(other.isSetFailureClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureClass, other.FailureClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureRate()).compareTo(other.isSetFailureRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureRate, other.FailureRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsCCF()).compareTo(other.isSetIsCCF());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCCF()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCCF, other.IsCCF);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCCFFailures()).compareTo(other.isSetCCFFailures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCCFFailures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CCFFailures, other.CCFFailures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureProbDistribution()).compareTo(other.isSetFailureProbDistribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureProbDistribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureProbDistribution, other.FailureProbDistribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIFailure(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OriginType:");
    if (this.OriginType == null) {
      sb.append("null");
    } else {
      sb.append(this.OriginType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureClass:");
    if (this.FailureClass == null) {
      sb.append("null");
    } else {
      sb.append(this.FailureClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureRate:");
    sb.append(this.FailureRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCCF:");
    sb.append(this.IsCCF);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CCFFailures:");
    if (this.CCFFailures == null) {
      sb.append("null");
    } else {
      sb.append(this.CCFFailures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureProbDistribution:");
    if (this.FailureProbDistribution == null) {
      sb.append("null");
    } else {
      sb.append(this.FailureProbDistribution);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (FailureProbDistribution != null) {
      FailureProbDistribution.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIFailureStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIFailureStandardScheme getScheme() {
      return new TDDIFailureStandardScheme();
    }
  }

  private static class TDDIFailureStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIFailure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIFailure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list792 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list792.size);
                TDDIKeyValueMap _elem793;
                for (int _i794 = 0; _i794 < _list792.size; ++_i794)
                {
                  _elem793 = new TDDIKeyValueMap();
                  _elem793.read(iprot);
                  struct.KeyValueMaps.add(_elem793);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORIGIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.OriginType = thriftContract.TDDIFailureOriginType.findByValue(iprot.readI32());
              struct.setOriginTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FAILURE_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FailureClass = iprot.readString();
              struct.setFailureClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FAILURE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.FailureRate = iprot.readDouble();
              struct.setFailureRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_CCF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsCCF = iprot.readBool();
              struct.setIsCCFIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CCFFAILURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list795 = iprot.readListBegin();
                struct.CCFFailures = new java.util.ArrayList<TDDIAbstractFailureRef>(_list795.size);
                TDDIAbstractFailureRef _elem796;
                for (int _i797 = 0; _i797 < _list795.size; ++_i797)
                {
                  _elem796 = new TDDIAbstractFailureRef();
                  _elem796.read(iprot);
                  struct.CCFFailures.add(_elem796);
                }
                iprot.readListEnd();
              }
              struct.setCCFFailuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FAILURE_PROB_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.FailureProbDistribution = new TDDIProbDist();
              struct.FailureProbDistribution.read(iprot);
              struct.setFailureProbDistributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIFailure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter798 : struct.KeyValueMaps)
          {
            _iter798.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.OriginType != null) {
        oprot.writeFieldBegin(ORIGIN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.OriginType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.FailureClass != null) {
        oprot.writeFieldBegin(FAILURE_CLASS_FIELD_DESC);
        oprot.writeString(struct.FailureClass);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FAILURE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.FailureRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CCF_FIELD_DESC);
      oprot.writeBool(struct.IsCCF);
      oprot.writeFieldEnd();
      if (struct.CCFFailures != null) {
        oprot.writeFieldBegin(CCFFAILURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.CCFFailures.size()));
          for (TDDIAbstractFailureRef _iter799 : struct.CCFFailures)
          {
            _iter799.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.FailureProbDistribution != null) {
        oprot.writeFieldBegin(FAILURE_PROB_DISTRIBUTION_FIELD_DESC);
        struct.FailureProbDistribution.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIFailureTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIFailureTupleScheme getScheme() {
      return new TDDIFailureTupleScheme();
    }
  }

  private static class TDDIFailureTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIFailure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIFailure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetOriginType()) {
        optionals.set(4);
      }
      if (struct.isSetFailureClass()) {
        optionals.set(5);
      }
      if (struct.isSetFailureRate()) {
        optionals.set(6);
      }
      if (struct.isSetIsCCF()) {
        optionals.set(7);
      }
      if (struct.isSetCCFFailures()) {
        optionals.set(8);
      }
      if (struct.isSetFailureProbDistribution()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter800 : struct.KeyValueMaps)
          {
            _iter800.write(oprot);
          }
        }
      }
      if (struct.isSetOriginType()) {
        oprot.writeI32(struct.OriginType.getValue());
      }
      if (struct.isSetFailureClass()) {
        oprot.writeString(struct.FailureClass);
      }
      if (struct.isSetFailureRate()) {
        oprot.writeDouble(struct.FailureRate);
      }
      if (struct.isSetIsCCF()) {
        oprot.writeBool(struct.IsCCF);
      }
      if (struct.isSetCCFFailures()) {
        {
          oprot.writeI32(struct.CCFFailures.size());
          for (TDDIAbstractFailureRef _iter801 : struct.CCFFailures)
          {
            _iter801.write(oprot);
          }
        }
      }
      if (struct.isSetFailureProbDistribution()) {
        struct.FailureProbDistribution.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIFailure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list802 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list802.size);
          TDDIKeyValueMap _elem803;
          for (int _i804 = 0; _i804 < _list802.size; ++_i804)
          {
            _elem803 = new TDDIKeyValueMap();
            _elem803.read(iprot);
            struct.KeyValueMaps.add(_elem803);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.OriginType = thriftContract.TDDIFailureOriginType.findByValue(iprot.readI32());
        struct.setOriginTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.FailureClass = iprot.readString();
        struct.setFailureClassIsSet(true);
      }
      if (incoming.get(6)) {
        struct.FailureRate = iprot.readDouble();
        struct.setFailureRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.IsCCF = iprot.readBool();
        struct.setIsCCFIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list805 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.CCFFailures = new java.util.ArrayList<TDDIAbstractFailureRef>(_list805.size);
          TDDIAbstractFailureRef _elem806;
          for (int _i807 = 0; _i807 < _list805.size; ++_i807)
          {
            _elem806 = new TDDIAbstractFailureRef();
            _elem806.read(iprot);
            struct.CCFFailures.add(_elem806);
          }
        }
        struct.setCCFFailuresIsSet(true);
      }
      if (incoming.get(9)) {
        struct.FailureProbDistribution = new TDDIProbDist();
        struct.FailureProbDistribution.read(iprot);
        struct.setFailureProbDistributionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

