/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-14")
public class TDDIAbstractAttackUnion implements org.apache.thrift.TBase<TDDIAbstractAttackUnion, TDDIAbstractAttackUnion._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractAttackUnion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractAttackUnion");

  private static final org.apache.thrift.protocol.TField ATTACK_FIELD_DESC = new org.apache.thrift.protocol.TField("Attack", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Action", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("Payload", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractAttackUnionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractAttackUnionTupleSchemeFactory();

  public TDDIAttack Attack; // required
  public TDDIAction Action; // required
  public TDDIPayload Payload; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTACK((short)1, "Attack"),
    ACTION((short)2, "Action"),
    PAYLOAD((short)3, "Payload");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTACK
          return ATTACK;
        case 2: // ACTION
          return ACTION;
        case 3: // PAYLOAD
          return PAYLOAD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTACK, new org.apache.thrift.meta_data.FieldMetaData("Attack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAttack.class)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("Action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAction.class)));
    tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("Payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPayload.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractAttackUnion.class, metaDataMap);
  }

  public TDDIAbstractAttackUnion() {
  }

  public TDDIAbstractAttackUnion(
    TDDIAttack Attack,
    TDDIAction Action,
    TDDIPayload Payload)
  {
    this();
    this.Attack = Attack;
    this.Action = Action;
    this.Payload = Payload;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractAttackUnion(TDDIAbstractAttackUnion other) {
    if (other.isSetAttack()) {
      this.Attack = new TDDIAttack(other.Attack);
    }
    if (other.isSetAction()) {
      this.Action = new TDDIAction(other.Action);
    }
    if (other.isSetPayload()) {
      this.Payload = new TDDIPayload(other.Payload);
    }
  }

  public TDDIAbstractAttackUnion deepCopy() {
    return new TDDIAbstractAttackUnion(this);
  }

  @Override
  public void clear() {
    this.Attack = null;
    this.Action = null;
    this.Payload = null;
  }

  public TDDIAttack getAttack() {
    return this.Attack;
  }

  public TDDIAbstractAttackUnion setAttack(TDDIAttack Attack) {
    this.Attack = Attack;
    return this;
  }

  public void unsetAttack() {
    this.Attack = null;
  }

  /** Returns true if field Attack is set (has been assigned a value) and false otherwise */
  public boolean isSetAttack() {
    return this.Attack != null;
  }

  public void setAttackIsSet(boolean value) {
    if (!value) {
      this.Attack = null;
    }
  }

  public TDDIAction getAction() {
    return this.Action;
  }

  public TDDIAbstractAttackUnion setAction(TDDIAction Action) {
    this.Action = Action;
    return this;
  }

  public void unsetAction() {
    this.Action = null;
  }

  /** Returns true if field Action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.Action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.Action = null;
    }
  }

  public TDDIPayload getPayload() {
    return this.Payload;
  }

  public TDDIAbstractAttackUnion setPayload(TDDIPayload Payload) {
    this.Payload = Payload;
    return this;
  }

  public void unsetPayload() {
    this.Payload = null;
  }

  /** Returns true if field Payload is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload() {
    return this.Payload != null;
  }

  public void setPayloadIsSet(boolean value) {
    if (!value) {
      this.Payload = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ATTACK:
      if (value == null) {
        unsetAttack();
      } else {
        setAttack((TDDIAttack)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((TDDIAction)value);
      }
      break;

    case PAYLOAD:
      if (value == null) {
        unsetPayload();
      } else {
        setPayload((TDDIPayload)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTACK:
      return getAttack();

    case ACTION:
      return getAction();

    case PAYLOAD:
      return getPayload();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ATTACK:
      return isSetAttack();
    case ACTION:
      return isSetAction();
    case PAYLOAD:
      return isSetPayload();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractAttackUnion)
      return this.equals((TDDIAbstractAttackUnion)that);
    return false;
  }

  public boolean equals(TDDIAbstractAttackUnion that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Attack = true && this.isSetAttack();
    boolean that_present_Attack = true && that.isSetAttack();
    if (this_present_Attack || that_present_Attack) {
      if (!(this_present_Attack && that_present_Attack))
        return false;
      if (!this.Attack.equals(that.Attack))
        return false;
    }

    boolean this_present_Action = true && this.isSetAction();
    boolean that_present_Action = true && that.isSetAction();
    if (this_present_Action || that_present_Action) {
      if (!(this_present_Action && that_present_Action))
        return false;
      if (!this.Action.equals(that.Action))
        return false;
    }

    boolean this_present_Payload = true && this.isSetPayload();
    boolean that_present_Payload = true && that.isSetPayload();
    if (this_present_Payload || that_present_Payload) {
      if (!(this_present_Payload && that_present_Payload))
        return false;
      if (!this.Payload.equals(that.Payload))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAttack()) ? 131071 : 524287);
    if (isSetAttack())
      hashCode = hashCode * 8191 + Attack.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + Action.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayload()) ? 131071 : 524287);
    if (isSetPayload())
      hashCode = hashCode * 8191 + Payload.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractAttackUnion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAttack()).compareTo(other.isSetAttack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Attack, other.Attack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Action, other.Action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Payload, other.Payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractAttackUnion(");
    boolean first = true;

    sb.append("Attack:");
    if (this.Attack == null) {
      sb.append("null");
    } else {
      sb.append(this.Attack);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Action:");
    if (this.Action == null) {
      sb.append("null");
    } else {
      sb.append(this.Action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Payload:");
    if (this.Payload == null) {
      sb.append("null");
    } else {
      sb.append(this.Payload);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (Attack != null) {
      Attack.validate();
    }
    if (Action != null) {
      Action.validate();
    }
    if (Payload != null) {
      Payload.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractAttackUnionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractAttackUnionStandardScheme getScheme() {
      return new TDDIAbstractAttackUnionStandardScheme();
    }
  }

  private static class TDDIAbstractAttackUnionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractAttackUnion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractAttackUnion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Attack = new TDDIAttack();
              struct.Attack.read(iprot);
              struct.setAttackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Action = new TDDIAction();
              struct.Action.read(iprot);
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Payload = new TDDIPayload();
              struct.Payload.read(iprot);
              struct.setPayloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractAttackUnion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Attack != null) {
        oprot.writeFieldBegin(ATTACK_FIELD_DESC);
        struct.Attack.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        struct.Action.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Payload != null) {
        oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
        struct.Payload.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractAttackUnionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractAttackUnionTupleScheme getScheme() {
      return new TDDIAbstractAttackUnionTupleScheme();
    }
  }

  private static class TDDIAbstractAttackUnionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractAttackUnion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractAttackUnion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAttack()) {
        optionals.set(0);
      }
      if (struct.isSetAction()) {
        optionals.set(1);
      }
      if (struct.isSetPayload()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAttack()) {
        struct.Attack.write(oprot);
      }
      if (struct.isSetAction()) {
        struct.Action.write(oprot);
      }
      if (struct.isSetPayload()) {
        struct.Payload.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractAttackUnion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.Attack = new TDDIAttack();
        struct.Attack.read(iprot);
        struct.setAttackIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Action = new TDDIAction();
        struct.Action.read(iprot);
        struct.setActionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Payload = new TDDIPayload();
        struct.Payload.read(iprot);
        struct.setPayloadIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

