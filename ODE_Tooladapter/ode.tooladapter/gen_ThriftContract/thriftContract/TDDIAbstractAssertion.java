/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-04")
public class TDDIAbstractAssertion implements org.apache.thrift.TBase<TDDIAbstractAssertion, TDDIAbstractAssertion._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractAssertion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractAssertion");

  private static final org.apache.thrift.protocol.TField USED_ASSERTION_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedAssertion", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_ASSERTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedAssertionType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractAssertionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractAssertionTupleSchemeFactory();

  public TDDIAssertionUnion UsedAssertion; // required
  /**
   * 
   * @see TDDIAssertionUnionType
   */
  public TDDIAssertionUnionType UsedAssertionType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_ASSERTION((short)1, "UsedAssertion"),
    /**
     * 
     * @see TDDIAssertionUnionType
     */
    USED_ASSERTION_TYPE((short)2, "UsedAssertionType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_ASSERTION
          return USED_ASSERTION;
        case 2: // USED_ASSERTION_TYPE
          return USED_ASSERTION_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_ASSERTION, new org.apache.thrift.meta_data.FieldMetaData("UsedAssertion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssertionUnion.class)));
    tmpMap.put(_Fields.USED_ASSERTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedAssertionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIAssertionUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractAssertion.class, metaDataMap);
  }

  public TDDIAbstractAssertion() {
  }

  public TDDIAbstractAssertion(
    TDDIAssertionUnion UsedAssertion,
    TDDIAssertionUnionType UsedAssertionType)
  {
    this();
    this.UsedAssertion = UsedAssertion;
    this.UsedAssertionType = UsedAssertionType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractAssertion(TDDIAbstractAssertion other) {
    if (other.isSetUsedAssertion()) {
      this.UsedAssertion = new TDDIAssertionUnion(other.UsedAssertion);
    }
    if (other.isSetUsedAssertionType()) {
      this.UsedAssertionType = other.UsedAssertionType;
    }
  }

  public TDDIAbstractAssertion deepCopy() {
    return new TDDIAbstractAssertion(this);
  }

  @Override
  public void clear() {
    this.UsedAssertion = null;
    this.UsedAssertionType = null;
  }

  public TDDIAssertionUnion getUsedAssertion() {
    return this.UsedAssertion;
  }

  public TDDIAbstractAssertion setUsedAssertion(TDDIAssertionUnion UsedAssertion) {
    this.UsedAssertion = UsedAssertion;
    return this;
  }

  public void unsetUsedAssertion() {
    this.UsedAssertion = null;
  }

  /** Returns true if field UsedAssertion is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedAssertion() {
    return this.UsedAssertion != null;
  }

  public void setUsedAssertionIsSet(boolean value) {
    if (!value) {
      this.UsedAssertion = null;
    }
  }

  /**
   * 
   * @see TDDIAssertionUnionType
   */
  public TDDIAssertionUnionType getUsedAssertionType() {
    return this.UsedAssertionType;
  }

  /**
   * 
   * @see TDDIAssertionUnionType
   */
  public TDDIAbstractAssertion setUsedAssertionType(TDDIAssertionUnionType UsedAssertionType) {
    this.UsedAssertionType = UsedAssertionType;
    return this;
  }

  public void unsetUsedAssertionType() {
    this.UsedAssertionType = null;
  }

  /** Returns true if field UsedAssertionType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedAssertionType() {
    return this.UsedAssertionType != null;
  }

  public void setUsedAssertionTypeIsSet(boolean value) {
    if (!value) {
      this.UsedAssertionType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_ASSERTION:
      if (value == null) {
        unsetUsedAssertion();
      } else {
        setUsedAssertion((TDDIAssertionUnion)value);
      }
      break;

    case USED_ASSERTION_TYPE:
      if (value == null) {
        unsetUsedAssertionType();
      } else {
        setUsedAssertionType((TDDIAssertionUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_ASSERTION:
      return getUsedAssertion();

    case USED_ASSERTION_TYPE:
      return getUsedAssertionType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_ASSERTION:
      return isSetUsedAssertion();
    case USED_ASSERTION_TYPE:
      return isSetUsedAssertionType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractAssertion)
      return this.equals((TDDIAbstractAssertion)that);
    return false;
  }

  public boolean equals(TDDIAbstractAssertion that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedAssertion = true && this.isSetUsedAssertion();
    boolean that_present_UsedAssertion = true && that.isSetUsedAssertion();
    if (this_present_UsedAssertion || that_present_UsedAssertion) {
      if (!(this_present_UsedAssertion && that_present_UsedAssertion))
        return false;
      if (!this.UsedAssertion.equals(that.UsedAssertion))
        return false;
    }

    boolean this_present_UsedAssertionType = true && this.isSetUsedAssertionType();
    boolean that_present_UsedAssertionType = true && that.isSetUsedAssertionType();
    if (this_present_UsedAssertionType || that_present_UsedAssertionType) {
      if (!(this_present_UsedAssertionType && that_present_UsedAssertionType))
        return false;
      if (!this.UsedAssertionType.equals(that.UsedAssertionType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedAssertion()) ? 131071 : 524287);
    if (isSetUsedAssertion())
      hashCode = hashCode * 8191 + UsedAssertion.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedAssertionType()) ? 131071 : 524287);
    if (isSetUsedAssertionType())
      hashCode = hashCode * 8191 + UsedAssertionType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractAssertion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedAssertion()).compareTo(other.isSetUsedAssertion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedAssertion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedAssertion, other.UsedAssertion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedAssertionType()).compareTo(other.isSetUsedAssertionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedAssertionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedAssertionType, other.UsedAssertionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractAssertion(");
    boolean first = true;

    sb.append("UsedAssertion:");
    if (this.UsedAssertion == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedAssertion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedAssertionType:");
    if (this.UsedAssertionType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedAssertionType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractAssertionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractAssertionStandardScheme getScheme() {
      return new TDDIAbstractAssertionStandardScheme();
    }
  }

  private static class TDDIAbstractAssertionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractAssertion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractAssertion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_ASSERTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedAssertion = new TDDIAssertionUnion();
              struct.UsedAssertion.read(iprot);
              struct.setUsedAssertionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_ASSERTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedAssertionType = thriftContract.TDDIAssertionUnionType.findByValue(iprot.readI32());
              struct.setUsedAssertionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractAssertion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedAssertion != null) {
        oprot.writeFieldBegin(USED_ASSERTION_FIELD_DESC);
        struct.UsedAssertion.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedAssertionType != null) {
        oprot.writeFieldBegin(USED_ASSERTION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedAssertionType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractAssertionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractAssertionTupleScheme getScheme() {
      return new TDDIAbstractAssertionTupleScheme();
    }
  }

  private static class TDDIAbstractAssertionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractAssertion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractAssertion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedAssertion()) {
        optionals.set(0);
      }
      if (struct.isSetUsedAssertionType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedAssertion()) {
        struct.UsedAssertion.write(oprot);
      }
      if (struct.isSetUsedAssertionType()) {
        oprot.writeI32(struct.UsedAssertionType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractAssertion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedAssertion = new TDDIAssertionUnion();
        struct.UsedAssertion.read(iprot);
        struct.setUsedAssertionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedAssertionType = thriftContract.TDDIAssertionUnionType.findByValue(iprot.readI32());
        struct.setUsedAssertionTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

