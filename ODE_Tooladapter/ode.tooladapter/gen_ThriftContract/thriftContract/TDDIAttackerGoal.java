/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-14")
public class TDDIAttackerGoal implements org.apache.thrift.TBase<TDDIAttackerGoal, TDDIAttackerGoal._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAttackerGoal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAttackerGoal");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("Category", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ATTACKS_FIELD_DESC = new org.apache.thrift.protocol.TField("Attacks", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField ADDRESSED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("AddressedBy", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ATTACKED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("AttackedItems", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAttackerGoalStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAttackerGoalTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.lang.String Category; // required
  public java.util.List<TDDIAbstractAttack> Attacks; // required
  public java.util.List<TDDISecurityCapability> AddressedBy; // required
  public java.util.List<TDDIVulnerableItemRef> AttackedItems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    CATEGORY((short)5, "Category"),
    ATTACKS((short)6, "Attacks"),
    ADDRESSED_BY((short)7, "AddressedBy"),
    ATTACKED_ITEMS((short)8, "AttackedItems");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // CATEGORY
          return CATEGORY;
        case 6: // ATTACKS
          return ATTACKS;
        case 7: // ADDRESSED_BY
          return ADDRESSED_BY;
        case 8: // ATTACKED_ITEMS
          return ATTACKED_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("Category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACKS, new org.apache.thrift.meta_data.FieldMetaData("Attacks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractAttack.class))));
    tmpMap.put(_Fields.ADDRESSED_BY, new org.apache.thrift.meta_data.FieldMetaData("AddressedBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISecurityCapability.class))));
    tmpMap.put(_Fields.ATTACKED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("AttackedItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIVulnerableItemRef.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAttackerGoal.class, metaDataMap);
  }

  public TDDIAttackerGoal() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.Category = "";

    this.Attacks = new java.util.ArrayList<TDDIAbstractAttack>();

    this.AddressedBy = new java.util.ArrayList<TDDISecurityCapability>();

    this.AttackedItems = new java.util.ArrayList<TDDIVulnerableItemRef>();

  }

  public TDDIAttackerGoal(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.lang.String Category,
    java.util.List<TDDIAbstractAttack> Attacks,
    java.util.List<TDDISecurityCapability> AddressedBy,
    java.util.List<TDDIVulnerableItemRef> AttackedItems)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.Category = Category;
    this.Attacks = Attacks;
    this.AddressedBy = AddressedBy;
    this.AttackedItems = AttackedItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAttackerGoal(TDDIAttackerGoal other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetCategory()) {
      this.Category = other.Category;
    }
    if (other.isSetAttacks()) {
      java.util.List<TDDIAbstractAttack> __this__Attacks = new java.util.ArrayList<TDDIAbstractAttack>(other.Attacks.size());
      for (TDDIAbstractAttack other_element : other.Attacks) {
        __this__Attacks.add(new TDDIAbstractAttack(other_element));
      }
      this.Attacks = __this__Attacks;
    }
    if (other.isSetAddressedBy()) {
      java.util.List<TDDISecurityCapability> __this__AddressedBy = new java.util.ArrayList<TDDISecurityCapability>(other.AddressedBy.size());
      for (TDDISecurityCapability other_element : other.AddressedBy) {
        __this__AddressedBy.add(new TDDISecurityCapability(other_element));
      }
      this.AddressedBy = __this__AddressedBy;
    }
    if (other.isSetAttackedItems()) {
      java.util.List<TDDIVulnerableItemRef> __this__AttackedItems = new java.util.ArrayList<TDDIVulnerableItemRef>(other.AttackedItems.size());
      for (TDDIVulnerableItemRef other_element : other.AttackedItems) {
        __this__AttackedItems.add(new TDDIVulnerableItemRef(other_element));
      }
      this.AttackedItems = __this__AttackedItems;
    }
  }

  public TDDIAttackerGoal deepCopy() {
    return new TDDIAttackerGoal(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.Category = "";

    this.Attacks = new java.util.ArrayList<TDDIAbstractAttack>();

    this.AddressedBy = new java.util.ArrayList<TDDISecurityCapability>();

    this.AttackedItems = new java.util.ArrayList<TDDIVulnerableItemRef>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDIAttackerGoal setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIAttackerGoal setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIAttackerGoal setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIAttackerGoal setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public java.lang.String getCategory() {
    return this.Category;
  }

  public TDDIAttackerGoal setCategory(java.lang.String Category) {
    this.Category = Category;
    return this;
  }

  public void unsetCategory() {
    this.Category = null;
  }

  /** Returns true if field Category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.Category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.Category = null;
    }
  }

  public int getAttacksSize() {
    return (this.Attacks == null) ? 0 : this.Attacks.size();
  }

  public java.util.Iterator<TDDIAbstractAttack> getAttacksIterator() {
    return (this.Attacks == null) ? null : this.Attacks.iterator();
  }

  public void addToAttacks(TDDIAbstractAttack elem) {
    if (this.Attacks == null) {
      this.Attacks = new java.util.ArrayList<TDDIAbstractAttack>();
    }
    this.Attacks.add(elem);
  }

  public java.util.List<TDDIAbstractAttack> getAttacks() {
    return this.Attacks;
  }

  public TDDIAttackerGoal setAttacks(java.util.List<TDDIAbstractAttack> Attacks) {
    this.Attacks = Attacks;
    return this;
  }

  public void unsetAttacks() {
    this.Attacks = null;
  }

  /** Returns true if field Attacks is set (has been assigned a value) and false otherwise */
  public boolean isSetAttacks() {
    return this.Attacks != null;
  }

  public void setAttacksIsSet(boolean value) {
    if (!value) {
      this.Attacks = null;
    }
  }

  public int getAddressedBySize() {
    return (this.AddressedBy == null) ? 0 : this.AddressedBy.size();
  }

  public java.util.Iterator<TDDISecurityCapability> getAddressedByIterator() {
    return (this.AddressedBy == null) ? null : this.AddressedBy.iterator();
  }

  public void addToAddressedBy(TDDISecurityCapability elem) {
    if (this.AddressedBy == null) {
      this.AddressedBy = new java.util.ArrayList<TDDISecurityCapability>();
    }
    this.AddressedBy.add(elem);
  }

  public java.util.List<TDDISecurityCapability> getAddressedBy() {
    return this.AddressedBy;
  }

  public TDDIAttackerGoal setAddressedBy(java.util.List<TDDISecurityCapability> AddressedBy) {
    this.AddressedBy = AddressedBy;
    return this;
  }

  public void unsetAddressedBy() {
    this.AddressedBy = null;
  }

  /** Returns true if field AddressedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressedBy() {
    return this.AddressedBy != null;
  }

  public void setAddressedByIsSet(boolean value) {
    if (!value) {
      this.AddressedBy = null;
    }
  }

  public int getAttackedItemsSize() {
    return (this.AttackedItems == null) ? 0 : this.AttackedItems.size();
  }

  public java.util.Iterator<TDDIVulnerableItemRef> getAttackedItemsIterator() {
    return (this.AttackedItems == null) ? null : this.AttackedItems.iterator();
  }

  public void addToAttackedItems(TDDIVulnerableItemRef elem) {
    if (this.AttackedItems == null) {
      this.AttackedItems = new java.util.ArrayList<TDDIVulnerableItemRef>();
    }
    this.AttackedItems.add(elem);
  }

  public java.util.List<TDDIVulnerableItemRef> getAttackedItems() {
    return this.AttackedItems;
  }

  public TDDIAttackerGoal setAttackedItems(java.util.List<TDDIVulnerableItemRef> AttackedItems) {
    this.AttackedItems = AttackedItems;
    return this;
  }

  public void unsetAttackedItems() {
    this.AttackedItems = null;
  }

  /** Returns true if field AttackedItems is set (has been assigned a value) and false otherwise */
  public boolean isSetAttackedItems() {
    return this.AttackedItems != null;
  }

  public void setAttackedItemsIsSet(boolean value) {
    if (!value) {
      this.AttackedItems = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((java.lang.String)value);
      }
      break;

    case ATTACKS:
      if (value == null) {
        unsetAttacks();
      } else {
        setAttacks((java.util.List<TDDIAbstractAttack>)value);
      }
      break;

    case ADDRESSED_BY:
      if (value == null) {
        unsetAddressedBy();
      } else {
        setAddressedBy((java.util.List<TDDISecurityCapability>)value);
      }
      break;

    case ATTACKED_ITEMS:
      if (value == null) {
        unsetAttackedItems();
      } else {
        setAttackedItems((java.util.List<TDDIVulnerableItemRef>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case CATEGORY:
      return getCategory();

    case ATTACKS:
      return getAttacks();

    case ADDRESSED_BY:
      return getAddressedBy();

    case ATTACKED_ITEMS:
      return getAttackedItems();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case CATEGORY:
      return isSetCategory();
    case ATTACKS:
      return isSetAttacks();
    case ADDRESSED_BY:
      return isSetAddressedBy();
    case ATTACKED_ITEMS:
      return isSetAttackedItems();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAttackerGoal)
      return this.equals((TDDIAttackerGoal)that);
    return false;
  }

  public boolean equals(TDDIAttackerGoal that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_Category = true && this.isSetCategory();
    boolean that_present_Category = true && that.isSetCategory();
    if (this_present_Category || that_present_Category) {
      if (!(this_present_Category && that_present_Category))
        return false;
      if (!this.Category.equals(that.Category))
        return false;
    }

    boolean this_present_Attacks = true && this.isSetAttacks();
    boolean that_present_Attacks = true && that.isSetAttacks();
    if (this_present_Attacks || that_present_Attacks) {
      if (!(this_present_Attacks && that_present_Attacks))
        return false;
      if (!this.Attacks.equals(that.Attacks))
        return false;
    }

    boolean this_present_AddressedBy = true && this.isSetAddressedBy();
    boolean that_present_AddressedBy = true && that.isSetAddressedBy();
    if (this_present_AddressedBy || that_present_AddressedBy) {
      if (!(this_present_AddressedBy && that_present_AddressedBy))
        return false;
      if (!this.AddressedBy.equals(that.AddressedBy))
        return false;
    }

    boolean this_present_AttackedItems = true && this.isSetAttackedItems();
    boolean that_present_AttackedItems = true && that.isSetAttackedItems();
    if (this_present_AttackedItems || that_present_AttackedItems) {
      if (!(this_present_AttackedItems && that_present_AttackedItems))
        return false;
      if (!this.AttackedItems.equals(that.AttackedItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + Category.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttacks()) ? 131071 : 524287);
    if (isSetAttacks())
      hashCode = hashCode * 8191 + Attacks.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddressedBy()) ? 131071 : 524287);
    if (isSetAddressedBy())
      hashCode = hashCode * 8191 + AddressedBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttackedItems()) ? 131071 : 524287);
    if (isSetAttackedItems())
      hashCode = hashCode * 8191 + AttackedItems.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAttackerGoal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Category, other.Category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttacks()).compareTo(other.isSetAttacks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttacks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Attacks, other.Attacks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddressedBy()).compareTo(other.isSetAddressedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AddressedBy, other.AddressedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttackedItems()).compareTo(other.isSetAttackedItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttackedItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AttackedItems, other.AttackedItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAttackerGoal(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Category:");
    if (this.Category == null) {
      sb.append("null");
    } else {
      sb.append(this.Category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Attacks:");
    if (this.Attacks == null) {
      sb.append("null");
    } else {
      sb.append(this.Attacks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AddressedBy:");
    if (this.AddressedBy == null) {
      sb.append("null");
    } else {
      sb.append(this.AddressedBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AttackedItems:");
    if (this.AttackedItems == null) {
      sb.append("null");
    } else {
      sb.append(this.AttackedItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAttackerGoalStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAttackerGoalStandardScheme getScheme() {
      return new TDDIAttackerGoalStandardScheme();
    }
  }

  private static class TDDIAttackerGoalStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAttackerGoal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAttackerGoal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2920 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list2920.size);
                TDDIKeyValueMap _elem2921;
                for (int _i2922 = 0; _i2922 < _list2920.size; ++_i2922)
                {
                  _elem2921 = new TDDIKeyValueMap();
                  _elem2921.read(iprot);
                  struct.KeyValueMaps.add(_elem2921);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ATTACKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2923 = iprot.readListBegin();
                struct.Attacks = new java.util.ArrayList<TDDIAbstractAttack>(_list2923.size);
                TDDIAbstractAttack _elem2924;
                for (int _i2925 = 0; _i2925 < _list2923.size; ++_i2925)
                {
                  _elem2924 = new TDDIAbstractAttack();
                  _elem2924.read(iprot);
                  struct.Attacks.add(_elem2924);
                }
                iprot.readListEnd();
              }
              struct.setAttacksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADDRESSED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2926 = iprot.readListBegin();
                struct.AddressedBy = new java.util.ArrayList<TDDISecurityCapability>(_list2926.size);
                TDDISecurityCapability _elem2927;
                for (int _i2928 = 0; _i2928 < _list2926.size; ++_i2928)
                {
                  _elem2927 = new TDDISecurityCapability();
                  _elem2927.read(iprot);
                  struct.AddressedBy.add(_elem2927);
                }
                iprot.readListEnd();
              }
              struct.setAddressedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ATTACKED_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2929 = iprot.readListBegin();
                struct.AttackedItems = new java.util.ArrayList<TDDIVulnerableItemRef>(_list2929.size);
                TDDIVulnerableItemRef _elem2930;
                for (int _i2931 = 0; _i2931 < _list2929.size; ++_i2931)
                {
                  _elem2930 = new TDDIVulnerableItemRef();
                  _elem2930.read(iprot);
                  struct.AttackedItems.add(_elem2930);
                }
                iprot.readListEnd();
              }
              struct.setAttackedItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAttackerGoal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter2932 : struct.KeyValueMaps)
          {
            _iter2932.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.Category);
        oprot.writeFieldEnd();
      }
      if (struct.Attacks != null) {
        oprot.writeFieldBegin(ATTACKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Attacks.size()));
          for (TDDIAbstractAttack _iter2933 : struct.Attacks)
          {
            _iter2933.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AddressedBy != null) {
        oprot.writeFieldBegin(ADDRESSED_BY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AddressedBy.size()));
          for (TDDISecurityCapability _iter2934 : struct.AddressedBy)
          {
            _iter2934.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AttackedItems != null) {
        oprot.writeFieldBegin(ATTACKED_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AttackedItems.size()));
          for (TDDIVulnerableItemRef _iter2935 : struct.AttackedItems)
          {
            _iter2935.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAttackerGoalTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAttackerGoalTupleScheme getScheme() {
      return new TDDIAttackerGoalTupleScheme();
    }
  }

  private static class TDDIAttackerGoalTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAttackerGoal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAttackerGoal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetCategory()) {
        optionals.set(4);
      }
      if (struct.isSetAttacks()) {
        optionals.set(5);
      }
      if (struct.isSetAddressedBy()) {
        optionals.set(6);
      }
      if (struct.isSetAttackedItems()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter2936 : struct.KeyValueMaps)
          {
            _iter2936.write(oprot);
          }
        }
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.Category);
      }
      if (struct.isSetAttacks()) {
        {
          oprot.writeI32(struct.Attacks.size());
          for (TDDIAbstractAttack _iter2937 : struct.Attacks)
          {
            _iter2937.write(oprot);
          }
        }
      }
      if (struct.isSetAddressedBy()) {
        {
          oprot.writeI32(struct.AddressedBy.size());
          for (TDDISecurityCapability _iter2938 : struct.AddressedBy)
          {
            _iter2938.write(oprot);
          }
        }
      }
      if (struct.isSetAttackedItems()) {
        {
          oprot.writeI32(struct.AttackedItems.size());
          for (TDDIVulnerableItemRef _iter2939 : struct.AttackedItems)
          {
            _iter2939.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAttackerGoal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list2940 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list2940.size);
          TDDIKeyValueMap _elem2941;
          for (int _i2942 = 0; _i2942 < _list2940.size; ++_i2942)
          {
            _elem2941 = new TDDIKeyValueMap();
            _elem2941.read(iprot);
            struct.KeyValueMaps.add(_elem2941);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list2943 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Attacks = new java.util.ArrayList<TDDIAbstractAttack>(_list2943.size);
          TDDIAbstractAttack _elem2944;
          for (int _i2945 = 0; _i2945 < _list2943.size; ++_i2945)
          {
            _elem2944 = new TDDIAbstractAttack();
            _elem2944.read(iprot);
            struct.Attacks.add(_elem2944);
          }
        }
        struct.setAttacksIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list2946 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AddressedBy = new java.util.ArrayList<TDDISecurityCapability>(_list2946.size);
          TDDISecurityCapability _elem2947;
          for (int _i2948 = 0; _i2948 < _list2946.size; ++_i2948)
          {
            _elem2947 = new TDDISecurityCapability();
            _elem2947.read(iprot);
            struct.AddressedBy.add(_elem2947);
          }
        }
        struct.setAddressedByIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list2949 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AttackedItems = new java.util.ArrayList<TDDIVulnerableItemRef>(_list2949.size);
          TDDIVulnerableItemRef _elem2950;
          for (int _i2951 = 0; _i2951 < _list2949.size; ++_i2951)
          {
            _elem2950 = new TDDIVulnerableItemRef();
            _elem2950.read(iprot);
            struct.AttackedItems.add(_elem2950);
          }
        }
        struct.setAttackedItemsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

