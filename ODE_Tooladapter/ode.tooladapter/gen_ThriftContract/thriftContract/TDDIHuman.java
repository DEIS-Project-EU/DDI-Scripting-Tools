/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-14")
public class TDDIHuman implements org.apache.thrift.TBase<TDDIHuman, TDDIHuman._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIHuman> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIHuman");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SKILL_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("SkillLevel", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MOTIVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("Motivation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ANONYMITY_DESIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("AnonymityDesire", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ATTACKER_GOALS_FIELD_DESC = new org.apache.thrift.protocol.TField("AttackerGoals", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Actions", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIHumanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIHumanTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.lang.String SkillLevel; // required
  public java.lang.String Motivation; // required
  public java.lang.String AnonymityDesire; // required
  public java.util.List<TDDIAttackerGoal> AttackerGoals; // required
  public java.util.List<TDDIActionRef> Actions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    SKILL_LEVEL((short)5, "SkillLevel"),
    MOTIVATION((short)6, "Motivation"),
    ANONYMITY_DESIRE((short)7, "AnonymityDesire"),
    ATTACKER_GOALS((short)8, "AttackerGoals"),
    ACTIONS((short)9, "Actions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // SKILL_LEVEL
          return SKILL_LEVEL;
        case 6: // MOTIVATION
          return MOTIVATION;
        case 7: // ANONYMITY_DESIRE
          return ANONYMITY_DESIRE;
        case 8: // ATTACKER_GOALS
          return ATTACKER_GOALS;
        case 9: // ACTIONS
          return ACTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.SKILL_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("SkillLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOTIVATION, new org.apache.thrift.meta_data.FieldMetaData("Motivation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANONYMITY_DESIRE, new org.apache.thrift.meta_data.FieldMetaData("AnonymityDesire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACKER_GOALS, new org.apache.thrift.meta_data.FieldMetaData("AttackerGoals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAttackerGoal.class))));
    tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("Actions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIActionRef.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIHuman.class, metaDataMap);
  }

  public TDDIHuman() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.SkillLevel = "";

    this.Motivation = "";

    this.AnonymityDesire = "";

    this.AttackerGoals = new java.util.ArrayList<TDDIAttackerGoal>();

    this.Actions = new java.util.ArrayList<TDDIActionRef>();

  }

  public TDDIHuman(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.lang.String SkillLevel,
    java.lang.String Motivation,
    java.lang.String AnonymityDesire,
    java.util.List<TDDIAttackerGoal> AttackerGoals,
    java.util.List<TDDIActionRef> Actions)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.SkillLevel = SkillLevel;
    this.Motivation = Motivation;
    this.AnonymityDesire = AnonymityDesire;
    this.AttackerGoals = AttackerGoals;
    this.Actions = Actions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIHuman(TDDIHuman other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetSkillLevel()) {
      this.SkillLevel = other.SkillLevel;
    }
    if (other.isSetMotivation()) {
      this.Motivation = other.Motivation;
    }
    if (other.isSetAnonymityDesire()) {
      this.AnonymityDesire = other.AnonymityDesire;
    }
    if (other.isSetAttackerGoals()) {
      java.util.List<TDDIAttackerGoal> __this__AttackerGoals = new java.util.ArrayList<TDDIAttackerGoal>(other.AttackerGoals.size());
      for (TDDIAttackerGoal other_element : other.AttackerGoals) {
        __this__AttackerGoals.add(new TDDIAttackerGoal(other_element));
      }
      this.AttackerGoals = __this__AttackerGoals;
    }
    if (other.isSetActions()) {
      java.util.List<TDDIActionRef> __this__Actions = new java.util.ArrayList<TDDIActionRef>(other.Actions.size());
      for (TDDIActionRef other_element : other.Actions) {
        __this__Actions.add(new TDDIActionRef(other_element));
      }
      this.Actions = __this__Actions;
    }
  }

  public TDDIHuman deepCopy() {
    return new TDDIHuman(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.SkillLevel = "";

    this.Motivation = "";

    this.AnonymityDesire = "";

    this.AttackerGoals = new java.util.ArrayList<TDDIAttackerGoal>();

    this.Actions = new java.util.ArrayList<TDDIActionRef>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDIHuman setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIHuman setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIHuman setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIHuman setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public java.lang.String getSkillLevel() {
    return this.SkillLevel;
  }

  public TDDIHuman setSkillLevel(java.lang.String SkillLevel) {
    this.SkillLevel = SkillLevel;
    return this;
  }

  public void unsetSkillLevel() {
    this.SkillLevel = null;
  }

  /** Returns true if field SkillLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetSkillLevel() {
    return this.SkillLevel != null;
  }

  public void setSkillLevelIsSet(boolean value) {
    if (!value) {
      this.SkillLevel = null;
    }
  }

  public java.lang.String getMotivation() {
    return this.Motivation;
  }

  public TDDIHuman setMotivation(java.lang.String Motivation) {
    this.Motivation = Motivation;
    return this;
  }

  public void unsetMotivation() {
    this.Motivation = null;
  }

  /** Returns true if field Motivation is set (has been assigned a value) and false otherwise */
  public boolean isSetMotivation() {
    return this.Motivation != null;
  }

  public void setMotivationIsSet(boolean value) {
    if (!value) {
      this.Motivation = null;
    }
  }

  public java.lang.String getAnonymityDesire() {
    return this.AnonymityDesire;
  }

  public TDDIHuman setAnonymityDesire(java.lang.String AnonymityDesire) {
    this.AnonymityDesire = AnonymityDesire;
    return this;
  }

  public void unsetAnonymityDesire() {
    this.AnonymityDesire = null;
  }

  /** Returns true if field AnonymityDesire is set (has been assigned a value) and false otherwise */
  public boolean isSetAnonymityDesire() {
    return this.AnonymityDesire != null;
  }

  public void setAnonymityDesireIsSet(boolean value) {
    if (!value) {
      this.AnonymityDesire = null;
    }
  }

  public int getAttackerGoalsSize() {
    return (this.AttackerGoals == null) ? 0 : this.AttackerGoals.size();
  }

  public java.util.Iterator<TDDIAttackerGoal> getAttackerGoalsIterator() {
    return (this.AttackerGoals == null) ? null : this.AttackerGoals.iterator();
  }

  public void addToAttackerGoals(TDDIAttackerGoal elem) {
    if (this.AttackerGoals == null) {
      this.AttackerGoals = new java.util.ArrayList<TDDIAttackerGoal>();
    }
    this.AttackerGoals.add(elem);
  }

  public java.util.List<TDDIAttackerGoal> getAttackerGoals() {
    return this.AttackerGoals;
  }

  public TDDIHuman setAttackerGoals(java.util.List<TDDIAttackerGoal> AttackerGoals) {
    this.AttackerGoals = AttackerGoals;
    return this;
  }

  public void unsetAttackerGoals() {
    this.AttackerGoals = null;
  }

  /** Returns true if field AttackerGoals is set (has been assigned a value) and false otherwise */
  public boolean isSetAttackerGoals() {
    return this.AttackerGoals != null;
  }

  public void setAttackerGoalsIsSet(boolean value) {
    if (!value) {
      this.AttackerGoals = null;
    }
  }

  public int getActionsSize() {
    return (this.Actions == null) ? 0 : this.Actions.size();
  }

  public java.util.Iterator<TDDIActionRef> getActionsIterator() {
    return (this.Actions == null) ? null : this.Actions.iterator();
  }

  public void addToActions(TDDIActionRef elem) {
    if (this.Actions == null) {
      this.Actions = new java.util.ArrayList<TDDIActionRef>();
    }
    this.Actions.add(elem);
  }

  public java.util.List<TDDIActionRef> getActions() {
    return this.Actions;
  }

  public TDDIHuman setActions(java.util.List<TDDIActionRef> Actions) {
    this.Actions = Actions;
    return this;
  }

  public void unsetActions() {
    this.Actions = null;
  }

  /** Returns true if field Actions is set (has been assigned a value) and false otherwise */
  public boolean isSetActions() {
    return this.Actions != null;
  }

  public void setActionsIsSet(boolean value) {
    if (!value) {
      this.Actions = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case SKILL_LEVEL:
      if (value == null) {
        unsetSkillLevel();
      } else {
        setSkillLevel((java.lang.String)value);
      }
      break;

    case MOTIVATION:
      if (value == null) {
        unsetMotivation();
      } else {
        setMotivation((java.lang.String)value);
      }
      break;

    case ANONYMITY_DESIRE:
      if (value == null) {
        unsetAnonymityDesire();
      } else {
        setAnonymityDesire((java.lang.String)value);
      }
      break;

    case ATTACKER_GOALS:
      if (value == null) {
        unsetAttackerGoals();
      } else {
        setAttackerGoals((java.util.List<TDDIAttackerGoal>)value);
      }
      break;

    case ACTIONS:
      if (value == null) {
        unsetActions();
      } else {
        setActions((java.util.List<TDDIActionRef>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case SKILL_LEVEL:
      return getSkillLevel();

    case MOTIVATION:
      return getMotivation();

    case ANONYMITY_DESIRE:
      return getAnonymityDesire();

    case ATTACKER_GOALS:
      return getAttackerGoals();

    case ACTIONS:
      return getActions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case SKILL_LEVEL:
      return isSetSkillLevel();
    case MOTIVATION:
      return isSetMotivation();
    case ANONYMITY_DESIRE:
      return isSetAnonymityDesire();
    case ATTACKER_GOALS:
      return isSetAttackerGoals();
    case ACTIONS:
      return isSetActions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIHuman)
      return this.equals((TDDIHuman)that);
    return false;
  }

  public boolean equals(TDDIHuman that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_SkillLevel = true && this.isSetSkillLevel();
    boolean that_present_SkillLevel = true && that.isSetSkillLevel();
    if (this_present_SkillLevel || that_present_SkillLevel) {
      if (!(this_present_SkillLevel && that_present_SkillLevel))
        return false;
      if (!this.SkillLevel.equals(that.SkillLevel))
        return false;
    }

    boolean this_present_Motivation = true && this.isSetMotivation();
    boolean that_present_Motivation = true && that.isSetMotivation();
    if (this_present_Motivation || that_present_Motivation) {
      if (!(this_present_Motivation && that_present_Motivation))
        return false;
      if (!this.Motivation.equals(that.Motivation))
        return false;
    }

    boolean this_present_AnonymityDesire = true && this.isSetAnonymityDesire();
    boolean that_present_AnonymityDesire = true && that.isSetAnonymityDesire();
    if (this_present_AnonymityDesire || that_present_AnonymityDesire) {
      if (!(this_present_AnonymityDesire && that_present_AnonymityDesire))
        return false;
      if (!this.AnonymityDesire.equals(that.AnonymityDesire))
        return false;
    }

    boolean this_present_AttackerGoals = true && this.isSetAttackerGoals();
    boolean that_present_AttackerGoals = true && that.isSetAttackerGoals();
    if (this_present_AttackerGoals || that_present_AttackerGoals) {
      if (!(this_present_AttackerGoals && that_present_AttackerGoals))
        return false;
      if (!this.AttackerGoals.equals(that.AttackerGoals))
        return false;
    }

    boolean this_present_Actions = true && this.isSetActions();
    boolean that_present_Actions = true && that.isSetActions();
    if (this_present_Actions || that_present_Actions) {
      if (!(this_present_Actions && that_present_Actions))
        return false;
      if (!this.Actions.equals(that.Actions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetSkillLevel()) ? 131071 : 524287);
    if (isSetSkillLevel())
      hashCode = hashCode * 8191 + SkillLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetMotivation()) ? 131071 : 524287);
    if (isSetMotivation())
      hashCode = hashCode * 8191 + Motivation.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnonymityDesire()) ? 131071 : 524287);
    if (isSetAnonymityDesire())
      hashCode = hashCode * 8191 + AnonymityDesire.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttackerGoals()) ? 131071 : 524287);
    if (isSetAttackerGoals())
      hashCode = hashCode * 8191 + AttackerGoals.hashCode();

    hashCode = hashCode * 8191 + ((isSetActions()) ? 131071 : 524287);
    if (isSetActions())
      hashCode = hashCode * 8191 + Actions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIHuman other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSkillLevel()).compareTo(other.isSetSkillLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkillLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SkillLevel, other.SkillLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMotivation()).compareTo(other.isSetMotivation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMotivation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Motivation, other.Motivation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnonymityDesire()).compareTo(other.isSetAnonymityDesire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnonymityDesire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AnonymityDesire, other.AnonymityDesire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttackerGoals()).compareTo(other.isSetAttackerGoals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttackerGoals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AttackerGoals, other.AttackerGoals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetActions()).compareTo(other.isSetActions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Actions, other.Actions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIHuman(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SkillLevel:");
    if (this.SkillLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.SkillLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Motivation:");
    if (this.Motivation == null) {
      sb.append("null");
    } else {
      sb.append(this.Motivation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AnonymityDesire:");
    if (this.AnonymityDesire == null) {
      sb.append("null");
    } else {
      sb.append(this.AnonymityDesire);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AttackerGoals:");
    if (this.AttackerGoals == null) {
      sb.append("null");
    } else {
      sb.append(this.AttackerGoals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Actions:");
    if (this.Actions == null) {
      sb.append("null");
    } else {
      sb.append(this.Actions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIHumanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIHumanStandardScheme getScheme() {
      return new TDDIHumanStandardScheme();
    }
  }

  private static class TDDIHumanStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIHuman> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIHuman struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2968 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list2968.size);
                TDDIKeyValueMap _elem2969;
                for (int _i2970 = 0; _i2970 < _list2968.size; ++_i2970)
                {
                  _elem2969 = new TDDIKeyValueMap();
                  _elem2969.read(iprot);
                  struct.KeyValueMaps.add(_elem2969);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SKILL_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SkillLevel = iprot.readString();
              struct.setSkillLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MOTIVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Motivation = iprot.readString();
              struct.setMotivationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ANONYMITY_DESIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.AnonymityDesire = iprot.readString();
              struct.setAnonymityDesireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ATTACKER_GOALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2971 = iprot.readListBegin();
                struct.AttackerGoals = new java.util.ArrayList<TDDIAttackerGoal>(_list2971.size);
                TDDIAttackerGoal _elem2972;
                for (int _i2973 = 0; _i2973 < _list2971.size; ++_i2973)
                {
                  _elem2972 = new TDDIAttackerGoal();
                  _elem2972.read(iprot);
                  struct.AttackerGoals.add(_elem2972);
                }
                iprot.readListEnd();
              }
              struct.setAttackerGoalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2974 = iprot.readListBegin();
                struct.Actions = new java.util.ArrayList<TDDIActionRef>(_list2974.size);
                TDDIActionRef _elem2975;
                for (int _i2976 = 0; _i2976 < _list2974.size; ++_i2976)
                {
                  _elem2975 = new TDDIActionRef();
                  _elem2975.read(iprot);
                  struct.Actions.add(_elem2975);
                }
                iprot.readListEnd();
              }
              struct.setActionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIHuman struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter2977 : struct.KeyValueMaps)
          {
            _iter2977.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SkillLevel != null) {
        oprot.writeFieldBegin(SKILL_LEVEL_FIELD_DESC);
        oprot.writeString(struct.SkillLevel);
        oprot.writeFieldEnd();
      }
      if (struct.Motivation != null) {
        oprot.writeFieldBegin(MOTIVATION_FIELD_DESC);
        oprot.writeString(struct.Motivation);
        oprot.writeFieldEnd();
      }
      if (struct.AnonymityDesire != null) {
        oprot.writeFieldBegin(ANONYMITY_DESIRE_FIELD_DESC);
        oprot.writeString(struct.AnonymityDesire);
        oprot.writeFieldEnd();
      }
      if (struct.AttackerGoals != null) {
        oprot.writeFieldBegin(ATTACKER_GOALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AttackerGoals.size()));
          for (TDDIAttackerGoal _iter2978 : struct.AttackerGoals)
          {
            _iter2978.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Actions != null) {
        oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Actions.size()));
          for (TDDIActionRef _iter2979 : struct.Actions)
          {
            _iter2979.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIHumanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIHumanTupleScheme getScheme() {
      return new TDDIHumanTupleScheme();
    }
  }

  private static class TDDIHumanTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIHuman> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIHuman struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetSkillLevel()) {
        optionals.set(4);
      }
      if (struct.isSetMotivation()) {
        optionals.set(5);
      }
      if (struct.isSetAnonymityDesire()) {
        optionals.set(6);
      }
      if (struct.isSetAttackerGoals()) {
        optionals.set(7);
      }
      if (struct.isSetActions()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter2980 : struct.KeyValueMaps)
          {
            _iter2980.write(oprot);
          }
        }
      }
      if (struct.isSetSkillLevel()) {
        oprot.writeString(struct.SkillLevel);
      }
      if (struct.isSetMotivation()) {
        oprot.writeString(struct.Motivation);
      }
      if (struct.isSetAnonymityDesire()) {
        oprot.writeString(struct.AnonymityDesire);
      }
      if (struct.isSetAttackerGoals()) {
        {
          oprot.writeI32(struct.AttackerGoals.size());
          for (TDDIAttackerGoal _iter2981 : struct.AttackerGoals)
          {
            _iter2981.write(oprot);
          }
        }
      }
      if (struct.isSetActions()) {
        {
          oprot.writeI32(struct.Actions.size());
          for (TDDIActionRef _iter2982 : struct.Actions)
          {
            _iter2982.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIHuman struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list2983 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list2983.size);
          TDDIKeyValueMap _elem2984;
          for (int _i2985 = 0; _i2985 < _list2983.size; ++_i2985)
          {
            _elem2984 = new TDDIKeyValueMap();
            _elem2984.read(iprot);
            struct.KeyValueMaps.add(_elem2984);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.SkillLevel = iprot.readString();
        struct.setSkillLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Motivation = iprot.readString();
        struct.setMotivationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.AnonymityDesire = iprot.readString();
        struct.setAnonymityDesireIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list2986 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AttackerGoals = new java.util.ArrayList<TDDIAttackerGoal>(_list2986.size);
          TDDIAttackerGoal _elem2987;
          for (int _i2988 = 0; _i2988 < _list2986.size; ++_i2988)
          {
            _elem2987 = new TDDIAttackerGoal();
            _elem2987.read(iprot);
            struct.AttackerGoals.add(_elem2987);
          }
        }
        struct.setAttackerGoalsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list2989 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Actions = new java.util.ArrayList<TDDIActionRef>(_list2989.size);
          TDDIActionRef _elem2990;
          for (int _i2991 = 0; _i2991 < _list2989.size; ++_i2991)
          {
            _elem2990 = new TDDIActionRef();
            _elem2990.read(iprot);
            struct.Actions.add(_elem2990);
          }
        }
        struct.setActionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

