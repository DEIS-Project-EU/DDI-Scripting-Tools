/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-14")
public class TDDIAbstractStandard implements org.apache.thrift.TBase<TDDIAbstractStandard, TDDIAbstractStandard._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractStandard> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractStandard");

  private static final org.apache.thrift.protocol.TField USED_STANDARD_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedStandard", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_STANDARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedStandardType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractStandardStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractStandardTupleSchemeFactory();

  public TDDIStandardUnion UsedStandard; // required
  /**
   * 
   * @see TDDIStandardUnionType
   */
  public TDDIStandardUnionType UsedStandardType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_STANDARD((short)1, "UsedStandard"),
    /**
     * 
     * @see TDDIStandardUnionType
     */
    USED_STANDARD_TYPE((short)2, "UsedStandardType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_STANDARD
          return USED_STANDARD;
        case 2: // USED_STANDARD_TYPE
          return USED_STANDARD_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_STANDARD, new org.apache.thrift.meta_data.FieldMetaData("UsedStandard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIStandardUnion.class)));
    tmpMap.put(_Fields.USED_STANDARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedStandardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIStandardUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractStandard.class, metaDataMap);
  }

  public TDDIAbstractStandard() {
  }

  public TDDIAbstractStandard(
    TDDIStandardUnion UsedStandard,
    TDDIStandardUnionType UsedStandardType)
  {
    this();
    this.UsedStandard = UsedStandard;
    this.UsedStandardType = UsedStandardType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractStandard(TDDIAbstractStandard other) {
    if (other.isSetUsedStandard()) {
      this.UsedStandard = new TDDIStandardUnion(other.UsedStandard);
    }
    if (other.isSetUsedStandardType()) {
      this.UsedStandardType = other.UsedStandardType;
    }
  }

  public TDDIAbstractStandard deepCopy() {
    return new TDDIAbstractStandard(this);
  }

  @Override
  public void clear() {
    this.UsedStandard = null;
    this.UsedStandardType = null;
  }

  public TDDIStandardUnion getUsedStandard() {
    return this.UsedStandard;
  }

  public TDDIAbstractStandard setUsedStandard(TDDIStandardUnion UsedStandard) {
    this.UsedStandard = UsedStandard;
    return this;
  }

  public void unsetUsedStandard() {
    this.UsedStandard = null;
  }

  /** Returns true if field UsedStandard is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedStandard() {
    return this.UsedStandard != null;
  }

  public void setUsedStandardIsSet(boolean value) {
    if (!value) {
      this.UsedStandard = null;
    }
  }

  /**
   * 
   * @see TDDIStandardUnionType
   */
  public TDDIStandardUnionType getUsedStandardType() {
    return this.UsedStandardType;
  }

  /**
   * 
   * @see TDDIStandardUnionType
   */
  public TDDIAbstractStandard setUsedStandardType(TDDIStandardUnionType UsedStandardType) {
    this.UsedStandardType = UsedStandardType;
    return this;
  }

  public void unsetUsedStandardType() {
    this.UsedStandardType = null;
  }

  /** Returns true if field UsedStandardType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedStandardType() {
    return this.UsedStandardType != null;
  }

  public void setUsedStandardTypeIsSet(boolean value) {
    if (!value) {
      this.UsedStandardType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_STANDARD:
      if (value == null) {
        unsetUsedStandard();
      } else {
        setUsedStandard((TDDIStandardUnion)value);
      }
      break;

    case USED_STANDARD_TYPE:
      if (value == null) {
        unsetUsedStandardType();
      } else {
        setUsedStandardType((TDDIStandardUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_STANDARD:
      return getUsedStandard();

    case USED_STANDARD_TYPE:
      return getUsedStandardType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_STANDARD:
      return isSetUsedStandard();
    case USED_STANDARD_TYPE:
      return isSetUsedStandardType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractStandard)
      return this.equals((TDDIAbstractStandard)that);
    return false;
  }

  public boolean equals(TDDIAbstractStandard that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedStandard = true && this.isSetUsedStandard();
    boolean that_present_UsedStandard = true && that.isSetUsedStandard();
    if (this_present_UsedStandard || that_present_UsedStandard) {
      if (!(this_present_UsedStandard && that_present_UsedStandard))
        return false;
      if (!this.UsedStandard.equals(that.UsedStandard))
        return false;
    }

    boolean this_present_UsedStandardType = true && this.isSetUsedStandardType();
    boolean that_present_UsedStandardType = true && that.isSetUsedStandardType();
    if (this_present_UsedStandardType || that_present_UsedStandardType) {
      if (!(this_present_UsedStandardType && that_present_UsedStandardType))
        return false;
      if (!this.UsedStandardType.equals(that.UsedStandardType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedStandard()) ? 131071 : 524287);
    if (isSetUsedStandard())
      hashCode = hashCode * 8191 + UsedStandard.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedStandardType()) ? 131071 : 524287);
    if (isSetUsedStandardType())
      hashCode = hashCode * 8191 + UsedStandardType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractStandard other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedStandard()).compareTo(other.isSetUsedStandard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedStandard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedStandard, other.UsedStandard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedStandardType()).compareTo(other.isSetUsedStandardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedStandardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedStandardType, other.UsedStandardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractStandard(");
    boolean first = true;

    sb.append("UsedStandard:");
    if (this.UsedStandard == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedStandard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedStandardType:");
    if (this.UsedStandardType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedStandardType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractStandardStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractStandardStandardScheme getScheme() {
      return new TDDIAbstractStandardStandardScheme();
    }
  }

  private static class TDDIAbstractStandardStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractStandard> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractStandard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_STANDARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedStandard = new TDDIStandardUnion();
              struct.UsedStandard.read(iprot);
              struct.setUsedStandardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_STANDARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedStandardType = thriftContract.TDDIStandardUnionType.findByValue(iprot.readI32());
              struct.setUsedStandardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractStandard struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedStandard != null) {
        oprot.writeFieldBegin(USED_STANDARD_FIELD_DESC);
        struct.UsedStandard.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedStandardType != null) {
        oprot.writeFieldBegin(USED_STANDARD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedStandardType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractStandardTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractStandardTupleScheme getScheme() {
      return new TDDIAbstractStandardTupleScheme();
    }
  }

  private static class TDDIAbstractStandardTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractStandard> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractStandard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedStandard()) {
        optionals.set(0);
      }
      if (struct.isSetUsedStandardType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedStandard()) {
        struct.UsedStandard.write(oprot);
      }
      if (struct.isSetUsedStandardType()) {
        oprot.writeI32(struct.UsedStandardType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractStandard struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedStandard = new TDDIStandardUnion();
        struct.UsedStandard.read(iprot);
        struct.setUsedStandardIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedStandardType = thriftContract.TDDIStandardUnionType.findByValue(iprot.readI32());
        struct.setUsedStandardTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

