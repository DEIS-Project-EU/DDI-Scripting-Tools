/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-14")
public class TDDITransition implements org.apache.thrift.TBase<TDDITransition, TDDITransition._Fields>, java.io.Serializable, Cloneable, Comparable<TDDITransition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDITransition");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TRANSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("Transition", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TRANSITION_PROB_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("TransitionProbDistribution", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField FROM_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("FromStates", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TO_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("ToStates", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDITransitionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDITransitionTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public double Transition; // required
  public TDDIProbDist TransitionProbDistribution; // required
  public java.util.List<TDDIStateRef> FromStates; // required
  public java.util.List<TDDIStateRef> ToStates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    TRANSITION((short)5, "Transition"),
    TRANSITION_PROB_DISTRIBUTION((short)6, "TransitionProbDistribution"),
    FROM_STATES((short)7, "FromStates"),
    TO_STATES((short)8, "ToStates");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // TRANSITION
          return TRANSITION;
        case 6: // TRANSITION_PROB_DISTRIBUTION
          return TRANSITION_PROB_DISTRIBUTION;
        case 7: // FROM_STATES
          return FROM_STATES;
        case 8: // TO_STATES
          return TO_STATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TRANSITION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.TRANSITION, new org.apache.thrift.meta_data.FieldMetaData("Transition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRANSITION_PROB_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("TransitionProbDistribution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIProbDist.class)));
    tmpMap.put(_Fields.FROM_STATES, new org.apache.thrift.meta_data.FieldMetaData("FromStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIStateRef.class))));
    tmpMap.put(_Fields.TO_STATES, new org.apache.thrift.meta_data.FieldMetaData("ToStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIStateRef.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDITransition.class, metaDataMap);
  }

  public TDDITransition() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.FromStates = new java.util.ArrayList<TDDIStateRef>();

    this.ToStates = new java.util.ArrayList<TDDIStateRef>();

  }

  public TDDITransition(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    double Transition,
    TDDIProbDist TransitionProbDistribution,
    java.util.List<TDDIStateRef> FromStates,
    java.util.List<TDDIStateRef> ToStates)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.Transition = Transition;
    setTransitionIsSet(true);
    this.TransitionProbDistribution = TransitionProbDistribution;
    this.FromStates = FromStates;
    this.ToStates = ToStates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDITransition(TDDITransition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    this.Transition = other.Transition;
    if (other.isSetTransitionProbDistribution()) {
      this.TransitionProbDistribution = new TDDIProbDist(other.TransitionProbDistribution);
    }
    if (other.isSetFromStates()) {
      java.util.List<TDDIStateRef> __this__FromStates = new java.util.ArrayList<TDDIStateRef>(other.FromStates.size());
      for (TDDIStateRef other_element : other.FromStates) {
        __this__FromStates.add(new TDDIStateRef(other_element));
      }
      this.FromStates = __this__FromStates;
    }
    if (other.isSetToStates()) {
      java.util.List<TDDIStateRef> __this__ToStates = new java.util.ArrayList<TDDIStateRef>(other.ToStates.size());
      for (TDDIStateRef other_element : other.ToStates) {
        __this__ToStates.add(new TDDIStateRef(other_element));
      }
      this.ToStates = __this__ToStates;
    }
  }

  public TDDITransition deepCopy() {
    return new TDDITransition(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    setTransitionIsSet(false);
    this.Transition = 0.0;
    this.TransitionProbDistribution = null;
    this.FromStates = new java.util.ArrayList<TDDIStateRef>();

    this.ToStates = new java.util.ArrayList<TDDIStateRef>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDITransition setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDITransition setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDITransition setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDITransition setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public double getTransition() {
    return this.Transition;
  }

  public TDDITransition setTransition(double Transition) {
    this.Transition = Transition;
    setTransitionIsSet(true);
    return this;
  }

  public void unsetTransition() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSITION_ISSET_ID);
  }

  /** Returns true if field Transition is set (has been assigned a value) and false otherwise */
  public boolean isSetTransition() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSITION_ISSET_ID);
  }

  public void setTransitionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSITION_ISSET_ID, value);
  }

  public TDDIProbDist getTransitionProbDistribution() {
    return this.TransitionProbDistribution;
  }

  public TDDITransition setTransitionProbDistribution(TDDIProbDist TransitionProbDistribution) {
    this.TransitionProbDistribution = TransitionProbDistribution;
    return this;
  }

  public void unsetTransitionProbDistribution() {
    this.TransitionProbDistribution = null;
  }

  /** Returns true if field TransitionProbDistribution is set (has been assigned a value) and false otherwise */
  public boolean isSetTransitionProbDistribution() {
    return this.TransitionProbDistribution != null;
  }

  public void setTransitionProbDistributionIsSet(boolean value) {
    if (!value) {
      this.TransitionProbDistribution = null;
    }
  }

  public int getFromStatesSize() {
    return (this.FromStates == null) ? 0 : this.FromStates.size();
  }

  public java.util.Iterator<TDDIStateRef> getFromStatesIterator() {
    return (this.FromStates == null) ? null : this.FromStates.iterator();
  }

  public void addToFromStates(TDDIStateRef elem) {
    if (this.FromStates == null) {
      this.FromStates = new java.util.ArrayList<TDDIStateRef>();
    }
    this.FromStates.add(elem);
  }

  public java.util.List<TDDIStateRef> getFromStates() {
    return this.FromStates;
  }

  public TDDITransition setFromStates(java.util.List<TDDIStateRef> FromStates) {
    this.FromStates = FromStates;
    return this;
  }

  public void unsetFromStates() {
    this.FromStates = null;
  }

  /** Returns true if field FromStates is set (has been assigned a value) and false otherwise */
  public boolean isSetFromStates() {
    return this.FromStates != null;
  }

  public void setFromStatesIsSet(boolean value) {
    if (!value) {
      this.FromStates = null;
    }
  }

  public int getToStatesSize() {
    return (this.ToStates == null) ? 0 : this.ToStates.size();
  }

  public java.util.Iterator<TDDIStateRef> getToStatesIterator() {
    return (this.ToStates == null) ? null : this.ToStates.iterator();
  }

  public void addToToStates(TDDIStateRef elem) {
    if (this.ToStates == null) {
      this.ToStates = new java.util.ArrayList<TDDIStateRef>();
    }
    this.ToStates.add(elem);
  }

  public java.util.List<TDDIStateRef> getToStates() {
    return this.ToStates;
  }

  public TDDITransition setToStates(java.util.List<TDDIStateRef> ToStates) {
    this.ToStates = ToStates;
    return this;
  }

  public void unsetToStates() {
    this.ToStates = null;
  }

  /** Returns true if field ToStates is set (has been assigned a value) and false otherwise */
  public boolean isSetToStates() {
    return this.ToStates != null;
  }

  public void setToStatesIsSet(boolean value) {
    if (!value) {
      this.ToStates = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case TRANSITION:
      if (value == null) {
        unsetTransition();
      } else {
        setTransition((java.lang.Double)value);
      }
      break;

    case TRANSITION_PROB_DISTRIBUTION:
      if (value == null) {
        unsetTransitionProbDistribution();
      } else {
        setTransitionProbDistribution((TDDIProbDist)value);
      }
      break;

    case FROM_STATES:
      if (value == null) {
        unsetFromStates();
      } else {
        setFromStates((java.util.List<TDDIStateRef>)value);
      }
      break;

    case TO_STATES:
      if (value == null) {
        unsetToStates();
      } else {
        setToStates((java.util.List<TDDIStateRef>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case TRANSITION:
      return getTransition();

    case TRANSITION_PROB_DISTRIBUTION:
      return getTransitionProbDistribution();

    case FROM_STATES:
      return getFromStates();

    case TO_STATES:
      return getToStates();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case TRANSITION:
      return isSetTransition();
    case TRANSITION_PROB_DISTRIBUTION:
      return isSetTransitionProbDistribution();
    case FROM_STATES:
      return isSetFromStates();
    case TO_STATES:
      return isSetToStates();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDITransition)
      return this.equals((TDDITransition)that);
    return false;
  }

  public boolean equals(TDDITransition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_Transition = true;
    boolean that_present_Transition = true;
    if (this_present_Transition || that_present_Transition) {
      if (!(this_present_Transition && that_present_Transition))
        return false;
      if (this.Transition != that.Transition)
        return false;
    }

    boolean this_present_TransitionProbDistribution = true && this.isSetTransitionProbDistribution();
    boolean that_present_TransitionProbDistribution = true && that.isSetTransitionProbDistribution();
    if (this_present_TransitionProbDistribution || that_present_TransitionProbDistribution) {
      if (!(this_present_TransitionProbDistribution && that_present_TransitionProbDistribution))
        return false;
      if (!this.TransitionProbDistribution.equals(that.TransitionProbDistribution))
        return false;
    }

    boolean this_present_FromStates = true && this.isSetFromStates();
    boolean that_present_FromStates = true && that.isSetFromStates();
    if (this_present_FromStates || that_present_FromStates) {
      if (!(this_present_FromStates && that_present_FromStates))
        return false;
      if (!this.FromStates.equals(that.FromStates))
        return false;
    }

    boolean this_present_ToStates = true && this.isSetToStates();
    boolean that_present_ToStates = true && that.isSetToStates();
    if (this_present_ToStates || that_present_ToStates) {
      if (!(this_present_ToStates && that_present_ToStates))
        return false;
      if (!this.ToStates.equals(that.ToStates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Transition);

    hashCode = hashCode * 8191 + ((isSetTransitionProbDistribution()) ? 131071 : 524287);
    if (isSetTransitionProbDistribution())
      hashCode = hashCode * 8191 + TransitionProbDistribution.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromStates()) ? 131071 : 524287);
    if (isSetFromStates())
      hashCode = hashCode * 8191 + FromStates.hashCode();

    hashCode = hashCode * 8191 + ((isSetToStates()) ? 131071 : 524287);
    if (isSetToStates())
      hashCode = hashCode * 8191 + ToStates.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDITransition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTransition()).compareTo(other.isSetTransition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Transition, other.Transition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTransitionProbDistribution()).compareTo(other.isSetTransitionProbDistribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransitionProbDistribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TransitionProbDistribution, other.TransitionProbDistribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromStates()).compareTo(other.isSetFromStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FromStates, other.FromStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToStates()).compareTo(other.isSetToStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ToStates, other.ToStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDITransition(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Transition:");
    sb.append(this.Transition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TransitionProbDistribution:");
    if (this.TransitionProbDistribution == null) {
      sb.append("null");
    } else {
      sb.append(this.TransitionProbDistribution);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FromStates:");
    if (this.FromStates == null) {
      sb.append("null");
    } else {
      sb.append(this.FromStates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ToStates:");
    if (this.ToStates == null) {
      sb.append("null");
    } else {
      sb.append(this.ToStates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (TransitionProbDistribution != null) {
      TransitionProbDistribution.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDITransitionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDITransitionStandardScheme getScheme() {
      return new TDDITransitionStandardScheme();
    }
  }

  private static class TDDITransitionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDITransition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDITransition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1232 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list1232.size);
                TDDIKeyValueMap _elem1233;
                for (int _i1234 = 0; _i1234 < _list1232.size; ++_i1234)
                {
                  _elem1233 = new TDDIKeyValueMap();
                  _elem1233.read(iprot);
                  struct.KeyValueMaps.add(_elem1233);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRANSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Transition = iprot.readDouble();
              struct.setTransitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANSITION_PROB_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.TransitionProbDistribution = new TDDIProbDist();
              struct.TransitionProbDistribution.read(iprot);
              struct.setTransitionProbDistributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FROM_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1235 = iprot.readListBegin();
                struct.FromStates = new java.util.ArrayList<TDDIStateRef>(_list1235.size);
                TDDIStateRef _elem1236;
                for (int _i1237 = 0; _i1237 < _list1235.size; ++_i1237)
                {
                  _elem1236 = new TDDIStateRef();
                  _elem1236.read(iprot);
                  struct.FromStates.add(_elem1236);
                }
                iprot.readListEnd();
              }
              struct.setFromStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TO_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1238 = iprot.readListBegin();
                struct.ToStates = new java.util.ArrayList<TDDIStateRef>(_list1238.size);
                TDDIStateRef _elem1239;
                for (int _i1240 = 0; _i1240 < _list1238.size; ++_i1240)
                {
                  _elem1239 = new TDDIStateRef();
                  _elem1239.read(iprot);
                  struct.ToStates.add(_elem1239);
                }
                iprot.readListEnd();
              }
              struct.setToStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDITransition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter1241 : struct.KeyValueMaps)
          {
            _iter1241.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANSITION_FIELD_DESC);
      oprot.writeDouble(struct.Transition);
      oprot.writeFieldEnd();
      if (struct.TransitionProbDistribution != null) {
        oprot.writeFieldBegin(TRANSITION_PROB_DISTRIBUTION_FIELD_DESC);
        struct.TransitionProbDistribution.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.FromStates != null) {
        oprot.writeFieldBegin(FROM_STATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FromStates.size()));
          for (TDDIStateRef _iter1242 : struct.FromStates)
          {
            _iter1242.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ToStates != null) {
        oprot.writeFieldBegin(TO_STATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ToStates.size()));
          for (TDDIStateRef _iter1243 : struct.ToStates)
          {
            _iter1243.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDITransitionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDITransitionTupleScheme getScheme() {
      return new TDDITransitionTupleScheme();
    }
  }

  private static class TDDITransitionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDITransition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDITransition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetTransition()) {
        optionals.set(4);
      }
      if (struct.isSetTransitionProbDistribution()) {
        optionals.set(5);
      }
      if (struct.isSetFromStates()) {
        optionals.set(6);
      }
      if (struct.isSetToStates()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter1244 : struct.KeyValueMaps)
          {
            _iter1244.write(oprot);
          }
        }
      }
      if (struct.isSetTransition()) {
        oprot.writeDouble(struct.Transition);
      }
      if (struct.isSetTransitionProbDistribution()) {
        struct.TransitionProbDistribution.write(oprot);
      }
      if (struct.isSetFromStates()) {
        {
          oprot.writeI32(struct.FromStates.size());
          for (TDDIStateRef _iter1245 : struct.FromStates)
          {
            _iter1245.write(oprot);
          }
        }
      }
      if (struct.isSetToStates()) {
        {
          oprot.writeI32(struct.ToStates.size());
          for (TDDIStateRef _iter1246 : struct.ToStates)
          {
            _iter1246.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDITransition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list1247 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list1247.size);
          TDDIKeyValueMap _elem1248;
          for (int _i1249 = 0; _i1249 < _list1247.size; ++_i1249)
          {
            _elem1248 = new TDDIKeyValueMap();
            _elem1248.read(iprot);
            struct.KeyValueMaps.add(_elem1248);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Transition = iprot.readDouble();
        struct.setTransitionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.TransitionProbDistribution = new TDDIProbDist();
        struct.TransitionProbDistribution.read(iprot);
        struct.setTransitionProbDistributionIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list1250 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FromStates = new java.util.ArrayList<TDDIStateRef>(_list1250.size);
          TDDIStateRef _elem1251;
          for (int _i1252 = 0; _i1252 < _list1250.size; ++_i1252)
          {
            _elem1251 = new TDDIStateRef();
            _elem1251.read(iprot);
            struct.FromStates.add(_elem1251);
          }
        }
        struct.setFromStatesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list1253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ToStates = new java.util.ArrayList<TDDIStateRef>(_list1253.size);
          TDDIStateRef _elem1254;
          for (int _i1255 = 0; _i1255 < _list1253.size; ++_i1255)
          {
            _elem1254 = new TDDIStateRef();
            _elem1254.read(iprot);
            struct.ToStates.add(_elem1254);
          }
        }
        struct.setToStatesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

