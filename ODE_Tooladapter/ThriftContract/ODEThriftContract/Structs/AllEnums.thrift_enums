// Architecture //

enum TDDITimeUnit{
	TUMillisecond, 
	TUSecond, 
	TUMinute,
	TUHour, 
	TUDay,
	TUWeek,
	TUMonth,
	TUYear
}

enum TDDIArchitecturePackageUnionType{
	APUTArchitecturePackage,
	APUTArchitecturePackageInterface,
	APUTArchitecturePackageBinding
}

enum TDDIPortDirection{
	PDIN,
	PDOUT,
	PDINOUT
}

enum TDDISystemUnionType{
	SUTSystem, 
	SUTPhysicalComponent,
	SUTLogicalComponent,
	SUTSafetyRelatedSystem
}

enum TDDIFunctionUnionType{
	FUTFunction,
	FUTSafetyFunction
}

enum TDDIDesignArtifactUnionType{
	DAUTAbstractSystem,
	DAUTAbstractFunction,
	DAUTConfiguration,
	DAUTSignal,
	DAUTSystemBoundary,
	DAUTContext,
	DAUTLifecycleCondition,
	DAUTPort,
	DAUTPerfChars,
	DAUTAbstractArchitecturePackage
}

// End-Architecture //

// Base //

enum TDDIBaseElementUnionType {
	BEUTAbstractDesignArtifact,
    BEUTAbstractODEPackage,
    BEUTAbstractFailureAnalysisArtifact,
    BEUTAbstractDependabilityArtifact
}

// End-Base //

// Dependability //

enum TDDIDependabilityPackageUnionType{
    PUTDependabilityPackage,
    PUTDependabilityPackageInterface,
    PUTDependabilityPackageBinding
}

enum TDDIMeasureUnionType{
    MUTMeasure,
    MUTFaultToleranceMeasure
}

enum TDDIDependabilityArtifactUnionType{
    DAUTAbstractDependabilityPackage,
    DAUTAbstractMeasure,
    DAUTMeasureType,
    DAUTMaintenanceProcedure,
    DAUTAbstractDomainElement,
    DAUTAbstractRequirementArtifact,
    DAUTAbstractHARAArtifact
}

// End-Dependability //

// Domain //

enum TDDIAbstractDomainPackageType{
    ADPTDomainPackage,
    ADPTDomainPackageInterface,
    ADPTDomainPackageBinding
}


enum TDDIStandardUnionType{
    SUTStandard,
    SUTSafetyStandard
}


enum TDDIDomainElementUnionType{
    DEUTAbstractDomainPackage,
    DEUTAbstractStandard,
    DEUTAssuranceLevel
}

// End-Domain //

// FailureLogic //

enum TDDIFailureUnionType{
    FUTAbstractInterfaceFailure,
    FUTAbstractInternalFailure,
    FUTCCF
}

enum TDDIInterfaceFailureUnionType{
    IFUTOutputFailure,
    IFUTInputFailure
}

enum TDDIInternalFailureUnionType{
    IFUTInternalFailure,
    IFUTBasicEvent,
    IFUTFMEAFailure,
    IFUTFailState
}

enum TDDIFailureAnalysisArtifactUnionType{
    AAUTAbstractFailureLogicPackage,
    AAUTMinimalCutset,
    AAUTInterfaceFailurePropagation,
    AAUTAbstractFailure,
    AAUTFailureMode,
    AAUTProbabilityDistribution, 
    AAUTProbDistParam,
    AAUTAbstractFTAArtifact,
    AAUTAbstractFMEAArtifact,
    AAUTAbstractMarkovArtifact
}

enum TDDIFailureLogicPackageUnionType{
    FLPUTFailureLogicPackage,
    FLPUTFailureLogicPackageInterface,
    FLPUTFailureLogicPackageBinding,
    FLPUTAbstractFTAPackage,
    FLPUTAbstractFMEAPackage,
    FLPUTAbstractMarkovChainPackage
}

// End-FailureLogic

// FMEA //

enum TDDIFMEAPackageUnionType{
    FMEAPUTPackage,
    FMEAPUTPackageInterface,
    FMEAPUTPackageBinding,
    FMEAPUTBasicFMEAPackage,
    FMEAPUTFMEDAPackage
}

enum TDDIFMEAArtifactUnionType{
    FMEAAUTAbstractFMEAPropagation
}


enum TDDIFMEAPropagationUnionType{
    FMEAPUTPropagation,
    FMEAPUTDiagnosableFailurePropagation
}

// End-FMEA //

// FTA //

enum TDDIGateType{
    GTOR,
    GTAND,
    GTNOT,
    GTXOR,
    GTVOTE,
    GTPAND,
    GTPOR,
    GTSAND
}

enum TDDIFTAArtifactUnionType{
    FTAAUTInputEvent,
    FTAAUTOutputEvent,
    FTAAUTGate,
    FTAAUTPropagation
}

enum TDDIFTAPackageUnionType{
    FTAPUTPackage,
    FTAPUTPackageInterface,
    FTAPUTPackageBinding
}

// End-FTA //

// HARA //

enum TDDIRiskParameterUnionType{
    RPUTRiskParameter,
    RPUTSituation,
    RPUTAccident,
    RPUTOperationMeasure
}

enum TDDIHARAArtifactUnionType{
    HAUTAbstractHARAPackage,
    HAUTHazardTypeSystem,
    HAUTAbstractRiskParameter,
    HAUTRiskAssessment,
    HAUTHazardType,
    HAUTMalFunction,
    HAUTHazard
}

enum TDDIHARAPackageUnionType{
    HARAPUTPackage,
    HARAPUTPackageInterface,
    HARAPUTPackageBinding
}

// End-HARA //

// Integration //

enum TDDIODEPackageUnionType{
    OPUTODEPackage,
    OPUTODEPackageInterface,
    OPUTODEPackageBinding
}

// End-Integration //

// Markov

enum TDDIMarkovArtifactUnionType{
    MAUTTransition,
    MAUTState
}

enum TDDIMarkovChainPackageUnionType{
    MCPUTMarkovChainPackage,
    MCPUTMarkovChainPackageInterface,
    MCPUTMarkovChainPackageBinding
}
// End-Markov //

// Requirement //

enum TDDIRequirementPackageUnionType{
    RPUTRequirementPackage,
    RPUTRequirementPackageInterface,
    RPUTRequirementPackageBinding
}

enum TDDIRequirementSourceUnionType{
    RSUTLegalContract
}

enum TDDIDependabilityRequirementUnionType{
    DRUTSafetyRequirement
}

enum TDDIRequirementArtifactUnionType{
    RAUTAbstractRequirementPackage,
    RAUTAbstractRequirementSource,
    RAUTAbstractDependabilityRequirement
}

// End-Requirement //

// SACM_Argumentation //

enum TDDIAssertionDeclaration{
    ADAsserted,
    ADNeedsSupport,
    ADAssumed,
    ADAxiomatic,
    ADDefeated,
    ADAsCited
}

enum TDDIArgumentationElementUnionType{
    AEUTArgumentGroup,
    AEUTAbstractArgumentPackage,
    AEUTAbstractArgumentAsset
}

enum TDDIArgumentPackageUnionType{
    APUTArgumentPackage,
    APUTArgumentPackageInterface,
    APUTArgumentPackageBinding
}

enum TDDIArgumentAssetUnionType{
    AAUTAbstractAssertion,
    AAUTArgumentReasoning,
    AAUTArtifactReference
}

enum TDDIAssertionUnionType{
    AUTClaim,
    AUTAbstractAssertedRelationship
}

enum TDDIAssertedRelationshipUnionType{
    ARUTAssertedArtifactSupport,
    ARUTAssertedArtifactContext,
    ARUTAssertedInference,
    ARUTAssertedEvidence,
    ARUTAssertedContext
}

// End-SACM_Argumentation //

// SACM_Artifact //

enum TDDIArtifactPackageUnionType{
    APUTArtifactPackage,
    APUTArtifactPackageInterface,
    APUTArtifactPackageBinding
}

enum TDDIArtifactAssetUnionType{
    AAUTProperty,
    AAUTTechnique,
    AAUTParticipant,
    AAUTActivity,
    AAUTEvent,
    AAUTResource,
    AAUTArtifact,
    AAUTArtifactAssetRelationship
}

// End-SACM_Artifact //

// SACM_AssuranceCase //

enum TDDIAssuranceCasePackageUnionType{
    ACPUTAssuranceCasePackage,
    ACPUTAssuranceCasePackageInterface,
    ACPUTAssuranceCasePackageBinding
}

// End-SACM_AssuranceCase //

// SACM_Base //

enum TDDILangStringUnionType{
	LSUTLangString,
    LSUTExpressionLangString
}

enum TDDIUtilityElementUnionType{
    UEUTDescription,
    UEUTImplementationConstraint,
    UEUTNote,
    UEUTTaggedValue
}

enum TDDIArtifactElementUnionType{
    AEUTAbstractTerminologyElement,
    AEUTAbstractAssuranceCasePackage,
    AEUTAbstractArtifactPackage,
    AEUTArtifactGroup,
    AEUTAbstractArtifactAsset,
    AEUTAbstractArgumentationElement
}

enum TDDIModelElementUnionType{
    MEUTAbstractArtifactElement
}

enum TDDISACMElementUnionType{
    EUTAbstractUtilityElement,
    EUTAbstractModelElement
}

enum TDDIElementUnionType{
	EUTAbstractLangString,
    EUTMultiLangString,
    EUTAbstractSACMElement
}

// End-SACM_Base //

// SACM_Terminology //

enum TDDITerminologyElementUnionType{
	TEUTTerminologyGroup,
    TEUTAbstractTerminologyPackage,
    TEUTAbstractTerminologyAsset
}

enum TDDITerminologyPackageUnionType{
    TPUTTerminologyPackage,
    TPUTTerminologyPackageBinding,
    TPUTTerminologyPackageInterface
}

enum TDDIExpressionElementUnionType{
    EEUTExpression,
    EEUTTerm
}

enum TDDITerminologyAssetUnionType{
    TAUTCategory,
    TAUTAbstractExpressionElement
}

// End-SACM_Terminology //