/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mergedDDIThriftContract_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thriftContract {

int _kTDDITimeUnitValues[] = {
  TUMillisecond,
  TUSecond,
  TUMinute,
  TUHour,
  TUDay,
  TUWeek,
  TUMonth,
  TUYear
};
const char* _kTDDITimeUnitNames[] = {
  "TUMillisecond",
  "TUSecond",
  "TUMinute",
  "TUHour",
  "TUDay",
  "TUWeek",
  "TUMonth",
  "TUYear"
};
const std::map<int, const char*> _TDDITimeUnit_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTDDITimeUnitValues, _kTDDITimeUnitNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDITimeUnit val) {
  std::map<int, const char*>::const_iterator it = _TDDITimeUnit_VALUES_TO_NAMES.find(val);
  if (it != _TDDITimeUnit_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArchitecturePackageUnionTypeValues[] = {
  APUTArchitecturePackage,
  APUTArchitecturePackageInterface,
  APUTArchitecturePackageBinding
};
const char* _kTDDIArchitecturePackageUnionTypeNames[] = {
  "APUTArchitecturePackage",
  "APUTArchitecturePackageInterface",
  "APUTArchitecturePackageBinding"
};
const std::map<int, const char*> _TDDIArchitecturePackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArchitecturePackageUnionTypeValues, _kTDDIArchitecturePackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArchitecturePackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArchitecturePackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIPortDirectionValues[] = {
  PDIN,
  PDOUT,
  PDINOUT
};
const char* _kTDDIPortDirectionNames[] = {
  "PDIN",
  "PDOUT",
  "PDINOUT"
};
const std::map<int, const char*> _TDDIPortDirection_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIPortDirectionValues, _kTDDIPortDirectionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIPortDirection val) {
  std::map<int, const char*>::const_iterator it = _TDDIPortDirection_VALUES_TO_NAMES.find(val);
  if (it != _TDDIPortDirection_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDISystemUnionTypeValues[] = {
  SUTSystem,
  SUTPhysicalComponent,
  SUTLogicalComponent,
  SUTSafetyRelatedSystem
};
const char* _kTDDISystemUnionTypeNames[] = {
  "SUTSystem",
  "SUTPhysicalComponent",
  "SUTLogicalComponent",
  "SUTSafetyRelatedSystem"
};
const std::map<int, const char*> _TDDISystemUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDISystemUnionTypeValues, _kTDDISystemUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDISystemUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDISystemUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDISystemUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFunctionUnionTypeValues[] = {
  FUTFunction,
  FUTSafetyFunction
};
const char* _kTDDIFunctionUnionTypeNames[] = {
  "FUTFunction",
  "FUTSafetyFunction"
};
const std::map<int, const char*> _TDDIFunctionUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIFunctionUnionTypeValues, _kTDDIFunctionUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFunctionUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFunctionUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFunctionUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIDesignArtifactUnionTypeValues[] = {
  DAUTAbstractSystem,
  DAUTAbstractFunction,
  DAUTConfiguration,
  DAUTSignal,
  DAUTSystemBoundary,
  DAUTContext,
  DAUTLifecycleCondition,
  DAUTPort,
  DAUTPerfChars,
  DAUTAbstractArchitecturePackage
};
const char* _kTDDIDesignArtifactUnionTypeNames[] = {
  "DAUTAbstractSystem",
  "DAUTAbstractFunction",
  "DAUTConfiguration",
  "DAUTSignal",
  "DAUTSystemBoundary",
  "DAUTContext",
  "DAUTLifecycleCondition",
  "DAUTPort",
  "DAUTPerfChars",
  "DAUTAbstractArchitecturePackage"
};
const std::map<int, const char*> _TDDIDesignArtifactUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kTDDIDesignArtifactUnionTypeValues, _kTDDIDesignArtifactUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIDesignArtifactUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIDesignArtifactUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIDesignArtifactUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIBaseElementUnionTypeValues[] = {
  BEUTAbstractDesignArtifact,
  BEUTAbstractODEPackage,
  BEUTAbstractFailureAnalysisArtifact,
  BEUTAbstractDependabilityArtifact
};
const char* _kTDDIBaseElementUnionTypeNames[] = {
  "BEUTAbstractDesignArtifact",
  "BEUTAbstractODEPackage",
  "BEUTAbstractFailureAnalysisArtifact",
  "BEUTAbstractDependabilityArtifact"
};
const std::map<int, const char*> _TDDIBaseElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDIBaseElementUnionTypeValues, _kTDDIBaseElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIBaseElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIBaseElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIBaseElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIDependabilityPackageUnionTypeValues[] = {
  PUTDependabilityPackage,
  PUTDependabilityPackageInterface,
  PUTDependabilityPackageBinding
};
const char* _kTDDIDependabilityPackageUnionTypeNames[] = {
  "PUTDependabilityPackage",
  "PUTDependabilityPackageInterface",
  "PUTDependabilityPackageBinding"
};
const std::map<int, const char*> _TDDIDependabilityPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIDependabilityPackageUnionTypeValues, _kTDDIDependabilityPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIDependabilityPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIDependabilityPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIMeasureUnionTypeValues[] = {
  MUTMeasure,
  MUTFaultToleranceMeasure
};
const char* _kTDDIMeasureUnionTypeNames[] = {
  "MUTMeasure",
  "MUTFaultToleranceMeasure"
};
const std::map<int, const char*> _TDDIMeasureUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIMeasureUnionTypeValues, _kTDDIMeasureUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIMeasureUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIMeasureUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIMeasureUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIDependabilityArtifactUnionTypeValues[] = {
  DAUTAbstractDependabilityPackage,
  DAUTAbstractMeasure,
  DAUTMeasureType,
  DAUTMaintenanceProcedure,
  DAUTAbstractDomainElement,
  DAUTAbstractRequirementArtifact,
  DAUTAbstractHARAArtifact
};
const char* _kTDDIDependabilityArtifactUnionTypeNames[] = {
  "DAUTAbstractDependabilityPackage",
  "DAUTAbstractMeasure",
  "DAUTMeasureType",
  "DAUTMaintenanceProcedure",
  "DAUTAbstractDomainElement",
  "DAUTAbstractRequirementArtifact",
  "DAUTAbstractHARAArtifact"
};
const std::map<int, const char*> _TDDIDependabilityArtifactUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTDDIDependabilityArtifactUnionTypeValues, _kTDDIDependabilityArtifactUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityArtifactUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIDependabilityArtifactUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIDependabilityArtifactUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAbstractDomainPackageTypeValues[] = {
  ADPTDomainPackage,
  ADPTDomainPackageInterface,
  ADPTDomainPackageBinding
};
const char* _kTDDIAbstractDomainPackageTypeNames[] = {
  "ADPTDomainPackage",
  "ADPTDomainPackageInterface",
  "ADPTDomainPackageBinding"
};
const std::map<int, const char*> _TDDIAbstractDomainPackageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIAbstractDomainPackageTypeValues, _kTDDIAbstractDomainPackageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainPackageType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAbstractDomainPackageType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAbstractDomainPackageType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIStandardUnionTypeValues[] = {
  SUTStandard,
  SUTSafetyStandard
};
const char* _kTDDIStandardUnionTypeNames[] = {
  "SUTStandard",
  "SUTSafetyStandard"
};
const std::map<int, const char*> _TDDIStandardUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIStandardUnionTypeValues, _kTDDIStandardUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIStandardUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIStandardUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIStandardUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIDomainElementUnionTypeValues[] = {
  DEUTAbstractDomainPackage,
  DEUTAbstractStandard,
  DEUTAssuranceLevel
};
const char* _kTDDIDomainElementUnionTypeNames[] = {
  "DEUTAbstractDomainPackage",
  "DEUTAbstractStandard",
  "DEUTAssuranceLevel"
};
const std::map<int, const char*> _TDDIDomainElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIDomainElementUnionTypeValues, _kTDDIDomainElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIDomainElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIDomainElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIDomainElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFailureUnionTypeValues[] = {
  FUTAbstractInterfaceFailure,
  FUTAbstractInternalFailure,
  FUTCCF
};
const char* _kTDDIFailureUnionTypeNames[] = {
  "FUTAbstractInterfaceFailure",
  "FUTAbstractInternalFailure",
  "FUTCCF"
};
const std::map<int, const char*> _TDDIFailureUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIFailureUnionTypeValues, _kTDDIFailureUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFailureUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFailureUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFailureUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIInterfaceFailureUnionTypeValues[] = {
  IFUTOutputFailure,
  IFUTInputFailure
};
const char* _kTDDIInterfaceFailureUnionTypeNames[] = {
  "IFUTOutputFailure",
  "IFUTInputFailure"
};
const std::map<int, const char*> _TDDIInterfaceFailureUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIInterfaceFailureUnionTypeValues, _kTDDIInterfaceFailureUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIInterfaceFailureUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIInterfaceFailureUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIInterfaceFailureUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIInternalFailureUnionTypeValues[] = {
  IFUTInternalFailure,
  IFUTBasicEvent,
  IFUTFMEAFailure,
  IFUTFailState
};
const char* _kTDDIInternalFailureUnionTypeNames[] = {
  "IFUTInternalFailure",
  "IFUTBasicEvent",
  "IFUTFMEAFailure",
  "IFUTFailState"
};
const std::map<int, const char*> _TDDIInternalFailureUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDIInternalFailureUnionTypeValues, _kTDDIInternalFailureUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIInternalFailureUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIInternalFailureUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIInternalFailureUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFailureAnalysisArtifactUnionTypeValues[] = {
  AAUTAbstractFailureLogicPackage,
  AAUTMinimalCutset,
  AAUTInterfaceFailurePropagation,
  AAUTAbstractFailure,
  AAUTFailureMode,
  AAUTProbabilityDistribution,
  AAUTProbDistParam,
  AAUTAbstractFTAArtifact,
  AAUTAbstractFMEAArtifact,
  AAUTAbstractMarkovArtifact
};
const char* _kTDDIFailureAnalysisArtifactUnionTypeNames[] = {
  "AAUTAbstractFailureLogicPackage",
  "AAUTMinimalCutset",
  "AAUTInterfaceFailurePropagation",
  "AAUTAbstractFailure",
  "AAUTFailureMode",
  "AAUTProbabilityDistribution",
  "AAUTProbDistParam",
  "AAUTAbstractFTAArtifact",
  "AAUTAbstractFMEAArtifact",
  "AAUTAbstractMarkovArtifact"
};
const std::map<int, const char*> _TDDIFailureAnalysisArtifactUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kTDDIFailureAnalysisArtifactUnionTypeValues, _kTDDIFailureAnalysisArtifactUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFailureAnalysisArtifactUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFailureAnalysisArtifactUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFailureAnalysisArtifactUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFailureLogicPackageUnionTypeValues[] = {
  FLPUTFailureLogicPackage,
  FLPUTFailureLogicPackageInterface,
  FLPUTFailureLogicPackageBinding,
  FLPUTAbstractFTAPackage,
  FLPUTAbstractFMEAPackage,
  FLPUTAbstractMarkovChainPackage
};
const char* _kTDDIFailureLogicPackageUnionTypeNames[] = {
  "FLPUTFailureLogicPackage",
  "FLPUTFailureLogicPackageInterface",
  "FLPUTFailureLogicPackageBinding",
  "FLPUTAbstractFTAPackage",
  "FLPUTAbstractFMEAPackage",
  "FLPUTAbstractMarkovChainPackage"
};
const std::map<int, const char*> _TDDIFailureLogicPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTDDIFailureLogicPackageUnionTypeValues, _kTDDIFailureLogicPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFailureLogicPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFailureLogicPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFMEAPackageUnionTypeValues[] = {
  FMEAPUTPackage,
  FMEAPUTPackageInterface,
  FMEAPUTPackageBinding,
  FMEAPUTBasicFMEAPackage,
  FMEAPUTFMEDAPackage
};
const char* _kTDDIFMEAPackageUnionTypeNames[] = {
  "FMEAPUTPackage",
  "FMEAPUTPackageInterface",
  "FMEAPUTPackageBinding",
  "FMEAPUTBasicFMEAPackage",
  "FMEAPUTFMEDAPackage"
};
const std::map<int, const char*> _TDDIFMEAPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTDDIFMEAPackageUnionTypeValues, _kTDDIFMEAPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFMEAPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFMEAPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFMEAArtifactUnionTypeValues[] = {
  FMEAAUTAbstractFMEAPropagation
};
const char* _kTDDIFMEAArtifactUnionTypeNames[] = {
  "FMEAAUTAbstractFMEAPropagation"
};
const std::map<int, const char*> _TDDIFMEAArtifactUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTDDIFMEAArtifactUnionTypeValues, _kTDDIFMEAArtifactUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFMEAArtifactUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFMEAArtifactUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFMEAArtifactUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFMEAPropagationUnionTypeValues[] = {
  FMEAPUTPropagation,
  FMEAPUTDiagnosableFailurePropagation
};
const char* _kTDDIFMEAPropagationUnionTypeNames[] = {
  "FMEAPUTPropagation",
  "FMEAPUTDiagnosableFailurePropagation"
};
const std::map<int, const char*> _TDDIFMEAPropagationUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIFMEAPropagationUnionTypeValues, _kTDDIFMEAPropagationUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPropagationUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFMEAPropagationUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFMEAPropagationUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIGateTypeValues[] = {
  GTOR,
  GTAND,
  GTNOT,
  GTXOR,
  GTVOTE,
  GTPAND,
  GTPOR,
  GTSAND
};
const char* _kTDDIGateTypeNames[] = {
  "GTOR",
  "GTAND",
  "GTNOT",
  "GTXOR",
  "GTVOTE",
  "GTPAND",
  "GTPOR",
  "GTSAND"
};
const std::map<int, const char*> _TDDIGateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTDDIGateTypeValues, _kTDDIGateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIGateType val) {
  std::map<int, const char*>::const_iterator it = _TDDIGateType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIGateType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFTAArtifactUnionTypeValues[] = {
  FTAAUTInputEvent,
  FTAAUTOutputEvent,
  FTAAUTGate,
  FTAAUTPropagation
};
const char* _kTDDIFTAArtifactUnionTypeNames[] = {
  "FTAAUTInputEvent",
  "FTAAUTOutputEvent",
  "FTAAUTGate",
  "FTAAUTPropagation"
};
const std::map<int, const char*> _TDDIFTAArtifactUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDIFTAArtifactUnionTypeValues, _kTDDIFTAArtifactUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFTAArtifactUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFTAArtifactUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFTAArtifactUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFTAPackageUnionTypeValues[] = {
  FTAPUTPackage,
  FTAPUTPackageInterface,
  FTAPUTPackageBinding
};
const char* _kTDDIFTAPackageUnionTypeNames[] = {
  "FTAPUTPackage",
  "FTAPUTPackageInterface",
  "FTAPUTPackageBinding"
};
const std::map<int, const char*> _TDDIFTAPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIFTAPackageUnionTypeValues, _kTDDIFTAPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFTAPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFTAPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFTAPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIRiskParameterUnionTypeValues[] = {
  RPUTRiskParameter,
  RPUTSituation,
  RPUTAccident,
  RPUTOperationMeasure
};
const char* _kTDDIRiskParameterUnionTypeNames[] = {
  "RPUTRiskParameter",
  "RPUTSituation",
  "RPUTAccident",
  "RPUTOperationMeasure"
};
const std::map<int, const char*> _TDDIRiskParameterUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDIRiskParameterUnionTypeValues, _kTDDIRiskParameterUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIRiskParameterUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIRiskParameterUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIRiskParameterUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIHARAArtifactUnionTypeValues[] = {
  HAUTAbstractHARAPackage,
  HAUTHazardTypeSystem,
  HAUTAbstractRiskParameter,
  HAUTRiskAssessment,
  HAUTHazardType,
  HAUTMalFunction,
  HAUTHazard
};
const char* _kTDDIHARAArtifactUnionTypeNames[] = {
  "HAUTAbstractHARAPackage",
  "HAUTHazardTypeSystem",
  "HAUTAbstractRiskParameter",
  "HAUTRiskAssessment",
  "HAUTHazardType",
  "HAUTMalFunction",
  "HAUTHazard"
};
const std::map<int, const char*> _TDDIHARAArtifactUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTDDIHARAArtifactUnionTypeValues, _kTDDIHARAArtifactUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIHARAArtifactUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIHARAArtifactUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIHARAArtifactUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIHARAPackageUnionTypeValues[] = {
  HARAPUTPackage,
  HARAPUTPackageInterface,
  HARAPUTPackageBinding
};
const char* _kTDDIHARAPackageUnionTypeNames[] = {
  "HARAPUTPackage",
  "HARAPUTPackageInterface",
  "HARAPUTPackageBinding"
};
const std::map<int, const char*> _TDDIHARAPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIHARAPackageUnionTypeValues, _kTDDIHARAPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIHARAPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIHARAPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIHARAPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIODEPackageUnionTypeValues[] = {
  OPUTODEPackage,
  OPUTODEPackageInterface,
  OPUTODEPackageBinding
};
const char* _kTDDIODEPackageUnionTypeNames[] = {
  "OPUTODEPackage",
  "OPUTODEPackageInterface",
  "OPUTODEPackageBinding"
};
const std::map<int, const char*> _TDDIODEPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIODEPackageUnionTypeValues, _kTDDIODEPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIODEPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIODEPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIODEPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIMarkovArtifactUnionTypeValues[] = {
  MAUTTransition,
  MAUTState
};
const char* _kTDDIMarkovArtifactUnionTypeNames[] = {
  "MAUTTransition",
  "MAUTState"
};
const std::map<int, const char*> _TDDIMarkovArtifactUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIMarkovArtifactUnionTypeValues, _kTDDIMarkovArtifactUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIMarkovArtifactUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIMarkovArtifactUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIMarkovArtifactUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIMarkovChainPackageUnionTypeValues[] = {
  MCPUTMarkovChainPackage,
  MCPUTMarkovChainPackageInterface,
  MCPUTMarkovChainPackageBinding
};
const char* _kTDDIMarkovChainPackageUnionTypeNames[] = {
  "MCPUTMarkovChainPackage",
  "MCPUTMarkovChainPackageInterface",
  "MCPUTMarkovChainPackageBinding"
};
const std::map<int, const char*> _TDDIMarkovChainPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIMarkovChainPackageUnionTypeValues, _kTDDIMarkovChainPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIMarkovChainPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIMarkovChainPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIRequirementPackageUnionTypeValues[] = {
  RPUTRequirementPackage,
  RPUTRequirementPackageInterface,
  RPUTRequirementPackageBinding
};
const char* _kTDDIRequirementPackageUnionTypeNames[] = {
  "RPUTRequirementPackage",
  "RPUTRequirementPackageInterface",
  "RPUTRequirementPackageBinding"
};
const std::map<int, const char*> _TDDIRequirementPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIRequirementPackageUnionTypeValues, _kTDDIRequirementPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIRequirementPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIRequirementPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIRequirementSourceUnionTypeValues[] = {
  RSUTLegalContract
};
const char* _kTDDIRequirementSourceUnionTypeNames[] = {
  "RSUTLegalContract"
};
const std::map<int, const char*> _TDDIRequirementSourceUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTDDIRequirementSourceUnionTypeValues, _kTDDIRequirementSourceUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIRequirementSourceUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIRequirementSourceUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIRequirementSourceUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIDependabilityRequirementUnionTypeValues[] = {
  DRUTSafetyRequirement
};
const char* _kTDDIDependabilityRequirementUnionTypeNames[] = {
  "DRUTSafetyRequirement"
};
const std::map<int, const char*> _TDDIDependabilityRequirementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTDDIDependabilityRequirementUnionTypeValues, _kTDDIDependabilityRequirementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityRequirementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIDependabilityRequirementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIDependabilityRequirementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIRequirementArtifactUnionTypeValues[] = {
  RAUTAbstractRequirementPackage,
  RAUTAbstractRequirementSource,
  RAUTAbstractDependabilityRequirement
};
const char* _kTDDIRequirementArtifactUnionTypeNames[] = {
  "RAUTAbstractRequirementPackage",
  "RAUTAbstractRequirementSource",
  "RAUTAbstractDependabilityRequirement"
};
const std::map<int, const char*> _TDDIRequirementArtifactUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIRequirementArtifactUnionTypeValues, _kTDDIRequirementArtifactUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIRequirementArtifactUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIRequirementArtifactUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIRequirementArtifactUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAssertionDeclarationValues[] = {
  ADAsserted,
  ADNeedsSupport,
  ADAssumed,
  ADAxiomatic,
  ADDefeated,
  ADAsCited
};
const char* _kTDDIAssertionDeclarationNames[] = {
  "ADAsserted",
  "ADNeedsSupport",
  "ADAssumed",
  "ADAxiomatic",
  "ADDefeated",
  "ADAsCited"
};
const std::map<int, const char*> _TDDIAssertionDeclaration_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTDDIAssertionDeclarationValues, _kTDDIAssertionDeclarationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAssertionDeclaration val) {
  std::map<int, const char*>::const_iterator it = _TDDIAssertionDeclaration_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAssertionDeclaration_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArgumentationElementUnionTypeValues[] = {
  AEUTArgumentGroup,
  AEUTAbstractArgumentPackage,
  AEUTAbstractArgumentAsset
};
const char* _kTDDIArgumentationElementUnionTypeNames[] = {
  "AEUTArgumentGroup",
  "AEUTAbstractArgumentPackage",
  "AEUTAbstractArgumentAsset"
};
const std::map<int, const char*> _TDDIArgumentationElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArgumentationElementUnionTypeValues, _kTDDIArgumentationElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArgumentationElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArgumentationElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArgumentationElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArgumentPackageUnionTypeValues[] = {
  APUTArgumentPackage,
  APUTArgumentPackageInterface,
  APUTArgumentPackageBinding
};
const char* _kTDDIArgumentPackageUnionTypeNames[] = {
  "APUTArgumentPackage",
  "APUTArgumentPackageInterface",
  "APUTArgumentPackageBinding"
};
const std::map<int, const char*> _TDDIArgumentPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArgumentPackageUnionTypeValues, _kTDDIArgumentPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArgumentPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArgumentPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArgumentAssetUnionTypeValues[] = {
  AAUTAbstractAssertion,
  AAUTArgumentReasoning,
  AAUTArtifactReference
};
const char* _kTDDIArgumentAssetUnionTypeNames[] = {
  "AAUTAbstractAssertion",
  "AAUTArgumentReasoning",
  "AAUTArtifactReference"
};
const std::map<int, const char*> _TDDIArgumentAssetUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArgumentAssetUnionTypeValues, _kTDDIArgumentAssetUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArgumentAssetUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArgumentAssetUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArgumentAssetUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAssertionUnionTypeValues[] = {
  AUTClaim,
  AUTAbstractAssertedRelationship
};
const char* _kTDDIAssertionUnionTypeNames[] = {
  "AUTClaim",
  "AUTAbstractAssertedRelationship"
};
const std::map<int, const char*> _TDDIAssertionUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIAssertionUnionTypeValues, _kTDDIAssertionUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAssertionUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAssertionUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAssertionUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAssertedRelationshipUnionTypeValues[] = {
  ARUTAssertedArtifactSupport,
  ARUTAssertedArtifactContext,
  ARUTAssertedInference,
  ARUTAssertedEvidence,
  ARUTAssertedContext
};
const char* _kTDDIAssertedRelationshipUnionTypeNames[] = {
  "ARUTAssertedArtifactSupport",
  "ARUTAssertedArtifactContext",
  "ARUTAssertedInference",
  "ARUTAssertedEvidence",
  "ARUTAssertedContext"
};
const std::map<int, const char*> _TDDIAssertedRelationshipUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTDDIAssertedRelationshipUnionTypeValues, _kTDDIAssertedRelationshipUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAssertedRelationshipUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAssertedRelationshipUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAssertedRelationshipUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArtifactPackageUnionTypeValues[] = {
  APUTArtifactPackage,
  APUTArtifactPackageInterface,
  APUTArtifactPackageBinding
};
const char* _kTDDIArtifactPackageUnionTypeNames[] = {
  "APUTArtifactPackage",
  "APUTArtifactPackageInterface",
  "APUTArtifactPackageBinding"
};
const std::map<int, const char*> _TDDIArtifactPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArtifactPackageUnionTypeValues, _kTDDIArtifactPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArtifactPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArtifactPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArtifactAssetUnionTypeValues[] = {
  AAUTProperty,
  AAUTTechnique,
  AAUTParticipant,
  AAUTActivity,
  AAUTEvent,
  AAUTResource,
  AAUTArtifact,
  AAUTArtifactAssetRelationship
};
const char* _kTDDIArtifactAssetUnionTypeNames[] = {
  "AAUTProperty",
  "AAUTTechnique",
  "AAUTParticipant",
  "AAUTActivity",
  "AAUTEvent",
  "AAUTResource",
  "AAUTArtifact",
  "AAUTArtifactAssetRelationship"
};
const std::map<int, const char*> _TDDIArtifactAssetUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTDDIArtifactAssetUnionTypeValues, _kTDDIArtifactAssetUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArtifactAssetUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArtifactAssetUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAssuranceCasePackageUnionTypeValues[] = {
  ACPUTAssuranceCasePackage,
  ACPUTAssuranceCasePackageInterface,
  ACPUTAssuranceCasePackageBinding
};
const char* _kTDDIAssuranceCasePackageUnionTypeNames[] = {
  "ACPUTAssuranceCasePackage",
  "ACPUTAssuranceCasePackageInterface",
  "ACPUTAssuranceCasePackageBinding"
};
const std::map<int, const char*> _TDDIAssuranceCasePackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIAssuranceCasePackageUnionTypeValues, _kTDDIAssuranceCasePackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAssuranceCasePackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAssuranceCasePackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDILangStringUnionTypeValues[] = {
  LSUTLangString,
  LSUTExpressionLangString
};
const char* _kTDDILangStringUnionTypeNames[] = {
  "LSUTLangString",
  "LSUTExpressionLangString"
};
const std::map<int, const char*> _TDDILangStringUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDILangStringUnionTypeValues, _kTDDILangStringUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDILangStringUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDILangStringUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDILangStringUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIUtilityElementUnionTypeValues[] = {
  UEUTDescription,
  UEUTImplementationConstraint,
  UEUTNote,
  UEUTTaggedValue
};
const char* _kTDDIUtilityElementUnionTypeNames[] = {
  "UEUTDescription",
  "UEUTImplementationConstraint",
  "UEUTNote",
  "UEUTTaggedValue"
};
const std::map<int, const char*> _TDDIUtilityElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDIUtilityElementUnionTypeValues, _kTDDIUtilityElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIUtilityElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIUtilityElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIUtilityElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArtifactElementUnionTypeValues[] = {
  AEUTAbstractTerminologyElement,
  AEUTAbstractAssuranceCasePackage,
  AEUTAbstractArtifactPackage,
  AEUTArtifactGroup,
  AEUTAbstractArtifactAsset,
  AEUTAbstractArgumentationElement
};
const char* _kTDDIArtifactElementUnionTypeNames[] = {
  "AEUTAbstractTerminologyElement",
  "AEUTAbstractAssuranceCasePackage",
  "AEUTAbstractArtifactPackage",
  "AEUTArtifactGroup",
  "AEUTAbstractArtifactAsset",
  "AEUTAbstractArgumentationElement"
};
const std::map<int, const char*> _TDDIArtifactElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTDDIArtifactElementUnionTypeValues, _kTDDIArtifactElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArtifactElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArtifactElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArtifactElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIModelElementUnionTypeValues[] = {
  MEUTAbstractArtifactElement
};
const char* _kTDDIModelElementUnionTypeNames[] = {
  "MEUTAbstractArtifactElement"
};
const std::map<int, const char*> _TDDIModelElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTDDIModelElementUnionTypeValues, _kTDDIModelElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIModelElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIModelElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIModelElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDISACMElementUnionTypeValues[] = {
  EUTAbstractUtilityElement,
  EUTAbstractModelElement
};
const char* _kTDDISACMElementUnionTypeNames[] = {
  "EUTAbstractUtilityElement",
  "EUTAbstractModelElement"
};
const std::map<int, const char*> _TDDISACMElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDISACMElementUnionTypeValues, _kTDDISACMElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDISACMElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDISACMElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDISACMElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIElementUnionTypeValues[] = {
  EUTAbstractLangString,
  EUTMultiLangString,
  EUTAbstractSACMElement
};
const char* _kTDDIElementUnionTypeNames[] = {
  "EUTAbstractLangString",
  "EUTMultiLangString",
  "EUTAbstractSACMElement"
};
const std::map<int, const char*> _TDDIElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIElementUnionTypeValues, _kTDDIElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDITerminologyElementUnionTypeValues[] = {
  TEUTTerminologyGroup,
  TEUTAbstractTerminologyPackage,
  TEUTAbstractTerminologyAsset
};
const char* _kTDDITerminologyElementUnionTypeNames[] = {
  "TEUTTerminologyGroup",
  "TEUTAbstractTerminologyPackage",
  "TEUTAbstractTerminologyAsset"
};
const std::map<int, const char*> _TDDITerminologyElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDITerminologyElementUnionTypeValues, _kTDDITerminologyElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDITerminologyElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDITerminologyElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDITerminologyElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDITerminologyPackageUnionTypeValues[] = {
  TPUTTerminologyPackage,
  TPUTTerminologyPackageBinding,
  TPUTTerminologyPackageInterface
};
const char* _kTDDITerminologyPackageUnionTypeNames[] = {
  "TPUTTerminologyPackage",
  "TPUTTerminologyPackageBinding",
  "TPUTTerminologyPackageInterface"
};
const std::map<int, const char*> _TDDITerminologyPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDITerminologyPackageUnionTypeValues, _kTDDITerminologyPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDITerminologyPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDITerminologyPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIExpressionElementUnionTypeValues[] = {
  EEUTExpression,
  EEUTTerm
};
const char* _kTDDIExpressionElementUnionTypeNames[] = {
  "EEUTExpression",
  "EEUTTerm"
};
const std::map<int, const char*> _TDDIExpressionElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIExpressionElementUnionTypeValues, _kTDDIExpressionElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIExpressionElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIExpressionElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIExpressionElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDITerminologyAssetUnionTypeValues[] = {
  TAUTCategory,
  TAUTAbstractExpressionElement
};
const char* _kTDDITerminologyAssetUnionTypeNames[] = {
  "TAUTCategory",
  "TAUTAbstractExpressionElement"
};
const std::map<int, const char*> _TDDITerminologyAssetUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDITerminologyAssetUnionTypeValues, _kTDDITerminologyAssetUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDITerminologyAssetUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDITerminologyAssetUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDITerminologyAssetUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TDDIKeyValueMapRef::~TDDIKeyValueMapRef() throw() {
}


void TDDIKeyValueMapRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIKeyValueMap> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIKeyValueMapRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIKeyValueMapRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIKeyValueMap>(new TDDIKeyValueMap);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Key) { wasSet = true; }
          if (this->ref->__isset.Values) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIKeyValueMapRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIKeyValueMapRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIKeyValueMap"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIKeyValueMapRef &a, TDDIKeyValueMapRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIKeyValueMapRef::TDDIKeyValueMapRef(const TDDIKeyValueMapRef& other0) {
  ref = other0.ref;
  __isset = other0.__isset;
}
TDDIKeyValueMapRef& TDDIKeyValueMapRef::operator=(const TDDIKeyValueMapRef& other1) {
  ref = other1.ref;
  __isset = other1.__isset;
  return *this;
}
void TDDIKeyValueMapRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIKeyValueMapRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractDependabilityRequirementRef::~TDDIAbstractDependabilityRequirementRef() throw() {
}


void TDDIAbstractDependabilityRequirementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityRequirementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDependabilityRequirementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement>(new TDDIAbstractDependabilityRequirement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedDependabilityRequirement) { wasSet = true; }
          if (this->ref->__isset.UsedDependabilityRequirementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDependabilityRequirementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDependabilityRequirementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractDependabilityRequirement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDependabilityRequirementRef &a, TDDIAbstractDependabilityRequirementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDependabilityRequirementRef::TDDIAbstractDependabilityRequirementRef(const TDDIAbstractDependabilityRequirementRef& other2) {
  ref = other2.ref;
  __isset = other2.__isset;
}
TDDIAbstractDependabilityRequirementRef& TDDIAbstractDependabilityRequirementRef::operator=(const TDDIAbstractDependabilityRequirementRef& other3) {
  ref = other3.ref;
  __isset = other3.__isset;
  return *this;
}
void TDDIAbstractDependabilityRequirementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDependabilityRequirementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractDesignArtifactRef::~TDDIAbstractDesignArtifactRef() throw() {
}


void TDDIAbstractDesignArtifactRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDesignArtifact> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDesignArtifactRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDesignArtifactRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDesignArtifact>(new TDDIAbstractDesignArtifact);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedDesignArtifact) { wasSet = true; }
          if (this->ref->__isset.UsedDesignArtifactType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDesignArtifactRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDesignArtifactRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractDesignArtifact"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDesignArtifactRef &a, TDDIAbstractDesignArtifactRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDesignArtifactRef::TDDIAbstractDesignArtifactRef(const TDDIAbstractDesignArtifactRef& other4) {
  ref = other4.ref;
  __isset = other4.__isset;
}
TDDIAbstractDesignArtifactRef& TDDIAbstractDesignArtifactRef::operator=(const TDDIAbstractDesignArtifactRef& other5) {
  ref = other5.ref;
  __isset = other5.__isset;
  return *this;
}
void TDDIAbstractDesignArtifactRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDesignArtifactRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArchitecturePackageRef::~TDDIAbstractArchitecturePackageRef() throw() {
}


void TDDIAbstractArchitecturePackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArchitecturePackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArchitecturePackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArchitecturePackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArchitecturePackage>(new TDDIAbstractArchitecturePackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArchitecturePackage) { wasSet = true; }
          if (this->ref->__isset.UsedArchitecturePackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArchitecturePackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArchitecturePackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArchitecturePackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArchitecturePackageRef &a, TDDIAbstractArchitecturePackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArchitecturePackageRef::TDDIAbstractArchitecturePackageRef(const TDDIAbstractArchitecturePackageRef& other6) {
  ref = other6.ref;
  __isset = other6.__isset;
}
TDDIAbstractArchitecturePackageRef& TDDIAbstractArchitecturePackageRef::operator=(const TDDIAbstractArchitecturePackageRef& other7) {
  ref = other7.ref;
  __isset = other7.__isset;
  return *this;
}
void TDDIAbstractArchitecturePackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArchitecturePackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractSystemRef::~TDDIAbstractSystemRef() throw() {
}


void TDDIAbstractSystemRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractSystemRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractSystemRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem>(new TDDIAbstractSystem);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedSystem) { wasSet = true; }
          if (this->ref->__isset.UsedSystemType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractSystemRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractSystemRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSystem"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractSystemRef &a, TDDIAbstractSystemRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractSystemRef::TDDIAbstractSystemRef(const TDDIAbstractSystemRef& other8) {
  ref = other8.ref;
  __isset = other8.__isset;
}
TDDIAbstractSystemRef& TDDIAbstractSystemRef::operator=(const TDDIAbstractSystemRef& other9) {
  ref = other9.ref;
  __isset = other9.__isset;
  return *this;
}
void TDDIAbstractSystemRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractSystemRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFunctionRef::~TDDIAbstractFunctionRef() throw() {
}


void TDDIAbstractFunctionRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFunctionRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFunctionRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction>(new TDDIAbstractFunction);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFunction) { wasSet = true; }
          if (this->ref->__isset.UsedFunctionType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFunctionRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFunctionRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFunction"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFunctionRef &a, TDDIAbstractFunctionRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFunctionRef::TDDIAbstractFunctionRef(const TDDIAbstractFunctionRef& other10) {
  ref = other10.ref;
  __isset = other10.__isset;
}
TDDIAbstractFunctionRef& TDDIAbstractFunctionRef::operator=(const TDDIAbstractFunctionRef& other11) {
  ref = other11.ref;
  __isset = other11.__isset;
  return *this;
}
void TDDIAbstractFunctionRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFunctionRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDILifecycleConditionRef::~TDDILifecycleConditionRef() throw() {
}


void TDDILifecycleConditionRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDILifecycleCondition> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILifecycleConditionRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILifecycleConditionRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDILifecycleCondition>(new TDDILifecycleCondition);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->ref->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ref->__isset.Value) { wasSet = true; }
          if (this->ref->__isset.Conditions) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILifecycleConditionRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILifecycleConditionRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDILifecycleCondition"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILifecycleConditionRef &a, TDDILifecycleConditionRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDILifecycleConditionRef::TDDILifecycleConditionRef(const TDDILifecycleConditionRef& other12) {
  ref = other12.ref;
  __isset = other12.__isset;
}
TDDILifecycleConditionRef& TDDILifecycleConditionRef::operator=(const TDDILifecycleConditionRef& other13) {
  ref = other13.ref;
  __isset = other13.__isset;
  return *this;
}
void TDDILifecycleConditionRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILifecycleConditionRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFailureLogicPackageRef::~TDDIAbstractFailureLogicPackageRef() throw() {
}


void TDDIAbstractFailureLogicPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureLogicPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailureLogicPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage>(new TDDIAbstractFailureLogicPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFailureLogicPackage) { wasSet = true; }
          if (this->ref->__isset.UsedFailureLogicPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailureLogicPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailureLogicPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailureLogicPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailureLogicPackageRef &a, TDDIAbstractFailureLogicPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailureLogicPackageRef::TDDIAbstractFailureLogicPackageRef(const TDDIAbstractFailureLogicPackageRef& other14) {
  ref = other14.ref;
  __isset = other14.__isset;
}
TDDIAbstractFailureLogicPackageRef& TDDIAbstractFailureLogicPackageRef::operator=(const TDDIAbstractFailureLogicPackageRef& other15) {
  ref = other15.ref;
  __isset = other15.__isset;
  return *this;
}
void TDDIAbstractFailureLogicPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailureLogicPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIPortRef::~TDDIPortRef() throw() {
}


void TDDIPortRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPortRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPortRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIPort>(new TDDIPort);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->ref->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ref->__isset.FlowType) { wasSet = true; }
          if (this->ref->__isset.Direction) { wasSet = true; }
          if (this->ref->__isset.RefinedPorts) { wasSet = true; }
          if (this->ref->__isset.InterfaceFailures) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPortRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPortRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIPort"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPortRef &a, TDDIPortRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIPortRef::TDDIPortRef(const TDDIPortRef& other16) {
  ref = other16.ref;
  __isset = other16.__isset;
}
TDDIPortRef& TDDIPortRef::operator=(const TDDIPortRef& other17) {
  ref = other17.ref;
  __isset = other17.__isset;
  return *this;
}
void TDDIPortRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPortRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractInterfaceFailureRef::~TDDIAbstractInterfaceFailureRef() throw() {
}


void TDDIAbstractInterfaceFailureRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInterfaceFailure> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractInterfaceFailureRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractInterfaceFailureRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInterfaceFailure>(new TDDIAbstractInterfaceFailure);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedInterfaceFailure) { wasSet = true; }
          if (this->ref->__isset.UsedInterfaceFailureType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractInterfaceFailureRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractInterfaceFailureRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractInterfaceFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractInterfaceFailureRef &a, TDDIAbstractInterfaceFailureRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractInterfaceFailureRef::TDDIAbstractInterfaceFailureRef(const TDDIAbstractInterfaceFailureRef& other18) {
  ref = other18.ref;
  __isset = other18.__isset;
}
TDDIAbstractInterfaceFailureRef& TDDIAbstractInterfaceFailureRef::operator=(const TDDIAbstractInterfaceFailureRef& other19) {
  ref = other19.ref;
  __isset = other19.__isset;
  return *this;
}
void TDDIAbstractInterfaceFailureRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractInterfaceFailureRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractStandardRef::~TDDIAbstractStandardRef() throw() {
}


void TDDIAbstractStandardRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractStandardRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractStandardRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard>(new TDDIAbstractStandard);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedStandard) { wasSet = true; }
          if (this->ref->__isset.UsedStandardType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractStandardRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractStandardRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractStandard"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractStandardRef &a, TDDIAbstractStandardRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractStandardRef::TDDIAbstractStandardRef(const TDDIAbstractStandardRef& other20) {
  ref = other20.ref;
  __isset = other20.__isset;
}
TDDIAbstractStandardRef& TDDIAbstractStandardRef::operator=(const TDDIAbstractStandardRef& other21) {
  ref = other21.ref;
  __isset = other21.__isset;
  return *this;
}
void TDDIAbstractStandardRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractStandardRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIMalFunctionRef::~TDDIMalFunctionRef() throw() {
}


void TDDIMalFunctionRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMalFunction> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMalFunctionRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMalFunctionRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIMalFunction>(new TDDIMalFunction);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.Hazards) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMalFunctionRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMalFunctionRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMalFunction"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMalFunctionRef &a, TDDIMalFunctionRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIMalFunctionRef::TDDIMalFunctionRef(const TDDIMalFunctionRef& other22) {
  ref = other22.ref;
  __isset = other22.__isset;
}
TDDIMalFunctionRef& TDDIMalFunctionRef::operator=(const TDDIMalFunctionRef& other23) {
  ref = other23.ref;
  __isset = other23.__isset;
  return *this;
}
void TDDIMalFunctionRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMalFunctionRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractDependabilityArtifactRef::~TDDIAbstractDependabilityArtifactRef() throw() {
}


void TDDIAbstractDependabilityArtifactRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityArtifact> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityArtifactRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDependabilityArtifactRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityArtifact>(new TDDIAbstractDependabilityArtifact);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedDependabilityArtifact) { wasSet = true; }
          if (this->ref->__isset.UsedDependabilityArtifactType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDependabilityArtifactRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDependabilityArtifactRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractDependabilityArtifact"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDependabilityArtifactRef &a, TDDIAbstractDependabilityArtifactRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDependabilityArtifactRef::TDDIAbstractDependabilityArtifactRef(const TDDIAbstractDependabilityArtifactRef& other24) {
  ref = other24.ref;
  __isset = other24.__isset;
}
TDDIAbstractDependabilityArtifactRef& TDDIAbstractDependabilityArtifactRef::operator=(const TDDIAbstractDependabilityArtifactRef& other25) {
  ref = other25.ref;
  __isset = other25.__isset;
  return *this;
}
void TDDIAbstractDependabilityArtifactRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDependabilityArtifactRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractDependabilityPackageRef::~TDDIAbstractDependabilityPackageRef() throw() {
}


void TDDIAbstractDependabilityPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDependabilityPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityPackage>(new TDDIAbstractDependabilityPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedDependabilityPackage) { wasSet = true; }
          if (this->ref->__isset.UsedDependabilityPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDependabilityPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDependabilityPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractDependabilityPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDependabilityPackageRef &a, TDDIAbstractDependabilityPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDependabilityPackageRef::TDDIAbstractDependabilityPackageRef(const TDDIAbstractDependabilityPackageRef& other26) {
  ref = other26.ref;
  __isset = other26.__isset;
}
TDDIAbstractDependabilityPackageRef& TDDIAbstractDependabilityPackageRef::operator=(const TDDIAbstractDependabilityPackageRef& other27) {
  ref = other27.ref;
  __isset = other27.__isset;
  return *this;
}
void TDDIAbstractDependabilityPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDependabilityPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractDomainElementRef::~TDDIAbstractDomainElementRef() throw() {
}


void TDDIAbstractDomainElementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainElement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainElementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDomainElementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainElement>(new TDDIAbstractDomainElement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedDomainElement) { wasSet = true; }
          if (this->ref->__isset.UsedDomainElementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDomainElementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDomainElementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractDomainElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDomainElementRef &a, TDDIAbstractDomainElementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDomainElementRef::TDDIAbstractDomainElementRef(const TDDIAbstractDomainElementRef& other28) {
  ref = other28.ref;
  __isset = other28.__isset;
}
TDDIAbstractDomainElementRef& TDDIAbstractDomainElementRef::operator=(const TDDIAbstractDomainElementRef& other29) {
  ref = other29.ref;
  __isset = other29.__isset;
  return *this;
}
void TDDIAbstractDomainElementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDomainElementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractDomainPackageRef::~TDDIAbstractDomainPackageRef() throw() {
}


void TDDIAbstractDomainPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDomainPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainPackage>(new TDDIAbstractDomainPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedDomainPackage) { wasSet = true; }
          if (this->ref->__isset.UsedDomainPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDomainPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDomainPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractDomainPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDomainPackageRef &a, TDDIAbstractDomainPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDomainPackageRef::TDDIAbstractDomainPackageRef(const TDDIAbstractDomainPackageRef& other30) {
  ref = other30.ref;
  __isset = other30.__isset;
}
TDDIAbstractDomainPackageRef& TDDIAbstractDomainPackageRef::operator=(const TDDIAbstractDomainPackageRef& other31) {
  ref = other31.ref;
  __isset = other31.__isset;
  return *this;
}
void TDDIAbstractDomainPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDomainPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFailureAnalysisArtifactRef::~TDDIAbstractFailureAnalysisArtifactRef() throw() {
}


void TDDIAbstractFailureAnalysisArtifactRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureAnalysisArtifactRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailureAnalysisArtifactRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact>(new TDDIAbstractFailureAnalysisArtifact);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFailureAnalysisArtifact) { wasSet = true; }
          if (this->ref->__isset.UsedFailureAnalysisArtifactType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailureAnalysisArtifactRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailureAnalysisArtifactRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailureAnalysisArtifact"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailureAnalysisArtifactRef &a, TDDIAbstractFailureAnalysisArtifactRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailureAnalysisArtifactRef::TDDIAbstractFailureAnalysisArtifactRef(const TDDIAbstractFailureAnalysisArtifactRef& other32) {
  ref = other32.ref;
  __isset = other32.__isset;
}
TDDIAbstractFailureAnalysisArtifactRef& TDDIAbstractFailureAnalysisArtifactRef::operator=(const TDDIAbstractFailureAnalysisArtifactRef& other33) {
  ref = other33.ref;
  __isset = other33.__isset;
  return *this;
}
void TDDIAbstractFailureAnalysisArtifactRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailureAnalysisArtifactRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFMEAArtifactRef::~TDDIAbstractFMEAArtifactRef() throw() {
}


void TDDIAbstractFMEAArtifactRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAArtifact> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAArtifactRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFMEAArtifactRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAArtifact>(new TDDIAbstractFMEAArtifact);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFMEAArtifact) { wasSet = true; }
          if (this->ref->__isset.UsedFMEAArtifactType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFMEAArtifactRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFMEAArtifactRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFMEAArtifact"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFMEAArtifactRef &a, TDDIAbstractFMEAArtifactRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFMEAArtifactRef::TDDIAbstractFMEAArtifactRef(const TDDIAbstractFMEAArtifactRef& other34) {
  ref = other34.ref;
  __isset = other34.__isset;
}
TDDIAbstractFMEAArtifactRef& TDDIAbstractFMEAArtifactRef::operator=(const TDDIAbstractFMEAArtifactRef& other35) {
  ref = other35.ref;
  __isset = other35.__isset;
  return *this;
}
void TDDIAbstractFMEAArtifactRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFMEAArtifactRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFMEAPackageRef::~TDDIAbstractFMEAPackageRef() throw() {
}


void TDDIAbstractFMEAPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFMEAPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage>(new TDDIAbstractFMEAPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFMEAPackage) { wasSet = true; }
          if (this->ref->__isset.UsedFMEAPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFMEAPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFMEAPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFMEAPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFMEAPackageRef &a, TDDIAbstractFMEAPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFMEAPackageRef::TDDIAbstractFMEAPackageRef(const TDDIAbstractFMEAPackageRef& other36) {
  ref = other36.ref;
  __isset = other36.__isset;
}
TDDIAbstractFMEAPackageRef& TDDIAbstractFMEAPackageRef::operator=(const TDDIAbstractFMEAPackageRef& other37) {
  ref = other37.ref;
  __isset = other37.__isset;
  return *this;
}
void TDDIAbstractFMEAPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFMEAPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIMinimalCutsetRef::~TDDIMinimalCutsetRef() throw() {
}


void TDDIMinimalCutsetRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutset> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMinimalCutsetRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMinimalCutsetRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutset>(new TDDIMinimalCutset);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.Failures) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMinimalCutsetRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMinimalCutsetRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMinimalCutset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMinimalCutsetRef &a, TDDIMinimalCutsetRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIMinimalCutsetRef::TDDIMinimalCutsetRef(const TDDIMinimalCutsetRef& other38) {
  ref = other38.ref;
  __isset = other38.__isset;
}
TDDIMinimalCutsetRef& TDDIMinimalCutsetRef::operator=(const TDDIMinimalCutsetRef& other39) {
  ref = other39.ref;
  __isset = other39.__isset;
  return *this;
}
void TDDIMinimalCutsetRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMinimalCutsetRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFTAPackageRef::~TDDIAbstractFTAPackageRef() throw() {
}


void TDDIAbstractFTAPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFTAPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFTAPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage>(new TDDIAbstractFTAPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFTAPackage) { wasSet = true; }
          if (this->ref->__isset.UsedFTAPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFTAPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFTAPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFTAPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFTAPackageRef &a, TDDIAbstractFTAPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFTAPackageRef::TDDIAbstractFTAPackageRef(const TDDIAbstractFTAPackageRef& other40) {
  ref = other40.ref;
  __isset = other40.__isset;
}
TDDIAbstractFTAPackageRef& TDDIAbstractFTAPackageRef::operator=(const TDDIAbstractFTAPackageRef& other41) {
  ref = other41.ref;
  __isset = other41.__isset;
  return *this;
}
void TDDIAbstractFTAPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFTAPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractHARAPackageRef::~TDDIAbstractHARAPackageRef() throw() {
}


void TDDIAbstractHARAPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractHARAPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractHARAPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage>(new TDDIAbstractHARAPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedHARAPackage) { wasSet = true; }
          if (this->ref->__isset.UsedHARAPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractHARAPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractHARAPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractHARAPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractHARAPackageRef &a, TDDIAbstractHARAPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractHARAPackageRef::TDDIAbstractHARAPackageRef(const TDDIAbstractHARAPackageRef& other42) {
  ref = other42.ref;
  __isset = other42.__isset;
}
TDDIAbstractHARAPackageRef& TDDIAbstractHARAPackageRef::operator=(const TDDIAbstractHARAPackageRef& other43) {
  ref = other43.ref;
  __isset = other43.__isset;
  return *this;
}
void TDDIAbstractHARAPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractHARAPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractMeasureRef::~TDDIAbstractMeasureRef() throw() {
}


void TDDIAbstractMeasureRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractMeasureRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractMeasureRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure>(new TDDIAbstractMeasure);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedMeasure) { wasSet = true; }
          if (this->ref->__isset.UsedMeasureType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractMeasureRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractMeasureRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractMeasure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractMeasureRef &a, TDDIAbstractMeasureRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractMeasureRef::TDDIAbstractMeasureRef(const TDDIAbstractMeasureRef& other44) {
  ref = other44.ref;
  __isset = other44.__isset;
}
TDDIAbstractMeasureRef& TDDIAbstractMeasureRef::operator=(const TDDIAbstractMeasureRef& other45) {
  ref = other45.ref;
  __isset = other45.__isset;
  return *this;
}
void TDDIAbstractMeasureRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractMeasureRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractRiskParameterRef::~TDDIAbstractRiskParameterRef() throw() {
}


void TDDIAbstractRiskParameterRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRiskParameterRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRiskParameterRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter>(new TDDIAbstractRiskParameter);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedRiskParameter) { wasSet = true; }
          if (this->ref->__isset.UsedRiskParameterType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRiskParameterRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRiskParameterRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractRiskParameter"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRiskParameterRef &a, TDDIAbstractRiskParameterRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRiskParameterRef::TDDIAbstractRiskParameterRef(const TDDIAbstractRiskParameterRef& other46) {
  ref = other46.ref;
  __isset = other46.__isset;
}
TDDIAbstractRiskParameterRef& TDDIAbstractRiskParameterRef::operator=(const TDDIAbstractRiskParameterRef& other47) {
  ref = other47.ref;
  __isset = other47.__isset;
  return *this;
}
void TDDIAbstractRiskParameterRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRiskParameterRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractODEPackageRef::~TDDIAbstractODEPackageRef() throw() {
}


void TDDIAbstractODEPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractODEPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractODEPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractODEPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractODEPackage>(new TDDIAbstractODEPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedODEPackage) { wasSet = true; }
          if (this->ref->__isset.UsedODEPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractODEPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractODEPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractODEPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractODEPackageRef &a, TDDIAbstractODEPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractODEPackageRef::TDDIAbstractODEPackageRef(const TDDIAbstractODEPackageRef& other48) {
  ref = other48.ref;
  __isset = other48.__isset;
}
TDDIAbstractODEPackageRef& TDDIAbstractODEPackageRef::operator=(const TDDIAbstractODEPackageRef& other49) {
  ref = other49.ref;
  __isset = other49.__isset;
  return *this;
}
void TDDIAbstractODEPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractODEPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractMarkovChainPackageRef::~TDDIAbstractMarkovChainPackageRef() throw() {
}


void TDDIAbstractMarkovChainPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovChainPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractMarkovChainPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractMarkovChainPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovChainPackage>(new TDDIAbstractMarkovChainPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedMarkovChainPackage) { wasSet = true; }
          if (this->ref->__isset.UsedMarkovChainPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractMarkovChainPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractMarkovChainPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractMarkovChainPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractMarkovChainPackageRef &a, TDDIAbstractMarkovChainPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractMarkovChainPackageRef::TDDIAbstractMarkovChainPackageRef(const TDDIAbstractMarkovChainPackageRef& other50) {
  ref = other50.ref;
  __isset = other50.__isset;
}
TDDIAbstractMarkovChainPackageRef& TDDIAbstractMarkovChainPackageRef::operator=(const TDDIAbstractMarkovChainPackageRef& other51) {
  ref = other51.ref;
  __isset = other51.__isset;
  return *this;
}
void TDDIAbstractMarkovChainPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractMarkovChainPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractRequirementArtifactRef::~TDDIAbstractRequirementArtifactRef() throw() {
}


void TDDIAbstractRequirementArtifactRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementArtifact> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementArtifactRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRequirementArtifactRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementArtifact>(new TDDIAbstractRequirementArtifact);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedRequirementArtifact) { wasSet = true; }
          if (this->ref->__isset.UsedRequirementArtifactType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRequirementArtifactRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRequirementArtifactRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractRequirementArtifact"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRequirementArtifactRef &a, TDDIAbstractRequirementArtifactRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRequirementArtifactRef::TDDIAbstractRequirementArtifactRef(const TDDIAbstractRequirementArtifactRef& other52) {
  ref = other52.ref;
  __isset = other52.__isset;
}
TDDIAbstractRequirementArtifactRef& TDDIAbstractRequirementArtifactRef::operator=(const TDDIAbstractRequirementArtifactRef& other53) {
  ref = other53.ref;
  __isset = other53.__isset;
  return *this;
}
void TDDIAbstractRequirementArtifactRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRequirementArtifactRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractRequirementPackageRef::~TDDIAbstractRequirementPackageRef() throw() {
}


void TDDIAbstractRequirementPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRequirementPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementPackage>(new TDDIAbstractRequirementPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedRequirementPackage) { wasSet = true; }
          if (this->ref->__isset.UsedRequirementPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRequirementPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRequirementPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractRequirementPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRequirementPackageRef &a, TDDIAbstractRequirementPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRequirementPackageRef::TDDIAbstractRequirementPackageRef(const TDDIAbstractRequirementPackageRef& other54) {
  ref = other54.ref;
  __isset = other54.__isset;
}
TDDIAbstractRequirementPackageRef& TDDIAbstractRequirementPackageRef::operator=(const TDDIAbstractRequirementPackageRef& other55) {
  ref = other55.ref;
  __isset = other55.__isset;
  return *this;
}
void TDDIAbstractRequirementPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRequirementPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFailureRef::~TDDIAbstractFailureRef() throw() {
}


void TDDIAbstractFailureRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailureRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFailure) { wasSet = true; }
          if (this->ref->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailureRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailureRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailureRef &a, TDDIAbstractFailureRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailureRef::TDDIAbstractFailureRef(const TDDIAbstractFailureRef& other56) {
  ref = other56.ref;
  __isset = other56.__isset;
}
TDDIAbstractFailureRef& TDDIAbstractFailureRef::operator=(const TDDIAbstractFailureRef& other57) {
  ref = other57.ref;
  __isset = other57.__isset;
  return *this;
}
void TDDIAbstractFailureRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailureRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIMaintenanceProcedureRef::~TDDIMaintenanceProcedureRef() throw() {
}


void TDDIMaintenanceProcedureRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMaintenanceProcedureRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMaintenanceProcedureRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure>(new TDDIMaintenanceProcedure);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.ActivityDescription) { wasSet = true; }
          if (this->ref->__isset.TechnicalDescription) { wasSet = true; }
          if (this->ref->__isset.ToolSpecification) { wasSet = true; }
          if (this->ref->__isset.StaffNumber) { wasSet = true; }
          if (this->ref->__isset.StaffSkillLevel) { wasSet = true; }
          if (this->ref->__isset.StafftrainingDescription) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMaintenanceProcedureRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMaintenanceProcedureRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMaintenanceProcedure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMaintenanceProcedureRef &a, TDDIMaintenanceProcedureRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIMaintenanceProcedureRef::TDDIMaintenanceProcedureRef(const TDDIMaintenanceProcedureRef& other58) {
  ref = other58.ref;
  __isset = other58.__isset;
}
TDDIMaintenanceProcedureRef& TDDIMaintenanceProcedureRef::operator=(const TDDIMaintenanceProcedureRef& other59) {
  ref = other59.ref;
  __isset = other59.__isset;
  return *this;
}
void TDDIMaintenanceProcedureRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMaintenanceProcedureRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIHazardRef::~TDDIHazardRef() throw() {
}


void TDDIHazardRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIHazard> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazardRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazardRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIHazard>(new TDDIHazard);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.Condition) { wasSet = true; }
          if (this->ref->__isset.HazardType) { wasSet = true; }
          if (this->ref->__isset.Measures) { wasSet = true; }
          if (this->ref->__isset.OutputFailure) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazardRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazardRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIHazard"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazardRef &a, TDDIHazardRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIHazardRef::TDDIHazardRef(const TDDIHazardRef& other60) {
  ref = other60.ref;
  __isset = other60.__isset;
}
TDDIHazardRef& TDDIHazardRef::operator=(const TDDIHazardRef& other61) {
  ref = other61.ref;
  __isset = other61.__isset;
  return *this;
}
void TDDIHazardRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazardRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIImplementationConstraintRef::~TDDIImplementationConstraintRef() throw() {
}


void TDDIImplementationConstraintRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIImplementationConstraintRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIImplementationConstraintRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint>(new TDDIImplementationConstraint);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIImplementationConstraintRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIImplementationConstraintRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIImplementationConstraint"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIImplementationConstraintRef &a, TDDIImplementationConstraintRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIImplementationConstraintRef::TDDIImplementationConstraintRef(const TDDIImplementationConstraintRef& other62) {
  ref = other62.ref;
  __isset = other62.__isset;
}
TDDIImplementationConstraintRef& TDDIImplementationConstraintRef::operator=(const TDDIImplementationConstraintRef& other63) {
  ref = other63.ref;
  __isset = other63.__isset;
  return *this;
}
void TDDIImplementationConstraintRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIImplementationConstraintRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDINoteRef::~TDDINoteRef() throw() {
}


void TDDINoteRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDINote> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDINoteRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDINoteRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDINote>(new TDDINote);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDINoteRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDINoteRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDINote"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDINoteRef &a, TDDINoteRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDINoteRef::TDDINoteRef(const TDDINoteRef& other64) {
  ref = other64.ref;
  __isset = other64.__isset;
}
TDDINoteRef& TDDINoteRef::operator=(const TDDINoteRef& other65) {
  ref = other65.ref;
  __isset = other65.__isset;
  return *this;
}
void TDDINoteRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDINoteRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDITaggedValueRef::~TDDITaggedValueRef() throw() {
}


void TDDITaggedValueRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITaggedValueRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITaggedValueRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue>(new TDDITaggedValue);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Content) { wasSet = true; }
          if (this->ref->__isset.Key) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITaggedValueRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITaggedValueRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDITaggedValue"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITaggedValueRef &a, TDDITaggedValueRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDITaggedValueRef::TDDITaggedValueRef(const TDDITaggedValueRef& other66) {
  ref = other66.ref;
  __isset = other66.__isset;
}
TDDITaggedValueRef& TDDITaggedValueRef::operator=(const TDDITaggedValueRef& other67) {
  ref = other67.ref;
  __isset = other67.__isset;
  return *this;
}
void TDDITaggedValueRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITaggedValueRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArtifactElementRef::~TDDIAbstractArtifactElementRef() throw() {
}


void TDDIAbstractArtifactElementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactElementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactElementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement>(new TDDIAbstractArtifactElement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArtifactElement) { wasSet = true; }
          if (this->ref->__isset.UsedArtifactElementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactElementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactElementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArtifactElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactElementRef &a, TDDIAbstractArtifactElementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactElementRef::TDDIAbstractArtifactElementRef(const TDDIAbstractArtifactElementRef& other68) {
  ref = other68.ref;
  __isset = other68.__isset;
}
TDDIAbstractArtifactElementRef& TDDIAbstractArtifactElementRef::operator=(const TDDIAbstractArtifactElementRef& other69) {
  ref = other69.ref;
  __isset = other69.__isset;
  return *this;
}
void TDDIAbstractArtifactElementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactElementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIClaimRef::~TDDIClaimRef() throw() {
}


void TDDIClaimRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIClaim> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIClaimRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIClaimRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIClaim>(new TDDIClaim);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ref->__isset.Note) { wasSet = true; }
          if (this->ref->__isset.TaggedValue) { wasSet = true; }
          if (this->ref->__isset.AssertionDeclaration) { wasSet = true; }
          if (this->ref->__isset.MetaClaim) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIClaimRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIClaimRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIClaim"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIClaimRef &a, TDDIClaimRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIClaimRef::TDDIClaimRef(const TDDIClaimRef& other70) {
  ref = other70.ref;
  __isset = other70.__isset;
}
TDDIClaimRef& TDDIClaimRef::operator=(const TDDIClaimRef& other71) {
  ref = other71.ref;
  __isset = other71.__isset;
  return *this;
}
void TDDIClaimRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIClaimRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArgumentPackageRef::~TDDIAbstractArgumentPackageRef() throw() {
}


void TDDIAbstractArgumentPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage>(new TDDIAbstractArgumentPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArgumentPackage) { wasSet = true; }
          if (this->ref->__isset.UsedArgumentPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArgumentPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentPackageRef &a, TDDIAbstractArgumentPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentPackageRef::TDDIAbstractArgumentPackageRef(const TDDIAbstractArgumentPackageRef& other72) {
  ref = other72.ref;
  __isset = other72.__isset;
}
TDDIAbstractArgumentPackageRef& TDDIAbstractArgumentPackageRef::operator=(const TDDIAbstractArgumentPackageRef& other73) {
  ref = other73.ref;
  __isset = other73.__isset;
  return *this;
}
void TDDIAbstractArgumentPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArgumentationElementRef::~TDDIAbstractArgumentationElementRef() throw() {
}


void TDDIAbstractArgumentationElementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentationElementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentationElementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement>(new TDDIAbstractArgumentationElement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArgumentationElement) { wasSet = true; }
          if (this->ref->__isset.UsedArgumentationElementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentationElementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentationElementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArgumentationElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentationElementRef &a, TDDIAbstractArgumentationElementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentationElementRef::TDDIAbstractArgumentationElementRef(const TDDIAbstractArgumentationElementRef& other74) {
  ref = other74.ref;
  __isset = other74.__isset;
}
TDDIAbstractArgumentationElementRef& TDDIAbstractArgumentationElementRef::operator=(const TDDIAbstractArgumentationElementRef& other75) {
  ref = other75.ref;
  __isset = other75.__isset;
  return *this;
}
void TDDIAbstractArgumentationElementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentationElementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArgumentAssetRef::~TDDIAbstractArgumentAssetRef() throw() {
}


void TDDIAbstractArgumentAssetRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentAssetRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentAssetRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset>(new TDDIAbstractArgumentAsset);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArgumentAsset) { wasSet = true; }
          if (this->ref->__isset.UsedArgumentAssetType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentAssetRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentAssetRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArgumentAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentAssetRef &a, TDDIAbstractArgumentAssetRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentAssetRef::TDDIAbstractArgumentAssetRef(const TDDIAbstractArgumentAssetRef& other76) {
  ref = other76.ref;
  __isset = other76.__isset;
}
TDDIAbstractArgumentAssetRef& TDDIAbstractArgumentAssetRef::operator=(const TDDIAbstractArgumentAssetRef& other77) {
  ref = other77.ref;
  __isset = other77.__isset;
  return *this;
}
void TDDIAbstractArgumentAssetRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentAssetRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIPropertyRef::~TDDIPropertyRef() throw() {
}


void TDDIPropertyRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIProperty> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPropertyRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPropertyRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIProperty>(new TDDIProperty);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ref->__isset.Note) { wasSet = true; }
          if (this->ref->__isset.TaggedValue) { wasSet = true; }
          if (this->ref->__isset.Property) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPropertyRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPropertyRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIProperty"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPropertyRef &a, TDDIPropertyRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIPropertyRef::TDDIPropertyRef(const TDDIPropertyRef& other78) {
  ref = other78.ref;
  __isset = other78.__isset;
}
TDDIPropertyRef& TDDIPropertyRef::operator=(const TDDIPropertyRef& other79) {
  ref = other79.ref;
  __isset = other79.__isset;
  return *this;
}
void TDDIPropertyRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPropertyRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArtifactAssetRef::~TDDIAbstractArtifactAssetRef() throw() {
}


void TDDIAbstractArtifactAssetRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactAssetRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactAssetRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset>(new TDDIAbstractArtifactAsset);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArtifactAsset) { wasSet = true; }
          if (this->ref->__isset.UsedArtifactAssetType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactAssetRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactAssetRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArtifactAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactAssetRef &a, TDDIAbstractArtifactAssetRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactAssetRef::TDDIAbstractArtifactAssetRef(const TDDIAbstractArtifactAssetRef& other80) {
  ref = other80.ref;
  __isset = other80.__isset;
}
TDDIAbstractArtifactAssetRef& TDDIAbstractArtifactAssetRef::operator=(const TDDIAbstractArtifactAssetRef& other81) {
  ref = other81.ref;
  __isset = other81.__isset;
  return *this;
}
void TDDIAbstractArtifactAssetRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactAssetRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractAssuranceCasePackageRef::~TDDIAbstractAssuranceCasePackageRef() throw() {
}


void TDDIAbstractAssuranceCasePackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssuranceCasePackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssuranceCasePackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage>(new TDDIAbstractAssuranceCasePackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedAssuranceCasePackage) { wasSet = true; }
          if (this->ref->__isset.UsedAssuranceCasePackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssuranceCasePackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssuranceCasePackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractAssuranceCasePackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssuranceCasePackageRef &a, TDDIAbstractAssuranceCasePackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssuranceCasePackageRef::TDDIAbstractAssuranceCasePackageRef(const TDDIAbstractAssuranceCasePackageRef& other82) {
  ref = other82.ref;
  __isset = other82.__isset;
}
TDDIAbstractAssuranceCasePackageRef& TDDIAbstractAssuranceCasePackageRef::operator=(const TDDIAbstractAssuranceCasePackageRef& other83) {
  ref = other83.ref;
  __isset = other83.__isset;
  return *this;
}
void TDDIAbstractAssuranceCasePackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssuranceCasePackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAssuranceCasePackageInterfaceRef::~TDDIAssuranceCasePackageInterfaceRef() throw() {
}


void TDDIAssuranceCasePackageInterfaceRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageInterfaceRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackageInterfaceRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface>(new TDDIAssuranceCasePackageInterface);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ref->__isset.Note) { wasSet = true; }
          if (this->ref->__isset.TaggedValue) { wasSet = true; }
          if (this->ref->__isset.AssuranceCasePackage) { wasSet = true; }
          if (this->ref->__isset.Interface) { wasSet = true; }
          if (this->ref->__isset.ArtifactPackage) { wasSet = true; }
          if (this->ref->__isset.ArgumentPackage) { wasSet = true; }
          if (this->ref->__isset.TerminologyPackage) { wasSet = true; }
          if (this->ref->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackageInterfaceRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackageInterfaceRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceCasePackageInterface"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackageInterfaceRef &a, TDDIAssuranceCasePackageInterfaceRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackageInterfaceRef::TDDIAssuranceCasePackageInterfaceRef(const TDDIAssuranceCasePackageInterfaceRef& other84) {
  ref = other84.ref;
  __isset = other84.__isset;
}
TDDIAssuranceCasePackageInterfaceRef& TDDIAssuranceCasePackageInterfaceRef::operator=(const TDDIAssuranceCasePackageInterfaceRef& other85) {
  ref = other85.ref;
  __isset = other85.__isset;
  return *this;
}
void TDDIAssuranceCasePackageInterfaceRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackageInterfaceRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArtifactPackageRef::~TDDIAbstractArtifactPackageRef() throw() {
}


void TDDIAbstractArtifactPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage>(new TDDIAbstractArtifactPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArtifactPackage) { wasSet = true; }
          if (this->ref->__isset.UsedArtifactPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArtifactPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactPackageRef &a, TDDIAbstractArtifactPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactPackageRef::TDDIAbstractArtifactPackageRef(const TDDIAbstractArtifactPackageRef& other86) {
  ref = other86.ref;
  __isset = other86.__isset;
}
TDDIAbstractArtifactPackageRef& TDDIAbstractArtifactPackageRef::operator=(const TDDIAbstractArtifactPackageRef& other87) {
  ref = other87.ref;
  __isset = other87.__isset;
  return *this;
}
void TDDIAbstractArtifactPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractTerminologyPackageRef::~TDDIAbstractTerminologyPackageRef() throw() {
}


void TDDIAbstractTerminologyPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractTerminologyPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage>(new TDDIAbstractTerminologyPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedTerminologyPackage) { wasSet = true; }
          if (this->ref->__isset.UsedTerminologyPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractTerminologyPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractTerminologyPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractTerminologyPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractTerminologyPackageRef &a, TDDIAbstractTerminologyPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractTerminologyPackageRef::TDDIAbstractTerminologyPackageRef(const TDDIAbstractTerminologyPackageRef& other88) {
  ref = other88.ref;
  __isset = other88.__isset;
}
TDDIAbstractTerminologyPackageRef& TDDIAbstractTerminologyPackageRef::operator=(const TDDIAbstractTerminologyPackageRef& other89) {
  ref = other89.ref;
  __isset = other89.__isset;
  return *this;
}
void TDDIAbstractTerminologyPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractTerminologyPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractExpressionElementRef::~TDDIAbstractExpressionElementRef() throw() {
}


void TDDIAbstractExpressionElementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractExpressionElementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractExpressionElementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement>(new TDDIAbstractExpressionElement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedExpressionElement) { wasSet = true; }
          if (this->ref->__isset.UsedExpressionElementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractExpressionElementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractExpressionElementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractExpressionElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractExpressionElementRef &a, TDDIAbstractExpressionElementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractExpressionElementRef::TDDIAbstractExpressionElementRef(const TDDIAbstractExpressionElementRef& other90) {
  ref = other90.ref;
  __isset = other90.__isset;
}
TDDIAbstractExpressionElementRef& TDDIAbstractExpressionElementRef::operator=(const TDDIAbstractExpressionElementRef& other91) {
  ref = other91.ref;
  __isset = other91.__isset;
  return *this;
}
void TDDIAbstractExpressionElementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractExpressionElementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIArchitecturePackageUnion::~TDDIArchitecturePackageUnion() throw() {
}


void TDDIArchitecturePackageUnion::__set_ArchitecturePackage(::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackage> val) {
  this->ArchitecturePackage = val;
__isset.ArchitecturePackage = true;
}

void TDDIArchitecturePackageUnion::__set_ArchitecturePackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackageInterface> val) {
  this->ArchitecturePackageInterface = val;
__isset.ArchitecturePackageInterface = true;
}

void TDDIArchitecturePackageUnion::__set_ArchitecturePackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackageBinding> val) {
  this->ArchitecturePackageBinding = val;
__isset.ArchitecturePackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArchitecturePackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArchitecturePackage) { 
            this->ArchitecturePackage = ::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackage>(new TDDIArchitecturePackage);
          }
          xfer += this->ArchitecturePackage->read(iprot);
          bool wasSet = false;
          if (this->ArchitecturePackage->__isset.Id) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.Name) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.Description) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.IsCitation) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.IsAbstract) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.CitedElement) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ArchitecturePackage->__isset.DesignArtifacts) { wasSet = true; }
          if (!wasSet) { this->ArchitecturePackage.reset(); }
          this->__isset.ArchitecturePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArchitecturePackageInterface) { 
            this->ArchitecturePackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackageInterface>(new TDDIArchitecturePackageInterface);
          }
          xfer += this->ArchitecturePackageInterface->read(iprot);
          bool wasSet = false;
          if (this->ArchitecturePackageInterface->__isset.Id) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.Name) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.Description) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.DesignArtifacts) { wasSet = true; }
          if (this->ArchitecturePackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->ArchitecturePackageInterface.reset(); }
          this->__isset.ArchitecturePackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArchitecturePackageBinding) { 
            this->ArchitecturePackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackageBinding>(new TDDIArchitecturePackageBinding);
          }
          xfer += this->ArchitecturePackageBinding->read(iprot);
          bool wasSet = false;
          if (this->ArchitecturePackageBinding->__isset.Id) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.Name) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.Description) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.DesignArtifacts) { wasSet = true; }
          if (this->ArchitecturePackageBinding->__isset.ParticipantPackages) { wasSet = true; }
          if (!wasSet) { this->ArchitecturePackageBinding.reset(); }
          this->__isset.ArchitecturePackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArchitecturePackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArchitecturePackageUnion");

  if (this->__isset.ArchitecturePackage) {
    xfer += oprot->writeFieldBegin("ArchitecturePackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ArchitecturePackage) {
      xfer += this->ArchitecturePackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArchitecturePackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArchitecturePackageInterface) {
    xfer += oprot->writeFieldBegin("ArchitecturePackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArchitecturePackageInterface) {
      xfer += this->ArchitecturePackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArchitecturePackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArchitecturePackageBinding) {
    xfer += oprot->writeFieldBegin("ArchitecturePackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArchitecturePackageBinding) {
      xfer += this->ArchitecturePackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArchitecturePackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArchitecturePackageUnion &a, TDDIArchitecturePackageUnion &b) {
  using ::std::swap;
  swap(a.ArchitecturePackage, b.ArchitecturePackage);
  swap(a.ArchitecturePackageInterface, b.ArchitecturePackageInterface);
  swap(a.ArchitecturePackageBinding, b.ArchitecturePackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIArchitecturePackageUnion::TDDIArchitecturePackageUnion(const TDDIArchitecturePackageUnion& other92) {
  ArchitecturePackage = other92.ArchitecturePackage;
  ArchitecturePackageInterface = other92.ArchitecturePackageInterface;
  ArchitecturePackageBinding = other92.ArchitecturePackageBinding;
  __isset = other92.__isset;
}
TDDIArchitecturePackageUnion& TDDIArchitecturePackageUnion::operator=(const TDDIArchitecturePackageUnion& other93) {
  ArchitecturePackage = other93.ArchitecturePackage;
  ArchitecturePackageInterface = other93.ArchitecturePackageInterface;
  ArchitecturePackageBinding = other93.ArchitecturePackageBinding;
  __isset = other93.__isset;
  return *this;
}
void TDDIArchitecturePackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArchitecturePackageUnion(";
  out << "ArchitecturePackage="; (__isset.ArchitecturePackage ? (out << to_string(ArchitecturePackage)) : (out << "<null>"));
  out << ", " << "ArchitecturePackageInterface="; (__isset.ArchitecturePackageInterface ? (out << to_string(ArchitecturePackageInterface)) : (out << "<null>"));
  out << ", " << "ArchitecturePackageBinding="; (__isset.ArchitecturePackageBinding ? (out << to_string(ArchitecturePackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArchitecturePackage::~TDDIAbstractArchitecturePackage() throw() {
}


void TDDIAbstractArchitecturePackage::__set_UsedArchitecturePackage(const TDDIArchitecturePackageUnion& val) {
  this->UsedArchitecturePackage = val;
}

void TDDIAbstractArchitecturePackage::__set_UsedArchitecturePackageType(const TDDIArchitecturePackageUnionType val) {
  this->UsedArchitecturePackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArchitecturePackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArchitecturePackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArchitecturePackage.read(iprot);
          this->__isset.UsedArchitecturePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast94;
          xfer += iprot->readI32(ecast94);
          this->UsedArchitecturePackageType = (TDDIArchitecturePackageUnionType)ecast94;
          this->__isset.UsedArchitecturePackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArchitecturePackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArchitecturePackage");

  xfer += oprot->writeFieldBegin("UsedArchitecturePackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArchitecturePackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArchitecturePackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArchitecturePackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArchitecturePackage &a, TDDIAbstractArchitecturePackage &b) {
  using ::std::swap;
  swap(a.UsedArchitecturePackage, b.UsedArchitecturePackage);
  swap(a.UsedArchitecturePackageType, b.UsedArchitecturePackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArchitecturePackage::TDDIAbstractArchitecturePackage(const TDDIAbstractArchitecturePackage& other95) {
  UsedArchitecturePackage = other95.UsedArchitecturePackage;
  UsedArchitecturePackageType = other95.UsedArchitecturePackageType;
  __isset = other95.__isset;
}
TDDIAbstractArchitecturePackage& TDDIAbstractArchitecturePackage::operator=(const TDDIAbstractArchitecturePackage& other96) {
  UsedArchitecturePackage = other96.UsedArchitecturePackage;
  UsedArchitecturePackageType = other96.UsedArchitecturePackageType;
  __isset = other96.__isset;
  return *this;
}
void TDDIAbstractArchitecturePackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArchitecturePackage(";
  out << "UsedArchitecturePackage=" << to_string(UsedArchitecturePackage);
  out << ", " << "UsedArchitecturePackageType=" << to_string(UsedArchitecturePackageType);
  out << ")";
}


TDDIArchitecturePackage::~TDDIArchitecturePackage() throw() {
}


void TDDIArchitecturePackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIArchitecturePackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIArchitecturePackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIArchitecturePackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArchitecturePackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArchitecturePackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIArchitecturePackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIArchitecturePackage::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIArchitecturePackage::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIArchitecturePackage::__set_DesignArtifacts(const std::vector<TDDIAbstractDesignArtifactRef> & val) {
  this->DesignArtifacts = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArchitecturePackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size97;
            ::apache::thrift::protocol::TType _etype100;
            xfer += iprot->readListBegin(_etype100, _size97);
            this->KeyValueMaps.resize(_size97);
            uint32_t _i101;
            for (_i101 = 0; _i101 < _size97; ++_i101)
            {
              xfer += this->KeyValueMaps[_i101].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size102;
            ::apache::thrift::protocol::TType _etype105;
            xfer += iprot->readListBegin(_etype105, _size102);
            this->DependabilityRequirements.resize(_size102);
            uint32_t _i106;
            for (_i106 = 0; _i106 < _size102; ++_i106)
            {
              xfer += this->DependabilityRequirements[_i106].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DesignArtifacts.clear();
            uint32_t _size107;
            ::apache::thrift::protocol::TType _etype110;
            xfer += iprot->readListBegin(_etype110, _size107);
            this->DesignArtifacts.resize(_size107);
            uint32_t _i111;
            for (_i111 = 0; _i111 < _size107; ++_i111)
            {
              xfer += this->DesignArtifacts[_i111].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DesignArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArchitecturePackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArchitecturePackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter112;
    for (_iter112 = this->KeyValueMaps.begin(); _iter112 != this->KeyValueMaps.end(); ++_iter112)
    {
      xfer += (*_iter112).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter113;
    for (_iter113 = this->DependabilityRequirements.begin(); _iter113 != this->DependabilityRequirements.end(); ++_iter113)
    {
      xfer += (*_iter113).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DesignArtifacts", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DesignArtifacts.size()));
    std::vector<TDDIAbstractDesignArtifactRef> ::const_iterator _iter114;
    for (_iter114 = this->DesignArtifacts.begin(); _iter114 != this->DesignArtifacts.end(); ++_iter114)
    {
      xfer += (*_iter114).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArchitecturePackage &a, TDDIArchitecturePackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.DesignArtifacts, b.DesignArtifacts);
  swap(a.__isset, b.__isset);
}

TDDIArchitecturePackage::TDDIArchitecturePackage(const TDDIArchitecturePackage& other115) {
  Id = other115.Id;
  Name = other115.Name;
  Description = other115.Description;
  IsCitation = other115.IsCitation;
  IsAbstract = other115.IsAbstract;
  KeyValueMaps = other115.KeyValueMaps;
  CitedElement = other115.CitedElement;
  DependabilityRequirements = other115.DependabilityRequirements;
  AssuranceLevel = other115.AssuranceLevel;
  DesignArtifacts = other115.DesignArtifacts;
  __isset = other115.__isset;
}
TDDIArchitecturePackage& TDDIArchitecturePackage::operator=(const TDDIArchitecturePackage& other116) {
  Id = other116.Id;
  Name = other116.Name;
  Description = other116.Description;
  IsCitation = other116.IsCitation;
  IsAbstract = other116.IsAbstract;
  KeyValueMaps = other116.KeyValueMaps;
  CitedElement = other116.CitedElement;
  DependabilityRequirements = other116.DependabilityRequirements;
  AssuranceLevel = other116.AssuranceLevel;
  DesignArtifacts = other116.DesignArtifacts;
  __isset = other116.__isset;
  return *this;
}
void TDDIArchitecturePackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArchitecturePackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "DesignArtifacts=" << to_string(DesignArtifacts);
  out << ")";
}


TDDIArchitecturePackageInterface::~TDDIArchitecturePackageInterface() throw() {
}


void TDDIArchitecturePackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIArchitecturePackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIArchitecturePackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIArchitecturePackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArchitecturePackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArchitecturePackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIArchitecturePackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIArchitecturePackageInterface::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIArchitecturePackageInterface::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIArchitecturePackageInterface::__set_DesignArtifacts(const std::vector<TDDIAbstractDesignArtifactRef> & val) {
  this->DesignArtifacts = val;
}

void TDDIArchitecturePackageInterface::__set_Implements(const TDDIAbstractArchitecturePackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArchitecturePackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size117;
            ::apache::thrift::protocol::TType _etype120;
            xfer += iprot->readListBegin(_etype120, _size117);
            this->KeyValueMaps.resize(_size117);
            uint32_t _i121;
            for (_i121 = 0; _i121 < _size117; ++_i121)
            {
              xfer += this->KeyValueMaps[_i121].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size122;
            ::apache::thrift::protocol::TType _etype125;
            xfer += iprot->readListBegin(_etype125, _size122);
            this->DependabilityRequirements.resize(_size122);
            uint32_t _i126;
            for (_i126 = 0; _i126 < _size122; ++_i126)
            {
              xfer += this->DependabilityRequirements[_i126].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DesignArtifacts.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _etype130;
            xfer += iprot->readListBegin(_etype130, _size127);
            this->DesignArtifacts.resize(_size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              xfer += this->DesignArtifacts[_i131].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DesignArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArchitecturePackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArchitecturePackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter132;
    for (_iter132 = this->KeyValueMaps.begin(); _iter132 != this->KeyValueMaps.end(); ++_iter132)
    {
      xfer += (*_iter132).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter133;
    for (_iter133 = this->DependabilityRequirements.begin(); _iter133 != this->DependabilityRequirements.end(); ++_iter133)
    {
      xfer += (*_iter133).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DesignArtifacts", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DesignArtifacts.size()));
    std::vector<TDDIAbstractDesignArtifactRef> ::const_iterator _iter134;
    for (_iter134 = this->DesignArtifacts.begin(); _iter134 != this->DesignArtifacts.end(); ++_iter134)
    {
      xfer += (*_iter134).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArchitecturePackageInterface &a, TDDIArchitecturePackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.DesignArtifacts, b.DesignArtifacts);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIArchitecturePackageInterface::TDDIArchitecturePackageInterface(const TDDIArchitecturePackageInterface& other135) {
  Id = other135.Id;
  Name = other135.Name;
  Description = other135.Description;
  IsCitation = other135.IsCitation;
  IsAbstract = other135.IsAbstract;
  KeyValueMaps = other135.KeyValueMaps;
  CitedElement = other135.CitedElement;
  DependabilityRequirements = other135.DependabilityRequirements;
  AssuranceLevel = other135.AssuranceLevel;
  DesignArtifacts = other135.DesignArtifacts;
  Implements = other135.Implements;
  __isset = other135.__isset;
}
TDDIArchitecturePackageInterface& TDDIArchitecturePackageInterface::operator=(const TDDIArchitecturePackageInterface& other136) {
  Id = other136.Id;
  Name = other136.Name;
  Description = other136.Description;
  IsCitation = other136.IsCitation;
  IsAbstract = other136.IsAbstract;
  KeyValueMaps = other136.KeyValueMaps;
  CitedElement = other136.CitedElement;
  DependabilityRequirements = other136.DependabilityRequirements;
  AssuranceLevel = other136.AssuranceLevel;
  DesignArtifacts = other136.DesignArtifacts;
  Implements = other136.Implements;
  __isset = other136.__isset;
  return *this;
}
void TDDIArchitecturePackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArchitecturePackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "DesignArtifacts=" << to_string(DesignArtifacts);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIArchitecturePackageBinding::~TDDIArchitecturePackageBinding() throw() {
}


void TDDIArchitecturePackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIArchitecturePackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIArchitecturePackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIArchitecturePackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArchitecturePackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArchitecturePackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIArchitecturePackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIArchitecturePackageBinding::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIArchitecturePackageBinding::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIArchitecturePackageBinding::__set_DesignArtifacts(const std::vector<TDDIAbstractDesignArtifactRef> & val) {
  this->DesignArtifacts = val;
}

void TDDIArchitecturePackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractArchitecturePackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArchitecturePackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size137;
            ::apache::thrift::protocol::TType _etype140;
            xfer += iprot->readListBegin(_etype140, _size137);
            this->KeyValueMaps.resize(_size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              xfer += this->KeyValueMaps[_i141].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size142;
            ::apache::thrift::protocol::TType _etype145;
            xfer += iprot->readListBegin(_etype145, _size142);
            this->DependabilityRequirements.resize(_size142);
            uint32_t _i146;
            for (_i146 = 0; _i146 < _size142; ++_i146)
            {
              xfer += this->DependabilityRequirements[_i146].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DesignArtifacts.clear();
            uint32_t _size147;
            ::apache::thrift::protocol::TType _etype150;
            xfer += iprot->readListBegin(_etype150, _size147);
            this->DesignArtifacts.resize(_size147);
            uint32_t _i151;
            for (_i151 = 0; _i151 < _size147; ++_i151)
            {
              xfer += this->DesignArtifacts[_i151].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DesignArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size152;
            ::apache::thrift::protocol::TType _etype155;
            xfer += iprot->readListBegin(_etype155, _size152);
            this->ParticipantPackages.resize(_size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              xfer += this->ParticipantPackages[_i156].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArchitecturePackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArchitecturePackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter157;
    for (_iter157 = this->KeyValueMaps.begin(); _iter157 != this->KeyValueMaps.end(); ++_iter157)
    {
      xfer += (*_iter157).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter158;
    for (_iter158 = this->DependabilityRequirements.begin(); _iter158 != this->DependabilityRequirements.end(); ++_iter158)
    {
      xfer += (*_iter158).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DesignArtifacts", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DesignArtifacts.size()));
    std::vector<TDDIAbstractDesignArtifactRef> ::const_iterator _iter159;
    for (_iter159 = this->DesignArtifacts.begin(); _iter159 != this->DesignArtifacts.end(); ++_iter159)
    {
      xfer += (*_iter159).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractArchitecturePackageRef> ::const_iterator _iter160;
    for (_iter160 = this->ParticipantPackages.begin(); _iter160 != this->ParticipantPackages.end(); ++_iter160)
    {
      xfer += (*_iter160).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArchitecturePackageBinding &a, TDDIArchitecturePackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.DesignArtifacts, b.DesignArtifacts);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIArchitecturePackageBinding::TDDIArchitecturePackageBinding(const TDDIArchitecturePackageBinding& other161) {
  Id = other161.Id;
  Name = other161.Name;
  Description = other161.Description;
  IsCitation = other161.IsCitation;
  IsAbstract = other161.IsAbstract;
  KeyValueMaps = other161.KeyValueMaps;
  CitedElement = other161.CitedElement;
  DependabilityRequirements = other161.DependabilityRequirements;
  AssuranceLevel = other161.AssuranceLevel;
  DesignArtifacts = other161.DesignArtifacts;
  ParticipantPackages = other161.ParticipantPackages;
  __isset = other161.__isset;
}
TDDIArchitecturePackageBinding& TDDIArchitecturePackageBinding::operator=(const TDDIArchitecturePackageBinding& other162) {
  Id = other162.Id;
  Name = other162.Name;
  Description = other162.Description;
  IsCitation = other162.IsCitation;
  IsAbstract = other162.IsAbstract;
  KeyValueMaps = other162.KeyValueMaps;
  CitedElement = other162.CitedElement;
  DependabilityRequirements = other162.DependabilityRequirements;
  AssuranceLevel = other162.AssuranceLevel;
  DesignArtifacts = other162.DesignArtifacts;
  ParticipantPackages = other162.ParticipantPackages;
  __isset = other162.__isset;
  return *this;
}
void TDDIArchitecturePackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArchitecturePackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "DesignArtifacts=" << to_string(DesignArtifacts);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIPerfChars::~TDDIPerfChars() throw() {
}


void TDDIPerfChars::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIPerfChars::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIPerfChars::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIPerfChars::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIPerfChars::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIPerfChars::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIPerfChars::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIPerfChars::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIPerfChars::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIPerfChars::__set_ResponseTime(const double val) {
  this->ResponseTime = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPerfChars& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPerfChars::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size163;
            ::apache::thrift::protocol::TType _etype166;
            xfer += iprot->readListBegin(_etype166, _size163);
            this->KeyValueMaps.resize(_size163);
            uint32_t _i167;
            for (_i167 = 0; _i167 < _size163; ++_i167)
            {
              xfer += this->KeyValueMaps[_i167].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size168;
            ::apache::thrift::protocol::TType _etype171;
            xfer += iprot->readListBegin(_etype171, _size168);
            this->DependabilityRequirements.resize(_size168);
            uint32_t _i172;
            for (_i172 = 0; _i172 < _size168; ++_i172)
            {
              xfer += this->DependabilityRequirements[_i172].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ResponseTime);
          this->__isset.ResponseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPerfChars::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPerfChars");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter173;
    for (_iter173 = this->KeyValueMaps.begin(); _iter173 != this->KeyValueMaps.end(); ++_iter173)
    {
      xfer += (*_iter173).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter174;
    for (_iter174 = this->DependabilityRequirements.begin(); _iter174 != this->DependabilityRequirements.end(); ++_iter174)
    {
      xfer += (*_iter174).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ResponseTime", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->ResponseTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPerfChars &a, TDDIPerfChars &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.ResponseTime, b.ResponseTime);
  swap(a.__isset, b.__isset);
}

TDDIPerfChars::TDDIPerfChars(const TDDIPerfChars& other175) {
  Id = other175.Id;
  Name = other175.Name;
  Description = other175.Description;
  IsCitation = other175.IsCitation;
  IsAbstract = other175.IsAbstract;
  KeyValueMaps = other175.KeyValueMaps;
  CitedElement = other175.CitedElement;
  DependabilityRequirements = other175.DependabilityRequirements;
  AssuranceLevel = other175.AssuranceLevel;
  ResponseTime = other175.ResponseTime;
  __isset = other175.__isset;
}
TDDIPerfChars& TDDIPerfChars::operator=(const TDDIPerfChars& other176) {
  Id = other176.Id;
  Name = other176.Name;
  Description = other176.Description;
  IsCitation = other176.IsCitation;
  IsAbstract = other176.IsAbstract;
  KeyValueMaps = other176.KeyValueMaps;
  CitedElement = other176.CitedElement;
  DependabilityRequirements = other176.DependabilityRequirements;
  AssuranceLevel = other176.AssuranceLevel;
  ResponseTime = other176.ResponseTime;
  __isset = other176.__isset;
  return *this;
}
void TDDIPerfChars::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPerfChars(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "ResponseTime=" << to_string(ResponseTime);
  out << ")";
}


TDDIPort::~TDDIPort() throw() {
}


void TDDIPort::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIPort::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIPort::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIPort::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIPort::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIPort::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIPort::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIPort::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIPort::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIPort::__set_FlowType(const std::string& val) {
  this->FlowType = val;
}

void TDDIPort::__set_Direction(const TDDIPortDirection val) {
  this->Direction = val;
}

void TDDIPort::__set_RefinedPorts(const std::vector<TDDIPortRef> & val) {
  this->RefinedPorts = val;
}

void TDDIPort::__set_InterfaceFailures(const std::vector<TDDIAbstractInterfaceFailureRef> & val) {
  this->InterfaceFailures = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPort& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPort::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size177;
            ::apache::thrift::protocol::TType _etype180;
            xfer += iprot->readListBegin(_etype180, _size177);
            this->KeyValueMaps.resize(_size177);
            uint32_t _i181;
            for (_i181 = 0; _i181 < _size177; ++_i181)
            {
              xfer += this->KeyValueMaps[_i181].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size182;
            ::apache::thrift::protocol::TType _etype185;
            xfer += iprot->readListBegin(_etype185, _size182);
            this->DependabilityRequirements.resize(_size182);
            uint32_t _i186;
            for (_i186 = 0; _i186 < _size182; ++_i186)
            {
              xfer += this->DependabilityRequirements[_i186].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FlowType);
          this->__isset.FlowType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast187;
          xfer += iprot->readI32(ecast187);
          this->Direction = (TDDIPortDirection)ecast187;
          this->__isset.Direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RefinedPorts.clear();
            uint32_t _size188;
            ::apache::thrift::protocol::TType _etype191;
            xfer += iprot->readListBegin(_etype191, _size188);
            this->RefinedPorts.resize(_size188);
            uint32_t _i192;
            for (_i192 = 0; _i192 < _size188; ++_i192)
            {
              xfer += this->RefinedPorts[_i192].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RefinedPorts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->InterfaceFailures.clear();
            uint32_t _size193;
            ::apache::thrift::protocol::TType _etype196;
            xfer += iprot->readListBegin(_etype196, _size193);
            this->InterfaceFailures.resize(_size193);
            uint32_t _i197;
            for (_i197 = 0; _i197 < _size193; ++_i197)
            {
              xfer += this->InterfaceFailures[_i197].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.InterfaceFailures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPort::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPort");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter198;
    for (_iter198 = this->KeyValueMaps.begin(); _iter198 != this->KeyValueMaps.end(); ++_iter198)
    {
      xfer += (*_iter198).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter199;
    for (_iter199 = this->DependabilityRequirements.begin(); _iter199 != this->DependabilityRequirements.end(); ++_iter199)
    {
      xfer += (*_iter199).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FlowType", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->FlowType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Direction", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->Direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RefinedPorts", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RefinedPorts.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter200;
    for (_iter200 = this->RefinedPorts.begin(); _iter200 != this->RefinedPorts.end(); ++_iter200)
    {
      xfer += (*_iter200).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("InterfaceFailures", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->InterfaceFailures.size()));
    std::vector<TDDIAbstractInterfaceFailureRef> ::const_iterator _iter201;
    for (_iter201 = this->InterfaceFailures.begin(); _iter201 != this->InterfaceFailures.end(); ++_iter201)
    {
      xfer += (*_iter201).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPort &a, TDDIPort &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.FlowType, b.FlowType);
  swap(a.Direction, b.Direction);
  swap(a.RefinedPorts, b.RefinedPorts);
  swap(a.InterfaceFailures, b.InterfaceFailures);
  swap(a.__isset, b.__isset);
}

TDDIPort::TDDIPort(const TDDIPort& other202) {
  Id = other202.Id;
  Name = other202.Name;
  Description = other202.Description;
  IsCitation = other202.IsCitation;
  IsAbstract = other202.IsAbstract;
  KeyValueMaps = other202.KeyValueMaps;
  CitedElement = other202.CitedElement;
  DependabilityRequirements = other202.DependabilityRequirements;
  AssuranceLevel = other202.AssuranceLevel;
  FlowType = other202.FlowType;
  Direction = other202.Direction;
  RefinedPorts = other202.RefinedPorts;
  InterfaceFailures = other202.InterfaceFailures;
  __isset = other202.__isset;
}
TDDIPort& TDDIPort::operator=(const TDDIPort& other203) {
  Id = other203.Id;
  Name = other203.Name;
  Description = other203.Description;
  IsCitation = other203.IsCitation;
  IsAbstract = other203.IsAbstract;
  KeyValueMaps = other203.KeyValueMaps;
  CitedElement = other203.CitedElement;
  DependabilityRequirements = other203.DependabilityRequirements;
  AssuranceLevel = other203.AssuranceLevel;
  FlowType = other203.FlowType;
  Direction = other203.Direction;
  RefinedPorts = other203.RefinedPorts;
  InterfaceFailures = other203.InterfaceFailures;
  __isset = other203.__isset;
  return *this;
}
void TDDIPort::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPort(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "FlowType=" << to_string(FlowType);
  out << ", " << "Direction=" << to_string(Direction);
  out << ", " << "RefinedPorts=" << to_string(RefinedPorts);
  out << ", " << "InterfaceFailures=" << to_string(InterfaceFailures);
  out << ")";
}


TDDISignal::~TDDISignal() throw() {
}


void TDDISignal::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISignal::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISignal::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISignal::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDISignal::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDISignal::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDISignal::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDISignal::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDISignal::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISignal::__set_FromPort(const TDDIPort& val) {
  this->FromPort = val;
}

void TDDISignal::__set_ToPort(const TDDIPort& val) {
  this->ToPort = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISignal& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISignal::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_FromPort = false;
  bool isset_ToPort = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size204;
            ::apache::thrift::protocol::TType _etype207;
            xfer += iprot->readListBegin(_etype207, _size204);
            this->KeyValueMaps.resize(_size204);
            uint32_t _i208;
            for (_i208 = 0; _i208 < _size204; ++_i208)
            {
              xfer += this->KeyValueMaps[_i208].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size209;
            ::apache::thrift::protocol::TType _etype212;
            xfer += iprot->readListBegin(_etype212, _size209);
            this->DependabilityRequirements.resize(_size209);
            uint32_t _i213;
            for (_i213 = 0; _i213 < _size209; ++_i213)
            {
              xfer += this->DependabilityRequirements[_i213].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FromPort.read(iprot);
          isset_FromPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ToPort.read(iprot);
          isset_ToPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_FromPort)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ToPort)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDDISignal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISignal");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter214;
    for (_iter214 = this->KeyValueMaps.begin(); _iter214 != this->KeyValueMaps.end(); ++_iter214)
    {
      xfer += (*_iter214).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter215;
    for (_iter215 = this->DependabilityRequirements.begin(); _iter215 != this->DependabilityRequirements.end(); ++_iter215)
    {
      xfer += (*_iter215).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FromPort", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->FromPort.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ToPort", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->ToPort.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISignal &a, TDDISignal &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.FromPort, b.FromPort);
  swap(a.ToPort, b.ToPort);
  swap(a.__isset, b.__isset);
}

TDDISignal::TDDISignal(const TDDISignal& other216) {
  Id = other216.Id;
  Name = other216.Name;
  Description = other216.Description;
  IsCitation = other216.IsCitation;
  IsAbstract = other216.IsAbstract;
  KeyValueMaps = other216.KeyValueMaps;
  CitedElement = other216.CitedElement;
  DependabilityRequirements = other216.DependabilityRequirements;
  AssuranceLevel = other216.AssuranceLevel;
  FromPort = other216.FromPort;
  ToPort = other216.ToPort;
  __isset = other216.__isset;
}
TDDISignal& TDDISignal::operator=(const TDDISignal& other217) {
  Id = other217.Id;
  Name = other217.Name;
  Description = other217.Description;
  IsCitation = other217.IsCitation;
  IsAbstract = other217.IsAbstract;
  KeyValueMaps = other217.KeyValueMaps;
  CitedElement = other217.CitedElement;
  DependabilityRequirements = other217.DependabilityRequirements;
  AssuranceLevel = other217.AssuranceLevel;
  FromPort = other217.FromPort;
  ToPort = other217.ToPort;
  __isset = other217.__isset;
  return *this;
}
void TDDISignal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISignal(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "FromPort=" << to_string(FromPort);
  out << ", " << "ToPort=" << to_string(ToPort);
  out << ")";
}


TDDIConfiguration::~TDDIConfiguration() throw() {
}


void TDDIConfiguration::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIConfiguration::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIConfiguration::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIConfiguration::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIConfiguration::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIConfiguration::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIConfiguration::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIConfiguration::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIConfiguration::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIConfiguration::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIConfiguration& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIConfiguration::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size218;
            ::apache::thrift::protocol::TType _etype221;
            xfer += iprot->readListBegin(_etype221, _size218);
            this->KeyValueMaps.resize(_size218);
            uint32_t _i222;
            for (_i222 = 0; _i222 < _size218; ++_i222)
            {
              xfer += this->KeyValueMaps[_i222].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size223;
            ::apache::thrift::protocol::TType _etype226;
            xfer += iprot->readListBegin(_etype226, _size223);
            this->DependabilityRequirements.resize(_size223);
            uint32_t _i227;
            for (_i227 = 0; _i227 < _size223; ++_i227)
            {
              xfer += this->DependabilityRequirements[_i227].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size228;
            ::apache::thrift::protocol::TType _etype231;
            xfer += iprot->readListBegin(_etype231, _size228);
            this->SubSystems.resize(_size228);
            uint32_t _i232;
            for (_i232 = 0; _i232 < _size228; ++_i232)
            {
              xfer += this->SubSystems[_i232].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIConfiguration::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIConfiguration");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter233;
    for (_iter233 = this->KeyValueMaps.begin(); _iter233 != this->KeyValueMaps.end(); ++_iter233)
    {
      xfer += (*_iter233).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter234;
    for (_iter234 = this->DependabilityRequirements.begin(); _iter234 != this->DependabilityRequirements.end(); ++_iter234)
    {
      xfer += (*_iter234).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter235;
    for (_iter235 = this->SubSystems.begin(); _iter235 != this->SubSystems.end(); ++_iter235)
    {
      xfer += (*_iter235).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIConfiguration &a, TDDIConfiguration &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubSystems, b.SubSystems);
  swap(a.__isset, b.__isset);
}

TDDIConfiguration::TDDIConfiguration(const TDDIConfiguration& other236) {
  Id = other236.Id;
  Name = other236.Name;
  Description = other236.Description;
  IsCitation = other236.IsCitation;
  IsAbstract = other236.IsAbstract;
  KeyValueMaps = other236.KeyValueMaps;
  CitedElement = other236.CitedElement;
  DependabilityRequirements = other236.DependabilityRequirements;
  AssuranceLevel = other236.AssuranceLevel;
  SubSystems = other236.SubSystems;
  __isset = other236.__isset;
}
TDDIConfiguration& TDDIConfiguration::operator=(const TDDIConfiguration& other237) {
  Id = other237.Id;
  Name = other237.Name;
  Description = other237.Description;
  IsCitation = other237.IsCitation;
  IsAbstract = other237.IsAbstract;
  KeyValueMaps = other237.KeyValueMaps;
  CitedElement = other237.CitedElement;
  DependabilityRequirements = other237.DependabilityRequirements;
  AssuranceLevel = other237.AssuranceLevel;
  SubSystems = other237.SubSystems;
  __isset = other237.__isset;
  return *this;
}
void TDDIConfiguration::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIConfiguration(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ")";
}


TDDIContext::~TDDIContext() throw() {
}


void TDDIContext::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIContext::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIContext::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIContext::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIContext::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIContext::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIContext::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIContext::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIContext::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIContext::__set_UsageHistory(const std::string& val) {
  this->UsageHistory = val;
}

void TDDIContext::__set_MissionTime(const double val) {
  this->MissionTime = val;
}

void TDDIContext::__set_MissionTimeTimeUnit(const TDDITimeUnit val) {
  this->MissionTimeTimeUnit = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIContext& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size238;
            ::apache::thrift::protocol::TType _etype241;
            xfer += iprot->readListBegin(_etype241, _size238);
            this->KeyValueMaps.resize(_size238);
            uint32_t _i242;
            for (_i242 = 0; _i242 < _size238; ++_i242)
            {
              xfer += this->KeyValueMaps[_i242].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size243;
            ::apache::thrift::protocol::TType _etype246;
            xfer += iprot->readListBegin(_etype246, _size243);
            this->DependabilityRequirements.resize(_size243);
            uint32_t _i247;
            for (_i247 = 0; _i247 < _size243; ++_i247)
            {
              xfer += this->DependabilityRequirements[_i247].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UsageHistory);
          this->__isset.UsageHistory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->MissionTime);
          this->__isset.MissionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast248;
          xfer += iprot->readI32(ecast248);
          this->MissionTimeTimeUnit = (TDDITimeUnit)ecast248;
          this->__isset.MissionTimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIContext");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter249;
    for (_iter249 = this->KeyValueMaps.begin(); _iter249 != this->KeyValueMaps.end(); ++_iter249)
    {
      xfer += (*_iter249).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter250;
    for (_iter250 = this->DependabilityRequirements.begin(); _iter250 != this->DependabilityRequirements.end(); ++_iter250)
    {
      xfer += (*_iter250).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsageHistory", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->UsageHistory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MissionTime", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->MissionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MissionTimeTimeUnit", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->MissionTimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIContext &a, TDDIContext &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.UsageHistory, b.UsageHistory);
  swap(a.MissionTime, b.MissionTime);
  swap(a.MissionTimeTimeUnit, b.MissionTimeTimeUnit);
  swap(a.__isset, b.__isset);
}

TDDIContext::TDDIContext(const TDDIContext& other251) {
  Id = other251.Id;
  Name = other251.Name;
  Description = other251.Description;
  IsCitation = other251.IsCitation;
  IsAbstract = other251.IsAbstract;
  KeyValueMaps = other251.KeyValueMaps;
  CitedElement = other251.CitedElement;
  DependabilityRequirements = other251.DependabilityRequirements;
  AssuranceLevel = other251.AssuranceLevel;
  UsageHistory = other251.UsageHistory;
  MissionTime = other251.MissionTime;
  MissionTimeTimeUnit = other251.MissionTimeTimeUnit;
  __isset = other251.__isset;
}
TDDIContext& TDDIContext::operator=(const TDDIContext& other252) {
  Id = other252.Id;
  Name = other252.Name;
  Description = other252.Description;
  IsCitation = other252.IsCitation;
  IsAbstract = other252.IsAbstract;
  KeyValueMaps = other252.KeyValueMaps;
  CitedElement = other252.CitedElement;
  DependabilityRequirements = other252.DependabilityRequirements;
  AssuranceLevel = other252.AssuranceLevel;
  UsageHistory = other252.UsageHistory;
  MissionTime = other252.MissionTime;
  MissionTimeTimeUnit = other252.MissionTimeTimeUnit;
  __isset = other252.__isset;
  return *this;
}
void TDDIContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIContext(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "UsageHistory=" << to_string(UsageHistory);
  out << ", " << "MissionTime=" << to_string(MissionTime);
  out << ", " << "MissionTimeTimeUnit=" << to_string(MissionTimeTimeUnit);
  out << ")";
}


TDDISystemBoundary::~TDDISystemBoundary() throw() {
}


void TDDISystemBoundary::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISystemBoundary::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISystemBoundary::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISystemBoundary::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDISystemBoundary::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDISystemBoundary::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDISystemBoundary::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDISystemBoundary::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDISystemBoundary::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISystemBoundary::__set_Ports(const std::vector<TDDIPortRef> & val) {
  this->Ports = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISystemBoundary& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISystemBoundary::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size253;
            ::apache::thrift::protocol::TType _etype256;
            xfer += iprot->readListBegin(_etype256, _size253);
            this->KeyValueMaps.resize(_size253);
            uint32_t _i257;
            for (_i257 = 0; _i257 < _size253; ++_i257)
            {
              xfer += this->KeyValueMaps[_i257].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size258;
            ::apache::thrift::protocol::TType _etype261;
            xfer += iprot->readListBegin(_etype261, _size258);
            this->DependabilityRequirements.resize(_size258);
            uint32_t _i262;
            for (_i262 = 0; _i262 < _size258; ++_i262)
            {
              xfer += this->DependabilityRequirements[_i262].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size263;
            ::apache::thrift::protocol::TType _etype266;
            xfer += iprot->readListBegin(_etype266, _size263);
            this->Ports.resize(_size263);
            uint32_t _i267;
            for (_i267 = 0; _i267 < _size263; ++_i267)
            {
              xfer += this->Ports[_i267].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISystemBoundary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISystemBoundary");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter268;
    for (_iter268 = this->KeyValueMaps.begin(); _iter268 != this->KeyValueMaps.end(); ++_iter268)
    {
      xfer += (*_iter268).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter269;
    for (_iter269 = this->DependabilityRequirements.begin(); _iter269 != this->DependabilityRequirements.end(); ++_iter269)
    {
      xfer += (*_iter269).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter270;
    for (_iter270 = this->Ports.begin(); _iter270 != this->Ports.end(); ++_iter270)
    {
      xfer += (*_iter270).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISystemBoundary &a, TDDISystemBoundary &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.Ports, b.Ports);
  swap(a.__isset, b.__isset);
}

TDDISystemBoundary::TDDISystemBoundary(const TDDISystemBoundary& other271) {
  Id = other271.Id;
  Name = other271.Name;
  Description = other271.Description;
  IsCitation = other271.IsCitation;
  IsAbstract = other271.IsAbstract;
  KeyValueMaps = other271.KeyValueMaps;
  CitedElement = other271.CitedElement;
  DependabilityRequirements = other271.DependabilityRequirements;
  AssuranceLevel = other271.AssuranceLevel;
  Ports = other271.Ports;
  __isset = other271.__isset;
}
TDDISystemBoundary& TDDISystemBoundary::operator=(const TDDISystemBoundary& other272) {
  Id = other272.Id;
  Name = other272.Name;
  Description = other272.Description;
  IsCitation = other272.IsCitation;
  IsAbstract = other272.IsAbstract;
  KeyValueMaps = other272.KeyValueMaps;
  CitedElement = other272.CitedElement;
  DependabilityRequirements = other272.DependabilityRequirements;
  AssuranceLevel = other272.AssuranceLevel;
  Ports = other272.Ports;
  __isset = other272.__isset;
  return *this;
}
void TDDISystemBoundary::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISystemBoundary(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "Ports=" << to_string(Ports);
  out << ")";
}


TDDISystem::~TDDISystem() throw() {
}


void TDDISystem::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISystem::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISystem::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISystem::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDISystem::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDISystem::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDISystem::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDISystem::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDISystem::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISystem::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}

void TDDISystem::__set_OverallLifetime(const double val) {
  this->OverallLifetime = val;
}

void TDDISystem::__set_OverallLifetimeTimeUnit(const TDDITimeUnit val) {
  this->OverallLifetimeTimeUnit = val;
}

void TDDISystem::__set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->RealisedFunctions = val;
}

void TDDISystem::__set_Configurations(const std::vector<TDDIConfiguration> & val) {
  this->Configurations = val;
}

void TDDISystem::__set_Contexts(const std::vector<TDDIContext> & val) {
  this->Contexts = val;
}

void TDDISystem::__set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val) {
  this->SystemBoundaries = val;
}

void TDDISystem::__set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val) {
  this->AppliedStandards = val;
}

void TDDISystem::__set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureModels = val;
}

void TDDISystem::__set_Ports(const std::vector<TDDIPortRef> & val) {
  this->Ports = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISystem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size273;
            ::apache::thrift::protocol::TType _etype276;
            xfer += iprot->readListBegin(_etype276, _size273);
            this->KeyValueMaps.resize(_size273);
            uint32_t _i277;
            for (_i277 = 0; _i277 < _size273; ++_i277)
            {
              xfer += this->KeyValueMaps[_i277].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size278;
            ::apache::thrift::protocol::TType _etype281;
            xfer += iprot->readListBegin(_etype281, _size278);
            this->DependabilityRequirements.resize(_size278);
            uint32_t _i282;
            for (_i282 = 0; _i282 < _size278; ++_i282)
            {
              xfer += this->DependabilityRequirements[_i282].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size283;
            ::apache::thrift::protocol::TType _etype286;
            xfer += iprot->readListBegin(_etype286, _size283);
            this->SubSystems.resize(_size283);
            uint32_t _i287;
            for (_i287 = 0; _i287 < _size283; ++_i287)
            {
              xfer += this->SubSystems[_i287].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OverallLifetime);
          this->__isset.OverallLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast288;
          xfer += iprot->readI32(ecast288);
          this->OverallLifetimeTimeUnit = (TDDITimeUnit)ecast288;
          this->__isset.OverallLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RealisedFunctions.clear();
            uint32_t _size289;
            ::apache::thrift::protocol::TType _etype292;
            xfer += iprot->readListBegin(_etype292, _size289);
            this->RealisedFunctions.resize(_size289);
            uint32_t _i293;
            for (_i293 = 0; _i293 < _size289; ++_i293)
            {
              xfer += this->RealisedFunctions[_i293].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RealisedFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Configurations.clear();
            uint32_t _size294;
            ::apache::thrift::protocol::TType _etype297;
            xfer += iprot->readListBegin(_etype297, _size294);
            this->Configurations.resize(_size294);
            uint32_t _i298;
            for (_i298 = 0; _i298 < _size294; ++_i298)
            {
              xfer += this->Configurations[_i298].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Configurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Contexts.clear();
            uint32_t _size299;
            ::apache::thrift::protocol::TType _etype302;
            xfer += iprot->readListBegin(_etype302, _size299);
            this->Contexts.resize(_size299);
            uint32_t _i303;
            for (_i303 = 0; _i303 < _size299; ++_i303)
            {
              xfer += this->Contexts[_i303].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SystemBoundaries.clear();
            uint32_t _size304;
            ::apache::thrift::protocol::TType _etype307;
            xfer += iprot->readListBegin(_etype307, _size304);
            this->SystemBoundaries.resize(_size304);
            uint32_t _i308;
            for (_i308 = 0; _i308 < _size304; ++_i308)
            {
              xfer += this->SystemBoundaries[_i308].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SystemBoundaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AppliedStandards.clear();
            uint32_t _size309;
            ::apache::thrift::protocol::TType _etype312;
            xfer += iprot->readListBegin(_etype312, _size309);
            this->AppliedStandards.resize(_size309);
            uint32_t _i313;
            for (_i313 = 0; _i313 < _size309; ++_i313)
            {
              xfer += this->AppliedStandards[_i313].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AppliedStandards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size314;
            ::apache::thrift::protocol::TType _etype317;
            xfer += iprot->readListBegin(_etype317, _size314);
            this->FailureModels.resize(_size314);
            uint32_t _i318;
            for (_i318 = 0; _i318 < _size314; ++_i318)
            {
              xfer += this->FailureModels[_i318].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size319;
            ::apache::thrift::protocol::TType _etype322;
            xfer += iprot->readListBegin(_etype322, _size319);
            this->Ports.resize(_size319);
            uint32_t _i323;
            for (_i323 = 0; _i323 < _size319; ++_i323)
            {
              xfer += this->Ports[_i323].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISystem");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter324;
    for (_iter324 = this->KeyValueMaps.begin(); _iter324 != this->KeyValueMaps.end(); ++_iter324)
    {
      xfer += (*_iter324).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter325;
    for (_iter325 = this->DependabilityRequirements.begin(); _iter325 != this->DependabilityRequirements.end(); ++_iter325)
    {
      xfer += (*_iter325).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter326;
    for (_iter326 = this->SubSystems.begin(); _iter326 != this->SubSystems.end(); ++_iter326)
    {
      xfer += (*_iter326).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetime", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->OverallLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->OverallLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RealisedFunctions", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RealisedFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter327;
    for (_iter327 = this->RealisedFunctions.begin(); _iter327 != this->RealisedFunctions.end(); ++_iter327)
    {
      xfer += (*_iter327).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Configurations", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Configurations.size()));
    std::vector<TDDIConfiguration> ::const_iterator _iter328;
    for (_iter328 = this->Configurations.begin(); _iter328 != this->Configurations.end(); ++_iter328)
    {
      xfer += (*_iter328).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contexts", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Contexts.size()));
    std::vector<TDDIContext> ::const_iterator _iter329;
    for (_iter329 = this->Contexts.begin(); _iter329 != this->Contexts.end(); ++_iter329)
    {
      xfer += (*_iter329).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SystemBoundaries", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SystemBoundaries.size()));
    std::vector<TDDISystemBoundary> ::const_iterator _iter330;
    for (_iter330 = this->SystemBoundaries.begin(); _iter330 != this->SystemBoundaries.end(); ++_iter330)
    {
      xfer += (*_iter330).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AppliedStandards", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AppliedStandards.size()));
    std::vector<TDDIAbstractStandardRef> ::const_iterator _iter331;
    for (_iter331 = this->AppliedStandards.begin(); _iter331 != this->AppliedStandards.end(); ++_iter331)
    {
      xfer += (*_iter331).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter332;
    for (_iter332 = this->FailureModels.begin(); _iter332 != this->FailureModels.end(); ++_iter332)
    {
      xfer += (*_iter332).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter333;
    for (_iter333 = this->Ports.begin(); _iter333 != this->Ports.end(); ++_iter333)
    {
      xfer += (*_iter333).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISystem &a, TDDISystem &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubSystems, b.SubSystems);
  swap(a.OverallLifetime, b.OverallLifetime);
  swap(a.OverallLifetimeTimeUnit, b.OverallLifetimeTimeUnit);
  swap(a.RealisedFunctions, b.RealisedFunctions);
  swap(a.Configurations, b.Configurations);
  swap(a.Contexts, b.Contexts);
  swap(a.SystemBoundaries, b.SystemBoundaries);
  swap(a.AppliedStandards, b.AppliedStandards);
  swap(a.FailureModels, b.FailureModels);
  swap(a.Ports, b.Ports);
  swap(a.__isset, b.__isset);
}

TDDISystem::TDDISystem(const TDDISystem& other334) {
  Id = other334.Id;
  Name = other334.Name;
  Description = other334.Description;
  IsCitation = other334.IsCitation;
  IsAbstract = other334.IsAbstract;
  KeyValueMaps = other334.KeyValueMaps;
  CitedElement = other334.CitedElement;
  DependabilityRequirements = other334.DependabilityRequirements;
  AssuranceLevel = other334.AssuranceLevel;
  SubSystems = other334.SubSystems;
  OverallLifetime = other334.OverallLifetime;
  OverallLifetimeTimeUnit = other334.OverallLifetimeTimeUnit;
  RealisedFunctions = other334.RealisedFunctions;
  Configurations = other334.Configurations;
  Contexts = other334.Contexts;
  SystemBoundaries = other334.SystemBoundaries;
  AppliedStandards = other334.AppliedStandards;
  FailureModels = other334.FailureModels;
  Ports = other334.Ports;
  __isset = other334.__isset;
}
TDDISystem& TDDISystem::operator=(const TDDISystem& other335) {
  Id = other335.Id;
  Name = other335.Name;
  Description = other335.Description;
  IsCitation = other335.IsCitation;
  IsAbstract = other335.IsAbstract;
  KeyValueMaps = other335.KeyValueMaps;
  CitedElement = other335.CitedElement;
  DependabilityRequirements = other335.DependabilityRequirements;
  AssuranceLevel = other335.AssuranceLevel;
  SubSystems = other335.SubSystems;
  OverallLifetime = other335.OverallLifetime;
  OverallLifetimeTimeUnit = other335.OverallLifetimeTimeUnit;
  RealisedFunctions = other335.RealisedFunctions;
  Configurations = other335.Configurations;
  Contexts = other335.Contexts;
  SystemBoundaries = other335.SystemBoundaries;
  AppliedStandards = other335.AppliedStandards;
  FailureModels = other335.FailureModels;
  Ports = other335.Ports;
  __isset = other335.__isset;
  return *this;
}
void TDDISystem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISystem(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ", " << "OverallLifetime=" << to_string(OverallLifetime);
  out << ", " << "OverallLifetimeTimeUnit=" << to_string(OverallLifetimeTimeUnit);
  out << ", " << "RealisedFunctions=" << to_string(RealisedFunctions);
  out << ", " << "Configurations=" << to_string(Configurations);
  out << ", " << "Contexts=" << to_string(Contexts);
  out << ", " << "SystemBoundaries=" << to_string(SystemBoundaries);
  out << ", " << "AppliedStandards=" << to_string(AppliedStandards);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "Ports=" << to_string(Ports);
  out << ")";
}


TDDILogicalComponent::~TDDILogicalComponent() throw() {
}


void TDDILogicalComponent::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDILogicalComponent::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDILogicalComponent::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDILogicalComponent::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDILogicalComponent::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDILogicalComponent::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDILogicalComponent::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDILogicalComponent::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDILogicalComponent::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDILogicalComponent::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}

void TDDILogicalComponent::__set_OverallLifetime(const double val) {
  this->OverallLifetime = val;
}

void TDDILogicalComponent::__set_OverallLifetimeTimeUnit(const TDDITimeUnit val) {
  this->OverallLifetimeTimeUnit = val;
}

void TDDILogicalComponent::__set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->RealisedFunctions = val;
}

void TDDILogicalComponent::__set_Configurations(const std::vector<TDDIConfiguration> & val) {
  this->Configurations = val;
}

void TDDILogicalComponent::__set_Contexts(const std::vector<TDDIContext> & val) {
  this->Contexts = val;
}

void TDDILogicalComponent::__set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val) {
  this->SystemBoundaries = val;
}

void TDDILogicalComponent::__set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val) {
  this->AppliedStandards = val;
}

void TDDILogicalComponent::__set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureModels = val;
}

void TDDILogicalComponent::__set_Ports(const std::vector<TDDIPortRef> & val) {
  this->Ports = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILogicalComponent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILogicalComponent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size336;
            ::apache::thrift::protocol::TType _etype339;
            xfer += iprot->readListBegin(_etype339, _size336);
            this->KeyValueMaps.resize(_size336);
            uint32_t _i340;
            for (_i340 = 0; _i340 < _size336; ++_i340)
            {
              xfer += this->KeyValueMaps[_i340].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size341;
            ::apache::thrift::protocol::TType _etype344;
            xfer += iprot->readListBegin(_etype344, _size341);
            this->DependabilityRequirements.resize(_size341);
            uint32_t _i345;
            for (_i345 = 0; _i345 < _size341; ++_i345)
            {
              xfer += this->DependabilityRequirements[_i345].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size346;
            ::apache::thrift::protocol::TType _etype349;
            xfer += iprot->readListBegin(_etype349, _size346);
            this->SubSystems.resize(_size346);
            uint32_t _i350;
            for (_i350 = 0; _i350 < _size346; ++_i350)
            {
              xfer += this->SubSystems[_i350].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OverallLifetime);
          this->__isset.OverallLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast351;
          xfer += iprot->readI32(ecast351);
          this->OverallLifetimeTimeUnit = (TDDITimeUnit)ecast351;
          this->__isset.OverallLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RealisedFunctions.clear();
            uint32_t _size352;
            ::apache::thrift::protocol::TType _etype355;
            xfer += iprot->readListBegin(_etype355, _size352);
            this->RealisedFunctions.resize(_size352);
            uint32_t _i356;
            for (_i356 = 0; _i356 < _size352; ++_i356)
            {
              xfer += this->RealisedFunctions[_i356].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RealisedFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Configurations.clear();
            uint32_t _size357;
            ::apache::thrift::protocol::TType _etype360;
            xfer += iprot->readListBegin(_etype360, _size357);
            this->Configurations.resize(_size357);
            uint32_t _i361;
            for (_i361 = 0; _i361 < _size357; ++_i361)
            {
              xfer += this->Configurations[_i361].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Configurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Contexts.clear();
            uint32_t _size362;
            ::apache::thrift::protocol::TType _etype365;
            xfer += iprot->readListBegin(_etype365, _size362);
            this->Contexts.resize(_size362);
            uint32_t _i366;
            for (_i366 = 0; _i366 < _size362; ++_i366)
            {
              xfer += this->Contexts[_i366].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SystemBoundaries.clear();
            uint32_t _size367;
            ::apache::thrift::protocol::TType _etype370;
            xfer += iprot->readListBegin(_etype370, _size367);
            this->SystemBoundaries.resize(_size367);
            uint32_t _i371;
            for (_i371 = 0; _i371 < _size367; ++_i371)
            {
              xfer += this->SystemBoundaries[_i371].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SystemBoundaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AppliedStandards.clear();
            uint32_t _size372;
            ::apache::thrift::protocol::TType _etype375;
            xfer += iprot->readListBegin(_etype375, _size372);
            this->AppliedStandards.resize(_size372);
            uint32_t _i376;
            for (_i376 = 0; _i376 < _size372; ++_i376)
            {
              xfer += this->AppliedStandards[_i376].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AppliedStandards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size377;
            ::apache::thrift::protocol::TType _etype380;
            xfer += iprot->readListBegin(_etype380, _size377);
            this->FailureModels.resize(_size377);
            uint32_t _i381;
            for (_i381 = 0; _i381 < _size377; ++_i381)
            {
              xfer += this->FailureModels[_i381].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size382;
            ::apache::thrift::protocol::TType _etype385;
            xfer += iprot->readListBegin(_etype385, _size382);
            this->Ports.resize(_size382);
            uint32_t _i386;
            for (_i386 = 0; _i386 < _size382; ++_i386)
            {
              xfer += this->Ports[_i386].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILogicalComponent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILogicalComponent");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter387;
    for (_iter387 = this->KeyValueMaps.begin(); _iter387 != this->KeyValueMaps.end(); ++_iter387)
    {
      xfer += (*_iter387).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter388;
    for (_iter388 = this->DependabilityRequirements.begin(); _iter388 != this->DependabilityRequirements.end(); ++_iter388)
    {
      xfer += (*_iter388).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter389;
    for (_iter389 = this->SubSystems.begin(); _iter389 != this->SubSystems.end(); ++_iter389)
    {
      xfer += (*_iter389).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetime", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->OverallLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->OverallLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RealisedFunctions", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RealisedFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter390;
    for (_iter390 = this->RealisedFunctions.begin(); _iter390 != this->RealisedFunctions.end(); ++_iter390)
    {
      xfer += (*_iter390).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Configurations", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Configurations.size()));
    std::vector<TDDIConfiguration> ::const_iterator _iter391;
    for (_iter391 = this->Configurations.begin(); _iter391 != this->Configurations.end(); ++_iter391)
    {
      xfer += (*_iter391).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contexts", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Contexts.size()));
    std::vector<TDDIContext> ::const_iterator _iter392;
    for (_iter392 = this->Contexts.begin(); _iter392 != this->Contexts.end(); ++_iter392)
    {
      xfer += (*_iter392).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SystemBoundaries", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SystemBoundaries.size()));
    std::vector<TDDISystemBoundary> ::const_iterator _iter393;
    for (_iter393 = this->SystemBoundaries.begin(); _iter393 != this->SystemBoundaries.end(); ++_iter393)
    {
      xfer += (*_iter393).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AppliedStandards", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AppliedStandards.size()));
    std::vector<TDDIAbstractStandardRef> ::const_iterator _iter394;
    for (_iter394 = this->AppliedStandards.begin(); _iter394 != this->AppliedStandards.end(); ++_iter394)
    {
      xfer += (*_iter394).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter395;
    for (_iter395 = this->FailureModels.begin(); _iter395 != this->FailureModels.end(); ++_iter395)
    {
      xfer += (*_iter395).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter396;
    for (_iter396 = this->Ports.begin(); _iter396 != this->Ports.end(); ++_iter396)
    {
      xfer += (*_iter396).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILogicalComponent &a, TDDILogicalComponent &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubSystems, b.SubSystems);
  swap(a.OverallLifetime, b.OverallLifetime);
  swap(a.OverallLifetimeTimeUnit, b.OverallLifetimeTimeUnit);
  swap(a.RealisedFunctions, b.RealisedFunctions);
  swap(a.Configurations, b.Configurations);
  swap(a.Contexts, b.Contexts);
  swap(a.SystemBoundaries, b.SystemBoundaries);
  swap(a.AppliedStandards, b.AppliedStandards);
  swap(a.FailureModels, b.FailureModels);
  swap(a.Ports, b.Ports);
  swap(a.__isset, b.__isset);
}

TDDILogicalComponent::TDDILogicalComponent(const TDDILogicalComponent& other397) {
  Id = other397.Id;
  Name = other397.Name;
  Description = other397.Description;
  IsCitation = other397.IsCitation;
  IsAbstract = other397.IsAbstract;
  KeyValueMaps = other397.KeyValueMaps;
  CitedElement = other397.CitedElement;
  DependabilityRequirements = other397.DependabilityRequirements;
  AssuranceLevel = other397.AssuranceLevel;
  SubSystems = other397.SubSystems;
  OverallLifetime = other397.OverallLifetime;
  OverallLifetimeTimeUnit = other397.OverallLifetimeTimeUnit;
  RealisedFunctions = other397.RealisedFunctions;
  Configurations = other397.Configurations;
  Contexts = other397.Contexts;
  SystemBoundaries = other397.SystemBoundaries;
  AppliedStandards = other397.AppliedStandards;
  FailureModels = other397.FailureModels;
  Ports = other397.Ports;
  __isset = other397.__isset;
}
TDDILogicalComponent& TDDILogicalComponent::operator=(const TDDILogicalComponent& other398) {
  Id = other398.Id;
  Name = other398.Name;
  Description = other398.Description;
  IsCitation = other398.IsCitation;
  IsAbstract = other398.IsAbstract;
  KeyValueMaps = other398.KeyValueMaps;
  CitedElement = other398.CitedElement;
  DependabilityRequirements = other398.DependabilityRequirements;
  AssuranceLevel = other398.AssuranceLevel;
  SubSystems = other398.SubSystems;
  OverallLifetime = other398.OverallLifetime;
  OverallLifetimeTimeUnit = other398.OverallLifetimeTimeUnit;
  RealisedFunctions = other398.RealisedFunctions;
  Configurations = other398.Configurations;
  Contexts = other398.Contexts;
  SystemBoundaries = other398.SystemBoundaries;
  AppliedStandards = other398.AppliedStandards;
  FailureModels = other398.FailureModels;
  Ports = other398.Ports;
  __isset = other398.__isset;
  return *this;
}
void TDDILogicalComponent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILogicalComponent(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ", " << "OverallLifetime=" << to_string(OverallLifetime);
  out << ", " << "OverallLifetimeTimeUnit=" << to_string(OverallLifetimeTimeUnit);
  out << ", " << "RealisedFunctions=" << to_string(RealisedFunctions);
  out << ", " << "Configurations=" << to_string(Configurations);
  out << ", " << "Contexts=" << to_string(Contexts);
  out << ", " << "SystemBoundaries=" << to_string(SystemBoundaries);
  out << ", " << "AppliedStandards=" << to_string(AppliedStandards);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "Ports=" << to_string(Ports);
  out << ")";
}


TDDISafetyRelatedSystem::~TDDISafetyRelatedSystem() throw() {
}


void TDDISafetyRelatedSystem::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISafetyRelatedSystem::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISafetyRelatedSystem::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISafetyRelatedSystem::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDISafetyRelatedSystem::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDISafetyRelatedSystem::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDISafetyRelatedSystem::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDISafetyRelatedSystem::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDISafetyRelatedSystem::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISafetyRelatedSystem::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}

void TDDISafetyRelatedSystem::__set_OverallLifetime(const double val) {
  this->OverallLifetime = val;
}

void TDDISafetyRelatedSystem::__set_OverallLifetimeTimeUnit(const TDDITimeUnit val) {
  this->OverallLifetimeTimeUnit = val;
}

void TDDISafetyRelatedSystem::__set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->RealisedFunctions = val;
}

void TDDISafetyRelatedSystem::__set_Configurations(const std::vector<TDDIConfiguration> & val) {
  this->Configurations = val;
}

void TDDISafetyRelatedSystem::__set_Contexts(const std::vector<TDDIContext> & val) {
  this->Contexts = val;
}

void TDDISafetyRelatedSystem::__set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val) {
  this->SystemBoundaries = val;
}

void TDDISafetyRelatedSystem::__set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val) {
  this->AppliedStandards = val;
}

void TDDISafetyRelatedSystem::__set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureModels = val;
}

void TDDISafetyRelatedSystem::__set_Ports(const std::vector<TDDIPortRef> & val) {
  this->Ports = val;
}

void TDDISafetyRelatedSystem::__set_SafeState(const std::string& val) {
  this->SafeState = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISafetyRelatedSystem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISafetyRelatedSystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size399;
            ::apache::thrift::protocol::TType _etype402;
            xfer += iprot->readListBegin(_etype402, _size399);
            this->KeyValueMaps.resize(_size399);
            uint32_t _i403;
            for (_i403 = 0; _i403 < _size399; ++_i403)
            {
              xfer += this->KeyValueMaps[_i403].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size404;
            ::apache::thrift::protocol::TType _etype407;
            xfer += iprot->readListBegin(_etype407, _size404);
            this->DependabilityRequirements.resize(_size404);
            uint32_t _i408;
            for (_i408 = 0; _i408 < _size404; ++_i408)
            {
              xfer += this->DependabilityRequirements[_i408].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size409;
            ::apache::thrift::protocol::TType _etype412;
            xfer += iprot->readListBegin(_etype412, _size409);
            this->SubSystems.resize(_size409);
            uint32_t _i413;
            for (_i413 = 0; _i413 < _size409; ++_i413)
            {
              xfer += this->SubSystems[_i413].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OverallLifetime);
          this->__isset.OverallLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast414;
          xfer += iprot->readI32(ecast414);
          this->OverallLifetimeTimeUnit = (TDDITimeUnit)ecast414;
          this->__isset.OverallLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RealisedFunctions.clear();
            uint32_t _size415;
            ::apache::thrift::protocol::TType _etype418;
            xfer += iprot->readListBegin(_etype418, _size415);
            this->RealisedFunctions.resize(_size415);
            uint32_t _i419;
            for (_i419 = 0; _i419 < _size415; ++_i419)
            {
              xfer += this->RealisedFunctions[_i419].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RealisedFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Configurations.clear();
            uint32_t _size420;
            ::apache::thrift::protocol::TType _etype423;
            xfer += iprot->readListBegin(_etype423, _size420);
            this->Configurations.resize(_size420);
            uint32_t _i424;
            for (_i424 = 0; _i424 < _size420; ++_i424)
            {
              xfer += this->Configurations[_i424].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Configurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Contexts.clear();
            uint32_t _size425;
            ::apache::thrift::protocol::TType _etype428;
            xfer += iprot->readListBegin(_etype428, _size425);
            this->Contexts.resize(_size425);
            uint32_t _i429;
            for (_i429 = 0; _i429 < _size425; ++_i429)
            {
              xfer += this->Contexts[_i429].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SystemBoundaries.clear();
            uint32_t _size430;
            ::apache::thrift::protocol::TType _etype433;
            xfer += iprot->readListBegin(_etype433, _size430);
            this->SystemBoundaries.resize(_size430);
            uint32_t _i434;
            for (_i434 = 0; _i434 < _size430; ++_i434)
            {
              xfer += this->SystemBoundaries[_i434].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SystemBoundaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AppliedStandards.clear();
            uint32_t _size435;
            ::apache::thrift::protocol::TType _etype438;
            xfer += iprot->readListBegin(_etype438, _size435);
            this->AppliedStandards.resize(_size435);
            uint32_t _i439;
            for (_i439 = 0; _i439 < _size435; ++_i439)
            {
              xfer += this->AppliedStandards[_i439].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AppliedStandards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size440;
            ::apache::thrift::protocol::TType _etype443;
            xfer += iprot->readListBegin(_etype443, _size440);
            this->FailureModels.resize(_size440);
            uint32_t _i444;
            for (_i444 = 0; _i444 < _size440; ++_i444)
            {
              xfer += this->FailureModels[_i444].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size445;
            ::apache::thrift::protocol::TType _etype448;
            xfer += iprot->readListBegin(_etype448, _size445);
            this->Ports.resize(_size445);
            uint32_t _i449;
            for (_i449 = 0; _i449 < _size445; ++_i449)
            {
              xfer += this->Ports[_i449].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeState);
          this->__isset.SafeState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISafetyRelatedSystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISafetyRelatedSystem");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter450;
    for (_iter450 = this->KeyValueMaps.begin(); _iter450 != this->KeyValueMaps.end(); ++_iter450)
    {
      xfer += (*_iter450).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter451;
    for (_iter451 = this->DependabilityRequirements.begin(); _iter451 != this->DependabilityRequirements.end(); ++_iter451)
    {
      xfer += (*_iter451).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter452;
    for (_iter452 = this->SubSystems.begin(); _iter452 != this->SubSystems.end(); ++_iter452)
    {
      xfer += (*_iter452).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetime", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->OverallLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->OverallLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RealisedFunctions", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RealisedFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter453;
    for (_iter453 = this->RealisedFunctions.begin(); _iter453 != this->RealisedFunctions.end(); ++_iter453)
    {
      xfer += (*_iter453).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Configurations", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Configurations.size()));
    std::vector<TDDIConfiguration> ::const_iterator _iter454;
    for (_iter454 = this->Configurations.begin(); _iter454 != this->Configurations.end(); ++_iter454)
    {
      xfer += (*_iter454).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contexts", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Contexts.size()));
    std::vector<TDDIContext> ::const_iterator _iter455;
    for (_iter455 = this->Contexts.begin(); _iter455 != this->Contexts.end(); ++_iter455)
    {
      xfer += (*_iter455).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SystemBoundaries", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SystemBoundaries.size()));
    std::vector<TDDISystemBoundary> ::const_iterator _iter456;
    for (_iter456 = this->SystemBoundaries.begin(); _iter456 != this->SystemBoundaries.end(); ++_iter456)
    {
      xfer += (*_iter456).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AppliedStandards", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AppliedStandards.size()));
    std::vector<TDDIAbstractStandardRef> ::const_iterator _iter457;
    for (_iter457 = this->AppliedStandards.begin(); _iter457 != this->AppliedStandards.end(); ++_iter457)
    {
      xfer += (*_iter457).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter458;
    for (_iter458 = this->FailureModels.begin(); _iter458 != this->FailureModels.end(); ++_iter458)
    {
      xfer += (*_iter458).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter459;
    for (_iter459 = this->Ports.begin(); _iter459 != this->Ports.end(); ++_iter459)
    {
      xfer += (*_iter459).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeState", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->SafeState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISafetyRelatedSystem &a, TDDISafetyRelatedSystem &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubSystems, b.SubSystems);
  swap(a.OverallLifetime, b.OverallLifetime);
  swap(a.OverallLifetimeTimeUnit, b.OverallLifetimeTimeUnit);
  swap(a.RealisedFunctions, b.RealisedFunctions);
  swap(a.Configurations, b.Configurations);
  swap(a.Contexts, b.Contexts);
  swap(a.SystemBoundaries, b.SystemBoundaries);
  swap(a.AppliedStandards, b.AppliedStandards);
  swap(a.FailureModels, b.FailureModels);
  swap(a.Ports, b.Ports);
  swap(a.SafeState, b.SafeState);
  swap(a.__isset, b.__isset);
}

TDDISafetyRelatedSystem::TDDISafetyRelatedSystem(const TDDISafetyRelatedSystem& other460) {
  Id = other460.Id;
  Name = other460.Name;
  Description = other460.Description;
  IsCitation = other460.IsCitation;
  IsAbstract = other460.IsAbstract;
  KeyValueMaps = other460.KeyValueMaps;
  CitedElement = other460.CitedElement;
  DependabilityRequirements = other460.DependabilityRequirements;
  AssuranceLevel = other460.AssuranceLevel;
  SubSystems = other460.SubSystems;
  OverallLifetime = other460.OverallLifetime;
  OverallLifetimeTimeUnit = other460.OverallLifetimeTimeUnit;
  RealisedFunctions = other460.RealisedFunctions;
  Configurations = other460.Configurations;
  Contexts = other460.Contexts;
  SystemBoundaries = other460.SystemBoundaries;
  AppliedStandards = other460.AppliedStandards;
  FailureModels = other460.FailureModels;
  Ports = other460.Ports;
  SafeState = other460.SafeState;
  __isset = other460.__isset;
}
TDDISafetyRelatedSystem& TDDISafetyRelatedSystem::operator=(const TDDISafetyRelatedSystem& other461) {
  Id = other461.Id;
  Name = other461.Name;
  Description = other461.Description;
  IsCitation = other461.IsCitation;
  IsAbstract = other461.IsAbstract;
  KeyValueMaps = other461.KeyValueMaps;
  CitedElement = other461.CitedElement;
  DependabilityRequirements = other461.DependabilityRequirements;
  AssuranceLevel = other461.AssuranceLevel;
  SubSystems = other461.SubSystems;
  OverallLifetime = other461.OverallLifetime;
  OverallLifetimeTimeUnit = other461.OverallLifetimeTimeUnit;
  RealisedFunctions = other461.RealisedFunctions;
  Configurations = other461.Configurations;
  Contexts = other461.Contexts;
  SystemBoundaries = other461.SystemBoundaries;
  AppliedStandards = other461.AppliedStandards;
  FailureModels = other461.FailureModels;
  Ports = other461.Ports;
  SafeState = other461.SafeState;
  __isset = other461.__isset;
  return *this;
}
void TDDISafetyRelatedSystem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISafetyRelatedSystem(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ", " << "OverallLifetime=" << to_string(OverallLifetime);
  out << ", " << "OverallLifetimeTimeUnit=" << to_string(OverallLifetimeTimeUnit);
  out << ", " << "RealisedFunctions=" << to_string(RealisedFunctions);
  out << ", " << "Configurations=" << to_string(Configurations);
  out << ", " << "Contexts=" << to_string(Contexts);
  out << ", " << "SystemBoundaries=" << to_string(SystemBoundaries);
  out << ", " << "AppliedStandards=" << to_string(AppliedStandards);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "SafeState=" << to_string(SafeState);
  out << ")";
}


TDDILifecycleCondition::~TDDILifecycleCondition() throw() {
}


void TDDILifecycleCondition::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDILifecycleCondition::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDILifecycleCondition::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDILifecycleCondition::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDILifecycleCondition::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDILifecycleCondition::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDILifecycleCondition::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDILifecycleCondition::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDILifecycleCondition::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDILifecycleCondition::__set_Value(const std::string& val) {
  this->Value = val;
}

void TDDILifecycleCondition::__set_Conditions(const std::vector<TDDILifecycleConditionRef> & val) {
  this->Conditions = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILifecycleCondition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILifecycleCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size462;
            ::apache::thrift::protocol::TType _etype465;
            xfer += iprot->readListBegin(_etype465, _size462);
            this->KeyValueMaps.resize(_size462);
            uint32_t _i466;
            for (_i466 = 0; _i466 < _size462; ++_i466)
            {
              xfer += this->KeyValueMaps[_i466].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size467;
            ::apache::thrift::protocol::TType _etype470;
            xfer += iprot->readListBegin(_etype470, _size467);
            this->DependabilityRequirements.resize(_size467);
            uint32_t _i471;
            for (_i471 = 0; _i471 < _size467; ++_i471)
            {
              xfer += this->DependabilityRequirements[_i471].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Conditions.clear();
            uint32_t _size472;
            ::apache::thrift::protocol::TType _etype475;
            xfer += iprot->readListBegin(_etype475, _size472);
            this->Conditions.resize(_size472);
            uint32_t _i476;
            for (_i476 = 0; _i476 < _size472; ++_i476)
            {
              xfer += this->Conditions[_i476].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Conditions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILifecycleCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILifecycleCondition");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter477;
    for (_iter477 = this->KeyValueMaps.begin(); _iter477 != this->KeyValueMaps.end(); ++_iter477)
    {
      xfer += (*_iter477).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter478;
    for (_iter478 = this->DependabilityRequirements.begin(); _iter478 != this->DependabilityRequirements.end(); ++_iter478)
    {
      xfer += (*_iter478).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Conditions", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Conditions.size()));
    std::vector<TDDILifecycleConditionRef> ::const_iterator _iter479;
    for (_iter479 = this->Conditions.begin(); _iter479 != this->Conditions.end(); ++_iter479)
    {
      xfer += (*_iter479).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILifecycleCondition &a, TDDILifecycleCondition &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.Value, b.Value);
  swap(a.Conditions, b.Conditions);
  swap(a.__isset, b.__isset);
}

TDDILifecycleCondition::TDDILifecycleCondition(const TDDILifecycleCondition& other480) {
  Id = other480.Id;
  Name = other480.Name;
  Description = other480.Description;
  IsCitation = other480.IsCitation;
  IsAbstract = other480.IsAbstract;
  KeyValueMaps = other480.KeyValueMaps;
  CitedElement = other480.CitedElement;
  DependabilityRequirements = other480.DependabilityRequirements;
  AssuranceLevel = other480.AssuranceLevel;
  Value = other480.Value;
  Conditions = other480.Conditions;
  __isset = other480.__isset;
}
TDDILifecycleCondition& TDDILifecycleCondition::operator=(const TDDILifecycleCondition& other481) {
  Id = other481.Id;
  Name = other481.Name;
  Description = other481.Description;
  IsCitation = other481.IsCitation;
  IsAbstract = other481.IsAbstract;
  KeyValueMaps = other481.KeyValueMaps;
  CitedElement = other481.CitedElement;
  DependabilityRequirements = other481.DependabilityRequirements;
  AssuranceLevel = other481.AssuranceLevel;
  Value = other481.Value;
  Conditions = other481.Conditions;
  __isset = other481.__isset;
  return *this;
}
void TDDILifecycleCondition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILifecycleCondition(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Conditions=" << to_string(Conditions);
  out << ")";
}


TDDIPhysicalComponent::~TDDIPhysicalComponent() throw() {
}


void TDDIPhysicalComponent::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIPhysicalComponent::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIPhysicalComponent::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIPhysicalComponent::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIPhysicalComponent::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIPhysicalComponent::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIPhysicalComponent::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIPhysicalComponent::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIPhysicalComponent::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIPhysicalComponent::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}

void TDDIPhysicalComponent::__set_OverallLifetime(const double val) {
  this->OverallLifetime = val;
}

void TDDIPhysicalComponent::__set_OverallLifetimeTimeUnit(const TDDITimeUnit val) {
  this->OverallLifetimeTimeUnit = val;
}

void TDDIPhysicalComponent::__set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->RealisedFunctions = val;
}

void TDDIPhysicalComponent::__set_Configurations(const std::vector<TDDIConfiguration> & val) {
  this->Configurations = val;
}

void TDDIPhysicalComponent::__set_Contexts(const std::vector<TDDIContext> & val) {
  this->Contexts = val;
}

void TDDIPhysicalComponent::__set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val) {
  this->SystemBoundaries = val;
}

void TDDIPhysicalComponent::__set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val) {
  this->AppliedStandards = val;
}

void TDDIPhysicalComponent::__set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureModels = val;
}

void TDDIPhysicalComponent::__set_Ports(const std::vector<TDDIPortRef> & val) {
  this->Ports = val;
}

void TDDIPhysicalComponent::__set_Dimensions(const std::string& val) {
  this->Dimensions = val;
}

void TDDIPhysicalComponent::__set_PricePerUnit(const int32_t val) {
  this->PricePerUnit = val;
}

void TDDIPhysicalComponent::__set_Mass(const double val) {
  this->Mass = val;
}

void TDDIPhysicalComponent::__set_ProtectionCategory(const int32_t val) {
  this->ProtectionCategory = val;
}

void TDDIPhysicalComponent::__set_UsefulLifetime(const double val) {
  this->UsefulLifetime = val;
}

void TDDIPhysicalComponent::__set_UsefulLifetimeTimeUnit(const TDDITimeUnit val) {
  this->UsefulLifetimeTimeUnit = val;
}

void TDDIPhysicalComponent::__set_LogicalComponents(const std::vector<TDDILogicalComponent> & val) {
  this->LogicalComponents = val;
}

void TDDIPhysicalComponent::__set_LifecycleConditions(const std::vector<TDDILifecycleCondition> & val) {
  this->LifecycleConditions = val;
}

void TDDIPhysicalComponent::__set_MaintenanceProcedure(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val) {
  this->MaintenanceProcedure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPhysicalComponent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPhysicalComponent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size482;
            ::apache::thrift::protocol::TType _etype485;
            xfer += iprot->readListBegin(_etype485, _size482);
            this->KeyValueMaps.resize(_size482);
            uint32_t _i486;
            for (_i486 = 0; _i486 < _size482; ++_i486)
            {
              xfer += this->KeyValueMaps[_i486].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size487;
            ::apache::thrift::protocol::TType _etype490;
            xfer += iprot->readListBegin(_etype490, _size487);
            this->DependabilityRequirements.resize(_size487);
            uint32_t _i491;
            for (_i491 = 0; _i491 < _size487; ++_i491)
            {
              xfer += this->DependabilityRequirements[_i491].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size492;
            ::apache::thrift::protocol::TType _etype495;
            xfer += iprot->readListBegin(_etype495, _size492);
            this->SubSystems.resize(_size492);
            uint32_t _i496;
            for (_i496 = 0; _i496 < _size492; ++_i496)
            {
              xfer += this->SubSystems[_i496].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OverallLifetime);
          this->__isset.OverallLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast497;
          xfer += iprot->readI32(ecast497);
          this->OverallLifetimeTimeUnit = (TDDITimeUnit)ecast497;
          this->__isset.OverallLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RealisedFunctions.clear();
            uint32_t _size498;
            ::apache::thrift::protocol::TType _etype501;
            xfer += iprot->readListBegin(_etype501, _size498);
            this->RealisedFunctions.resize(_size498);
            uint32_t _i502;
            for (_i502 = 0; _i502 < _size498; ++_i502)
            {
              xfer += this->RealisedFunctions[_i502].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RealisedFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Configurations.clear();
            uint32_t _size503;
            ::apache::thrift::protocol::TType _etype506;
            xfer += iprot->readListBegin(_etype506, _size503);
            this->Configurations.resize(_size503);
            uint32_t _i507;
            for (_i507 = 0; _i507 < _size503; ++_i507)
            {
              xfer += this->Configurations[_i507].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Configurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Contexts.clear();
            uint32_t _size508;
            ::apache::thrift::protocol::TType _etype511;
            xfer += iprot->readListBegin(_etype511, _size508);
            this->Contexts.resize(_size508);
            uint32_t _i512;
            for (_i512 = 0; _i512 < _size508; ++_i512)
            {
              xfer += this->Contexts[_i512].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SystemBoundaries.clear();
            uint32_t _size513;
            ::apache::thrift::protocol::TType _etype516;
            xfer += iprot->readListBegin(_etype516, _size513);
            this->SystemBoundaries.resize(_size513);
            uint32_t _i517;
            for (_i517 = 0; _i517 < _size513; ++_i517)
            {
              xfer += this->SystemBoundaries[_i517].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SystemBoundaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AppliedStandards.clear();
            uint32_t _size518;
            ::apache::thrift::protocol::TType _etype521;
            xfer += iprot->readListBegin(_etype521, _size518);
            this->AppliedStandards.resize(_size518);
            uint32_t _i522;
            for (_i522 = 0; _i522 < _size518; ++_i522)
            {
              xfer += this->AppliedStandards[_i522].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AppliedStandards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size523;
            ::apache::thrift::protocol::TType _etype526;
            xfer += iprot->readListBegin(_etype526, _size523);
            this->FailureModels.resize(_size523);
            uint32_t _i527;
            for (_i527 = 0; _i527 < _size523; ++_i527)
            {
              xfer += this->FailureModels[_i527].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size528;
            ::apache::thrift::protocol::TType _etype531;
            xfer += iprot->readListBegin(_etype531, _size528);
            this->Ports.resize(_size528);
            uint32_t _i532;
            for (_i532 = 0; _i532 < _size528; ++_i532)
            {
              xfer += this->Ports[_i532].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Dimensions);
          this->__isset.Dimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->PricePerUnit);
          this->__isset.PricePerUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Mass);
          this->__isset.Mass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ProtectionCategory);
          this->__isset.ProtectionCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->UsefulLifetime);
          this->__isset.UsefulLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast533;
          xfer += iprot->readI32(ecast533);
          this->UsefulLifetimeTimeUnit = (TDDITimeUnit)ecast533;
          this->__isset.UsefulLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->LogicalComponents.clear();
            uint32_t _size534;
            ::apache::thrift::protocol::TType _etype537;
            xfer += iprot->readListBegin(_etype537, _size534);
            this->LogicalComponents.resize(_size534);
            uint32_t _i538;
            for (_i538 = 0; _i538 < _size534; ++_i538)
            {
              xfer += this->LogicalComponents[_i538].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.LogicalComponents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->LifecycleConditions.clear();
            uint32_t _size539;
            ::apache::thrift::protocol::TType _etype542;
            xfer += iprot->readListBegin(_etype542, _size539);
            this->LifecycleConditions.resize(_size539);
            uint32_t _i543;
            for (_i543 = 0; _i543 < _size539; ++_i543)
            {
              xfer += this->LifecycleConditions[_i543].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.LifecycleConditions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MaintenanceProcedure) { 
            this->MaintenanceProcedure = ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure>(new TDDIMaintenanceProcedure);
          }
          xfer += this->MaintenanceProcedure->read(iprot);
          bool wasSet = false;
          if (this->MaintenanceProcedure->__isset.Id) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.Name) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.Description) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.IsCitation) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.IsAbstract) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.CitedElement) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.ActivityDescription) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.TechnicalDescription) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.ToolSpecification) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StaffNumber) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StaffSkillLevel) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StafftrainingDescription) { wasSet = true; }
          if (!wasSet) { this->MaintenanceProcedure.reset(); }
          this->__isset.MaintenanceProcedure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPhysicalComponent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPhysicalComponent");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter544;
    for (_iter544 = this->KeyValueMaps.begin(); _iter544 != this->KeyValueMaps.end(); ++_iter544)
    {
      xfer += (*_iter544).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter545;
    for (_iter545 = this->DependabilityRequirements.begin(); _iter545 != this->DependabilityRequirements.end(); ++_iter545)
    {
      xfer += (*_iter545).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter546;
    for (_iter546 = this->SubSystems.begin(); _iter546 != this->SubSystems.end(); ++_iter546)
    {
      xfer += (*_iter546).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetime", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->OverallLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->OverallLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RealisedFunctions", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RealisedFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter547;
    for (_iter547 = this->RealisedFunctions.begin(); _iter547 != this->RealisedFunctions.end(); ++_iter547)
    {
      xfer += (*_iter547).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Configurations", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Configurations.size()));
    std::vector<TDDIConfiguration> ::const_iterator _iter548;
    for (_iter548 = this->Configurations.begin(); _iter548 != this->Configurations.end(); ++_iter548)
    {
      xfer += (*_iter548).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contexts", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Contexts.size()));
    std::vector<TDDIContext> ::const_iterator _iter549;
    for (_iter549 = this->Contexts.begin(); _iter549 != this->Contexts.end(); ++_iter549)
    {
      xfer += (*_iter549).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SystemBoundaries", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SystemBoundaries.size()));
    std::vector<TDDISystemBoundary> ::const_iterator _iter550;
    for (_iter550 = this->SystemBoundaries.begin(); _iter550 != this->SystemBoundaries.end(); ++_iter550)
    {
      xfer += (*_iter550).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AppliedStandards", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AppliedStandards.size()));
    std::vector<TDDIAbstractStandardRef> ::const_iterator _iter551;
    for (_iter551 = this->AppliedStandards.begin(); _iter551 != this->AppliedStandards.end(); ++_iter551)
    {
      xfer += (*_iter551).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter552;
    for (_iter552 = this->FailureModels.begin(); _iter552 != this->FailureModels.end(); ++_iter552)
    {
      xfer += (*_iter552).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 19);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter553;
    for (_iter553 = this->Ports.begin(); _iter553 != this->Ports.end(); ++_iter553)
    {
      xfer += (*_iter553).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Dimensions", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->Dimensions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PricePerUnit", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->PricePerUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Mass", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->Mass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProtectionCategory", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->ProtectionCategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsefulLifetime", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->UsefulLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsefulLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32((int32_t)this->UsefulLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LogicalComponents", ::apache::thrift::protocol::T_LIST, 26);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->LogicalComponents.size()));
    std::vector<TDDILogicalComponent> ::const_iterator _iter554;
    for (_iter554 = this->LogicalComponents.begin(); _iter554 != this->LogicalComponents.end(); ++_iter554)
    {
      xfer += (*_iter554).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LifecycleConditions", ::apache::thrift::protocol::T_LIST, 27);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->LifecycleConditions.size()));
    std::vector<TDDILifecycleCondition> ::const_iterator _iter555;
    for (_iter555 = this->LifecycleConditions.begin(); _iter555 != this->LifecycleConditions.end(); ++_iter555)
    {
      xfer += (*_iter555).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaintenanceProcedure", ::apache::thrift::protocol::T_STRUCT, 28);
  if (this->MaintenanceProcedure) {
    xfer += this->MaintenanceProcedure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMaintenanceProcedure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPhysicalComponent &a, TDDIPhysicalComponent &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubSystems, b.SubSystems);
  swap(a.OverallLifetime, b.OverallLifetime);
  swap(a.OverallLifetimeTimeUnit, b.OverallLifetimeTimeUnit);
  swap(a.RealisedFunctions, b.RealisedFunctions);
  swap(a.Configurations, b.Configurations);
  swap(a.Contexts, b.Contexts);
  swap(a.SystemBoundaries, b.SystemBoundaries);
  swap(a.AppliedStandards, b.AppliedStandards);
  swap(a.FailureModels, b.FailureModels);
  swap(a.Ports, b.Ports);
  swap(a.Dimensions, b.Dimensions);
  swap(a.PricePerUnit, b.PricePerUnit);
  swap(a.Mass, b.Mass);
  swap(a.ProtectionCategory, b.ProtectionCategory);
  swap(a.UsefulLifetime, b.UsefulLifetime);
  swap(a.UsefulLifetimeTimeUnit, b.UsefulLifetimeTimeUnit);
  swap(a.LogicalComponents, b.LogicalComponents);
  swap(a.LifecycleConditions, b.LifecycleConditions);
  swap(a.MaintenanceProcedure, b.MaintenanceProcedure);
  swap(a.__isset, b.__isset);
}

TDDIPhysicalComponent::TDDIPhysicalComponent(const TDDIPhysicalComponent& other556) {
  Id = other556.Id;
  Name = other556.Name;
  Description = other556.Description;
  IsCitation = other556.IsCitation;
  IsAbstract = other556.IsAbstract;
  KeyValueMaps = other556.KeyValueMaps;
  CitedElement = other556.CitedElement;
  DependabilityRequirements = other556.DependabilityRequirements;
  AssuranceLevel = other556.AssuranceLevel;
  SubSystems = other556.SubSystems;
  OverallLifetime = other556.OverallLifetime;
  OverallLifetimeTimeUnit = other556.OverallLifetimeTimeUnit;
  RealisedFunctions = other556.RealisedFunctions;
  Configurations = other556.Configurations;
  Contexts = other556.Contexts;
  SystemBoundaries = other556.SystemBoundaries;
  AppliedStandards = other556.AppliedStandards;
  FailureModels = other556.FailureModels;
  Ports = other556.Ports;
  Dimensions = other556.Dimensions;
  PricePerUnit = other556.PricePerUnit;
  Mass = other556.Mass;
  ProtectionCategory = other556.ProtectionCategory;
  UsefulLifetime = other556.UsefulLifetime;
  UsefulLifetimeTimeUnit = other556.UsefulLifetimeTimeUnit;
  LogicalComponents = other556.LogicalComponents;
  LifecycleConditions = other556.LifecycleConditions;
  MaintenanceProcedure = other556.MaintenanceProcedure;
  __isset = other556.__isset;
}
TDDIPhysicalComponent& TDDIPhysicalComponent::operator=(const TDDIPhysicalComponent& other557) {
  Id = other557.Id;
  Name = other557.Name;
  Description = other557.Description;
  IsCitation = other557.IsCitation;
  IsAbstract = other557.IsAbstract;
  KeyValueMaps = other557.KeyValueMaps;
  CitedElement = other557.CitedElement;
  DependabilityRequirements = other557.DependabilityRequirements;
  AssuranceLevel = other557.AssuranceLevel;
  SubSystems = other557.SubSystems;
  OverallLifetime = other557.OverallLifetime;
  OverallLifetimeTimeUnit = other557.OverallLifetimeTimeUnit;
  RealisedFunctions = other557.RealisedFunctions;
  Configurations = other557.Configurations;
  Contexts = other557.Contexts;
  SystemBoundaries = other557.SystemBoundaries;
  AppliedStandards = other557.AppliedStandards;
  FailureModels = other557.FailureModels;
  Ports = other557.Ports;
  Dimensions = other557.Dimensions;
  PricePerUnit = other557.PricePerUnit;
  Mass = other557.Mass;
  ProtectionCategory = other557.ProtectionCategory;
  UsefulLifetime = other557.UsefulLifetime;
  UsefulLifetimeTimeUnit = other557.UsefulLifetimeTimeUnit;
  LogicalComponents = other557.LogicalComponents;
  LifecycleConditions = other557.LifecycleConditions;
  MaintenanceProcedure = other557.MaintenanceProcedure;
  __isset = other557.__isset;
  return *this;
}
void TDDIPhysicalComponent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPhysicalComponent(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ", " << "OverallLifetime=" << to_string(OverallLifetime);
  out << ", " << "OverallLifetimeTimeUnit=" << to_string(OverallLifetimeTimeUnit);
  out << ", " << "RealisedFunctions=" << to_string(RealisedFunctions);
  out << ", " << "Configurations=" << to_string(Configurations);
  out << ", " << "Contexts=" << to_string(Contexts);
  out << ", " << "SystemBoundaries=" << to_string(SystemBoundaries);
  out << ", " << "AppliedStandards=" << to_string(AppliedStandards);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "Dimensions=" << to_string(Dimensions);
  out << ", " << "PricePerUnit=" << to_string(PricePerUnit);
  out << ", " << "Mass=" << to_string(Mass);
  out << ", " << "ProtectionCategory=" << to_string(ProtectionCategory);
  out << ", " << "UsefulLifetime=" << to_string(UsefulLifetime);
  out << ", " << "UsefulLifetimeTimeUnit=" << to_string(UsefulLifetimeTimeUnit);
  out << ", " << "LogicalComponents=" << to_string(LogicalComponents);
  out << ", " << "LifecycleConditions=" << to_string(LifecycleConditions);
  out << ", " << "MaintenanceProcedure=" << to_string(MaintenanceProcedure);
  out << ")";
}


TDDISystemUnion::~TDDISystemUnion() throw() {
}


void TDDISystemUnion::__set_System(const TDDISystem& val) {
  this->System = val;
__isset.System = true;
}

void TDDISystemUnion::__set_PhysicalComponent(const TDDIPhysicalComponent& val) {
  this->PhysicalComponent = val;
__isset.PhysicalComponent = true;
}

void TDDISystemUnion::__set_LogicalComponent(const TDDILogicalComponent& val) {
  this->LogicalComponent = val;
__isset.LogicalComponent = true;
}

void TDDISystemUnion::__set_SafetyRelatedSystem(const TDDISafetyRelatedSystem& val) {
  this->SafetyRelatedSystem = val;
__isset.SafetyRelatedSystem = true;
}
std::ostream& operator<<(std::ostream& out, const TDDISystemUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISystemUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->System.read(iprot);
          this->__isset.System = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->PhysicalComponent.read(iprot);
          this->__isset.PhysicalComponent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->LogicalComponent.read(iprot);
          this->__isset.LogicalComponent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SafetyRelatedSystem.read(iprot);
          this->__isset.SafetyRelatedSystem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISystemUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISystemUnion");

  if (this->__isset.System) {
    xfer += oprot->writeFieldBegin("System", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->System.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.PhysicalComponent) {
    xfer += oprot->writeFieldBegin("PhysicalComponent", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->PhysicalComponent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.LogicalComponent) {
    xfer += oprot->writeFieldBegin("LogicalComponent", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->LogicalComponent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SafetyRelatedSystem) {
    xfer += oprot->writeFieldBegin("SafetyRelatedSystem", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->SafetyRelatedSystem.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISystemUnion &a, TDDISystemUnion &b) {
  using ::std::swap;
  swap(a.System, b.System);
  swap(a.PhysicalComponent, b.PhysicalComponent);
  swap(a.LogicalComponent, b.LogicalComponent);
  swap(a.SafetyRelatedSystem, b.SafetyRelatedSystem);
  swap(a.__isset, b.__isset);
}

TDDISystemUnion::TDDISystemUnion(const TDDISystemUnion& other558) {
  System = other558.System;
  PhysicalComponent = other558.PhysicalComponent;
  LogicalComponent = other558.LogicalComponent;
  SafetyRelatedSystem = other558.SafetyRelatedSystem;
  __isset = other558.__isset;
}
TDDISystemUnion& TDDISystemUnion::operator=(const TDDISystemUnion& other559) {
  System = other559.System;
  PhysicalComponent = other559.PhysicalComponent;
  LogicalComponent = other559.LogicalComponent;
  SafetyRelatedSystem = other559.SafetyRelatedSystem;
  __isset = other559.__isset;
  return *this;
}
void TDDISystemUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISystemUnion(";
  out << "System="; (__isset.System ? (out << to_string(System)) : (out << "<null>"));
  out << ", " << "PhysicalComponent="; (__isset.PhysicalComponent ? (out << to_string(PhysicalComponent)) : (out << "<null>"));
  out << ", " << "LogicalComponent="; (__isset.LogicalComponent ? (out << to_string(LogicalComponent)) : (out << "<null>"));
  out << ", " << "SafetyRelatedSystem="; (__isset.SafetyRelatedSystem ? (out << to_string(SafetyRelatedSystem)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractSystem::~TDDIAbstractSystem() throw() {
}


void TDDIAbstractSystem::__set_UsedSystem(const TDDISystemUnion& val) {
  this->UsedSystem = val;
}

void TDDIAbstractSystem::__set_UsedSystemType(const TDDISystemUnionType val) {
  this->UsedSystemType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractSystem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractSystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedSystem.read(iprot);
          this->__isset.UsedSystem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast560;
          xfer += iprot->readI32(ecast560);
          this->UsedSystemType = (TDDISystemUnionType)ecast560;
          this->__isset.UsedSystemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractSystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractSystem");

  xfer += oprot->writeFieldBegin("UsedSystem", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedSystem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedSystemType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedSystemType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractSystem &a, TDDIAbstractSystem &b) {
  using ::std::swap;
  swap(a.UsedSystem, b.UsedSystem);
  swap(a.UsedSystemType, b.UsedSystemType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractSystem::TDDIAbstractSystem(const TDDIAbstractSystem& other561) {
  UsedSystem = other561.UsedSystem;
  UsedSystemType = other561.UsedSystemType;
  __isset = other561.__isset;
}
TDDIAbstractSystem& TDDIAbstractSystem::operator=(const TDDIAbstractSystem& other562) {
  UsedSystem = other562.UsedSystem;
  UsedSystemType = other562.UsedSystemType;
  __isset = other562.__isset;
  return *this;
}
void TDDIAbstractSystem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractSystem(";
  out << "UsedSystem=" << to_string(UsedSystem);
  out << ", " << "UsedSystemType=" << to_string(UsedSystemType);
  out << ")";
}


TDDIFunction::~TDDIFunction() throw() {
}


void TDDIFunction::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFunction::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFunction::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFunction::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFunction::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFunction::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFunction::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFunction::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIFunction::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIFunction::__set_SubFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->SubFunctions = val;
}

void TDDIFunction::__set_Ports(const std::vector<TDDIPortRef> & val) {
  this->Ports = val;
}

void TDDIFunction::__set_PerfChars(const TDDIPerfChars& val) {
  this->PerfChars = val;
}

void TDDIFunction::__set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureModels = val;
}

void TDDIFunction::__set_Malfunctions(const std::vector<TDDIMalFunctionRef> & val) {
  this->Malfunctions = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size563;
            ::apache::thrift::protocol::TType _etype566;
            xfer += iprot->readListBegin(_etype566, _size563);
            this->KeyValueMaps.resize(_size563);
            uint32_t _i567;
            for (_i567 = 0; _i567 < _size563; ++_i567)
            {
              xfer += this->KeyValueMaps[_i567].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size568;
            ::apache::thrift::protocol::TType _etype571;
            xfer += iprot->readListBegin(_etype571, _size568);
            this->DependabilityRequirements.resize(_size568);
            uint32_t _i572;
            for (_i572 = 0; _i572 < _size568; ++_i572)
            {
              xfer += this->DependabilityRequirements[_i572].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubFunctions.clear();
            uint32_t _size573;
            ::apache::thrift::protocol::TType _etype576;
            xfer += iprot->readListBegin(_etype576, _size573);
            this->SubFunctions.resize(_size573);
            uint32_t _i577;
            for (_i577 = 0; _i577 < _size573; ++_i577)
            {
              xfer += this->SubFunctions[_i577].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size578;
            ::apache::thrift::protocol::TType _etype581;
            xfer += iprot->readListBegin(_etype581, _size578);
            this->Ports.resize(_size578);
            uint32_t _i582;
            for (_i582 = 0; _i582 < _size578; ++_i582)
            {
              xfer += this->Ports[_i582].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->PerfChars.read(iprot);
          this->__isset.PerfChars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size583;
            ::apache::thrift::protocol::TType _etype586;
            xfer += iprot->readListBegin(_etype586, _size583);
            this->FailureModels.resize(_size583);
            uint32_t _i587;
            for (_i587 = 0; _i587 < _size583; ++_i587)
            {
              xfer += this->FailureModels[_i587].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Malfunctions.clear();
            uint32_t _size588;
            ::apache::thrift::protocol::TType _etype591;
            xfer += iprot->readListBegin(_etype591, _size588);
            this->Malfunctions.resize(_size588);
            uint32_t _i592;
            for (_i592 = 0; _i592 < _size588; ++_i592)
            {
              xfer += this->Malfunctions[_i592].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Malfunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFunction");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter593;
    for (_iter593 = this->KeyValueMaps.begin(); _iter593 != this->KeyValueMaps.end(); ++_iter593)
    {
      xfer += (*_iter593).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter594;
    for (_iter594 = this->DependabilityRequirements.begin(); _iter594 != this->DependabilityRequirements.end(); ++_iter594)
    {
      xfer += (*_iter594).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubFunctions", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter595;
    for (_iter595 = this->SubFunctions.begin(); _iter595 != this->SubFunctions.end(); ++_iter595)
    {
      xfer += (*_iter595).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter596;
    for (_iter596 = this->Ports.begin(); _iter596 != this->Ports.end(); ++_iter596)
    {
      xfer += (*_iter596).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PerfChars", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->PerfChars.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter597;
    for (_iter597 = this->FailureModels.begin(); _iter597 != this->FailureModels.end(); ++_iter597)
    {
      xfer += (*_iter597).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Malfunctions", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Malfunctions.size()));
    std::vector<TDDIMalFunctionRef> ::const_iterator _iter598;
    for (_iter598 = this->Malfunctions.begin(); _iter598 != this->Malfunctions.end(); ++_iter598)
    {
      xfer += (*_iter598).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFunction &a, TDDIFunction &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubFunctions, b.SubFunctions);
  swap(a.Ports, b.Ports);
  swap(a.PerfChars, b.PerfChars);
  swap(a.FailureModels, b.FailureModels);
  swap(a.Malfunctions, b.Malfunctions);
  swap(a.__isset, b.__isset);
}

TDDIFunction::TDDIFunction(const TDDIFunction& other599) {
  Id = other599.Id;
  Name = other599.Name;
  Description = other599.Description;
  IsCitation = other599.IsCitation;
  IsAbstract = other599.IsAbstract;
  KeyValueMaps = other599.KeyValueMaps;
  CitedElement = other599.CitedElement;
  DependabilityRequirements = other599.DependabilityRequirements;
  AssuranceLevel = other599.AssuranceLevel;
  SubFunctions = other599.SubFunctions;
  Ports = other599.Ports;
  PerfChars = other599.PerfChars;
  FailureModels = other599.FailureModels;
  Malfunctions = other599.Malfunctions;
  __isset = other599.__isset;
}
TDDIFunction& TDDIFunction::operator=(const TDDIFunction& other600) {
  Id = other600.Id;
  Name = other600.Name;
  Description = other600.Description;
  IsCitation = other600.IsCitation;
  IsAbstract = other600.IsAbstract;
  KeyValueMaps = other600.KeyValueMaps;
  CitedElement = other600.CitedElement;
  DependabilityRequirements = other600.DependabilityRequirements;
  AssuranceLevel = other600.AssuranceLevel;
  SubFunctions = other600.SubFunctions;
  Ports = other600.Ports;
  PerfChars = other600.PerfChars;
  FailureModels = other600.FailureModels;
  Malfunctions = other600.Malfunctions;
  __isset = other600.__isset;
  return *this;
}
void TDDIFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFunction(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubFunctions=" << to_string(SubFunctions);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "PerfChars=" << to_string(PerfChars);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "Malfunctions=" << to_string(Malfunctions);
  out << ")";
}


TDDISafetyFunction::~TDDISafetyFunction() throw() {
}


void TDDISafetyFunction::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISafetyFunction::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISafetyFunction::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISafetyFunction::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDISafetyFunction::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDISafetyFunction::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDISafetyFunction::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDISafetyFunction::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDISafetyFunction::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISafetyFunction::__set_SubFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->SubFunctions = val;
}

void TDDISafetyFunction::__set_Ports(const std::vector<TDDIPortRef> & val) {
  this->Ports = val;
}

void TDDISafetyFunction::__set_PerfChars(const TDDIPerfChars& val) {
  this->PerfChars = val;
}

void TDDISafetyFunction::__set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureModels = val;
}

void TDDISafetyFunction::__set_Malfunctions(const std::vector<TDDIMalFunctionRef> & val) {
  this->Malfunctions = val;
}

void TDDISafetyFunction::__set_Object(const std::string& val) {
  this->Object = val;
}

void TDDISafetyFunction::__set_Behavior(const std::string& val) {
  this->Behavior = val;
}

void TDDISafetyFunction::__set_SafeState(const std::string& val) {
  this->SafeState = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISafetyFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISafetyFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size601;
            ::apache::thrift::protocol::TType _etype604;
            xfer += iprot->readListBegin(_etype604, _size601);
            this->KeyValueMaps.resize(_size601);
            uint32_t _i605;
            for (_i605 = 0; _i605 < _size601; ++_i605)
            {
              xfer += this->KeyValueMaps[_i605].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size606;
            ::apache::thrift::protocol::TType _etype609;
            xfer += iprot->readListBegin(_etype609, _size606);
            this->DependabilityRequirements.resize(_size606);
            uint32_t _i610;
            for (_i610 = 0; _i610 < _size606; ++_i610)
            {
              xfer += this->DependabilityRequirements[_i610].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubFunctions.clear();
            uint32_t _size611;
            ::apache::thrift::protocol::TType _etype614;
            xfer += iprot->readListBegin(_etype614, _size611);
            this->SubFunctions.resize(_size611);
            uint32_t _i615;
            for (_i615 = 0; _i615 < _size611; ++_i615)
            {
              xfer += this->SubFunctions[_i615].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size616;
            ::apache::thrift::protocol::TType _etype619;
            xfer += iprot->readListBegin(_etype619, _size616);
            this->Ports.resize(_size616);
            uint32_t _i620;
            for (_i620 = 0; _i620 < _size616; ++_i620)
            {
              xfer += this->Ports[_i620].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->PerfChars.read(iprot);
          this->__isset.PerfChars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size621;
            ::apache::thrift::protocol::TType _etype624;
            xfer += iprot->readListBegin(_etype624, _size621);
            this->FailureModels.resize(_size621);
            uint32_t _i625;
            for (_i625 = 0; _i625 < _size621; ++_i625)
            {
              xfer += this->FailureModels[_i625].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Malfunctions.clear();
            uint32_t _size626;
            ::apache::thrift::protocol::TType _etype629;
            xfer += iprot->readListBegin(_etype629, _size626);
            this->Malfunctions.resize(_size626);
            uint32_t _i630;
            for (_i630 = 0; _i630 < _size626; ++_i630)
            {
              xfer += this->Malfunctions[_i630].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Malfunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Object);
          this->__isset.Object = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Behavior);
          this->__isset.Behavior = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeState);
          this->__isset.SafeState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISafetyFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISafetyFunction");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter631;
    for (_iter631 = this->KeyValueMaps.begin(); _iter631 != this->KeyValueMaps.end(); ++_iter631)
    {
      xfer += (*_iter631).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter632;
    for (_iter632 = this->DependabilityRequirements.begin(); _iter632 != this->DependabilityRequirements.end(); ++_iter632)
    {
      xfer += (*_iter632).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubFunctions", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter633;
    for (_iter633 = this->SubFunctions.begin(); _iter633 != this->SubFunctions.end(); ++_iter633)
    {
      xfer += (*_iter633).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter634;
    for (_iter634 = this->Ports.begin(); _iter634 != this->Ports.end(); ++_iter634)
    {
      xfer += (*_iter634).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PerfChars", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->PerfChars.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter635;
    for (_iter635 = this->FailureModels.begin(); _iter635 != this->FailureModels.end(); ++_iter635)
    {
      xfer += (*_iter635).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Malfunctions", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Malfunctions.size()));
    std::vector<TDDIMalFunctionRef> ::const_iterator _iter636;
    for (_iter636 = this->Malfunctions.begin(); _iter636 != this->Malfunctions.end(); ++_iter636)
    {
      xfer += (*_iter636).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Object", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->Object);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Behavior", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->Behavior);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeState", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->SafeState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISafetyFunction &a, TDDISafetyFunction &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubFunctions, b.SubFunctions);
  swap(a.Ports, b.Ports);
  swap(a.PerfChars, b.PerfChars);
  swap(a.FailureModels, b.FailureModels);
  swap(a.Malfunctions, b.Malfunctions);
  swap(a.Object, b.Object);
  swap(a.Behavior, b.Behavior);
  swap(a.SafeState, b.SafeState);
  swap(a.__isset, b.__isset);
}

TDDISafetyFunction::TDDISafetyFunction(const TDDISafetyFunction& other637) {
  Id = other637.Id;
  Name = other637.Name;
  Description = other637.Description;
  IsCitation = other637.IsCitation;
  IsAbstract = other637.IsAbstract;
  KeyValueMaps = other637.KeyValueMaps;
  CitedElement = other637.CitedElement;
  DependabilityRequirements = other637.DependabilityRequirements;
  AssuranceLevel = other637.AssuranceLevel;
  SubFunctions = other637.SubFunctions;
  Ports = other637.Ports;
  PerfChars = other637.PerfChars;
  FailureModels = other637.FailureModels;
  Malfunctions = other637.Malfunctions;
  Object = other637.Object;
  Behavior = other637.Behavior;
  SafeState = other637.SafeState;
  __isset = other637.__isset;
}
TDDISafetyFunction& TDDISafetyFunction::operator=(const TDDISafetyFunction& other638) {
  Id = other638.Id;
  Name = other638.Name;
  Description = other638.Description;
  IsCitation = other638.IsCitation;
  IsAbstract = other638.IsAbstract;
  KeyValueMaps = other638.KeyValueMaps;
  CitedElement = other638.CitedElement;
  DependabilityRequirements = other638.DependabilityRequirements;
  AssuranceLevel = other638.AssuranceLevel;
  SubFunctions = other638.SubFunctions;
  Ports = other638.Ports;
  PerfChars = other638.PerfChars;
  FailureModels = other638.FailureModels;
  Malfunctions = other638.Malfunctions;
  Object = other638.Object;
  Behavior = other638.Behavior;
  SafeState = other638.SafeState;
  __isset = other638.__isset;
  return *this;
}
void TDDISafetyFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISafetyFunction(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubFunctions=" << to_string(SubFunctions);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "PerfChars=" << to_string(PerfChars);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "Malfunctions=" << to_string(Malfunctions);
  out << ", " << "Object=" << to_string(Object);
  out << ", " << "Behavior=" << to_string(Behavior);
  out << ", " << "SafeState=" << to_string(SafeState);
  out << ")";
}


TDDIFunctionUnion::~TDDIFunctionUnion() throw() {
}


void TDDIFunctionUnion::__set_Function(const TDDIFunction& val) {
  this->Function = val;
__isset.Function = true;
}

void TDDIFunctionUnion::__set_SafetyFunction(const TDDISafetyFunction& val) {
  this->SafetyFunction = val;
__isset.SafetyFunction = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFunctionUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFunctionUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Function.read(iprot);
          this->__isset.Function = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SafetyFunction.read(iprot);
          this->__isset.SafetyFunction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFunctionUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFunctionUnion");

  if (this->__isset.Function) {
    xfer += oprot->writeFieldBegin("Function", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Function.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SafetyFunction) {
    xfer += oprot->writeFieldBegin("SafetyFunction", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->SafetyFunction.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFunctionUnion &a, TDDIFunctionUnion &b) {
  using ::std::swap;
  swap(a.Function, b.Function);
  swap(a.SafetyFunction, b.SafetyFunction);
  swap(a.__isset, b.__isset);
}

TDDIFunctionUnion::TDDIFunctionUnion(const TDDIFunctionUnion& other639) {
  Function = other639.Function;
  SafetyFunction = other639.SafetyFunction;
  __isset = other639.__isset;
}
TDDIFunctionUnion& TDDIFunctionUnion::operator=(const TDDIFunctionUnion& other640) {
  Function = other640.Function;
  SafetyFunction = other640.SafetyFunction;
  __isset = other640.__isset;
  return *this;
}
void TDDIFunctionUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFunctionUnion(";
  out << "Function="; (__isset.Function ? (out << to_string(Function)) : (out << "<null>"));
  out << ", " << "SafetyFunction="; (__isset.SafetyFunction ? (out << to_string(SafetyFunction)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFunction::~TDDIAbstractFunction() throw() {
}


void TDDIAbstractFunction::__set_UsedFunction(const TDDIFunctionUnion& val) {
  this->UsedFunction = val;
}

void TDDIAbstractFunction::__set_UsedFunctionType(const TDDIFunctionUnionType val) {
  this->UsedFunctionType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFunction.read(iprot);
          this->__isset.UsedFunction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast641;
          xfer += iprot->readI32(ecast641);
          this->UsedFunctionType = (TDDIFunctionUnionType)ecast641;
          this->__isset.UsedFunctionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFunction");

  xfer += oprot->writeFieldBegin("UsedFunction", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFunction.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFunctionType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFunctionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFunction &a, TDDIAbstractFunction &b) {
  using ::std::swap;
  swap(a.UsedFunction, b.UsedFunction);
  swap(a.UsedFunctionType, b.UsedFunctionType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFunction::TDDIAbstractFunction(const TDDIAbstractFunction& other642) {
  UsedFunction = other642.UsedFunction;
  UsedFunctionType = other642.UsedFunctionType;
  __isset = other642.__isset;
}
TDDIAbstractFunction& TDDIAbstractFunction::operator=(const TDDIAbstractFunction& other643) {
  UsedFunction = other643.UsedFunction;
  UsedFunctionType = other643.UsedFunctionType;
  __isset = other643.__isset;
  return *this;
}
void TDDIAbstractFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFunction(";
  out << "UsedFunction=" << to_string(UsedFunction);
  out << ", " << "UsedFunctionType=" << to_string(UsedFunctionType);
  out << ")";
}


TDDIDesignArtifactUnion::~TDDIDesignArtifactUnion() throw() {
}


void TDDIDesignArtifactUnion::__set_System(const TDDIAbstractSystem& val) {
  this->System = val;
__isset.System = true;
}

void TDDIDesignArtifactUnion::__set_Function(const TDDIAbstractFunction& val) {
  this->Function = val;
__isset.Function = true;
}

void TDDIDesignArtifactUnion::__set_Configuration(const TDDIConfiguration& val) {
  this->Configuration = val;
__isset.Configuration = true;
}

void TDDIDesignArtifactUnion::__set_Signal(const TDDISignal& val) {
  this->Signal = val;
__isset.Signal = true;
}

void TDDIDesignArtifactUnion::__set_SystemBoundary(const TDDISystemBoundary& val) {
  this->SystemBoundary = val;
__isset.SystemBoundary = true;
}

void TDDIDesignArtifactUnion::__set_Context(const TDDIContext& val) {
  this->Context = val;
__isset.Context = true;
}

void TDDIDesignArtifactUnion::__set_LifecycleCondition(const TDDILifecycleCondition& val) {
  this->LifecycleCondition = val;
__isset.LifecycleCondition = true;
}

void TDDIDesignArtifactUnion::__set_Port(const TDDIPort& val) {
  this->Port = val;
__isset.Port = true;
}

void TDDIDesignArtifactUnion::__set_PerfChars(const TDDIPerfChars& val) {
  this->PerfChars = val;
__isset.PerfChars = true;
}

void TDDIDesignArtifactUnion::__set_ArchitecturePackage(const TDDIAbstractArchitecturePackage& val) {
  this->ArchitecturePackage = val;
__isset.ArchitecturePackage = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIDesignArtifactUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDesignArtifactUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->System.read(iprot);
          this->__isset.System = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Function.read(iprot);
          this->__isset.Function = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Configuration.read(iprot);
          this->__isset.Configuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Signal.read(iprot);
          this->__isset.Signal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SystemBoundary.read(iprot);
          this->__isset.SystemBoundary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Context.read(iprot);
          this->__isset.Context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->LifecycleCondition.read(iprot);
          this->__isset.LifecycleCondition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Port.read(iprot);
          this->__isset.Port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->PerfChars.read(iprot);
          this->__isset.PerfChars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ArchitecturePackage.read(iprot);
          this->__isset.ArchitecturePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDesignArtifactUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDesignArtifactUnion");

  if (this->__isset.System) {
    xfer += oprot->writeFieldBegin("System", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->System.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Function) {
    xfer += oprot->writeFieldBegin("Function", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->Function.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Configuration) {
    xfer += oprot->writeFieldBegin("Configuration", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->Configuration.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Signal) {
    xfer += oprot->writeFieldBegin("Signal", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->Signal.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SystemBoundary) {
    xfer += oprot->writeFieldBegin("SystemBoundary", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->SystemBoundary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Context) {
    xfer += oprot->writeFieldBegin("Context", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->Context.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.LifecycleCondition) {
    xfer += oprot->writeFieldBegin("LifecycleCondition", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->LifecycleCondition.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Port) {
    xfer += oprot->writeFieldBegin("Port", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->Port.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.PerfChars) {
    xfer += oprot->writeFieldBegin("PerfChars", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->PerfChars.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArchitecturePackage) {
    xfer += oprot->writeFieldBegin("ArchitecturePackage", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->ArchitecturePackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDesignArtifactUnion &a, TDDIDesignArtifactUnion &b) {
  using ::std::swap;
  swap(a.System, b.System);
  swap(a.Function, b.Function);
  swap(a.Configuration, b.Configuration);
  swap(a.Signal, b.Signal);
  swap(a.SystemBoundary, b.SystemBoundary);
  swap(a.Context, b.Context);
  swap(a.LifecycleCondition, b.LifecycleCondition);
  swap(a.Port, b.Port);
  swap(a.PerfChars, b.PerfChars);
  swap(a.ArchitecturePackage, b.ArchitecturePackage);
  swap(a.__isset, b.__isset);
}

TDDIDesignArtifactUnion::TDDIDesignArtifactUnion(const TDDIDesignArtifactUnion& other644) {
  System = other644.System;
  Function = other644.Function;
  Configuration = other644.Configuration;
  Signal = other644.Signal;
  SystemBoundary = other644.SystemBoundary;
  Context = other644.Context;
  LifecycleCondition = other644.LifecycleCondition;
  Port = other644.Port;
  PerfChars = other644.PerfChars;
  ArchitecturePackage = other644.ArchitecturePackage;
  __isset = other644.__isset;
}
TDDIDesignArtifactUnion& TDDIDesignArtifactUnion::operator=(const TDDIDesignArtifactUnion& other645) {
  System = other645.System;
  Function = other645.Function;
  Configuration = other645.Configuration;
  Signal = other645.Signal;
  SystemBoundary = other645.SystemBoundary;
  Context = other645.Context;
  LifecycleCondition = other645.LifecycleCondition;
  Port = other645.Port;
  PerfChars = other645.PerfChars;
  ArchitecturePackage = other645.ArchitecturePackage;
  __isset = other645.__isset;
  return *this;
}
void TDDIDesignArtifactUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDesignArtifactUnion(";
  out << "System="; (__isset.System ? (out << to_string(System)) : (out << "<null>"));
  out << ", " << "Function="; (__isset.Function ? (out << to_string(Function)) : (out << "<null>"));
  out << ", " << "Configuration="; (__isset.Configuration ? (out << to_string(Configuration)) : (out << "<null>"));
  out << ", " << "Signal="; (__isset.Signal ? (out << to_string(Signal)) : (out << "<null>"));
  out << ", " << "SystemBoundary="; (__isset.SystemBoundary ? (out << to_string(SystemBoundary)) : (out << "<null>"));
  out << ", " << "Context="; (__isset.Context ? (out << to_string(Context)) : (out << "<null>"));
  out << ", " << "LifecycleCondition="; (__isset.LifecycleCondition ? (out << to_string(LifecycleCondition)) : (out << "<null>"));
  out << ", " << "Port="; (__isset.Port ? (out << to_string(Port)) : (out << "<null>"));
  out << ", " << "PerfChars="; (__isset.PerfChars ? (out << to_string(PerfChars)) : (out << "<null>"));
  out << ", " << "ArchitecturePackage="; (__isset.ArchitecturePackage ? (out << to_string(ArchitecturePackage)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractDesignArtifact::~TDDIAbstractDesignArtifact() throw() {
}


void TDDIAbstractDesignArtifact::__set_UsedDesignArtifact(const TDDIDesignArtifactUnion& val) {
  this->UsedDesignArtifact = val;
}

void TDDIAbstractDesignArtifact::__set_UsedDesignArtifactType(const TDDIDesignArtifactUnionType val) {
  this->UsedDesignArtifactType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDesignArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDesignArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedDesignArtifact.read(iprot);
          this->__isset.UsedDesignArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast646;
          xfer += iprot->readI32(ecast646);
          this->UsedDesignArtifactType = (TDDIDesignArtifactUnionType)ecast646;
          this->__isset.UsedDesignArtifactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDesignArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDesignArtifact");

  xfer += oprot->writeFieldBegin("UsedDesignArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedDesignArtifact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedDesignArtifactType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedDesignArtifactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDesignArtifact &a, TDDIAbstractDesignArtifact &b) {
  using ::std::swap;
  swap(a.UsedDesignArtifact, b.UsedDesignArtifact);
  swap(a.UsedDesignArtifactType, b.UsedDesignArtifactType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDesignArtifact::TDDIAbstractDesignArtifact(const TDDIAbstractDesignArtifact& other647) {
  UsedDesignArtifact = other647.UsedDesignArtifact;
  UsedDesignArtifactType = other647.UsedDesignArtifactType;
  __isset = other647.__isset;
}
TDDIAbstractDesignArtifact& TDDIAbstractDesignArtifact::operator=(const TDDIAbstractDesignArtifact& other648) {
  UsedDesignArtifact = other648.UsedDesignArtifact;
  UsedDesignArtifactType = other648.UsedDesignArtifactType;
  __isset = other648.__isset;
  return *this;
}
void TDDIAbstractDesignArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDesignArtifact(";
  out << "UsedDesignArtifact=" << to_string(UsedDesignArtifact);
  out << ", " << "UsedDesignArtifactType=" << to_string(UsedDesignArtifactType);
  out << ")";
}


TDDIBaseElementUnion::~TDDIBaseElementUnion() throw() {
}


void TDDIBaseElementUnion::__set_DesignArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDesignArtifact> val) {
  this->DesignArtifact = val;
__isset.DesignArtifact = true;
}

void TDDIBaseElementUnion::__set_ODEPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractODEPackage> val) {
  this->ODEPackage = val;
__isset.ODEPackage = true;
}

void TDDIBaseElementUnion::__set_FailureAnalysisArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> val) {
  this->FailureAnalysisArtifact = val;
__isset.FailureAnalysisArtifact = true;
}

void TDDIBaseElementUnion::__set_DependabilityArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityArtifact> val) {
  this->DependabilityArtifact = val;
__isset.DependabilityArtifact = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIBaseElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIBaseElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DesignArtifact) { 
            this->DesignArtifact = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDesignArtifact>(new TDDIAbstractDesignArtifact);
          }
          xfer += this->DesignArtifact->read(iprot);
          bool wasSet = false;
          if (this->DesignArtifact->__isset.UsedDesignArtifact) { wasSet = true; }
          if (this->DesignArtifact->__isset.UsedDesignArtifactType) { wasSet = true; }
          if (!wasSet) { this->DesignArtifact.reset(); }
          this->__isset.DesignArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ODEPackage) { 
            this->ODEPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractODEPackage>(new TDDIAbstractODEPackage);
          }
          xfer += this->ODEPackage->read(iprot);
          bool wasSet = false;
          if (this->ODEPackage->__isset.UsedODEPackage) { wasSet = true; }
          if (this->ODEPackage->__isset.UsedODEPackageType) { wasSet = true; }
          if (!wasSet) { this->ODEPackage.reset(); }
          this->__isset.ODEPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureAnalysisArtifact) { 
            this->FailureAnalysisArtifact = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact>(new TDDIAbstractFailureAnalysisArtifact);
          }
          xfer += this->FailureAnalysisArtifact->read(iprot);
          bool wasSet = false;
          if (this->FailureAnalysisArtifact->__isset.UsedFailureAnalysisArtifact) { wasSet = true; }
          if (this->FailureAnalysisArtifact->__isset.UsedFailureAnalysisArtifactType) { wasSet = true; }
          if (!wasSet) { this->FailureAnalysisArtifact.reset(); }
          this->__isset.FailureAnalysisArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DependabilityArtifact) { 
            this->DependabilityArtifact = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityArtifact>(new TDDIAbstractDependabilityArtifact);
          }
          xfer += this->DependabilityArtifact->read(iprot);
          bool wasSet = false;
          if (this->DependabilityArtifact->__isset.UsedDependabilityArtifact) { wasSet = true; }
          if (this->DependabilityArtifact->__isset.UsedDependabilityArtifactType) { wasSet = true; }
          if (!wasSet) { this->DependabilityArtifact.reset(); }
          this->__isset.DependabilityArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIBaseElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIBaseElementUnion");

  if (this->__isset.DesignArtifact) {
    xfer += oprot->writeFieldBegin("DesignArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->DesignArtifact) {
      xfer += this->DesignArtifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractDesignArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ODEPackage) {
    xfer += oprot->writeFieldBegin("ODEPackage", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ODEPackage) {
      xfer += this->ODEPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractODEPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FailureAnalysisArtifact) {
    xfer += oprot->writeFieldBegin("FailureAnalysisArtifact", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->FailureAnalysisArtifact) {
      xfer += this->FailureAnalysisArtifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFailureAnalysisArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DependabilityArtifact) {
    xfer += oprot->writeFieldBegin("DependabilityArtifact", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->DependabilityArtifact) {
      xfer += this->DependabilityArtifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractDependabilityArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIBaseElementUnion &a, TDDIBaseElementUnion &b) {
  using ::std::swap;
  swap(a.DesignArtifact, b.DesignArtifact);
  swap(a.ODEPackage, b.ODEPackage);
  swap(a.FailureAnalysisArtifact, b.FailureAnalysisArtifact);
  swap(a.DependabilityArtifact, b.DependabilityArtifact);
  swap(a.__isset, b.__isset);
}

TDDIBaseElementUnion::TDDIBaseElementUnion(const TDDIBaseElementUnion& other649) {
  DesignArtifact = other649.DesignArtifact;
  ODEPackage = other649.ODEPackage;
  FailureAnalysisArtifact = other649.FailureAnalysisArtifact;
  DependabilityArtifact = other649.DependabilityArtifact;
  __isset = other649.__isset;
}
TDDIBaseElementUnion& TDDIBaseElementUnion::operator=(const TDDIBaseElementUnion& other650) {
  DesignArtifact = other650.DesignArtifact;
  ODEPackage = other650.ODEPackage;
  FailureAnalysisArtifact = other650.FailureAnalysisArtifact;
  DependabilityArtifact = other650.DependabilityArtifact;
  __isset = other650.__isset;
  return *this;
}
void TDDIBaseElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIBaseElementUnion(";
  out << "DesignArtifact="; (__isset.DesignArtifact ? (out << to_string(DesignArtifact)) : (out << "<null>"));
  out << ", " << "ODEPackage="; (__isset.ODEPackage ? (out << to_string(ODEPackage)) : (out << "<null>"));
  out << ", " << "FailureAnalysisArtifact="; (__isset.FailureAnalysisArtifact ? (out << to_string(FailureAnalysisArtifact)) : (out << "<null>"));
  out << ", " << "DependabilityArtifact="; (__isset.DependabilityArtifact ? (out << to_string(DependabilityArtifact)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractBaseElement::~TDDIAbstractBaseElement() throw() {
}


void TDDIAbstractBaseElement::__set_UsedBaseElement(const TDDIBaseElementUnion& val) {
  this->UsedBaseElement = val;
}

void TDDIAbstractBaseElement::__set_UsedBaseElementType(const TDDIBaseElementUnionType val) {
  this->UsedBaseElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractBaseElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractBaseElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedBaseElement.read(iprot);
          this->__isset.UsedBaseElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast651;
          xfer += iprot->readI32(ecast651);
          this->UsedBaseElementType = (TDDIBaseElementUnionType)ecast651;
          this->__isset.UsedBaseElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractBaseElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractBaseElement");

  xfer += oprot->writeFieldBegin("UsedBaseElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedBaseElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedBaseElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedBaseElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractBaseElement &a, TDDIAbstractBaseElement &b) {
  using ::std::swap;
  swap(a.UsedBaseElement, b.UsedBaseElement);
  swap(a.UsedBaseElementType, b.UsedBaseElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractBaseElement::TDDIAbstractBaseElement(const TDDIAbstractBaseElement& other652) {
  UsedBaseElement = other652.UsedBaseElement;
  UsedBaseElementType = other652.UsedBaseElementType;
  __isset = other652.__isset;
}
TDDIAbstractBaseElement& TDDIAbstractBaseElement::operator=(const TDDIAbstractBaseElement& other653) {
  UsedBaseElement = other653.UsedBaseElement;
  UsedBaseElementType = other653.UsedBaseElementType;
  __isset = other653.__isset;
  return *this;
}
void TDDIAbstractBaseElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractBaseElement(";
  out << "UsedBaseElement=" << to_string(UsedBaseElement);
  out << ", " << "UsedBaseElementType=" << to_string(UsedBaseElementType);
  out << ")";
}


TDDIValue::~TDDIValue() throw() {
}


void TDDIValue::__set_Tag(const std::string& val) {
  this->Tag = val;
}

void TDDIValue::__set_Value(const std::string& val) {
  this->Value = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIValue& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Tag);
          this->__isset.Tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIValue");

  xfer += oprot->writeFieldBegin("Tag", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIValue &a, TDDIValue &b) {
  using ::std::swap;
  swap(a.Tag, b.Tag);
  swap(a.Value, b.Value);
  swap(a.__isset, b.__isset);
}

TDDIValue::TDDIValue(const TDDIValue& other654) {
  Tag = other654.Tag;
  Value = other654.Value;
  __isset = other654.__isset;
}
TDDIValue& TDDIValue::operator=(const TDDIValue& other655) {
  Tag = other655.Tag;
  Value = other655.Value;
  __isset = other655.__isset;
  return *this;
}
void TDDIValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIValue(";
  out << "Tag=" << to_string(Tag);
  out << ", " << "Value=" << to_string(Value);
  out << ")";
}


TDDIKeyValueMap::~TDDIKeyValueMap() throw() {
}


void TDDIKeyValueMap::__set_Key(const std::string& val) {
  this->Key = val;
}

void TDDIKeyValueMap::__set_Values(const std::vector<TDDIValue> & val) {
  this->Values = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIKeyValueMap& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIKeyValueMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Key);
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Values.clear();
            uint32_t _size656;
            ::apache::thrift::protocol::TType _etype659;
            xfer += iprot->readListBegin(_etype659, _size656);
            this->Values.resize(_size656);
            uint32_t _i660;
            for (_i660 = 0; _i660 < _size656; ++_i660)
            {
              xfer += this->Values[_i660].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIKeyValueMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIKeyValueMap");

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Values", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Values.size()));
    std::vector<TDDIValue> ::const_iterator _iter661;
    for (_iter661 = this->Values.begin(); _iter661 != this->Values.end(); ++_iter661)
    {
      xfer += (*_iter661).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIKeyValueMap &a, TDDIKeyValueMap &b) {
  using ::std::swap;
  swap(a.Key, b.Key);
  swap(a.Values, b.Values);
  swap(a.__isset, b.__isset);
}

TDDIKeyValueMap::TDDIKeyValueMap(const TDDIKeyValueMap& other662) {
  Key = other662.Key;
  Values = other662.Values;
  __isset = other662.__isset;
}
TDDIKeyValueMap& TDDIKeyValueMap::operator=(const TDDIKeyValueMap& other663) {
  Key = other663.Key;
  Values = other663.Values;
  __isset = other663.__isset;
  return *this;
}
void TDDIKeyValueMap::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIKeyValueMap(";
  out << "Key=" << to_string(Key);
  out << ", " << "Values=" << to_string(Values);
  out << ")";
}


TDDIDependabilityPackageUnion::~TDDIDependabilityPackageUnion() throw() {
}


void TDDIDependabilityPackageUnion::__set_DependabilityPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> val) {
  this->DependabilityPackage = val;
__isset.DependabilityPackage = true;
}

void TDDIDependabilityPackageUnion::__set_DependabilityPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackageInterface> val) {
  this->DependabilityPackageInterface = val;
__isset.DependabilityPackageInterface = true;
}

void TDDIDependabilityPackageUnion::__set_DependabilityPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackageBinding> val) {
  this->DependabilityPackageBinding = val;
__isset.DependabilityPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDependabilityPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DependabilityPackage) { 
            this->DependabilityPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage>(new TDDIDependabilityPackage);
          }
          xfer += this->DependabilityPackage->read(iprot);
          bool wasSet = false;
          if (this->DependabilityPackage->__isset.Id) { wasSet = true; }
          if (this->DependabilityPackage->__isset.Name) { wasSet = true; }
          if (this->DependabilityPackage->__isset.Description) { wasSet = true; }
          if (this->DependabilityPackage->__isset.IsCitation) { wasSet = true; }
          if (this->DependabilityPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->DependabilityPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DependabilityPackage->__isset.CitedElement) { wasSet = true; }
          if (this->DependabilityPackage->__isset.DependabilityArtifacts) { wasSet = true; }
          if (!wasSet) { this->DependabilityPackage.reset(); }
          this->__isset.DependabilityPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DependabilityPackageInterface) { 
            this->DependabilityPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackageInterface>(new TDDIDependabilityPackageInterface);
          }
          xfer += this->DependabilityPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->DependabilityPackageInterface->__isset.Id) { wasSet = true; }
          if (this->DependabilityPackageInterface->__isset.Name) { wasSet = true; }
          if (this->DependabilityPackageInterface->__isset.Description) { wasSet = true; }
          if (this->DependabilityPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->DependabilityPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->DependabilityPackageInterface->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DependabilityPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->DependabilityPackageInterface->__isset.DependabilityArtifacts) { wasSet = true; }
          if (this->DependabilityPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->DependabilityPackageInterface.reset(); }
          this->__isset.DependabilityPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DependabilityPackageBinding) { 
            this->DependabilityPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackageBinding>(new TDDIDependabilityPackageBinding);
          }
          xfer += this->DependabilityPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->DependabilityPackageBinding->__isset.Id) { wasSet = true; }
          if (this->DependabilityPackageBinding->__isset.Name) { wasSet = true; }
          if (this->DependabilityPackageBinding->__isset.Description) { wasSet = true; }
          if (this->DependabilityPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->DependabilityPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->DependabilityPackageBinding->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DependabilityPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->DependabilityPackageBinding->__isset.DependabilityArtifacts) { wasSet = true; }
          if (this->DependabilityPackageBinding->__isset.ParticipantPackages) { wasSet = true; }
          if (!wasSet) { this->DependabilityPackageBinding.reset(); }
          this->__isset.DependabilityPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDependabilityPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDependabilityPackageUnion");

  if (this->__isset.DependabilityPackage) {
    xfer += oprot->writeFieldBegin("DependabilityPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->DependabilityPackage) {
      xfer += this->DependabilityPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDependabilityPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DependabilityPackageInterface) {
    xfer += oprot->writeFieldBegin("DependabilityPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->DependabilityPackageInterface) {
      xfer += this->DependabilityPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDependabilityPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DependabilityPackageBinding) {
    xfer += oprot->writeFieldBegin("DependabilityPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->DependabilityPackageBinding) {
      xfer += this->DependabilityPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDependabilityPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDependabilityPackageUnion &a, TDDIDependabilityPackageUnion &b) {
  using ::std::swap;
  swap(a.DependabilityPackage, b.DependabilityPackage);
  swap(a.DependabilityPackageInterface, b.DependabilityPackageInterface);
  swap(a.DependabilityPackageBinding, b.DependabilityPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIDependabilityPackageUnion::TDDIDependabilityPackageUnion(const TDDIDependabilityPackageUnion& other664) {
  DependabilityPackage = other664.DependabilityPackage;
  DependabilityPackageInterface = other664.DependabilityPackageInterface;
  DependabilityPackageBinding = other664.DependabilityPackageBinding;
  __isset = other664.__isset;
}
TDDIDependabilityPackageUnion& TDDIDependabilityPackageUnion::operator=(const TDDIDependabilityPackageUnion& other665) {
  DependabilityPackage = other665.DependabilityPackage;
  DependabilityPackageInterface = other665.DependabilityPackageInterface;
  DependabilityPackageBinding = other665.DependabilityPackageBinding;
  __isset = other665.__isset;
  return *this;
}
void TDDIDependabilityPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDependabilityPackageUnion(";
  out << "DependabilityPackage="; (__isset.DependabilityPackage ? (out << to_string(DependabilityPackage)) : (out << "<null>"));
  out << ", " << "DependabilityPackageInterface="; (__isset.DependabilityPackageInterface ? (out << to_string(DependabilityPackageInterface)) : (out << "<null>"));
  out << ", " << "DependabilityPackageBinding="; (__isset.DependabilityPackageBinding ? (out << to_string(DependabilityPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractDependabilityPackage::~TDDIAbstractDependabilityPackage() throw() {
}


void TDDIAbstractDependabilityPackage::__set_UsedDependabilityPackage(const TDDIDependabilityPackageUnion& val) {
  this->UsedDependabilityPackage = val;
}

void TDDIAbstractDependabilityPackage::__set_UsedDependabilityPackageType(const TDDIDependabilityPackageUnionType val) {
  this->UsedDependabilityPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDependabilityPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedDependabilityPackage.read(iprot);
          this->__isset.UsedDependabilityPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast666;
          xfer += iprot->readI32(ecast666);
          this->UsedDependabilityPackageType = (TDDIDependabilityPackageUnionType)ecast666;
          this->__isset.UsedDependabilityPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDependabilityPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDependabilityPackage");

  xfer += oprot->writeFieldBegin("UsedDependabilityPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedDependabilityPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedDependabilityPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedDependabilityPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDependabilityPackage &a, TDDIAbstractDependabilityPackage &b) {
  using ::std::swap;
  swap(a.UsedDependabilityPackage, b.UsedDependabilityPackage);
  swap(a.UsedDependabilityPackageType, b.UsedDependabilityPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDependabilityPackage::TDDIAbstractDependabilityPackage(const TDDIAbstractDependabilityPackage& other667) {
  UsedDependabilityPackage = other667.UsedDependabilityPackage;
  UsedDependabilityPackageType = other667.UsedDependabilityPackageType;
  __isset = other667.__isset;
}
TDDIAbstractDependabilityPackage& TDDIAbstractDependabilityPackage::operator=(const TDDIAbstractDependabilityPackage& other668) {
  UsedDependabilityPackage = other668.UsedDependabilityPackage;
  UsedDependabilityPackageType = other668.UsedDependabilityPackageType;
  __isset = other668.__isset;
  return *this;
}
void TDDIAbstractDependabilityPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDependabilityPackage(";
  out << "UsedDependabilityPackage=" << to_string(UsedDependabilityPackage);
  out << ", " << "UsedDependabilityPackageType=" << to_string(UsedDependabilityPackageType);
  out << ")";
}


TDDIDependabilityPackage::~TDDIDependabilityPackage() throw() {
}


void TDDIDependabilityPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDependabilityPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDependabilityPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDependabilityPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDependabilityPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDependabilityPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIDependabilityPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIDependabilityPackage::__set_DependabilityArtifacts(const std::vector<TDDIAbstractDependabilityArtifactRef> & val) {
  this->DependabilityArtifacts = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDependabilityPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size669;
            ::apache::thrift::protocol::TType _etype672;
            xfer += iprot->readListBegin(_etype672, _size669);
            this->KeyValueMaps.resize(_size669);
            uint32_t _i673;
            for (_i673 = 0; _i673 < _size669; ++_i673)
            {
              xfer += this->KeyValueMaps[_i673].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityArtifacts.clear();
            uint32_t _size674;
            ::apache::thrift::protocol::TType _etype677;
            xfer += iprot->readListBegin(_etype677, _size674);
            this->DependabilityArtifacts.resize(_size674);
            uint32_t _i678;
            for (_i678 = 0; _i678 < _size674; ++_i678)
            {
              xfer += this->DependabilityArtifacts[_i678].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDependabilityPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDependabilityPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter679;
    for (_iter679 = this->KeyValueMaps.begin(); _iter679 != this->KeyValueMaps.end(); ++_iter679)
    {
      xfer += (*_iter679).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityArtifacts.size()));
    std::vector<TDDIAbstractDependabilityArtifactRef> ::const_iterator _iter680;
    for (_iter680 = this->DependabilityArtifacts.begin(); _iter680 != this->DependabilityArtifacts.end(); ++_iter680)
    {
      xfer += (*_iter680).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDependabilityPackage &a, TDDIDependabilityPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityArtifacts, b.DependabilityArtifacts);
  swap(a.__isset, b.__isset);
}

TDDIDependabilityPackage::TDDIDependabilityPackage(const TDDIDependabilityPackage& other681) {
  Id = other681.Id;
  Name = other681.Name;
  Description = other681.Description;
  IsCitation = other681.IsCitation;
  IsAbstract = other681.IsAbstract;
  KeyValueMaps = other681.KeyValueMaps;
  CitedElement = other681.CitedElement;
  DependabilityArtifacts = other681.DependabilityArtifacts;
  __isset = other681.__isset;
}
TDDIDependabilityPackage& TDDIDependabilityPackage::operator=(const TDDIDependabilityPackage& other682) {
  Id = other682.Id;
  Name = other682.Name;
  Description = other682.Description;
  IsCitation = other682.IsCitation;
  IsAbstract = other682.IsAbstract;
  KeyValueMaps = other682.KeyValueMaps;
  CitedElement = other682.CitedElement;
  DependabilityArtifacts = other682.DependabilityArtifacts;
  __isset = other682.__isset;
  return *this;
}
void TDDIDependabilityPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDependabilityPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityArtifacts=" << to_string(DependabilityArtifacts);
  out << ")";
}


TDDIDependabilityPackageInterface::~TDDIDependabilityPackageInterface() throw() {
}


void TDDIDependabilityPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDependabilityPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDependabilityPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDependabilityPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDependabilityPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDependabilityPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIDependabilityPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIDependabilityPackageInterface::__set_DependabilityArtifacts(const std::vector<TDDIAbstractDependabilityArtifactRef> & val) {
  this->DependabilityArtifacts = val;
}

void TDDIDependabilityPackageInterface::__set_Implements(const TDDIAbstractDependabilityPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDependabilityPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size683;
            ::apache::thrift::protocol::TType _etype686;
            xfer += iprot->readListBegin(_etype686, _size683);
            this->KeyValueMaps.resize(_size683);
            uint32_t _i687;
            for (_i687 = 0; _i687 < _size683; ++_i687)
            {
              xfer += this->KeyValueMaps[_i687].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityArtifacts.clear();
            uint32_t _size688;
            ::apache::thrift::protocol::TType _etype691;
            xfer += iprot->readListBegin(_etype691, _size688);
            this->DependabilityArtifacts.resize(_size688);
            uint32_t _i692;
            for (_i692 = 0; _i692 < _size688; ++_i692)
            {
              xfer += this->DependabilityArtifacts[_i692].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDependabilityPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDependabilityPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter693;
    for (_iter693 = this->KeyValueMaps.begin(); _iter693 != this->KeyValueMaps.end(); ++_iter693)
    {
      xfer += (*_iter693).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityArtifacts.size()));
    std::vector<TDDIAbstractDependabilityArtifactRef> ::const_iterator _iter694;
    for (_iter694 = this->DependabilityArtifacts.begin(); _iter694 != this->DependabilityArtifacts.end(); ++_iter694)
    {
      xfer += (*_iter694).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDependabilityPackageInterface &a, TDDIDependabilityPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityArtifacts, b.DependabilityArtifacts);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIDependabilityPackageInterface::TDDIDependabilityPackageInterface(const TDDIDependabilityPackageInterface& other695) {
  Id = other695.Id;
  Name = other695.Name;
  Description = other695.Description;
  IsCitation = other695.IsCitation;
  IsAbstract = other695.IsAbstract;
  KeyValueMaps = other695.KeyValueMaps;
  CitedElement = other695.CitedElement;
  DependabilityArtifacts = other695.DependabilityArtifacts;
  Implements = other695.Implements;
  __isset = other695.__isset;
}
TDDIDependabilityPackageInterface& TDDIDependabilityPackageInterface::operator=(const TDDIDependabilityPackageInterface& other696) {
  Id = other696.Id;
  Name = other696.Name;
  Description = other696.Description;
  IsCitation = other696.IsCitation;
  IsAbstract = other696.IsAbstract;
  KeyValueMaps = other696.KeyValueMaps;
  CitedElement = other696.CitedElement;
  DependabilityArtifacts = other696.DependabilityArtifacts;
  Implements = other696.Implements;
  __isset = other696.__isset;
  return *this;
}
void TDDIDependabilityPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDependabilityPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityArtifacts=" << to_string(DependabilityArtifacts);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIDependabilityPackageBinding::~TDDIDependabilityPackageBinding() throw() {
}


void TDDIDependabilityPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDependabilityPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDependabilityPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDependabilityPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDependabilityPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDependabilityPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIDependabilityPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIDependabilityPackageBinding::__set_DependabilityArtifacts(const std::vector<TDDIAbstractDependabilityArtifactRef> & val) {
  this->DependabilityArtifacts = val;
}

void TDDIDependabilityPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractDependabilityPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDependabilityPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size697;
            ::apache::thrift::protocol::TType _etype700;
            xfer += iprot->readListBegin(_etype700, _size697);
            this->KeyValueMaps.resize(_size697);
            uint32_t _i701;
            for (_i701 = 0; _i701 < _size697; ++_i701)
            {
              xfer += this->KeyValueMaps[_i701].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityArtifacts.clear();
            uint32_t _size702;
            ::apache::thrift::protocol::TType _etype705;
            xfer += iprot->readListBegin(_etype705, _size702);
            this->DependabilityArtifacts.resize(_size702);
            uint32_t _i706;
            for (_i706 = 0; _i706 < _size702; ++_i706)
            {
              xfer += this->DependabilityArtifacts[_i706].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size707;
            ::apache::thrift::protocol::TType _etype710;
            xfer += iprot->readListBegin(_etype710, _size707);
            this->ParticipantPackages.resize(_size707);
            uint32_t _i711;
            for (_i711 = 0; _i711 < _size707; ++_i711)
            {
              xfer += this->ParticipantPackages[_i711].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDependabilityPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDependabilityPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter712;
    for (_iter712 = this->KeyValueMaps.begin(); _iter712 != this->KeyValueMaps.end(); ++_iter712)
    {
      xfer += (*_iter712).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityArtifacts.size()));
    std::vector<TDDIAbstractDependabilityArtifactRef> ::const_iterator _iter713;
    for (_iter713 = this->DependabilityArtifacts.begin(); _iter713 != this->DependabilityArtifacts.end(); ++_iter713)
    {
      xfer += (*_iter713).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractDependabilityPackageRef> ::const_iterator _iter714;
    for (_iter714 = this->ParticipantPackages.begin(); _iter714 != this->ParticipantPackages.end(); ++_iter714)
    {
      xfer += (*_iter714).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDependabilityPackageBinding &a, TDDIDependabilityPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DependabilityArtifacts, b.DependabilityArtifacts);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIDependabilityPackageBinding::TDDIDependabilityPackageBinding(const TDDIDependabilityPackageBinding& other715) {
  Id = other715.Id;
  Name = other715.Name;
  Description = other715.Description;
  IsCitation = other715.IsCitation;
  IsAbstract = other715.IsAbstract;
  KeyValueMaps = other715.KeyValueMaps;
  CitedElement = other715.CitedElement;
  DependabilityArtifacts = other715.DependabilityArtifacts;
  ParticipantPackages = other715.ParticipantPackages;
  __isset = other715.__isset;
}
TDDIDependabilityPackageBinding& TDDIDependabilityPackageBinding::operator=(const TDDIDependabilityPackageBinding& other716) {
  Id = other716.Id;
  Name = other716.Name;
  Description = other716.Description;
  IsCitation = other716.IsCitation;
  IsAbstract = other716.IsAbstract;
  KeyValueMaps = other716.KeyValueMaps;
  CitedElement = other716.CitedElement;
  DependabilityArtifacts = other716.DependabilityArtifacts;
  ParticipantPackages = other716.ParticipantPackages;
  __isset = other716.__isset;
  return *this;
}
void TDDIDependabilityPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDependabilityPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DependabilityArtifacts=" << to_string(DependabilityArtifacts);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIMeasureType::~TDDIMeasureType() throw() {
}


void TDDIMeasureType::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMeasureType::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMeasureType::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMeasureType::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIMeasureType::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIMeasureType::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIMeasureType::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMeasureType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMeasureType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size717;
            ::apache::thrift::protocol::TType _etype720;
            xfer += iprot->readListBegin(_etype720, _size717);
            this->KeyValueMaps.resize(_size717);
            uint32_t _i721;
            for (_i721 = 0; _i721 < _size717; ++_i721)
            {
              xfer += this->KeyValueMaps[_i721].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMeasureType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMeasureType");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter722;
    for (_iter722 = this->KeyValueMaps.begin(); _iter722 != this->KeyValueMaps.end(); ++_iter722)
    {
      xfer += (*_iter722).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMeasureType &a, TDDIMeasureType &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.__isset, b.__isset);
}

TDDIMeasureType::TDDIMeasureType(const TDDIMeasureType& other723) {
  Id = other723.Id;
  Name = other723.Name;
  Description = other723.Description;
  IsCitation = other723.IsCitation;
  IsAbstract = other723.IsAbstract;
  KeyValueMaps = other723.KeyValueMaps;
  CitedElement = other723.CitedElement;
  __isset = other723.__isset;
}
TDDIMeasureType& TDDIMeasureType::operator=(const TDDIMeasureType& other724) {
  Id = other724.Id;
  Name = other724.Name;
  Description = other724.Description;
  IsCitation = other724.IsCitation;
  IsAbstract = other724.IsAbstract;
  KeyValueMaps = other724.KeyValueMaps;
  CitedElement = other724.CitedElement;
  __isset = other724.__isset;
  return *this;
}
void TDDIMeasureType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMeasureType(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ")";
}


TDDIMeasure::~TDDIMeasure() throw() {
}


void TDDIMeasure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMeasure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMeasure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMeasure::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIMeasure::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIMeasure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIMeasure::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIMeasure::__set_IntrinsicSafety(const std::string& val) {
  this->IntrinsicSafety = val;
}

void TDDIMeasure::__set_SafeGuard(const std::string& val) {
  this->SafeGuard = val;
}

void TDDIMeasure::__set_ApplierInformation(const std::string& val) {
  this->ApplierInformation = val;
}

void TDDIMeasure::__set_RiskAcceptability(const bool val) {
  this->RiskAcceptability = val;
}

void TDDIMeasure::__set_FurtherAction(const std::string& val) {
  this->FurtherAction = val;
}

void TDDIMeasure::__set_Source(const std::string& val) {
  this->Source = val;
}

void TDDIMeasure::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIMeasure::__set_MeasureType(const TDDIMeasureType& val) {
  this->MeasureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMeasure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMeasure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size725;
            ::apache::thrift::protocol::TType _etype728;
            xfer += iprot->readListBegin(_etype728, _size725);
            this->KeyValueMaps.resize(_size725);
            uint32_t _i729;
            for (_i729 = 0; _i729 < _size725; ++_i729)
            {
              xfer += this->KeyValueMaps[_i729].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IntrinsicSafety);
          this->__isset.IntrinsicSafety = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeGuard);
          this->__isset.SafeGuard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ApplierInformation);
          this->__isset.ApplierInformation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->RiskAcceptability);
          this->__isset.RiskAcceptability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FurtherAction);
          this->__isset.FurtherAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Source);
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MeasureType.read(iprot);
          this->__isset.MeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMeasure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMeasure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter730;
    for (_iter730 = this->KeyValueMaps.begin(); _iter730 != this->KeyValueMaps.end(); ++_iter730)
    {
      xfer += (*_iter730).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IntrinsicSafety", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->IntrinsicSafety);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeGuard", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->SafeGuard);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ApplierInformation", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->ApplierInformation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskAcceptability", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->RiskAcceptability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FurtherAction", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->FurtherAction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->Source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MeasureType", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->MeasureType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMeasure &a, TDDIMeasure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.IntrinsicSafety, b.IntrinsicSafety);
  swap(a.SafeGuard, b.SafeGuard);
  swap(a.ApplierInformation, b.ApplierInformation);
  swap(a.RiskAcceptability, b.RiskAcceptability);
  swap(a.FurtherAction, b.FurtherAction);
  swap(a.Source, b.Source);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.MeasureType, b.MeasureType);
  swap(a.__isset, b.__isset);
}

TDDIMeasure::TDDIMeasure(const TDDIMeasure& other731) {
  Id = other731.Id;
  Name = other731.Name;
  Description = other731.Description;
  IsCitation = other731.IsCitation;
  IsAbstract = other731.IsAbstract;
  KeyValueMaps = other731.KeyValueMaps;
  CitedElement = other731.CitedElement;
  IntrinsicSafety = other731.IntrinsicSafety;
  SafeGuard = other731.SafeGuard;
  ApplierInformation = other731.ApplierInformation;
  RiskAcceptability = other731.RiskAcceptability;
  FurtherAction = other731.FurtherAction;
  Source = other731.Source;
  AssuranceLevel = other731.AssuranceLevel;
  MeasureType = other731.MeasureType;
  __isset = other731.__isset;
}
TDDIMeasure& TDDIMeasure::operator=(const TDDIMeasure& other732) {
  Id = other732.Id;
  Name = other732.Name;
  Description = other732.Description;
  IsCitation = other732.IsCitation;
  IsAbstract = other732.IsAbstract;
  KeyValueMaps = other732.KeyValueMaps;
  CitedElement = other732.CitedElement;
  IntrinsicSafety = other732.IntrinsicSafety;
  SafeGuard = other732.SafeGuard;
  ApplierInformation = other732.ApplierInformation;
  RiskAcceptability = other732.RiskAcceptability;
  FurtherAction = other732.FurtherAction;
  Source = other732.Source;
  AssuranceLevel = other732.AssuranceLevel;
  MeasureType = other732.MeasureType;
  __isset = other732.__isset;
  return *this;
}
void TDDIMeasure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMeasure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "IntrinsicSafety=" << to_string(IntrinsicSafety);
  out << ", " << "SafeGuard=" << to_string(SafeGuard);
  out << ", " << "ApplierInformation=" << to_string(ApplierInformation);
  out << ", " << "RiskAcceptability=" << to_string(RiskAcceptability);
  out << ", " << "FurtherAction=" << to_string(FurtherAction);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "MeasureType=" << to_string(MeasureType);
  out << ")";
}


TDDIFaultToleranceMeasure::~TDDIFaultToleranceMeasure() throw() {
}


void TDDIFaultToleranceMeasure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFaultToleranceMeasure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFaultToleranceMeasure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFaultToleranceMeasure::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFaultToleranceMeasure::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFaultToleranceMeasure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFaultToleranceMeasure::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFaultToleranceMeasure::__set_IntrinsicSafety(const std::string& val) {
  this->IntrinsicSafety = val;
}

void TDDIFaultToleranceMeasure::__set_SafeGuard(const std::string& val) {
  this->SafeGuard = val;
}

void TDDIFaultToleranceMeasure::__set_ApplierInformation(const std::string& val) {
  this->ApplierInformation = val;
}

void TDDIFaultToleranceMeasure::__set_RiskAcceptability(const bool val) {
  this->RiskAcceptability = val;
}

void TDDIFaultToleranceMeasure::__set_FurtherAction(const std::string& val) {
  this->FurtherAction = val;
}

void TDDIFaultToleranceMeasure::__set_Source(const std::string& val) {
  this->Source = val;
}

void TDDIFaultToleranceMeasure::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIFaultToleranceMeasure::__set_MeasureType(const TDDIMeasureType& val) {
  this->MeasureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFaultToleranceMeasure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFaultToleranceMeasure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size733;
            ::apache::thrift::protocol::TType _etype736;
            xfer += iprot->readListBegin(_etype736, _size733);
            this->KeyValueMaps.resize(_size733);
            uint32_t _i737;
            for (_i737 = 0; _i737 < _size733; ++_i737)
            {
              xfer += this->KeyValueMaps[_i737].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IntrinsicSafety);
          this->__isset.IntrinsicSafety = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeGuard);
          this->__isset.SafeGuard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ApplierInformation);
          this->__isset.ApplierInformation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->RiskAcceptability);
          this->__isset.RiskAcceptability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FurtherAction);
          this->__isset.FurtherAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Source);
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MeasureType.read(iprot);
          this->__isset.MeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFaultToleranceMeasure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFaultToleranceMeasure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter738;
    for (_iter738 = this->KeyValueMaps.begin(); _iter738 != this->KeyValueMaps.end(); ++_iter738)
    {
      xfer += (*_iter738).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IntrinsicSafety", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->IntrinsicSafety);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeGuard", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->SafeGuard);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ApplierInformation", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->ApplierInformation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskAcceptability", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->RiskAcceptability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FurtherAction", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->FurtherAction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->Source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MeasureType", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->MeasureType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFaultToleranceMeasure &a, TDDIFaultToleranceMeasure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.IntrinsicSafety, b.IntrinsicSafety);
  swap(a.SafeGuard, b.SafeGuard);
  swap(a.ApplierInformation, b.ApplierInformation);
  swap(a.RiskAcceptability, b.RiskAcceptability);
  swap(a.FurtherAction, b.FurtherAction);
  swap(a.Source, b.Source);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.MeasureType, b.MeasureType);
  swap(a.__isset, b.__isset);
}

TDDIFaultToleranceMeasure::TDDIFaultToleranceMeasure(const TDDIFaultToleranceMeasure& other739) {
  Id = other739.Id;
  Name = other739.Name;
  Description = other739.Description;
  IsCitation = other739.IsCitation;
  IsAbstract = other739.IsAbstract;
  KeyValueMaps = other739.KeyValueMaps;
  CitedElement = other739.CitedElement;
  IntrinsicSafety = other739.IntrinsicSafety;
  SafeGuard = other739.SafeGuard;
  ApplierInformation = other739.ApplierInformation;
  RiskAcceptability = other739.RiskAcceptability;
  FurtherAction = other739.FurtherAction;
  Source = other739.Source;
  AssuranceLevel = other739.AssuranceLevel;
  MeasureType = other739.MeasureType;
  __isset = other739.__isset;
}
TDDIFaultToleranceMeasure& TDDIFaultToleranceMeasure::operator=(const TDDIFaultToleranceMeasure& other740) {
  Id = other740.Id;
  Name = other740.Name;
  Description = other740.Description;
  IsCitation = other740.IsCitation;
  IsAbstract = other740.IsAbstract;
  KeyValueMaps = other740.KeyValueMaps;
  CitedElement = other740.CitedElement;
  IntrinsicSafety = other740.IntrinsicSafety;
  SafeGuard = other740.SafeGuard;
  ApplierInformation = other740.ApplierInformation;
  RiskAcceptability = other740.RiskAcceptability;
  FurtherAction = other740.FurtherAction;
  Source = other740.Source;
  AssuranceLevel = other740.AssuranceLevel;
  MeasureType = other740.MeasureType;
  __isset = other740.__isset;
  return *this;
}
void TDDIFaultToleranceMeasure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFaultToleranceMeasure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "IntrinsicSafety=" << to_string(IntrinsicSafety);
  out << ", " << "SafeGuard=" << to_string(SafeGuard);
  out << ", " << "ApplierInformation=" << to_string(ApplierInformation);
  out << ", " << "RiskAcceptability=" << to_string(RiskAcceptability);
  out << ", " << "FurtherAction=" << to_string(FurtherAction);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "MeasureType=" << to_string(MeasureType);
  out << ")";
}


TDDIMaintenanceProcedure::~TDDIMaintenanceProcedure() throw() {
}


void TDDIMaintenanceProcedure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMaintenanceProcedure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMaintenanceProcedure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMaintenanceProcedure::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIMaintenanceProcedure::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIMaintenanceProcedure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIMaintenanceProcedure::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIMaintenanceProcedure::__set_ActivityDescription(const std::string& val) {
  this->ActivityDescription = val;
}

void TDDIMaintenanceProcedure::__set_TechnicalDescription(const std::string& val) {
  this->TechnicalDescription = val;
}

void TDDIMaintenanceProcedure::__set_ToolSpecification(const std::string& val) {
  this->ToolSpecification = val;
}

void TDDIMaintenanceProcedure::__set_StaffNumber(const int32_t val) {
  this->StaffNumber = val;
}

void TDDIMaintenanceProcedure::__set_StaffSkillLevel(const std::string& val) {
  this->StaffSkillLevel = val;
}

void TDDIMaintenanceProcedure::__set_StafftrainingDescription(const std::string& val) {
  this->StafftrainingDescription = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMaintenanceProcedure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMaintenanceProcedure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size741;
            ::apache::thrift::protocol::TType _etype744;
            xfer += iprot->readListBegin(_etype744, _size741);
            this->KeyValueMaps.resize(_size741);
            uint32_t _i745;
            for (_i745 = 0; _i745 < _size741; ++_i745)
            {
              xfer += this->KeyValueMaps[_i745].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ActivityDescription);
          this->__isset.ActivityDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->TechnicalDescription);
          this->__isset.TechnicalDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ToolSpecification);
          this->__isset.ToolSpecification = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->StaffNumber);
          this->__isset.StaffNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->StaffSkillLevel);
          this->__isset.StaffSkillLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->StafftrainingDescription);
          this->__isset.StafftrainingDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMaintenanceProcedure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMaintenanceProcedure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter746;
    for (_iter746 = this->KeyValueMaps.begin(); _iter746 != this->KeyValueMaps.end(); ++_iter746)
    {
      xfer += (*_iter746).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ActivityDescription", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ActivityDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TechnicalDescription", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->TechnicalDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ToolSpecification", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->ToolSpecification);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StaffNumber", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->StaffNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StaffSkillLevel", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->StaffSkillLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StafftrainingDescription", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->StafftrainingDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMaintenanceProcedure &a, TDDIMaintenanceProcedure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.ActivityDescription, b.ActivityDescription);
  swap(a.TechnicalDescription, b.TechnicalDescription);
  swap(a.ToolSpecification, b.ToolSpecification);
  swap(a.StaffNumber, b.StaffNumber);
  swap(a.StaffSkillLevel, b.StaffSkillLevel);
  swap(a.StafftrainingDescription, b.StafftrainingDescription);
  swap(a.__isset, b.__isset);
}

TDDIMaintenanceProcedure::TDDIMaintenanceProcedure(const TDDIMaintenanceProcedure& other747) {
  Id = other747.Id;
  Name = other747.Name;
  Description = other747.Description;
  IsCitation = other747.IsCitation;
  IsAbstract = other747.IsAbstract;
  KeyValueMaps = other747.KeyValueMaps;
  CitedElement = other747.CitedElement;
  ActivityDescription = other747.ActivityDescription;
  TechnicalDescription = other747.TechnicalDescription;
  ToolSpecification = other747.ToolSpecification;
  StaffNumber = other747.StaffNumber;
  StaffSkillLevel = other747.StaffSkillLevel;
  StafftrainingDescription = other747.StafftrainingDescription;
  __isset = other747.__isset;
}
TDDIMaintenanceProcedure& TDDIMaintenanceProcedure::operator=(const TDDIMaintenanceProcedure& other748) {
  Id = other748.Id;
  Name = other748.Name;
  Description = other748.Description;
  IsCitation = other748.IsCitation;
  IsAbstract = other748.IsAbstract;
  KeyValueMaps = other748.KeyValueMaps;
  CitedElement = other748.CitedElement;
  ActivityDescription = other748.ActivityDescription;
  TechnicalDescription = other748.TechnicalDescription;
  ToolSpecification = other748.ToolSpecification;
  StaffNumber = other748.StaffNumber;
  StaffSkillLevel = other748.StaffSkillLevel;
  StafftrainingDescription = other748.StafftrainingDescription;
  __isset = other748.__isset;
  return *this;
}
void TDDIMaintenanceProcedure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMaintenanceProcedure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "ActivityDescription=" << to_string(ActivityDescription);
  out << ", " << "TechnicalDescription=" << to_string(TechnicalDescription);
  out << ", " << "ToolSpecification=" << to_string(ToolSpecification);
  out << ", " << "StaffNumber=" << to_string(StaffNumber);
  out << ", " << "StaffSkillLevel=" << to_string(StaffSkillLevel);
  out << ", " << "StafftrainingDescription=" << to_string(StafftrainingDescription);
  out << ")";
}


TDDIMeasureUnion::~TDDIMeasureUnion() throw() {
}


void TDDIMeasureUnion::__set_Measure(const TDDIMeasure& val) {
  this->Measure = val;
__isset.Measure = true;
}

void TDDIMeasureUnion::__set_FaultToleranceMeasure(const TDDIFaultToleranceMeasure& val) {
  this->FaultToleranceMeasure = val;
__isset.FaultToleranceMeasure = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIMeasureUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMeasureUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Measure.read(iprot);
          this->__isset.Measure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FaultToleranceMeasure.read(iprot);
          this->__isset.FaultToleranceMeasure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMeasureUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMeasureUnion");

  if (this->__isset.Measure) {
    xfer += oprot->writeFieldBegin("Measure", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Measure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FaultToleranceMeasure) {
    xfer += oprot->writeFieldBegin("FaultToleranceMeasure", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->FaultToleranceMeasure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMeasureUnion &a, TDDIMeasureUnion &b) {
  using ::std::swap;
  swap(a.Measure, b.Measure);
  swap(a.FaultToleranceMeasure, b.FaultToleranceMeasure);
  swap(a.__isset, b.__isset);
}

TDDIMeasureUnion::TDDIMeasureUnion(const TDDIMeasureUnion& other749) {
  Measure = other749.Measure;
  FaultToleranceMeasure = other749.FaultToleranceMeasure;
  __isset = other749.__isset;
}
TDDIMeasureUnion& TDDIMeasureUnion::operator=(const TDDIMeasureUnion& other750) {
  Measure = other750.Measure;
  FaultToleranceMeasure = other750.FaultToleranceMeasure;
  __isset = other750.__isset;
  return *this;
}
void TDDIMeasureUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMeasureUnion(";
  out << "Measure="; (__isset.Measure ? (out << to_string(Measure)) : (out << "<null>"));
  out << ", " << "FaultToleranceMeasure="; (__isset.FaultToleranceMeasure ? (out << to_string(FaultToleranceMeasure)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractMeasure::~TDDIAbstractMeasure() throw() {
}


void TDDIAbstractMeasure::__set_UsedMeasure(const TDDIMeasureUnion& val) {
  this->UsedMeasure = val;
}

void TDDIAbstractMeasure::__set_UsedMeasureType(const TDDIMeasureUnionType val) {
  this->UsedMeasureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractMeasure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractMeasure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedMeasure.read(iprot);
          this->__isset.UsedMeasure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast751;
          xfer += iprot->readI32(ecast751);
          this->UsedMeasureType = (TDDIMeasureUnionType)ecast751;
          this->__isset.UsedMeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractMeasure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractMeasure");

  xfer += oprot->writeFieldBegin("UsedMeasure", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedMeasure.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedMeasureType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedMeasureType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractMeasure &a, TDDIAbstractMeasure &b) {
  using ::std::swap;
  swap(a.UsedMeasure, b.UsedMeasure);
  swap(a.UsedMeasureType, b.UsedMeasureType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractMeasure::TDDIAbstractMeasure(const TDDIAbstractMeasure& other752) {
  UsedMeasure = other752.UsedMeasure;
  UsedMeasureType = other752.UsedMeasureType;
  __isset = other752.__isset;
}
TDDIAbstractMeasure& TDDIAbstractMeasure::operator=(const TDDIAbstractMeasure& other753) {
  UsedMeasure = other753.UsedMeasure;
  UsedMeasureType = other753.UsedMeasureType;
  __isset = other753.__isset;
  return *this;
}
void TDDIAbstractMeasure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractMeasure(";
  out << "UsedMeasure=" << to_string(UsedMeasure);
  out << ", " << "UsedMeasureType=" << to_string(UsedMeasureType);
  out << ")";
}


TDDIDependabilityArtifactUnion::~TDDIDependabilityArtifactUnion() throw() {
}


void TDDIDependabilityArtifactUnion::__set_DependabilityPackage(const TDDIAbstractDependabilityPackage& val) {
  this->DependabilityPackage = val;
__isset.DependabilityPackage = true;
}

void TDDIDependabilityArtifactUnion::__set_Measure(const TDDIAbstractMeasure& val) {
  this->Measure = val;
__isset.Measure = true;
}

void TDDIDependabilityArtifactUnion::__set_MeasureType(const TDDIMeasureType& val) {
  this->MeasureType = val;
__isset.MeasureType = true;
}

void TDDIDependabilityArtifactUnion::__set_MaintenanceProcedure(const TDDIMaintenanceProcedure& val) {
  this->MaintenanceProcedure = val;
__isset.MaintenanceProcedure = true;
}

void TDDIDependabilityArtifactUnion::__set_DomainElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainElement> val) {
  this->DomainElement = val;
__isset.DomainElement = true;
}

void TDDIDependabilityArtifactUnion::__set_RequirementArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementArtifact> val) {
  this->RequirementArtifact = val;
__isset.RequirementArtifact = true;
}

void TDDIDependabilityArtifactUnion::__set_HARAArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAArtifact> val) {
  this->HARAArtifact = val;
__isset.HARAArtifact = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIDependabilityArtifactUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDependabilityArtifactUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DependabilityPackage.read(iprot);
          this->__isset.DependabilityPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Measure.read(iprot);
          this->__isset.Measure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MeasureType.read(iprot);
          this->__isset.MeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MaintenanceProcedure.read(iprot);
          this->__isset.MaintenanceProcedure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DomainElement) { 
            this->DomainElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainElement>(new TDDIAbstractDomainElement);
          }
          xfer += this->DomainElement->read(iprot);
          bool wasSet = false;
          if (this->DomainElement->__isset.UsedDomainElement) { wasSet = true; }
          if (this->DomainElement->__isset.UsedDomainElementType) { wasSet = true; }
          if (!wasSet) { this->DomainElement.reset(); }
          this->__isset.DomainElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementArtifact) { 
            this->RequirementArtifact = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementArtifact>(new TDDIAbstractRequirementArtifact);
          }
          xfer += this->RequirementArtifact->read(iprot);
          bool wasSet = false;
          if (this->RequirementArtifact->__isset.UsedRequirementArtifact) { wasSet = true; }
          if (this->RequirementArtifact->__isset.UsedRequirementArtifactType) { wasSet = true; }
          if (!wasSet) { this->RequirementArtifact.reset(); }
          this->__isset.RequirementArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->HARAArtifact) { 
            this->HARAArtifact = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAArtifact>(new TDDIAbstractHARAArtifact);
          }
          xfer += this->HARAArtifact->read(iprot);
          bool wasSet = false;
          if (this->HARAArtifact->__isset.UsedHARAArtifact) { wasSet = true; }
          if (this->HARAArtifact->__isset.UsedHARAArtifactType) { wasSet = true; }
          if (!wasSet) { this->HARAArtifact.reset(); }
          this->__isset.HARAArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDependabilityArtifactUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDependabilityArtifactUnion");

  if (this->__isset.DependabilityPackage) {
    xfer += oprot->writeFieldBegin("DependabilityPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->DependabilityPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Measure) {
    xfer += oprot->writeFieldBegin("Measure", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->Measure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MeasureType) {
    xfer += oprot->writeFieldBegin("MeasureType", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->MeasureType.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MaintenanceProcedure) {
    xfer += oprot->writeFieldBegin("MaintenanceProcedure", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->MaintenanceProcedure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DomainElement) {
    xfer += oprot->writeFieldBegin("DomainElement", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->DomainElement) {
      xfer += this->DomainElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractDomainElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RequirementArtifact) {
    xfer += oprot->writeFieldBegin("RequirementArtifact", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->RequirementArtifact) {
      xfer += this->RequirementArtifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractRequirementArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HARAArtifact) {
    xfer += oprot->writeFieldBegin("HARAArtifact", ::apache::thrift::protocol::T_STRUCT, 7);
    if (this->HARAArtifact) {
      xfer += this->HARAArtifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractHARAArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDependabilityArtifactUnion &a, TDDIDependabilityArtifactUnion &b) {
  using ::std::swap;
  swap(a.DependabilityPackage, b.DependabilityPackage);
  swap(a.Measure, b.Measure);
  swap(a.MeasureType, b.MeasureType);
  swap(a.MaintenanceProcedure, b.MaintenanceProcedure);
  swap(a.DomainElement, b.DomainElement);
  swap(a.RequirementArtifact, b.RequirementArtifact);
  swap(a.HARAArtifact, b.HARAArtifact);
  swap(a.__isset, b.__isset);
}

TDDIDependabilityArtifactUnion::TDDIDependabilityArtifactUnion(const TDDIDependabilityArtifactUnion& other754) {
  DependabilityPackage = other754.DependabilityPackage;
  Measure = other754.Measure;
  MeasureType = other754.MeasureType;
  MaintenanceProcedure = other754.MaintenanceProcedure;
  DomainElement = other754.DomainElement;
  RequirementArtifact = other754.RequirementArtifact;
  HARAArtifact = other754.HARAArtifact;
  __isset = other754.__isset;
}
TDDIDependabilityArtifactUnion& TDDIDependabilityArtifactUnion::operator=(const TDDIDependabilityArtifactUnion& other755) {
  DependabilityPackage = other755.DependabilityPackage;
  Measure = other755.Measure;
  MeasureType = other755.MeasureType;
  MaintenanceProcedure = other755.MaintenanceProcedure;
  DomainElement = other755.DomainElement;
  RequirementArtifact = other755.RequirementArtifact;
  HARAArtifact = other755.HARAArtifact;
  __isset = other755.__isset;
  return *this;
}
void TDDIDependabilityArtifactUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDependabilityArtifactUnion(";
  out << "DependabilityPackage="; (__isset.DependabilityPackage ? (out << to_string(DependabilityPackage)) : (out << "<null>"));
  out << ", " << "Measure="; (__isset.Measure ? (out << to_string(Measure)) : (out << "<null>"));
  out << ", " << "MeasureType="; (__isset.MeasureType ? (out << to_string(MeasureType)) : (out << "<null>"));
  out << ", " << "MaintenanceProcedure="; (__isset.MaintenanceProcedure ? (out << to_string(MaintenanceProcedure)) : (out << "<null>"));
  out << ", " << "DomainElement="; (__isset.DomainElement ? (out << to_string(DomainElement)) : (out << "<null>"));
  out << ", " << "RequirementArtifact="; (__isset.RequirementArtifact ? (out << to_string(RequirementArtifact)) : (out << "<null>"));
  out << ", " << "HARAArtifact="; (__isset.HARAArtifact ? (out << to_string(HARAArtifact)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractDependabilityArtifact::~TDDIAbstractDependabilityArtifact() throw() {
}


void TDDIAbstractDependabilityArtifact::__set_UsedDependabilityArtifact(const TDDIDependabilityArtifactUnion& val) {
  this->UsedDependabilityArtifact = val;
}

void TDDIAbstractDependabilityArtifact::__set_UsedDependabilityArtifactType(const TDDIDependabilityArtifactUnionType val) {
  this->UsedDependabilityArtifactType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDependabilityArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedDependabilityArtifact.read(iprot);
          this->__isset.UsedDependabilityArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast756;
          xfer += iprot->readI32(ecast756);
          this->UsedDependabilityArtifactType = (TDDIDependabilityArtifactUnionType)ecast756;
          this->__isset.UsedDependabilityArtifactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDependabilityArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDependabilityArtifact");

  xfer += oprot->writeFieldBegin("UsedDependabilityArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedDependabilityArtifact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedDependabilityArtifactType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedDependabilityArtifactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDependabilityArtifact &a, TDDIAbstractDependabilityArtifact &b) {
  using ::std::swap;
  swap(a.UsedDependabilityArtifact, b.UsedDependabilityArtifact);
  swap(a.UsedDependabilityArtifactType, b.UsedDependabilityArtifactType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDependabilityArtifact::TDDIAbstractDependabilityArtifact(const TDDIAbstractDependabilityArtifact& other757) {
  UsedDependabilityArtifact = other757.UsedDependabilityArtifact;
  UsedDependabilityArtifactType = other757.UsedDependabilityArtifactType;
  __isset = other757.__isset;
}
TDDIAbstractDependabilityArtifact& TDDIAbstractDependabilityArtifact::operator=(const TDDIAbstractDependabilityArtifact& other758) {
  UsedDependabilityArtifact = other758.UsedDependabilityArtifact;
  UsedDependabilityArtifactType = other758.UsedDependabilityArtifactType;
  __isset = other758.__isset;
  return *this;
}
void TDDIAbstractDependabilityArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDependabilityArtifact(";
  out << "UsedDependabilityArtifact=" << to_string(UsedDependabilityArtifact);
  out << ", " << "UsedDependabilityArtifactType=" << to_string(UsedDependabilityArtifactType);
  out << ")";
}


TDDIDomainPackageUnion::~TDDIDomainPackageUnion() throw() {
}


void TDDIDomainPackageUnion::__set_DomainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> val) {
  this->DomainPackage = val;
__isset.DomainPackage = true;
}

void TDDIDomainPackageUnion::__set_DomainPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackageInterface> val) {
  this->DomainPackageInterface = val;
__isset.DomainPackageInterface = true;
}

void TDDIDomainPackageUnion::__set_DomainPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackageBinding> val) {
  this->DomainPackageBinding = val;
__isset.DomainPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIDomainPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDomainPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DomainPackage) { 
            this->DomainPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage>(new TDDIDomainPackage);
          }
          xfer += this->DomainPackage->read(iprot);
          bool wasSet = false;
          if (this->DomainPackage->__isset.Id) { wasSet = true; }
          if (this->DomainPackage->__isset.Name) { wasSet = true; }
          if (this->DomainPackage->__isset.Description) { wasSet = true; }
          if (this->DomainPackage->__isset.IsCitation) { wasSet = true; }
          if (this->DomainPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->DomainPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DomainPackage->__isset.CitedElement) { wasSet = true; }
          if (this->DomainPackage->__isset.DomainElements) { wasSet = true; }
          if (!wasSet) { this->DomainPackage.reset(); }
          this->__isset.DomainPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DomainPackageInterface) { 
            this->DomainPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackageInterface>(new TDDIDomainPackageInterface);
          }
          xfer += this->DomainPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->DomainPackageInterface->__isset.Id) { wasSet = true; }
          if (this->DomainPackageInterface->__isset.Name) { wasSet = true; }
          if (this->DomainPackageInterface->__isset.Description) { wasSet = true; }
          if (this->DomainPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->DomainPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->DomainPackageInterface->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DomainPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->DomainPackageInterface->__isset.DomainElements) { wasSet = true; }
          if (this->DomainPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->DomainPackageInterface.reset(); }
          this->__isset.DomainPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DomainPackageBinding) { 
            this->DomainPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackageBinding>(new TDDIDomainPackageBinding);
          }
          xfer += this->DomainPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->DomainPackageBinding->__isset.Id) { wasSet = true; }
          if (this->DomainPackageBinding->__isset.Name) { wasSet = true; }
          if (this->DomainPackageBinding->__isset.Description) { wasSet = true; }
          if (this->DomainPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->DomainPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->DomainPackageBinding->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DomainPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->DomainPackageBinding->__isset.DomainElements) { wasSet = true; }
          if (this->DomainPackageBinding->__isset.ParticipantPackages) { wasSet = true; }
          if (!wasSet) { this->DomainPackageBinding.reset(); }
          this->__isset.DomainPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDomainPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDomainPackageUnion");

  if (this->__isset.DomainPackage) {
    xfer += oprot->writeFieldBegin("DomainPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->DomainPackage) {
      xfer += this->DomainPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDomainPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DomainPackageInterface) {
    xfer += oprot->writeFieldBegin("DomainPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->DomainPackageInterface) {
      xfer += this->DomainPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDomainPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DomainPackageBinding) {
    xfer += oprot->writeFieldBegin("DomainPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->DomainPackageBinding) {
      xfer += this->DomainPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDomainPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDomainPackageUnion &a, TDDIDomainPackageUnion &b) {
  using ::std::swap;
  swap(a.DomainPackage, b.DomainPackage);
  swap(a.DomainPackageInterface, b.DomainPackageInterface);
  swap(a.DomainPackageBinding, b.DomainPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIDomainPackageUnion::TDDIDomainPackageUnion(const TDDIDomainPackageUnion& other759) {
  DomainPackage = other759.DomainPackage;
  DomainPackageInterface = other759.DomainPackageInterface;
  DomainPackageBinding = other759.DomainPackageBinding;
  __isset = other759.__isset;
}
TDDIDomainPackageUnion& TDDIDomainPackageUnion::operator=(const TDDIDomainPackageUnion& other760) {
  DomainPackage = other760.DomainPackage;
  DomainPackageInterface = other760.DomainPackageInterface;
  DomainPackageBinding = other760.DomainPackageBinding;
  __isset = other760.__isset;
  return *this;
}
void TDDIDomainPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDomainPackageUnion(";
  out << "DomainPackage="; (__isset.DomainPackage ? (out << to_string(DomainPackage)) : (out << "<null>"));
  out << ", " << "DomainPackageInterface="; (__isset.DomainPackageInterface ? (out << to_string(DomainPackageInterface)) : (out << "<null>"));
  out << ", " << "DomainPackageBinding="; (__isset.DomainPackageBinding ? (out << to_string(DomainPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractDomainPackage::~TDDIAbstractDomainPackage() throw() {
}


void TDDIAbstractDomainPackage::__set_UsedDomainPackage(const TDDIDomainPackageUnion& val) {
  this->UsedDomainPackage = val;
}

void TDDIAbstractDomainPackage::__set_UsedDomainPackageType(const TDDIAbstractDomainPackageType val) {
  this->UsedDomainPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDomainPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedDomainPackage.read(iprot);
          this->__isset.UsedDomainPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast761;
          xfer += iprot->readI32(ecast761);
          this->UsedDomainPackageType = (TDDIAbstractDomainPackageType)ecast761;
          this->__isset.UsedDomainPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDomainPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDomainPackage");

  xfer += oprot->writeFieldBegin("UsedDomainPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedDomainPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedDomainPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedDomainPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDomainPackage &a, TDDIAbstractDomainPackage &b) {
  using ::std::swap;
  swap(a.UsedDomainPackage, b.UsedDomainPackage);
  swap(a.UsedDomainPackageType, b.UsedDomainPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDomainPackage::TDDIAbstractDomainPackage(const TDDIAbstractDomainPackage& other762) {
  UsedDomainPackage = other762.UsedDomainPackage;
  UsedDomainPackageType = other762.UsedDomainPackageType;
  __isset = other762.__isset;
}
TDDIAbstractDomainPackage& TDDIAbstractDomainPackage::operator=(const TDDIAbstractDomainPackage& other763) {
  UsedDomainPackage = other763.UsedDomainPackage;
  UsedDomainPackageType = other763.UsedDomainPackageType;
  __isset = other763.__isset;
  return *this;
}
void TDDIAbstractDomainPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDomainPackage(";
  out << "UsedDomainPackage=" << to_string(UsedDomainPackage);
  out << ", " << "UsedDomainPackageType=" << to_string(UsedDomainPackageType);
  out << ")";
}


TDDIDomainPackage::~TDDIDomainPackage() throw() {
}


void TDDIDomainPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDomainPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDomainPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDomainPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDomainPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDomainPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIDomainPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIDomainPackage::__set_DomainElements(const std::vector<TDDIAbstractDomainElementRef> & val) {
  this->DomainElements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDomainPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDomainPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size764;
            ::apache::thrift::protocol::TType _etype767;
            xfer += iprot->readListBegin(_etype767, _size764);
            this->KeyValueMaps.resize(_size764);
            uint32_t _i768;
            for (_i768 = 0; _i768 < _size764; ++_i768)
            {
              xfer += this->KeyValueMaps[_i768].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DomainElements.clear();
            uint32_t _size769;
            ::apache::thrift::protocol::TType _etype772;
            xfer += iprot->readListBegin(_etype772, _size769);
            this->DomainElements.resize(_size769);
            uint32_t _i773;
            for (_i773 = 0; _i773 < _size769; ++_i773)
            {
              xfer += this->DomainElements[_i773].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DomainElements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDomainPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDomainPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter774;
    for (_iter774 = this->KeyValueMaps.begin(); _iter774 != this->KeyValueMaps.end(); ++_iter774)
    {
      xfer += (*_iter774).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DomainElements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DomainElements.size()));
    std::vector<TDDIAbstractDomainElementRef> ::const_iterator _iter775;
    for (_iter775 = this->DomainElements.begin(); _iter775 != this->DomainElements.end(); ++_iter775)
    {
      xfer += (*_iter775).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDomainPackage &a, TDDIDomainPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DomainElements, b.DomainElements);
  swap(a.__isset, b.__isset);
}

TDDIDomainPackage::TDDIDomainPackage(const TDDIDomainPackage& other776) {
  Id = other776.Id;
  Name = other776.Name;
  Description = other776.Description;
  IsCitation = other776.IsCitation;
  IsAbstract = other776.IsAbstract;
  KeyValueMaps = other776.KeyValueMaps;
  CitedElement = other776.CitedElement;
  DomainElements = other776.DomainElements;
  __isset = other776.__isset;
}
TDDIDomainPackage& TDDIDomainPackage::operator=(const TDDIDomainPackage& other777) {
  Id = other777.Id;
  Name = other777.Name;
  Description = other777.Description;
  IsCitation = other777.IsCitation;
  IsAbstract = other777.IsAbstract;
  KeyValueMaps = other777.KeyValueMaps;
  CitedElement = other777.CitedElement;
  DomainElements = other777.DomainElements;
  __isset = other777.__isset;
  return *this;
}
void TDDIDomainPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDomainPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DomainElements=" << to_string(DomainElements);
  out << ")";
}


TDDIDomainPackageInterface::~TDDIDomainPackageInterface() throw() {
}


void TDDIDomainPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDomainPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDomainPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDomainPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDomainPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDomainPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIDomainPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIDomainPackageInterface::__set_DomainElements(const std::vector<TDDIAbstractDomainElementRef> & val) {
  this->DomainElements = val;
}

void TDDIDomainPackageInterface::__set_Implements(const TDDIAbstractDomainPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDomainPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDomainPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size778;
            ::apache::thrift::protocol::TType _etype781;
            xfer += iprot->readListBegin(_etype781, _size778);
            this->KeyValueMaps.resize(_size778);
            uint32_t _i782;
            for (_i782 = 0; _i782 < _size778; ++_i782)
            {
              xfer += this->KeyValueMaps[_i782].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DomainElements.clear();
            uint32_t _size783;
            ::apache::thrift::protocol::TType _etype786;
            xfer += iprot->readListBegin(_etype786, _size783);
            this->DomainElements.resize(_size783);
            uint32_t _i787;
            for (_i787 = 0; _i787 < _size783; ++_i787)
            {
              xfer += this->DomainElements[_i787].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DomainElements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDomainPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDomainPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter788;
    for (_iter788 = this->KeyValueMaps.begin(); _iter788 != this->KeyValueMaps.end(); ++_iter788)
    {
      xfer += (*_iter788).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DomainElements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DomainElements.size()));
    std::vector<TDDIAbstractDomainElementRef> ::const_iterator _iter789;
    for (_iter789 = this->DomainElements.begin(); _iter789 != this->DomainElements.end(); ++_iter789)
    {
      xfer += (*_iter789).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDomainPackageInterface &a, TDDIDomainPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DomainElements, b.DomainElements);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIDomainPackageInterface::TDDIDomainPackageInterface(const TDDIDomainPackageInterface& other790) {
  Id = other790.Id;
  Name = other790.Name;
  Description = other790.Description;
  IsCitation = other790.IsCitation;
  IsAbstract = other790.IsAbstract;
  KeyValueMaps = other790.KeyValueMaps;
  CitedElement = other790.CitedElement;
  DomainElements = other790.DomainElements;
  Implements = other790.Implements;
  __isset = other790.__isset;
}
TDDIDomainPackageInterface& TDDIDomainPackageInterface::operator=(const TDDIDomainPackageInterface& other791) {
  Id = other791.Id;
  Name = other791.Name;
  Description = other791.Description;
  IsCitation = other791.IsCitation;
  IsAbstract = other791.IsAbstract;
  KeyValueMaps = other791.KeyValueMaps;
  CitedElement = other791.CitedElement;
  DomainElements = other791.DomainElements;
  Implements = other791.Implements;
  __isset = other791.__isset;
  return *this;
}
void TDDIDomainPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDomainPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DomainElements=" << to_string(DomainElements);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIDomainPackageBinding::~TDDIDomainPackageBinding() throw() {
}


void TDDIDomainPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDomainPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDomainPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDomainPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDomainPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDomainPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIDomainPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIDomainPackageBinding::__set_DomainElements(const std::vector<TDDIAbstractDomainElementRef> & val) {
  this->DomainElements = val;
}

void TDDIDomainPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractDomainPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDomainPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDomainPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size792;
            ::apache::thrift::protocol::TType _etype795;
            xfer += iprot->readListBegin(_etype795, _size792);
            this->KeyValueMaps.resize(_size792);
            uint32_t _i796;
            for (_i796 = 0; _i796 < _size792; ++_i796)
            {
              xfer += this->KeyValueMaps[_i796].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DomainElements.clear();
            uint32_t _size797;
            ::apache::thrift::protocol::TType _etype800;
            xfer += iprot->readListBegin(_etype800, _size797);
            this->DomainElements.resize(_size797);
            uint32_t _i801;
            for (_i801 = 0; _i801 < _size797; ++_i801)
            {
              xfer += this->DomainElements[_i801].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DomainElements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size802;
            ::apache::thrift::protocol::TType _etype805;
            xfer += iprot->readListBegin(_etype805, _size802);
            this->ParticipantPackages.resize(_size802);
            uint32_t _i806;
            for (_i806 = 0; _i806 < _size802; ++_i806)
            {
              xfer += this->ParticipantPackages[_i806].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDomainPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDomainPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter807;
    for (_iter807 = this->KeyValueMaps.begin(); _iter807 != this->KeyValueMaps.end(); ++_iter807)
    {
      xfer += (*_iter807).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DomainElements", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DomainElements.size()));
    std::vector<TDDIAbstractDomainElementRef> ::const_iterator _iter808;
    for (_iter808 = this->DomainElements.begin(); _iter808 != this->DomainElements.end(); ++_iter808)
    {
      xfer += (*_iter808).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractDomainPackageRef> ::const_iterator _iter809;
    for (_iter809 = this->ParticipantPackages.begin(); _iter809 != this->ParticipantPackages.end(); ++_iter809)
    {
      xfer += (*_iter809).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDomainPackageBinding &a, TDDIDomainPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DomainElements, b.DomainElements);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIDomainPackageBinding::TDDIDomainPackageBinding(const TDDIDomainPackageBinding& other810) {
  Id = other810.Id;
  Name = other810.Name;
  Description = other810.Description;
  IsCitation = other810.IsCitation;
  IsAbstract = other810.IsAbstract;
  KeyValueMaps = other810.KeyValueMaps;
  CitedElement = other810.CitedElement;
  DomainElements = other810.DomainElements;
  ParticipantPackages = other810.ParticipantPackages;
  __isset = other810.__isset;
}
TDDIDomainPackageBinding& TDDIDomainPackageBinding::operator=(const TDDIDomainPackageBinding& other811) {
  Id = other811.Id;
  Name = other811.Name;
  Description = other811.Description;
  IsCitation = other811.IsCitation;
  IsAbstract = other811.IsAbstract;
  KeyValueMaps = other811.KeyValueMaps;
  CitedElement = other811.CitedElement;
  DomainElements = other811.DomainElements;
  ParticipantPackages = other811.ParticipantPackages;
  __isset = other811.__isset;
  return *this;
}
void TDDIDomainPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDomainPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DomainElements=" << to_string(DomainElements);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIAssuranceLevel::~TDDIAssuranceLevel() throw() {
}


void TDDIAssuranceLevel::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIAssuranceLevel::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIAssuranceLevel::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIAssuranceLevel::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssuranceLevel::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssuranceLevel::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIAssuranceLevel::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceLevel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceLevel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size812;
            ::apache::thrift::protocol::TType _etype815;
            xfer += iprot->readListBegin(_etype815, _size812);
            this->KeyValueMaps.resize(_size812);
            uint32_t _i816;
            for (_i816 = 0; _i816 < _size812; ++_i816)
            {
              xfer += this->KeyValueMaps[_i816].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceLevel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceLevel");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter817;
    for (_iter817 = this->KeyValueMaps.begin(); _iter817 != this->KeyValueMaps.end(); ++_iter817)
    {
      xfer += (*_iter817).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceLevel &a, TDDIAssuranceLevel &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceLevel::TDDIAssuranceLevel(const TDDIAssuranceLevel& other818) {
  Id = other818.Id;
  Name = other818.Name;
  Description = other818.Description;
  IsCitation = other818.IsCitation;
  IsAbstract = other818.IsAbstract;
  KeyValueMaps = other818.KeyValueMaps;
  CitedElement = other818.CitedElement;
  __isset = other818.__isset;
}
TDDIAssuranceLevel& TDDIAssuranceLevel::operator=(const TDDIAssuranceLevel& other819) {
  Id = other819.Id;
  Name = other819.Name;
  Description = other819.Description;
  IsCitation = other819.IsCitation;
  IsAbstract = other819.IsAbstract;
  KeyValueMaps = other819.KeyValueMaps;
  CitedElement = other819.CitedElement;
  __isset = other819.__isset;
  return *this;
}
void TDDIAssuranceLevel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceLevel(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ")";
}


TDDIStandard::~TDDIStandard() throw() {
}


void TDDIStandard::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIStandard::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIStandard::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIStandard::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIStandard::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIStandard::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIStandard::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIStandard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIStandard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size820;
            ::apache::thrift::protocol::TType _etype823;
            xfer += iprot->readListBegin(_etype823, _size820);
            this->KeyValueMaps.resize(_size820);
            uint32_t _i824;
            for (_i824 = 0; _i824 < _size820; ++_i824)
            {
              xfer += this->KeyValueMaps[_i824].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIStandard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIStandard");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter825;
    for (_iter825 = this->KeyValueMaps.begin(); _iter825 != this->KeyValueMaps.end(); ++_iter825)
    {
      xfer += (*_iter825).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIStandard &a, TDDIStandard &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.__isset, b.__isset);
}

TDDIStandard::TDDIStandard(const TDDIStandard& other826) {
  Id = other826.Id;
  Name = other826.Name;
  Description = other826.Description;
  IsCitation = other826.IsCitation;
  IsAbstract = other826.IsAbstract;
  KeyValueMaps = other826.KeyValueMaps;
  CitedElement = other826.CitedElement;
  __isset = other826.__isset;
}
TDDIStandard& TDDIStandard::operator=(const TDDIStandard& other827) {
  Id = other827.Id;
  Name = other827.Name;
  Description = other827.Description;
  IsCitation = other827.IsCitation;
  IsAbstract = other827.IsAbstract;
  KeyValueMaps = other827.KeyValueMaps;
  CitedElement = other827.CitedElement;
  __isset = other827.__isset;
  return *this;
}
void TDDIStandard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIStandard(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ")";
}


TDDISafetyStandard::~TDDISafetyStandard() throw() {
}


void TDDISafetyStandard::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISafetyStandard::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISafetyStandard::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISafetyStandard::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDISafetyStandard::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDISafetyStandard::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDISafetyStandard::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDISafetyStandard::__set_AssuranceLevels(const std::vector<TDDIAssuranceLevel> & val) {
  this->AssuranceLevels = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISafetyStandard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISafetyStandard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size828;
            ::apache::thrift::protocol::TType _etype831;
            xfer += iprot->readListBegin(_etype831, _size828);
            this->KeyValueMaps.resize(_size828);
            uint32_t _i832;
            for (_i832 = 0; _i832 < _size828; ++_i832)
            {
              xfer += this->KeyValueMaps[_i832].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceLevels.clear();
            uint32_t _size833;
            ::apache::thrift::protocol::TType _etype836;
            xfer += iprot->readListBegin(_etype836, _size833);
            this->AssuranceLevels.resize(_size833);
            uint32_t _i837;
            for (_i837 = 0; _i837 < _size833; ++_i837)
            {
              xfer += this->AssuranceLevels[_i837].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceLevels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISafetyStandard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISafetyStandard");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter838;
    for (_iter838 = this->KeyValueMaps.begin(); _iter838 != this->KeyValueMaps.end(); ++_iter838)
    {
      xfer += (*_iter838).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevels", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceLevels.size()));
    std::vector<TDDIAssuranceLevel> ::const_iterator _iter839;
    for (_iter839 = this->AssuranceLevels.begin(); _iter839 != this->AssuranceLevels.end(); ++_iter839)
    {
      xfer += (*_iter839).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISafetyStandard &a, TDDISafetyStandard &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AssuranceLevels, b.AssuranceLevels);
  swap(a.__isset, b.__isset);
}

TDDISafetyStandard::TDDISafetyStandard(const TDDISafetyStandard& other840) {
  Id = other840.Id;
  Name = other840.Name;
  Description = other840.Description;
  IsCitation = other840.IsCitation;
  IsAbstract = other840.IsAbstract;
  KeyValueMaps = other840.KeyValueMaps;
  CitedElement = other840.CitedElement;
  AssuranceLevels = other840.AssuranceLevels;
  __isset = other840.__isset;
}
TDDISafetyStandard& TDDISafetyStandard::operator=(const TDDISafetyStandard& other841) {
  Id = other841.Id;
  Name = other841.Name;
  Description = other841.Description;
  IsCitation = other841.IsCitation;
  IsAbstract = other841.IsAbstract;
  KeyValueMaps = other841.KeyValueMaps;
  CitedElement = other841.CitedElement;
  AssuranceLevels = other841.AssuranceLevels;
  __isset = other841.__isset;
  return *this;
}
void TDDISafetyStandard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISafetyStandard(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AssuranceLevels=" << to_string(AssuranceLevels);
  out << ")";
}


TDDIStandardUnion::~TDDIStandardUnion() throw() {
}


void TDDIStandardUnion::__set_Standard(const TDDIStandard& val) {
  this->Standard = val;
__isset.Standard = true;
}

void TDDIStandardUnion::__set_SafetyStandard(const TDDISafetyStandard& val) {
  this->SafetyStandard = val;
__isset.SafetyStandard = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIStandardUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIStandardUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Standard.read(iprot);
          this->__isset.Standard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SafetyStandard.read(iprot);
          this->__isset.SafetyStandard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIStandardUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIStandardUnion");

  if (this->__isset.Standard) {
    xfer += oprot->writeFieldBegin("Standard", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Standard.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SafetyStandard) {
    xfer += oprot->writeFieldBegin("SafetyStandard", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->SafetyStandard.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIStandardUnion &a, TDDIStandardUnion &b) {
  using ::std::swap;
  swap(a.Standard, b.Standard);
  swap(a.SafetyStandard, b.SafetyStandard);
  swap(a.__isset, b.__isset);
}

TDDIStandardUnion::TDDIStandardUnion(const TDDIStandardUnion& other842) {
  Standard = other842.Standard;
  SafetyStandard = other842.SafetyStandard;
  __isset = other842.__isset;
}
TDDIStandardUnion& TDDIStandardUnion::operator=(const TDDIStandardUnion& other843) {
  Standard = other843.Standard;
  SafetyStandard = other843.SafetyStandard;
  __isset = other843.__isset;
  return *this;
}
void TDDIStandardUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIStandardUnion(";
  out << "Standard="; (__isset.Standard ? (out << to_string(Standard)) : (out << "<null>"));
  out << ", " << "SafetyStandard="; (__isset.SafetyStandard ? (out << to_string(SafetyStandard)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractStandard::~TDDIAbstractStandard() throw() {
}


void TDDIAbstractStandard::__set_UsedStandard(const TDDIStandardUnion& val) {
  this->UsedStandard = val;
}

void TDDIAbstractStandard::__set_UsedStandardType(const TDDIStandardUnionType val) {
  this->UsedStandardType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractStandard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractStandard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedStandard.read(iprot);
          this->__isset.UsedStandard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast844;
          xfer += iprot->readI32(ecast844);
          this->UsedStandardType = (TDDIStandardUnionType)ecast844;
          this->__isset.UsedStandardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractStandard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractStandard");

  xfer += oprot->writeFieldBegin("UsedStandard", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedStandard.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedStandardType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedStandardType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractStandard &a, TDDIAbstractStandard &b) {
  using ::std::swap;
  swap(a.UsedStandard, b.UsedStandard);
  swap(a.UsedStandardType, b.UsedStandardType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractStandard::TDDIAbstractStandard(const TDDIAbstractStandard& other845) {
  UsedStandard = other845.UsedStandard;
  UsedStandardType = other845.UsedStandardType;
  __isset = other845.__isset;
}
TDDIAbstractStandard& TDDIAbstractStandard::operator=(const TDDIAbstractStandard& other846) {
  UsedStandard = other846.UsedStandard;
  UsedStandardType = other846.UsedStandardType;
  __isset = other846.__isset;
  return *this;
}
void TDDIAbstractStandard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractStandard(";
  out << "UsedStandard=" << to_string(UsedStandard);
  out << ", " << "UsedStandardType=" << to_string(UsedStandardType);
  out << ")";
}


TDDIDomainElementUnion::~TDDIDomainElementUnion() throw() {
}


void TDDIDomainElementUnion::__set_DomainPackage(const TDDIAbstractDomainPackage& val) {
  this->DomainPackage = val;
__isset.DomainPackage = true;
}

void TDDIDomainElementUnion::__set_Standard(const TDDIAbstractStandard& val) {
  this->Standard = val;
__isset.Standard = true;
}

void TDDIDomainElementUnion::__set_AssuranceLevel(const TDDIAssuranceLevel& val) {
  this->AssuranceLevel = val;
__isset.AssuranceLevel = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIDomainElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDomainElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DomainPackage.read(iprot);
          this->__isset.DomainPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Standard.read(iprot);
          this->__isset.Standard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->AssuranceLevel.read(iprot);
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDomainElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDomainElementUnion");

  if (this->__isset.DomainPackage) {
    xfer += oprot->writeFieldBegin("DomainPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->DomainPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Standard) {
    xfer += oprot->writeFieldBegin("Standard", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->Standard.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssuranceLevel) {
    xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->AssuranceLevel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDomainElementUnion &a, TDDIDomainElementUnion &b) {
  using ::std::swap;
  swap(a.DomainPackage, b.DomainPackage);
  swap(a.Standard, b.Standard);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.__isset, b.__isset);
}

TDDIDomainElementUnion::TDDIDomainElementUnion(const TDDIDomainElementUnion& other847) {
  DomainPackage = other847.DomainPackage;
  Standard = other847.Standard;
  AssuranceLevel = other847.AssuranceLevel;
  __isset = other847.__isset;
}
TDDIDomainElementUnion& TDDIDomainElementUnion::operator=(const TDDIDomainElementUnion& other848) {
  DomainPackage = other848.DomainPackage;
  Standard = other848.Standard;
  AssuranceLevel = other848.AssuranceLevel;
  __isset = other848.__isset;
  return *this;
}
void TDDIDomainElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDomainElementUnion(";
  out << "DomainPackage="; (__isset.DomainPackage ? (out << to_string(DomainPackage)) : (out << "<null>"));
  out << ", " << "Standard="; (__isset.Standard ? (out << to_string(Standard)) : (out << "<null>"));
  out << ", " << "AssuranceLevel="; (__isset.AssuranceLevel ? (out << to_string(AssuranceLevel)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractDomainElement::~TDDIAbstractDomainElement() throw() {
}


void TDDIAbstractDomainElement::__set_UsedDomainElement(const TDDIDomainElementUnion& val) {
  this->UsedDomainElement = val;
}

void TDDIAbstractDomainElement::__set_UsedDomainElementType(const TDDIDomainElementUnionType val) {
  this->UsedDomainElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDomainElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedDomainElement.read(iprot);
          this->__isset.UsedDomainElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast849;
          xfer += iprot->readI32(ecast849);
          this->UsedDomainElementType = (TDDIDomainElementUnionType)ecast849;
          this->__isset.UsedDomainElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDomainElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDomainElement");

  xfer += oprot->writeFieldBegin("UsedDomainElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedDomainElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedDomainElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedDomainElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDomainElement &a, TDDIAbstractDomainElement &b) {
  using ::std::swap;
  swap(a.UsedDomainElement, b.UsedDomainElement);
  swap(a.UsedDomainElementType, b.UsedDomainElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDomainElement::TDDIAbstractDomainElement(const TDDIAbstractDomainElement& other850) {
  UsedDomainElement = other850.UsedDomainElement;
  UsedDomainElementType = other850.UsedDomainElementType;
  __isset = other850.__isset;
}
TDDIAbstractDomainElement& TDDIAbstractDomainElement::operator=(const TDDIAbstractDomainElement& other851) {
  UsedDomainElement = other851.UsedDomainElement;
  UsedDomainElementType = other851.UsedDomainElementType;
  __isset = other851.__isset;
  return *this;
}
void TDDIAbstractDomainElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDomainElement(";
  out << "UsedDomainElement=" << to_string(UsedDomainElement);
  out << ", " << "UsedDomainElementType=" << to_string(UsedDomainElementType);
  out << ")";
}


TDDIFailureMode::~TDDIFailureMode() throw() {
}


void TDDIFailureMode::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFailureMode::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFailureMode::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFailureMode::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFailureMode::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFailureMode::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFailureMode::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureMode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureMode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size852;
            ::apache::thrift::protocol::TType _etype855;
            xfer += iprot->readListBegin(_etype855, _size852);
            this->KeyValueMaps.resize(_size852);
            uint32_t _i856;
            for (_i856 = 0; _i856 < _size852; ++_i856)
            {
              xfer += this->KeyValueMaps[_i856].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureMode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureMode");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter857;
    for (_iter857 = this->KeyValueMaps.begin(); _iter857 != this->KeyValueMaps.end(); ++_iter857)
    {
      xfer += (*_iter857).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureMode &a, TDDIFailureMode &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.__isset, b.__isset);
}

TDDIFailureMode::TDDIFailureMode(const TDDIFailureMode& other858) {
  Id = other858.Id;
  Name = other858.Name;
  Description = other858.Description;
  IsCitation = other858.IsCitation;
  IsAbstract = other858.IsAbstract;
  KeyValueMaps = other858.KeyValueMaps;
  CitedElement = other858.CitedElement;
  __isset = other858.__isset;
}
TDDIFailureMode& TDDIFailureMode::operator=(const TDDIFailureMode& other859) {
  Id = other859.Id;
  Name = other859.Name;
  Description = other859.Description;
  IsCitation = other859.IsCitation;
  IsAbstract = other859.IsAbstract;
  KeyValueMaps = other859.KeyValueMaps;
  CitedElement = other859.CitedElement;
  __isset = other859.__isset;
  return *this;
}
void TDDIFailureMode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureMode(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ")";
}


TDDIProbDistParam::~TDDIProbDistParam() throw() {
}


void TDDIProbDistParam::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIProbDistParam::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIProbDistParam::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIProbDistParam::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIProbDistParam::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIProbDistParam::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIProbDistParam::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIProbDistParam::__set_Value(const std::string& val) {
  this->Value = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIProbDistParam& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIProbDistParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size860;
            ::apache::thrift::protocol::TType _etype863;
            xfer += iprot->readListBegin(_etype863, _size860);
            this->KeyValueMaps.resize(_size860);
            uint32_t _i864;
            for (_i864 = 0; _i864 < _size860; ++_i864)
            {
              xfer += this->KeyValueMaps[_i864].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIProbDistParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIProbDistParam");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter865;
    for (_iter865 = this->KeyValueMaps.begin(); _iter865 != this->KeyValueMaps.end(); ++_iter865)
    {
      xfer += (*_iter865).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIProbDistParam &a, TDDIProbDistParam &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Value, b.Value);
  swap(a.__isset, b.__isset);
}

TDDIProbDistParam::TDDIProbDistParam(const TDDIProbDistParam& other866) {
  Id = other866.Id;
  Name = other866.Name;
  Description = other866.Description;
  IsCitation = other866.IsCitation;
  IsAbstract = other866.IsAbstract;
  KeyValueMaps = other866.KeyValueMaps;
  CitedElement = other866.CitedElement;
  Value = other866.Value;
  __isset = other866.__isset;
}
TDDIProbDistParam& TDDIProbDistParam::operator=(const TDDIProbDistParam& other867) {
  Id = other867.Id;
  Name = other867.Name;
  Description = other867.Description;
  IsCitation = other867.IsCitation;
  IsAbstract = other867.IsAbstract;
  KeyValueMaps = other867.KeyValueMaps;
  CitedElement = other867.CitedElement;
  Value = other867.Value;
  __isset = other867.__isset;
  return *this;
}
void TDDIProbDistParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIProbDistParam(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Value=" << to_string(Value);
  out << ")";
}


TDDIProbabilityDistribution::~TDDIProbabilityDistribution() throw() {
}


void TDDIProbabilityDistribution::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIProbabilityDistribution::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIProbabilityDistribution::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIProbabilityDistribution::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIProbabilityDistribution::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIProbabilityDistribution::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIProbabilityDistribution::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIProbabilityDistribution::__set_Type(const std::string& val) {
  this->Type = val;
}

void TDDIProbabilityDistribution::__set_ProbDistParams(const std::vector<TDDIProbDistParam> & val) {
  this->ProbDistParams = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIProbabilityDistribution& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIProbabilityDistribution::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size868;
            ::apache::thrift::protocol::TType _etype871;
            xfer += iprot->readListBegin(_etype871, _size868);
            this->KeyValueMaps.resize(_size868);
            uint32_t _i872;
            for (_i872 = 0; _i872 < _size868; ++_i872)
            {
              xfer += this->KeyValueMaps[_i872].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Type);
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ProbDistParams.clear();
            uint32_t _size873;
            ::apache::thrift::protocol::TType _etype876;
            xfer += iprot->readListBegin(_etype876, _size873);
            this->ProbDistParams.resize(_size873);
            uint32_t _i877;
            for (_i877 = 0; _i877 < _size873; ++_i877)
            {
              xfer += this->ProbDistParams[_i877].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ProbDistParams = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIProbabilityDistribution::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIProbabilityDistribution");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter878;
    for (_iter878 = this->KeyValueMaps.begin(); _iter878 != this->KeyValueMaps.end(); ++_iter878)
    {
      xfer += (*_iter878).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbDistParams", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ProbDistParams.size()));
    std::vector<TDDIProbDistParam> ::const_iterator _iter879;
    for (_iter879 = this->ProbDistParams.begin(); _iter879 != this->ProbDistParams.end(); ++_iter879)
    {
      xfer += (*_iter879).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIProbabilityDistribution &a, TDDIProbabilityDistribution &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Type, b.Type);
  swap(a.ProbDistParams, b.ProbDistParams);
  swap(a.__isset, b.__isset);
}

TDDIProbabilityDistribution::TDDIProbabilityDistribution(const TDDIProbabilityDistribution& other880) {
  Id = other880.Id;
  Name = other880.Name;
  Description = other880.Description;
  IsCitation = other880.IsCitation;
  IsAbstract = other880.IsAbstract;
  KeyValueMaps = other880.KeyValueMaps;
  CitedElement = other880.CitedElement;
  Type = other880.Type;
  ProbDistParams = other880.ProbDistParams;
  __isset = other880.__isset;
}
TDDIProbabilityDistribution& TDDIProbabilityDistribution::operator=(const TDDIProbabilityDistribution& other881) {
  Id = other881.Id;
  Name = other881.Name;
  Description = other881.Description;
  IsCitation = other881.IsCitation;
  IsAbstract = other881.IsAbstract;
  KeyValueMaps = other881.KeyValueMaps;
  CitedElement = other881.CitedElement;
  Type = other881.Type;
  ProbDistParams = other881.ProbDistParams;
  __isset = other881.__isset;
  return *this;
}
void TDDIProbabilityDistribution::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIProbabilityDistribution(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "ProbDistParams=" << to_string(ProbDistParams);
  out << ")";
}


TDDIFailureUnion::~TDDIFailureUnion() throw() {
}


void TDDIFailureUnion::__set_InterfaceFailure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInterfaceFailure> val) {
  this->InterfaceFailure = val;
__isset.InterfaceFailure = true;
}

void TDDIFailureUnion::__set_InternalFailure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInternalFailure> val) {
  this->InternalFailure = val;
__isset.InternalFailure = true;
}

void TDDIFailureUnion::__set_CCF(::apache::thrift::stdcxx::shared_ptr<TDDICCF> val) {
  this->CCF = val;
__isset.CCF = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->InterfaceFailure) { 
            this->InterfaceFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInterfaceFailure>(new TDDIAbstractInterfaceFailure);
          }
          xfer += this->InterfaceFailure->read(iprot);
          bool wasSet = false;
          if (this->InterfaceFailure->__isset.UsedInterfaceFailure) { wasSet = true; }
          if (this->InterfaceFailure->__isset.UsedInterfaceFailureType) { wasSet = true; }
          if (!wasSet) { this->InterfaceFailure.reset(); }
          this->__isset.InterfaceFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->InternalFailure) { 
            this->InternalFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInternalFailure>(new TDDIAbstractInternalFailure);
          }
          xfer += this->InternalFailure->read(iprot);
          bool wasSet = false;
          if (this->InternalFailure->__isset.UsedInternalFailure) { wasSet = true; }
          if (this->InternalFailure->__isset.UsedInternalFailureType) { wasSet = true; }
          if (!wasSet) { this->InternalFailure.reset(); }
          this->__isset.InternalFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CCF) { 
            this->CCF = ::apache::thrift::stdcxx::shared_ptr<TDDICCF>(new TDDICCF);
          }
          xfer += this->CCF->read(iprot);
          bool wasSet = false;
          if (this->CCF->__isset.Id) { wasSet = true; }
          if (this->CCF->__isset.Name) { wasSet = true; }
          if (this->CCF->__isset.Description) { wasSet = true; }
          if (this->CCF->__isset.IsCitation) { wasSet = true; }
          if (this->CCF->__isset.IsAbstract) { wasSet = true; }
          if (this->CCF->__isset.KeyValueMaps) { wasSet = true; }
          if (this->CCF->__isset.CitedElement) { wasSet = true; }
          if (this->CCF->__isset.FailureRate) { wasSet = true; }
          if (this->CCF->__isset.FailureMode) { wasSet = true; }
          if (this->CCF->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->CCF->__isset.Failures) { wasSet = true; }
          if (!wasSet) { this->CCF.reset(); }
          this->__isset.CCF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureUnion");

  if (this->__isset.InterfaceFailure) {
    xfer += oprot->writeFieldBegin("InterfaceFailure", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->InterfaceFailure) {
      xfer += this->InterfaceFailure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractInterfaceFailure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.InternalFailure) {
    xfer += oprot->writeFieldBegin("InternalFailure", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->InternalFailure) {
      xfer += this->InternalFailure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractInternalFailure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.CCF) {
    xfer += oprot->writeFieldBegin("CCF", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->CCF) {
      xfer += this->CCF->write(oprot); 
    } else {oprot->writeStructBegin("TDDICCF"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureUnion &a, TDDIFailureUnion &b) {
  using ::std::swap;
  swap(a.InterfaceFailure, b.InterfaceFailure);
  swap(a.InternalFailure, b.InternalFailure);
  swap(a.CCF, b.CCF);
  swap(a.__isset, b.__isset);
}

TDDIFailureUnion::TDDIFailureUnion(const TDDIFailureUnion& other882) {
  InterfaceFailure = other882.InterfaceFailure;
  InternalFailure = other882.InternalFailure;
  CCF = other882.CCF;
  __isset = other882.__isset;
}
TDDIFailureUnion& TDDIFailureUnion::operator=(const TDDIFailureUnion& other883) {
  InterfaceFailure = other883.InterfaceFailure;
  InternalFailure = other883.InternalFailure;
  CCF = other883.CCF;
  __isset = other883.__isset;
  return *this;
}
void TDDIFailureUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureUnion(";
  out << "InterfaceFailure="; (__isset.InterfaceFailure ? (out << to_string(InterfaceFailure)) : (out << "<null>"));
  out << ", " << "InternalFailure="; (__isset.InternalFailure ? (out << to_string(InternalFailure)) : (out << "<null>"));
  out << ", " << "CCF="; (__isset.CCF ? (out << to_string(CCF)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFailure::~TDDIAbstractFailure() throw() {
}


void TDDIAbstractFailure::__set_UsedFailure(const TDDIFailureUnion& val) {
  this->UsedFailure = val;
}

void TDDIAbstractFailure::__set_UsedFailureType(const TDDIFailureUnionType val) {
  this->UsedFailureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFailure.read(iprot);
          this->__isset.UsedFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast884;
          xfer += iprot->readI32(ecast884);
          this->UsedFailureType = (TDDIFailureUnionType)ecast884;
          this->__isset.UsedFailureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailure");

  xfer += oprot->writeFieldBegin("UsedFailure", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFailure.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFailureType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFailureType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailure &a, TDDIAbstractFailure &b) {
  using ::std::swap;
  swap(a.UsedFailure, b.UsedFailure);
  swap(a.UsedFailureType, b.UsedFailureType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailure::TDDIAbstractFailure(const TDDIAbstractFailure& other885) {
  UsedFailure = other885.UsedFailure;
  UsedFailureType = other885.UsedFailureType;
  __isset = other885.__isset;
}
TDDIAbstractFailure& TDDIAbstractFailure::operator=(const TDDIAbstractFailure& other886) {
  UsedFailure = other886.UsedFailure;
  UsedFailureType = other886.UsedFailureType;
  __isset = other886.__isset;
  return *this;
}
void TDDIAbstractFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailure(";
  out << "UsedFailure=" << to_string(UsedFailure);
  out << ", " << "UsedFailureType=" << to_string(UsedFailureType);
  out << ")";
}


TDDIMinimalCutset::~TDDIMinimalCutset() throw() {
}


void TDDIMinimalCutset::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMinimalCutset::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMinimalCutset::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMinimalCutset::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIMinimalCutset::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIMinimalCutset::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIMinimalCutset::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIMinimalCutset::__set_Failures(const std::vector<TDDIAbstractFailure> & val) {
  this->Failures = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMinimalCutset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMinimalCutset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size887;
            ::apache::thrift::protocol::TType _etype890;
            xfer += iprot->readListBegin(_etype890, _size887);
            this->KeyValueMaps.resize(_size887);
            uint32_t _i891;
            for (_i891 = 0; _i891 < _size887; ++_i891)
            {
              xfer += this->KeyValueMaps[_i891].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size892;
            ::apache::thrift::protocol::TType _etype895;
            xfer += iprot->readListBegin(_etype895, _size892);
            this->Failures.resize(_size892);
            uint32_t _i896;
            for (_i896 = 0; _i896 < _size892; ++_i896)
            {
              xfer += this->Failures[_i896].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMinimalCutset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMinimalCutset");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter897;
    for (_iter897 = this->KeyValueMaps.begin(); _iter897 != this->KeyValueMaps.end(); ++_iter897)
    {
      xfer += (*_iter897).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailure> ::const_iterator _iter898;
    for (_iter898 = this->Failures.begin(); _iter898 != this->Failures.end(); ++_iter898)
    {
      xfer += (*_iter898).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMinimalCutset &a, TDDIMinimalCutset &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Failures, b.Failures);
  swap(a.__isset, b.__isset);
}

TDDIMinimalCutset::TDDIMinimalCutset(const TDDIMinimalCutset& other899) {
  Id = other899.Id;
  Name = other899.Name;
  Description = other899.Description;
  IsCitation = other899.IsCitation;
  IsAbstract = other899.IsAbstract;
  KeyValueMaps = other899.KeyValueMaps;
  CitedElement = other899.CitedElement;
  Failures = other899.Failures;
  __isset = other899.__isset;
}
TDDIMinimalCutset& TDDIMinimalCutset::operator=(const TDDIMinimalCutset& other900) {
  Id = other900.Id;
  Name = other900.Name;
  Description = other900.Description;
  IsCitation = other900.IsCitation;
  IsAbstract = other900.IsAbstract;
  KeyValueMaps = other900.KeyValueMaps;
  CitedElement = other900.CitedElement;
  Failures = other900.Failures;
  __isset = other900.__isset;
  return *this;
}
void TDDIMinimalCutset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMinimalCutset(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Failures=" << to_string(Failures);
  out << ")";
}


TDDIOutputFailure::~TDDIOutputFailure() throw() {
}


void TDDIOutputFailure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIOutputFailure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIOutputFailure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIOutputFailure::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIOutputFailure::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIOutputFailure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIOutputFailure::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIOutputFailure::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDIOutputFailure::__set_FailureMode(const TDDIFailureMode& val) {
  this->FailureMode = val;
}

void TDDIOutputFailure::__set_ProbabilityDistribution(const TDDIProbabilityDistribution& val) {
  this->ProbabilityDistribution = val;
}

void TDDIOutputFailure::__set_MinimalCutsets(const std::vector<TDDIMinimalCutset> & val) {
  this->MinimalCutsets = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIOutputFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIOutputFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size901;
            ::apache::thrift::protocol::TType _etype904;
            xfer += iprot->readListBegin(_etype904, _size901);
            this->KeyValueMaps.resize(_size901);
            uint32_t _i905;
            for (_i905 = 0; _i905 < _size901; ++_i905)
            {
              xfer += this->KeyValueMaps[_i905].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureMode.read(iprot);
          this->__isset.FailureMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ProbabilityDistribution.read(iprot);
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MinimalCutsets.clear();
            uint32_t _size906;
            ::apache::thrift::protocol::TType _etype909;
            xfer += iprot->readListBegin(_etype909, _size906);
            this->MinimalCutsets.resize(_size906);
            uint32_t _i910;
            for (_i910 = 0; _i910 < _size906; ++_i910)
            {
              xfer += this->MinimalCutsets[_i910].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MinimalCutsets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIOutputFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIOutputFailure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter911;
    for (_iter911 = this->KeyValueMaps.begin(); _iter911 != this->KeyValueMaps.end(); ++_iter911)
    {
      xfer += (*_iter911).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureMode", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->FailureMode.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->ProbabilityDistribution.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MinimalCutsets", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MinimalCutsets.size()));
    std::vector<TDDIMinimalCutset> ::const_iterator _iter912;
    for (_iter912 = this->MinimalCutsets.begin(); _iter912 != this->MinimalCutsets.end(); ++_iter912)
    {
      xfer += (*_iter912).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIOutputFailure &a, TDDIOutputFailure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureRate, b.FailureRate);
  swap(a.FailureMode, b.FailureMode);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.MinimalCutsets, b.MinimalCutsets);
  swap(a.__isset, b.__isset);
}

TDDIOutputFailure::TDDIOutputFailure(const TDDIOutputFailure& other913) {
  Id = other913.Id;
  Name = other913.Name;
  Description = other913.Description;
  IsCitation = other913.IsCitation;
  IsAbstract = other913.IsAbstract;
  KeyValueMaps = other913.KeyValueMaps;
  CitedElement = other913.CitedElement;
  FailureRate = other913.FailureRate;
  FailureMode = other913.FailureMode;
  ProbabilityDistribution = other913.ProbabilityDistribution;
  MinimalCutsets = other913.MinimalCutsets;
  __isset = other913.__isset;
}
TDDIOutputFailure& TDDIOutputFailure::operator=(const TDDIOutputFailure& other914) {
  Id = other914.Id;
  Name = other914.Name;
  Description = other914.Description;
  IsCitation = other914.IsCitation;
  IsAbstract = other914.IsAbstract;
  KeyValueMaps = other914.KeyValueMaps;
  CitedElement = other914.CitedElement;
  FailureRate = other914.FailureRate;
  FailureMode = other914.FailureMode;
  ProbabilityDistribution = other914.ProbabilityDistribution;
  MinimalCutsets = other914.MinimalCutsets;
  __isset = other914.__isset;
  return *this;
}
void TDDIOutputFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIOutputFailure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "FailureMode=" << to_string(FailureMode);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ", " << "MinimalCutsets=" << to_string(MinimalCutsets);
  out << ")";
}


TDDIInputFailure::~TDDIInputFailure() throw() {
}


void TDDIInputFailure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIInputFailure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIInputFailure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIInputFailure::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIInputFailure::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIInputFailure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIInputFailure::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIInputFailure::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDIInputFailure::__set_FailureMode(const TDDIFailureMode& val) {
  this->FailureMode = val;
}

void TDDIInputFailure::__set_ProbabilityDistribution(const TDDIProbabilityDistribution& val) {
  this->ProbabilityDistribution = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIInputFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIInputFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size915;
            ::apache::thrift::protocol::TType _etype918;
            xfer += iprot->readListBegin(_etype918, _size915);
            this->KeyValueMaps.resize(_size915);
            uint32_t _i919;
            for (_i919 = 0; _i919 < _size915; ++_i919)
            {
              xfer += this->KeyValueMaps[_i919].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureMode.read(iprot);
          this->__isset.FailureMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ProbabilityDistribution.read(iprot);
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIInputFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIInputFailure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter920;
    for (_iter920 = this->KeyValueMaps.begin(); _iter920 != this->KeyValueMaps.end(); ++_iter920)
    {
      xfer += (*_iter920).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureMode", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->FailureMode.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->ProbabilityDistribution.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIInputFailure &a, TDDIInputFailure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureRate, b.FailureRate);
  swap(a.FailureMode, b.FailureMode);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.__isset, b.__isset);
}

TDDIInputFailure::TDDIInputFailure(const TDDIInputFailure& other921) {
  Id = other921.Id;
  Name = other921.Name;
  Description = other921.Description;
  IsCitation = other921.IsCitation;
  IsAbstract = other921.IsAbstract;
  KeyValueMaps = other921.KeyValueMaps;
  CitedElement = other921.CitedElement;
  FailureRate = other921.FailureRate;
  FailureMode = other921.FailureMode;
  ProbabilityDistribution = other921.ProbabilityDistribution;
  __isset = other921.__isset;
}
TDDIInputFailure& TDDIInputFailure::operator=(const TDDIInputFailure& other922) {
  Id = other922.Id;
  Name = other922.Name;
  Description = other922.Description;
  IsCitation = other922.IsCitation;
  IsAbstract = other922.IsAbstract;
  KeyValueMaps = other922.KeyValueMaps;
  CitedElement = other922.CitedElement;
  FailureRate = other922.FailureRate;
  FailureMode = other922.FailureMode;
  ProbabilityDistribution = other922.ProbabilityDistribution;
  __isset = other922.__isset;
  return *this;
}
void TDDIInputFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIInputFailure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "FailureMode=" << to_string(FailureMode);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ")";
}


TDDIInterfaceFailureUnion::~TDDIInterfaceFailureUnion() throw() {
}


void TDDIInterfaceFailureUnion::__set_OutputFailure(const TDDIOutputFailure& val) {
  this->OutputFailure = val;
__isset.OutputFailure = true;
}

void TDDIInterfaceFailureUnion::__set_InputFailure(const TDDIInputFailure& val) {
  this->InputFailure = val;
__isset.InputFailure = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIInterfaceFailureUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIInterfaceFailureUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->OutputFailure.read(iprot);
          this->__isset.OutputFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->InputFailure.read(iprot);
          this->__isset.InputFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIInterfaceFailureUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIInterfaceFailureUnion");

  if (this->__isset.OutputFailure) {
    xfer += oprot->writeFieldBegin("OutputFailure", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->OutputFailure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.InputFailure) {
    xfer += oprot->writeFieldBegin("InputFailure", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->InputFailure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIInterfaceFailureUnion &a, TDDIInterfaceFailureUnion &b) {
  using ::std::swap;
  swap(a.OutputFailure, b.OutputFailure);
  swap(a.InputFailure, b.InputFailure);
  swap(a.__isset, b.__isset);
}

TDDIInterfaceFailureUnion::TDDIInterfaceFailureUnion(const TDDIInterfaceFailureUnion& other923) {
  OutputFailure = other923.OutputFailure;
  InputFailure = other923.InputFailure;
  __isset = other923.__isset;
}
TDDIInterfaceFailureUnion& TDDIInterfaceFailureUnion::operator=(const TDDIInterfaceFailureUnion& other924) {
  OutputFailure = other924.OutputFailure;
  InputFailure = other924.InputFailure;
  __isset = other924.__isset;
  return *this;
}
void TDDIInterfaceFailureUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIInterfaceFailureUnion(";
  out << "OutputFailure="; (__isset.OutputFailure ? (out << to_string(OutputFailure)) : (out << "<null>"));
  out << ", " << "InputFailure="; (__isset.InputFailure ? (out << to_string(InputFailure)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractInterfaceFailure::~TDDIAbstractInterfaceFailure() throw() {
}


void TDDIAbstractInterfaceFailure::__set_UsedInterfaceFailure(const TDDIInterfaceFailureUnion& val) {
  this->UsedInterfaceFailure = val;
}

void TDDIAbstractInterfaceFailure::__set_UsedInterfaceFailureType(const TDDIInterfaceFailureUnionType val) {
  this->UsedInterfaceFailureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractInterfaceFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractInterfaceFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedInterfaceFailure.read(iprot);
          this->__isset.UsedInterfaceFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast925;
          xfer += iprot->readI32(ecast925);
          this->UsedInterfaceFailureType = (TDDIInterfaceFailureUnionType)ecast925;
          this->__isset.UsedInterfaceFailureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractInterfaceFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractInterfaceFailure");

  xfer += oprot->writeFieldBegin("UsedInterfaceFailure", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedInterfaceFailure.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedInterfaceFailureType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedInterfaceFailureType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractInterfaceFailure &a, TDDIAbstractInterfaceFailure &b) {
  using ::std::swap;
  swap(a.UsedInterfaceFailure, b.UsedInterfaceFailure);
  swap(a.UsedInterfaceFailureType, b.UsedInterfaceFailureType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractInterfaceFailure::TDDIAbstractInterfaceFailure(const TDDIAbstractInterfaceFailure& other926) {
  UsedInterfaceFailure = other926.UsedInterfaceFailure;
  UsedInterfaceFailureType = other926.UsedInterfaceFailureType;
  __isset = other926.__isset;
}
TDDIAbstractInterfaceFailure& TDDIAbstractInterfaceFailure::operator=(const TDDIAbstractInterfaceFailure& other927) {
  UsedInterfaceFailure = other927.UsedInterfaceFailure;
  UsedInterfaceFailureType = other927.UsedInterfaceFailureType;
  __isset = other927.__isset;
  return *this;
}
void TDDIAbstractInterfaceFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractInterfaceFailure(";
  out << "UsedInterfaceFailure=" << to_string(UsedInterfaceFailure);
  out << ", " << "UsedInterfaceFailureType=" << to_string(UsedInterfaceFailureType);
  out << ")";
}


TDDIInterfaceFailurePropagation::~TDDIInterfaceFailurePropagation() throw() {
}


void TDDIInterfaceFailurePropagation::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIInterfaceFailurePropagation::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIInterfaceFailurePropagation::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIInterfaceFailurePropagation::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIInterfaceFailurePropagation::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIInterfaceFailurePropagation::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIInterfaceFailurePropagation::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIInterfaceFailurePropagation::__set_Cause(const TDDIAbstractInterfaceFailure& val) {
  this->Cause = val;
}

void TDDIInterfaceFailurePropagation::__set_Effect(const TDDIAbstractInterfaceFailure& val) {
  this->Effect = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIInterfaceFailurePropagation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIInterfaceFailurePropagation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size928;
            ::apache::thrift::protocol::TType _etype931;
            xfer += iprot->readListBegin(_etype931, _size928);
            this->KeyValueMaps.resize(_size928);
            uint32_t _i932;
            for (_i932 = 0; _i932 < _size928; ++_i932)
            {
              xfer += this->KeyValueMaps[_i932].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Cause.read(iprot);
          this->__isset.Cause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Effect.read(iprot);
          this->__isset.Effect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIInterfaceFailurePropagation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIInterfaceFailurePropagation");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter933;
    for (_iter933 = this->KeyValueMaps.begin(); _iter933 != this->KeyValueMaps.end(); ++_iter933)
    {
      xfer += (*_iter933).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Cause", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->Cause.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Effect", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->Effect.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIInterfaceFailurePropagation &a, TDDIInterfaceFailurePropagation &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Cause, b.Cause);
  swap(a.Effect, b.Effect);
  swap(a.__isset, b.__isset);
}

TDDIInterfaceFailurePropagation::TDDIInterfaceFailurePropagation(const TDDIInterfaceFailurePropagation& other934) {
  Id = other934.Id;
  Name = other934.Name;
  Description = other934.Description;
  IsCitation = other934.IsCitation;
  IsAbstract = other934.IsAbstract;
  KeyValueMaps = other934.KeyValueMaps;
  CitedElement = other934.CitedElement;
  Cause = other934.Cause;
  Effect = other934.Effect;
  __isset = other934.__isset;
}
TDDIInterfaceFailurePropagation& TDDIInterfaceFailurePropagation::operator=(const TDDIInterfaceFailurePropagation& other935) {
  Id = other935.Id;
  Name = other935.Name;
  Description = other935.Description;
  IsCitation = other935.IsCitation;
  IsAbstract = other935.IsAbstract;
  KeyValueMaps = other935.KeyValueMaps;
  CitedElement = other935.CitedElement;
  Cause = other935.Cause;
  Effect = other935.Effect;
  __isset = other935.__isset;
  return *this;
}
void TDDIInterfaceFailurePropagation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIInterfaceFailurePropagation(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Cause=" << to_string(Cause);
  out << ", " << "Effect=" << to_string(Effect);
  out << ")";
}


TDDIInternalFailure::~TDDIInternalFailure() throw() {
}


void TDDIInternalFailure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIInternalFailure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIInternalFailure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIInternalFailure::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIInternalFailure::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIInternalFailure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIInternalFailure::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIInternalFailure::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDIInternalFailure::__set_FailureMode(const TDDIFailureMode& val) {
  this->FailureMode = val;
}

void TDDIInternalFailure::__set_ProbabilityDistribution(const TDDIProbabilityDistribution& val) {
  this->ProbabilityDistribution = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIInternalFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIInternalFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size936;
            ::apache::thrift::protocol::TType _etype939;
            xfer += iprot->readListBegin(_etype939, _size936);
            this->KeyValueMaps.resize(_size936);
            uint32_t _i940;
            for (_i940 = 0; _i940 < _size936; ++_i940)
            {
              xfer += this->KeyValueMaps[_i940].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureMode.read(iprot);
          this->__isset.FailureMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ProbabilityDistribution.read(iprot);
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIInternalFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIInternalFailure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter941;
    for (_iter941 = this->KeyValueMaps.begin(); _iter941 != this->KeyValueMaps.end(); ++_iter941)
    {
      xfer += (*_iter941).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureMode", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->FailureMode.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->ProbabilityDistribution.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIInternalFailure &a, TDDIInternalFailure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureRate, b.FailureRate);
  swap(a.FailureMode, b.FailureMode);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.__isset, b.__isset);
}

TDDIInternalFailure::TDDIInternalFailure(const TDDIInternalFailure& other942) {
  Id = other942.Id;
  Name = other942.Name;
  Description = other942.Description;
  IsCitation = other942.IsCitation;
  IsAbstract = other942.IsAbstract;
  KeyValueMaps = other942.KeyValueMaps;
  CitedElement = other942.CitedElement;
  FailureRate = other942.FailureRate;
  FailureMode = other942.FailureMode;
  ProbabilityDistribution = other942.ProbabilityDistribution;
  __isset = other942.__isset;
}
TDDIInternalFailure& TDDIInternalFailure::operator=(const TDDIInternalFailure& other943) {
  Id = other943.Id;
  Name = other943.Name;
  Description = other943.Description;
  IsCitation = other943.IsCitation;
  IsAbstract = other943.IsAbstract;
  KeyValueMaps = other943.KeyValueMaps;
  CitedElement = other943.CitedElement;
  FailureRate = other943.FailureRate;
  FailureMode = other943.FailureMode;
  ProbabilityDistribution = other943.ProbabilityDistribution;
  __isset = other943.__isset;
  return *this;
}
void TDDIInternalFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIInternalFailure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "FailureMode=" << to_string(FailureMode);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ")";
}


TDDICCF::~TDDICCF() throw() {
}


void TDDICCF::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDICCF::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDICCF::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDICCF::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDICCF::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDICCF::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDICCF::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDICCF::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDICCF::__set_FailureMode(const TDDIFailureMode& val) {
  this->FailureMode = val;
}

void TDDICCF::__set_ProbabilityDistribution(const TDDIProbabilityDistribution& val) {
  this->ProbabilityDistribution = val;
}

void TDDICCF::__set_Failures(const std::vector<TDDIAbstractFailure> & val) {
  this->Failures = val;
}
std::ostream& operator<<(std::ostream& out, const TDDICCF& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDICCF::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size944;
            ::apache::thrift::protocol::TType _etype947;
            xfer += iprot->readListBegin(_etype947, _size944);
            this->KeyValueMaps.resize(_size944);
            uint32_t _i948;
            for (_i948 = 0; _i948 < _size944; ++_i948)
            {
              xfer += this->KeyValueMaps[_i948].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureMode.read(iprot);
          this->__isset.FailureMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ProbabilityDistribution.read(iprot);
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size949;
            ::apache::thrift::protocol::TType _etype952;
            xfer += iprot->readListBegin(_etype952, _size949);
            this->Failures.resize(_size949);
            uint32_t _i953;
            for (_i953 = 0; _i953 < _size949; ++_i953)
            {
              xfer += this->Failures[_i953].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDICCF::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDICCF");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter954;
    for (_iter954 = this->KeyValueMaps.begin(); _iter954 != this->KeyValueMaps.end(); ++_iter954)
    {
      xfer += (*_iter954).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureMode", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->FailureMode.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->ProbabilityDistribution.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailure> ::const_iterator _iter955;
    for (_iter955 = this->Failures.begin(); _iter955 != this->Failures.end(); ++_iter955)
    {
      xfer += (*_iter955).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDICCF &a, TDDICCF &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureRate, b.FailureRate);
  swap(a.FailureMode, b.FailureMode);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.Failures, b.Failures);
  swap(a.__isset, b.__isset);
}

TDDICCF::TDDICCF(const TDDICCF& other956) {
  Id = other956.Id;
  Name = other956.Name;
  Description = other956.Description;
  IsCitation = other956.IsCitation;
  IsAbstract = other956.IsAbstract;
  KeyValueMaps = other956.KeyValueMaps;
  CitedElement = other956.CitedElement;
  FailureRate = other956.FailureRate;
  FailureMode = other956.FailureMode;
  ProbabilityDistribution = other956.ProbabilityDistribution;
  Failures = other956.Failures;
  __isset = other956.__isset;
}
TDDICCF& TDDICCF::operator=(const TDDICCF& other957) {
  Id = other957.Id;
  Name = other957.Name;
  Description = other957.Description;
  IsCitation = other957.IsCitation;
  IsAbstract = other957.IsAbstract;
  KeyValueMaps = other957.KeyValueMaps;
  CitedElement = other957.CitedElement;
  FailureRate = other957.FailureRate;
  FailureMode = other957.FailureMode;
  ProbabilityDistribution = other957.ProbabilityDistribution;
  Failures = other957.Failures;
  __isset = other957.__isset;
  return *this;
}
void TDDICCF::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDICCF(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "FailureMode=" << to_string(FailureMode);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ", " << "Failures=" << to_string(Failures);
  out << ")";
}


TDDIInternalFailureUnion::~TDDIInternalFailureUnion() throw() {
}


void TDDIInternalFailureUnion::__set_InternalFailure(const TDDIInternalFailure& val) {
  this->InternalFailure = val;
__isset.InternalFailure = true;
}

void TDDIInternalFailureUnion::__set_BasicEvent(::apache::thrift::stdcxx::shared_ptr<TDDIBasicEvent> val) {
  this->BasicEvent = val;
__isset.BasicEvent = true;
}

void TDDIInternalFailureUnion::__set_FMEAFailure(::apache::thrift::stdcxx::shared_ptr<TDDIFMEAFailure> val) {
  this->FMEAFailure = val;
__isset.FMEAFailure = true;
}

void TDDIInternalFailureUnion::__set_FailState(::apache::thrift::stdcxx::shared_ptr<TDDIFailState> val) {
  this->FailState = val;
__isset.FailState = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIInternalFailureUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIInternalFailureUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->InternalFailure.read(iprot);
          this->__isset.InternalFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->BasicEvent) { 
            this->BasicEvent = ::apache::thrift::stdcxx::shared_ptr<TDDIBasicEvent>(new TDDIBasicEvent);
          }
          xfer += this->BasicEvent->read(iprot);
          bool wasSet = false;
          if (this->BasicEvent->__isset.Id) { wasSet = true; }
          if (this->BasicEvent->__isset.Name) { wasSet = true; }
          if (this->BasicEvent->__isset.Description) { wasSet = true; }
          if (this->BasicEvent->__isset.IsCitation) { wasSet = true; }
          if (this->BasicEvent->__isset.IsAbstract) { wasSet = true; }
          if (this->BasicEvent->__isset.KeyValueMaps) { wasSet = true; }
          if (this->BasicEvent->__isset.CitedElement) { wasSet = true; }
          if (this->BasicEvent->__isset.FailureRate) { wasSet = true; }
          if (this->BasicEvent->__isset.FailureMode) { wasSet = true; }
          if (this->BasicEvent->__isset.ProbabilityDistribution) { wasSet = true; }
          if (!wasSet) { this->BasicEvent.reset(); }
          this->__isset.BasicEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FMEAFailure) { 
            this->FMEAFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIFMEAFailure>(new TDDIFMEAFailure);
          }
          xfer += this->FMEAFailure->read(iprot);
          bool wasSet = false;
          if (this->FMEAFailure->__isset.Id) { wasSet = true; }
          if (this->FMEAFailure->__isset.Name) { wasSet = true; }
          if (this->FMEAFailure->__isset.Description) { wasSet = true; }
          if (this->FMEAFailure->__isset.IsCitation) { wasSet = true; }
          if (this->FMEAFailure->__isset.IsAbstract) { wasSet = true; }
          if (this->FMEAFailure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FMEAFailure->__isset.CitedElement) { wasSet = true; }
          if (this->FMEAFailure->__isset.FailureRate) { wasSet = true; }
          if (this->FMEAFailure->__isset.FailureMode) { wasSet = true; }
          if (this->FMEAFailure->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->FMEAFailure->__isset.OutputFailure) { wasSet = true; }
          if (this->FMEAFailure->__isset.InputFailure) { wasSet = true; }
          if (!wasSet) { this->FMEAFailure.reset(); }
          this->__isset.FMEAFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailState) { 
            this->FailState = ::apache::thrift::stdcxx::shared_ptr<TDDIFailState>(new TDDIFailState);
          }
          xfer += this->FailState->read(iprot);
          bool wasSet = false;
          if (this->FailState->__isset.Id) { wasSet = true; }
          if (this->FailState->__isset.Name) { wasSet = true; }
          if (this->FailState->__isset.Description) { wasSet = true; }
          if (this->FailState->__isset.IsCitation) { wasSet = true; }
          if (this->FailState->__isset.IsAbstract) { wasSet = true; }
          if (this->FailState->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FailState->__isset.CitedElement) { wasSet = true; }
          if (this->FailState->__isset.FailureRate) { wasSet = true; }
          if (this->FailState->__isset.FailureMode) { wasSet = true; }
          if (this->FailState->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->FailState->__isset.OutputFailure) { wasSet = true; }
          if (this->FailState->__isset.AssociatedStates) { wasSet = true; }
          if (!wasSet) { this->FailState.reset(); }
          this->__isset.FailState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIInternalFailureUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIInternalFailureUnion");

  if (this->__isset.InternalFailure) {
    xfer += oprot->writeFieldBegin("InternalFailure", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->InternalFailure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.BasicEvent) {
    xfer += oprot->writeFieldBegin("BasicEvent", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->BasicEvent) {
      xfer += this->BasicEvent->write(oprot); 
    } else {oprot->writeStructBegin("TDDIBasicEvent"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEAFailure) {
    xfer += oprot->writeFieldBegin("FMEAFailure", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->FMEAFailure) {
      xfer += this->FMEAFailure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFMEAFailure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FailState) {
    xfer += oprot->writeFieldBegin("FailState", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->FailState) {
      xfer += this->FailState->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFailState"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIInternalFailureUnion &a, TDDIInternalFailureUnion &b) {
  using ::std::swap;
  swap(a.InternalFailure, b.InternalFailure);
  swap(a.BasicEvent, b.BasicEvent);
  swap(a.FMEAFailure, b.FMEAFailure);
  swap(a.FailState, b.FailState);
  swap(a.__isset, b.__isset);
}

TDDIInternalFailureUnion::TDDIInternalFailureUnion(const TDDIInternalFailureUnion& other958) {
  InternalFailure = other958.InternalFailure;
  BasicEvent = other958.BasicEvent;
  FMEAFailure = other958.FMEAFailure;
  FailState = other958.FailState;
  __isset = other958.__isset;
}
TDDIInternalFailureUnion& TDDIInternalFailureUnion::operator=(const TDDIInternalFailureUnion& other959) {
  InternalFailure = other959.InternalFailure;
  BasicEvent = other959.BasicEvent;
  FMEAFailure = other959.FMEAFailure;
  FailState = other959.FailState;
  __isset = other959.__isset;
  return *this;
}
void TDDIInternalFailureUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIInternalFailureUnion(";
  out << "InternalFailure="; (__isset.InternalFailure ? (out << to_string(InternalFailure)) : (out << "<null>"));
  out << ", " << "BasicEvent="; (__isset.BasicEvent ? (out << to_string(BasicEvent)) : (out << "<null>"));
  out << ", " << "FMEAFailure="; (__isset.FMEAFailure ? (out << to_string(FMEAFailure)) : (out << "<null>"));
  out << ", " << "FailState="; (__isset.FailState ? (out << to_string(FailState)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractInternalFailure::~TDDIAbstractInternalFailure() throw() {
}


void TDDIAbstractInternalFailure::__set_UsedInternalFailure(const TDDIInternalFailureUnion& val) {
  this->UsedInternalFailure = val;
}

void TDDIAbstractInternalFailure::__set_UsedInternalFailureType(const TDDIInternalFailureUnionType val) {
  this->UsedInternalFailureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractInternalFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractInternalFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedInternalFailure.read(iprot);
          this->__isset.UsedInternalFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast960;
          xfer += iprot->readI32(ecast960);
          this->UsedInternalFailureType = (TDDIInternalFailureUnionType)ecast960;
          this->__isset.UsedInternalFailureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractInternalFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractInternalFailure");

  xfer += oprot->writeFieldBegin("UsedInternalFailure", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedInternalFailure.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedInternalFailureType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedInternalFailureType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractInternalFailure &a, TDDIAbstractInternalFailure &b) {
  using ::std::swap;
  swap(a.UsedInternalFailure, b.UsedInternalFailure);
  swap(a.UsedInternalFailureType, b.UsedInternalFailureType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractInternalFailure::TDDIAbstractInternalFailure(const TDDIAbstractInternalFailure& other961) {
  UsedInternalFailure = other961.UsedInternalFailure;
  UsedInternalFailureType = other961.UsedInternalFailureType;
  __isset = other961.__isset;
}
TDDIAbstractInternalFailure& TDDIAbstractInternalFailure::operator=(const TDDIAbstractInternalFailure& other962) {
  UsedInternalFailure = other962.UsedInternalFailure;
  UsedInternalFailureType = other962.UsedInternalFailureType;
  __isset = other962.__isset;
  return *this;
}
void TDDIAbstractInternalFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractInternalFailure(";
  out << "UsedInternalFailure=" << to_string(UsedInternalFailure);
  out << ", " << "UsedInternalFailureType=" << to_string(UsedInternalFailureType);
  out << ")";
}


TDDIFailureAnalysisArtifactUnion::~TDDIFailureAnalysisArtifactUnion() throw() {
}


void TDDIFailureAnalysisArtifactUnion::__set_FailureLogicPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> val) {
  this->FailureLogicPackage = val;
__isset.FailureLogicPackage = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_MinimalCutset(const TDDIMinimalCutset& val) {
  this->MinimalCutset = val;
__isset.MinimalCutset = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_InterfaceFailurePropagation(const TDDIInterfaceFailurePropagation& val) {
  this->InterfaceFailurePropagation = val;
__isset.InterfaceFailurePropagation = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_Failure(const TDDIAbstractFailure& val) {
  this->Failure = val;
__isset.Failure = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_FailureMode(const TDDIFailureMode& val) {
  this->FailureMode = val;
__isset.FailureMode = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_ProbabilityDistribution(const TDDIProbabilityDistribution& val) {
  this->ProbabilityDistribution = val;
__isset.ProbabilityDistribution = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_ProbDistParam(const TDDIProbDistParam& val) {
  this->ProbDistParam = val;
__isset.ProbDistParam = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_FTAArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAArtifact> val) {
  this->FTAArtifact = val;
__isset.FTAArtifact = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_FMEAArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAArtifact> val) {
  this->FMEAArtifact = val;
__isset.FMEAArtifact = true;
}

void TDDIFailureAnalysisArtifactUnion::__set_MarkovArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovArtifact> val) {
  this->MarkovArtifact = val;
__isset.MarkovArtifact = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureAnalysisArtifactUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureAnalysisArtifactUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureLogicPackage) { 
            this->FailureLogicPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage>(new TDDIAbstractFailureLogicPackage);
          }
          xfer += this->FailureLogicPackage->read(iprot);
          bool wasSet = false;
          if (this->FailureLogicPackage->__isset.UsedFailureLogicPackage) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.UsedFailureLogicPackageType) { wasSet = true; }
          if (!wasSet) { this->FailureLogicPackage.reset(); }
          this->__isset.FailureLogicPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MinimalCutset.read(iprot);
          this->__isset.MinimalCutset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->InterfaceFailurePropagation.read(iprot);
          this->__isset.InterfaceFailurePropagation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Failure.read(iprot);
          this->__isset.Failure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureMode.read(iprot);
          this->__isset.FailureMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ProbabilityDistribution.read(iprot);
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ProbDistParam.read(iprot);
          this->__isset.ProbDistParam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FTAArtifact) { 
            this->FTAArtifact = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAArtifact>(new TDDIAbstractFTAArtifact);
          }
          xfer += this->FTAArtifact->read(iprot);
          bool wasSet = false;
          if (this->FTAArtifact->__isset.UsedFTAArtifact) { wasSet = true; }
          if (this->FTAArtifact->__isset.UsedFTAArtifactType) { wasSet = true; }
          if (!wasSet) { this->FTAArtifact.reset(); }
          this->__isset.FTAArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FMEAArtifact) { 
            this->FMEAArtifact = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAArtifact>(new TDDIAbstractFMEAArtifact);
          }
          xfer += this->FMEAArtifact->read(iprot);
          bool wasSet = false;
          if (this->FMEAArtifact->__isset.UsedFMEAArtifact) { wasSet = true; }
          if (this->FMEAArtifact->__isset.UsedFMEAArtifactType) { wasSet = true; }
          if (!wasSet) { this->FMEAArtifact.reset(); }
          this->__isset.FMEAArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MarkovArtifact) { 
            this->MarkovArtifact = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovArtifact>(new TDDIAbstractMarkovArtifact);
          }
          xfer += this->MarkovArtifact->read(iprot);
          bool wasSet = false;
          if (this->MarkovArtifact->__isset.UsedMarkovArtifact) { wasSet = true; }
          if (this->MarkovArtifact->__isset.UsedMarkovArtifactType) { wasSet = true; }
          if (!wasSet) { this->MarkovArtifact.reset(); }
          this->__isset.MarkovArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureAnalysisArtifactUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureAnalysisArtifactUnion");

  if (this->__isset.FailureLogicPackage) {
    xfer += oprot->writeFieldBegin("FailureLogicPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->FailureLogicPackage) {
      xfer += this->FailureLogicPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFailureLogicPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MinimalCutset) {
    xfer += oprot->writeFieldBegin("MinimalCutset", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->MinimalCutset.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.InterfaceFailurePropagation) {
    xfer += oprot->writeFieldBegin("InterfaceFailurePropagation", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->InterfaceFailurePropagation.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Failure) {
    xfer += oprot->writeFieldBegin("Failure", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->Failure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FailureMode) {
    xfer += oprot->writeFieldBegin("FailureMode", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->FailureMode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ProbabilityDistribution) {
    xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->ProbabilityDistribution.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ProbDistParam) {
    xfer += oprot->writeFieldBegin("ProbDistParam", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->ProbDistParam.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FTAArtifact) {
    xfer += oprot->writeFieldBegin("FTAArtifact", ::apache::thrift::protocol::T_STRUCT, 8);
    if (this->FTAArtifact) {
      xfer += this->FTAArtifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFTAArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEAArtifact) {
    xfer += oprot->writeFieldBegin("FMEAArtifact", ::apache::thrift::protocol::T_STRUCT, 9);
    if (this->FMEAArtifact) {
      xfer += this->FMEAArtifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFMEAArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MarkovArtifact) {
    xfer += oprot->writeFieldBegin("MarkovArtifact", ::apache::thrift::protocol::T_STRUCT, 10);
    if (this->MarkovArtifact) {
      xfer += this->MarkovArtifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractMarkovArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureAnalysisArtifactUnion &a, TDDIFailureAnalysisArtifactUnion &b) {
  using ::std::swap;
  swap(a.FailureLogicPackage, b.FailureLogicPackage);
  swap(a.MinimalCutset, b.MinimalCutset);
  swap(a.InterfaceFailurePropagation, b.InterfaceFailurePropagation);
  swap(a.Failure, b.Failure);
  swap(a.FailureMode, b.FailureMode);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.ProbDistParam, b.ProbDistParam);
  swap(a.FTAArtifact, b.FTAArtifact);
  swap(a.FMEAArtifact, b.FMEAArtifact);
  swap(a.MarkovArtifact, b.MarkovArtifact);
  swap(a.__isset, b.__isset);
}

TDDIFailureAnalysisArtifactUnion::TDDIFailureAnalysisArtifactUnion(const TDDIFailureAnalysisArtifactUnion& other963) {
  FailureLogicPackage = other963.FailureLogicPackage;
  MinimalCutset = other963.MinimalCutset;
  InterfaceFailurePropagation = other963.InterfaceFailurePropagation;
  Failure = other963.Failure;
  FailureMode = other963.FailureMode;
  ProbabilityDistribution = other963.ProbabilityDistribution;
  ProbDistParam = other963.ProbDistParam;
  FTAArtifact = other963.FTAArtifact;
  FMEAArtifact = other963.FMEAArtifact;
  MarkovArtifact = other963.MarkovArtifact;
  __isset = other963.__isset;
}
TDDIFailureAnalysisArtifactUnion& TDDIFailureAnalysisArtifactUnion::operator=(const TDDIFailureAnalysisArtifactUnion& other964) {
  FailureLogicPackage = other964.FailureLogicPackage;
  MinimalCutset = other964.MinimalCutset;
  InterfaceFailurePropagation = other964.InterfaceFailurePropagation;
  Failure = other964.Failure;
  FailureMode = other964.FailureMode;
  ProbabilityDistribution = other964.ProbabilityDistribution;
  ProbDistParam = other964.ProbDistParam;
  FTAArtifact = other964.FTAArtifact;
  FMEAArtifact = other964.FMEAArtifact;
  MarkovArtifact = other964.MarkovArtifact;
  __isset = other964.__isset;
  return *this;
}
void TDDIFailureAnalysisArtifactUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureAnalysisArtifactUnion(";
  out << "FailureLogicPackage="; (__isset.FailureLogicPackage ? (out << to_string(FailureLogicPackage)) : (out << "<null>"));
  out << ", " << "MinimalCutset="; (__isset.MinimalCutset ? (out << to_string(MinimalCutset)) : (out << "<null>"));
  out << ", " << "InterfaceFailurePropagation="; (__isset.InterfaceFailurePropagation ? (out << to_string(InterfaceFailurePropagation)) : (out << "<null>"));
  out << ", " << "Failure="; (__isset.Failure ? (out << to_string(Failure)) : (out << "<null>"));
  out << ", " << "FailureMode="; (__isset.FailureMode ? (out << to_string(FailureMode)) : (out << "<null>"));
  out << ", " << "ProbabilityDistribution="; (__isset.ProbabilityDistribution ? (out << to_string(ProbabilityDistribution)) : (out << "<null>"));
  out << ", " << "ProbDistParam="; (__isset.ProbDistParam ? (out << to_string(ProbDistParam)) : (out << "<null>"));
  out << ", " << "FTAArtifact="; (__isset.FTAArtifact ? (out << to_string(FTAArtifact)) : (out << "<null>"));
  out << ", " << "FMEAArtifact="; (__isset.FMEAArtifact ? (out << to_string(FMEAArtifact)) : (out << "<null>"));
  out << ", " << "MarkovArtifact="; (__isset.MarkovArtifact ? (out << to_string(MarkovArtifact)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFailureAnalysisArtifact::~TDDIAbstractFailureAnalysisArtifact() throw() {
}


void TDDIAbstractFailureAnalysisArtifact::__set_UsedFailureAnalysisArtifact(const TDDIFailureAnalysisArtifactUnion& val) {
  this->UsedFailureAnalysisArtifact = val;
}

void TDDIAbstractFailureAnalysisArtifact::__set_UsedFailureAnalysisArtifactType(const TDDIFailureAnalysisArtifactUnionType val) {
  this->UsedFailureAnalysisArtifactType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureAnalysisArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailureAnalysisArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFailureAnalysisArtifact.read(iprot);
          this->__isset.UsedFailureAnalysisArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast965;
          xfer += iprot->readI32(ecast965);
          this->UsedFailureAnalysisArtifactType = (TDDIFailureAnalysisArtifactUnionType)ecast965;
          this->__isset.UsedFailureAnalysisArtifactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailureAnalysisArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailureAnalysisArtifact");

  xfer += oprot->writeFieldBegin("UsedFailureAnalysisArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFailureAnalysisArtifact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFailureAnalysisArtifactType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFailureAnalysisArtifactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailureAnalysisArtifact &a, TDDIAbstractFailureAnalysisArtifact &b) {
  using ::std::swap;
  swap(a.UsedFailureAnalysisArtifact, b.UsedFailureAnalysisArtifact);
  swap(a.UsedFailureAnalysisArtifactType, b.UsedFailureAnalysisArtifactType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailureAnalysisArtifact::TDDIAbstractFailureAnalysisArtifact(const TDDIAbstractFailureAnalysisArtifact& other966) {
  UsedFailureAnalysisArtifact = other966.UsedFailureAnalysisArtifact;
  UsedFailureAnalysisArtifactType = other966.UsedFailureAnalysisArtifactType;
  __isset = other966.__isset;
}
TDDIAbstractFailureAnalysisArtifact& TDDIAbstractFailureAnalysisArtifact::operator=(const TDDIAbstractFailureAnalysisArtifact& other967) {
  UsedFailureAnalysisArtifact = other967.UsedFailureAnalysisArtifact;
  UsedFailureAnalysisArtifactType = other967.UsedFailureAnalysisArtifactType;
  __isset = other967.__isset;
  return *this;
}
void TDDIAbstractFailureAnalysisArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailureAnalysisArtifact(";
  out << "UsedFailureAnalysisArtifact=" << to_string(UsedFailureAnalysisArtifact);
  out << ", " << "UsedFailureAnalysisArtifactType=" << to_string(UsedFailureAnalysisArtifactType);
  out << ")";
}


TDDIFailureLogicPackage::~TDDIFailureLogicPackage() throw() {
}


void TDDIFailureLogicPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFailureLogicPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFailureLogicPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFailureLogicPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFailureLogicPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFailureLogicPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFailureLogicPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFailureLogicPackage::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifact> & val) {
  this->FailureAnalysisArtifacts = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureLogicPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size968;
            ::apache::thrift::protocol::TType _etype971;
            xfer += iprot->readListBegin(_etype971, _size968);
            this->KeyValueMaps.resize(_size968);
            uint32_t _i972;
            for (_i972 = 0; _i972 < _size968; ++_i972)
            {
              xfer += this->KeyValueMaps[_i972].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size973;
            ::apache::thrift::protocol::TType _etype976;
            xfer += iprot->readListBegin(_etype976, _size973);
            this->FailureAnalysisArtifacts.resize(_size973);
            uint32_t _i977;
            for (_i977 = 0; _i977 < _size973; ++_i977)
            {
              xfer += this->FailureAnalysisArtifacts[_i977].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureLogicPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureLogicPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter978;
    for (_iter978 = this->KeyValueMaps.begin(); _iter978 != this->KeyValueMaps.end(); ++_iter978)
    {
      xfer += (*_iter978).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifact> ::const_iterator _iter979;
    for (_iter979 = this->FailureAnalysisArtifacts.begin(); _iter979 != this->FailureAnalysisArtifacts.end(); ++_iter979)
    {
      xfer += (*_iter979).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureLogicPackage &a, TDDIFailureLogicPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.__isset, b.__isset);
}

TDDIFailureLogicPackage::TDDIFailureLogicPackage(const TDDIFailureLogicPackage& other980) {
  Id = other980.Id;
  Name = other980.Name;
  Description = other980.Description;
  IsCitation = other980.IsCitation;
  IsAbstract = other980.IsAbstract;
  KeyValueMaps = other980.KeyValueMaps;
  CitedElement = other980.CitedElement;
  FailureAnalysisArtifacts = other980.FailureAnalysisArtifacts;
  __isset = other980.__isset;
}
TDDIFailureLogicPackage& TDDIFailureLogicPackage::operator=(const TDDIFailureLogicPackage& other981) {
  Id = other981.Id;
  Name = other981.Name;
  Description = other981.Description;
  IsCitation = other981.IsCitation;
  IsAbstract = other981.IsAbstract;
  KeyValueMaps = other981.KeyValueMaps;
  CitedElement = other981.CitedElement;
  FailureAnalysisArtifacts = other981.FailureAnalysisArtifacts;
  __isset = other981.__isset;
  return *this;
}
void TDDIFailureLogicPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureLogicPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ")";
}


TDDIFailureLogicPackageInterface::~TDDIFailureLogicPackageInterface() throw() {
}


void TDDIFailureLogicPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFailureLogicPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFailureLogicPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFailureLogicPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFailureLogicPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFailureLogicPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFailureLogicPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFailureLogicPackageInterface::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifact> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFailureLogicPackageInterface::__set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureLogicPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size982;
            ::apache::thrift::protocol::TType _etype985;
            xfer += iprot->readListBegin(_etype985, _size982);
            this->KeyValueMaps.resize(_size982);
            uint32_t _i986;
            for (_i986 = 0; _i986 < _size982; ++_i986)
            {
              xfer += this->KeyValueMaps[_i986].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size987;
            ::apache::thrift::protocol::TType _etype990;
            xfer += iprot->readListBegin(_etype990, _size987);
            this->FailureAnalysisArtifacts.resize(_size987);
            uint32_t _i991;
            for (_i991 = 0; _i991 < _size987; ++_i991)
            {
              xfer += this->FailureAnalysisArtifacts[_i991].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Implements) { 
            this->Implements = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage>(new TDDIAbstractFailureLogicPackage);
          }
          xfer += this->Implements->read(iprot);
          bool wasSet = false;
          if (this->Implements->__isset.UsedFailureLogicPackage) { wasSet = true; }
          if (this->Implements->__isset.UsedFailureLogicPackageType) { wasSet = true; }
          if (!wasSet) { this->Implements.reset(); }
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureLogicPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureLogicPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter992;
    for (_iter992 = this->KeyValueMaps.begin(); _iter992 != this->KeyValueMaps.end(); ++_iter992)
    {
      xfer += (*_iter992).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifact> ::const_iterator _iter993;
    for (_iter993 = this->FailureAnalysisArtifacts.begin(); _iter993 != this->FailureAnalysisArtifacts.end(); ++_iter993)
    {
      xfer += (*_iter993).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->Implements) {
    xfer += this->Implements->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailureLogicPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureLogicPackageInterface &a, TDDIFailureLogicPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIFailureLogicPackageInterface::TDDIFailureLogicPackageInterface(const TDDIFailureLogicPackageInterface& other994) {
  Id = other994.Id;
  Name = other994.Name;
  Description = other994.Description;
  IsCitation = other994.IsCitation;
  IsAbstract = other994.IsAbstract;
  KeyValueMaps = other994.KeyValueMaps;
  CitedElement = other994.CitedElement;
  FailureAnalysisArtifacts = other994.FailureAnalysisArtifacts;
  Implements = other994.Implements;
  __isset = other994.__isset;
}
TDDIFailureLogicPackageInterface& TDDIFailureLogicPackageInterface::operator=(const TDDIFailureLogicPackageInterface& other995) {
  Id = other995.Id;
  Name = other995.Name;
  Description = other995.Description;
  IsCitation = other995.IsCitation;
  IsAbstract = other995.IsAbstract;
  KeyValueMaps = other995.KeyValueMaps;
  CitedElement = other995.CitedElement;
  FailureAnalysisArtifacts = other995.FailureAnalysisArtifacts;
  Implements = other995.Implements;
  __isset = other995.__isset;
  return *this;
}
void TDDIFailureLogicPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureLogicPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIFailureLogicPackageBinding::~TDDIFailureLogicPackageBinding() throw() {
}


void TDDIFailureLogicPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFailureLogicPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFailureLogicPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFailureLogicPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFailureLogicPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFailureLogicPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFailureLogicPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFailureLogicPackageBinding::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifact> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFailureLogicPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureLogicPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size996;
            ::apache::thrift::protocol::TType _etype999;
            xfer += iprot->readListBegin(_etype999, _size996);
            this->KeyValueMaps.resize(_size996);
            uint32_t _i1000;
            for (_i1000 = 0; _i1000 < _size996; ++_i1000)
            {
              xfer += this->KeyValueMaps[_i1000].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1001;
            ::apache::thrift::protocol::TType _etype1004;
            xfer += iprot->readListBegin(_etype1004, _size1001);
            this->FailureAnalysisArtifacts.resize(_size1001);
            uint32_t _i1005;
            for (_i1005 = 0; _i1005 < _size1001; ++_i1005)
            {
              xfer += this->FailureAnalysisArtifacts[_i1005].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size1006;
            ::apache::thrift::protocol::TType _etype1009;
            xfer += iprot->readListBegin(_etype1009, _size1006);
            this->ParticipantPackages.resize(_size1006);
            uint32_t _i1010;
            for (_i1010 = 0; _i1010 < _size1006; ++_i1010)
            {
              xfer += this->ParticipantPackages[_i1010].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureLogicPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureLogicPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1011;
    for (_iter1011 = this->KeyValueMaps.begin(); _iter1011 != this->KeyValueMaps.end(); ++_iter1011)
    {
      xfer += (*_iter1011).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifact> ::const_iterator _iter1012;
    for (_iter1012 = this->FailureAnalysisArtifacts.begin(); _iter1012 != this->FailureAnalysisArtifacts.end(); ++_iter1012)
    {
      xfer += (*_iter1012).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter1013;
    for (_iter1013 = this->ParticipantPackages.begin(); _iter1013 != this->ParticipantPackages.end(); ++_iter1013)
    {
      xfer += (*_iter1013).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureLogicPackageBinding &a, TDDIFailureLogicPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIFailureLogicPackageBinding::TDDIFailureLogicPackageBinding(const TDDIFailureLogicPackageBinding& other1014) {
  Id = other1014.Id;
  Name = other1014.Name;
  Description = other1014.Description;
  IsCitation = other1014.IsCitation;
  IsAbstract = other1014.IsAbstract;
  KeyValueMaps = other1014.KeyValueMaps;
  CitedElement = other1014.CitedElement;
  FailureAnalysisArtifacts = other1014.FailureAnalysisArtifacts;
  ParticipantPackages = other1014.ParticipantPackages;
  __isset = other1014.__isset;
}
TDDIFailureLogicPackageBinding& TDDIFailureLogicPackageBinding::operator=(const TDDIFailureLogicPackageBinding& other1015) {
  Id = other1015.Id;
  Name = other1015.Name;
  Description = other1015.Description;
  IsCitation = other1015.IsCitation;
  IsAbstract = other1015.IsAbstract;
  KeyValueMaps = other1015.KeyValueMaps;
  CitedElement = other1015.CitedElement;
  FailureAnalysisArtifacts = other1015.FailureAnalysisArtifacts;
  ParticipantPackages = other1015.ParticipantPackages;
  __isset = other1015.__isset;
  return *this;
}
void TDDIFailureLogicPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureLogicPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIFailureLogicPackageUnion::~TDDIFailureLogicPackageUnion() throw() {
}


void TDDIFailureLogicPackageUnion::__set_FailureLogicPackage(const TDDIFailureLogicPackage& val) {
  this->FailureLogicPackage = val;
__isset.FailureLogicPackage = true;
}

void TDDIFailureLogicPackageUnion::__set_FailureLogicPackageInterface(const TDDIFailureLogicPackageInterface& val) {
  this->FailureLogicPackageInterface = val;
__isset.FailureLogicPackageInterface = true;
}

void TDDIFailureLogicPackageUnion::__set_FailureLogicPackageBinding(const TDDIFailureLogicPackageBinding& val) {
  this->FailureLogicPackageBinding = val;
__isset.FailureLogicPackageBinding = true;
}

void TDDIFailureLogicPackageUnion::__set_FTAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> val) {
  this->FTAPackage = val;
__isset.FTAPackage = true;
}

void TDDIFailureLogicPackageUnion::__set_FMEAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> val) {
  this->FMEAPackage = val;
__isset.FMEAPackage = true;
}

void TDDIFailureLogicPackageUnion::__set_MarkovChainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovChainPackage> val) {
  this->MarkovChainPackage = val;
__isset.MarkovChainPackage = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureLogicPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureLogicPackage.read(iprot);
          this->__isset.FailureLogicPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureLogicPackageInterface.read(iprot);
          this->__isset.FailureLogicPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureLogicPackageBinding.read(iprot);
          this->__isset.FailureLogicPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FTAPackage) { 
            this->FTAPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage>(new TDDIAbstractFTAPackage);
          }
          xfer += this->FTAPackage->read(iprot);
          bool wasSet = false;
          if (this->FTAPackage->__isset.UsedFTAPackage) { wasSet = true; }
          if (this->FTAPackage->__isset.UsedFTAPackageType) { wasSet = true; }
          if (!wasSet) { this->FTAPackage.reset(); }
          this->__isset.FTAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FMEAPackage) { 
            this->FMEAPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage>(new TDDIAbstractFMEAPackage);
          }
          xfer += this->FMEAPackage->read(iprot);
          bool wasSet = false;
          if (this->FMEAPackage->__isset.UsedFMEAPackage) { wasSet = true; }
          if (this->FMEAPackage->__isset.UsedFMEAPackageType) { wasSet = true; }
          if (!wasSet) { this->FMEAPackage.reset(); }
          this->__isset.FMEAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MarkovChainPackage) { 
            this->MarkovChainPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovChainPackage>(new TDDIAbstractMarkovChainPackage);
          }
          xfer += this->MarkovChainPackage->read(iprot);
          bool wasSet = false;
          if (this->MarkovChainPackage->__isset.UsedMarkovChainPackage) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.UsedMarkovChainPackageType) { wasSet = true; }
          if (!wasSet) { this->MarkovChainPackage.reset(); }
          this->__isset.MarkovChainPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureLogicPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureLogicPackageUnion");

  if (this->__isset.FailureLogicPackage) {
    xfer += oprot->writeFieldBegin("FailureLogicPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->FailureLogicPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FailureLogicPackageInterface) {
    xfer += oprot->writeFieldBegin("FailureLogicPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->FailureLogicPackageInterface.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FailureLogicPackageBinding) {
    xfer += oprot->writeFieldBegin("FailureLogicPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->FailureLogicPackageBinding.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FTAPackage) {
    xfer += oprot->writeFieldBegin("FTAPackage", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->FTAPackage) {
      xfer += this->FTAPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFTAPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEAPackage) {
    xfer += oprot->writeFieldBegin("FMEAPackage", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->FMEAPackage) {
      xfer += this->FMEAPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFMEAPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MarkovChainPackage) {
    xfer += oprot->writeFieldBegin("MarkovChainPackage", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->MarkovChainPackage) {
      xfer += this->MarkovChainPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractMarkovChainPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureLogicPackageUnion &a, TDDIFailureLogicPackageUnion &b) {
  using ::std::swap;
  swap(a.FailureLogicPackage, b.FailureLogicPackage);
  swap(a.FailureLogicPackageInterface, b.FailureLogicPackageInterface);
  swap(a.FailureLogicPackageBinding, b.FailureLogicPackageBinding);
  swap(a.FTAPackage, b.FTAPackage);
  swap(a.FMEAPackage, b.FMEAPackage);
  swap(a.MarkovChainPackage, b.MarkovChainPackage);
  swap(a.__isset, b.__isset);
}

TDDIFailureLogicPackageUnion::TDDIFailureLogicPackageUnion(const TDDIFailureLogicPackageUnion& other1016) {
  FailureLogicPackage = other1016.FailureLogicPackage;
  FailureLogicPackageInterface = other1016.FailureLogicPackageInterface;
  FailureLogicPackageBinding = other1016.FailureLogicPackageBinding;
  FTAPackage = other1016.FTAPackage;
  FMEAPackage = other1016.FMEAPackage;
  MarkovChainPackage = other1016.MarkovChainPackage;
  __isset = other1016.__isset;
}
TDDIFailureLogicPackageUnion& TDDIFailureLogicPackageUnion::operator=(const TDDIFailureLogicPackageUnion& other1017) {
  FailureLogicPackage = other1017.FailureLogicPackage;
  FailureLogicPackageInterface = other1017.FailureLogicPackageInterface;
  FailureLogicPackageBinding = other1017.FailureLogicPackageBinding;
  FTAPackage = other1017.FTAPackage;
  FMEAPackage = other1017.FMEAPackage;
  MarkovChainPackage = other1017.MarkovChainPackage;
  __isset = other1017.__isset;
  return *this;
}
void TDDIFailureLogicPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureLogicPackageUnion(";
  out << "FailureLogicPackage="; (__isset.FailureLogicPackage ? (out << to_string(FailureLogicPackage)) : (out << "<null>"));
  out << ", " << "FailureLogicPackageInterface="; (__isset.FailureLogicPackageInterface ? (out << to_string(FailureLogicPackageInterface)) : (out << "<null>"));
  out << ", " << "FailureLogicPackageBinding="; (__isset.FailureLogicPackageBinding ? (out << to_string(FailureLogicPackageBinding)) : (out << "<null>"));
  out << ", " << "FTAPackage="; (__isset.FTAPackage ? (out << to_string(FTAPackage)) : (out << "<null>"));
  out << ", " << "FMEAPackage="; (__isset.FMEAPackage ? (out << to_string(FMEAPackage)) : (out << "<null>"));
  out << ", " << "MarkovChainPackage="; (__isset.MarkovChainPackage ? (out << to_string(MarkovChainPackage)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFailureLogicPackage::~TDDIAbstractFailureLogicPackage() throw() {
}


void TDDIAbstractFailureLogicPackage::__set_UsedFailureLogicPackage(const TDDIFailureLogicPackageUnion& val) {
  this->UsedFailureLogicPackage = val;
}

void TDDIAbstractFailureLogicPackage::__set_UsedFailureLogicPackageType(const TDDIFailureLogicPackageUnionType val) {
  this->UsedFailureLogicPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureLogicPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailureLogicPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFailureLogicPackage.read(iprot);
          this->__isset.UsedFailureLogicPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1018;
          xfer += iprot->readI32(ecast1018);
          this->UsedFailureLogicPackageType = (TDDIFailureLogicPackageUnionType)ecast1018;
          this->__isset.UsedFailureLogicPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailureLogicPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailureLogicPackage");

  xfer += oprot->writeFieldBegin("UsedFailureLogicPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFailureLogicPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFailureLogicPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFailureLogicPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailureLogicPackage &a, TDDIAbstractFailureLogicPackage &b) {
  using ::std::swap;
  swap(a.UsedFailureLogicPackage, b.UsedFailureLogicPackage);
  swap(a.UsedFailureLogicPackageType, b.UsedFailureLogicPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailureLogicPackage::TDDIAbstractFailureLogicPackage(const TDDIAbstractFailureLogicPackage& other1019) {
  UsedFailureLogicPackage = other1019.UsedFailureLogicPackage;
  UsedFailureLogicPackageType = other1019.UsedFailureLogicPackageType;
  __isset = other1019.__isset;
}
TDDIAbstractFailureLogicPackage& TDDIAbstractFailureLogicPackage::operator=(const TDDIAbstractFailureLogicPackage& other1020) {
  UsedFailureLogicPackage = other1020.UsedFailureLogicPackage;
  UsedFailureLogicPackageType = other1020.UsedFailureLogicPackageType;
  __isset = other1020.__isset;
  return *this;
}
void TDDIAbstractFailureLogicPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailureLogicPackage(";
  out << "UsedFailureLogicPackage=" << to_string(UsedFailureLogicPackage);
  out << ", " << "UsedFailureLogicPackageType=" << to_string(UsedFailureLogicPackageType);
  out << ")";
}


TDDIFMEAPackage::~TDDIFMEAPackage() throw() {
}


void TDDIFMEAPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEAPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEAPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEAPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFMEAPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFMEAPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEAPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFMEAPackage::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFMEAPackage::__set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val) {
  this->FMEAArtifacts = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1021;
            ::apache::thrift::protocol::TType _etype1024;
            xfer += iprot->readListBegin(_etype1024, _size1021);
            this->KeyValueMaps.resize(_size1021);
            uint32_t _i1025;
            for (_i1025 = 0; _i1025 < _size1021; ++_i1025)
            {
              xfer += this->KeyValueMaps[_i1025].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1026;
            ::apache::thrift::protocol::TType _etype1029;
            xfer += iprot->readListBegin(_etype1029, _size1026);
            this->FailureAnalysisArtifacts.resize(_size1026);
            uint32_t _i1030;
            for (_i1030 = 0; _i1030 < _size1026; ++_i1030)
            {
              xfer += this->FailureAnalysisArtifacts[_i1030].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FMEAArtifacts.clear();
            uint32_t _size1031;
            ::apache::thrift::protocol::TType _etype1034;
            xfer += iprot->readListBegin(_etype1034, _size1031);
            this->FMEAArtifacts.resize(_size1031);
            uint32_t _i1035;
            for (_i1035 = 0; _i1035 < _size1031; ++_i1035)
            {
              xfer += this->FMEAArtifacts[_i1035].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FMEAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1036;
    for (_iter1036 = this->KeyValueMaps.begin(); _iter1036 != this->KeyValueMaps.end(); ++_iter1036)
    {
      xfer += (*_iter1036).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1037;
    for (_iter1037 = this->FailureAnalysisArtifacts.begin(); _iter1037 != this->FailureAnalysisArtifacts.end(); ++_iter1037)
    {
      xfer += (*_iter1037).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEAArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FMEAArtifacts.size()));
    std::vector<TDDIAbstractFMEAArtifactRef> ::const_iterator _iter1038;
    for (_iter1038 = this->FMEAArtifacts.begin(); _iter1038 != this->FMEAArtifacts.end(); ++_iter1038)
    {
      xfer += (*_iter1038).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAPackage &a, TDDIFMEAPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.FMEAArtifacts, b.FMEAArtifacts);
  swap(a.__isset, b.__isset);
}

TDDIFMEAPackage::TDDIFMEAPackage(const TDDIFMEAPackage& other1039) {
  Id = other1039.Id;
  Name = other1039.Name;
  Description = other1039.Description;
  IsCitation = other1039.IsCitation;
  IsAbstract = other1039.IsAbstract;
  KeyValueMaps = other1039.KeyValueMaps;
  CitedElement = other1039.CitedElement;
  FailureAnalysisArtifacts = other1039.FailureAnalysisArtifacts;
  FMEAArtifacts = other1039.FMEAArtifacts;
  __isset = other1039.__isset;
}
TDDIFMEAPackage& TDDIFMEAPackage::operator=(const TDDIFMEAPackage& other1040) {
  Id = other1040.Id;
  Name = other1040.Name;
  Description = other1040.Description;
  IsCitation = other1040.IsCitation;
  IsAbstract = other1040.IsAbstract;
  KeyValueMaps = other1040.KeyValueMaps;
  CitedElement = other1040.CitedElement;
  FailureAnalysisArtifacts = other1040.FailureAnalysisArtifacts;
  FMEAArtifacts = other1040.FMEAArtifacts;
  __isset = other1040.__isset;
  return *this;
}
void TDDIFMEAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "FMEAArtifacts=" << to_string(FMEAArtifacts);
  out << ")";
}


TDDIFMEAPackageInterface::~TDDIFMEAPackageInterface() throw() {
}


void TDDIFMEAPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEAPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEAPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEAPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFMEAPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFMEAPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEAPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFMEAPackageInterface::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFMEAPackageInterface::__set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val) {
  this->FMEAArtifacts = val;
}

void TDDIFMEAPackageInterface::__set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1041;
            ::apache::thrift::protocol::TType _etype1044;
            xfer += iprot->readListBegin(_etype1044, _size1041);
            this->KeyValueMaps.resize(_size1041);
            uint32_t _i1045;
            for (_i1045 = 0; _i1045 < _size1041; ++_i1045)
            {
              xfer += this->KeyValueMaps[_i1045].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1046;
            ::apache::thrift::protocol::TType _etype1049;
            xfer += iprot->readListBegin(_etype1049, _size1046);
            this->FailureAnalysisArtifacts.resize(_size1046);
            uint32_t _i1050;
            for (_i1050 = 0; _i1050 < _size1046; ++_i1050)
            {
              xfer += this->FailureAnalysisArtifacts[_i1050].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FMEAArtifacts.clear();
            uint32_t _size1051;
            ::apache::thrift::protocol::TType _etype1054;
            xfer += iprot->readListBegin(_etype1054, _size1051);
            this->FMEAArtifacts.resize(_size1051);
            uint32_t _i1055;
            for (_i1055 = 0; _i1055 < _size1051; ++_i1055)
            {
              xfer += this->FMEAArtifacts[_i1055].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FMEAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Implements) { 
            this->Implements = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage>(new TDDIAbstractFMEAPackage);
          }
          xfer += this->Implements->read(iprot);
          bool wasSet = false;
          if (this->Implements->__isset.UsedFMEAPackage) { wasSet = true; }
          if (this->Implements->__isset.UsedFMEAPackageType) { wasSet = true; }
          if (!wasSet) { this->Implements.reset(); }
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1056;
    for (_iter1056 = this->KeyValueMaps.begin(); _iter1056 != this->KeyValueMaps.end(); ++_iter1056)
    {
      xfer += (*_iter1056).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1057;
    for (_iter1057 = this->FailureAnalysisArtifacts.begin(); _iter1057 != this->FailureAnalysisArtifacts.end(); ++_iter1057)
    {
      xfer += (*_iter1057).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEAArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FMEAArtifacts.size()));
    std::vector<TDDIAbstractFMEAArtifactRef> ::const_iterator _iter1058;
    for (_iter1058 = this->FMEAArtifacts.begin(); _iter1058 != this->FMEAArtifacts.end(); ++_iter1058)
    {
      xfer += (*_iter1058).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 11);
  if (this->Implements) {
    xfer += this->Implements->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFMEAPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAPackageInterface &a, TDDIFMEAPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.FMEAArtifacts, b.FMEAArtifacts);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIFMEAPackageInterface::TDDIFMEAPackageInterface(const TDDIFMEAPackageInterface& other1059) {
  Id = other1059.Id;
  Name = other1059.Name;
  Description = other1059.Description;
  IsCitation = other1059.IsCitation;
  IsAbstract = other1059.IsAbstract;
  KeyValueMaps = other1059.KeyValueMaps;
  CitedElement = other1059.CitedElement;
  FailureAnalysisArtifacts = other1059.FailureAnalysisArtifacts;
  FMEAArtifacts = other1059.FMEAArtifacts;
  Implements = other1059.Implements;
  __isset = other1059.__isset;
}
TDDIFMEAPackageInterface& TDDIFMEAPackageInterface::operator=(const TDDIFMEAPackageInterface& other1060) {
  Id = other1060.Id;
  Name = other1060.Name;
  Description = other1060.Description;
  IsCitation = other1060.IsCitation;
  IsAbstract = other1060.IsAbstract;
  KeyValueMaps = other1060.KeyValueMaps;
  CitedElement = other1060.CitedElement;
  FailureAnalysisArtifacts = other1060.FailureAnalysisArtifacts;
  FMEAArtifacts = other1060.FMEAArtifacts;
  Implements = other1060.Implements;
  __isset = other1060.__isset;
  return *this;
}
void TDDIFMEAPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "FMEAArtifacts=" << to_string(FMEAArtifacts);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIFMEAPackageBinding::~TDDIFMEAPackageBinding() throw() {
}


void TDDIFMEAPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEAPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEAPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEAPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFMEAPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFMEAPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEAPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFMEAPackageBinding::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFMEAPackageBinding::__set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val) {
  this->FMEAArtifacts = val;
}

void TDDIFMEAPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractFMEAPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1061;
            ::apache::thrift::protocol::TType _etype1064;
            xfer += iprot->readListBegin(_etype1064, _size1061);
            this->KeyValueMaps.resize(_size1061);
            uint32_t _i1065;
            for (_i1065 = 0; _i1065 < _size1061; ++_i1065)
            {
              xfer += this->KeyValueMaps[_i1065].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1066;
            ::apache::thrift::protocol::TType _etype1069;
            xfer += iprot->readListBegin(_etype1069, _size1066);
            this->FailureAnalysisArtifacts.resize(_size1066);
            uint32_t _i1070;
            for (_i1070 = 0; _i1070 < _size1066; ++_i1070)
            {
              xfer += this->FailureAnalysisArtifacts[_i1070].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FMEAArtifacts.clear();
            uint32_t _size1071;
            ::apache::thrift::protocol::TType _etype1074;
            xfer += iprot->readListBegin(_etype1074, _size1071);
            this->FMEAArtifacts.resize(_size1071);
            uint32_t _i1075;
            for (_i1075 = 0; _i1075 < _size1071; ++_i1075)
            {
              xfer += this->FMEAArtifacts[_i1075].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FMEAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size1076;
            ::apache::thrift::protocol::TType _etype1079;
            xfer += iprot->readListBegin(_etype1079, _size1076);
            this->ParticipantPackages.resize(_size1076);
            uint32_t _i1080;
            for (_i1080 = 0; _i1080 < _size1076; ++_i1080)
            {
              xfer += this->ParticipantPackages[_i1080].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1081;
    for (_iter1081 = this->KeyValueMaps.begin(); _iter1081 != this->KeyValueMaps.end(); ++_iter1081)
    {
      xfer += (*_iter1081).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1082;
    for (_iter1082 = this->FailureAnalysisArtifacts.begin(); _iter1082 != this->FailureAnalysisArtifacts.end(); ++_iter1082)
    {
      xfer += (*_iter1082).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEAArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FMEAArtifacts.size()));
    std::vector<TDDIAbstractFMEAArtifactRef> ::const_iterator _iter1083;
    for (_iter1083 = this->FMEAArtifacts.begin(); _iter1083 != this->FMEAArtifacts.end(); ++_iter1083)
    {
      xfer += (*_iter1083).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractFMEAPackageRef> ::const_iterator _iter1084;
    for (_iter1084 = this->ParticipantPackages.begin(); _iter1084 != this->ParticipantPackages.end(); ++_iter1084)
    {
      xfer += (*_iter1084).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAPackageBinding &a, TDDIFMEAPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.FMEAArtifacts, b.FMEAArtifacts);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIFMEAPackageBinding::TDDIFMEAPackageBinding(const TDDIFMEAPackageBinding& other1085) {
  Id = other1085.Id;
  Name = other1085.Name;
  Description = other1085.Description;
  IsCitation = other1085.IsCitation;
  IsAbstract = other1085.IsAbstract;
  KeyValueMaps = other1085.KeyValueMaps;
  CitedElement = other1085.CitedElement;
  FailureAnalysisArtifacts = other1085.FailureAnalysisArtifacts;
  FMEAArtifacts = other1085.FMEAArtifacts;
  ParticipantPackages = other1085.ParticipantPackages;
  __isset = other1085.__isset;
}
TDDIFMEAPackageBinding& TDDIFMEAPackageBinding::operator=(const TDDIFMEAPackageBinding& other1086) {
  Id = other1086.Id;
  Name = other1086.Name;
  Description = other1086.Description;
  IsCitation = other1086.IsCitation;
  IsAbstract = other1086.IsAbstract;
  KeyValueMaps = other1086.KeyValueMaps;
  CitedElement = other1086.CitedElement;
  FailureAnalysisArtifacts = other1086.FailureAnalysisArtifacts;
  FMEAArtifacts = other1086.FMEAArtifacts;
  ParticipantPackages = other1086.ParticipantPackages;
  __isset = other1086.__isset;
  return *this;
}
void TDDIFMEAPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "FMEAArtifacts=" << to_string(FMEAArtifacts);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIBasicFMEAPackage::~TDDIBasicFMEAPackage() throw() {
}


void TDDIBasicFMEAPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIBasicFMEAPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIBasicFMEAPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIBasicFMEAPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIBasicFMEAPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIBasicFMEAPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIBasicFMEAPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIBasicFMEAPackage::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIBasicFMEAPackage::__set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val) {
  this->FMEAArtifacts = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIBasicFMEAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIBasicFMEAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1087;
            ::apache::thrift::protocol::TType _etype1090;
            xfer += iprot->readListBegin(_etype1090, _size1087);
            this->KeyValueMaps.resize(_size1087);
            uint32_t _i1091;
            for (_i1091 = 0; _i1091 < _size1087; ++_i1091)
            {
              xfer += this->KeyValueMaps[_i1091].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1092;
            ::apache::thrift::protocol::TType _etype1095;
            xfer += iprot->readListBegin(_etype1095, _size1092);
            this->FailureAnalysisArtifacts.resize(_size1092);
            uint32_t _i1096;
            for (_i1096 = 0; _i1096 < _size1092; ++_i1096)
            {
              xfer += this->FailureAnalysisArtifacts[_i1096].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FMEAArtifacts.clear();
            uint32_t _size1097;
            ::apache::thrift::protocol::TType _etype1100;
            xfer += iprot->readListBegin(_etype1100, _size1097);
            this->FMEAArtifacts.resize(_size1097);
            uint32_t _i1101;
            for (_i1101 = 0; _i1101 < _size1097; ++_i1101)
            {
              xfer += this->FMEAArtifacts[_i1101].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FMEAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIBasicFMEAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIBasicFMEAPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1102;
    for (_iter1102 = this->KeyValueMaps.begin(); _iter1102 != this->KeyValueMaps.end(); ++_iter1102)
    {
      xfer += (*_iter1102).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1103;
    for (_iter1103 = this->FailureAnalysisArtifacts.begin(); _iter1103 != this->FailureAnalysisArtifacts.end(); ++_iter1103)
    {
      xfer += (*_iter1103).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEAArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FMEAArtifacts.size()));
    std::vector<TDDIAbstractFMEAArtifactRef> ::const_iterator _iter1104;
    for (_iter1104 = this->FMEAArtifacts.begin(); _iter1104 != this->FMEAArtifacts.end(); ++_iter1104)
    {
      xfer += (*_iter1104).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIBasicFMEAPackage &a, TDDIBasicFMEAPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.FMEAArtifacts, b.FMEAArtifacts);
  swap(a.__isset, b.__isset);
}

TDDIBasicFMEAPackage::TDDIBasicFMEAPackage(const TDDIBasicFMEAPackage& other1105) {
  Id = other1105.Id;
  Name = other1105.Name;
  Description = other1105.Description;
  IsCitation = other1105.IsCitation;
  IsAbstract = other1105.IsAbstract;
  KeyValueMaps = other1105.KeyValueMaps;
  CitedElement = other1105.CitedElement;
  FailureAnalysisArtifacts = other1105.FailureAnalysisArtifacts;
  FMEAArtifacts = other1105.FMEAArtifacts;
  __isset = other1105.__isset;
}
TDDIBasicFMEAPackage& TDDIBasicFMEAPackage::operator=(const TDDIBasicFMEAPackage& other1106) {
  Id = other1106.Id;
  Name = other1106.Name;
  Description = other1106.Description;
  IsCitation = other1106.IsCitation;
  IsAbstract = other1106.IsAbstract;
  KeyValueMaps = other1106.KeyValueMaps;
  CitedElement = other1106.CitedElement;
  FailureAnalysisArtifacts = other1106.FailureAnalysisArtifacts;
  FMEAArtifacts = other1106.FMEAArtifacts;
  __isset = other1106.__isset;
  return *this;
}
void TDDIBasicFMEAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIBasicFMEAPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "FMEAArtifacts=" << to_string(FMEAArtifacts);
  out << ")";
}


TDDIFMEDAPackage::~TDDIFMEDAPackage() throw() {
}


void TDDIFMEDAPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEDAPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEDAPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEDAPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFMEDAPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFMEDAPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEDAPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFMEDAPackage::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFMEDAPackage::__set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val) {
  this->FMEAArtifacts = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEDAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEDAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1107;
            ::apache::thrift::protocol::TType _etype1110;
            xfer += iprot->readListBegin(_etype1110, _size1107);
            this->KeyValueMaps.resize(_size1107);
            uint32_t _i1111;
            for (_i1111 = 0; _i1111 < _size1107; ++_i1111)
            {
              xfer += this->KeyValueMaps[_i1111].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1112;
            ::apache::thrift::protocol::TType _etype1115;
            xfer += iprot->readListBegin(_etype1115, _size1112);
            this->FailureAnalysisArtifacts.resize(_size1112);
            uint32_t _i1116;
            for (_i1116 = 0; _i1116 < _size1112; ++_i1116)
            {
              xfer += this->FailureAnalysisArtifacts[_i1116].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FMEAArtifacts.clear();
            uint32_t _size1117;
            ::apache::thrift::protocol::TType _etype1120;
            xfer += iprot->readListBegin(_etype1120, _size1117);
            this->FMEAArtifacts.resize(_size1117);
            uint32_t _i1121;
            for (_i1121 = 0; _i1121 < _size1117; ++_i1121)
            {
              xfer += this->FMEAArtifacts[_i1121].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FMEAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEDAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEDAPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1122;
    for (_iter1122 = this->KeyValueMaps.begin(); _iter1122 != this->KeyValueMaps.end(); ++_iter1122)
    {
      xfer += (*_iter1122).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1123;
    for (_iter1123 = this->FailureAnalysisArtifacts.begin(); _iter1123 != this->FailureAnalysisArtifacts.end(); ++_iter1123)
    {
      xfer += (*_iter1123).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEAArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FMEAArtifacts.size()));
    std::vector<TDDIAbstractFMEAArtifactRef> ::const_iterator _iter1124;
    for (_iter1124 = this->FMEAArtifacts.begin(); _iter1124 != this->FMEAArtifacts.end(); ++_iter1124)
    {
      xfer += (*_iter1124).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEDAPackage &a, TDDIFMEDAPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.FMEAArtifacts, b.FMEAArtifacts);
  swap(a.__isset, b.__isset);
}

TDDIFMEDAPackage::TDDIFMEDAPackage(const TDDIFMEDAPackage& other1125) {
  Id = other1125.Id;
  Name = other1125.Name;
  Description = other1125.Description;
  IsCitation = other1125.IsCitation;
  IsAbstract = other1125.IsAbstract;
  KeyValueMaps = other1125.KeyValueMaps;
  CitedElement = other1125.CitedElement;
  FailureAnalysisArtifacts = other1125.FailureAnalysisArtifacts;
  FMEAArtifacts = other1125.FMEAArtifacts;
  __isset = other1125.__isset;
}
TDDIFMEDAPackage& TDDIFMEDAPackage::operator=(const TDDIFMEDAPackage& other1126) {
  Id = other1126.Id;
  Name = other1126.Name;
  Description = other1126.Description;
  IsCitation = other1126.IsCitation;
  IsAbstract = other1126.IsAbstract;
  KeyValueMaps = other1126.KeyValueMaps;
  CitedElement = other1126.CitedElement;
  FailureAnalysisArtifacts = other1126.FailureAnalysisArtifacts;
  FMEAArtifacts = other1126.FMEAArtifacts;
  __isset = other1126.__isset;
  return *this;
}
void TDDIFMEDAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEDAPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "FMEAArtifacts=" << to_string(FMEAArtifacts);
  out << ")";
}


TDDIFMEAPackageUnion::~TDDIFMEAPackageUnion() throw() {
}


void TDDIFMEAPackageUnion::__set_FMEAPackage(const TDDIFMEAPackage& val) {
  this->FMEAPackage = val;
__isset.FMEAPackage = true;
}

void TDDIFMEAPackageUnion::__set_FMEAPackageInterface(const TDDIFMEAPackageInterface& val) {
  this->FMEAPackageInterface = val;
__isset.FMEAPackageInterface = true;
}

void TDDIFMEAPackageUnion::__set_FMEAPackageBinding(const TDDIFMEAPackageBinding& val) {
  this->FMEAPackageBinding = val;
__isset.FMEAPackageBinding = true;
}

void TDDIFMEAPackageUnion::__set_BasicFMEAPackage(const TDDIBasicFMEAPackage& val) {
  this->BasicFMEAPackage = val;
__isset.BasicFMEAPackage = true;
}

void TDDIFMEAPackageUnion::__set_FMEDAPackage(const TDDIFMEDAPackage& val) {
  this->FMEDAPackage = val;
__isset.FMEDAPackage = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEAPackage.read(iprot);
          this->__isset.FMEAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEAPackageInterface.read(iprot);
          this->__isset.FMEAPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEAPackageBinding.read(iprot);
          this->__isset.FMEAPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->BasicFMEAPackage.read(iprot);
          this->__isset.BasicFMEAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEDAPackage.read(iprot);
          this->__isset.FMEDAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAPackageUnion");

  if (this->__isset.FMEAPackage) {
    xfer += oprot->writeFieldBegin("FMEAPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->FMEAPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEAPackageInterface) {
    xfer += oprot->writeFieldBegin("FMEAPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->FMEAPackageInterface.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEAPackageBinding) {
    xfer += oprot->writeFieldBegin("FMEAPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->FMEAPackageBinding.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.BasicFMEAPackage) {
    xfer += oprot->writeFieldBegin("BasicFMEAPackage", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->BasicFMEAPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEDAPackage) {
    xfer += oprot->writeFieldBegin("FMEDAPackage", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->FMEDAPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAPackageUnion &a, TDDIFMEAPackageUnion &b) {
  using ::std::swap;
  swap(a.FMEAPackage, b.FMEAPackage);
  swap(a.FMEAPackageInterface, b.FMEAPackageInterface);
  swap(a.FMEAPackageBinding, b.FMEAPackageBinding);
  swap(a.BasicFMEAPackage, b.BasicFMEAPackage);
  swap(a.FMEDAPackage, b.FMEDAPackage);
  swap(a.__isset, b.__isset);
}

TDDIFMEAPackageUnion::TDDIFMEAPackageUnion(const TDDIFMEAPackageUnion& other1127) {
  FMEAPackage = other1127.FMEAPackage;
  FMEAPackageInterface = other1127.FMEAPackageInterface;
  FMEAPackageBinding = other1127.FMEAPackageBinding;
  BasicFMEAPackage = other1127.BasicFMEAPackage;
  FMEDAPackage = other1127.FMEDAPackage;
  __isset = other1127.__isset;
}
TDDIFMEAPackageUnion& TDDIFMEAPackageUnion::operator=(const TDDIFMEAPackageUnion& other1128) {
  FMEAPackage = other1128.FMEAPackage;
  FMEAPackageInterface = other1128.FMEAPackageInterface;
  FMEAPackageBinding = other1128.FMEAPackageBinding;
  BasicFMEAPackage = other1128.BasicFMEAPackage;
  FMEDAPackage = other1128.FMEDAPackage;
  __isset = other1128.__isset;
  return *this;
}
void TDDIFMEAPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAPackageUnion(";
  out << "FMEAPackage="; (__isset.FMEAPackage ? (out << to_string(FMEAPackage)) : (out << "<null>"));
  out << ", " << "FMEAPackageInterface="; (__isset.FMEAPackageInterface ? (out << to_string(FMEAPackageInterface)) : (out << "<null>"));
  out << ", " << "FMEAPackageBinding="; (__isset.FMEAPackageBinding ? (out << to_string(FMEAPackageBinding)) : (out << "<null>"));
  out << ", " << "BasicFMEAPackage="; (__isset.BasicFMEAPackage ? (out << to_string(BasicFMEAPackage)) : (out << "<null>"));
  out << ", " << "FMEDAPackage="; (__isset.FMEDAPackage ? (out << to_string(FMEDAPackage)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFMEAPackage::~TDDIAbstractFMEAPackage() throw() {
}


void TDDIAbstractFMEAPackage::__set_UsedFMEAPackage(const TDDIFMEAPackageUnion& val) {
  this->UsedFMEAPackage = val;
}

void TDDIAbstractFMEAPackage::__set_UsedFMEAPackageType(const TDDIFMEAPackageUnionType val) {
  this->UsedFMEAPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFMEAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFMEAPackage.read(iprot);
          this->__isset.UsedFMEAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1129;
          xfer += iprot->readI32(ecast1129);
          this->UsedFMEAPackageType = (TDDIFMEAPackageUnionType)ecast1129;
          this->__isset.UsedFMEAPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFMEAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFMEAPackage");

  xfer += oprot->writeFieldBegin("UsedFMEAPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFMEAPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFMEAPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFMEAPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFMEAPackage &a, TDDIAbstractFMEAPackage &b) {
  using ::std::swap;
  swap(a.UsedFMEAPackage, b.UsedFMEAPackage);
  swap(a.UsedFMEAPackageType, b.UsedFMEAPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFMEAPackage::TDDIAbstractFMEAPackage(const TDDIAbstractFMEAPackage& other1130) {
  UsedFMEAPackage = other1130.UsedFMEAPackage;
  UsedFMEAPackageType = other1130.UsedFMEAPackageType;
  __isset = other1130.__isset;
}
TDDIAbstractFMEAPackage& TDDIAbstractFMEAPackage::operator=(const TDDIAbstractFMEAPackage& other1131) {
  UsedFMEAPackage = other1131.UsedFMEAPackage;
  UsedFMEAPackageType = other1131.UsedFMEAPackageType;
  __isset = other1131.__isset;
  return *this;
}
void TDDIAbstractFMEAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFMEAPackage(";
  out << "UsedFMEAPackage=" << to_string(UsedFMEAPackage);
  out << ", " << "UsedFMEAPackageType=" << to_string(UsedFMEAPackageType);
  out << ")";
}


TDDIFMEAArtifactUnion::~TDDIFMEAArtifactUnion() throw() {
}


void TDDIFMEAArtifactUnion::__set_FMEAPropagation(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPropagation> val) {
  this->FMEAPropagation = val;
__isset.FMEAPropagation = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAArtifactUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAArtifactUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FMEAPropagation) { 
            this->FMEAPropagation = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPropagation>(new TDDIAbstractFMEAPropagation);
          }
          xfer += this->FMEAPropagation->read(iprot);
          bool wasSet = false;
          if (this->FMEAPropagation->__isset.UsedFMEAPropagation) { wasSet = true; }
          if (this->FMEAPropagation->__isset.UsedFMEAPropagationType) { wasSet = true; }
          if (!wasSet) { this->FMEAPropagation.reset(); }
          this->__isset.FMEAPropagation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAArtifactUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAArtifactUnion");

  if (this->__isset.FMEAPropagation) {
    xfer += oprot->writeFieldBegin("FMEAPropagation", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->FMEAPropagation) {
      xfer += this->FMEAPropagation->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFMEAPropagation"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAArtifactUnion &a, TDDIFMEAArtifactUnion &b) {
  using ::std::swap;
  swap(a.FMEAPropagation, b.FMEAPropagation);
  swap(a.__isset, b.__isset);
}

TDDIFMEAArtifactUnion::TDDIFMEAArtifactUnion(const TDDIFMEAArtifactUnion& other1132) {
  FMEAPropagation = other1132.FMEAPropagation;
  __isset = other1132.__isset;
}
TDDIFMEAArtifactUnion& TDDIFMEAArtifactUnion::operator=(const TDDIFMEAArtifactUnion& other1133) {
  FMEAPropagation = other1133.FMEAPropagation;
  __isset = other1133.__isset;
  return *this;
}
void TDDIFMEAArtifactUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAArtifactUnion(";
  out << "FMEAPropagation="; (__isset.FMEAPropagation ? (out << to_string(FMEAPropagation)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFMEAArtifact::~TDDIAbstractFMEAArtifact() throw() {
}


void TDDIAbstractFMEAArtifact::__set_UsedFMEAArtifact(const TDDIFMEAArtifactUnion& val) {
  this->UsedFMEAArtifact = val;
}

void TDDIAbstractFMEAArtifact::__set_UsedFMEAArtifactType(const TDDIFMEAArtifactUnionType val) {
  this->UsedFMEAArtifactType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFMEAArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFMEAArtifact.read(iprot);
          this->__isset.UsedFMEAArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1134;
          xfer += iprot->readI32(ecast1134);
          this->UsedFMEAArtifactType = (TDDIFMEAArtifactUnionType)ecast1134;
          this->__isset.UsedFMEAArtifactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFMEAArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFMEAArtifact");

  xfer += oprot->writeFieldBegin("UsedFMEAArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFMEAArtifact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFMEAArtifactType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFMEAArtifactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFMEAArtifact &a, TDDIAbstractFMEAArtifact &b) {
  using ::std::swap;
  swap(a.UsedFMEAArtifact, b.UsedFMEAArtifact);
  swap(a.UsedFMEAArtifactType, b.UsedFMEAArtifactType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFMEAArtifact::TDDIAbstractFMEAArtifact(const TDDIAbstractFMEAArtifact& other1135) {
  UsedFMEAArtifact = other1135.UsedFMEAArtifact;
  UsedFMEAArtifactType = other1135.UsedFMEAArtifactType;
  __isset = other1135.__isset;
}
TDDIAbstractFMEAArtifact& TDDIAbstractFMEAArtifact::operator=(const TDDIAbstractFMEAArtifact& other1136) {
  UsedFMEAArtifact = other1136.UsedFMEAArtifact;
  UsedFMEAArtifactType = other1136.UsedFMEAArtifactType;
  __isset = other1136.__isset;
  return *this;
}
void TDDIAbstractFMEAArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFMEAArtifact(";
  out << "UsedFMEAArtifact=" << to_string(UsedFMEAArtifact);
  out << ", " << "UsedFMEAArtifactType=" << to_string(UsedFMEAArtifactType);
  out << ")";
}


TDDIFMEAFailure::~TDDIFMEAFailure() throw() {
}


void TDDIFMEAFailure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEAFailure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEAFailure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEAFailure::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFMEAFailure::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFMEAFailure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEAFailure::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFMEAFailure::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDIFMEAFailure::__set_FailureMode(::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> val) {
  this->FailureMode = val;
}

void TDDIFMEAFailure::__set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val) {
  this->ProbabilityDistribution = val;
}

void TDDIFMEAFailure::__set_OutputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> val) {
  this->OutputFailure = val;
}

void TDDIFMEAFailure::__set_InputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIInputFailure> val) {
  this->InputFailure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1137;
            ::apache::thrift::protocol::TType _etype1140;
            xfer += iprot->readListBegin(_etype1140, _size1137);
            this->KeyValueMaps.resize(_size1137);
            uint32_t _i1141;
            for (_i1141 = 0; _i1141 < _size1137; ++_i1141)
            {
              xfer += this->KeyValueMaps[_i1141].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureMode) { 
            this->FailureMode = ::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode>(new TDDIFailureMode);
          }
          xfer += this->FailureMode->read(iprot);
          bool wasSet = false;
          if (this->FailureMode->__isset.Id) { wasSet = true; }
          if (this->FailureMode->__isset.Name) { wasSet = true; }
          if (this->FailureMode->__isset.Description) { wasSet = true; }
          if (this->FailureMode->__isset.IsCitation) { wasSet = true; }
          if (this->FailureMode->__isset.IsAbstract) { wasSet = true; }
          if (this->FailureMode->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FailureMode->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->FailureMode.reset(); }
          this->__isset.FailureMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ProbabilityDistribution) { 
            this->ProbabilityDistribution = ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution>(new TDDIProbabilityDistribution);
          }
          xfer += this->ProbabilityDistribution->read(iprot);
          bool wasSet = false;
          if (this->ProbabilityDistribution->__isset.Id) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Name) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Description) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsCitation) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsAbstract) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.CitedElement) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Type) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.ProbDistParams) { wasSet = true; }
          if (!wasSet) { this->ProbabilityDistribution.reset(); }
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->OutputFailure) { 
            this->OutputFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure>(new TDDIOutputFailure);
          }
          xfer += this->OutputFailure->read(iprot);
          bool wasSet = false;
          if (this->OutputFailure->__isset.Id) { wasSet = true; }
          if (this->OutputFailure->__isset.Name) { wasSet = true; }
          if (this->OutputFailure->__isset.Description) { wasSet = true; }
          if (this->OutputFailure->__isset.IsCitation) { wasSet = true; }
          if (this->OutputFailure->__isset.IsAbstract) { wasSet = true; }
          if (this->OutputFailure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->OutputFailure->__isset.CitedElement) { wasSet = true; }
          if (this->OutputFailure->__isset.FailureRate) { wasSet = true; }
          if (this->OutputFailure->__isset.FailureMode) { wasSet = true; }
          if (this->OutputFailure->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->OutputFailure->__isset.MinimalCutsets) { wasSet = true; }
          if (!wasSet) { this->OutputFailure.reset(); }
          this->__isset.OutputFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->InputFailure) { 
            this->InputFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIInputFailure>(new TDDIInputFailure);
          }
          xfer += this->InputFailure->read(iprot);
          bool wasSet = false;
          if (this->InputFailure->__isset.Id) { wasSet = true; }
          if (this->InputFailure->__isset.Name) { wasSet = true; }
          if (this->InputFailure->__isset.Description) { wasSet = true; }
          if (this->InputFailure->__isset.IsCitation) { wasSet = true; }
          if (this->InputFailure->__isset.IsAbstract) { wasSet = true; }
          if (this->InputFailure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->InputFailure->__isset.CitedElement) { wasSet = true; }
          if (this->InputFailure->__isset.FailureRate) { wasSet = true; }
          if (this->InputFailure->__isset.FailureMode) { wasSet = true; }
          if (this->InputFailure->__isset.ProbabilityDistribution) { wasSet = true; }
          if (!wasSet) { this->InputFailure.reset(); }
          this->__isset.InputFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAFailure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1142;
    for (_iter1142 = this->KeyValueMaps.begin(); _iter1142 != this->KeyValueMaps.end(); ++_iter1142)
    {
      xfer += (*_iter1142).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureMode", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->FailureMode) {
    xfer += this->FailureMode->write(oprot); 
  } else {oprot->writeStructBegin("TDDIFailureMode"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  if (this->ProbabilityDistribution) {
    xfer += this->ProbabilityDistribution->write(oprot); 
  } else {oprot->writeStructBegin("TDDIProbabilityDistribution"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OutputFailure", ::apache::thrift::protocol::T_STRUCT, 11);
  if (this->OutputFailure) {
    xfer += this->OutputFailure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIOutputFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("InputFailure", ::apache::thrift::protocol::T_STRUCT, 12);
  if (this->InputFailure) {
    xfer += this->InputFailure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIInputFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAFailure &a, TDDIFMEAFailure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureRate, b.FailureRate);
  swap(a.FailureMode, b.FailureMode);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.OutputFailure, b.OutputFailure);
  swap(a.InputFailure, b.InputFailure);
  swap(a.__isset, b.__isset);
}

TDDIFMEAFailure::TDDIFMEAFailure(const TDDIFMEAFailure& other1143) {
  Id = other1143.Id;
  Name = other1143.Name;
  Description = other1143.Description;
  IsCitation = other1143.IsCitation;
  IsAbstract = other1143.IsAbstract;
  KeyValueMaps = other1143.KeyValueMaps;
  CitedElement = other1143.CitedElement;
  FailureRate = other1143.FailureRate;
  FailureMode = other1143.FailureMode;
  ProbabilityDistribution = other1143.ProbabilityDistribution;
  OutputFailure = other1143.OutputFailure;
  InputFailure = other1143.InputFailure;
  __isset = other1143.__isset;
}
TDDIFMEAFailure& TDDIFMEAFailure::operator=(const TDDIFMEAFailure& other1144) {
  Id = other1144.Id;
  Name = other1144.Name;
  Description = other1144.Description;
  IsCitation = other1144.IsCitation;
  IsAbstract = other1144.IsAbstract;
  KeyValueMaps = other1144.KeyValueMaps;
  CitedElement = other1144.CitedElement;
  FailureRate = other1144.FailureRate;
  FailureMode = other1144.FailureMode;
  ProbabilityDistribution = other1144.ProbabilityDistribution;
  OutputFailure = other1144.OutputFailure;
  InputFailure = other1144.InputFailure;
  __isset = other1144.__isset;
  return *this;
}
void TDDIFMEAFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAFailure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "FailureMode=" << to_string(FailureMode);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ", " << "OutputFailure=" << to_string(OutputFailure);
  out << ", " << "InputFailure=" << to_string(InputFailure);
  out << ")";
}


TDDIFMEAPropagation::~TDDIFMEAPropagation() throw() {
}


void TDDIFMEAPropagation::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEAPropagation::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEAPropagation::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEAPropagation::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFMEAPropagation::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFMEAPropagation::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEAPropagation::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFMEAPropagation::__set_FMEACause(const TDDIFMEAFailure& val) {
  this->FMEACause = val;
}

void TDDIFMEAPropagation::__set_FMEAEffect(const TDDIFMEAFailure& val) {
  this->FMEAEffect = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAPropagation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAPropagation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1145;
            ::apache::thrift::protocol::TType _etype1148;
            xfer += iprot->readListBegin(_etype1148, _size1145);
            this->KeyValueMaps.resize(_size1145);
            uint32_t _i1149;
            for (_i1149 = 0; _i1149 < _size1145; ++_i1149)
            {
              xfer += this->KeyValueMaps[_i1149].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEACause.read(iprot);
          this->__isset.FMEACause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEAEffect.read(iprot);
          this->__isset.FMEAEffect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAPropagation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAPropagation");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1150;
    for (_iter1150 = this->KeyValueMaps.begin(); _iter1150 != this->KeyValueMaps.end(); ++_iter1150)
    {
      xfer += (*_iter1150).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEACause", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->FMEACause.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEAEffect", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->FMEAEffect.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAPropagation &a, TDDIFMEAPropagation &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FMEACause, b.FMEACause);
  swap(a.FMEAEffect, b.FMEAEffect);
  swap(a.__isset, b.__isset);
}

TDDIFMEAPropagation::TDDIFMEAPropagation(const TDDIFMEAPropagation& other1151) {
  Id = other1151.Id;
  Name = other1151.Name;
  Description = other1151.Description;
  IsCitation = other1151.IsCitation;
  IsAbstract = other1151.IsAbstract;
  KeyValueMaps = other1151.KeyValueMaps;
  CitedElement = other1151.CitedElement;
  FMEACause = other1151.FMEACause;
  FMEAEffect = other1151.FMEAEffect;
  __isset = other1151.__isset;
}
TDDIFMEAPropagation& TDDIFMEAPropagation::operator=(const TDDIFMEAPropagation& other1152) {
  Id = other1152.Id;
  Name = other1152.Name;
  Description = other1152.Description;
  IsCitation = other1152.IsCitation;
  IsAbstract = other1152.IsAbstract;
  KeyValueMaps = other1152.KeyValueMaps;
  CitedElement = other1152.CitedElement;
  FMEACause = other1152.FMEACause;
  FMEAEffect = other1152.FMEAEffect;
  __isset = other1152.__isset;
  return *this;
}
void TDDIFMEAPropagation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAPropagation(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FMEACause=" << to_string(FMEACause);
  out << ", " << "FMEAEffect=" << to_string(FMEAEffect);
  out << ")";
}


TDDIDiagnosableFailurePropagation::~TDDIDiagnosableFailurePropagation() throw() {
}


void TDDIDiagnosableFailurePropagation::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDiagnosableFailurePropagation::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDiagnosableFailurePropagation::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDiagnosableFailurePropagation::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDiagnosableFailurePropagation::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDiagnosableFailurePropagation::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIDiagnosableFailurePropagation::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIDiagnosableFailurePropagation::__set_FMEACause(const TDDIFMEAFailure& val) {
  this->FMEACause = val;
}

void TDDIDiagnosableFailurePropagation::__set_FMEAEffect(const TDDIFMEAFailure& val) {
  this->FMEAEffect = val;
}

void TDDIDiagnosableFailurePropagation::__set_DiagnosisRate(const double val) {
  this->DiagnosisRate = val;
}

void TDDIDiagnosableFailurePropagation::__set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val) {
  this->ProbabilityDistribution = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDiagnosableFailurePropagation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDiagnosableFailurePropagation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1153;
            ::apache::thrift::protocol::TType _etype1156;
            xfer += iprot->readListBegin(_etype1156, _size1153);
            this->KeyValueMaps.resize(_size1153);
            uint32_t _i1157;
            for (_i1157 = 0; _i1157 < _size1153; ++_i1157)
            {
              xfer += this->KeyValueMaps[_i1157].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEACause.read(iprot);
          this->__isset.FMEACause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEAEffect.read(iprot);
          this->__isset.FMEAEffect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->DiagnosisRate);
          this->__isset.DiagnosisRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ProbabilityDistribution) { 
            this->ProbabilityDistribution = ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution>(new TDDIProbabilityDistribution);
          }
          xfer += this->ProbabilityDistribution->read(iprot);
          bool wasSet = false;
          if (this->ProbabilityDistribution->__isset.Id) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Name) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Description) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsCitation) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsAbstract) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.CitedElement) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Type) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.ProbDistParams) { wasSet = true; }
          if (!wasSet) { this->ProbabilityDistribution.reset(); }
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDiagnosableFailurePropagation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDiagnosableFailurePropagation");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1158;
    for (_iter1158 = this->KeyValueMaps.begin(); _iter1158 != this->KeyValueMaps.end(); ++_iter1158)
    {
      xfer += (*_iter1158).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEACause", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->FMEACause.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FMEAEffect", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->FMEAEffect.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DiagnosisRate", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->DiagnosisRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 11);
  if (this->ProbabilityDistribution) {
    xfer += this->ProbabilityDistribution->write(oprot); 
  } else {oprot->writeStructBegin("TDDIProbabilityDistribution"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDiagnosableFailurePropagation &a, TDDIDiagnosableFailurePropagation &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FMEACause, b.FMEACause);
  swap(a.FMEAEffect, b.FMEAEffect);
  swap(a.DiagnosisRate, b.DiagnosisRate);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.__isset, b.__isset);
}

TDDIDiagnosableFailurePropagation::TDDIDiagnosableFailurePropagation(const TDDIDiagnosableFailurePropagation& other1159) {
  Id = other1159.Id;
  Name = other1159.Name;
  Description = other1159.Description;
  IsCitation = other1159.IsCitation;
  IsAbstract = other1159.IsAbstract;
  KeyValueMaps = other1159.KeyValueMaps;
  CitedElement = other1159.CitedElement;
  FMEACause = other1159.FMEACause;
  FMEAEffect = other1159.FMEAEffect;
  DiagnosisRate = other1159.DiagnosisRate;
  ProbabilityDistribution = other1159.ProbabilityDistribution;
  __isset = other1159.__isset;
}
TDDIDiagnosableFailurePropagation& TDDIDiagnosableFailurePropagation::operator=(const TDDIDiagnosableFailurePropagation& other1160) {
  Id = other1160.Id;
  Name = other1160.Name;
  Description = other1160.Description;
  IsCitation = other1160.IsCitation;
  IsAbstract = other1160.IsAbstract;
  KeyValueMaps = other1160.KeyValueMaps;
  CitedElement = other1160.CitedElement;
  FMEACause = other1160.FMEACause;
  FMEAEffect = other1160.FMEAEffect;
  DiagnosisRate = other1160.DiagnosisRate;
  ProbabilityDistribution = other1160.ProbabilityDistribution;
  __isset = other1160.__isset;
  return *this;
}
void TDDIDiagnosableFailurePropagation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDiagnosableFailurePropagation(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FMEACause=" << to_string(FMEACause);
  out << ", " << "FMEAEffect=" << to_string(FMEAEffect);
  out << ", " << "DiagnosisRate=" << to_string(DiagnosisRate);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ")";
}


TDDIFMEAPropagationUnion::~TDDIFMEAPropagationUnion() throw() {
}


void TDDIFMEAPropagationUnion::__set_FMEAPropagation(const TDDIFMEAPropagation& val) {
  this->FMEAPropagation = val;
__isset.FMEAPropagation = true;
}

void TDDIFMEAPropagationUnion::__set_DiagnosableFailurePropagation(const TDDIDiagnosableFailurePropagation& val) {
  this->DiagnosableFailurePropagation = val;
__isset.DiagnosableFailurePropagation = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAPropagationUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAPropagationUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FMEAPropagation.read(iprot);
          this->__isset.FMEAPropagation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DiagnosableFailurePropagation.read(iprot);
          this->__isset.DiagnosableFailurePropagation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAPropagationUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAPropagationUnion");

  if (this->__isset.FMEAPropagation) {
    xfer += oprot->writeFieldBegin("FMEAPropagation", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->FMEAPropagation.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DiagnosableFailurePropagation) {
    xfer += oprot->writeFieldBegin("DiagnosableFailurePropagation", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->DiagnosableFailurePropagation.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAPropagationUnion &a, TDDIFMEAPropagationUnion &b) {
  using ::std::swap;
  swap(a.FMEAPropagation, b.FMEAPropagation);
  swap(a.DiagnosableFailurePropagation, b.DiagnosableFailurePropagation);
  swap(a.__isset, b.__isset);
}

TDDIFMEAPropagationUnion::TDDIFMEAPropagationUnion(const TDDIFMEAPropagationUnion& other1161) {
  FMEAPropagation = other1161.FMEAPropagation;
  DiagnosableFailurePropagation = other1161.DiagnosableFailurePropagation;
  __isset = other1161.__isset;
}
TDDIFMEAPropagationUnion& TDDIFMEAPropagationUnion::operator=(const TDDIFMEAPropagationUnion& other1162) {
  FMEAPropagation = other1162.FMEAPropagation;
  DiagnosableFailurePropagation = other1162.DiagnosableFailurePropagation;
  __isset = other1162.__isset;
  return *this;
}
void TDDIFMEAPropagationUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAPropagationUnion(";
  out << "FMEAPropagation="; (__isset.FMEAPropagation ? (out << to_string(FMEAPropagation)) : (out << "<null>"));
  out << ", " << "DiagnosableFailurePropagation="; (__isset.DiagnosableFailurePropagation ? (out << to_string(DiagnosableFailurePropagation)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFMEAPropagation::~TDDIAbstractFMEAPropagation() throw() {
}


void TDDIAbstractFMEAPropagation::__set_UsedFMEAPropagation(const TDDIFMEAPropagationUnion& val) {
  this->UsedFMEAPropagation = val;
}

void TDDIAbstractFMEAPropagation::__set_UsedFMEAPropagationType(const TDDIFMEAPropagationUnionType val) {
  this->UsedFMEAPropagationType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAPropagation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFMEAPropagation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFMEAPropagation.read(iprot);
          this->__isset.UsedFMEAPropagation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1163;
          xfer += iprot->readI32(ecast1163);
          this->UsedFMEAPropagationType = (TDDIFMEAPropagationUnionType)ecast1163;
          this->__isset.UsedFMEAPropagationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFMEAPropagation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFMEAPropagation");

  xfer += oprot->writeFieldBegin("UsedFMEAPropagation", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFMEAPropagation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFMEAPropagationType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFMEAPropagationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFMEAPropagation &a, TDDIAbstractFMEAPropagation &b) {
  using ::std::swap;
  swap(a.UsedFMEAPropagation, b.UsedFMEAPropagation);
  swap(a.UsedFMEAPropagationType, b.UsedFMEAPropagationType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFMEAPropagation::TDDIAbstractFMEAPropagation(const TDDIAbstractFMEAPropagation& other1164) {
  UsedFMEAPropagation = other1164.UsedFMEAPropagation;
  UsedFMEAPropagationType = other1164.UsedFMEAPropagationType;
  __isset = other1164.__isset;
}
TDDIAbstractFMEAPropagation& TDDIAbstractFMEAPropagation::operator=(const TDDIAbstractFMEAPropagation& other1165) {
  UsedFMEAPropagation = other1165.UsedFMEAPropagation;
  UsedFMEAPropagationType = other1165.UsedFMEAPropagationType;
  __isset = other1165.__isset;
  return *this;
}
void TDDIAbstractFMEAPropagation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFMEAPropagation(";
  out << "UsedFMEAPropagation=" << to_string(UsedFMEAPropagation);
  out << ", " << "UsedFMEAPropagationType=" << to_string(UsedFMEAPropagationType);
  out << ")";
}


TDDIInputEvent::~TDDIInputEvent() throw() {
}


void TDDIInputEvent::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIInputEvent::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIInputEvent::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIInputEvent::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIInputEvent::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIInputEvent::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIInputEvent::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIInputEvent::__set_InputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIInputFailure> val) {
  this->InputFailure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIInputEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIInputEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1166;
            ::apache::thrift::protocol::TType _etype1169;
            xfer += iprot->readListBegin(_etype1169, _size1166);
            this->KeyValueMaps.resize(_size1166);
            uint32_t _i1170;
            for (_i1170 = 0; _i1170 < _size1166; ++_i1170)
            {
              xfer += this->KeyValueMaps[_i1170].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->InputFailure) { 
            this->InputFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIInputFailure>(new TDDIInputFailure);
          }
          xfer += this->InputFailure->read(iprot);
          bool wasSet = false;
          if (this->InputFailure->__isset.Id) { wasSet = true; }
          if (this->InputFailure->__isset.Name) { wasSet = true; }
          if (this->InputFailure->__isset.Description) { wasSet = true; }
          if (this->InputFailure->__isset.IsCitation) { wasSet = true; }
          if (this->InputFailure->__isset.IsAbstract) { wasSet = true; }
          if (this->InputFailure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->InputFailure->__isset.CitedElement) { wasSet = true; }
          if (this->InputFailure->__isset.FailureRate) { wasSet = true; }
          if (this->InputFailure->__isset.FailureMode) { wasSet = true; }
          if (this->InputFailure->__isset.ProbabilityDistribution) { wasSet = true; }
          if (!wasSet) { this->InputFailure.reset(); }
          this->__isset.InputFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIInputEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIInputEvent");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1171;
    for (_iter1171 = this->KeyValueMaps.begin(); _iter1171 != this->KeyValueMaps.end(); ++_iter1171)
    {
      xfer += (*_iter1171).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("InputFailure", ::apache::thrift::protocol::T_STRUCT, 8);
  if (this->InputFailure) {
    xfer += this->InputFailure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIInputFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIInputEvent &a, TDDIInputEvent &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.InputFailure, b.InputFailure);
  swap(a.__isset, b.__isset);
}

TDDIInputEvent::TDDIInputEvent(const TDDIInputEvent& other1172) {
  Id = other1172.Id;
  Name = other1172.Name;
  Description = other1172.Description;
  IsCitation = other1172.IsCitation;
  IsAbstract = other1172.IsAbstract;
  KeyValueMaps = other1172.KeyValueMaps;
  CitedElement = other1172.CitedElement;
  InputFailure = other1172.InputFailure;
  __isset = other1172.__isset;
}
TDDIInputEvent& TDDIInputEvent::operator=(const TDDIInputEvent& other1173) {
  Id = other1173.Id;
  Name = other1173.Name;
  Description = other1173.Description;
  IsCitation = other1173.IsCitation;
  IsAbstract = other1173.IsAbstract;
  KeyValueMaps = other1173.KeyValueMaps;
  CitedElement = other1173.CitedElement;
  InputFailure = other1173.InputFailure;
  __isset = other1173.__isset;
  return *this;
}
void TDDIInputEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIInputEvent(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "InputFailure=" << to_string(InputFailure);
  out << ")";
}


TDDIOutputEvent::~TDDIOutputEvent() throw() {
}


void TDDIOutputEvent::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIOutputEvent::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIOutputEvent::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIOutputEvent::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIOutputEvent::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIOutputEvent::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIOutputEvent::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIOutputEvent::__set_OutputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> val) {
  this->OutputFailure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIOutputEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIOutputEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1174;
            ::apache::thrift::protocol::TType _etype1177;
            xfer += iprot->readListBegin(_etype1177, _size1174);
            this->KeyValueMaps.resize(_size1174);
            uint32_t _i1178;
            for (_i1178 = 0; _i1178 < _size1174; ++_i1178)
            {
              xfer += this->KeyValueMaps[_i1178].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->OutputFailure) { 
            this->OutputFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure>(new TDDIOutputFailure);
          }
          xfer += this->OutputFailure->read(iprot);
          bool wasSet = false;
          if (this->OutputFailure->__isset.Id) { wasSet = true; }
          if (this->OutputFailure->__isset.Name) { wasSet = true; }
          if (this->OutputFailure->__isset.Description) { wasSet = true; }
          if (this->OutputFailure->__isset.IsCitation) { wasSet = true; }
          if (this->OutputFailure->__isset.IsAbstract) { wasSet = true; }
          if (this->OutputFailure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->OutputFailure->__isset.CitedElement) { wasSet = true; }
          if (this->OutputFailure->__isset.FailureRate) { wasSet = true; }
          if (this->OutputFailure->__isset.FailureMode) { wasSet = true; }
          if (this->OutputFailure->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->OutputFailure->__isset.MinimalCutsets) { wasSet = true; }
          if (!wasSet) { this->OutputFailure.reset(); }
          this->__isset.OutputFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIOutputEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIOutputEvent");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1179;
    for (_iter1179 = this->KeyValueMaps.begin(); _iter1179 != this->KeyValueMaps.end(); ++_iter1179)
    {
      xfer += (*_iter1179).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OutputFailure", ::apache::thrift::protocol::T_STRUCT, 8);
  if (this->OutputFailure) {
    xfer += this->OutputFailure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIOutputFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIOutputEvent &a, TDDIOutputEvent &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.OutputFailure, b.OutputFailure);
  swap(a.__isset, b.__isset);
}

TDDIOutputEvent::TDDIOutputEvent(const TDDIOutputEvent& other1180) {
  Id = other1180.Id;
  Name = other1180.Name;
  Description = other1180.Description;
  IsCitation = other1180.IsCitation;
  IsAbstract = other1180.IsAbstract;
  KeyValueMaps = other1180.KeyValueMaps;
  CitedElement = other1180.CitedElement;
  OutputFailure = other1180.OutputFailure;
  __isset = other1180.__isset;
}
TDDIOutputEvent& TDDIOutputEvent::operator=(const TDDIOutputEvent& other1181) {
  Id = other1181.Id;
  Name = other1181.Name;
  Description = other1181.Description;
  IsCitation = other1181.IsCitation;
  IsAbstract = other1181.IsAbstract;
  KeyValueMaps = other1181.KeyValueMaps;
  CitedElement = other1181.CitedElement;
  OutputFailure = other1181.OutputFailure;
  __isset = other1181.__isset;
  return *this;
}
void TDDIOutputEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIOutputEvent(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "OutputFailure=" << to_string(OutputFailure);
  out << ")";
}


TDDIGate::~TDDIGate() throw() {
}


void TDDIGate::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIGate::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIGate::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIGate::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIGate::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIGate::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIGate::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIGate::__set_Type(const TDDIGateType val) {
  this->Type = val;
}

void TDDIGate::__set_MinimalCutsets(const std::vector<TDDIMinimalCutsetRef> & val) {
  this->MinimalCutsets = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIGate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIGate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1182;
            ::apache::thrift::protocol::TType _etype1185;
            xfer += iprot->readListBegin(_etype1185, _size1182);
            this->KeyValueMaps.resize(_size1182);
            uint32_t _i1186;
            for (_i1186 = 0; _i1186 < _size1182; ++_i1186)
            {
              xfer += this->KeyValueMaps[_i1186].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1187;
          xfer += iprot->readI32(ecast1187);
          this->Type = (TDDIGateType)ecast1187;
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MinimalCutsets.clear();
            uint32_t _size1188;
            ::apache::thrift::protocol::TType _etype1191;
            xfer += iprot->readListBegin(_etype1191, _size1188);
            this->MinimalCutsets.resize(_size1188);
            uint32_t _i1192;
            for (_i1192 = 0; _i1192 < _size1188; ++_i1192)
            {
              xfer += this->MinimalCutsets[_i1192].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MinimalCutsets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIGate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIGate");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1193;
    for (_iter1193 = this->KeyValueMaps.begin(); _iter1193 != this->KeyValueMaps.end(); ++_iter1193)
    {
      xfer += (*_iter1193).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MinimalCutsets", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MinimalCutsets.size()));
    std::vector<TDDIMinimalCutsetRef> ::const_iterator _iter1194;
    for (_iter1194 = this->MinimalCutsets.begin(); _iter1194 != this->MinimalCutsets.end(); ++_iter1194)
    {
      xfer += (*_iter1194).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIGate &a, TDDIGate &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Type, b.Type);
  swap(a.MinimalCutsets, b.MinimalCutsets);
  swap(a.__isset, b.__isset);
}

TDDIGate::TDDIGate(const TDDIGate& other1195) {
  Id = other1195.Id;
  Name = other1195.Name;
  Description = other1195.Description;
  IsCitation = other1195.IsCitation;
  IsAbstract = other1195.IsAbstract;
  KeyValueMaps = other1195.KeyValueMaps;
  CitedElement = other1195.CitedElement;
  Type = other1195.Type;
  MinimalCutsets = other1195.MinimalCutsets;
  __isset = other1195.__isset;
}
TDDIGate& TDDIGate::operator=(const TDDIGate& other1196) {
  Id = other1196.Id;
  Name = other1196.Name;
  Description = other1196.Description;
  IsCitation = other1196.IsCitation;
  IsAbstract = other1196.IsAbstract;
  KeyValueMaps = other1196.KeyValueMaps;
  CitedElement = other1196.CitedElement;
  Type = other1196.Type;
  MinimalCutsets = other1196.MinimalCutsets;
  __isset = other1196.__isset;
  return *this;
}
void TDDIGate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIGate(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "MinimalCutsets=" << to_string(MinimalCutsets);
  out << ")";
}


TDDIFTAPropagation::~TDDIFTAPropagation() throw() {
}


void TDDIFTAPropagation::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFTAPropagation::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFTAPropagation::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFTAPropagation::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFTAPropagation::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFTAPropagation::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFTAPropagation::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFTAPropagation::__set_Source(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> val) {
  this->Source = val;
}

void TDDIFTAPropagation::__set_Target(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> val) {
  this->Target = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFTAPropagation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFTAPropagation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1197;
            ::apache::thrift::protocol::TType _etype1200;
            xfer += iprot->readListBegin(_etype1200, _size1197);
            this->KeyValueMaps.resize(_size1197);
            uint32_t _i1201;
            for (_i1201 = 0; _i1201 < _size1197; ++_i1201)
            {
              xfer += this->KeyValueMaps[_i1201].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Source) { 
            this->Source = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact>(new TDDIAbstractFailureAnalysisArtifact);
          }
          xfer += this->Source->read(iprot);
          bool wasSet = false;
          if (this->Source->__isset.UsedFailureAnalysisArtifact) { wasSet = true; }
          if (this->Source->__isset.UsedFailureAnalysisArtifactType) { wasSet = true; }
          if (!wasSet) { this->Source.reset(); }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Target) { 
            this->Target = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact>(new TDDIAbstractFailureAnalysisArtifact);
          }
          xfer += this->Target->read(iprot);
          bool wasSet = false;
          if (this->Target->__isset.UsedFailureAnalysisArtifact) { wasSet = true; }
          if (this->Target->__isset.UsedFailureAnalysisArtifactType) { wasSet = true; }
          if (!wasSet) { this->Target.reset(); }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFTAPropagation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFTAPropagation");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1202;
    for (_iter1202 = this->KeyValueMaps.begin(); _iter1202 != this->KeyValueMaps.end(); ++_iter1202)
    {
      xfer += (*_iter1202).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_STRUCT, 8);
  if (this->Source) {
    xfer += this->Source->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailureAnalysisArtifact"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->Target) {
    xfer += this->Target->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailureAnalysisArtifact"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFTAPropagation &a, TDDIFTAPropagation &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.__isset, b.__isset);
}

TDDIFTAPropagation::TDDIFTAPropagation(const TDDIFTAPropagation& other1203) {
  Id = other1203.Id;
  Name = other1203.Name;
  Description = other1203.Description;
  IsCitation = other1203.IsCitation;
  IsAbstract = other1203.IsAbstract;
  KeyValueMaps = other1203.KeyValueMaps;
  CitedElement = other1203.CitedElement;
  Source = other1203.Source;
  Target = other1203.Target;
  __isset = other1203.__isset;
}
TDDIFTAPropagation& TDDIFTAPropagation::operator=(const TDDIFTAPropagation& other1204) {
  Id = other1204.Id;
  Name = other1204.Name;
  Description = other1204.Description;
  IsCitation = other1204.IsCitation;
  IsAbstract = other1204.IsAbstract;
  KeyValueMaps = other1204.KeyValueMaps;
  CitedElement = other1204.CitedElement;
  Source = other1204.Source;
  Target = other1204.Target;
  __isset = other1204.__isset;
  return *this;
}
void TDDIFTAPropagation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFTAPropagation(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ")";
}


TDDIBasicEvent::~TDDIBasicEvent() throw() {
}


void TDDIBasicEvent::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIBasicEvent::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIBasicEvent::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIBasicEvent::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIBasicEvent::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIBasicEvent::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIBasicEvent::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIBasicEvent::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDIBasicEvent::__set_FailureMode(::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> val) {
  this->FailureMode = val;
}

void TDDIBasicEvent::__set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val) {
  this->ProbabilityDistribution = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIBasicEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIBasicEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1205;
            ::apache::thrift::protocol::TType _etype1208;
            xfer += iprot->readListBegin(_etype1208, _size1205);
            this->KeyValueMaps.resize(_size1205);
            uint32_t _i1209;
            for (_i1209 = 0; _i1209 < _size1205; ++_i1209)
            {
              xfer += this->KeyValueMaps[_i1209].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureMode) { 
            this->FailureMode = ::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode>(new TDDIFailureMode);
          }
          xfer += this->FailureMode->read(iprot);
          bool wasSet = false;
          if (this->FailureMode->__isset.Id) { wasSet = true; }
          if (this->FailureMode->__isset.Name) { wasSet = true; }
          if (this->FailureMode->__isset.Description) { wasSet = true; }
          if (this->FailureMode->__isset.IsCitation) { wasSet = true; }
          if (this->FailureMode->__isset.IsAbstract) { wasSet = true; }
          if (this->FailureMode->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FailureMode->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->FailureMode.reset(); }
          this->__isset.FailureMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ProbabilityDistribution) { 
            this->ProbabilityDistribution = ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution>(new TDDIProbabilityDistribution);
          }
          xfer += this->ProbabilityDistribution->read(iprot);
          bool wasSet = false;
          if (this->ProbabilityDistribution->__isset.Id) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Name) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Description) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsCitation) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsAbstract) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.CitedElement) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Type) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.ProbDistParams) { wasSet = true; }
          if (!wasSet) { this->ProbabilityDistribution.reset(); }
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIBasicEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIBasicEvent");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1210;
    for (_iter1210 = this->KeyValueMaps.begin(); _iter1210 != this->KeyValueMaps.end(); ++_iter1210)
    {
      xfer += (*_iter1210).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureMode", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->FailureMode) {
    xfer += this->FailureMode->write(oprot); 
  } else {oprot->writeStructBegin("TDDIFailureMode"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  if (this->ProbabilityDistribution) {
    xfer += this->ProbabilityDistribution->write(oprot); 
  } else {oprot->writeStructBegin("TDDIProbabilityDistribution"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIBasicEvent &a, TDDIBasicEvent &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureRate, b.FailureRate);
  swap(a.FailureMode, b.FailureMode);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.__isset, b.__isset);
}

TDDIBasicEvent::TDDIBasicEvent(const TDDIBasicEvent& other1211) {
  Id = other1211.Id;
  Name = other1211.Name;
  Description = other1211.Description;
  IsCitation = other1211.IsCitation;
  IsAbstract = other1211.IsAbstract;
  KeyValueMaps = other1211.KeyValueMaps;
  CitedElement = other1211.CitedElement;
  FailureRate = other1211.FailureRate;
  FailureMode = other1211.FailureMode;
  ProbabilityDistribution = other1211.ProbabilityDistribution;
  __isset = other1211.__isset;
}
TDDIBasicEvent& TDDIBasicEvent::operator=(const TDDIBasicEvent& other1212) {
  Id = other1212.Id;
  Name = other1212.Name;
  Description = other1212.Description;
  IsCitation = other1212.IsCitation;
  IsAbstract = other1212.IsAbstract;
  KeyValueMaps = other1212.KeyValueMaps;
  CitedElement = other1212.CitedElement;
  FailureRate = other1212.FailureRate;
  FailureMode = other1212.FailureMode;
  ProbabilityDistribution = other1212.ProbabilityDistribution;
  __isset = other1212.__isset;
  return *this;
}
void TDDIBasicEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIBasicEvent(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "FailureMode=" << to_string(FailureMode);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ")";
}


TDDIFTAArtifactUnion::~TDDIFTAArtifactUnion() throw() {
}


void TDDIFTAArtifactUnion::__set_InputEvent(const TDDIInputEvent& val) {
  this->InputEvent = val;
__isset.InputEvent = true;
}

void TDDIFTAArtifactUnion::__set_OutputEvent(const TDDIOutputEvent& val) {
  this->OutputEvent = val;
__isset.OutputEvent = true;
}

void TDDIFTAArtifactUnion::__set_Gate(const TDDIGate& val) {
  this->Gate = val;
__isset.Gate = true;
}

void TDDIFTAArtifactUnion::__set_FTAPropagation(const TDDIFTAPropagation& val) {
  this->FTAPropagation = val;
__isset.FTAPropagation = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFTAArtifactUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFTAArtifactUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->InputEvent.read(iprot);
          this->__isset.InputEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->OutputEvent.read(iprot);
          this->__isset.OutputEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Gate.read(iprot);
          this->__isset.Gate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FTAPropagation.read(iprot);
          this->__isset.FTAPropagation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFTAArtifactUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFTAArtifactUnion");

  if (this->__isset.InputEvent) {
    xfer += oprot->writeFieldBegin("InputEvent", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->InputEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.OutputEvent) {
    xfer += oprot->writeFieldBegin("OutputEvent", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->OutputEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Gate) {
    xfer += oprot->writeFieldBegin("Gate", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->Gate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FTAPropagation) {
    xfer += oprot->writeFieldBegin("FTAPropagation", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->FTAPropagation.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFTAArtifactUnion &a, TDDIFTAArtifactUnion &b) {
  using ::std::swap;
  swap(a.InputEvent, b.InputEvent);
  swap(a.OutputEvent, b.OutputEvent);
  swap(a.Gate, b.Gate);
  swap(a.FTAPropagation, b.FTAPropagation);
  swap(a.__isset, b.__isset);
}

TDDIFTAArtifactUnion::TDDIFTAArtifactUnion(const TDDIFTAArtifactUnion& other1213) {
  InputEvent = other1213.InputEvent;
  OutputEvent = other1213.OutputEvent;
  Gate = other1213.Gate;
  FTAPropagation = other1213.FTAPropagation;
  __isset = other1213.__isset;
}
TDDIFTAArtifactUnion& TDDIFTAArtifactUnion::operator=(const TDDIFTAArtifactUnion& other1214) {
  InputEvent = other1214.InputEvent;
  OutputEvent = other1214.OutputEvent;
  Gate = other1214.Gate;
  FTAPropagation = other1214.FTAPropagation;
  __isset = other1214.__isset;
  return *this;
}
void TDDIFTAArtifactUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFTAArtifactUnion(";
  out << "InputEvent="; (__isset.InputEvent ? (out << to_string(InputEvent)) : (out << "<null>"));
  out << ", " << "OutputEvent="; (__isset.OutputEvent ? (out << to_string(OutputEvent)) : (out << "<null>"));
  out << ", " << "Gate="; (__isset.Gate ? (out << to_string(Gate)) : (out << "<null>"));
  out << ", " << "FTAPropagation="; (__isset.FTAPropagation ? (out << to_string(FTAPropagation)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFTAArtifact::~TDDIAbstractFTAArtifact() throw() {
}


void TDDIAbstractFTAArtifact::__set_UsedFTAArtifact(const TDDIFTAArtifactUnion& val) {
  this->UsedFTAArtifact = val;
}

void TDDIAbstractFTAArtifact::__set_UsedFTAArtifactType(const TDDIFTAArtifactUnionType val) {
  this->UsedFTAArtifactType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFTAArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFTAArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFTAArtifact.read(iprot);
          this->__isset.UsedFTAArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1215;
          xfer += iprot->readI32(ecast1215);
          this->UsedFTAArtifactType = (TDDIFTAArtifactUnionType)ecast1215;
          this->__isset.UsedFTAArtifactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFTAArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFTAArtifact");

  xfer += oprot->writeFieldBegin("UsedFTAArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFTAArtifact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFTAArtifactType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFTAArtifactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFTAArtifact &a, TDDIAbstractFTAArtifact &b) {
  using ::std::swap;
  swap(a.UsedFTAArtifact, b.UsedFTAArtifact);
  swap(a.UsedFTAArtifactType, b.UsedFTAArtifactType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFTAArtifact::TDDIAbstractFTAArtifact(const TDDIAbstractFTAArtifact& other1216) {
  UsedFTAArtifact = other1216.UsedFTAArtifact;
  UsedFTAArtifactType = other1216.UsedFTAArtifactType;
  __isset = other1216.__isset;
}
TDDIAbstractFTAArtifact& TDDIAbstractFTAArtifact::operator=(const TDDIAbstractFTAArtifact& other1217) {
  UsedFTAArtifact = other1217.UsedFTAArtifact;
  UsedFTAArtifactType = other1217.UsedFTAArtifactType;
  __isset = other1217.__isset;
  return *this;
}
void TDDIAbstractFTAArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFTAArtifact(";
  out << "UsedFTAArtifact=" << to_string(UsedFTAArtifact);
  out << ", " << "UsedFTAArtifactType=" << to_string(UsedFTAArtifactType);
  out << ")";
}


TDDIFTAPackage::~TDDIFTAPackage() throw() {
}


void TDDIFTAPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFTAPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFTAPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFTAPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFTAPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFTAPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFTAPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFTAPackage::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFTAPackage::__set_FTAArtifacts(const std::vector<TDDIAbstractFTAArtifact> & val) {
  this->FTAArtifacts = val;
}

void TDDIFTAPackage::__set_BasicEvents(const std::vector<TDDIBasicEvent> & val) {
  this->BasicEvents = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFTAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFTAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1218;
            ::apache::thrift::protocol::TType _etype1221;
            xfer += iprot->readListBegin(_etype1221, _size1218);
            this->KeyValueMaps.resize(_size1218);
            uint32_t _i1222;
            for (_i1222 = 0; _i1222 < _size1218; ++_i1222)
            {
              xfer += this->KeyValueMaps[_i1222].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1223;
            ::apache::thrift::protocol::TType _etype1226;
            xfer += iprot->readListBegin(_etype1226, _size1223);
            this->FailureAnalysisArtifacts.resize(_size1223);
            uint32_t _i1227;
            for (_i1227 = 0; _i1227 < _size1223; ++_i1227)
            {
              xfer += this->FailureAnalysisArtifacts[_i1227].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FTAArtifacts.clear();
            uint32_t _size1228;
            ::apache::thrift::protocol::TType _etype1231;
            xfer += iprot->readListBegin(_etype1231, _size1228);
            this->FTAArtifacts.resize(_size1228);
            uint32_t _i1232;
            for (_i1232 = 0; _i1232 < _size1228; ++_i1232)
            {
              xfer += this->FTAArtifacts[_i1232].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FTAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->BasicEvents.clear();
            uint32_t _size1233;
            ::apache::thrift::protocol::TType _etype1236;
            xfer += iprot->readListBegin(_etype1236, _size1233);
            this->BasicEvents.resize(_size1233);
            uint32_t _i1237;
            for (_i1237 = 0; _i1237 < _size1233; ++_i1237)
            {
              xfer += this->BasicEvents[_i1237].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.BasicEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFTAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFTAPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1238;
    for (_iter1238 = this->KeyValueMaps.begin(); _iter1238 != this->KeyValueMaps.end(); ++_iter1238)
    {
      xfer += (*_iter1238).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1239;
    for (_iter1239 = this->FailureAnalysisArtifacts.begin(); _iter1239 != this->FailureAnalysisArtifacts.end(); ++_iter1239)
    {
      xfer += (*_iter1239).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FTAArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FTAArtifacts.size()));
    std::vector<TDDIAbstractFTAArtifact> ::const_iterator _iter1240;
    for (_iter1240 = this->FTAArtifacts.begin(); _iter1240 != this->FTAArtifacts.end(); ++_iter1240)
    {
      xfer += (*_iter1240).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BasicEvents", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->BasicEvents.size()));
    std::vector<TDDIBasicEvent> ::const_iterator _iter1241;
    for (_iter1241 = this->BasicEvents.begin(); _iter1241 != this->BasicEvents.end(); ++_iter1241)
    {
      xfer += (*_iter1241).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFTAPackage &a, TDDIFTAPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.FTAArtifacts, b.FTAArtifacts);
  swap(a.BasicEvents, b.BasicEvents);
  swap(a.__isset, b.__isset);
}

TDDIFTAPackage::TDDIFTAPackage(const TDDIFTAPackage& other1242) {
  Id = other1242.Id;
  Name = other1242.Name;
  Description = other1242.Description;
  IsCitation = other1242.IsCitation;
  IsAbstract = other1242.IsAbstract;
  KeyValueMaps = other1242.KeyValueMaps;
  CitedElement = other1242.CitedElement;
  FailureAnalysisArtifacts = other1242.FailureAnalysisArtifacts;
  FTAArtifacts = other1242.FTAArtifacts;
  BasicEvents = other1242.BasicEvents;
  __isset = other1242.__isset;
}
TDDIFTAPackage& TDDIFTAPackage::operator=(const TDDIFTAPackage& other1243) {
  Id = other1243.Id;
  Name = other1243.Name;
  Description = other1243.Description;
  IsCitation = other1243.IsCitation;
  IsAbstract = other1243.IsAbstract;
  KeyValueMaps = other1243.KeyValueMaps;
  CitedElement = other1243.CitedElement;
  FailureAnalysisArtifacts = other1243.FailureAnalysisArtifacts;
  FTAArtifacts = other1243.FTAArtifacts;
  BasicEvents = other1243.BasicEvents;
  __isset = other1243.__isset;
  return *this;
}
void TDDIFTAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFTAPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "FTAArtifacts=" << to_string(FTAArtifacts);
  out << ", " << "BasicEvents=" << to_string(BasicEvents);
  out << ")";
}


TDDIFTAPackageInterface::~TDDIFTAPackageInterface() throw() {
}


void TDDIFTAPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFTAPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFTAPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFTAPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFTAPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFTAPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFTAPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFTAPackageInterface::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFTAPackageInterface::__set_FTAArtifacts(const std::vector<TDDIAbstractFTAArtifact> & val) {
  this->FTAArtifacts = val;
}

void TDDIFTAPackageInterface::__set_BasicEvents(const std::vector<TDDIBasicEvent> & val) {
  this->BasicEvents = val;
}

void TDDIFTAPackageInterface::__set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFTAPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFTAPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1244;
            ::apache::thrift::protocol::TType _etype1247;
            xfer += iprot->readListBegin(_etype1247, _size1244);
            this->KeyValueMaps.resize(_size1244);
            uint32_t _i1248;
            for (_i1248 = 0; _i1248 < _size1244; ++_i1248)
            {
              xfer += this->KeyValueMaps[_i1248].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1249;
            ::apache::thrift::protocol::TType _etype1252;
            xfer += iprot->readListBegin(_etype1252, _size1249);
            this->FailureAnalysisArtifacts.resize(_size1249);
            uint32_t _i1253;
            for (_i1253 = 0; _i1253 < _size1249; ++_i1253)
            {
              xfer += this->FailureAnalysisArtifacts[_i1253].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FTAArtifacts.clear();
            uint32_t _size1254;
            ::apache::thrift::protocol::TType _etype1257;
            xfer += iprot->readListBegin(_etype1257, _size1254);
            this->FTAArtifacts.resize(_size1254);
            uint32_t _i1258;
            for (_i1258 = 0; _i1258 < _size1254; ++_i1258)
            {
              xfer += this->FTAArtifacts[_i1258].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FTAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->BasicEvents.clear();
            uint32_t _size1259;
            ::apache::thrift::protocol::TType _etype1262;
            xfer += iprot->readListBegin(_etype1262, _size1259);
            this->BasicEvents.resize(_size1259);
            uint32_t _i1263;
            for (_i1263 = 0; _i1263 < _size1259; ++_i1263)
            {
              xfer += this->BasicEvents[_i1263].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.BasicEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Implements) { 
            this->Implements = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage>(new TDDIAbstractFTAPackage);
          }
          xfer += this->Implements->read(iprot);
          bool wasSet = false;
          if (this->Implements->__isset.UsedFTAPackage) { wasSet = true; }
          if (this->Implements->__isset.UsedFTAPackageType) { wasSet = true; }
          if (!wasSet) { this->Implements.reset(); }
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFTAPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFTAPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1264;
    for (_iter1264 = this->KeyValueMaps.begin(); _iter1264 != this->KeyValueMaps.end(); ++_iter1264)
    {
      xfer += (*_iter1264).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1265;
    for (_iter1265 = this->FailureAnalysisArtifacts.begin(); _iter1265 != this->FailureAnalysisArtifacts.end(); ++_iter1265)
    {
      xfer += (*_iter1265).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FTAArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FTAArtifacts.size()));
    std::vector<TDDIAbstractFTAArtifact> ::const_iterator _iter1266;
    for (_iter1266 = this->FTAArtifacts.begin(); _iter1266 != this->FTAArtifacts.end(); ++_iter1266)
    {
      xfer += (*_iter1266).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BasicEvents", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->BasicEvents.size()));
    std::vector<TDDIBasicEvent> ::const_iterator _iter1267;
    for (_iter1267 = this->BasicEvents.begin(); _iter1267 != this->BasicEvents.end(); ++_iter1267)
    {
      xfer += (*_iter1267).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 11);
  if (this->Implements) {
    xfer += this->Implements->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFTAPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFTAPackageInterface &a, TDDIFTAPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.FTAArtifacts, b.FTAArtifacts);
  swap(a.BasicEvents, b.BasicEvents);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIFTAPackageInterface::TDDIFTAPackageInterface(const TDDIFTAPackageInterface& other1268) {
  Id = other1268.Id;
  Name = other1268.Name;
  Description = other1268.Description;
  IsCitation = other1268.IsCitation;
  IsAbstract = other1268.IsAbstract;
  KeyValueMaps = other1268.KeyValueMaps;
  CitedElement = other1268.CitedElement;
  FailureAnalysisArtifacts = other1268.FailureAnalysisArtifacts;
  FTAArtifacts = other1268.FTAArtifacts;
  BasicEvents = other1268.BasicEvents;
  Implements = other1268.Implements;
  __isset = other1268.__isset;
}
TDDIFTAPackageInterface& TDDIFTAPackageInterface::operator=(const TDDIFTAPackageInterface& other1269) {
  Id = other1269.Id;
  Name = other1269.Name;
  Description = other1269.Description;
  IsCitation = other1269.IsCitation;
  IsAbstract = other1269.IsAbstract;
  KeyValueMaps = other1269.KeyValueMaps;
  CitedElement = other1269.CitedElement;
  FailureAnalysisArtifacts = other1269.FailureAnalysisArtifacts;
  FTAArtifacts = other1269.FTAArtifacts;
  BasicEvents = other1269.BasicEvents;
  Implements = other1269.Implements;
  __isset = other1269.__isset;
  return *this;
}
void TDDIFTAPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFTAPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "FTAArtifacts=" << to_string(FTAArtifacts);
  out << ", " << "BasicEvents=" << to_string(BasicEvents);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIFTAPackageBinding::~TDDIFTAPackageBinding() throw() {
}


void TDDIFTAPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFTAPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFTAPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFTAPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFTAPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFTAPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFTAPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFTAPackageBinding::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIFTAPackageBinding::__set_FTAArtifacts(const std::vector<TDDIAbstractFTAArtifact> & val) {
  this->FTAArtifacts = val;
}

void TDDIFTAPackageBinding::__set_BasicEvents(const std::vector<TDDIBasicEvent> & val) {
  this->BasicEvents = val;
}

void TDDIFTAPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractFTAPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFTAPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFTAPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1270;
            ::apache::thrift::protocol::TType _etype1273;
            xfer += iprot->readListBegin(_etype1273, _size1270);
            this->KeyValueMaps.resize(_size1270);
            uint32_t _i1274;
            for (_i1274 = 0; _i1274 < _size1270; ++_i1274)
            {
              xfer += this->KeyValueMaps[_i1274].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1275;
            ::apache::thrift::protocol::TType _etype1278;
            xfer += iprot->readListBegin(_etype1278, _size1275);
            this->FailureAnalysisArtifacts.resize(_size1275);
            uint32_t _i1279;
            for (_i1279 = 0; _i1279 < _size1275; ++_i1279)
            {
              xfer += this->FailureAnalysisArtifacts[_i1279].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FTAArtifacts.clear();
            uint32_t _size1280;
            ::apache::thrift::protocol::TType _etype1283;
            xfer += iprot->readListBegin(_etype1283, _size1280);
            this->FTAArtifacts.resize(_size1280);
            uint32_t _i1284;
            for (_i1284 = 0; _i1284 < _size1280; ++_i1284)
            {
              xfer += this->FTAArtifacts[_i1284].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FTAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->BasicEvents.clear();
            uint32_t _size1285;
            ::apache::thrift::protocol::TType _etype1288;
            xfer += iprot->readListBegin(_etype1288, _size1285);
            this->BasicEvents.resize(_size1285);
            uint32_t _i1289;
            for (_i1289 = 0; _i1289 < _size1285; ++_i1289)
            {
              xfer += this->BasicEvents[_i1289].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.BasicEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size1290;
            ::apache::thrift::protocol::TType _etype1293;
            xfer += iprot->readListBegin(_etype1293, _size1290);
            this->ParticipantPackages.resize(_size1290);
            uint32_t _i1294;
            for (_i1294 = 0; _i1294 < _size1290; ++_i1294)
            {
              xfer += this->ParticipantPackages[_i1294].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFTAPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFTAPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1295;
    for (_iter1295 = this->KeyValueMaps.begin(); _iter1295 != this->KeyValueMaps.end(); ++_iter1295)
    {
      xfer += (*_iter1295).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1296;
    for (_iter1296 = this->FailureAnalysisArtifacts.begin(); _iter1296 != this->FailureAnalysisArtifacts.end(); ++_iter1296)
    {
      xfer += (*_iter1296).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FTAArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FTAArtifacts.size()));
    std::vector<TDDIAbstractFTAArtifact> ::const_iterator _iter1297;
    for (_iter1297 = this->FTAArtifacts.begin(); _iter1297 != this->FTAArtifacts.end(); ++_iter1297)
    {
      xfer += (*_iter1297).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BasicEvents", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->BasicEvents.size()));
    std::vector<TDDIBasicEvent> ::const_iterator _iter1298;
    for (_iter1298 = this->BasicEvents.begin(); _iter1298 != this->BasicEvents.end(); ++_iter1298)
    {
      xfer += (*_iter1298).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractFTAPackageRef> ::const_iterator _iter1299;
    for (_iter1299 = this->ParticipantPackages.begin(); _iter1299 != this->ParticipantPackages.end(); ++_iter1299)
    {
      xfer += (*_iter1299).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFTAPackageBinding &a, TDDIFTAPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.FTAArtifacts, b.FTAArtifacts);
  swap(a.BasicEvents, b.BasicEvents);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIFTAPackageBinding::TDDIFTAPackageBinding(const TDDIFTAPackageBinding& other1300) {
  Id = other1300.Id;
  Name = other1300.Name;
  Description = other1300.Description;
  IsCitation = other1300.IsCitation;
  IsAbstract = other1300.IsAbstract;
  KeyValueMaps = other1300.KeyValueMaps;
  CitedElement = other1300.CitedElement;
  FailureAnalysisArtifacts = other1300.FailureAnalysisArtifacts;
  FTAArtifacts = other1300.FTAArtifacts;
  BasicEvents = other1300.BasicEvents;
  ParticipantPackages = other1300.ParticipantPackages;
  __isset = other1300.__isset;
}
TDDIFTAPackageBinding& TDDIFTAPackageBinding::operator=(const TDDIFTAPackageBinding& other1301) {
  Id = other1301.Id;
  Name = other1301.Name;
  Description = other1301.Description;
  IsCitation = other1301.IsCitation;
  IsAbstract = other1301.IsAbstract;
  KeyValueMaps = other1301.KeyValueMaps;
  CitedElement = other1301.CitedElement;
  FailureAnalysisArtifacts = other1301.FailureAnalysisArtifacts;
  FTAArtifacts = other1301.FTAArtifacts;
  BasicEvents = other1301.BasicEvents;
  ParticipantPackages = other1301.ParticipantPackages;
  __isset = other1301.__isset;
  return *this;
}
void TDDIFTAPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFTAPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "FTAArtifacts=" << to_string(FTAArtifacts);
  out << ", " << "BasicEvents=" << to_string(BasicEvents);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIFTAPackageUnion::~TDDIFTAPackageUnion() throw() {
}


void TDDIFTAPackageUnion::__set_FTAPackage(const TDDIFTAPackage& val) {
  this->FTAPackage = val;
__isset.FTAPackage = true;
}

void TDDIFTAPackageUnion::__set_FTAPackageInterface(const TDDIFTAPackageInterface& val) {
  this->FTAPackageInterface = val;
__isset.FTAPackageInterface = true;
}

void TDDIFTAPackageUnion::__set_FTAPackageBinding(const TDDIFTAPackageBinding& val) {
  this->FTAPackageBinding = val;
__isset.FTAPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFTAPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFTAPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FTAPackage.read(iprot);
          this->__isset.FTAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FTAPackageInterface.read(iprot);
          this->__isset.FTAPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FTAPackageBinding.read(iprot);
          this->__isset.FTAPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFTAPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFTAPackageUnion");

  if (this->__isset.FTAPackage) {
    xfer += oprot->writeFieldBegin("FTAPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->FTAPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FTAPackageInterface) {
    xfer += oprot->writeFieldBegin("FTAPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->FTAPackageInterface.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FTAPackageBinding) {
    xfer += oprot->writeFieldBegin("FTAPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->FTAPackageBinding.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFTAPackageUnion &a, TDDIFTAPackageUnion &b) {
  using ::std::swap;
  swap(a.FTAPackage, b.FTAPackage);
  swap(a.FTAPackageInterface, b.FTAPackageInterface);
  swap(a.FTAPackageBinding, b.FTAPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIFTAPackageUnion::TDDIFTAPackageUnion(const TDDIFTAPackageUnion& other1302) {
  FTAPackage = other1302.FTAPackage;
  FTAPackageInterface = other1302.FTAPackageInterface;
  FTAPackageBinding = other1302.FTAPackageBinding;
  __isset = other1302.__isset;
}
TDDIFTAPackageUnion& TDDIFTAPackageUnion::operator=(const TDDIFTAPackageUnion& other1303) {
  FTAPackage = other1303.FTAPackage;
  FTAPackageInterface = other1303.FTAPackageInterface;
  FTAPackageBinding = other1303.FTAPackageBinding;
  __isset = other1303.__isset;
  return *this;
}
void TDDIFTAPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFTAPackageUnion(";
  out << "FTAPackage="; (__isset.FTAPackage ? (out << to_string(FTAPackage)) : (out << "<null>"));
  out << ", " << "FTAPackageInterface="; (__isset.FTAPackageInterface ? (out << to_string(FTAPackageInterface)) : (out << "<null>"));
  out << ", " << "FTAPackageBinding="; (__isset.FTAPackageBinding ? (out << to_string(FTAPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFTAPackage::~TDDIAbstractFTAPackage() throw() {
}


void TDDIAbstractFTAPackage::__set_UsedFTAPackage(const TDDIFTAPackageUnion& val) {
  this->UsedFTAPackage = val;
}

void TDDIAbstractFTAPackage::__set_UsedFTAPackageType(const TDDIFTAPackageUnionType val) {
  this->UsedFTAPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFTAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFTAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFTAPackage.read(iprot);
          this->__isset.UsedFTAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1304;
          xfer += iprot->readI32(ecast1304);
          this->UsedFTAPackageType = (TDDIFTAPackageUnionType)ecast1304;
          this->__isset.UsedFTAPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFTAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFTAPackage");

  xfer += oprot->writeFieldBegin("UsedFTAPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFTAPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFTAPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFTAPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFTAPackage &a, TDDIAbstractFTAPackage &b) {
  using ::std::swap;
  swap(a.UsedFTAPackage, b.UsedFTAPackage);
  swap(a.UsedFTAPackageType, b.UsedFTAPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFTAPackage::TDDIAbstractFTAPackage(const TDDIAbstractFTAPackage& other1305) {
  UsedFTAPackage = other1305.UsedFTAPackage;
  UsedFTAPackageType = other1305.UsedFTAPackageType;
  __isset = other1305.__isset;
}
TDDIAbstractFTAPackage& TDDIAbstractFTAPackage::operator=(const TDDIAbstractFTAPackage& other1306) {
  UsedFTAPackage = other1306.UsedFTAPackage;
  UsedFTAPackageType = other1306.UsedFTAPackageType;
  __isset = other1306.__isset;
  return *this;
}
void TDDIAbstractFTAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFTAPackage(";
  out << "UsedFTAPackage=" << to_string(UsedFTAPackage);
  out << ", " << "UsedFTAPackageType=" << to_string(UsedFTAPackageType);
  out << ")";
}


TDDIHazardType::~TDDIHazardType() throw() {
}


void TDDIHazardType::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHazardType::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHazardType::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHazardType::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIHazardType::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIHazardType::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIHazardType::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazardType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazardType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1307;
            ::apache::thrift::protocol::TType _etype1310;
            xfer += iprot->readListBegin(_etype1310, _size1307);
            this->KeyValueMaps.resize(_size1307);
            uint32_t _i1311;
            for (_i1311 = 0; _i1311 < _size1307; ++_i1311)
            {
              xfer += this->KeyValueMaps[_i1311].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazardType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazardType");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1312;
    for (_iter1312 = this->KeyValueMaps.begin(); _iter1312 != this->KeyValueMaps.end(); ++_iter1312)
    {
      xfer += (*_iter1312).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazardType &a, TDDIHazardType &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.__isset, b.__isset);
}

TDDIHazardType::TDDIHazardType(const TDDIHazardType& other1313) {
  Id = other1313.Id;
  Name = other1313.Name;
  Description = other1313.Description;
  IsCitation = other1313.IsCitation;
  IsAbstract = other1313.IsAbstract;
  KeyValueMaps = other1313.KeyValueMaps;
  CitedElement = other1313.CitedElement;
  __isset = other1313.__isset;
}
TDDIHazardType& TDDIHazardType::operator=(const TDDIHazardType& other1314) {
  Id = other1314.Id;
  Name = other1314.Name;
  Description = other1314.Description;
  IsCitation = other1314.IsCitation;
  IsAbstract = other1314.IsAbstract;
  KeyValueMaps = other1314.KeyValueMaps;
  CitedElement = other1314.CitedElement;
  __isset = other1314.__isset;
  return *this;
}
void TDDIHazardType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazardType(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ")";
}


TDDIHazardTypeSystem::~TDDIHazardTypeSystem() throw() {
}


void TDDIHazardTypeSystem::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHazardTypeSystem::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHazardTypeSystem::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHazardTypeSystem::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIHazardTypeSystem::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIHazardTypeSystem::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIHazardTypeSystem::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIHazardTypeSystem::__set_HazardTypes(const std::vector<TDDIHazardType> & val) {
  this->HazardTypes = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazardTypeSystem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazardTypeSystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1315;
            ::apache::thrift::protocol::TType _etype1318;
            xfer += iprot->readListBegin(_etype1318, _size1315);
            this->KeyValueMaps.resize(_size1315);
            uint32_t _i1319;
            for (_i1319 = 0; _i1319 < _size1315; ++_i1319)
            {
              xfer += this->KeyValueMaps[_i1319].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->HazardTypes.clear();
            uint32_t _size1320;
            ::apache::thrift::protocol::TType _etype1323;
            xfer += iprot->readListBegin(_etype1323, _size1320);
            this->HazardTypes.resize(_size1320);
            uint32_t _i1324;
            for (_i1324 = 0; _i1324 < _size1320; ++_i1324)
            {
              xfer += this->HazardTypes[_i1324].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.HazardTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazardTypeSystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazardTypeSystem");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1325;
    for (_iter1325 = this->KeyValueMaps.begin(); _iter1325 != this->KeyValueMaps.end(); ++_iter1325)
    {
      xfer += (*_iter1325).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HazardTypes", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->HazardTypes.size()));
    std::vector<TDDIHazardType> ::const_iterator _iter1326;
    for (_iter1326 = this->HazardTypes.begin(); _iter1326 != this->HazardTypes.end(); ++_iter1326)
    {
      xfer += (*_iter1326).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazardTypeSystem &a, TDDIHazardTypeSystem &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.HazardTypes, b.HazardTypes);
  swap(a.__isset, b.__isset);
}

TDDIHazardTypeSystem::TDDIHazardTypeSystem(const TDDIHazardTypeSystem& other1327) {
  Id = other1327.Id;
  Name = other1327.Name;
  Description = other1327.Description;
  IsCitation = other1327.IsCitation;
  IsAbstract = other1327.IsAbstract;
  KeyValueMaps = other1327.KeyValueMaps;
  CitedElement = other1327.CitedElement;
  HazardTypes = other1327.HazardTypes;
  __isset = other1327.__isset;
}
TDDIHazardTypeSystem& TDDIHazardTypeSystem::operator=(const TDDIHazardTypeSystem& other1328) {
  Id = other1328.Id;
  Name = other1328.Name;
  Description = other1328.Description;
  IsCitation = other1328.IsCitation;
  IsAbstract = other1328.IsAbstract;
  KeyValueMaps = other1328.KeyValueMaps;
  CitedElement = other1328.CitedElement;
  HazardTypes = other1328.HazardTypes;
  __isset = other1328.__isset;
  return *this;
}
void TDDIHazardTypeSystem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazardTypeSystem(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "HazardTypes=" << to_string(HazardTypes);
  out << ")";
}


TDDIRiskParameter::~TDDIRiskParameter() throw() {
}


void TDDIRiskParameter::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIRiskParameter::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIRiskParameter::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIRiskParameter::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIRiskParameter::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIRiskParameter::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIRiskParameter::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIRiskParameter::__set_Argument(const std::string& val) {
  this->Argument = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIRiskParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRiskParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1329;
            ::apache::thrift::protocol::TType _etype1332;
            xfer += iprot->readListBegin(_etype1332, _size1329);
            this->KeyValueMaps.resize(_size1329);
            uint32_t _i1333;
            for (_i1333 = 0; _i1333 < _size1329; ++_i1333)
            {
              xfer += this->KeyValueMaps[_i1333].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Argument);
          this->__isset.Argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRiskParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRiskParameter");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1334;
    for (_iter1334 = this->KeyValueMaps.begin(); _iter1334 != this->KeyValueMaps.end(); ++_iter1334)
    {
      xfer += (*_iter1334).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Argument", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->Argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRiskParameter &a, TDDIRiskParameter &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Argument, b.Argument);
  swap(a.__isset, b.__isset);
}

TDDIRiskParameter::TDDIRiskParameter(const TDDIRiskParameter& other1335) {
  Id = other1335.Id;
  Name = other1335.Name;
  Description = other1335.Description;
  IsCitation = other1335.IsCitation;
  IsAbstract = other1335.IsAbstract;
  KeyValueMaps = other1335.KeyValueMaps;
  CitedElement = other1335.CitedElement;
  Argument = other1335.Argument;
  __isset = other1335.__isset;
}
TDDIRiskParameter& TDDIRiskParameter::operator=(const TDDIRiskParameter& other1336) {
  Id = other1336.Id;
  Name = other1336.Name;
  Description = other1336.Description;
  IsCitation = other1336.IsCitation;
  IsAbstract = other1336.IsAbstract;
  KeyValueMaps = other1336.KeyValueMaps;
  CitedElement = other1336.CitedElement;
  Argument = other1336.Argument;
  __isset = other1336.__isset;
  return *this;
}
void TDDIRiskParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRiskParameter(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Argument=" << to_string(Argument);
  out << ")";
}


TDDISituation::~TDDISituation() throw() {
}


void TDDISituation::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISituation::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISituation::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISituation::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDISituation::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDISituation::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDISituation::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDISituation::__set_Argument(const std::string& val) {
  this->Argument = val;
}

void TDDISituation::__set_Likelihood(const std::string& val) {
  this->Likelihood = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISituation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISituation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1337;
            ::apache::thrift::protocol::TType _etype1340;
            xfer += iprot->readListBegin(_etype1340, _size1337);
            this->KeyValueMaps.resize(_size1337);
            uint32_t _i1341;
            for (_i1341 = 0; _i1341 < _size1337; ++_i1341)
            {
              xfer += this->KeyValueMaps[_i1341].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Argument);
          this->__isset.Argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Likelihood);
          this->__isset.Likelihood = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISituation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISituation");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1342;
    for (_iter1342 = this->KeyValueMaps.begin(); _iter1342 != this->KeyValueMaps.end(); ++_iter1342)
    {
      xfer += (*_iter1342).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Argument", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->Argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Likelihood", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->Likelihood);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISituation &a, TDDISituation &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Argument, b.Argument);
  swap(a.Likelihood, b.Likelihood);
  swap(a.__isset, b.__isset);
}

TDDISituation::TDDISituation(const TDDISituation& other1343) {
  Id = other1343.Id;
  Name = other1343.Name;
  Description = other1343.Description;
  IsCitation = other1343.IsCitation;
  IsAbstract = other1343.IsAbstract;
  KeyValueMaps = other1343.KeyValueMaps;
  CitedElement = other1343.CitedElement;
  Argument = other1343.Argument;
  Likelihood = other1343.Likelihood;
  __isset = other1343.__isset;
}
TDDISituation& TDDISituation::operator=(const TDDISituation& other1344) {
  Id = other1344.Id;
  Name = other1344.Name;
  Description = other1344.Description;
  IsCitation = other1344.IsCitation;
  IsAbstract = other1344.IsAbstract;
  KeyValueMaps = other1344.KeyValueMaps;
  CitedElement = other1344.CitedElement;
  Argument = other1344.Argument;
  Likelihood = other1344.Likelihood;
  __isset = other1344.__isset;
  return *this;
}
void TDDISituation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISituation(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Argument=" << to_string(Argument);
  out << ", " << "Likelihood=" << to_string(Likelihood);
  out << ")";
}


TDDIAccident::~TDDIAccident() throw() {
}


void TDDIAccident::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIAccident::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIAccident::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIAccident::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAccident::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAccident::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIAccident::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIAccident::__set_Argument(const std::string& val) {
  this->Argument = val;
}

void TDDIAccident::__set_Severity(const std::string& val) {
  this->Severity = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAccident& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAccident::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1345;
            ::apache::thrift::protocol::TType _etype1348;
            xfer += iprot->readListBegin(_etype1348, _size1345);
            this->KeyValueMaps.resize(_size1345);
            uint32_t _i1349;
            for (_i1349 = 0; _i1349 < _size1345; ++_i1349)
            {
              xfer += this->KeyValueMaps[_i1349].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Argument);
          this->__isset.Argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Severity);
          this->__isset.Severity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAccident::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAccident");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1350;
    for (_iter1350 = this->KeyValueMaps.begin(); _iter1350 != this->KeyValueMaps.end(); ++_iter1350)
    {
      xfer += (*_iter1350).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Argument", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->Argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Severity", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->Severity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAccident &a, TDDIAccident &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Argument, b.Argument);
  swap(a.Severity, b.Severity);
  swap(a.__isset, b.__isset);
}

TDDIAccident::TDDIAccident(const TDDIAccident& other1351) {
  Id = other1351.Id;
  Name = other1351.Name;
  Description = other1351.Description;
  IsCitation = other1351.IsCitation;
  IsAbstract = other1351.IsAbstract;
  KeyValueMaps = other1351.KeyValueMaps;
  CitedElement = other1351.CitedElement;
  Argument = other1351.Argument;
  Severity = other1351.Severity;
  __isset = other1351.__isset;
}
TDDIAccident& TDDIAccident::operator=(const TDDIAccident& other1352) {
  Id = other1352.Id;
  Name = other1352.Name;
  Description = other1352.Description;
  IsCitation = other1352.IsCitation;
  IsAbstract = other1352.IsAbstract;
  KeyValueMaps = other1352.KeyValueMaps;
  CitedElement = other1352.CitedElement;
  Argument = other1352.Argument;
  Severity = other1352.Severity;
  __isset = other1352.__isset;
  return *this;
}
void TDDIAccident::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAccident(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Argument=" << to_string(Argument);
  out << ", " << "Severity=" << to_string(Severity);
  out << ")";
}


TDDIOperationMeasure::~TDDIOperationMeasure() throw() {
}


void TDDIOperationMeasure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIOperationMeasure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIOperationMeasure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIOperationMeasure::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIOperationMeasure::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIOperationMeasure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIOperationMeasure::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIOperationMeasure::__set_Argument(const std::string& val) {
  this->Argument = val;
}

void TDDIOperationMeasure::__set_Controlability(const std::string& val) {
  this->Controlability = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIOperationMeasure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIOperationMeasure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1353;
            ::apache::thrift::protocol::TType _etype1356;
            xfer += iprot->readListBegin(_etype1356, _size1353);
            this->KeyValueMaps.resize(_size1353);
            uint32_t _i1357;
            for (_i1357 = 0; _i1357 < _size1353; ++_i1357)
            {
              xfer += this->KeyValueMaps[_i1357].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Argument);
          this->__isset.Argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Controlability);
          this->__isset.Controlability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIOperationMeasure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIOperationMeasure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1358;
    for (_iter1358 = this->KeyValueMaps.begin(); _iter1358 != this->KeyValueMaps.end(); ++_iter1358)
    {
      xfer += (*_iter1358).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Argument", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->Argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Controlability", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->Controlability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIOperationMeasure &a, TDDIOperationMeasure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Argument, b.Argument);
  swap(a.Controlability, b.Controlability);
  swap(a.__isset, b.__isset);
}

TDDIOperationMeasure::TDDIOperationMeasure(const TDDIOperationMeasure& other1359) {
  Id = other1359.Id;
  Name = other1359.Name;
  Description = other1359.Description;
  IsCitation = other1359.IsCitation;
  IsAbstract = other1359.IsAbstract;
  KeyValueMaps = other1359.KeyValueMaps;
  CitedElement = other1359.CitedElement;
  Argument = other1359.Argument;
  Controlability = other1359.Controlability;
  __isset = other1359.__isset;
}
TDDIOperationMeasure& TDDIOperationMeasure::operator=(const TDDIOperationMeasure& other1360) {
  Id = other1360.Id;
  Name = other1360.Name;
  Description = other1360.Description;
  IsCitation = other1360.IsCitation;
  IsAbstract = other1360.IsAbstract;
  KeyValueMaps = other1360.KeyValueMaps;
  CitedElement = other1360.CitedElement;
  Argument = other1360.Argument;
  Controlability = other1360.Controlability;
  __isset = other1360.__isset;
  return *this;
}
void TDDIOperationMeasure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIOperationMeasure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Argument=" << to_string(Argument);
  out << ", " << "Controlability=" << to_string(Controlability);
  out << ")";
}


TDDIHazard::~TDDIHazard() throw() {
}


void TDDIHazard::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHazard::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHazard::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHazard::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIHazard::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIHazard::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIHazard::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIHazard::__set_Condition(const std::string& val) {
  this->Condition = val;
}

void TDDIHazard::__set_HazardType(const TDDIHazardType& val) {
  this->HazardType = val;
}

void TDDIHazard::__set_Measures(const std::vector<TDDIAbstractMeasureRef> & val) {
  this->Measures = val;
}

void TDDIHazard::__set_OutputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> val) {
  this->OutputFailure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1361;
            ::apache::thrift::protocol::TType _etype1364;
            xfer += iprot->readListBegin(_etype1364, _size1361);
            this->KeyValueMaps.resize(_size1361);
            uint32_t _i1365;
            for (_i1365 = 0; _i1365 < _size1361; ++_i1365)
            {
              xfer += this->KeyValueMaps[_i1365].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Condition);
          this->__isset.Condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->HazardType.read(iprot);
          this->__isset.HazardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Measures.clear();
            uint32_t _size1366;
            ::apache::thrift::protocol::TType _etype1369;
            xfer += iprot->readListBegin(_etype1369, _size1366);
            this->Measures.resize(_size1366);
            uint32_t _i1370;
            for (_i1370 = 0; _i1370 < _size1366; ++_i1370)
            {
              xfer += this->Measures[_i1370].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Measures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->OutputFailure) { 
            this->OutputFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure>(new TDDIOutputFailure);
          }
          xfer += this->OutputFailure->read(iprot);
          bool wasSet = false;
          if (this->OutputFailure->__isset.Id) { wasSet = true; }
          if (this->OutputFailure->__isset.Name) { wasSet = true; }
          if (this->OutputFailure->__isset.Description) { wasSet = true; }
          if (this->OutputFailure->__isset.IsCitation) { wasSet = true; }
          if (this->OutputFailure->__isset.IsAbstract) { wasSet = true; }
          if (this->OutputFailure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->OutputFailure->__isset.CitedElement) { wasSet = true; }
          if (this->OutputFailure->__isset.FailureRate) { wasSet = true; }
          if (this->OutputFailure->__isset.FailureMode) { wasSet = true; }
          if (this->OutputFailure->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->OutputFailure->__isset.MinimalCutsets) { wasSet = true; }
          if (!wasSet) { this->OutputFailure.reset(); }
          this->__isset.OutputFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazard");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1371;
    for (_iter1371 = this->KeyValueMaps.begin(); _iter1371 != this->KeyValueMaps.end(); ++_iter1371)
    {
      xfer += (*_iter1371).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Condition", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->Condition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HazardType", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->HazardType.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Measures", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Measures.size()));
    std::vector<TDDIAbstractMeasureRef> ::const_iterator _iter1372;
    for (_iter1372 = this->Measures.begin(); _iter1372 != this->Measures.end(); ++_iter1372)
    {
      xfer += (*_iter1372).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OutputFailure", ::apache::thrift::protocol::T_STRUCT, 11);
  if (this->OutputFailure) {
    xfer += this->OutputFailure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIOutputFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazard &a, TDDIHazard &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Condition, b.Condition);
  swap(a.HazardType, b.HazardType);
  swap(a.Measures, b.Measures);
  swap(a.OutputFailure, b.OutputFailure);
  swap(a.__isset, b.__isset);
}

TDDIHazard::TDDIHazard(const TDDIHazard& other1373) {
  Id = other1373.Id;
  Name = other1373.Name;
  Description = other1373.Description;
  IsCitation = other1373.IsCitation;
  IsAbstract = other1373.IsAbstract;
  KeyValueMaps = other1373.KeyValueMaps;
  CitedElement = other1373.CitedElement;
  Condition = other1373.Condition;
  HazardType = other1373.HazardType;
  Measures = other1373.Measures;
  OutputFailure = other1373.OutputFailure;
  __isset = other1373.__isset;
}
TDDIHazard& TDDIHazard::operator=(const TDDIHazard& other1374) {
  Id = other1374.Id;
  Name = other1374.Name;
  Description = other1374.Description;
  IsCitation = other1374.IsCitation;
  IsAbstract = other1374.IsAbstract;
  KeyValueMaps = other1374.KeyValueMaps;
  CitedElement = other1374.CitedElement;
  Condition = other1374.Condition;
  HazardType = other1374.HazardType;
  Measures = other1374.Measures;
  OutputFailure = other1374.OutputFailure;
  __isset = other1374.__isset;
  return *this;
}
void TDDIHazard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazard(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Condition=" << to_string(Condition);
  out << ", " << "HazardType=" << to_string(HazardType);
  out << ", " << "Measures=" << to_string(Measures);
  out << ", " << "OutputFailure=" << to_string(OutputFailure);
  out << ")";
}


TDDIRiskAssessment::~TDDIRiskAssessment() throw() {
}


void TDDIRiskAssessment::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIRiskAssessment::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIRiskAssessment::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIRiskAssessment::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIRiskAssessment::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIRiskAssessment::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIRiskAssessment::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIRiskAssessment::__set_RelatedStandard(const std::string& val) {
  this->RelatedStandard = val;
}

void TDDIRiskAssessment::__set_RiskParamaters(const std::vector<TDDIAbstractRiskParameterRef> & val) {
  this->RiskParamaters = val;
}

void TDDIRiskAssessment::__set_Hazard(const TDDIHazard& val) {
  this->Hazard = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIRiskAssessment& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRiskAssessment::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1375;
            ::apache::thrift::protocol::TType _etype1378;
            xfer += iprot->readListBegin(_etype1378, _size1375);
            this->KeyValueMaps.resize(_size1375);
            uint32_t _i1379;
            for (_i1379 = 0; _i1379 < _size1375; ++_i1379)
            {
              xfer += this->KeyValueMaps[_i1379].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->RelatedStandard);
          this->__isset.RelatedStandard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RiskParamaters.clear();
            uint32_t _size1380;
            ::apache::thrift::protocol::TType _etype1383;
            xfer += iprot->readListBegin(_etype1383, _size1380);
            this->RiskParamaters.resize(_size1380);
            uint32_t _i1384;
            for (_i1384 = 0; _i1384 < _size1380; ++_i1384)
            {
              xfer += this->RiskParamaters[_i1384].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RiskParamaters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Hazard.read(iprot);
          this->__isset.Hazard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRiskAssessment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRiskAssessment");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1385;
    for (_iter1385 = this->KeyValueMaps.begin(); _iter1385 != this->KeyValueMaps.end(); ++_iter1385)
    {
      xfer += (*_iter1385).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RelatedStandard", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->RelatedStandard);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskParamaters", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RiskParamaters.size()));
    std::vector<TDDIAbstractRiskParameterRef> ::const_iterator _iter1386;
    for (_iter1386 = this->RiskParamaters.begin(); _iter1386 != this->RiskParamaters.end(); ++_iter1386)
    {
      xfer += (*_iter1386).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Hazard", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->Hazard.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRiskAssessment &a, TDDIRiskAssessment &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.RelatedStandard, b.RelatedStandard);
  swap(a.RiskParamaters, b.RiskParamaters);
  swap(a.Hazard, b.Hazard);
  swap(a.__isset, b.__isset);
}

TDDIRiskAssessment::TDDIRiskAssessment(const TDDIRiskAssessment& other1387) {
  Id = other1387.Id;
  Name = other1387.Name;
  Description = other1387.Description;
  IsCitation = other1387.IsCitation;
  IsAbstract = other1387.IsAbstract;
  KeyValueMaps = other1387.KeyValueMaps;
  CitedElement = other1387.CitedElement;
  RelatedStandard = other1387.RelatedStandard;
  RiskParamaters = other1387.RiskParamaters;
  Hazard = other1387.Hazard;
  __isset = other1387.__isset;
}
TDDIRiskAssessment& TDDIRiskAssessment::operator=(const TDDIRiskAssessment& other1388) {
  Id = other1388.Id;
  Name = other1388.Name;
  Description = other1388.Description;
  IsCitation = other1388.IsCitation;
  IsAbstract = other1388.IsAbstract;
  KeyValueMaps = other1388.KeyValueMaps;
  CitedElement = other1388.CitedElement;
  RelatedStandard = other1388.RelatedStandard;
  RiskParamaters = other1388.RiskParamaters;
  Hazard = other1388.Hazard;
  __isset = other1388.__isset;
  return *this;
}
void TDDIRiskAssessment::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRiskAssessment(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "RelatedStandard=" << to_string(RelatedStandard);
  out << ", " << "RiskParamaters=" << to_string(RiskParamaters);
  out << ", " << "Hazard=" << to_string(Hazard);
  out << ")";
}


TDDIMalFunction::~TDDIMalFunction() throw() {
}


void TDDIMalFunction::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMalFunction::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMalFunction::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMalFunction::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIMalFunction::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIMalFunction::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIMalFunction::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIMalFunction::__set_Hazards(const std::vector<TDDIHazard> & val) {
  this->Hazards = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMalFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMalFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1389;
            ::apache::thrift::protocol::TType _etype1392;
            xfer += iprot->readListBegin(_etype1392, _size1389);
            this->KeyValueMaps.resize(_size1389);
            uint32_t _i1393;
            for (_i1393 = 0; _i1393 < _size1389; ++_i1393)
            {
              xfer += this->KeyValueMaps[_i1393].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Hazards.clear();
            uint32_t _size1394;
            ::apache::thrift::protocol::TType _etype1397;
            xfer += iprot->readListBegin(_etype1397, _size1394);
            this->Hazards.resize(_size1394);
            uint32_t _i1398;
            for (_i1398 = 0; _i1398 < _size1394; ++_i1398)
            {
              xfer += this->Hazards[_i1398].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Hazards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMalFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMalFunction");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1399;
    for (_iter1399 = this->KeyValueMaps.begin(); _iter1399 != this->KeyValueMaps.end(); ++_iter1399)
    {
      xfer += (*_iter1399).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Hazards", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Hazards.size()));
    std::vector<TDDIHazard> ::const_iterator _iter1400;
    for (_iter1400 = this->Hazards.begin(); _iter1400 != this->Hazards.end(); ++_iter1400)
    {
      xfer += (*_iter1400).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMalFunction &a, TDDIMalFunction &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Hazards, b.Hazards);
  swap(a.__isset, b.__isset);
}

TDDIMalFunction::TDDIMalFunction(const TDDIMalFunction& other1401) {
  Id = other1401.Id;
  Name = other1401.Name;
  Description = other1401.Description;
  IsCitation = other1401.IsCitation;
  IsAbstract = other1401.IsAbstract;
  KeyValueMaps = other1401.KeyValueMaps;
  CitedElement = other1401.CitedElement;
  Hazards = other1401.Hazards;
  __isset = other1401.__isset;
}
TDDIMalFunction& TDDIMalFunction::operator=(const TDDIMalFunction& other1402) {
  Id = other1402.Id;
  Name = other1402.Name;
  Description = other1402.Description;
  IsCitation = other1402.IsCitation;
  IsAbstract = other1402.IsAbstract;
  KeyValueMaps = other1402.KeyValueMaps;
  CitedElement = other1402.CitedElement;
  Hazards = other1402.Hazards;
  __isset = other1402.__isset;
  return *this;
}
void TDDIMalFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMalFunction(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Hazards=" << to_string(Hazards);
  out << ")";
}


TDDIRiskParameterUnion::~TDDIRiskParameterUnion() throw() {
}


void TDDIRiskParameterUnion::__set_RiskParameter(const TDDIRiskParameter& val) {
  this->RiskParameter = val;
__isset.RiskParameter = true;
}

void TDDIRiskParameterUnion::__set_Situation(const TDDISituation& val) {
  this->Situation = val;
__isset.Situation = true;
}

void TDDIRiskParameterUnion::__set_Accident(const TDDIAccident& val) {
  this->Accident = val;
__isset.Accident = true;
}

void TDDIRiskParameterUnion::__set_OperationMeasure(const TDDIOperationMeasure& val) {
  this->OperationMeasure = val;
__isset.OperationMeasure = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIRiskParameterUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRiskParameterUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->RiskParameter.read(iprot);
          this->__isset.RiskParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Situation.read(iprot);
          this->__isset.Situation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Accident.read(iprot);
          this->__isset.Accident = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->OperationMeasure.read(iprot);
          this->__isset.OperationMeasure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRiskParameterUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRiskParameterUnion");

  if (this->__isset.RiskParameter) {
    xfer += oprot->writeFieldBegin("RiskParameter", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->RiskParameter.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Situation) {
    xfer += oprot->writeFieldBegin("Situation", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->Situation.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Accident) {
    xfer += oprot->writeFieldBegin("Accident", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->Accident.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.OperationMeasure) {
    xfer += oprot->writeFieldBegin("OperationMeasure", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->OperationMeasure.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRiskParameterUnion &a, TDDIRiskParameterUnion &b) {
  using ::std::swap;
  swap(a.RiskParameter, b.RiskParameter);
  swap(a.Situation, b.Situation);
  swap(a.Accident, b.Accident);
  swap(a.OperationMeasure, b.OperationMeasure);
  swap(a.__isset, b.__isset);
}

TDDIRiskParameterUnion::TDDIRiskParameterUnion(const TDDIRiskParameterUnion& other1403) {
  RiskParameter = other1403.RiskParameter;
  Situation = other1403.Situation;
  Accident = other1403.Accident;
  OperationMeasure = other1403.OperationMeasure;
  __isset = other1403.__isset;
}
TDDIRiskParameterUnion& TDDIRiskParameterUnion::operator=(const TDDIRiskParameterUnion& other1404) {
  RiskParameter = other1404.RiskParameter;
  Situation = other1404.Situation;
  Accident = other1404.Accident;
  OperationMeasure = other1404.OperationMeasure;
  __isset = other1404.__isset;
  return *this;
}
void TDDIRiskParameterUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRiskParameterUnion(";
  out << "RiskParameter="; (__isset.RiskParameter ? (out << to_string(RiskParameter)) : (out << "<null>"));
  out << ", " << "Situation="; (__isset.Situation ? (out << to_string(Situation)) : (out << "<null>"));
  out << ", " << "Accident="; (__isset.Accident ? (out << to_string(Accident)) : (out << "<null>"));
  out << ", " << "OperationMeasure="; (__isset.OperationMeasure ? (out << to_string(OperationMeasure)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractRiskParameter::~TDDIAbstractRiskParameter() throw() {
}


void TDDIAbstractRiskParameter::__set_UsedRiskParameter(const TDDIRiskParameterUnion& val) {
  this->UsedRiskParameter = val;
}

void TDDIAbstractRiskParameter::__set_UsedRiskParameterType(const TDDIRiskParameterUnionType val) {
  this->UsedRiskParameterType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRiskParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRiskParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedRiskParameter.read(iprot);
          this->__isset.UsedRiskParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1405;
          xfer += iprot->readI32(ecast1405);
          this->UsedRiskParameterType = (TDDIRiskParameterUnionType)ecast1405;
          this->__isset.UsedRiskParameterType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRiskParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRiskParameter");

  xfer += oprot->writeFieldBegin("UsedRiskParameter", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedRiskParameter.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedRiskParameterType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedRiskParameterType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRiskParameter &a, TDDIAbstractRiskParameter &b) {
  using ::std::swap;
  swap(a.UsedRiskParameter, b.UsedRiskParameter);
  swap(a.UsedRiskParameterType, b.UsedRiskParameterType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRiskParameter::TDDIAbstractRiskParameter(const TDDIAbstractRiskParameter& other1406) {
  UsedRiskParameter = other1406.UsedRiskParameter;
  UsedRiskParameterType = other1406.UsedRiskParameterType;
  __isset = other1406.__isset;
}
TDDIAbstractRiskParameter& TDDIAbstractRiskParameter::operator=(const TDDIAbstractRiskParameter& other1407) {
  UsedRiskParameter = other1407.UsedRiskParameter;
  UsedRiskParameterType = other1407.UsedRiskParameterType;
  __isset = other1407.__isset;
  return *this;
}
void TDDIAbstractRiskParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRiskParameter(";
  out << "UsedRiskParameter=" << to_string(UsedRiskParameter);
  out << ", " << "UsedRiskParameterType=" << to_string(UsedRiskParameterType);
  out << ")";
}


TDDIHARAArtifactUnion::~TDDIHARAArtifactUnion() throw() {
}


void TDDIHARAArtifactUnion::__set_HARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> val) {
  this->HARAPackage = val;
__isset.HARAPackage = true;
}

void TDDIHARAArtifactUnion::__set_HazardTypeSystem(const TDDIHazardTypeSystem& val) {
  this->HazardTypeSystem = val;
__isset.HazardTypeSystem = true;
}

void TDDIHARAArtifactUnion::__set_RiskParameter(const TDDIAbstractRiskParameter& val) {
  this->RiskParameter = val;
__isset.RiskParameter = true;
}

void TDDIHARAArtifactUnion::__set_RiskAssessment(const TDDIRiskAssessment& val) {
  this->RiskAssessment = val;
__isset.RiskAssessment = true;
}

void TDDIHARAArtifactUnion::__set_HazardType(const TDDIHazardType& val) {
  this->HazardType = val;
__isset.HazardType = true;
}

void TDDIHARAArtifactUnion::__set_MalFunction(const TDDIMalFunction& val) {
  this->MalFunction = val;
__isset.MalFunction = true;
}

void TDDIHARAArtifactUnion::__set_Hazard(const TDDIHazard& val) {
  this->Hazard = val;
__isset.Hazard = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIHARAArtifactUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHARAArtifactUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->HARAPackage) { 
            this->HARAPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage>(new TDDIAbstractHARAPackage);
          }
          xfer += this->HARAPackage->read(iprot);
          bool wasSet = false;
          if (this->HARAPackage->__isset.UsedHARAPackage) { wasSet = true; }
          if (this->HARAPackage->__isset.UsedHARAPackageType) { wasSet = true; }
          if (!wasSet) { this->HARAPackage.reset(); }
          this->__isset.HARAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->HazardTypeSystem.read(iprot);
          this->__isset.HazardTypeSystem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->RiskParameter.read(iprot);
          this->__isset.RiskParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->RiskAssessment.read(iprot);
          this->__isset.RiskAssessment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->HazardType.read(iprot);
          this->__isset.HazardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MalFunction.read(iprot);
          this->__isset.MalFunction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Hazard.read(iprot);
          this->__isset.Hazard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHARAArtifactUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHARAArtifactUnion");

  if (this->__isset.HARAPackage) {
    xfer += oprot->writeFieldBegin("HARAPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->HARAPackage) {
      xfer += this->HARAPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractHARAPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HazardTypeSystem) {
    xfer += oprot->writeFieldBegin("HazardTypeSystem", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->HazardTypeSystem.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RiskParameter) {
    xfer += oprot->writeFieldBegin("RiskParameter", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->RiskParameter.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RiskAssessment) {
    xfer += oprot->writeFieldBegin("RiskAssessment", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->RiskAssessment.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HazardType) {
    xfer += oprot->writeFieldBegin("HazardType", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->HazardType.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MalFunction) {
    xfer += oprot->writeFieldBegin("MalFunction", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->MalFunction.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Hazard) {
    xfer += oprot->writeFieldBegin("Hazard", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->Hazard.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHARAArtifactUnion &a, TDDIHARAArtifactUnion &b) {
  using ::std::swap;
  swap(a.HARAPackage, b.HARAPackage);
  swap(a.HazardTypeSystem, b.HazardTypeSystem);
  swap(a.RiskParameter, b.RiskParameter);
  swap(a.RiskAssessment, b.RiskAssessment);
  swap(a.HazardType, b.HazardType);
  swap(a.MalFunction, b.MalFunction);
  swap(a.Hazard, b.Hazard);
  swap(a.__isset, b.__isset);
}

TDDIHARAArtifactUnion::TDDIHARAArtifactUnion(const TDDIHARAArtifactUnion& other1408) {
  HARAPackage = other1408.HARAPackage;
  HazardTypeSystem = other1408.HazardTypeSystem;
  RiskParameter = other1408.RiskParameter;
  RiskAssessment = other1408.RiskAssessment;
  HazardType = other1408.HazardType;
  MalFunction = other1408.MalFunction;
  Hazard = other1408.Hazard;
  __isset = other1408.__isset;
}
TDDIHARAArtifactUnion& TDDIHARAArtifactUnion::operator=(const TDDIHARAArtifactUnion& other1409) {
  HARAPackage = other1409.HARAPackage;
  HazardTypeSystem = other1409.HazardTypeSystem;
  RiskParameter = other1409.RiskParameter;
  RiskAssessment = other1409.RiskAssessment;
  HazardType = other1409.HazardType;
  MalFunction = other1409.MalFunction;
  Hazard = other1409.Hazard;
  __isset = other1409.__isset;
  return *this;
}
void TDDIHARAArtifactUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHARAArtifactUnion(";
  out << "HARAPackage="; (__isset.HARAPackage ? (out << to_string(HARAPackage)) : (out << "<null>"));
  out << ", " << "HazardTypeSystem="; (__isset.HazardTypeSystem ? (out << to_string(HazardTypeSystem)) : (out << "<null>"));
  out << ", " << "RiskParameter="; (__isset.RiskParameter ? (out << to_string(RiskParameter)) : (out << "<null>"));
  out << ", " << "RiskAssessment="; (__isset.RiskAssessment ? (out << to_string(RiskAssessment)) : (out << "<null>"));
  out << ", " << "HazardType="; (__isset.HazardType ? (out << to_string(HazardType)) : (out << "<null>"));
  out << ", " << "MalFunction="; (__isset.MalFunction ? (out << to_string(MalFunction)) : (out << "<null>"));
  out << ", " << "Hazard="; (__isset.Hazard ? (out << to_string(Hazard)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractHARAArtifact::~TDDIAbstractHARAArtifact() throw() {
}


void TDDIAbstractHARAArtifact::__set_UsedHARAArtifact(const TDDIHARAArtifactUnion& val) {
  this->UsedHARAArtifact = val;
}

void TDDIAbstractHARAArtifact::__set_UsedHARAArtifactType(const TDDIHARAArtifactUnionType val) {
  this->UsedHARAArtifactType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractHARAArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractHARAArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedHARAArtifact.read(iprot);
          this->__isset.UsedHARAArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1410;
          xfer += iprot->readI32(ecast1410);
          this->UsedHARAArtifactType = (TDDIHARAArtifactUnionType)ecast1410;
          this->__isset.UsedHARAArtifactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractHARAArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractHARAArtifact");

  xfer += oprot->writeFieldBegin("UsedHARAArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedHARAArtifact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedHARAArtifactType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedHARAArtifactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractHARAArtifact &a, TDDIAbstractHARAArtifact &b) {
  using ::std::swap;
  swap(a.UsedHARAArtifact, b.UsedHARAArtifact);
  swap(a.UsedHARAArtifactType, b.UsedHARAArtifactType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractHARAArtifact::TDDIAbstractHARAArtifact(const TDDIAbstractHARAArtifact& other1411) {
  UsedHARAArtifact = other1411.UsedHARAArtifact;
  UsedHARAArtifactType = other1411.UsedHARAArtifactType;
  __isset = other1411.__isset;
}
TDDIAbstractHARAArtifact& TDDIAbstractHARAArtifact::operator=(const TDDIAbstractHARAArtifact& other1412) {
  UsedHARAArtifact = other1412.UsedHARAArtifact;
  UsedHARAArtifactType = other1412.UsedHARAArtifactType;
  __isset = other1412.__isset;
  return *this;
}
void TDDIAbstractHARAArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractHARAArtifact(";
  out << "UsedHARAArtifact=" << to_string(UsedHARAArtifact);
  out << ", " << "UsedHARAArtifactType=" << to_string(UsedHARAArtifactType);
  out << ")";
}


TDDIHARAPackage::~TDDIHARAPackage() throw() {
}


void TDDIHARAPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHARAPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHARAPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHARAPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIHARAPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIHARAPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIHARAPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIHARAPackage::__set_HARAArtifacts(const std::vector<TDDIAbstractHARAArtifact> & val) {
  this->HARAArtifacts = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHARAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHARAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1413;
            ::apache::thrift::protocol::TType _etype1416;
            xfer += iprot->readListBegin(_etype1416, _size1413);
            this->KeyValueMaps.resize(_size1413);
            uint32_t _i1417;
            for (_i1417 = 0; _i1417 < _size1413; ++_i1417)
            {
              xfer += this->KeyValueMaps[_i1417].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->HARAArtifacts.clear();
            uint32_t _size1418;
            ::apache::thrift::protocol::TType _etype1421;
            xfer += iprot->readListBegin(_etype1421, _size1418);
            this->HARAArtifacts.resize(_size1418);
            uint32_t _i1422;
            for (_i1422 = 0; _i1422 < _size1418; ++_i1422)
            {
              xfer += this->HARAArtifacts[_i1422].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.HARAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHARAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHARAPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1423;
    for (_iter1423 = this->KeyValueMaps.begin(); _iter1423 != this->KeyValueMaps.end(); ++_iter1423)
    {
      xfer += (*_iter1423).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HARAArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->HARAArtifacts.size()));
    std::vector<TDDIAbstractHARAArtifact> ::const_iterator _iter1424;
    for (_iter1424 = this->HARAArtifacts.begin(); _iter1424 != this->HARAArtifacts.end(); ++_iter1424)
    {
      xfer += (*_iter1424).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHARAPackage &a, TDDIHARAPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.HARAArtifacts, b.HARAArtifacts);
  swap(a.__isset, b.__isset);
}

TDDIHARAPackage::TDDIHARAPackage(const TDDIHARAPackage& other1425) {
  Id = other1425.Id;
  Name = other1425.Name;
  Description = other1425.Description;
  IsCitation = other1425.IsCitation;
  IsAbstract = other1425.IsAbstract;
  KeyValueMaps = other1425.KeyValueMaps;
  CitedElement = other1425.CitedElement;
  HARAArtifacts = other1425.HARAArtifacts;
  __isset = other1425.__isset;
}
TDDIHARAPackage& TDDIHARAPackage::operator=(const TDDIHARAPackage& other1426) {
  Id = other1426.Id;
  Name = other1426.Name;
  Description = other1426.Description;
  IsCitation = other1426.IsCitation;
  IsAbstract = other1426.IsAbstract;
  KeyValueMaps = other1426.KeyValueMaps;
  CitedElement = other1426.CitedElement;
  HARAArtifacts = other1426.HARAArtifacts;
  __isset = other1426.__isset;
  return *this;
}
void TDDIHARAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHARAPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "HARAArtifacts=" << to_string(HARAArtifacts);
  out << ")";
}


TDDIHARAPackageInterface::~TDDIHARAPackageInterface() throw() {
}


void TDDIHARAPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHARAPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHARAPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHARAPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIHARAPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIHARAPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIHARAPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIHARAPackageInterface::__set_HARAArtifacts(const std::vector<TDDIAbstractHARAArtifact> & val) {
  this->HARAArtifacts = val;
}

void TDDIHARAPackageInterface::__set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHARAPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHARAPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1427;
            ::apache::thrift::protocol::TType _etype1430;
            xfer += iprot->readListBegin(_etype1430, _size1427);
            this->KeyValueMaps.resize(_size1427);
            uint32_t _i1431;
            for (_i1431 = 0; _i1431 < _size1427; ++_i1431)
            {
              xfer += this->KeyValueMaps[_i1431].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->HARAArtifacts.clear();
            uint32_t _size1432;
            ::apache::thrift::protocol::TType _etype1435;
            xfer += iprot->readListBegin(_etype1435, _size1432);
            this->HARAArtifacts.resize(_size1432);
            uint32_t _i1436;
            for (_i1436 = 0; _i1436 < _size1432; ++_i1436)
            {
              xfer += this->HARAArtifacts[_i1436].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.HARAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Implements) { 
            this->Implements = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage>(new TDDIAbstractHARAPackage);
          }
          xfer += this->Implements->read(iprot);
          bool wasSet = false;
          if (this->Implements->__isset.UsedHARAPackage) { wasSet = true; }
          if (this->Implements->__isset.UsedHARAPackageType) { wasSet = true; }
          if (!wasSet) { this->Implements.reset(); }
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHARAPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHARAPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1437;
    for (_iter1437 = this->KeyValueMaps.begin(); _iter1437 != this->KeyValueMaps.end(); ++_iter1437)
    {
      xfer += (*_iter1437).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HARAArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->HARAArtifacts.size()));
    std::vector<TDDIAbstractHARAArtifact> ::const_iterator _iter1438;
    for (_iter1438 = this->HARAArtifacts.begin(); _iter1438 != this->HARAArtifacts.end(); ++_iter1438)
    {
      xfer += (*_iter1438).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->Implements) {
    xfer += this->Implements->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractHARAPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHARAPackageInterface &a, TDDIHARAPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.HARAArtifacts, b.HARAArtifacts);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIHARAPackageInterface::TDDIHARAPackageInterface(const TDDIHARAPackageInterface& other1439) {
  Id = other1439.Id;
  Name = other1439.Name;
  Description = other1439.Description;
  IsCitation = other1439.IsCitation;
  IsAbstract = other1439.IsAbstract;
  KeyValueMaps = other1439.KeyValueMaps;
  CitedElement = other1439.CitedElement;
  HARAArtifacts = other1439.HARAArtifacts;
  Implements = other1439.Implements;
  __isset = other1439.__isset;
}
TDDIHARAPackageInterface& TDDIHARAPackageInterface::operator=(const TDDIHARAPackageInterface& other1440) {
  Id = other1440.Id;
  Name = other1440.Name;
  Description = other1440.Description;
  IsCitation = other1440.IsCitation;
  IsAbstract = other1440.IsAbstract;
  KeyValueMaps = other1440.KeyValueMaps;
  CitedElement = other1440.CitedElement;
  HARAArtifacts = other1440.HARAArtifacts;
  Implements = other1440.Implements;
  __isset = other1440.__isset;
  return *this;
}
void TDDIHARAPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHARAPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "HARAArtifacts=" << to_string(HARAArtifacts);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIHARAPackageBinding::~TDDIHARAPackageBinding() throw() {
}


void TDDIHARAPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHARAPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHARAPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHARAPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIHARAPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIHARAPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIHARAPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIHARAPackageBinding::__set_HARAArtifacts(const std::vector<TDDIAbstractHARAArtifact> & val) {
  this->HARAArtifacts = val;
}

void TDDIHARAPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractHARAPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHARAPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHARAPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1441;
            ::apache::thrift::protocol::TType _etype1444;
            xfer += iprot->readListBegin(_etype1444, _size1441);
            this->KeyValueMaps.resize(_size1441);
            uint32_t _i1445;
            for (_i1445 = 0; _i1445 < _size1441; ++_i1445)
            {
              xfer += this->KeyValueMaps[_i1445].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->HARAArtifacts.clear();
            uint32_t _size1446;
            ::apache::thrift::protocol::TType _etype1449;
            xfer += iprot->readListBegin(_etype1449, _size1446);
            this->HARAArtifacts.resize(_size1446);
            uint32_t _i1450;
            for (_i1450 = 0; _i1450 < _size1446; ++_i1450)
            {
              xfer += this->HARAArtifacts[_i1450].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.HARAArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size1451;
            ::apache::thrift::protocol::TType _etype1454;
            xfer += iprot->readListBegin(_etype1454, _size1451);
            this->ParticipantPackages.resize(_size1451);
            uint32_t _i1455;
            for (_i1455 = 0; _i1455 < _size1451; ++_i1455)
            {
              xfer += this->ParticipantPackages[_i1455].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHARAPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHARAPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1456;
    for (_iter1456 = this->KeyValueMaps.begin(); _iter1456 != this->KeyValueMaps.end(); ++_iter1456)
    {
      xfer += (*_iter1456).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HARAArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->HARAArtifacts.size()));
    std::vector<TDDIAbstractHARAArtifact> ::const_iterator _iter1457;
    for (_iter1457 = this->HARAArtifacts.begin(); _iter1457 != this->HARAArtifacts.end(); ++_iter1457)
    {
      xfer += (*_iter1457).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractHARAPackageRef> ::const_iterator _iter1458;
    for (_iter1458 = this->ParticipantPackages.begin(); _iter1458 != this->ParticipantPackages.end(); ++_iter1458)
    {
      xfer += (*_iter1458).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHARAPackageBinding &a, TDDIHARAPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.HARAArtifacts, b.HARAArtifacts);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIHARAPackageBinding::TDDIHARAPackageBinding(const TDDIHARAPackageBinding& other1459) {
  Id = other1459.Id;
  Name = other1459.Name;
  Description = other1459.Description;
  IsCitation = other1459.IsCitation;
  IsAbstract = other1459.IsAbstract;
  KeyValueMaps = other1459.KeyValueMaps;
  CitedElement = other1459.CitedElement;
  HARAArtifacts = other1459.HARAArtifacts;
  ParticipantPackages = other1459.ParticipantPackages;
  __isset = other1459.__isset;
}
TDDIHARAPackageBinding& TDDIHARAPackageBinding::operator=(const TDDIHARAPackageBinding& other1460) {
  Id = other1460.Id;
  Name = other1460.Name;
  Description = other1460.Description;
  IsCitation = other1460.IsCitation;
  IsAbstract = other1460.IsAbstract;
  KeyValueMaps = other1460.KeyValueMaps;
  CitedElement = other1460.CitedElement;
  HARAArtifacts = other1460.HARAArtifacts;
  ParticipantPackages = other1460.ParticipantPackages;
  __isset = other1460.__isset;
  return *this;
}
void TDDIHARAPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHARAPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "HARAArtifacts=" << to_string(HARAArtifacts);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIHARAPackageUnion::~TDDIHARAPackageUnion() throw() {
}


void TDDIHARAPackageUnion::__set_HARAPackage(const TDDIHARAPackage& val) {
  this->HARAPackage = val;
__isset.HARAPackage = true;
}

void TDDIHARAPackageUnion::__set_HARAPackageInterface(const TDDIHARAPackageInterface& val) {
  this->HARAPackageInterface = val;
__isset.HARAPackageInterface = true;
}

void TDDIHARAPackageUnion::__set_HARAPackageBinding(const TDDIHARAPackageBinding& val) {
  this->HARAPackageBinding = val;
__isset.HARAPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIHARAPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHARAPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->HARAPackage.read(iprot);
          this->__isset.HARAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->HARAPackageInterface.read(iprot);
          this->__isset.HARAPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->HARAPackageBinding.read(iprot);
          this->__isset.HARAPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHARAPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHARAPackageUnion");

  if (this->__isset.HARAPackage) {
    xfer += oprot->writeFieldBegin("HARAPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->HARAPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HARAPackageInterface) {
    xfer += oprot->writeFieldBegin("HARAPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->HARAPackageInterface.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HARAPackageBinding) {
    xfer += oprot->writeFieldBegin("HARAPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->HARAPackageBinding.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHARAPackageUnion &a, TDDIHARAPackageUnion &b) {
  using ::std::swap;
  swap(a.HARAPackage, b.HARAPackage);
  swap(a.HARAPackageInterface, b.HARAPackageInterface);
  swap(a.HARAPackageBinding, b.HARAPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIHARAPackageUnion::TDDIHARAPackageUnion(const TDDIHARAPackageUnion& other1461) {
  HARAPackage = other1461.HARAPackage;
  HARAPackageInterface = other1461.HARAPackageInterface;
  HARAPackageBinding = other1461.HARAPackageBinding;
  __isset = other1461.__isset;
}
TDDIHARAPackageUnion& TDDIHARAPackageUnion::operator=(const TDDIHARAPackageUnion& other1462) {
  HARAPackage = other1462.HARAPackage;
  HARAPackageInterface = other1462.HARAPackageInterface;
  HARAPackageBinding = other1462.HARAPackageBinding;
  __isset = other1462.__isset;
  return *this;
}
void TDDIHARAPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHARAPackageUnion(";
  out << "HARAPackage="; (__isset.HARAPackage ? (out << to_string(HARAPackage)) : (out << "<null>"));
  out << ", " << "HARAPackageInterface="; (__isset.HARAPackageInterface ? (out << to_string(HARAPackageInterface)) : (out << "<null>"));
  out << ", " << "HARAPackageBinding="; (__isset.HARAPackageBinding ? (out << to_string(HARAPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractHARAPackage::~TDDIAbstractHARAPackage() throw() {
}


void TDDIAbstractHARAPackage::__set_UsedHARAPackage(const TDDIHARAPackageUnion& val) {
  this->UsedHARAPackage = val;
}

void TDDIAbstractHARAPackage::__set_UsedHARAPackageType(const TDDIHARAPackageUnionType val) {
  this->UsedHARAPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractHARAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractHARAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedHARAPackage.read(iprot);
          this->__isset.UsedHARAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1463;
          xfer += iprot->readI32(ecast1463);
          this->UsedHARAPackageType = (TDDIHARAPackageUnionType)ecast1463;
          this->__isset.UsedHARAPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractHARAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractHARAPackage");

  xfer += oprot->writeFieldBegin("UsedHARAPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedHARAPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedHARAPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedHARAPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractHARAPackage &a, TDDIAbstractHARAPackage &b) {
  using ::std::swap;
  swap(a.UsedHARAPackage, b.UsedHARAPackage);
  swap(a.UsedHARAPackageType, b.UsedHARAPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractHARAPackage::TDDIAbstractHARAPackage(const TDDIAbstractHARAPackage& other1464) {
  UsedHARAPackage = other1464.UsedHARAPackage;
  UsedHARAPackageType = other1464.UsedHARAPackageType;
  __isset = other1464.__isset;
}
TDDIAbstractHARAPackage& TDDIAbstractHARAPackage::operator=(const TDDIAbstractHARAPackage& other1465) {
  UsedHARAPackage = other1465.UsedHARAPackage;
  UsedHARAPackageType = other1465.UsedHARAPackageType;
  __isset = other1465.__isset;
  return *this;
}
void TDDIAbstractHARAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractHARAPackage(";
  out << "UsedHARAPackage=" << to_string(UsedHARAPackage);
  out << ", " << "UsedHARAPackageType=" << to_string(UsedHARAPackageType);
  out << ")";
}


TDDIODEPackageUnion::~TDDIODEPackageUnion() throw() {
}


void TDDIODEPackageUnion::__set_ODEPackage(::apache::thrift::stdcxx::shared_ptr<TDDIODEPackage> val) {
  this->ODEPackage = val;
__isset.ODEPackage = true;
}

void TDDIODEPackageUnion::__set_ODEPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIODEPackageInterface> val) {
  this->ODEPackageInterface = val;
__isset.ODEPackageInterface = true;
}

void TDDIODEPackageUnion::__set_ODEPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIODEPackageBinding> val) {
  this->ODEPackageBinding = val;
__isset.ODEPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIODEPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIODEPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ODEPackage) { 
            this->ODEPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIODEPackage>(new TDDIODEPackage);
          }
          xfer += this->ODEPackage->read(iprot);
          bool wasSet = false;
          if (this->ODEPackage->__isset.Id) { wasSet = true; }
          if (this->ODEPackage->__isset.Name) { wasSet = true; }
          if (this->ODEPackage->__isset.Description) { wasSet = true; }
          if (this->ODEPackage->__isset.IsCitation) { wasSet = true; }
          if (this->ODEPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->ODEPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ODEPackage->__isset.CitedElement) { wasSet = true; }
          if (this->ODEPackage->__isset.ODEPackages) { wasSet = true; }
          if (this->ODEPackage->__isset.ArchitecturePackages) { wasSet = true; }
          if (this->ODEPackage->__isset.DependabilityPackages) { wasSet = true; }
          if (this->ODEPackage->__isset.FailureLogicPackages) { wasSet = true; }
          if (this->ODEPackage->__isset.AssuranceCasePackages) { wasSet = true; }
          if (!wasSet) { this->ODEPackage.reset(); }
          this->__isset.ODEPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ODEPackageInterface) { 
            this->ODEPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIODEPackageInterface>(new TDDIODEPackageInterface);
          }
          xfer += this->ODEPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->ODEPackageInterface->__isset.Id) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.Name) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.Description) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.ODEPackages) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.ArchitecturePackages) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.DependabilityPackages) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.FailureLogicPackages) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.AssuranceCasePackages) { wasSet = true; }
          if (this->ODEPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->ODEPackageInterface.reset(); }
          this->__isset.ODEPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ODEPackageBinding) { 
            this->ODEPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIODEPackageBinding>(new TDDIODEPackageBinding);
          }
          xfer += this->ODEPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->ODEPackageBinding->__isset.Id) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.Name) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.Description) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.ODEPackages) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.ArchitecturePackages) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.DependabilityPackages) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.FailureLogicPackages) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.AssuranceCasePackages) { wasSet = true; }
          if (this->ODEPackageBinding->__isset.ParticipantPackages) { wasSet = true; }
          if (!wasSet) { this->ODEPackageBinding.reset(); }
          this->__isset.ODEPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIODEPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIODEPackageUnion");

  if (this->__isset.ODEPackage) {
    xfer += oprot->writeFieldBegin("ODEPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ODEPackage) {
      xfer += this->ODEPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIODEPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ODEPackageInterface) {
    xfer += oprot->writeFieldBegin("ODEPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ODEPackageInterface) {
      xfer += this->ODEPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIODEPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ODEPackageBinding) {
    xfer += oprot->writeFieldBegin("ODEPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ODEPackageBinding) {
      xfer += this->ODEPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIODEPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIODEPackageUnion &a, TDDIODEPackageUnion &b) {
  using ::std::swap;
  swap(a.ODEPackage, b.ODEPackage);
  swap(a.ODEPackageInterface, b.ODEPackageInterface);
  swap(a.ODEPackageBinding, b.ODEPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIODEPackageUnion::TDDIODEPackageUnion(const TDDIODEPackageUnion& other1466) {
  ODEPackage = other1466.ODEPackage;
  ODEPackageInterface = other1466.ODEPackageInterface;
  ODEPackageBinding = other1466.ODEPackageBinding;
  __isset = other1466.__isset;
}
TDDIODEPackageUnion& TDDIODEPackageUnion::operator=(const TDDIODEPackageUnion& other1467) {
  ODEPackage = other1467.ODEPackage;
  ODEPackageInterface = other1467.ODEPackageInterface;
  ODEPackageBinding = other1467.ODEPackageBinding;
  __isset = other1467.__isset;
  return *this;
}
void TDDIODEPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIODEPackageUnion(";
  out << "ODEPackage="; (__isset.ODEPackage ? (out << to_string(ODEPackage)) : (out << "<null>"));
  out << ", " << "ODEPackageInterface="; (__isset.ODEPackageInterface ? (out << to_string(ODEPackageInterface)) : (out << "<null>"));
  out << ", " << "ODEPackageBinding="; (__isset.ODEPackageBinding ? (out << to_string(ODEPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractODEPackage::~TDDIAbstractODEPackage() throw() {
}


void TDDIAbstractODEPackage::__set_UsedODEPackage(const TDDIODEPackageUnion& val) {
  this->UsedODEPackage = val;
}

void TDDIAbstractODEPackage::__set_UsedODEPackageType(const TDDIODEPackageUnionType val) {
  this->UsedODEPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractODEPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractODEPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedODEPackage.read(iprot);
          this->__isset.UsedODEPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1468;
          xfer += iprot->readI32(ecast1468);
          this->UsedODEPackageType = (TDDIODEPackageUnionType)ecast1468;
          this->__isset.UsedODEPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractODEPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractODEPackage");

  xfer += oprot->writeFieldBegin("UsedODEPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedODEPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedODEPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedODEPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractODEPackage &a, TDDIAbstractODEPackage &b) {
  using ::std::swap;
  swap(a.UsedODEPackage, b.UsedODEPackage);
  swap(a.UsedODEPackageType, b.UsedODEPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractODEPackage::TDDIAbstractODEPackage(const TDDIAbstractODEPackage& other1469) {
  UsedODEPackage = other1469.UsedODEPackage;
  UsedODEPackageType = other1469.UsedODEPackageType;
  __isset = other1469.__isset;
}
TDDIAbstractODEPackage& TDDIAbstractODEPackage::operator=(const TDDIAbstractODEPackage& other1470) {
  UsedODEPackage = other1470.UsedODEPackage;
  UsedODEPackageType = other1470.UsedODEPackageType;
  __isset = other1470.__isset;
  return *this;
}
void TDDIAbstractODEPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractODEPackage(";
  out << "UsedODEPackage=" << to_string(UsedODEPackage);
  out << ", " << "UsedODEPackageType=" << to_string(UsedODEPackageType);
  out << ")";
}


TDDIODEPackage::~TDDIODEPackage() throw() {
}


void TDDIODEPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIODEPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIODEPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIODEPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIODEPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIODEPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIODEPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIODEPackage::__set_ODEPackages(const std::vector<TDDIAbstractODEPackageRef> & val) {
  this->ODEPackages = val;
}

void TDDIODEPackage::__set_ArchitecturePackages(const std::vector<TDDIAbstractArchitecturePackageRef> & val) {
  this->ArchitecturePackages = val;
}

void TDDIODEPackage::__set_DependabilityPackages(const std::vector<TDDIAbstractDependabilityPackageRef> & val) {
  this->DependabilityPackages = val;
}

void TDDIODEPackage::__set_FailureLogicPackages(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureLogicPackages = val;
}

void TDDIODEPackage::__set_AssuranceCasePackages(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIODEPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIODEPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1471;
            ::apache::thrift::protocol::TType _etype1474;
            xfer += iprot->readListBegin(_etype1474, _size1471);
            this->KeyValueMaps.resize(_size1471);
            uint32_t _i1475;
            for (_i1475 = 0; _i1475 < _size1471; ++_i1475)
            {
              xfer += this->KeyValueMaps[_i1475].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ODEPackages.clear();
            uint32_t _size1476;
            ::apache::thrift::protocol::TType _etype1479;
            xfer += iprot->readListBegin(_etype1479, _size1476);
            this->ODEPackages.resize(_size1476);
            uint32_t _i1480;
            for (_i1480 = 0; _i1480 < _size1476; ++_i1480)
            {
              xfer += this->ODEPackages[_i1480].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ODEPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArchitecturePackages.clear();
            uint32_t _size1481;
            ::apache::thrift::protocol::TType _etype1484;
            xfer += iprot->readListBegin(_etype1484, _size1481);
            this->ArchitecturePackages.resize(_size1481);
            uint32_t _i1485;
            for (_i1485 = 0; _i1485 < _size1481; ++_i1485)
            {
              xfer += this->ArchitecturePackages[_i1485].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArchitecturePackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityPackages.clear();
            uint32_t _size1486;
            ::apache::thrift::protocol::TType _etype1489;
            xfer += iprot->readListBegin(_etype1489, _size1486);
            this->DependabilityPackages.resize(_size1486);
            uint32_t _i1490;
            for (_i1490 = 0; _i1490 < _size1486; ++_i1490)
            {
              xfer += this->DependabilityPackages[_i1490].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureLogicPackages.clear();
            uint32_t _size1491;
            ::apache::thrift::protocol::TType _etype1494;
            xfer += iprot->readListBegin(_etype1494, _size1491);
            this->FailureLogicPackages.resize(_size1491);
            uint32_t _i1495;
            for (_i1495 = 0; _i1495 < _size1491; ++_i1495)
            {
              xfer += this->FailureLogicPackages[_i1495].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureLogicPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackages.clear();
            uint32_t _size1496;
            ::apache::thrift::protocol::TType _etype1499;
            xfer += iprot->readListBegin(_etype1499, _size1496);
            this->AssuranceCasePackages.resize(_size1496);
            uint32_t _i1500;
            for (_i1500 = 0; _i1500 < _size1496; ++_i1500)
            {
              xfer += this->AssuranceCasePackages[_i1500].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIODEPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIODEPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1501;
    for (_iter1501 = this->KeyValueMaps.begin(); _iter1501 != this->KeyValueMaps.end(); ++_iter1501)
    {
      xfer += (*_iter1501).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ODEPackages", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ODEPackages.size()));
    std::vector<TDDIAbstractODEPackageRef> ::const_iterator _iter1502;
    for (_iter1502 = this->ODEPackages.begin(); _iter1502 != this->ODEPackages.end(); ++_iter1502)
    {
      xfer += (*_iter1502).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArchitecturePackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArchitecturePackages.size()));
    std::vector<TDDIAbstractArchitecturePackageRef> ::const_iterator _iter1503;
    for (_iter1503 = this->ArchitecturePackages.begin(); _iter1503 != this->ArchitecturePackages.end(); ++_iter1503)
    {
      xfer += (*_iter1503).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityPackages", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityPackages.size()));
    std::vector<TDDIAbstractDependabilityPackageRef> ::const_iterator _iter1504;
    for (_iter1504 = this->DependabilityPackages.begin(); _iter1504 != this->DependabilityPackages.end(); ++_iter1504)
    {
      xfer += (*_iter1504).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureLogicPackages", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureLogicPackages.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter1505;
    for (_iter1505 = this->FailureLogicPackages.begin(); _iter1505 != this->FailureLogicPackages.end(); ++_iter1505)
    {
      xfer += (*_iter1505).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackages", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackages.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter1506;
    for (_iter1506 = this->AssuranceCasePackages.begin(); _iter1506 != this->AssuranceCasePackages.end(); ++_iter1506)
    {
      xfer += (*_iter1506).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIODEPackage &a, TDDIODEPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.ODEPackages, b.ODEPackages);
  swap(a.ArchitecturePackages, b.ArchitecturePackages);
  swap(a.DependabilityPackages, b.DependabilityPackages);
  swap(a.FailureLogicPackages, b.FailureLogicPackages);
  swap(a.AssuranceCasePackages, b.AssuranceCasePackages);
  swap(a.__isset, b.__isset);
}

TDDIODEPackage::TDDIODEPackage(const TDDIODEPackage& other1507) {
  Id = other1507.Id;
  Name = other1507.Name;
  Description = other1507.Description;
  IsCitation = other1507.IsCitation;
  IsAbstract = other1507.IsAbstract;
  KeyValueMaps = other1507.KeyValueMaps;
  CitedElement = other1507.CitedElement;
  ODEPackages = other1507.ODEPackages;
  ArchitecturePackages = other1507.ArchitecturePackages;
  DependabilityPackages = other1507.DependabilityPackages;
  FailureLogicPackages = other1507.FailureLogicPackages;
  AssuranceCasePackages = other1507.AssuranceCasePackages;
  __isset = other1507.__isset;
}
TDDIODEPackage& TDDIODEPackage::operator=(const TDDIODEPackage& other1508) {
  Id = other1508.Id;
  Name = other1508.Name;
  Description = other1508.Description;
  IsCitation = other1508.IsCitation;
  IsAbstract = other1508.IsAbstract;
  KeyValueMaps = other1508.KeyValueMaps;
  CitedElement = other1508.CitedElement;
  ODEPackages = other1508.ODEPackages;
  ArchitecturePackages = other1508.ArchitecturePackages;
  DependabilityPackages = other1508.DependabilityPackages;
  FailureLogicPackages = other1508.FailureLogicPackages;
  AssuranceCasePackages = other1508.AssuranceCasePackages;
  __isset = other1508.__isset;
  return *this;
}
void TDDIODEPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIODEPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "ODEPackages=" << to_string(ODEPackages);
  out << ", " << "ArchitecturePackages=" << to_string(ArchitecturePackages);
  out << ", " << "DependabilityPackages=" << to_string(DependabilityPackages);
  out << ", " << "FailureLogicPackages=" << to_string(FailureLogicPackages);
  out << ", " << "AssuranceCasePackages=" << to_string(AssuranceCasePackages);
  out << ")";
}


TDDIODEPackageInterface::~TDDIODEPackageInterface() throw() {
}


void TDDIODEPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIODEPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIODEPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIODEPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIODEPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIODEPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIODEPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIODEPackageInterface::__set_ODEPackages(const std::vector<TDDIAbstractODEPackageRef> & val) {
  this->ODEPackages = val;
}

void TDDIODEPackageInterface::__set_ArchitecturePackages(const std::vector<TDDIAbstractArchitecturePackageRef> & val) {
  this->ArchitecturePackages = val;
}

void TDDIODEPackageInterface::__set_DependabilityPackages(const std::vector<TDDIAbstractDependabilityPackageRef> & val) {
  this->DependabilityPackages = val;
}

void TDDIODEPackageInterface::__set_FailureLogicPackages(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureLogicPackages = val;
}

void TDDIODEPackageInterface::__set_AssuranceCasePackages(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackages = val;
}

void TDDIODEPackageInterface::__set_Implements(const TDDIAbstractODEPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIODEPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIODEPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1509;
            ::apache::thrift::protocol::TType _etype1512;
            xfer += iprot->readListBegin(_etype1512, _size1509);
            this->KeyValueMaps.resize(_size1509);
            uint32_t _i1513;
            for (_i1513 = 0; _i1513 < _size1509; ++_i1513)
            {
              xfer += this->KeyValueMaps[_i1513].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ODEPackages.clear();
            uint32_t _size1514;
            ::apache::thrift::protocol::TType _etype1517;
            xfer += iprot->readListBegin(_etype1517, _size1514);
            this->ODEPackages.resize(_size1514);
            uint32_t _i1518;
            for (_i1518 = 0; _i1518 < _size1514; ++_i1518)
            {
              xfer += this->ODEPackages[_i1518].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ODEPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArchitecturePackages.clear();
            uint32_t _size1519;
            ::apache::thrift::protocol::TType _etype1522;
            xfer += iprot->readListBegin(_etype1522, _size1519);
            this->ArchitecturePackages.resize(_size1519);
            uint32_t _i1523;
            for (_i1523 = 0; _i1523 < _size1519; ++_i1523)
            {
              xfer += this->ArchitecturePackages[_i1523].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArchitecturePackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityPackages.clear();
            uint32_t _size1524;
            ::apache::thrift::protocol::TType _etype1527;
            xfer += iprot->readListBegin(_etype1527, _size1524);
            this->DependabilityPackages.resize(_size1524);
            uint32_t _i1528;
            for (_i1528 = 0; _i1528 < _size1524; ++_i1528)
            {
              xfer += this->DependabilityPackages[_i1528].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureLogicPackages.clear();
            uint32_t _size1529;
            ::apache::thrift::protocol::TType _etype1532;
            xfer += iprot->readListBegin(_etype1532, _size1529);
            this->FailureLogicPackages.resize(_size1529);
            uint32_t _i1533;
            for (_i1533 = 0; _i1533 < _size1529; ++_i1533)
            {
              xfer += this->FailureLogicPackages[_i1533].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureLogicPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackages.clear();
            uint32_t _size1534;
            ::apache::thrift::protocol::TType _etype1537;
            xfer += iprot->readListBegin(_etype1537, _size1534);
            this->AssuranceCasePackages.resize(_size1534);
            uint32_t _i1538;
            for (_i1538 = 0; _i1538 < _size1534; ++_i1538)
            {
              xfer += this->AssuranceCasePackages[_i1538].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIODEPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIODEPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1539;
    for (_iter1539 = this->KeyValueMaps.begin(); _iter1539 != this->KeyValueMaps.end(); ++_iter1539)
    {
      xfer += (*_iter1539).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ODEPackages", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ODEPackages.size()));
    std::vector<TDDIAbstractODEPackageRef> ::const_iterator _iter1540;
    for (_iter1540 = this->ODEPackages.begin(); _iter1540 != this->ODEPackages.end(); ++_iter1540)
    {
      xfer += (*_iter1540).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArchitecturePackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArchitecturePackages.size()));
    std::vector<TDDIAbstractArchitecturePackageRef> ::const_iterator _iter1541;
    for (_iter1541 = this->ArchitecturePackages.begin(); _iter1541 != this->ArchitecturePackages.end(); ++_iter1541)
    {
      xfer += (*_iter1541).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityPackages", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityPackages.size()));
    std::vector<TDDIAbstractDependabilityPackageRef> ::const_iterator _iter1542;
    for (_iter1542 = this->DependabilityPackages.begin(); _iter1542 != this->DependabilityPackages.end(); ++_iter1542)
    {
      xfer += (*_iter1542).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureLogicPackages", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureLogicPackages.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter1543;
    for (_iter1543 = this->FailureLogicPackages.begin(); _iter1543 != this->FailureLogicPackages.end(); ++_iter1543)
    {
      xfer += (*_iter1543).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackages", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackages.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter1544;
    for (_iter1544 = this->AssuranceCasePackages.begin(); _iter1544 != this->AssuranceCasePackages.end(); ++_iter1544)
    {
      xfer += (*_iter1544).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIODEPackageInterface &a, TDDIODEPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.ODEPackages, b.ODEPackages);
  swap(a.ArchitecturePackages, b.ArchitecturePackages);
  swap(a.DependabilityPackages, b.DependabilityPackages);
  swap(a.FailureLogicPackages, b.FailureLogicPackages);
  swap(a.AssuranceCasePackages, b.AssuranceCasePackages);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIODEPackageInterface::TDDIODEPackageInterface(const TDDIODEPackageInterface& other1545) {
  Id = other1545.Id;
  Name = other1545.Name;
  Description = other1545.Description;
  IsCitation = other1545.IsCitation;
  IsAbstract = other1545.IsAbstract;
  KeyValueMaps = other1545.KeyValueMaps;
  CitedElement = other1545.CitedElement;
  ODEPackages = other1545.ODEPackages;
  ArchitecturePackages = other1545.ArchitecturePackages;
  DependabilityPackages = other1545.DependabilityPackages;
  FailureLogicPackages = other1545.FailureLogicPackages;
  AssuranceCasePackages = other1545.AssuranceCasePackages;
  Implements = other1545.Implements;
  __isset = other1545.__isset;
}
TDDIODEPackageInterface& TDDIODEPackageInterface::operator=(const TDDIODEPackageInterface& other1546) {
  Id = other1546.Id;
  Name = other1546.Name;
  Description = other1546.Description;
  IsCitation = other1546.IsCitation;
  IsAbstract = other1546.IsAbstract;
  KeyValueMaps = other1546.KeyValueMaps;
  CitedElement = other1546.CitedElement;
  ODEPackages = other1546.ODEPackages;
  ArchitecturePackages = other1546.ArchitecturePackages;
  DependabilityPackages = other1546.DependabilityPackages;
  FailureLogicPackages = other1546.FailureLogicPackages;
  AssuranceCasePackages = other1546.AssuranceCasePackages;
  Implements = other1546.Implements;
  __isset = other1546.__isset;
  return *this;
}
void TDDIODEPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIODEPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "ODEPackages=" << to_string(ODEPackages);
  out << ", " << "ArchitecturePackages=" << to_string(ArchitecturePackages);
  out << ", " << "DependabilityPackages=" << to_string(DependabilityPackages);
  out << ", " << "FailureLogicPackages=" << to_string(FailureLogicPackages);
  out << ", " << "AssuranceCasePackages=" << to_string(AssuranceCasePackages);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIODEPackageBinding::~TDDIODEPackageBinding() throw() {
}


void TDDIODEPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIODEPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIODEPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIODEPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIODEPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIODEPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIODEPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIODEPackageBinding::__set_ODEPackages(const std::vector<TDDIAbstractODEPackageRef> & val) {
  this->ODEPackages = val;
}

void TDDIODEPackageBinding::__set_ArchitecturePackages(const std::vector<TDDIAbstractArchitecturePackageRef> & val) {
  this->ArchitecturePackages = val;
}

void TDDIODEPackageBinding::__set_DependabilityPackages(const std::vector<TDDIAbstractDependabilityPackageRef> & val) {
  this->DependabilityPackages = val;
}

void TDDIODEPackageBinding::__set_FailureLogicPackages(const std::vector<TDDIAbstractFailureLogicPackageRef> & val) {
  this->FailureLogicPackages = val;
}

void TDDIODEPackageBinding::__set_AssuranceCasePackages(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackages = val;
}

void TDDIODEPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractODEPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIODEPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIODEPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1547;
            ::apache::thrift::protocol::TType _etype1550;
            xfer += iprot->readListBegin(_etype1550, _size1547);
            this->KeyValueMaps.resize(_size1547);
            uint32_t _i1551;
            for (_i1551 = 0; _i1551 < _size1547; ++_i1551)
            {
              xfer += this->KeyValueMaps[_i1551].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ODEPackages.clear();
            uint32_t _size1552;
            ::apache::thrift::protocol::TType _etype1555;
            xfer += iprot->readListBegin(_etype1555, _size1552);
            this->ODEPackages.resize(_size1552);
            uint32_t _i1556;
            for (_i1556 = 0; _i1556 < _size1552; ++_i1556)
            {
              xfer += this->ODEPackages[_i1556].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ODEPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArchitecturePackages.clear();
            uint32_t _size1557;
            ::apache::thrift::protocol::TType _etype1560;
            xfer += iprot->readListBegin(_etype1560, _size1557);
            this->ArchitecturePackages.resize(_size1557);
            uint32_t _i1561;
            for (_i1561 = 0; _i1561 < _size1557; ++_i1561)
            {
              xfer += this->ArchitecturePackages[_i1561].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArchitecturePackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityPackages.clear();
            uint32_t _size1562;
            ::apache::thrift::protocol::TType _etype1565;
            xfer += iprot->readListBegin(_etype1565, _size1562);
            this->DependabilityPackages.resize(_size1562);
            uint32_t _i1566;
            for (_i1566 = 0; _i1566 < _size1562; ++_i1566)
            {
              xfer += this->DependabilityPackages[_i1566].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureLogicPackages.clear();
            uint32_t _size1567;
            ::apache::thrift::protocol::TType _etype1570;
            xfer += iprot->readListBegin(_etype1570, _size1567);
            this->FailureLogicPackages.resize(_size1567);
            uint32_t _i1571;
            for (_i1571 = 0; _i1571 < _size1567; ++_i1571)
            {
              xfer += this->FailureLogicPackages[_i1571].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureLogicPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackages.clear();
            uint32_t _size1572;
            ::apache::thrift::protocol::TType _etype1575;
            xfer += iprot->readListBegin(_etype1575, _size1572);
            this->AssuranceCasePackages.resize(_size1572);
            uint32_t _i1576;
            for (_i1576 = 0; _i1576 < _size1572; ++_i1576)
            {
              xfer += this->AssuranceCasePackages[_i1576].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size1577;
            ::apache::thrift::protocol::TType _etype1580;
            xfer += iprot->readListBegin(_etype1580, _size1577);
            this->ParticipantPackages.resize(_size1577);
            uint32_t _i1581;
            for (_i1581 = 0; _i1581 < _size1577; ++_i1581)
            {
              xfer += this->ParticipantPackages[_i1581].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIODEPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIODEPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1582;
    for (_iter1582 = this->KeyValueMaps.begin(); _iter1582 != this->KeyValueMaps.end(); ++_iter1582)
    {
      xfer += (*_iter1582).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ODEPackages", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ODEPackages.size()));
    std::vector<TDDIAbstractODEPackageRef> ::const_iterator _iter1583;
    for (_iter1583 = this->ODEPackages.begin(); _iter1583 != this->ODEPackages.end(); ++_iter1583)
    {
      xfer += (*_iter1583).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArchitecturePackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArchitecturePackages.size()));
    std::vector<TDDIAbstractArchitecturePackageRef> ::const_iterator _iter1584;
    for (_iter1584 = this->ArchitecturePackages.begin(); _iter1584 != this->ArchitecturePackages.end(); ++_iter1584)
    {
      xfer += (*_iter1584).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityPackages", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityPackages.size()));
    std::vector<TDDIAbstractDependabilityPackageRef> ::const_iterator _iter1585;
    for (_iter1585 = this->DependabilityPackages.begin(); _iter1585 != this->DependabilityPackages.end(); ++_iter1585)
    {
      xfer += (*_iter1585).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureLogicPackages", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureLogicPackages.size()));
    std::vector<TDDIAbstractFailureLogicPackageRef> ::const_iterator _iter1586;
    for (_iter1586 = this->FailureLogicPackages.begin(); _iter1586 != this->FailureLogicPackages.end(); ++_iter1586)
    {
      xfer += (*_iter1586).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackages", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackages.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter1587;
    for (_iter1587 = this->AssuranceCasePackages.begin(); _iter1587 != this->AssuranceCasePackages.end(); ++_iter1587)
    {
      xfer += (*_iter1587).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractODEPackageRef> ::const_iterator _iter1588;
    for (_iter1588 = this->ParticipantPackages.begin(); _iter1588 != this->ParticipantPackages.end(); ++_iter1588)
    {
      xfer += (*_iter1588).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIODEPackageBinding &a, TDDIODEPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.ODEPackages, b.ODEPackages);
  swap(a.ArchitecturePackages, b.ArchitecturePackages);
  swap(a.DependabilityPackages, b.DependabilityPackages);
  swap(a.FailureLogicPackages, b.FailureLogicPackages);
  swap(a.AssuranceCasePackages, b.AssuranceCasePackages);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIODEPackageBinding::TDDIODEPackageBinding(const TDDIODEPackageBinding& other1589) {
  Id = other1589.Id;
  Name = other1589.Name;
  Description = other1589.Description;
  IsCitation = other1589.IsCitation;
  IsAbstract = other1589.IsAbstract;
  KeyValueMaps = other1589.KeyValueMaps;
  CitedElement = other1589.CitedElement;
  ODEPackages = other1589.ODEPackages;
  ArchitecturePackages = other1589.ArchitecturePackages;
  DependabilityPackages = other1589.DependabilityPackages;
  FailureLogicPackages = other1589.FailureLogicPackages;
  AssuranceCasePackages = other1589.AssuranceCasePackages;
  ParticipantPackages = other1589.ParticipantPackages;
  __isset = other1589.__isset;
}
TDDIODEPackageBinding& TDDIODEPackageBinding::operator=(const TDDIODEPackageBinding& other1590) {
  Id = other1590.Id;
  Name = other1590.Name;
  Description = other1590.Description;
  IsCitation = other1590.IsCitation;
  IsAbstract = other1590.IsAbstract;
  KeyValueMaps = other1590.KeyValueMaps;
  CitedElement = other1590.CitedElement;
  ODEPackages = other1590.ODEPackages;
  ArchitecturePackages = other1590.ArchitecturePackages;
  DependabilityPackages = other1590.DependabilityPackages;
  FailureLogicPackages = other1590.FailureLogicPackages;
  AssuranceCasePackages = other1590.AssuranceCasePackages;
  ParticipantPackages = other1590.ParticipantPackages;
  __isset = other1590.__isset;
  return *this;
}
void TDDIODEPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIODEPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "ODEPackages=" << to_string(ODEPackages);
  out << ", " << "ArchitecturePackages=" << to_string(ArchitecturePackages);
  out << ", " << "DependabilityPackages=" << to_string(DependabilityPackages);
  out << ", " << "FailureLogicPackages=" << to_string(FailureLogicPackages);
  out << ", " << "AssuranceCasePackages=" << to_string(AssuranceCasePackages);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIState::~TDDIState() throw() {
}


void TDDIState::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIState::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIState::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIState::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIState::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIState::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIState::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIState::__set_IsInitialState(const bool val) {
  this->IsInitialState = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIState& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIState::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1591;
            ::apache::thrift::protocol::TType _etype1594;
            xfer += iprot->readListBegin(_etype1594, _size1591);
            this->KeyValueMaps.resize(_size1591);
            uint32_t _i1595;
            for (_i1595 = 0; _i1595 < _size1591; ++_i1595)
            {
              xfer += this->KeyValueMaps[_i1595].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsInitialState);
          this->__isset.IsInitialState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIState");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1596;
    for (_iter1596 = this->KeyValueMaps.begin(); _iter1596 != this->KeyValueMaps.end(); ++_iter1596)
    {
      xfer += (*_iter1596).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsInitialState", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->IsInitialState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIState &a, TDDIState &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.IsInitialState, b.IsInitialState);
  swap(a.__isset, b.__isset);
}

TDDIState::TDDIState(const TDDIState& other1597) {
  Id = other1597.Id;
  Name = other1597.Name;
  Description = other1597.Description;
  IsCitation = other1597.IsCitation;
  IsAbstract = other1597.IsAbstract;
  KeyValueMaps = other1597.KeyValueMaps;
  CitedElement = other1597.CitedElement;
  IsInitialState = other1597.IsInitialState;
  __isset = other1597.__isset;
}
TDDIState& TDDIState::operator=(const TDDIState& other1598) {
  Id = other1598.Id;
  Name = other1598.Name;
  Description = other1598.Description;
  IsCitation = other1598.IsCitation;
  IsAbstract = other1598.IsAbstract;
  KeyValueMaps = other1598.KeyValueMaps;
  CitedElement = other1598.CitedElement;
  IsInitialState = other1598.IsInitialState;
  __isset = other1598.__isset;
  return *this;
}
void TDDIState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIState(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "IsInitialState=" << to_string(IsInitialState);
  out << ")";
}


TDDIFailState::~TDDIFailState() throw() {
}


void TDDIFailState::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFailState::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFailState::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFailState::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIFailState::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIFailState::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIFailState::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIFailState::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDIFailState::__set_FailureMode(::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> val) {
  this->FailureMode = val;
}

void TDDIFailState::__set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val) {
  this->ProbabilityDistribution = val;
}

void TDDIFailState::__set_OutputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> val) {
  this->OutputFailure = val;
}

void TDDIFailState::__set_AssociatedStates(const std::vector<TDDIState> & val) {
  this->AssociatedStates = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailState& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailState::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1599;
            ::apache::thrift::protocol::TType _etype1602;
            xfer += iprot->readListBegin(_etype1602, _size1599);
            this->KeyValueMaps.resize(_size1599);
            uint32_t _i1603;
            for (_i1603 = 0; _i1603 < _size1599; ++_i1603)
            {
              xfer += this->KeyValueMaps[_i1603].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureMode) { 
            this->FailureMode = ::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode>(new TDDIFailureMode);
          }
          xfer += this->FailureMode->read(iprot);
          bool wasSet = false;
          if (this->FailureMode->__isset.Id) { wasSet = true; }
          if (this->FailureMode->__isset.Name) { wasSet = true; }
          if (this->FailureMode->__isset.Description) { wasSet = true; }
          if (this->FailureMode->__isset.IsCitation) { wasSet = true; }
          if (this->FailureMode->__isset.IsAbstract) { wasSet = true; }
          if (this->FailureMode->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FailureMode->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->FailureMode.reset(); }
          this->__isset.FailureMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ProbabilityDistribution) { 
            this->ProbabilityDistribution = ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution>(new TDDIProbabilityDistribution);
          }
          xfer += this->ProbabilityDistribution->read(iprot);
          bool wasSet = false;
          if (this->ProbabilityDistribution->__isset.Id) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Name) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Description) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsCitation) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsAbstract) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.CitedElement) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Type) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.ProbDistParams) { wasSet = true; }
          if (!wasSet) { this->ProbabilityDistribution.reset(); }
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->OutputFailure) { 
            this->OutputFailure = ::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure>(new TDDIOutputFailure);
          }
          xfer += this->OutputFailure->read(iprot);
          bool wasSet = false;
          if (this->OutputFailure->__isset.Id) { wasSet = true; }
          if (this->OutputFailure->__isset.Name) { wasSet = true; }
          if (this->OutputFailure->__isset.Description) { wasSet = true; }
          if (this->OutputFailure->__isset.IsCitation) { wasSet = true; }
          if (this->OutputFailure->__isset.IsAbstract) { wasSet = true; }
          if (this->OutputFailure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->OutputFailure->__isset.CitedElement) { wasSet = true; }
          if (this->OutputFailure->__isset.FailureRate) { wasSet = true; }
          if (this->OutputFailure->__isset.FailureMode) { wasSet = true; }
          if (this->OutputFailure->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->OutputFailure->__isset.MinimalCutsets) { wasSet = true; }
          if (!wasSet) { this->OutputFailure.reset(); }
          this->__isset.OutputFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssociatedStates.clear();
            uint32_t _size1604;
            ::apache::thrift::protocol::TType _etype1607;
            xfer += iprot->readListBegin(_etype1607, _size1604);
            this->AssociatedStates.resize(_size1604);
            uint32_t _i1608;
            for (_i1608 = 0; _i1608 < _size1604; ++_i1608)
            {
              xfer += this->AssociatedStates[_i1608].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssociatedStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailState");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1609;
    for (_iter1609 = this->KeyValueMaps.begin(); _iter1609 != this->KeyValueMaps.end(); ++_iter1609)
    {
      xfer += (*_iter1609).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureMode", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->FailureMode) {
    xfer += this->FailureMode->write(oprot); 
  } else {oprot->writeStructBegin("TDDIFailureMode"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  if (this->ProbabilityDistribution) {
    xfer += this->ProbabilityDistribution->write(oprot); 
  } else {oprot->writeStructBegin("TDDIProbabilityDistribution"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OutputFailure", ::apache::thrift::protocol::T_STRUCT, 11);
  if (this->OutputFailure) {
    xfer += this->OutputFailure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIOutputFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssociatedStates", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssociatedStates.size()));
    std::vector<TDDIState> ::const_iterator _iter1610;
    for (_iter1610 = this->AssociatedStates.begin(); _iter1610 != this->AssociatedStates.end(); ++_iter1610)
    {
      xfer += (*_iter1610).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailState &a, TDDIFailState &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureRate, b.FailureRate);
  swap(a.FailureMode, b.FailureMode);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.OutputFailure, b.OutputFailure);
  swap(a.AssociatedStates, b.AssociatedStates);
  swap(a.__isset, b.__isset);
}

TDDIFailState::TDDIFailState(const TDDIFailState& other1611) {
  Id = other1611.Id;
  Name = other1611.Name;
  Description = other1611.Description;
  IsCitation = other1611.IsCitation;
  IsAbstract = other1611.IsAbstract;
  KeyValueMaps = other1611.KeyValueMaps;
  CitedElement = other1611.CitedElement;
  FailureRate = other1611.FailureRate;
  FailureMode = other1611.FailureMode;
  ProbabilityDistribution = other1611.ProbabilityDistribution;
  OutputFailure = other1611.OutputFailure;
  AssociatedStates = other1611.AssociatedStates;
  __isset = other1611.__isset;
}
TDDIFailState& TDDIFailState::operator=(const TDDIFailState& other1612) {
  Id = other1612.Id;
  Name = other1612.Name;
  Description = other1612.Description;
  IsCitation = other1612.IsCitation;
  IsAbstract = other1612.IsAbstract;
  KeyValueMaps = other1612.KeyValueMaps;
  CitedElement = other1612.CitedElement;
  FailureRate = other1612.FailureRate;
  FailureMode = other1612.FailureMode;
  ProbabilityDistribution = other1612.ProbabilityDistribution;
  OutputFailure = other1612.OutputFailure;
  AssociatedStates = other1612.AssociatedStates;
  __isset = other1612.__isset;
  return *this;
}
void TDDIFailState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailState(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "FailureMode=" << to_string(FailureMode);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ", " << "OutputFailure=" << to_string(OutputFailure);
  out << ", " << "AssociatedStates=" << to_string(AssociatedStates);
  out << ")";
}


TDDITransition::~TDDITransition() throw() {
}


void TDDITransition::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDITransition::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDITransition::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDITransition::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITransition::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITransition::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDITransition::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDITransition::__set_Probability(const double val) {
  this->Probability = val;
}

void TDDITransition::__set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val) {
  this->ProbabilityDistribution = val;
}

void TDDITransition::__set_FromFailState(::apache::thrift::stdcxx::shared_ptr<TDDIFailState> val) {
  this->FromFailState = val;
}

void TDDITransition::__set_ToFailState(::apache::thrift::stdcxx::shared_ptr<TDDIFailState> val) {
  this->ToFailState = val;
}

void TDDITransition::__set_FromState(::apache::thrift::stdcxx::shared_ptr<TDDIState> val) {
  this->FromState = val;
}

void TDDITransition::__set_ToState(::apache::thrift::stdcxx::shared_ptr<TDDIState> val) {
  this->ToState = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITransition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITransition::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1613;
            ::apache::thrift::protocol::TType _etype1616;
            xfer += iprot->readListBegin(_etype1616, _size1613);
            this->KeyValueMaps.resize(_size1613);
            uint32_t _i1617;
            for (_i1617 = 0; _i1617 < _size1613; ++_i1617)
            {
              xfer += this->KeyValueMaps[_i1617].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Probability);
          this->__isset.Probability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ProbabilityDistribution) { 
            this->ProbabilityDistribution = ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution>(new TDDIProbabilityDistribution);
          }
          xfer += this->ProbabilityDistribution->read(iprot);
          bool wasSet = false;
          if (this->ProbabilityDistribution->__isset.Id) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Name) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Description) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsCitation) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.IsAbstract) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.CitedElement) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.Type) { wasSet = true; }
          if (this->ProbabilityDistribution->__isset.ProbDistParams) { wasSet = true; }
          if (!wasSet) { this->ProbabilityDistribution.reset(); }
          this->__isset.ProbabilityDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FromFailState) { 
            this->FromFailState = ::apache::thrift::stdcxx::shared_ptr<TDDIFailState>(new TDDIFailState);
          }
          xfer += this->FromFailState->read(iprot);
          bool wasSet = false;
          if (this->FromFailState->__isset.Id) { wasSet = true; }
          if (this->FromFailState->__isset.Name) { wasSet = true; }
          if (this->FromFailState->__isset.Description) { wasSet = true; }
          if (this->FromFailState->__isset.IsCitation) { wasSet = true; }
          if (this->FromFailState->__isset.IsAbstract) { wasSet = true; }
          if (this->FromFailState->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FromFailState->__isset.CitedElement) { wasSet = true; }
          if (this->FromFailState->__isset.FailureRate) { wasSet = true; }
          if (this->FromFailState->__isset.FailureMode) { wasSet = true; }
          if (this->FromFailState->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->FromFailState->__isset.OutputFailure) { wasSet = true; }
          if (this->FromFailState->__isset.AssociatedStates) { wasSet = true; }
          if (!wasSet) { this->FromFailState.reset(); }
          this->__isset.FromFailState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ToFailState) { 
            this->ToFailState = ::apache::thrift::stdcxx::shared_ptr<TDDIFailState>(new TDDIFailState);
          }
          xfer += this->ToFailState->read(iprot);
          bool wasSet = false;
          if (this->ToFailState->__isset.Id) { wasSet = true; }
          if (this->ToFailState->__isset.Name) { wasSet = true; }
          if (this->ToFailState->__isset.Description) { wasSet = true; }
          if (this->ToFailState->__isset.IsCitation) { wasSet = true; }
          if (this->ToFailState->__isset.IsAbstract) { wasSet = true; }
          if (this->ToFailState->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ToFailState->__isset.CitedElement) { wasSet = true; }
          if (this->ToFailState->__isset.FailureRate) { wasSet = true; }
          if (this->ToFailState->__isset.FailureMode) { wasSet = true; }
          if (this->ToFailState->__isset.ProbabilityDistribution) { wasSet = true; }
          if (this->ToFailState->__isset.OutputFailure) { wasSet = true; }
          if (this->ToFailState->__isset.AssociatedStates) { wasSet = true; }
          if (!wasSet) { this->ToFailState.reset(); }
          this->__isset.ToFailState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FromState) { 
            this->FromState = ::apache::thrift::stdcxx::shared_ptr<TDDIState>(new TDDIState);
          }
          xfer += this->FromState->read(iprot);
          bool wasSet = false;
          if (this->FromState->__isset.Id) { wasSet = true; }
          if (this->FromState->__isset.Name) { wasSet = true; }
          if (this->FromState->__isset.Description) { wasSet = true; }
          if (this->FromState->__isset.IsCitation) { wasSet = true; }
          if (this->FromState->__isset.IsAbstract) { wasSet = true; }
          if (this->FromState->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FromState->__isset.CitedElement) { wasSet = true; }
          if (this->FromState->__isset.IsInitialState) { wasSet = true; }
          if (!wasSet) { this->FromState.reset(); }
          this->__isset.FromState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ToState) { 
            this->ToState = ::apache::thrift::stdcxx::shared_ptr<TDDIState>(new TDDIState);
          }
          xfer += this->ToState->read(iprot);
          bool wasSet = false;
          if (this->ToState->__isset.Id) { wasSet = true; }
          if (this->ToState->__isset.Name) { wasSet = true; }
          if (this->ToState->__isset.Description) { wasSet = true; }
          if (this->ToState->__isset.IsCitation) { wasSet = true; }
          if (this->ToState->__isset.IsAbstract) { wasSet = true; }
          if (this->ToState->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ToState->__isset.CitedElement) { wasSet = true; }
          if (this->ToState->__isset.IsInitialState) { wasSet = true; }
          if (!wasSet) { this->ToState.reset(); }
          this->__isset.ToState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITransition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITransition");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1618;
    for (_iter1618 = this->KeyValueMaps.begin(); _iter1618 != this->KeyValueMaps.end(); ++_iter1618)
    {
      xfer += (*_iter1618).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Probability", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->Probability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProbabilityDistribution", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->ProbabilityDistribution) {
    xfer += this->ProbabilityDistribution->write(oprot); 
  } else {oprot->writeStructBegin("TDDIProbabilityDistribution"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FromFailState", ::apache::thrift::protocol::T_STRUCT, 10);
  if (this->FromFailState) {
    xfer += this->FromFailState->write(oprot); 
  } else {oprot->writeStructBegin("TDDIFailState"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ToFailState", ::apache::thrift::protocol::T_STRUCT, 11);
  if (this->ToFailState) {
    xfer += this->ToFailState->write(oprot); 
  } else {oprot->writeStructBegin("TDDIFailState"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FromState", ::apache::thrift::protocol::T_STRUCT, 12);
  if (this->FromState) {
    xfer += this->FromState->write(oprot); 
  } else {oprot->writeStructBegin("TDDIState"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ToState", ::apache::thrift::protocol::T_STRUCT, 13);
  if (this->ToState) {
    xfer += this->ToState->write(oprot); 
  } else {oprot->writeStructBegin("TDDIState"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITransition &a, TDDITransition &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.Probability, b.Probability);
  swap(a.ProbabilityDistribution, b.ProbabilityDistribution);
  swap(a.FromFailState, b.FromFailState);
  swap(a.ToFailState, b.ToFailState);
  swap(a.FromState, b.FromState);
  swap(a.ToState, b.ToState);
  swap(a.__isset, b.__isset);
}

TDDITransition::TDDITransition(const TDDITransition& other1619) {
  Id = other1619.Id;
  Name = other1619.Name;
  Description = other1619.Description;
  IsCitation = other1619.IsCitation;
  IsAbstract = other1619.IsAbstract;
  KeyValueMaps = other1619.KeyValueMaps;
  CitedElement = other1619.CitedElement;
  Probability = other1619.Probability;
  ProbabilityDistribution = other1619.ProbabilityDistribution;
  FromFailState = other1619.FromFailState;
  ToFailState = other1619.ToFailState;
  FromState = other1619.FromState;
  ToState = other1619.ToState;
  __isset = other1619.__isset;
}
TDDITransition& TDDITransition::operator=(const TDDITransition& other1620) {
  Id = other1620.Id;
  Name = other1620.Name;
  Description = other1620.Description;
  IsCitation = other1620.IsCitation;
  IsAbstract = other1620.IsAbstract;
  KeyValueMaps = other1620.KeyValueMaps;
  CitedElement = other1620.CitedElement;
  Probability = other1620.Probability;
  ProbabilityDistribution = other1620.ProbabilityDistribution;
  FromFailState = other1620.FromFailState;
  ToFailState = other1620.ToFailState;
  FromState = other1620.FromState;
  ToState = other1620.ToState;
  __isset = other1620.__isset;
  return *this;
}
void TDDITransition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITransition(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "Probability=" << to_string(Probability);
  out << ", " << "ProbabilityDistribution=" << to_string(ProbabilityDistribution);
  out << ", " << "FromFailState=" << to_string(FromFailState);
  out << ", " << "ToFailState=" << to_string(ToFailState);
  out << ", " << "FromState=" << to_string(FromState);
  out << ", " << "ToState=" << to_string(ToState);
  out << ")";
}


TDDIMarkovArtifactUnion::~TDDIMarkovArtifactUnion() throw() {
}


void TDDIMarkovArtifactUnion::__set_Transition(const TDDITransition& val) {
  this->Transition = val;
__isset.Transition = true;
}

void TDDIMarkovArtifactUnion::__set_State(const TDDIState& val) {
  this->State = val;
__isset.State = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIMarkovArtifactUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMarkovArtifactUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Transition.read(iprot);
          this->__isset.Transition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->State.read(iprot);
          this->__isset.State = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMarkovArtifactUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMarkovArtifactUnion");

  if (this->__isset.Transition) {
    xfer += oprot->writeFieldBegin("Transition", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Transition.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.State) {
    xfer += oprot->writeFieldBegin("State", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->State.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMarkovArtifactUnion &a, TDDIMarkovArtifactUnion &b) {
  using ::std::swap;
  swap(a.Transition, b.Transition);
  swap(a.State, b.State);
  swap(a.__isset, b.__isset);
}

TDDIMarkovArtifactUnion::TDDIMarkovArtifactUnion(const TDDIMarkovArtifactUnion& other1621) {
  Transition = other1621.Transition;
  State = other1621.State;
  __isset = other1621.__isset;
}
TDDIMarkovArtifactUnion& TDDIMarkovArtifactUnion::operator=(const TDDIMarkovArtifactUnion& other1622) {
  Transition = other1622.Transition;
  State = other1622.State;
  __isset = other1622.__isset;
  return *this;
}
void TDDIMarkovArtifactUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMarkovArtifactUnion(";
  out << "Transition="; (__isset.Transition ? (out << to_string(Transition)) : (out << "<null>"));
  out << ", " << "State="; (__isset.State ? (out << to_string(State)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractMarkovArtifact::~TDDIAbstractMarkovArtifact() throw() {
}


void TDDIAbstractMarkovArtifact::__set_UsedMarkovArtifact(const TDDIMarkovArtifactUnion& val) {
  this->UsedMarkovArtifact = val;
}

void TDDIAbstractMarkovArtifact::__set_UsedMarkovArtifactType(const TDDIMarkovArtifactUnionType val) {
  this->UsedMarkovArtifactType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractMarkovArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractMarkovArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedMarkovArtifact.read(iprot);
          this->__isset.UsedMarkovArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1623;
          xfer += iprot->readI32(ecast1623);
          this->UsedMarkovArtifactType = (TDDIMarkovArtifactUnionType)ecast1623;
          this->__isset.UsedMarkovArtifactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractMarkovArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractMarkovArtifact");

  xfer += oprot->writeFieldBegin("UsedMarkovArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedMarkovArtifact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedMarkovArtifactType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedMarkovArtifactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractMarkovArtifact &a, TDDIAbstractMarkovArtifact &b) {
  using ::std::swap;
  swap(a.UsedMarkovArtifact, b.UsedMarkovArtifact);
  swap(a.UsedMarkovArtifactType, b.UsedMarkovArtifactType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractMarkovArtifact::TDDIAbstractMarkovArtifact(const TDDIAbstractMarkovArtifact& other1624) {
  UsedMarkovArtifact = other1624.UsedMarkovArtifact;
  UsedMarkovArtifactType = other1624.UsedMarkovArtifactType;
  __isset = other1624.__isset;
}
TDDIAbstractMarkovArtifact& TDDIAbstractMarkovArtifact::operator=(const TDDIAbstractMarkovArtifact& other1625) {
  UsedMarkovArtifact = other1625.UsedMarkovArtifact;
  UsedMarkovArtifactType = other1625.UsedMarkovArtifactType;
  __isset = other1625.__isset;
  return *this;
}
void TDDIAbstractMarkovArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractMarkovArtifact(";
  out << "UsedMarkovArtifact=" << to_string(UsedMarkovArtifact);
  out << ", " << "UsedMarkovArtifactType=" << to_string(UsedMarkovArtifactType);
  out << ")";
}


TDDIMarkovChainPackageUnion::~TDDIMarkovChainPackageUnion() throw() {
}


void TDDIMarkovChainPackageUnion::__set_MarkovChainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackage> val) {
  this->MarkovChainPackage = val;
__isset.MarkovChainPackage = true;
}

void TDDIMarkovChainPackageUnion::__set_MarkovChainPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackageInterface> val) {
  this->MarkovChainPackageInterface = val;
__isset.MarkovChainPackageInterface = true;
}

void TDDIMarkovChainPackageUnion::__set_MarkovChainPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackageBinding> val) {
  this->MarkovChainPackageBinding = val;
__isset.MarkovChainPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMarkovChainPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MarkovChainPackage) { 
            this->MarkovChainPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackage>(new TDDIMarkovChainPackage);
          }
          xfer += this->MarkovChainPackage->read(iprot);
          bool wasSet = false;
          if (this->MarkovChainPackage->__isset.Id) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.Name) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.Description) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.IsCitation) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.CitedElement) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.FailureAnalysisArtifacts) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.MarkovArtifacts) { wasSet = true; }
          if (this->MarkovChainPackage->__isset.FailStates) { wasSet = true; }
          if (!wasSet) { this->MarkovChainPackage.reset(); }
          this->__isset.MarkovChainPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MarkovChainPackageInterface) { 
            this->MarkovChainPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackageInterface>(new TDDIMarkovChainPackageInterface);
          }
          xfer += this->MarkovChainPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->MarkovChainPackageInterface->__isset.Id) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.Name) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.Description) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.FailureAnalysisArtifacts) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.MarkovArtifacts) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.FailStates) { wasSet = true; }
          if (this->MarkovChainPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->MarkovChainPackageInterface.reset(); }
          this->__isset.MarkovChainPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MarkovChainPackageBinding) { 
            this->MarkovChainPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackageBinding>(new TDDIMarkovChainPackageBinding);
          }
          xfer += this->MarkovChainPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->MarkovChainPackageBinding->__isset.Id) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.Name) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.Description) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.FailureAnalysisArtifacts) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.MarkovArtifacts) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.FailStates) { wasSet = true; }
          if (this->MarkovChainPackageBinding->__isset.ParticipantPackages) { wasSet = true; }
          if (!wasSet) { this->MarkovChainPackageBinding.reset(); }
          this->__isset.MarkovChainPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMarkovChainPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMarkovChainPackageUnion");

  if (this->__isset.MarkovChainPackage) {
    xfer += oprot->writeFieldBegin("MarkovChainPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->MarkovChainPackage) {
      xfer += this->MarkovChainPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMarkovChainPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MarkovChainPackageInterface) {
    xfer += oprot->writeFieldBegin("MarkovChainPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->MarkovChainPackageInterface) {
      xfer += this->MarkovChainPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMarkovChainPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MarkovChainPackageBinding) {
    xfer += oprot->writeFieldBegin("MarkovChainPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->MarkovChainPackageBinding) {
      xfer += this->MarkovChainPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMarkovChainPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMarkovChainPackageUnion &a, TDDIMarkovChainPackageUnion &b) {
  using ::std::swap;
  swap(a.MarkovChainPackage, b.MarkovChainPackage);
  swap(a.MarkovChainPackageInterface, b.MarkovChainPackageInterface);
  swap(a.MarkovChainPackageBinding, b.MarkovChainPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIMarkovChainPackageUnion::TDDIMarkovChainPackageUnion(const TDDIMarkovChainPackageUnion& other1626) {
  MarkovChainPackage = other1626.MarkovChainPackage;
  MarkovChainPackageInterface = other1626.MarkovChainPackageInterface;
  MarkovChainPackageBinding = other1626.MarkovChainPackageBinding;
  __isset = other1626.__isset;
}
TDDIMarkovChainPackageUnion& TDDIMarkovChainPackageUnion::operator=(const TDDIMarkovChainPackageUnion& other1627) {
  MarkovChainPackage = other1627.MarkovChainPackage;
  MarkovChainPackageInterface = other1627.MarkovChainPackageInterface;
  MarkovChainPackageBinding = other1627.MarkovChainPackageBinding;
  __isset = other1627.__isset;
  return *this;
}
void TDDIMarkovChainPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMarkovChainPackageUnion(";
  out << "MarkovChainPackage="; (__isset.MarkovChainPackage ? (out << to_string(MarkovChainPackage)) : (out << "<null>"));
  out << ", " << "MarkovChainPackageInterface="; (__isset.MarkovChainPackageInterface ? (out << to_string(MarkovChainPackageInterface)) : (out << "<null>"));
  out << ", " << "MarkovChainPackageBinding="; (__isset.MarkovChainPackageBinding ? (out << to_string(MarkovChainPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractMarkovChainPackage::~TDDIAbstractMarkovChainPackage() throw() {
}


void TDDIAbstractMarkovChainPackage::__set_UsedMarkovChainPackage(const TDDIMarkovChainPackageUnion& val) {
  this->UsedMarkovChainPackage = val;
}

void TDDIAbstractMarkovChainPackage::__set_UsedMarkovChainPackageType(const TDDIMarkovChainPackageUnionType val) {
  this->UsedMarkovChainPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractMarkovChainPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractMarkovChainPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedMarkovChainPackage.read(iprot);
          this->__isset.UsedMarkovChainPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1628;
          xfer += iprot->readI32(ecast1628);
          this->UsedMarkovChainPackageType = (TDDIMarkovChainPackageUnionType)ecast1628;
          this->__isset.UsedMarkovChainPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractMarkovChainPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractMarkovChainPackage");

  xfer += oprot->writeFieldBegin("UsedMarkovChainPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedMarkovChainPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedMarkovChainPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedMarkovChainPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractMarkovChainPackage &a, TDDIAbstractMarkovChainPackage &b) {
  using ::std::swap;
  swap(a.UsedMarkovChainPackage, b.UsedMarkovChainPackage);
  swap(a.UsedMarkovChainPackageType, b.UsedMarkovChainPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractMarkovChainPackage::TDDIAbstractMarkovChainPackage(const TDDIAbstractMarkovChainPackage& other1629) {
  UsedMarkovChainPackage = other1629.UsedMarkovChainPackage;
  UsedMarkovChainPackageType = other1629.UsedMarkovChainPackageType;
  __isset = other1629.__isset;
}
TDDIAbstractMarkovChainPackage& TDDIAbstractMarkovChainPackage::operator=(const TDDIAbstractMarkovChainPackage& other1630) {
  UsedMarkovChainPackage = other1630.UsedMarkovChainPackage;
  UsedMarkovChainPackageType = other1630.UsedMarkovChainPackageType;
  __isset = other1630.__isset;
  return *this;
}
void TDDIAbstractMarkovChainPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractMarkovChainPackage(";
  out << "UsedMarkovChainPackage=" << to_string(UsedMarkovChainPackage);
  out << ", " << "UsedMarkovChainPackageType=" << to_string(UsedMarkovChainPackageType);
  out << ")";
}


TDDIMarkovChainPackage::~TDDIMarkovChainPackage() throw() {
}


void TDDIMarkovChainPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMarkovChainPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMarkovChainPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMarkovChainPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIMarkovChainPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIMarkovChainPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIMarkovChainPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIMarkovChainPackage::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIMarkovChainPackage::__set_MarkovArtifacts(const std::vector<TDDIAbstractMarkovArtifact> & val) {
  this->MarkovArtifacts = val;
}

void TDDIMarkovChainPackage::__set_FailStates(const std::vector<TDDIFailState> & val) {
  this->FailStates = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMarkovChainPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1631;
            ::apache::thrift::protocol::TType _etype1634;
            xfer += iprot->readListBegin(_etype1634, _size1631);
            this->KeyValueMaps.resize(_size1631);
            uint32_t _i1635;
            for (_i1635 = 0; _i1635 < _size1631; ++_i1635)
            {
              xfer += this->KeyValueMaps[_i1635].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1636;
            ::apache::thrift::protocol::TType _etype1639;
            xfer += iprot->readListBegin(_etype1639, _size1636);
            this->FailureAnalysisArtifacts.resize(_size1636);
            uint32_t _i1640;
            for (_i1640 = 0; _i1640 < _size1636; ++_i1640)
            {
              xfer += this->FailureAnalysisArtifacts[_i1640].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MarkovArtifacts.clear();
            uint32_t _size1641;
            ::apache::thrift::protocol::TType _etype1644;
            xfer += iprot->readListBegin(_etype1644, _size1641);
            this->MarkovArtifacts.resize(_size1641);
            uint32_t _i1645;
            for (_i1645 = 0; _i1645 < _size1641; ++_i1645)
            {
              xfer += this->MarkovArtifacts[_i1645].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MarkovArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailStates.clear();
            uint32_t _size1646;
            ::apache::thrift::protocol::TType _etype1649;
            xfer += iprot->readListBegin(_etype1649, _size1646);
            this->FailStates.resize(_size1646);
            uint32_t _i1650;
            for (_i1650 = 0; _i1650 < _size1646; ++_i1650)
            {
              xfer += this->FailStates[_i1650].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMarkovChainPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMarkovChainPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1651;
    for (_iter1651 = this->KeyValueMaps.begin(); _iter1651 != this->KeyValueMaps.end(); ++_iter1651)
    {
      xfer += (*_iter1651).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1652;
    for (_iter1652 = this->FailureAnalysisArtifacts.begin(); _iter1652 != this->FailureAnalysisArtifacts.end(); ++_iter1652)
    {
      xfer += (*_iter1652).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MarkovArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MarkovArtifacts.size()));
    std::vector<TDDIAbstractMarkovArtifact> ::const_iterator _iter1653;
    for (_iter1653 = this->MarkovArtifacts.begin(); _iter1653 != this->MarkovArtifacts.end(); ++_iter1653)
    {
      xfer += (*_iter1653).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailStates", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailStates.size()));
    std::vector<TDDIFailState> ::const_iterator _iter1654;
    for (_iter1654 = this->FailStates.begin(); _iter1654 != this->FailStates.end(); ++_iter1654)
    {
      xfer += (*_iter1654).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMarkovChainPackage &a, TDDIMarkovChainPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.MarkovArtifacts, b.MarkovArtifacts);
  swap(a.FailStates, b.FailStates);
  swap(a.__isset, b.__isset);
}

TDDIMarkovChainPackage::TDDIMarkovChainPackage(const TDDIMarkovChainPackage& other1655) {
  Id = other1655.Id;
  Name = other1655.Name;
  Description = other1655.Description;
  IsCitation = other1655.IsCitation;
  IsAbstract = other1655.IsAbstract;
  KeyValueMaps = other1655.KeyValueMaps;
  CitedElement = other1655.CitedElement;
  FailureAnalysisArtifacts = other1655.FailureAnalysisArtifacts;
  MarkovArtifacts = other1655.MarkovArtifacts;
  FailStates = other1655.FailStates;
  __isset = other1655.__isset;
}
TDDIMarkovChainPackage& TDDIMarkovChainPackage::operator=(const TDDIMarkovChainPackage& other1656) {
  Id = other1656.Id;
  Name = other1656.Name;
  Description = other1656.Description;
  IsCitation = other1656.IsCitation;
  IsAbstract = other1656.IsAbstract;
  KeyValueMaps = other1656.KeyValueMaps;
  CitedElement = other1656.CitedElement;
  FailureAnalysisArtifacts = other1656.FailureAnalysisArtifacts;
  MarkovArtifacts = other1656.MarkovArtifacts;
  FailStates = other1656.FailStates;
  __isset = other1656.__isset;
  return *this;
}
void TDDIMarkovChainPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMarkovChainPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "MarkovArtifacts=" << to_string(MarkovArtifacts);
  out << ", " << "FailStates=" << to_string(FailStates);
  out << ")";
}


TDDIMarkovChainPackageInterface::~TDDIMarkovChainPackageInterface() throw() {
}


void TDDIMarkovChainPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMarkovChainPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMarkovChainPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMarkovChainPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIMarkovChainPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIMarkovChainPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIMarkovChainPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIMarkovChainPackageInterface::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIMarkovChainPackageInterface::__set_MarkovArtifacts(const std::vector<TDDIAbstractMarkovArtifact> & val) {
  this->MarkovArtifacts = val;
}

void TDDIMarkovChainPackageInterface::__set_FailStates(const std::vector<TDDIFailState> & val) {
  this->FailStates = val;
}

void TDDIMarkovChainPackageInterface::__set_Implements(const TDDIAbstractMarkovChainPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMarkovChainPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1657;
            ::apache::thrift::protocol::TType _etype1660;
            xfer += iprot->readListBegin(_etype1660, _size1657);
            this->KeyValueMaps.resize(_size1657);
            uint32_t _i1661;
            for (_i1661 = 0; _i1661 < _size1657; ++_i1661)
            {
              xfer += this->KeyValueMaps[_i1661].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1662;
            ::apache::thrift::protocol::TType _etype1665;
            xfer += iprot->readListBegin(_etype1665, _size1662);
            this->FailureAnalysisArtifacts.resize(_size1662);
            uint32_t _i1666;
            for (_i1666 = 0; _i1666 < _size1662; ++_i1666)
            {
              xfer += this->FailureAnalysisArtifacts[_i1666].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MarkovArtifacts.clear();
            uint32_t _size1667;
            ::apache::thrift::protocol::TType _etype1670;
            xfer += iprot->readListBegin(_etype1670, _size1667);
            this->MarkovArtifacts.resize(_size1667);
            uint32_t _i1671;
            for (_i1671 = 0; _i1671 < _size1667; ++_i1671)
            {
              xfer += this->MarkovArtifacts[_i1671].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MarkovArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailStates.clear();
            uint32_t _size1672;
            ::apache::thrift::protocol::TType _etype1675;
            xfer += iprot->readListBegin(_etype1675, _size1672);
            this->FailStates.resize(_size1672);
            uint32_t _i1676;
            for (_i1676 = 0; _i1676 < _size1672; ++_i1676)
            {
              xfer += this->FailStates[_i1676].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMarkovChainPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMarkovChainPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1677;
    for (_iter1677 = this->KeyValueMaps.begin(); _iter1677 != this->KeyValueMaps.end(); ++_iter1677)
    {
      xfer += (*_iter1677).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1678;
    for (_iter1678 = this->FailureAnalysisArtifacts.begin(); _iter1678 != this->FailureAnalysisArtifacts.end(); ++_iter1678)
    {
      xfer += (*_iter1678).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MarkovArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MarkovArtifacts.size()));
    std::vector<TDDIAbstractMarkovArtifact> ::const_iterator _iter1679;
    for (_iter1679 = this->MarkovArtifacts.begin(); _iter1679 != this->MarkovArtifacts.end(); ++_iter1679)
    {
      xfer += (*_iter1679).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailStates", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailStates.size()));
    std::vector<TDDIFailState> ::const_iterator _iter1680;
    for (_iter1680 = this->FailStates.begin(); _iter1680 != this->FailStates.end(); ++_iter1680)
    {
      xfer += (*_iter1680).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMarkovChainPackageInterface &a, TDDIMarkovChainPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.MarkovArtifacts, b.MarkovArtifacts);
  swap(a.FailStates, b.FailStates);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIMarkovChainPackageInterface::TDDIMarkovChainPackageInterface(const TDDIMarkovChainPackageInterface& other1681) {
  Id = other1681.Id;
  Name = other1681.Name;
  Description = other1681.Description;
  IsCitation = other1681.IsCitation;
  IsAbstract = other1681.IsAbstract;
  KeyValueMaps = other1681.KeyValueMaps;
  CitedElement = other1681.CitedElement;
  FailureAnalysisArtifacts = other1681.FailureAnalysisArtifacts;
  MarkovArtifacts = other1681.MarkovArtifacts;
  FailStates = other1681.FailStates;
  Implements = other1681.Implements;
  __isset = other1681.__isset;
}
TDDIMarkovChainPackageInterface& TDDIMarkovChainPackageInterface::operator=(const TDDIMarkovChainPackageInterface& other1682) {
  Id = other1682.Id;
  Name = other1682.Name;
  Description = other1682.Description;
  IsCitation = other1682.IsCitation;
  IsAbstract = other1682.IsAbstract;
  KeyValueMaps = other1682.KeyValueMaps;
  CitedElement = other1682.CitedElement;
  FailureAnalysisArtifacts = other1682.FailureAnalysisArtifacts;
  MarkovArtifacts = other1682.MarkovArtifacts;
  FailStates = other1682.FailStates;
  Implements = other1682.Implements;
  __isset = other1682.__isset;
  return *this;
}
void TDDIMarkovChainPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMarkovChainPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "MarkovArtifacts=" << to_string(MarkovArtifacts);
  out << ", " << "FailStates=" << to_string(FailStates);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIMarkovChainPackageBinding::~TDDIMarkovChainPackageBinding() throw() {
}


void TDDIMarkovChainPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMarkovChainPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMarkovChainPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMarkovChainPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIMarkovChainPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIMarkovChainPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIMarkovChainPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIMarkovChainPackageBinding::__set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val) {
  this->FailureAnalysisArtifacts = val;
}

void TDDIMarkovChainPackageBinding::__set_MarkovArtifacts(const std::vector<TDDIAbstractMarkovArtifact> & val) {
  this->MarkovArtifacts = val;
}

void TDDIMarkovChainPackageBinding::__set_FailStates(const std::vector<TDDIFailState> & val) {
  this->FailStates = val;
}

void TDDIMarkovChainPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractMarkovChainPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMarkovChainPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1683;
            ::apache::thrift::protocol::TType _etype1686;
            xfer += iprot->readListBegin(_etype1686, _size1683);
            this->KeyValueMaps.resize(_size1683);
            uint32_t _i1687;
            for (_i1687 = 0; _i1687 < _size1683; ++_i1687)
            {
              xfer += this->KeyValueMaps[_i1687].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureAnalysisArtifacts.clear();
            uint32_t _size1688;
            ::apache::thrift::protocol::TType _etype1691;
            xfer += iprot->readListBegin(_etype1691, _size1688);
            this->FailureAnalysisArtifacts.resize(_size1688);
            uint32_t _i1692;
            for (_i1692 = 0; _i1692 < _size1688; ++_i1692)
            {
              xfer += this->FailureAnalysisArtifacts[_i1692].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureAnalysisArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MarkovArtifacts.clear();
            uint32_t _size1693;
            ::apache::thrift::protocol::TType _etype1696;
            xfer += iprot->readListBegin(_etype1696, _size1693);
            this->MarkovArtifacts.resize(_size1693);
            uint32_t _i1697;
            for (_i1697 = 0; _i1697 < _size1693; ++_i1697)
            {
              xfer += this->MarkovArtifacts[_i1697].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MarkovArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailStates.clear();
            uint32_t _size1698;
            ::apache::thrift::protocol::TType _etype1701;
            xfer += iprot->readListBegin(_etype1701, _size1698);
            this->FailStates.resize(_size1698);
            uint32_t _i1702;
            for (_i1702 = 0; _i1702 < _size1698; ++_i1702)
            {
              xfer += this->FailStates[_i1702].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size1703;
            ::apache::thrift::protocol::TType _etype1706;
            xfer += iprot->readListBegin(_etype1706, _size1703);
            this->ParticipantPackages.resize(_size1703);
            uint32_t _i1707;
            for (_i1707 = 0; _i1707 < _size1703; ++_i1707)
            {
              xfer += this->ParticipantPackages[_i1707].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMarkovChainPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMarkovChainPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1708;
    for (_iter1708 = this->KeyValueMaps.begin(); _iter1708 != this->KeyValueMaps.end(); ++_iter1708)
    {
      xfer += (*_iter1708).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureAnalysisArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureAnalysisArtifacts.size()));
    std::vector<TDDIAbstractFailureAnalysisArtifactRef> ::const_iterator _iter1709;
    for (_iter1709 = this->FailureAnalysisArtifacts.begin(); _iter1709 != this->FailureAnalysisArtifacts.end(); ++_iter1709)
    {
      xfer += (*_iter1709).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MarkovArtifacts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MarkovArtifacts.size()));
    std::vector<TDDIAbstractMarkovArtifact> ::const_iterator _iter1710;
    for (_iter1710 = this->MarkovArtifacts.begin(); _iter1710 != this->MarkovArtifacts.end(); ++_iter1710)
    {
      xfer += (*_iter1710).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailStates", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailStates.size()));
    std::vector<TDDIFailState> ::const_iterator _iter1711;
    for (_iter1711 = this->FailStates.begin(); _iter1711 != this->FailStates.end(); ++_iter1711)
    {
      xfer += (*_iter1711).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractMarkovChainPackageRef> ::const_iterator _iter1712;
    for (_iter1712 = this->ParticipantPackages.begin(); _iter1712 != this->ParticipantPackages.end(); ++_iter1712)
    {
      xfer += (*_iter1712).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMarkovChainPackageBinding &a, TDDIMarkovChainPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.FailureAnalysisArtifacts, b.FailureAnalysisArtifacts);
  swap(a.MarkovArtifacts, b.MarkovArtifacts);
  swap(a.FailStates, b.FailStates);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIMarkovChainPackageBinding::TDDIMarkovChainPackageBinding(const TDDIMarkovChainPackageBinding& other1713) {
  Id = other1713.Id;
  Name = other1713.Name;
  Description = other1713.Description;
  IsCitation = other1713.IsCitation;
  IsAbstract = other1713.IsAbstract;
  KeyValueMaps = other1713.KeyValueMaps;
  CitedElement = other1713.CitedElement;
  FailureAnalysisArtifacts = other1713.FailureAnalysisArtifacts;
  MarkovArtifacts = other1713.MarkovArtifacts;
  FailStates = other1713.FailStates;
  ParticipantPackages = other1713.ParticipantPackages;
  __isset = other1713.__isset;
}
TDDIMarkovChainPackageBinding& TDDIMarkovChainPackageBinding::operator=(const TDDIMarkovChainPackageBinding& other1714) {
  Id = other1714.Id;
  Name = other1714.Name;
  Description = other1714.Description;
  IsCitation = other1714.IsCitation;
  IsAbstract = other1714.IsAbstract;
  KeyValueMaps = other1714.KeyValueMaps;
  CitedElement = other1714.CitedElement;
  FailureAnalysisArtifacts = other1714.FailureAnalysisArtifacts;
  MarkovArtifacts = other1714.MarkovArtifacts;
  FailStates = other1714.FailStates;
  ParticipantPackages = other1714.ParticipantPackages;
  __isset = other1714.__isset;
  return *this;
}
void TDDIMarkovChainPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMarkovChainPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "FailureAnalysisArtifacts=" << to_string(FailureAnalysisArtifacts);
  out << ", " << "MarkovArtifacts=" << to_string(MarkovArtifacts);
  out << ", " << "FailStates=" << to_string(FailStates);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDILegalContract::~TDDILegalContract() throw() {
}


void TDDILegalContract::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDILegalContract::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDILegalContract::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDILegalContract::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDILegalContract::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDILegalContract::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDILegalContract::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILegalContract& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILegalContract::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1715;
            ::apache::thrift::protocol::TType _etype1718;
            xfer += iprot->readListBegin(_etype1718, _size1715);
            this->KeyValueMaps.resize(_size1715);
            uint32_t _i1719;
            for (_i1719 = 0; _i1719 < _size1715; ++_i1719)
            {
              xfer += this->KeyValueMaps[_i1719].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILegalContract::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILegalContract");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1720;
    for (_iter1720 = this->KeyValueMaps.begin(); _iter1720 != this->KeyValueMaps.end(); ++_iter1720)
    {
      xfer += (*_iter1720).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILegalContract &a, TDDILegalContract &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.__isset, b.__isset);
}

TDDILegalContract::TDDILegalContract(const TDDILegalContract& other1721) {
  Id = other1721.Id;
  Name = other1721.Name;
  Description = other1721.Description;
  IsCitation = other1721.IsCitation;
  IsAbstract = other1721.IsAbstract;
  KeyValueMaps = other1721.KeyValueMaps;
  CitedElement = other1721.CitedElement;
  __isset = other1721.__isset;
}
TDDILegalContract& TDDILegalContract::operator=(const TDDILegalContract& other1722) {
  Id = other1722.Id;
  Name = other1722.Name;
  Description = other1722.Description;
  IsCitation = other1722.IsCitation;
  IsAbstract = other1722.IsAbstract;
  KeyValueMaps = other1722.KeyValueMaps;
  CitedElement = other1722.CitedElement;
  __isset = other1722.__isset;
  return *this;
}
void TDDILegalContract::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILegalContract(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ")";
}


TDDIRequirementPackageUnion::~TDDIRequirementPackageUnion() throw() {
}


void TDDIRequirementPackageUnion::__set_RequirementPackage(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> val) {
  this->RequirementPackage = val;
__isset.RequirementPackage = true;
}

void TDDIRequirementPackageUnion::__set_RequirementPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackageInterface> val) {
  this->RequirementPackageInterface = val;
__isset.RequirementPackageInterface = true;
}

void TDDIRequirementPackageUnion::__set_RequirementPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackageBinding> val) {
  this->RequirementPackageBinding = val;
__isset.RequirementPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRequirementPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementPackage) { 
            this->RequirementPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage>(new TDDIRequirementPackage);
          }
          xfer += this->RequirementPackage->read(iprot);
          bool wasSet = false;
          if (this->RequirementPackage->__isset.Id) { wasSet = true; }
          if (this->RequirementPackage->__isset.Name) { wasSet = true; }
          if (this->RequirementPackage->__isset.Description) { wasSet = true; }
          if (this->RequirementPackage->__isset.IsCitation) { wasSet = true; }
          if (this->RequirementPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->RequirementPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->RequirementPackage->__isset.CitedElement) { wasSet = true; }
          if (this->RequirementPackage->__isset.RequirementArtifacts) { wasSet = true; }
          if (!wasSet) { this->RequirementPackage.reset(); }
          this->__isset.RequirementPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementPackageInterface) { 
            this->RequirementPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackageInterface>(new TDDIRequirementPackageInterface);
          }
          xfer += this->RequirementPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->RequirementPackageInterface->__isset.Id) { wasSet = true; }
          if (this->RequirementPackageInterface->__isset.Name) { wasSet = true; }
          if (this->RequirementPackageInterface->__isset.Description) { wasSet = true; }
          if (this->RequirementPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->RequirementPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->RequirementPackageInterface->__isset.KeyValueMaps) { wasSet = true; }
          if (this->RequirementPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->RequirementPackageInterface->__isset.RequirementArtifacts) { wasSet = true; }
          if (this->RequirementPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->RequirementPackageInterface.reset(); }
          this->__isset.RequirementPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementPackageBinding) { 
            this->RequirementPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackageBinding>(new TDDIRequirementPackageBinding);
          }
          xfer += this->RequirementPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->RequirementPackageBinding->__isset.Id) { wasSet = true; }
          if (this->RequirementPackageBinding->__isset.Name) { wasSet = true; }
          if (this->RequirementPackageBinding->__isset.Description) { wasSet = true; }
          if (this->RequirementPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->RequirementPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->RequirementPackageBinding->__isset.KeyValueMaps) { wasSet = true; }
          if (this->RequirementPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->RequirementPackageBinding->__isset.RequirementArtifacts) { wasSet = true; }
          if (this->RequirementPackageBinding->__isset.ParticipantPackages) { wasSet = true; }
          if (!wasSet) { this->RequirementPackageBinding.reset(); }
          this->__isset.RequirementPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRequirementPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRequirementPackageUnion");

  if (this->__isset.RequirementPackage) {
    xfer += oprot->writeFieldBegin("RequirementPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->RequirementPackage) {
      xfer += this->RequirementPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIRequirementPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RequirementPackageInterface) {
    xfer += oprot->writeFieldBegin("RequirementPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->RequirementPackageInterface) {
      xfer += this->RequirementPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIRequirementPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RequirementPackageBinding) {
    xfer += oprot->writeFieldBegin("RequirementPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->RequirementPackageBinding) {
      xfer += this->RequirementPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIRequirementPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRequirementPackageUnion &a, TDDIRequirementPackageUnion &b) {
  using ::std::swap;
  swap(a.RequirementPackage, b.RequirementPackage);
  swap(a.RequirementPackageInterface, b.RequirementPackageInterface);
  swap(a.RequirementPackageBinding, b.RequirementPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIRequirementPackageUnion::TDDIRequirementPackageUnion(const TDDIRequirementPackageUnion& other1723) {
  RequirementPackage = other1723.RequirementPackage;
  RequirementPackageInterface = other1723.RequirementPackageInterface;
  RequirementPackageBinding = other1723.RequirementPackageBinding;
  __isset = other1723.__isset;
}
TDDIRequirementPackageUnion& TDDIRequirementPackageUnion::operator=(const TDDIRequirementPackageUnion& other1724) {
  RequirementPackage = other1724.RequirementPackage;
  RequirementPackageInterface = other1724.RequirementPackageInterface;
  RequirementPackageBinding = other1724.RequirementPackageBinding;
  __isset = other1724.__isset;
  return *this;
}
void TDDIRequirementPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRequirementPackageUnion(";
  out << "RequirementPackage="; (__isset.RequirementPackage ? (out << to_string(RequirementPackage)) : (out << "<null>"));
  out << ", " << "RequirementPackageInterface="; (__isset.RequirementPackageInterface ? (out << to_string(RequirementPackageInterface)) : (out << "<null>"));
  out << ", " << "RequirementPackageBinding="; (__isset.RequirementPackageBinding ? (out << to_string(RequirementPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractRequirementPackage::~TDDIAbstractRequirementPackage() throw() {
}


void TDDIAbstractRequirementPackage::__set_UsedRequirementPackage(const TDDIRequirementPackageUnion& val) {
  this->UsedRequirementPackage = val;
}

void TDDIAbstractRequirementPackage::__set_UsedRequirementPackageType(const TDDIRequirementPackageUnionType val) {
  this->UsedRequirementPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRequirementPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedRequirementPackage.read(iprot);
          this->__isset.UsedRequirementPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1725;
          xfer += iprot->readI32(ecast1725);
          this->UsedRequirementPackageType = (TDDIRequirementPackageUnionType)ecast1725;
          this->__isset.UsedRequirementPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRequirementPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRequirementPackage");

  xfer += oprot->writeFieldBegin("UsedRequirementPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedRequirementPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedRequirementPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedRequirementPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRequirementPackage &a, TDDIAbstractRequirementPackage &b) {
  using ::std::swap;
  swap(a.UsedRequirementPackage, b.UsedRequirementPackage);
  swap(a.UsedRequirementPackageType, b.UsedRequirementPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRequirementPackage::TDDIAbstractRequirementPackage(const TDDIAbstractRequirementPackage& other1726) {
  UsedRequirementPackage = other1726.UsedRequirementPackage;
  UsedRequirementPackageType = other1726.UsedRequirementPackageType;
  __isset = other1726.__isset;
}
TDDIAbstractRequirementPackage& TDDIAbstractRequirementPackage::operator=(const TDDIAbstractRequirementPackage& other1727) {
  UsedRequirementPackage = other1727.UsedRequirementPackage;
  UsedRequirementPackageType = other1727.UsedRequirementPackageType;
  __isset = other1727.__isset;
  return *this;
}
void TDDIAbstractRequirementPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRequirementPackage(";
  out << "UsedRequirementPackage=" << to_string(UsedRequirementPackage);
  out << ", " << "UsedRequirementPackageType=" << to_string(UsedRequirementPackageType);
  out << ")";
}


TDDIRequirementPackage::~TDDIRequirementPackage() throw() {
}


void TDDIRequirementPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIRequirementPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIRequirementPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIRequirementPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIRequirementPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIRequirementPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIRequirementPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIRequirementPackage::__set_RequirementArtifacts(const std::vector<TDDIAbstractRequirementArtifactRef> & val) {
  this->RequirementArtifacts = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRequirementPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1728;
            ::apache::thrift::protocol::TType _etype1731;
            xfer += iprot->readListBegin(_etype1731, _size1728);
            this->KeyValueMaps.resize(_size1728);
            uint32_t _i1732;
            for (_i1732 = 0; _i1732 < _size1728; ++_i1732)
            {
              xfer += this->KeyValueMaps[_i1732].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RequirementArtifacts.clear();
            uint32_t _size1733;
            ::apache::thrift::protocol::TType _etype1736;
            xfer += iprot->readListBegin(_etype1736, _size1733);
            this->RequirementArtifacts.resize(_size1733);
            uint32_t _i1737;
            for (_i1737 = 0; _i1737 < _size1733; ++_i1737)
            {
              xfer += this->RequirementArtifacts[_i1737].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RequirementArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRequirementPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRequirementPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1738;
    for (_iter1738 = this->KeyValueMaps.begin(); _iter1738 != this->KeyValueMaps.end(); ++_iter1738)
    {
      xfer += (*_iter1738).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RequirementArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RequirementArtifacts.size()));
    std::vector<TDDIAbstractRequirementArtifactRef> ::const_iterator _iter1739;
    for (_iter1739 = this->RequirementArtifacts.begin(); _iter1739 != this->RequirementArtifacts.end(); ++_iter1739)
    {
      xfer += (*_iter1739).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRequirementPackage &a, TDDIRequirementPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.RequirementArtifacts, b.RequirementArtifacts);
  swap(a.__isset, b.__isset);
}

TDDIRequirementPackage::TDDIRequirementPackage(const TDDIRequirementPackage& other1740) {
  Id = other1740.Id;
  Name = other1740.Name;
  Description = other1740.Description;
  IsCitation = other1740.IsCitation;
  IsAbstract = other1740.IsAbstract;
  KeyValueMaps = other1740.KeyValueMaps;
  CitedElement = other1740.CitedElement;
  RequirementArtifacts = other1740.RequirementArtifacts;
  __isset = other1740.__isset;
}
TDDIRequirementPackage& TDDIRequirementPackage::operator=(const TDDIRequirementPackage& other1741) {
  Id = other1741.Id;
  Name = other1741.Name;
  Description = other1741.Description;
  IsCitation = other1741.IsCitation;
  IsAbstract = other1741.IsAbstract;
  KeyValueMaps = other1741.KeyValueMaps;
  CitedElement = other1741.CitedElement;
  RequirementArtifacts = other1741.RequirementArtifacts;
  __isset = other1741.__isset;
  return *this;
}
void TDDIRequirementPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRequirementPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "RequirementArtifacts=" << to_string(RequirementArtifacts);
  out << ")";
}


TDDIRequirementPackageInterface::~TDDIRequirementPackageInterface() throw() {
}


void TDDIRequirementPackageInterface::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIRequirementPackageInterface::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIRequirementPackageInterface::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIRequirementPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIRequirementPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIRequirementPackageInterface::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIRequirementPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIRequirementPackageInterface::__set_RequirementArtifacts(const std::vector<TDDIAbstractRequirementArtifactRef> & val) {
  this->RequirementArtifacts = val;
}

void TDDIRequirementPackageInterface::__set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementPackage> val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRequirementPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1742;
            ::apache::thrift::protocol::TType _etype1745;
            xfer += iprot->readListBegin(_etype1745, _size1742);
            this->KeyValueMaps.resize(_size1742);
            uint32_t _i1746;
            for (_i1746 = 0; _i1746 < _size1742; ++_i1746)
            {
              xfer += this->KeyValueMaps[_i1746].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RequirementArtifacts.clear();
            uint32_t _size1747;
            ::apache::thrift::protocol::TType _etype1750;
            xfer += iprot->readListBegin(_etype1750, _size1747);
            this->RequirementArtifacts.resize(_size1747);
            uint32_t _i1751;
            for (_i1751 = 0; _i1751 < _size1747; ++_i1751)
            {
              xfer += this->RequirementArtifacts[_i1751].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RequirementArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Implements) { 
            this->Implements = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementPackage>(new TDDIAbstractRequirementPackage);
          }
          xfer += this->Implements->read(iprot);
          bool wasSet = false;
          if (this->Implements->__isset.UsedRequirementPackage) { wasSet = true; }
          if (this->Implements->__isset.UsedRequirementPackageType) { wasSet = true; }
          if (!wasSet) { this->Implements.reset(); }
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRequirementPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRequirementPackageInterface");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1752;
    for (_iter1752 = this->KeyValueMaps.begin(); _iter1752 != this->KeyValueMaps.end(); ++_iter1752)
    {
      xfer += (*_iter1752).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RequirementArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RequirementArtifacts.size()));
    std::vector<TDDIAbstractRequirementArtifactRef> ::const_iterator _iter1753;
    for (_iter1753 = this->RequirementArtifacts.begin(); _iter1753 != this->RequirementArtifacts.end(); ++_iter1753)
    {
      xfer += (*_iter1753).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 9);
  if (this->Implements) {
    xfer += this->Implements->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractRequirementPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRequirementPackageInterface &a, TDDIRequirementPackageInterface &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.RequirementArtifacts, b.RequirementArtifacts);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIRequirementPackageInterface::TDDIRequirementPackageInterface(const TDDIRequirementPackageInterface& other1754) {
  Id = other1754.Id;
  Name = other1754.Name;
  Description = other1754.Description;
  IsCitation = other1754.IsCitation;
  IsAbstract = other1754.IsAbstract;
  KeyValueMaps = other1754.KeyValueMaps;
  CitedElement = other1754.CitedElement;
  RequirementArtifacts = other1754.RequirementArtifacts;
  Implements = other1754.Implements;
  __isset = other1754.__isset;
}
TDDIRequirementPackageInterface& TDDIRequirementPackageInterface::operator=(const TDDIRequirementPackageInterface& other1755) {
  Id = other1755.Id;
  Name = other1755.Name;
  Description = other1755.Description;
  IsCitation = other1755.IsCitation;
  IsAbstract = other1755.IsAbstract;
  KeyValueMaps = other1755.KeyValueMaps;
  CitedElement = other1755.CitedElement;
  RequirementArtifacts = other1755.RequirementArtifacts;
  Implements = other1755.Implements;
  __isset = other1755.__isset;
  return *this;
}
void TDDIRequirementPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRequirementPackageInterface(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "RequirementArtifacts=" << to_string(RequirementArtifacts);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIRequirementPackageBinding::~TDDIRequirementPackageBinding() throw() {
}


void TDDIRequirementPackageBinding::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIRequirementPackageBinding::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIRequirementPackageBinding::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIRequirementPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIRequirementPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIRequirementPackageBinding::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDIRequirementPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDIRequirementPackageBinding::__set_RequirementArtifacts(const std::vector<TDDIAbstractRequirementArtifactRef> & val) {
  this->RequirementArtifacts = val;
}

void TDDIRequirementPackageBinding::__set_ParticipantPackages(const std::vector<TDDIAbstractRequirementPackageRef> & val) {
  this->ParticipantPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRequirementPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1756;
            ::apache::thrift::protocol::TType _etype1759;
            xfer += iprot->readListBegin(_etype1759, _size1756);
            this->KeyValueMaps.resize(_size1756);
            uint32_t _i1760;
            for (_i1760 = 0; _i1760 < _size1756; ++_i1760)
            {
              xfer += this->KeyValueMaps[_i1760].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RequirementArtifacts.clear();
            uint32_t _size1761;
            ::apache::thrift::protocol::TType _etype1764;
            xfer += iprot->readListBegin(_etype1764, _size1761);
            this->RequirementArtifacts.resize(_size1761);
            uint32_t _i1765;
            for (_i1765 = 0; _i1765 < _size1761; ++_i1765)
            {
              xfer += this->RequirementArtifacts[_i1765].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RequirementArtifacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackages.clear();
            uint32_t _size1766;
            ::apache::thrift::protocol::TType _etype1769;
            xfer += iprot->readListBegin(_etype1769, _size1766);
            this->ParticipantPackages.resize(_size1766);
            uint32_t _i1770;
            for (_i1770 = 0; _i1770 < _size1766; ++_i1770)
            {
              xfer += this->ParticipantPackages[_i1770].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRequirementPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRequirementPackageBinding");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1771;
    for (_iter1771 = this->KeyValueMaps.begin(); _iter1771 != this->KeyValueMaps.end(); ++_iter1771)
    {
      xfer += (*_iter1771).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RequirementArtifacts", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RequirementArtifacts.size()));
    std::vector<TDDIAbstractRequirementArtifactRef> ::const_iterator _iter1772;
    for (_iter1772 = this->RequirementArtifacts.begin(); _iter1772 != this->RequirementArtifacts.end(); ++_iter1772)
    {
      xfer += (*_iter1772).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackages.size()));
    std::vector<TDDIAbstractRequirementPackageRef> ::const_iterator _iter1773;
    for (_iter1773 = this->ParticipantPackages.begin(); _iter1773 != this->ParticipantPackages.end(); ++_iter1773)
    {
      xfer += (*_iter1773).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRequirementPackageBinding &a, TDDIRequirementPackageBinding &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.RequirementArtifacts, b.RequirementArtifacts);
  swap(a.ParticipantPackages, b.ParticipantPackages);
  swap(a.__isset, b.__isset);
}

TDDIRequirementPackageBinding::TDDIRequirementPackageBinding(const TDDIRequirementPackageBinding& other1774) {
  Id = other1774.Id;
  Name = other1774.Name;
  Description = other1774.Description;
  IsCitation = other1774.IsCitation;
  IsAbstract = other1774.IsAbstract;
  KeyValueMaps = other1774.KeyValueMaps;
  CitedElement = other1774.CitedElement;
  RequirementArtifacts = other1774.RequirementArtifacts;
  ParticipantPackages = other1774.ParticipantPackages;
  __isset = other1774.__isset;
}
TDDIRequirementPackageBinding& TDDIRequirementPackageBinding::operator=(const TDDIRequirementPackageBinding& other1775) {
  Id = other1775.Id;
  Name = other1775.Name;
  Description = other1775.Description;
  IsCitation = other1775.IsCitation;
  IsAbstract = other1775.IsAbstract;
  KeyValueMaps = other1775.KeyValueMaps;
  CitedElement = other1775.CitedElement;
  RequirementArtifacts = other1775.RequirementArtifacts;
  ParticipantPackages = other1775.ParticipantPackages;
  __isset = other1775.__isset;
  return *this;
}
void TDDIRequirementPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRequirementPackageBinding(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "RequirementArtifacts=" << to_string(RequirementArtifacts);
  out << ", " << "ParticipantPackages=" << to_string(ParticipantPackages);
  out << ")";
}


TDDIRequirementSourceUnion::~TDDIRequirementSourceUnion() throw() {
}


void TDDIRequirementSourceUnion::__set_LegalContract(const TDDILegalContract& val) {
  this->LegalContract = val;
__isset.LegalContract = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIRequirementSourceUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRequirementSourceUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->LegalContract.read(iprot);
          this->__isset.LegalContract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRequirementSourceUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRequirementSourceUnion");

  if (this->__isset.LegalContract) {
    xfer += oprot->writeFieldBegin("LegalContract", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->LegalContract.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRequirementSourceUnion &a, TDDIRequirementSourceUnion &b) {
  using ::std::swap;
  swap(a.LegalContract, b.LegalContract);
  swap(a.__isset, b.__isset);
}

TDDIRequirementSourceUnion::TDDIRequirementSourceUnion(const TDDIRequirementSourceUnion& other1776) {
  LegalContract = other1776.LegalContract;
  __isset = other1776.__isset;
}
TDDIRequirementSourceUnion& TDDIRequirementSourceUnion::operator=(const TDDIRequirementSourceUnion& other1777) {
  LegalContract = other1777.LegalContract;
  __isset = other1777.__isset;
  return *this;
}
void TDDIRequirementSourceUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRequirementSourceUnion(";
  out << "LegalContract="; (__isset.LegalContract ? (out << to_string(LegalContract)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractRequirementSource::~TDDIAbstractRequirementSource() throw() {
}


void TDDIAbstractRequirementSource::__set_UsedRequirementSource(const TDDIRequirementSourceUnion& val) {
  this->UsedRequirementSource = val;
}

void TDDIAbstractRequirementSource::__set_UsedRequirementSourceType(const TDDIRequirementArtifactUnionType val) {
  this->UsedRequirementSourceType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementSource& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRequirementSource::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedRequirementSource.read(iprot);
          this->__isset.UsedRequirementSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1778;
          xfer += iprot->readI32(ecast1778);
          this->UsedRequirementSourceType = (TDDIRequirementArtifactUnionType)ecast1778;
          this->__isset.UsedRequirementSourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRequirementSource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRequirementSource");

  xfer += oprot->writeFieldBegin("UsedRequirementSource", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedRequirementSource.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedRequirementSourceType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedRequirementSourceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRequirementSource &a, TDDIAbstractRequirementSource &b) {
  using ::std::swap;
  swap(a.UsedRequirementSource, b.UsedRequirementSource);
  swap(a.UsedRequirementSourceType, b.UsedRequirementSourceType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRequirementSource::TDDIAbstractRequirementSource(const TDDIAbstractRequirementSource& other1779) {
  UsedRequirementSource = other1779.UsedRequirementSource;
  UsedRequirementSourceType = other1779.UsedRequirementSourceType;
  __isset = other1779.__isset;
}
TDDIAbstractRequirementSource& TDDIAbstractRequirementSource::operator=(const TDDIAbstractRequirementSource& other1780) {
  UsedRequirementSource = other1780.UsedRequirementSource;
  UsedRequirementSourceType = other1780.UsedRequirementSourceType;
  __isset = other1780.__isset;
  return *this;
}
void TDDIAbstractRequirementSource::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRequirementSource(";
  out << "UsedRequirementSource=" << to_string(UsedRequirementSource);
  out << ", " << "UsedRequirementSourceType=" << to_string(UsedRequirementSourceType);
  out << ")";
}


TDDISafetyRequirement::~TDDISafetyRequirement() throw() {
}


void TDDISafetyRequirement::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISafetyRequirement::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISafetyRequirement::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISafetyRequirement::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDISafetyRequirement::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDISafetyRequirement::__set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val) {
  this->KeyValueMaps = val;
}

void TDDISafetyRequirement::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val) {
  this->CitedElement = val;
}

void TDDISafetyRequirement::__set_DecompositionArgument(const std::string& val) {
  this->DecompositionArgument = val;
}

void TDDISafetyRequirement::__set_RefinedRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->RefinedRequirements = val;
}

void TDDISafetyRequirement::__set_RequirementSource(const TDDIAbstractRequirementSource& val) {
  this->RequirementSource = val;
}

void TDDISafetyRequirement::__set_Measures(const std::vector<TDDIAbstractMeasureRef> & val) {
  this->Measures = val;
}

void TDDISafetyRequirement::__set_FailureModes(const std::vector<TDDIAbstractFailureRef> & val) {
  this->FailureModes = val;
}

void TDDISafetyRequirement::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISafetyRequirement::__set_MaintenanceProcedures(const std::vector<TDDIMaintenanceProcedureRef> & val) {
  this->MaintenanceProcedures = val;
}

void TDDISafetyRequirement::__set_Hazards(const std::vector<TDDIHazardRef> & val) {
  this->Hazards = val;
}

void TDDISafetyRequirement::__set_FailureReactionTime(const double val) {
  this->FailureReactionTime = val;
}

void TDDISafetyRequirement::__set_FailureDetectionTime(const double val) {
  this->FailureDetectionTime = val;
}

void TDDISafetyRequirement::__set_FailureLatencyTime(const double val) {
  this->FailureLatencyTime = val;
}

void TDDISafetyRequirement::__set_IsSafetyGoal(const bool val) {
  this->IsSafetyGoal = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISafetyRequirement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISafetyRequirement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1781;
            ::apache::thrift::protocol::TType _etype1784;
            xfer += iprot->readListBegin(_etype1784, _size1781);
            this->KeyValueMaps.resize(_size1781);
            uint32_t _i1785;
            for (_i1785 = 0; _i1785 < _size1781; ++_i1785)
            {
              xfer += this->KeyValueMaps[_i1785].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement>(new TDDIAbstractBaseElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedBaseElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedBaseElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DecompositionArgument);
          this->__isset.DecompositionArgument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RefinedRequirements.clear();
            uint32_t _size1786;
            ::apache::thrift::protocol::TType _etype1789;
            xfer += iprot->readListBegin(_etype1789, _size1786);
            this->RefinedRequirements.resize(_size1786);
            uint32_t _i1790;
            for (_i1790 = 0; _i1790 < _size1786; ++_i1790)
            {
              xfer += this->RefinedRequirements[_i1790].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RefinedRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->RequirementSource.read(iprot);
          this->__isset.RequirementSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Measures.clear();
            uint32_t _size1791;
            ::apache::thrift::protocol::TType _etype1794;
            xfer += iprot->readListBegin(_etype1794, _size1791);
            this->Measures.resize(_size1791);
            uint32_t _i1795;
            for (_i1795 = 0; _i1795 < _size1791; ++_i1795)
            {
              xfer += this->Measures[_i1795].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Measures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModes.clear();
            uint32_t _size1796;
            ::apache::thrift::protocol::TType _etype1799;
            xfer += iprot->readListBegin(_etype1799, _size1796);
            this->FailureModes.resize(_size1796);
            uint32_t _i1800;
            for (_i1800 = 0; _i1800 < _size1796; ++_i1800)
            {
              xfer += this->FailureModes[_i1800].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceLevel->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AssuranceLevel->__isset.CitedElement) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MaintenanceProcedures.clear();
            uint32_t _size1801;
            ::apache::thrift::protocol::TType _etype1804;
            xfer += iprot->readListBegin(_etype1804, _size1801);
            this->MaintenanceProcedures.resize(_size1801);
            uint32_t _i1805;
            for (_i1805 = 0; _i1805 < _size1801; ++_i1805)
            {
              xfer += this->MaintenanceProcedures[_i1805].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MaintenanceProcedures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Hazards.clear();
            uint32_t _size1806;
            ::apache::thrift::protocol::TType _etype1809;
            xfer += iprot->readListBegin(_etype1809, _size1806);
            this->Hazards.resize(_size1806);
            uint32_t _i1810;
            for (_i1810 = 0; _i1810 < _size1806; ++_i1810)
            {
              xfer += this->Hazards[_i1810].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Hazards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureReactionTime);
          this->__isset.FailureReactionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureDetectionTime);
          this->__isset.FailureDetectionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureLatencyTime);
          this->__isset.FailureLatencyTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsSafetyGoal);
          this->__isset.IsSafetyGoal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISafetyRequirement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISafetyRequirement");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMapRef> ::const_iterator _iter1811;
    for (_iter1811 = this->KeyValueMaps.begin(); _iter1811 != this->KeyValueMaps.end(); ++_iter1811)
    {
      xfer += (*_iter1811).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractBaseElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DecompositionArgument", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->DecompositionArgument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RefinedRequirements", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RefinedRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter1812;
    for (_iter1812 = this->RefinedRequirements.begin(); _iter1812 != this->RefinedRequirements.end(); ++_iter1812)
    {
      xfer += (*_iter1812).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RequirementSource", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->RequirementSource.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Measures", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Measures.size()));
    std::vector<TDDIAbstractMeasureRef> ::const_iterator _iter1813;
    for (_iter1813 = this->Measures.begin(); _iter1813 != this->Measures.end(); ++_iter1813)
    {
      xfer += (*_iter1813).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModes", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModes.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter1814;
    for (_iter1814 = this->FailureModes.begin(); _iter1814 != this->FailureModes.end(); ++_iter1814)
    {
      xfer += (*_iter1814).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 13);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaintenanceProcedures", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MaintenanceProcedures.size()));
    std::vector<TDDIMaintenanceProcedureRef> ::const_iterator _iter1815;
    for (_iter1815 = this->MaintenanceProcedures.begin(); _iter1815 != this->MaintenanceProcedures.end(); ++_iter1815)
    {
      xfer += (*_iter1815).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Hazards", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Hazards.size()));
    std::vector<TDDIHazardRef> ::const_iterator _iter1816;
    for (_iter1816 = this->Hazards.begin(); _iter1816 != this->Hazards.end(); ++_iter1816)
    {
      xfer += (*_iter1816).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureReactionTime", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->FailureReactionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureDetectionTime", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->FailureDetectionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureLatencyTime", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->FailureLatencyTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsSafetyGoal", ::apache::thrift::protocol::T_BOOL, 19);
  xfer += oprot->writeBool(this->IsSafetyGoal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISafetyRequirement &a, TDDISafetyRequirement &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.CitedElement, b.CitedElement);
  swap(a.DecompositionArgument, b.DecompositionArgument);
  swap(a.RefinedRequirements, b.RefinedRequirements);
  swap(a.RequirementSource, b.RequirementSource);
  swap(a.Measures, b.Measures);
  swap(a.FailureModes, b.FailureModes);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.MaintenanceProcedures, b.MaintenanceProcedures);
  swap(a.Hazards, b.Hazards);
  swap(a.FailureReactionTime, b.FailureReactionTime);
  swap(a.FailureDetectionTime, b.FailureDetectionTime);
  swap(a.FailureLatencyTime, b.FailureLatencyTime);
  swap(a.IsSafetyGoal, b.IsSafetyGoal);
  swap(a.__isset, b.__isset);
}

TDDISafetyRequirement::TDDISafetyRequirement(const TDDISafetyRequirement& other1817) {
  Id = other1817.Id;
  Name = other1817.Name;
  Description = other1817.Description;
  IsCitation = other1817.IsCitation;
  IsAbstract = other1817.IsAbstract;
  KeyValueMaps = other1817.KeyValueMaps;
  CitedElement = other1817.CitedElement;
  DecompositionArgument = other1817.DecompositionArgument;
  RefinedRequirements = other1817.RefinedRequirements;
  RequirementSource = other1817.RequirementSource;
  Measures = other1817.Measures;
  FailureModes = other1817.FailureModes;
  AssuranceLevel = other1817.AssuranceLevel;
  MaintenanceProcedures = other1817.MaintenanceProcedures;
  Hazards = other1817.Hazards;
  FailureReactionTime = other1817.FailureReactionTime;
  FailureDetectionTime = other1817.FailureDetectionTime;
  FailureLatencyTime = other1817.FailureLatencyTime;
  IsSafetyGoal = other1817.IsSafetyGoal;
  __isset = other1817.__isset;
}
TDDISafetyRequirement& TDDISafetyRequirement::operator=(const TDDISafetyRequirement& other1818) {
  Id = other1818.Id;
  Name = other1818.Name;
  Description = other1818.Description;
  IsCitation = other1818.IsCitation;
  IsAbstract = other1818.IsAbstract;
  KeyValueMaps = other1818.KeyValueMaps;
  CitedElement = other1818.CitedElement;
  DecompositionArgument = other1818.DecompositionArgument;
  RefinedRequirements = other1818.RefinedRequirements;
  RequirementSource = other1818.RequirementSource;
  Measures = other1818.Measures;
  FailureModes = other1818.FailureModes;
  AssuranceLevel = other1818.AssuranceLevel;
  MaintenanceProcedures = other1818.MaintenanceProcedures;
  Hazards = other1818.Hazards;
  FailureReactionTime = other1818.FailureReactionTime;
  FailureDetectionTime = other1818.FailureDetectionTime;
  FailureLatencyTime = other1818.FailureLatencyTime;
  IsSafetyGoal = other1818.IsSafetyGoal;
  __isset = other1818.__isset;
  return *this;
}
void TDDISafetyRequirement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISafetyRequirement(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "DecompositionArgument=" << to_string(DecompositionArgument);
  out << ", " << "RefinedRequirements=" << to_string(RefinedRequirements);
  out << ", " << "RequirementSource=" << to_string(RequirementSource);
  out << ", " << "Measures=" << to_string(Measures);
  out << ", " << "FailureModes=" << to_string(FailureModes);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "MaintenanceProcedures=" << to_string(MaintenanceProcedures);
  out << ", " << "Hazards=" << to_string(Hazards);
  out << ", " << "FailureReactionTime=" << to_string(FailureReactionTime);
  out << ", " << "FailureDetectionTime=" << to_string(FailureDetectionTime);
  out << ", " << "FailureLatencyTime=" << to_string(FailureLatencyTime);
  out << ", " << "IsSafetyGoal=" << to_string(IsSafetyGoal);
  out << ")";
}


TDDIDependabilityRequirementUnion::~TDDIDependabilityRequirementUnion() throw() {
}


void TDDIDependabilityRequirementUnion::__set_SafetyRequirement(const TDDISafetyRequirement& val) {
  this->SafetyRequirement = val;
__isset.SafetyRequirement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIDependabilityRequirementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDependabilityRequirementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SafetyRequirement.read(iprot);
          this->__isset.SafetyRequirement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDependabilityRequirementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDependabilityRequirementUnion");

  if (this->__isset.SafetyRequirement) {
    xfer += oprot->writeFieldBegin("SafetyRequirement", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->SafetyRequirement.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDependabilityRequirementUnion &a, TDDIDependabilityRequirementUnion &b) {
  using ::std::swap;
  swap(a.SafetyRequirement, b.SafetyRequirement);
  swap(a.__isset, b.__isset);
}

TDDIDependabilityRequirementUnion::TDDIDependabilityRequirementUnion(const TDDIDependabilityRequirementUnion& other1819) {
  SafetyRequirement = other1819.SafetyRequirement;
  __isset = other1819.__isset;
}
TDDIDependabilityRequirementUnion& TDDIDependabilityRequirementUnion::operator=(const TDDIDependabilityRequirementUnion& other1820) {
  SafetyRequirement = other1820.SafetyRequirement;
  __isset = other1820.__isset;
  return *this;
}
void TDDIDependabilityRequirementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDependabilityRequirementUnion(";
  out << "SafetyRequirement="; (__isset.SafetyRequirement ? (out << to_string(SafetyRequirement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractDependabilityRequirement::~TDDIAbstractDependabilityRequirement() throw() {
}


void TDDIAbstractDependabilityRequirement::__set_UsedDependabilityRequirement(const TDDIDependabilityRequirementUnion& val) {
  this->UsedDependabilityRequirement = val;
}

void TDDIAbstractDependabilityRequirement::__set_UsedDependabilityRequirementType(const TDDIDependabilityRequirementUnionType val) {
  this->UsedDependabilityRequirementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityRequirement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDependabilityRequirement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedDependabilityRequirement.read(iprot);
          this->__isset.UsedDependabilityRequirement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1821;
          xfer += iprot->readI32(ecast1821);
          this->UsedDependabilityRequirementType = (TDDIDependabilityRequirementUnionType)ecast1821;
          this->__isset.UsedDependabilityRequirementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDependabilityRequirement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDependabilityRequirement");

  xfer += oprot->writeFieldBegin("UsedDependabilityRequirement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedDependabilityRequirement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedDependabilityRequirementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedDependabilityRequirementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDependabilityRequirement &a, TDDIAbstractDependabilityRequirement &b) {
  using ::std::swap;
  swap(a.UsedDependabilityRequirement, b.UsedDependabilityRequirement);
  swap(a.UsedDependabilityRequirementType, b.UsedDependabilityRequirementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDependabilityRequirement::TDDIAbstractDependabilityRequirement(const TDDIAbstractDependabilityRequirement& other1822) {
  UsedDependabilityRequirement = other1822.UsedDependabilityRequirement;
  UsedDependabilityRequirementType = other1822.UsedDependabilityRequirementType;
  __isset = other1822.__isset;
}
TDDIAbstractDependabilityRequirement& TDDIAbstractDependabilityRequirement::operator=(const TDDIAbstractDependabilityRequirement& other1823) {
  UsedDependabilityRequirement = other1823.UsedDependabilityRequirement;
  UsedDependabilityRequirementType = other1823.UsedDependabilityRequirementType;
  __isset = other1823.__isset;
  return *this;
}
void TDDIAbstractDependabilityRequirement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDependabilityRequirement(";
  out << "UsedDependabilityRequirement=" << to_string(UsedDependabilityRequirement);
  out << ", " << "UsedDependabilityRequirementType=" << to_string(UsedDependabilityRequirementType);
  out << ")";
}


TDDIRequirementArtifactUnion::~TDDIRequirementArtifactUnion() throw() {
}


void TDDIRequirementArtifactUnion::__set_RequirementPackage(const TDDIAbstractRequirementPackage& val) {
  this->RequirementPackage = val;
__isset.RequirementPackage = true;
}

void TDDIRequirementArtifactUnion::__set_RequirementSource(const TDDIAbstractRequirementSource& val) {
  this->RequirementSource = val;
__isset.RequirementSource = true;
}

void TDDIRequirementArtifactUnion::__set_DependabilityRequirement(const TDDIAbstractDependabilityRequirement& val) {
  this->DependabilityRequirement = val;
__isset.DependabilityRequirement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIRequirementArtifactUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRequirementArtifactUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->RequirementPackage.read(iprot);
          this->__isset.RequirementPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->RequirementSource.read(iprot);
          this->__isset.RequirementSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DependabilityRequirement.read(iprot);
          this->__isset.DependabilityRequirement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRequirementArtifactUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRequirementArtifactUnion");

  if (this->__isset.RequirementPackage) {
    xfer += oprot->writeFieldBegin("RequirementPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->RequirementPackage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RequirementSource) {
    xfer += oprot->writeFieldBegin("RequirementSource", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->RequirementSource.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DependabilityRequirement) {
    xfer += oprot->writeFieldBegin("DependabilityRequirement", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->DependabilityRequirement.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRequirementArtifactUnion &a, TDDIRequirementArtifactUnion &b) {
  using ::std::swap;
  swap(a.RequirementPackage, b.RequirementPackage);
  swap(a.RequirementSource, b.RequirementSource);
  swap(a.DependabilityRequirement, b.DependabilityRequirement);
  swap(a.__isset, b.__isset);
}

TDDIRequirementArtifactUnion::TDDIRequirementArtifactUnion(const TDDIRequirementArtifactUnion& other1824) {
  RequirementPackage = other1824.RequirementPackage;
  RequirementSource = other1824.RequirementSource;
  DependabilityRequirement = other1824.DependabilityRequirement;
  __isset = other1824.__isset;
}
TDDIRequirementArtifactUnion& TDDIRequirementArtifactUnion::operator=(const TDDIRequirementArtifactUnion& other1825) {
  RequirementPackage = other1825.RequirementPackage;
  RequirementSource = other1825.RequirementSource;
  DependabilityRequirement = other1825.DependabilityRequirement;
  __isset = other1825.__isset;
  return *this;
}
void TDDIRequirementArtifactUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRequirementArtifactUnion(";
  out << "RequirementPackage="; (__isset.RequirementPackage ? (out << to_string(RequirementPackage)) : (out << "<null>"));
  out << ", " << "RequirementSource="; (__isset.RequirementSource ? (out << to_string(RequirementSource)) : (out << "<null>"));
  out << ", " << "DependabilityRequirement="; (__isset.DependabilityRequirement ? (out << to_string(DependabilityRequirement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractRequirementArtifact::~TDDIAbstractRequirementArtifact() throw() {
}


void TDDIAbstractRequirementArtifact::__set_UsedRequirementArtifact(const TDDIRequirementArtifactUnion& val) {
  this->UsedRequirementArtifact = val;
}

void TDDIAbstractRequirementArtifact::__set_UsedRequirementArtifactType(const TDDIRequirementArtifactUnionType val) {
  this->UsedRequirementArtifactType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRequirementArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedRequirementArtifact.read(iprot);
          this->__isset.UsedRequirementArtifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1826;
          xfer += iprot->readI32(ecast1826);
          this->UsedRequirementArtifactType = (TDDIRequirementArtifactUnionType)ecast1826;
          this->__isset.UsedRequirementArtifactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRequirementArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRequirementArtifact");

  xfer += oprot->writeFieldBegin("UsedRequirementArtifact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedRequirementArtifact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedRequirementArtifactType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedRequirementArtifactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRequirementArtifact &a, TDDIAbstractRequirementArtifact &b) {
  using ::std::swap;
  swap(a.UsedRequirementArtifact, b.UsedRequirementArtifact);
  swap(a.UsedRequirementArtifactType, b.UsedRequirementArtifactType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRequirementArtifact::TDDIAbstractRequirementArtifact(const TDDIAbstractRequirementArtifact& other1827) {
  UsedRequirementArtifact = other1827.UsedRequirementArtifact;
  UsedRequirementArtifactType = other1827.UsedRequirementArtifactType;
  __isset = other1827.__isset;
}
TDDIAbstractRequirementArtifact& TDDIAbstractRequirementArtifact::operator=(const TDDIAbstractRequirementArtifact& other1828) {
  UsedRequirementArtifact = other1828.UsedRequirementArtifact;
  UsedRequirementArtifactType = other1828.UsedRequirementArtifactType;
  __isset = other1828.__isset;
  return *this;
}
void TDDIAbstractRequirementArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRequirementArtifact(";
  out << "UsedRequirementArtifact=" << to_string(UsedRequirementArtifact);
  out << ", " << "UsedRequirementArtifactType=" << to_string(UsedRequirementArtifactType);
  out << ")";
}


TDDIArtifactReference::~TDDIArtifactReference() throw() {
}


void TDDIArtifactReference::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactReference::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactReference::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactReference::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactReference::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactReference::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactReference::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactReference::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactReference::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactReference::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactReference::__set_ReferencedArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ReferencedArtifactElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactReference& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactReference::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1829;
            ::apache::thrift::protocol::TType _etype1832;
            xfer += iprot->readListBegin(_etype1832, _size1829);
            this->ImplementationConstraint.resize(_size1829);
            uint32_t _i1833;
            for (_i1833 = 0; _i1833 < _size1829; ++_i1833)
            {
              xfer += this->ImplementationConstraint[_i1833].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1834;
            ::apache::thrift::protocol::TType _etype1837;
            xfer += iprot->readListBegin(_etype1837, _size1834);
            this->Note.resize(_size1834);
            uint32_t _i1838;
            for (_i1838 = 0; _i1838 < _size1834; ++_i1838)
            {
              xfer += this->Note[_i1838].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1839;
            ::apache::thrift::protocol::TType _etype1842;
            xfer += iprot->readListBegin(_etype1842, _size1839);
            this->TaggedValue.resize(_size1839);
            uint32_t _i1843;
            for (_i1843 = 0; _i1843 < _size1839; ++_i1843)
            {
              xfer += this->TaggedValue[_i1843].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ReferencedArtifactElement.clear();
            uint32_t _size1844;
            ::apache::thrift::protocol::TType _etype1847;
            xfer += iprot->readListBegin(_etype1847, _size1844);
            this->ReferencedArtifactElement.resize(_size1844);
            uint32_t _i1848;
            for (_i1848 = 0; _i1848 < _size1844; ++_i1848)
            {
              xfer += this->ReferencedArtifactElement[_i1848].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ReferencedArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactReference::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactReference");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1849;
    for (_iter1849 = this->ImplementationConstraint.begin(); _iter1849 != this->ImplementationConstraint.end(); ++_iter1849)
    {
      xfer += (*_iter1849).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1850;
    for (_iter1850 = this->Note.begin(); _iter1850 != this->Note.end(); ++_iter1850)
    {
      xfer += (*_iter1850).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1851;
    for (_iter1851 = this->TaggedValue.begin(); _iter1851 != this->TaggedValue.end(); ++_iter1851)
    {
      xfer += (*_iter1851).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ReferencedArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ReferencedArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter1852;
    for (_iter1852 = this->ReferencedArtifactElement.begin(); _iter1852 != this->ReferencedArtifactElement.end(); ++_iter1852)
    {
      xfer += (*_iter1852).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactReference &a, TDDIArtifactReference &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ReferencedArtifactElement, b.ReferencedArtifactElement);
  swap(a.__isset, b.__isset);
}

TDDIArtifactReference::TDDIArtifactReference(const TDDIArtifactReference& other1853) {
  Gid = other1853.Gid;
  IsCitation = other1853.IsCitation;
  IsAbstract = other1853.IsAbstract;
  CitedElement = other1853.CitedElement;
  AbstractForm = other1853.AbstractForm;
  Name = other1853.Name;
  Description = other1853.Description;
  ImplementationConstraint = other1853.ImplementationConstraint;
  Note = other1853.Note;
  TaggedValue = other1853.TaggedValue;
  ReferencedArtifactElement = other1853.ReferencedArtifactElement;
  __isset = other1853.__isset;
}
TDDIArtifactReference& TDDIArtifactReference::operator=(const TDDIArtifactReference& other1854) {
  Gid = other1854.Gid;
  IsCitation = other1854.IsCitation;
  IsAbstract = other1854.IsAbstract;
  CitedElement = other1854.CitedElement;
  AbstractForm = other1854.AbstractForm;
  Name = other1854.Name;
  Description = other1854.Description;
  ImplementationConstraint = other1854.ImplementationConstraint;
  Note = other1854.Note;
  TaggedValue = other1854.TaggedValue;
  ReferencedArtifactElement = other1854.ReferencedArtifactElement;
  __isset = other1854.__isset;
  return *this;
}
void TDDIArtifactReference::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactReference(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ReferencedArtifactElement=" << to_string(ReferencedArtifactElement);
  out << ")";
}


TDDIArgumentationElementUnion::~TDDIArgumentationElementUnion() throw() {
}


void TDDIArgumentationElementUnion::__set_ArgumentGroup(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentGroup> val) {
  this->ArgumentGroup = val;
__isset.ArgumentGroup = true;
}

void TDDIArgumentationElementUnion::__set_ArgumentPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> val) {
  this->ArgumentPackage = val;
__isset.ArgumentPackage = true;
}

void TDDIArgumentationElementUnion::__set_ArgumentAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> val) {
  this->ArgumentAsset = val;
__isset.ArgumentAsset = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentationElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentationElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentGroup) { 
            this->ArgumentGroup = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentGroup>(new TDDIArgumentGroup);
          }
          xfer += this->ArgumentGroup->read(iprot);
          bool wasSet = false;
          if (this->ArgumentGroup->__isset.Gid) { wasSet = true; }
          if (this->ArgumentGroup->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentGroup->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentGroup->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentGroup->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentGroup->__isset.Name) { wasSet = true; }
          if (this->ArgumentGroup->__isset.Description) { wasSet = true; }
          if (this->ArgumentGroup->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentGroup->__isset.Note) { wasSet = true; }
          if (this->ArgumentGroup->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentGroup->__isset.ArgumentationElement) { wasSet = true; }
          if (!wasSet) { this->ArgumentGroup.reset(); }
          this->__isset.ArgumentGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentPackage) { 
            this->ArgumentPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage>(new TDDIAbstractArgumentPackage);
          }
          xfer += this->ArgumentPackage->read(iprot);
          bool wasSet = false;
          if (this->ArgumentPackage->__isset.UsedArgumentPackage) { wasSet = true; }
          if (this->ArgumentPackage->__isset.UsedArgumentPackageType) { wasSet = true; }
          if (!wasSet) { this->ArgumentPackage.reset(); }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentAsset) { 
            this->ArgumentAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset>(new TDDIAbstractArgumentAsset);
          }
          xfer += this->ArgumentAsset->read(iprot);
          bool wasSet = false;
          if (this->ArgumentAsset->__isset.UsedArgumentAsset) { wasSet = true; }
          if (this->ArgumentAsset->__isset.UsedArgumentAssetType) { wasSet = true; }
          if (!wasSet) { this->ArgumentAsset.reset(); }
          this->__isset.ArgumentAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentationElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentationElementUnion");

  if (this->__isset.ArgumentGroup) {
    xfer += oprot->writeFieldBegin("ArgumentGroup", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ArgumentGroup) {
      xfer += this->ArgumentGroup->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentGroup"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentPackage) {
    xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArgumentPackage) {
      xfer += this->ArgumentPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArgumentPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentAsset) {
    xfer += oprot->writeFieldBegin("ArgumentAsset", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArgumentAsset) {
      xfer += this->ArgumentAsset->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArgumentAsset"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentationElementUnion &a, TDDIArgumentationElementUnion &b) {
  using ::std::swap;
  swap(a.ArgumentGroup, b.ArgumentGroup);
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.ArgumentAsset, b.ArgumentAsset);
  swap(a.__isset, b.__isset);
}

TDDIArgumentationElementUnion::TDDIArgumentationElementUnion(const TDDIArgumentationElementUnion& other1855) {
  ArgumentGroup = other1855.ArgumentGroup;
  ArgumentPackage = other1855.ArgumentPackage;
  ArgumentAsset = other1855.ArgumentAsset;
  __isset = other1855.__isset;
}
TDDIArgumentationElementUnion& TDDIArgumentationElementUnion::operator=(const TDDIArgumentationElementUnion& other1856) {
  ArgumentGroup = other1856.ArgumentGroup;
  ArgumentPackage = other1856.ArgumentPackage;
  ArgumentAsset = other1856.ArgumentAsset;
  __isset = other1856.__isset;
  return *this;
}
void TDDIArgumentationElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentationElementUnion(";
  out << "ArgumentGroup="; (__isset.ArgumentGroup ? (out << to_string(ArgumentGroup)) : (out << "<null>"));
  out << ", " << "ArgumentPackage="; (__isset.ArgumentPackage ? (out << to_string(ArgumentPackage)) : (out << "<null>"));
  out << ", " << "ArgumentAsset="; (__isset.ArgumentAsset ? (out << to_string(ArgumentAsset)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArgumentationElement::~TDDIAbstractArgumentationElement() throw() {
}


void TDDIAbstractArgumentationElement::__set_UsedArgumentationElement(const TDDIArgumentationElementUnion& val) {
  this->UsedArgumentationElement = val;
}

void TDDIAbstractArgumentationElement::__set_UsedArgumentationElementType(const TDDIArgumentationElementUnionType val) {
  this->UsedArgumentationElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentationElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentationElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArgumentationElement.read(iprot);
          this->__isset.UsedArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1857;
          xfer += iprot->readI32(ecast1857);
          this->UsedArgumentationElementType = (TDDIArgumentationElementUnionType)ecast1857;
          this->__isset.UsedArgumentationElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentationElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentationElement");

  xfer += oprot->writeFieldBegin("UsedArgumentationElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArgumentationElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArgumentationElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArgumentationElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentationElement &a, TDDIAbstractArgumentationElement &b) {
  using ::std::swap;
  swap(a.UsedArgumentationElement, b.UsedArgumentationElement);
  swap(a.UsedArgumentationElementType, b.UsedArgumentationElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentationElement::TDDIAbstractArgumentationElement(const TDDIAbstractArgumentationElement& other1858) {
  UsedArgumentationElement = other1858.UsedArgumentationElement;
  UsedArgumentationElementType = other1858.UsedArgumentationElementType;
  __isset = other1858.__isset;
}
TDDIAbstractArgumentationElement& TDDIAbstractArgumentationElement::operator=(const TDDIAbstractArgumentationElement& other1859) {
  UsedArgumentationElement = other1859.UsedArgumentationElement;
  UsedArgumentationElementType = other1859.UsedArgumentationElementType;
  __isset = other1859.__isset;
  return *this;
}
void TDDIAbstractArgumentationElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentationElement(";
  out << "UsedArgumentationElement=" << to_string(UsedArgumentationElement);
  out << ", " << "UsedArgumentationElementType=" << to_string(UsedArgumentationElementType);
  out << ")";
}


TDDIArgumentGroup::~TDDIArgumentGroup() throw() {
}


void TDDIArgumentGroup::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentGroup::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentGroup::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentGroup::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentGroup::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentGroup::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentGroup::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentGroup::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentGroup::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentGroup::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentGroup::__set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val) {
  this->ArgumentationElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1860;
            ::apache::thrift::protocol::TType _etype1863;
            xfer += iprot->readListBegin(_etype1863, _size1860);
            this->ImplementationConstraint.resize(_size1860);
            uint32_t _i1864;
            for (_i1864 = 0; _i1864 < _size1860; ++_i1864)
            {
              xfer += this->ImplementationConstraint[_i1864].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1865;
            ::apache::thrift::protocol::TType _etype1868;
            xfer += iprot->readListBegin(_etype1868, _size1865);
            this->Note.resize(_size1865);
            uint32_t _i1869;
            for (_i1869 = 0; _i1869 < _size1865; ++_i1869)
            {
              xfer += this->Note[_i1869].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1870;
            ::apache::thrift::protocol::TType _etype1873;
            xfer += iprot->readListBegin(_etype1873, _size1870);
            this->TaggedValue.resize(_size1870);
            uint32_t _i1874;
            for (_i1874 = 0; _i1874 < _size1870; ++_i1874)
            {
              xfer += this->TaggedValue[_i1874].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentationElement.clear();
            uint32_t _size1875;
            ::apache::thrift::protocol::TType _etype1878;
            xfer += iprot->readListBegin(_etype1878, _size1875);
            this->ArgumentationElement.resize(_size1875);
            uint32_t _i1879;
            for (_i1879 = 0; _i1879 < _size1875; ++_i1879)
            {
              xfer += this->ArgumentationElement[_i1879].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentGroup");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1880;
    for (_iter1880 = this->ImplementationConstraint.begin(); _iter1880 != this->ImplementationConstraint.end(); ++_iter1880)
    {
      xfer += (*_iter1880).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1881;
    for (_iter1881 = this->Note.begin(); _iter1881 != this->Note.end(); ++_iter1881)
    {
      xfer += (*_iter1881).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1882;
    for (_iter1882 = this->TaggedValue.begin(); _iter1882 != this->TaggedValue.end(); ++_iter1882)
    {
      xfer += (*_iter1882).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentationElement.size()));
    std::vector<TDDIAbstractArgumentationElementRef> ::const_iterator _iter1883;
    for (_iter1883 = this->ArgumentationElement.begin(); _iter1883 != this->ArgumentationElement.end(); ++_iter1883)
    {
      xfer += (*_iter1883).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentGroup &a, TDDIArgumentGroup &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.__isset, b.__isset);
}

TDDIArgumentGroup::TDDIArgumentGroup(const TDDIArgumentGroup& other1884) {
  Gid = other1884.Gid;
  IsCitation = other1884.IsCitation;
  IsAbstract = other1884.IsAbstract;
  CitedElement = other1884.CitedElement;
  AbstractForm = other1884.AbstractForm;
  Name = other1884.Name;
  Description = other1884.Description;
  ImplementationConstraint = other1884.ImplementationConstraint;
  Note = other1884.Note;
  TaggedValue = other1884.TaggedValue;
  ArgumentationElement = other1884.ArgumentationElement;
  __isset = other1884.__isset;
}
TDDIArgumentGroup& TDDIArgumentGroup::operator=(const TDDIArgumentGroup& other1885) {
  Gid = other1885.Gid;
  IsCitation = other1885.IsCitation;
  IsAbstract = other1885.IsAbstract;
  CitedElement = other1885.CitedElement;
  AbstractForm = other1885.AbstractForm;
  Name = other1885.Name;
  Description = other1885.Description;
  ImplementationConstraint = other1885.ImplementationConstraint;
  Note = other1885.Note;
  TaggedValue = other1885.TaggedValue;
  ArgumentationElement = other1885.ArgumentationElement;
  __isset = other1885.__isset;
  return *this;
}
void TDDIArgumentGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentGroup(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArgumentationElement=" << to_string(ArgumentationElement);
  out << ")";
}


TDDIArgumentPackageUnion::~TDDIArgumentPackageUnion() throw() {
}


void TDDIArgumentPackageUnion::__set_ArgumentPackage(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackage> val) {
  this->ArgumentPackage = val;
__isset.ArgumentPackage = true;
}

void TDDIArgumentPackageUnion::__set_ArgumentPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageInterface> val) {
  this->ArgumentPackageInterface = val;
__isset.ArgumentPackageInterface = true;
}

void TDDIArgumentPackageUnion::__set_ArgumentPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageBinding> val) {
  this->ArgumentPackageBinding = val;
__isset.ArgumentPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentPackage) { 
            this->ArgumentPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackage>(new TDDIArgumentPackage);
          }
          xfer += this->ArgumentPackage->read(iprot);
          bool wasSet = false;
          if (this->ArgumentPackage->__isset.Gid) { wasSet = true; }
          if (this->ArgumentPackage->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentPackage->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentPackage->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentPackage->__isset.Name) { wasSet = true; }
          if (this->ArgumentPackage->__isset.Description) { wasSet = true; }
          if (this->ArgumentPackage->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentPackage->__isset.Note) { wasSet = true; }
          if (this->ArgumentPackage->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentPackage->__isset.ArgumentationElement) { wasSet = true; }
          if (!wasSet) { this->ArgumentPackage.reset(); }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentPackageInterface) { 
            this->ArgumentPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageInterface>(new TDDIArgumentPackageInterface);
          }
          xfer += this->ArgumentPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->ArgumentPackageInterface->__isset.Gid) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.Name) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.Description) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.Note) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.ArgumentationElement) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->ArgumentPackageInterface.reset(); }
          this->__isset.ArgumentPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentPackageBinding) { 
            this->ArgumentPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageBinding>(new TDDIArgumentPackageBinding);
          }
          xfer += this->ArgumentPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->ArgumentPackageBinding->__isset.Gid) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.Name) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.Description) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.Note) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.ArgumentationElement) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.ParticipantPackage) { wasSet = true; }
          if (!wasSet) { this->ArgumentPackageBinding.reset(); }
          this->__isset.ArgumentPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentPackageUnion");

  if (this->__isset.ArgumentPackage) {
    xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ArgumentPackage) {
      xfer += this->ArgumentPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentPackageInterface) {
    xfer += oprot->writeFieldBegin("ArgumentPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArgumentPackageInterface) {
      xfer += this->ArgumentPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentPackageBinding) {
    xfer += oprot->writeFieldBegin("ArgumentPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArgumentPackageBinding) {
      xfer += this->ArgumentPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentPackageUnion &a, TDDIArgumentPackageUnion &b) {
  using ::std::swap;
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.ArgumentPackageInterface, b.ArgumentPackageInterface);
  swap(a.ArgumentPackageBinding, b.ArgumentPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIArgumentPackageUnion::TDDIArgumentPackageUnion(const TDDIArgumentPackageUnion& other1886) {
  ArgumentPackage = other1886.ArgumentPackage;
  ArgumentPackageInterface = other1886.ArgumentPackageInterface;
  ArgumentPackageBinding = other1886.ArgumentPackageBinding;
  __isset = other1886.__isset;
}
TDDIArgumentPackageUnion& TDDIArgumentPackageUnion::operator=(const TDDIArgumentPackageUnion& other1887) {
  ArgumentPackage = other1887.ArgumentPackage;
  ArgumentPackageInterface = other1887.ArgumentPackageInterface;
  ArgumentPackageBinding = other1887.ArgumentPackageBinding;
  __isset = other1887.__isset;
  return *this;
}
void TDDIArgumentPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentPackageUnion(";
  out << "ArgumentPackage="; (__isset.ArgumentPackage ? (out << to_string(ArgumentPackage)) : (out << "<null>"));
  out << ", " << "ArgumentPackageInterface="; (__isset.ArgumentPackageInterface ? (out << to_string(ArgumentPackageInterface)) : (out << "<null>"));
  out << ", " << "ArgumentPackageBinding="; (__isset.ArgumentPackageBinding ? (out << to_string(ArgumentPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArgumentPackage::~TDDIAbstractArgumentPackage() throw() {
}


void TDDIAbstractArgumentPackage::__set_UsedArgumentPackage(const TDDIArgumentPackageUnion& val) {
  this->UsedArgumentPackage = val;
}

void TDDIAbstractArgumentPackage::__set_UsedArgumentPackageType(const TDDIArgumentPackageUnionType val) {
  this->UsedArgumentPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArgumentPackage.read(iprot);
          this->__isset.UsedArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1888;
          xfer += iprot->readI32(ecast1888);
          this->UsedArgumentPackageType = (TDDIArgumentPackageUnionType)ecast1888;
          this->__isset.UsedArgumentPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentPackage");

  xfer += oprot->writeFieldBegin("UsedArgumentPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArgumentPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArgumentPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArgumentPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentPackage &a, TDDIAbstractArgumentPackage &b) {
  using ::std::swap;
  swap(a.UsedArgumentPackage, b.UsedArgumentPackage);
  swap(a.UsedArgumentPackageType, b.UsedArgumentPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentPackage::TDDIAbstractArgumentPackage(const TDDIAbstractArgumentPackage& other1889) {
  UsedArgumentPackage = other1889.UsedArgumentPackage;
  UsedArgumentPackageType = other1889.UsedArgumentPackageType;
  __isset = other1889.__isset;
}
TDDIAbstractArgumentPackage& TDDIAbstractArgumentPackage::operator=(const TDDIAbstractArgumentPackage& other1890) {
  UsedArgumentPackage = other1890.UsedArgumentPackage;
  UsedArgumentPackageType = other1890.UsedArgumentPackageType;
  __isset = other1890.__isset;
  return *this;
}
void TDDIAbstractArgumentPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentPackage(";
  out << "UsedArgumentPackage=" << to_string(UsedArgumentPackage);
  out << ", " << "UsedArgumentPackageType=" << to_string(UsedArgumentPackageType);
  out << ")";
}


TDDIArgumentPackage::~TDDIArgumentPackage() throw() {
}


void TDDIArgumentPackage::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentPackage::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentPackage::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentPackage::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentPackage::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentPackage::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentPackage::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentPackage::__set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val) {
  this->ArgumentationElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1891;
            ::apache::thrift::protocol::TType _etype1894;
            xfer += iprot->readListBegin(_etype1894, _size1891);
            this->ImplementationConstraint.resize(_size1891);
            uint32_t _i1895;
            for (_i1895 = 0; _i1895 < _size1891; ++_i1895)
            {
              xfer += this->ImplementationConstraint[_i1895].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1896;
            ::apache::thrift::protocol::TType _etype1899;
            xfer += iprot->readListBegin(_etype1899, _size1896);
            this->Note.resize(_size1896);
            uint32_t _i1900;
            for (_i1900 = 0; _i1900 < _size1896; ++_i1900)
            {
              xfer += this->Note[_i1900].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1901;
            ::apache::thrift::protocol::TType _etype1904;
            xfer += iprot->readListBegin(_etype1904, _size1901);
            this->TaggedValue.resize(_size1901);
            uint32_t _i1905;
            for (_i1905 = 0; _i1905 < _size1901; ++_i1905)
            {
              xfer += this->TaggedValue[_i1905].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentationElement.clear();
            uint32_t _size1906;
            ::apache::thrift::protocol::TType _etype1909;
            xfer += iprot->readListBegin(_etype1909, _size1906);
            this->ArgumentationElement.resize(_size1906);
            uint32_t _i1910;
            for (_i1910 = 0; _i1910 < _size1906; ++_i1910)
            {
              xfer += this->ArgumentationElement[_i1910].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentPackage");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1911;
    for (_iter1911 = this->ImplementationConstraint.begin(); _iter1911 != this->ImplementationConstraint.end(); ++_iter1911)
    {
      xfer += (*_iter1911).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1912;
    for (_iter1912 = this->Note.begin(); _iter1912 != this->Note.end(); ++_iter1912)
    {
      xfer += (*_iter1912).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1913;
    for (_iter1913 = this->TaggedValue.begin(); _iter1913 != this->TaggedValue.end(); ++_iter1913)
    {
      xfer += (*_iter1913).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentationElement.size()));
    std::vector<TDDIAbstractArgumentationElementRef> ::const_iterator _iter1914;
    for (_iter1914 = this->ArgumentationElement.begin(); _iter1914 != this->ArgumentationElement.end(); ++_iter1914)
    {
      xfer += (*_iter1914).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentPackage &a, TDDIArgumentPackage &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.__isset, b.__isset);
}

TDDIArgumentPackage::TDDIArgumentPackage(const TDDIArgumentPackage& other1915) {
  Gid = other1915.Gid;
  IsCitation = other1915.IsCitation;
  IsAbstract = other1915.IsAbstract;
  CitedElement = other1915.CitedElement;
  AbstractForm = other1915.AbstractForm;
  Name = other1915.Name;
  Description = other1915.Description;
  ImplementationConstraint = other1915.ImplementationConstraint;
  Note = other1915.Note;
  TaggedValue = other1915.TaggedValue;
  ArgumentationElement = other1915.ArgumentationElement;
  __isset = other1915.__isset;
}
TDDIArgumentPackage& TDDIArgumentPackage::operator=(const TDDIArgumentPackage& other1916) {
  Gid = other1916.Gid;
  IsCitation = other1916.IsCitation;
  IsAbstract = other1916.IsAbstract;
  CitedElement = other1916.CitedElement;
  AbstractForm = other1916.AbstractForm;
  Name = other1916.Name;
  Description = other1916.Description;
  ImplementationConstraint = other1916.ImplementationConstraint;
  Note = other1916.Note;
  TaggedValue = other1916.TaggedValue;
  ArgumentationElement = other1916.ArgumentationElement;
  __isset = other1916.__isset;
  return *this;
}
void TDDIArgumentPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentPackage(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArgumentationElement=" << to_string(ArgumentationElement);
  out << ")";
}


TDDIArgumentPackageInterface::~TDDIArgumentPackageInterface() throw() {
}


void TDDIArgumentPackageInterface::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentPackageInterface::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentPackageInterface::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentPackageInterface::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentPackageInterface::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentPackageInterface::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentPackageInterface::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentPackageInterface::__set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val) {
  this->ArgumentationElement = val;
}

void TDDIArgumentPackageInterface::__set_Implements(const TDDIAbstractArgumentPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1917;
            ::apache::thrift::protocol::TType _etype1920;
            xfer += iprot->readListBegin(_etype1920, _size1917);
            this->ImplementationConstraint.resize(_size1917);
            uint32_t _i1921;
            for (_i1921 = 0; _i1921 < _size1917; ++_i1921)
            {
              xfer += this->ImplementationConstraint[_i1921].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1922;
            ::apache::thrift::protocol::TType _etype1925;
            xfer += iprot->readListBegin(_etype1925, _size1922);
            this->Note.resize(_size1922);
            uint32_t _i1926;
            for (_i1926 = 0; _i1926 < _size1922; ++_i1926)
            {
              xfer += this->Note[_i1926].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1927;
            ::apache::thrift::protocol::TType _etype1930;
            xfer += iprot->readListBegin(_etype1930, _size1927);
            this->TaggedValue.resize(_size1927);
            uint32_t _i1931;
            for (_i1931 = 0; _i1931 < _size1927; ++_i1931)
            {
              xfer += this->TaggedValue[_i1931].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentationElement.clear();
            uint32_t _size1932;
            ::apache::thrift::protocol::TType _etype1935;
            xfer += iprot->readListBegin(_etype1935, _size1932);
            this->ArgumentationElement.resize(_size1932);
            uint32_t _i1936;
            for (_i1936 = 0; _i1936 < _size1932; ++_i1936)
            {
              xfer += this->ArgumentationElement[_i1936].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentPackageInterface");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1937;
    for (_iter1937 = this->ImplementationConstraint.begin(); _iter1937 != this->ImplementationConstraint.end(); ++_iter1937)
    {
      xfer += (*_iter1937).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1938;
    for (_iter1938 = this->Note.begin(); _iter1938 != this->Note.end(); ++_iter1938)
    {
      xfer += (*_iter1938).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1939;
    for (_iter1939 = this->TaggedValue.begin(); _iter1939 != this->TaggedValue.end(); ++_iter1939)
    {
      xfer += (*_iter1939).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentationElement.size()));
    std::vector<TDDIAbstractArgumentationElementRef> ::const_iterator _iter1940;
    for (_iter1940 = this->ArgumentationElement.begin(); _iter1940 != this->ArgumentationElement.end(); ++_iter1940)
    {
      xfer += (*_iter1940).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentPackageInterface &a, TDDIArgumentPackageInterface &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIArgumentPackageInterface::TDDIArgumentPackageInterface(const TDDIArgumentPackageInterface& other1941) {
  Gid = other1941.Gid;
  IsCitation = other1941.IsCitation;
  IsAbstract = other1941.IsAbstract;
  CitedElement = other1941.CitedElement;
  AbstractForm = other1941.AbstractForm;
  Name = other1941.Name;
  Description = other1941.Description;
  ImplementationConstraint = other1941.ImplementationConstraint;
  Note = other1941.Note;
  TaggedValue = other1941.TaggedValue;
  ArgumentationElement = other1941.ArgumentationElement;
  Implements = other1941.Implements;
  __isset = other1941.__isset;
}
TDDIArgumentPackageInterface& TDDIArgumentPackageInterface::operator=(const TDDIArgumentPackageInterface& other1942) {
  Gid = other1942.Gid;
  IsCitation = other1942.IsCitation;
  IsAbstract = other1942.IsAbstract;
  CitedElement = other1942.CitedElement;
  AbstractForm = other1942.AbstractForm;
  Name = other1942.Name;
  Description = other1942.Description;
  ImplementationConstraint = other1942.ImplementationConstraint;
  Note = other1942.Note;
  TaggedValue = other1942.TaggedValue;
  ArgumentationElement = other1942.ArgumentationElement;
  Implements = other1942.Implements;
  __isset = other1942.__isset;
  return *this;
}
void TDDIArgumentPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentPackageInterface(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArgumentationElement=" << to_string(ArgumentationElement);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIArgumentPackageBinding::~TDDIArgumentPackageBinding() throw() {
}


void TDDIArgumentPackageBinding::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentPackageBinding::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentPackageBinding::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentPackageBinding::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentPackageBinding::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentPackageBinding::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentPackageBinding::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentPackageBinding::__set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val) {
  this->ArgumentationElement = val;
}

void TDDIArgumentPackageBinding::__set_ParticipantPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val) {
  this->ParticipantPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1943;
            ::apache::thrift::protocol::TType _etype1946;
            xfer += iprot->readListBegin(_etype1946, _size1943);
            this->ImplementationConstraint.resize(_size1943);
            uint32_t _i1947;
            for (_i1947 = 0; _i1947 < _size1943; ++_i1947)
            {
              xfer += this->ImplementationConstraint[_i1947].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1948;
            ::apache::thrift::protocol::TType _etype1951;
            xfer += iprot->readListBegin(_etype1951, _size1948);
            this->Note.resize(_size1948);
            uint32_t _i1952;
            for (_i1952 = 0; _i1952 < _size1948; ++_i1952)
            {
              xfer += this->Note[_i1952].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1953;
            ::apache::thrift::protocol::TType _etype1956;
            xfer += iprot->readListBegin(_etype1956, _size1953);
            this->TaggedValue.resize(_size1953);
            uint32_t _i1957;
            for (_i1957 = 0; _i1957 < _size1953; ++_i1957)
            {
              xfer += this->TaggedValue[_i1957].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentationElement.clear();
            uint32_t _size1958;
            ::apache::thrift::protocol::TType _etype1961;
            xfer += iprot->readListBegin(_etype1961, _size1958);
            this->ArgumentationElement.resize(_size1958);
            uint32_t _i1962;
            for (_i1962 = 0; _i1962 < _size1958; ++_i1962)
            {
              xfer += this->ArgumentationElement[_i1962].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackage.clear();
            uint32_t _size1963;
            ::apache::thrift::protocol::TType _etype1966;
            xfer += iprot->readListBegin(_etype1966, _size1963);
            this->ParticipantPackage.resize(_size1963);
            uint32_t _i1967;
            for (_i1967 = 0; _i1967 < _size1963; ++_i1967)
            {
              xfer += this->ParticipantPackage[_i1967].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentPackageBinding");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1968;
    for (_iter1968 = this->ImplementationConstraint.begin(); _iter1968 != this->ImplementationConstraint.end(); ++_iter1968)
    {
      xfer += (*_iter1968).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1969;
    for (_iter1969 = this->Note.begin(); _iter1969 != this->Note.end(); ++_iter1969)
    {
      xfer += (*_iter1969).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1970;
    for (_iter1970 = this->TaggedValue.begin(); _iter1970 != this->TaggedValue.end(); ++_iter1970)
    {
      xfer += (*_iter1970).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentationElement.size()));
    std::vector<TDDIAbstractArgumentationElementRef> ::const_iterator _iter1971;
    for (_iter1971 = this->ArgumentationElement.begin(); _iter1971 != this->ArgumentationElement.end(); ++_iter1971)
    {
      xfer += (*_iter1971).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackage", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackage.size()));
    std::vector<TDDIAbstractArgumentPackageRef> ::const_iterator _iter1972;
    for (_iter1972 = this->ParticipantPackage.begin(); _iter1972 != this->ParticipantPackage.end(); ++_iter1972)
    {
      xfer += (*_iter1972).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentPackageBinding &a, TDDIArgumentPackageBinding &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.ParticipantPackage, b.ParticipantPackage);
  swap(a.__isset, b.__isset);
}

TDDIArgumentPackageBinding::TDDIArgumentPackageBinding(const TDDIArgumentPackageBinding& other1973) {
  Gid = other1973.Gid;
  IsCitation = other1973.IsCitation;
  IsAbstract = other1973.IsAbstract;
  CitedElement = other1973.CitedElement;
  AbstractForm = other1973.AbstractForm;
  Name = other1973.Name;
  Description = other1973.Description;
  ImplementationConstraint = other1973.ImplementationConstraint;
  Note = other1973.Note;
  TaggedValue = other1973.TaggedValue;
  ArgumentationElement = other1973.ArgumentationElement;
  ParticipantPackage = other1973.ParticipantPackage;
  __isset = other1973.__isset;
}
TDDIArgumentPackageBinding& TDDIArgumentPackageBinding::operator=(const TDDIArgumentPackageBinding& other1974) {
  Gid = other1974.Gid;
  IsCitation = other1974.IsCitation;
  IsAbstract = other1974.IsAbstract;
  CitedElement = other1974.CitedElement;
  AbstractForm = other1974.AbstractForm;
  Name = other1974.Name;
  Description = other1974.Description;
  ImplementationConstraint = other1974.ImplementationConstraint;
  Note = other1974.Note;
  TaggedValue = other1974.TaggedValue;
  ArgumentationElement = other1974.ArgumentationElement;
  ParticipantPackage = other1974.ParticipantPackage;
  __isset = other1974.__isset;
  return *this;
}
void TDDIArgumentPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentPackageBinding(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArgumentationElement=" << to_string(ArgumentationElement);
  out << ", " << "ParticipantPackage=" << to_string(ParticipantPackage);
  out << ")";
}


TDDIArgumentAssetUnion::~TDDIArgumentAssetUnion() throw() {
}


void TDDIArgumentAssetUnion::__set_Assertion(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertion> val) {
  this->Assertion = val;
__isset.Assertion = true;
}

void TDDIArgumentAssetUnion::__set_ArgumentReasoning(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentReasoning> val) {
  this->ArgumentReasoning = val;
__isset.ArgumentReasoning = true;
}

void TDDIArgumentAssetUnion::__set_ArtifactReference(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactReference> val) {
  this->ArtifactReference = val;
__isset.ArtifactReference = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentAssetUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentAssetUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Assertion) { 
            this->Assertion = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertion>(new TDDIAbstractAssertion);
          }
          xfer += this->Assertion->read(iprot);
          bool wasSet = false;
          if (this->Assertion->__isset.UsedAssertion) { wasSet = true; }
          if (this->Assertion->__isset.UsedAssertionType) { wasSet = true; }
          if (!wasSet) { this->Assertion.reset(); }
          this->__isset.Assertion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentReasoning) { 
            this->ArgumentReasoning = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentReasoning>(new TDDIArgumentReasoning);
          }
          xfer += this->ArgumentReasoning->read(iprot);
          bool wasSet = false;
          if (this->ArgumentReasoning->__isset.Gid) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.Name) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.Description) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.Note) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.Structure) { wasSet = true; }
          if (!wasSet) { this->ArgumentReasoning.reset(); }
          this->__isset.ArgumentReasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactReference) { 
            this->ArtifactReference = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactReference>(new TDDIArtifactReference);
          }
          xfer += this->ArtifactReference->read(iprot);
          bool wasSet = false;
          if (this->ArtifactReference->__isset.Gid) { wasSet = true; }
          if (this->ArtifactReference->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactReference->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactReference->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactReference->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactReference->__isset.Name) { wasSet = true; }
          if (this->ArtifactReference->__isset.Description) { wasSet = true; }
          if (this->ArtifactReference->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactReference->__isset.Note) { wasSet = true; }
          if (this->ArtifactReference->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactReference->__isset.ReferencedArtifactElement) { wasSet = true; }
          if (!wasSet) { this->ArtifactReference.reset(); }
          this->__isset.ArtifactReference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentAssetUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentAssetUnion");

  if (this->__isset.Assertion) {
    xfer += oprot->writeFieldBegin("Assertion", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Assertion) {
      xfer += this->Assertion->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractAssertion"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentReasoning) {
    xfer += oprot->writeFieldBegin("ArgumentReasoning", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArgumentReasoning) {
      xfer += this->ArgumentReasoning->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentReasoning"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactReference) {
    xfer += oprot->writeFieldBegin("ArtifactReference", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArtifactReference) {
      xfer += this->ArtifactReference->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactReference"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentAssetUnion &a, TDDIArgumentAssetUnion &b) {
  using ::std::swap;
  swap(a.Assertion, b.Assertion);
  swap(a.ArgumentReasoning, b.ArgumentReasoning);
  swap(a.ArtifactReference, b.ArtifactReference);
  swap(a.__isset, b.__isset);
}

TDDIArgumentAssetUnion::TDDIArgumentAssetUnion(const TDDIArgumentAssetUnion& other1975) {
  Assertion = other1975.Assertion;
  ArgumentReasoning = other1975.ArgumentReasoning;
  ArtifactReference = other1975.ArtifactReference;
  __isset = other1975.__isset;
}
TDDIArgumentAssetUnion& TDDIArgumentAssetUnion::operator=(const TDDIArgumentAssetUnion& other1976) {
  Assertion = other1976.Assertion;
  ArgumentReasoning = other1976.ArgumentReasoning;
  ArtifactReference = other1976.ArtifactReference;
  __isset = other1976.__isset;
  return *this;
}
void TDDIArgumentAssetUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentAssetUnion(";
  out << "Assertion="; (__isset.Assertion ? (out << to_string(Assertion)) : (out << "<null>"));
  out << ", " << "ArgumentReasoning="; (__isset.ArgumentReasoning ? (out << to_string(ArgumentReasoning)) : (out << "<null>"));
  out << ", " << "ArtifactReference="; (__isset.ArtifactReference ? (out << to_string(ArtifactReference)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArgumentAsset::~TDDIAbstractArgumentAsset() throw() {
}


void TDDIAbstractArgumentAsset::__set_UsedArgumentAsset(const TDDIArgumentAssetUnion& val) {
  this->UsedArgumentAsset = val;
}

void TDDIAbstractArgumentAsset::__set_UsedArgumentAssetType(const TDDIArgumentAssetUnionType val) {
  this->UsedArgumentAssetType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentAsset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentAsset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArgumentAsset.read(iprot);
          this->__isset.UsedArgumentAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1977;
          xfer += iprot->readI32(ecast1977);
          this->UsedArgumentAssetType = (TDDIArgumentAssetUnionType)ecast1977;
          this->__isset.UsedArgumentAssetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentAsset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentAsset");

  xfer += oprot->writeFieldBegin("UsedArgumentAsset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArgumentAsset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArgumentAssetType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArgumentAssetType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentAsset &a, TDDIAbstractArgumentAsset &b) {
  using ::std::swap;
  swap(a.UsedArgumentAsset, b.UsedArgumentAsset);
  swap(a.UsedArgumentAssetType, b.UsedArgumentAssetType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentAsset::TDDIAbstractArgumentAsset(const TDDIAbstractArgumentAsset& other1978) {
  UsedArgumentAsset = other1978.UsedArgumentAsset;
  UsedArgumentAssetType = other1978.UsedArgumentAssetType;
  __isset = other1978.__isset;
}
TDDIAbstractArgumentAsset& TDDIAbstractArgumentAsset::operator=(const TDDIAbstractArgumentAsset& other1979) {
  UsedArgumentAsset = other1979.UsedArgumentAsset;
  UsedArgumentAssetType = other1979.UsedArgumentAssetType;
  __isset = other1979.__isset;
  return *this;
}
void TDDIAbstractArgumentAsset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentAsset(";
  out << "UsedArgumentAsset=" << to_string(UsedArgumentAsset);
  out << ", " << "UsedArgumentAssetType=" << to_string(UsedArgumentAssetType);
  out << ")";
}


TDDIArgumentReasoning::~TDDIArgumentReasoning() throw() {
}


void TDDIArgumentReasoning::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentReasoning::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentReasoning::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentReasoning::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentReasoning::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentReasoning::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentReasoning::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentReasoning::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentReasoning::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentReasoning::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentReasoning::__set_Structure(const TDDIAbstractArgumentPackage& val) {
  this->Structure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentReasoning& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentReasoning::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1980;
            ::apache::thrift::protocol::TType _etype1983;
            xfer += iprot->readListBegin(_etype1983, _size1980);
            this->ImplementationConstraint.resize(_size1980);
            uint32_t _i1984;
            for (_i1984 = 0; _i1984 < _size1980; ++_i1984)
            {
              xfer += this->ImplementationConstraint[_i1984].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1985;
            ::apache::thrift::protocol::TType _etype1988;
            xfer += iprot->readListBegin(_etype1988, _size1985);
            this->Note.resize(_size1985);
            uint32_t _i1989;
            for (_i1989 = 0; _i1989 < _size1985; ++_i1989)
            {
              xfer += this->Note[_i1989].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1990;
            ::apache::thrift::protocol::TType _etype1993;
            xfer += iprot->readListBegin(_etype1993, _size1990);
            this->TaggedValue.resize(_size1990);
            uint32_t _i1994;
            for (_i1994 = 0; _i1994 < _size1990; ++_i1994)
            {
              xfer += this->TaggedValue[_i1994].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Structure.read(iprot);
          this->__isset.Structure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentReasoning::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentReasoning");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1995;
    for (_iter1995 = this->ImplementationConstraint.begin(); _iter1995 != this->ImplementationConstraint.end(); ++_iter1995)
    {
      xfer += (*_iter1995).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1996;
    for (_iter1996 = this->Note.begin(); _iter1996 != this->Note.end(); ++_iter1996)
    {
      xfer += (*_iter1996).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1997;
    for (_iter1997 = this->TaggedValue.begin(); _iter1997 != this->TaggedValue.end(); ++_iter1997)
    {
      xfer += (*_iter1997).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Structure", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->Structure.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentReasoning &a, TDDIArgumentReasoning &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Structure, b.Structure);
  swap(a.__isset, b.__isset);
}

TDDIArgumentReasoning::TDDIArgumentReasoning(const TDDIArgumentReasoning& other1998) {
  Gid = other1998.Gid;
  IsCitation = other1998.IsCitation;
  IsAbstract = other1998.IsAbstract;
  CitedElement = other1998.CitedElement;
  AbstractForm = other1998.AbstractForm;
  Name = other1998.Name;
  Description = other1998.Description;
  ImplementationConstraint = other1998.ImplementationConstraint;
  Note = other1998.Note;
  TaggedValue = other1998.TaggedValue;
  Structure = other1998.Structure;
  __isset = other1998.__isset;
}
TDDIArgumentReasoning& TDDIArgumentReasoning::operator=(const TDDIArgumentReasoning& other1999) {
  Gid = other1999.Gid;
  IsCitation = other1999.IsCitation;
  IsAbstract = other1999.IsAbstract;
  CitedElement = other1999.CitedElement;
  AbstractForm = other1999.AbstractForm;
  Name = other1999.Name;
  Description = other1999.Description;
  ImplementationConstraint = other1999.ImplementationConstraint;
  Note = other1999.Note;
  TaggedValue = other1999.TaggedValue;
  Structure = other1999.Structure;
  __isset = other1999.__isset;
  return *this;
}
void TDDIArgumentReasoning::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentReasoning(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Structure=" << to_string(Structure);
  out << ")";
}


TDDIClaim::~TDDIClaim() throw() {
}


void TDDIClaim::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIClaim::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIClaim::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIClaim::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIClaim::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIClaim::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIClaim::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIClaim::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIClaim::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIClaim::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIClaim::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIClaim::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIClaim& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIClaim::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2000;
            ::apache::thrift::protocol::TType _etype2003;
            xfer += iprot->readListBegin(_etype2003, _size2000);
            this->ImplementationConstraint.resize(_size2000);
            uint32_t _i2004;
            for (_i2004 = 0; _i2004 < _size2000; ++_i2004)
            {
              xfer += this->ImplementationConstraint[_i2004].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2005;
            ::apache::thrift::protocol::TType _etype2008;
            xfer += iprot->readListBegin(_etype2008, _size2005);
            this->Note.resize(_size2005);
            uint32_t _i2009;
            for (_i2009 = 0; _i2009 < _size2005; ++_i2009)
            {
              xfer += this->Note[_i2009].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2010;
            ::apache::thrift::protocol::TType _etype2013;
            xfer += iprot->readListBegin(_etype2013, _size2010);
            this->TaggedValue.resize(_size2010);
            uint32_t _i2014;
            for (_i2014 = 0; _i2014 < _size2010; ++_i2014)
            {
              xfer += this->TaggedValue[_i2014].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2015;
          xfer += iprot->readI32(ecast2015);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast2015;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size2016;
            ::apache::thrift::protocol::TType _etype2019;
            xfer += iprot->readListBegin(_etype2019, _size2016);
            this->MetaClaim.resize(_size2016);
            uint32_t _i2020;
            for (_i2020 = 0; _i2020 < _size2016; ++_i2020)
            {
              xfer += this->MetaClaim[_i2020].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIClaim::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIClaim");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2021;
    for (_iter2021 = this->ImplementationConstraint.begin(); _iter2021 != this->ImplementationConstraint.end(); ++_iter2021)
    {
      xfer += (*_iter2021).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2022;
    for (_iter2022 = this->Note.begin(); _iter2022 != this->Note.end(); ++_iter2022)
    {
      xfer += (*_iter2022).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2023;
    for (_iter2023 = this->TaggedValue.begin(); _iter2023 != this->TaggedValue.end(); ++_iter2023)
    {
      xfer += (*_iter2023).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter2024;
    for (_iter2024 = this->MetaClaim.begin(); _iter2024 != this->MetaClaim.end(); ++_iter2024)
    {
      xfer += (*_iter2024).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIClaim &a, TDDIClaim &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.__isset, b.__isset);
}

TDDIClaim::TDDIClaim(const TDDIClaim& other2025) {
  Gid = other2025.Gid;
  IsCitation = other2025.IsCitation;
  IsAbstract = other2025.IsAbstract;
  CitedElement = other2025.CitedElement;
  AbstractForm = other2025.AbstractForm;
  Name = other2025.Name;
  Description = other2025.Description;
  ImplementationConstraint = other2025.ImplementationConstraint;
  Note = other2025.Note;
  TaggedValue = other2025.TaggedValue;
  AssertionDeclaration = other2025.AssertionDeclaration;
  MetaClaim = other2025.MetaClaim;
  __isset = other2025.__isset;
}
TDDIClaim& TDDIClaim::operator=(const TDDIClaim& other2026) {
  Gid = other2026.Gid;
  IsCitation = other2026.IsCitation;
  IsAbstract = other2026.IsAbstract;
  CitedElement = other2026.CitedElement;
  AbstractForm = other2026.AbstractForm;
  Name = other2026.Name;
  Description = other2026.Description;
  ImplementationConstraint = other2026.ImplementationConstraint;
  Note = other2026.Note;
  TaggedValue = other2026.TaggedValue;
  AssertionDeclaration = other2026.AssertionDeclaration;
  MetaClaim = other2026.MetaClaim;
  __isset = other2026.__isset;
  return *this;
}
void TDDIClaim::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIClaim(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ")";
}


TDDIAssertionUnion::~TDDIAssertionUnion() throw() {
}


void TDDIAssertionUnion::__set_Claim(const TDDIClaim& val) {
  this->Claim = val;
__isset.Claim = true;
}

void TDDIAssertionUnion::__set_AssertedRelationship(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertedRelationship> val) {
  this->AssertedRelationship = val;
__isset.AssertedRelationship = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertionUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertionUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Claim.read(iprot);
          this->__isset.Claim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssertedRelationship) { 
            this->AssertedRelationship = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertedRelationship>(new TDDIAbstractAssertedRelationship);
          }
          xfer += this->AssertedRelationship->read(iprot);
          bool wasSet = false;
          if (this->AssertedRelationship->__isset.UsedAssertedRelationship) { wasSet = true; }
          if (this->AssertedRelationship->__isset.UsedAssertedRelationshipType) { wasSet = true; }
          if (!wasSet) { this->AssertedRelationship.reset(); }
          this->__isset.AssertedRelationship = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertionUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertionUnion");

  if (this->__isset.Claim) {
    xfer += oprot->writeFieldBegin("Claim", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Claim.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedRelationship) {
    xfer += oprot->writeFieldBegin("AssertedRelationship", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->AssertedRelationship) {
      xfer += this->AssertedRelationship->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractAssertedRelationship"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertionUnion &a, TDDIAssertionUnion &b) {
  using ::std::swap;
  swap(a.Claim, b.Claim);
  swap(a.AssertedRelationship, b.AssertedRelationship);
  swap(a.__isset, b.__isset);
}

TDDIAssertionUnion::TDDIAssertionUnion(const TDDIAssertionUnion& other2027) {
  Claim = other2027.Claim;
  AssertedRelationship = other2027.AssertedRelationship;
  __isset = other2027.__isset;
}
TDDIAssertionUnion& TDDIAssertionUnion::operator=(const TDDIAssertionUnion& other2028) {
  Claim = other2028.Claim;
  AssertedRelationship = other2028.AssertedRelationship;
  __isset = other2028.__isset;
  return *this;
}
void TDDIAssertionUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertionUnion(";
  out << "Claim="; (__isset.Claim ? (out << to_string(Claim)) : (out << "<null>"));
  out << ", " << "AssertedRelationship="; (__isset.AssertedRelationship ? (out << to_string(AssertedRelationship)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractAssertion::~TDDIAbstractAssertion() throw() {
}


void TDDIAbstractAssertion::__set_UsedAssertion(const TDDIAssertionUnion& val) {
  this->UsedAssertion = val;
}

void TDDIAbstractAssertion::__set_UsedAssertionType(const TDDIAssertionUnionType val) {
  this->UsedAssertionType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssertion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssertion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedAssertion.read(iprot);
          this->__isset.UsedAssertion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2029;
          xfer += iprot->readI32(ecast2029);
          this->UsedAssertionType = (TDDIAssertionUnionType)ecast2029;
          this->__isset.UsedAssertionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssertion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssertion");

  xfer += oprot->writeFieldBegin("UsedAssertion", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedAssertion.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedAssertionType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedAssertionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssertion &a, TDDIAbstractAssertion &b) {
  using ::std::swap;
  swap(a.UsedAssertion, b.UsedAssertion);
  swap(a.UsedAssertionType, b.UsedAssertionType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssertion::TDDIAbstractAssertion(const TDDIAbstractAssertion& other2030) {
  UsedAssertion = other2030.UsedAssertion;
  UsedAssertionType = other2030.UsedAssertionType;
  __isset = other2030.__isset;
}
TDDIAbstractAssertion& TDDIAbstractAssertion::operator=(const TDDIAbstractAssertion& other2031) {
  UsedAssertion = other2031.UsedAssertion;
  UsedAssertionType = other2031.UsedAssertionType;
  __isset = other2031.__isset;
  return *this;
}
void TDDIAbstractAssertion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssertion(";
  out << "UsedAssertion=" << to_string(UsedAssertion);
  out << ", " << "UsedAssertionType=" << to_string(UsedAssertionType);
  out << ")";
}


TDDIAssertedArtifactSupport::~TDDIAssertedArtifactSupport() throw() {
}


void TDDIAssertedArtifactSupport::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedArtifactSupport::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedArtifactSupport::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedArtifactSupport::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedArtifactSupport::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedArtifactSupport::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedArtifactSupport::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedArtifactSupport::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedArtifactSupport::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedArtifactSupport::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedArtifactSupport::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedArtifactSupport::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedArtifactSupport::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedArtifactSupport::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedArtifactSupport::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedArtifactSupport::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedArtifactSupport& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedArtifactSupport::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2032;
            ::apache::thrift::protocol::TType _etype2035;
            xfer += iprot->readListBegin(_etype2035, _size2032);
            this->ImplementationConstraint.resize(_size2032);
            uint32_t _i2036;
            for (_i2036 = 0; _i2036 < _size2032; ++_i2036)
            {
              xfer += this->ImplementationConstraint[_i2036].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2037;
            ::apache::thrift::protocol::TType _etype2040;
            xfer += iprot->readListBegin(_etype2040, _size2037);
            this->Note.resize(_size2037);
            uint32_t _i2041;
            for (_i2041 = 0; _i2041 < _size2037; ++_i2041)
            {
              xfer += this->Note[_i2041].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2042;
            ::apache::thrift::protocol::TType _etype2045;
            xfer += iprot->readListBegin(_etype2045, _size2042);
            this->TaggedValue.resize(_size2042);
            uint32_t _i2046;
            for (_i2046 = 0; _i2046 < _size2042; ++_i2046)
            {
              xfer += this->TaggedValue[_i2046].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2047;
          xfer += iprot->readI32(ecast2047);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast2047;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size2048;
            ::apache::thrift::protocol::TType _etype2051;
            xfer += iprot->readListBegin(_etype2051, _size2048);
            this->MetaClaim.resize(_size2048);
            uint32_t _i2052;
            for (_i2052 = 0; _i2052 < _size2048; ++_i2052)
            {
              xfer += this->MetaClaim[_i2052].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size2053;
            ::apache::thrift::protocol::TType _etype2056;
            xfer += iprot->readListBegin(_etype2056, _size2053);
            this->Source.resize(_size2053);
            uint32_t _i2057;
            for (_i2057 = 0; _i2057 < _size2053; ++_i2057)
            {
              xfer += this->Source[_i2057].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size2058;
            ::apache::thrift::protocol::TType _etype2061;
            xfer += iprot->readListBegin(_etype2061, _size2058);
            this->Target.resize(_size2058);
            uint32_t _i2062;
            for (_i2062 = 0; _i2062 < _size2058; ++_i2062)
            {
              xfer += this->Target[_i2062].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedArtifactSupport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedArtifactSupport");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2063;
    for (_iter2063 = this->ImplementationConstraint.begin(); _iter2063 != this->ImplementationConstraint.end(); ++_iter2063)
    {
      xfer += (*_iter2063).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2064;
    for (_iter2064 = this->Note.begin(); _iter2064 != this->Note.end(); ++_iter2064)
    {
      xfer += (*_iter2064).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2065;
    for (_iter2065 = this->TaggedValue.begin(); _iter2065 != this->TaggedValue.end(); ++_iter2065)
    {
      xfer += (*_iter2065).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter2066;
    for (_iter2066 = this->MetaClaim.begin(); _iter2066 != this->MetaClaim.end(); ++_iter2066)
    {
      xfer += (*_iter2066).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2067;
    for (_iter2067 = this->Source.begin(); _iter2067 != this->Source.end(); ++_iter2067)
    {
      xfer += (*_iter2067).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2068;
    for (_iter2068 = this->Target.begin(); _iter2068 != this->Target.end(); ++_iter2068)
    {
      xfer += (*_iter2068).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedArtifactSupport &a, TDDIAssertedArtifactSupport &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedArtifactSupport::TDDIAssertedArtifactSupport(const TDDIAssertedArtifactSupport& other2069) {
  Gid = other2069.Gid;
  IsCitation = other2069.IsCitation;
  IsAbstract = other2069.IsAbstract;
  CitedElement = other2069.CitedElement;
  AbstractForm = other2069.AbstractForm;
  Name = other2069.Name;
  Description = other2069.Description;
  ImplementationConstraint = other2069.ImplementationConstraint;
  Note = other2069.Note;
  TaggedValue = other2069.TaggedValue;
  AssertionDeclaration = other2069.AssertionDeclaration;
  MetaClaim = other2069.MetaClaim;
  IsCounter = other2069.IsCounter;
  Source = other2069.Source;
  Target = other2069.Target;
  Reasoning = other2069.Reasoning;
  __isset = other2069.__isset;
}
TDDIAssertedArtifactSupport& TDDIAssertedArtifactSupport::operator=(const TDDIAssertedArtifactSupport& other2070) {
  Gid = other2070.Gid;
  IsCitation = other2070.IsCitation;
  IsAbstract = other2070.IsAbstract;
  CitedElement = other2070.CitedElement;
  AbstractForm = other2070.AbstractForm;
  Name = other2070.Name;
  Description = other2070.Description;
  ImplementationConstraint = other2070.ImplementationConstraint;
  Note = other2070.Note;
  TaggedValue = other2070.TaggedValue;
  AssertionDeclaration = other2070.AssertionDeclaration;
  MetaClaim = other2070.MetaClaim;
  IsCounter = other2070.IsCounter;
  Source = other2070.Source;
  Target = other2070.Target;
  Reasoning = other2070.Reasoning;
  __isset = other2070.__isset;
  return *this;
}
void TDDIAssertedArtifactSupport::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedArtifactSupport(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedArtifactContext::~TDDIAssertedArtifactContext() throw() {
}


void TDDIAssertedArtifactContext::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedArtifactContext::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedArtifactContext::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedArtifactContext::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedArtifactContext::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedArtifactContext::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedArtifactContext::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedArtifactContext::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedArtifactContext::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedArtifactContext::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedArtifactContext::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedArtifactContext::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedArtifactContext::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedArtifactContext::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedArtifactContext::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedArtifactContext::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedArtifactContext& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedArtifactContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2071;
            ::apache::thrift::protocol::TType _etype2074;
            xfer += iprot->readListBegin(_etype2074, _size2071);
            this->ImplementationConstraint.resize(_size2071);
            uint32_t _i2075;
            for (_i2075 = 0; _i2075 < _size2071; ++_i2075)
            {
              xfer += this->ImplementationConstraint[_i2075].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2076;
            ::apache::thrift::protocol::TType _etype2079;
            xfer += iprot->readListBegin(_etype2079, _size2076);
            this->Note.resize(_size2076);
            uint32_t _i2080;
            for (_i2080 = 0; _i2080 < _size2076; ++_i2080)
            {
              xfer += this->Note[_i2080].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2081;
            ::apache::thrift::protocol::TType _etype2084;
            xfer += iprot->readListBegin(_etype2084, _size2081);
            this->TaggedValue.resize(_size2081);
            uint32_t _i2085;
            for (_i2085 = 0; _i2085 < _size2081; ++_i2085)
            {
              xfer += this->TaggedValue[_i2085].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2086;
          xfer += iprot->readI32(ecast2086);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast2086;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size2087;
            ::apache::thrift::protocol::TType _etype2090;
            xfer += iprot->readListBegin(_etype2090, _size2087);
            this->MetaClaim.resize(_size2087);
            uint32_t _i2091;
            for (_i2091 = 0; _i2091 < _size2087; ++_i2091)
            {
              xfer += this->MetaClaim[_i2091].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size2092;
            ::apache::thrift::protocol::TType _etype2095;
            xfer += iprot->readListBegin(_etype2095, _size2092);
            this->Source.resize(_size2092);
            uint32_t _i2096;
            for (_i2096 = 0; _i2096 < _size2092; ++_i2096)
            {
              xfer += this->Source[_i2096].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size2097;
            ::apache::thrift::protocol::TType _etype2100;
            xfer += iprot->readListBegin(_etype2100, _size2097);
            this->Target.resize(_size2097);
            uint32_t _i2101;
            for (_i2101 = 0; _i2101 < _size2097; ++_i2101)
            {
              xfer += this->Target[_i2101].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedArtifactContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedArtifactContext");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2102;
    for (_iter2102 = this->ImplementationConstraint.begin(); _iter2102 != this->ImplementationConstraint.end(); ++_iter2102)
    {
      xfer += (*_iter2102).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2103;
    for (_iter2103 = this->Note.begin(); _iter2103 != this->Note.end(); ++_iter2103)
    {
      xfer += (*_iter2103).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2104;
    for (_iter2104 = this->TaggedValue.begin(); _iter2104 != this->TaggedValue.end(); ++_iter2104)
    {
      xfer += (*_iter2104).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter2105;
    for (_iter2105 = this->MetaClaim.begin(); _iter2105 != this->MetaClaim.end(); ++_iter2105)
    {
      xfer += (*_iter2105).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2106;
    for (_iter2106 = this->Source.begin(); _iter2106 != this->Source.end(); ++_iter2106)
    {
      xfer += (*_iter2106).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2107;
    for (_iter2107 = this->Target.begin(); _iter2107 != this->Target.end(); ++_iter2107)
    {
      xfer += (*_iter2107).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedArtifactContext &a, TDDIAssertedArtifactContext &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedArtifactContext::TDDIAssertedArtifactContext(const TDDIAssertedArtifactContext& other2108) {
  Gid = other2108.Gid;
  IsCitation = other2108.IsCitation;
  IsAbstract = other2108.IsAbstract;
  CitedElement = other2108.CitedElement;
  AbstractForm = other2108.AbstractForm;
  Name = other2108.Name;
  Description = other2108.Description;
  ImplementationConstraint = other2108.ImplementationConstraint;
  Note = other2108.Note;
  TaggedValue = other2108.TaggedValue;
  AssertionDeclaration = other2108.AssertionDeclaration;
  MetaClaim = other2108.MetaClaim;
  IsCounter = other2108.IsCounter;
  Source = other2108.Source;
  Target = other2108.Target;
  Reasoning = other2108.Reasoning;
  __isset = other2108.__isset;
}
TDDIAssertedArtifactContext& TDDIAssertedArtifactContext::operator=(const TDDIAssertedArtifactContext& other2109) {
  Gid = other2109.Gid;
  IsCitation = other2109.IsCitation;
  IsAbstract = other2109.IsAbstract;
  CitedElement = other2109.CitedElement;
  AbstractForm = other2109.AbstractForm;
  Name = other2109.Name;
  Description = other2109.Description;
  ImplementationConstraint = other2109.ImplementationConstraint;
  Note = other2109.Note;
  TaggedValue = other2109.TaggedValue;
  AssertionDeclaration = other2109.AssertionDeclaration;
  MetaClaim = other2109.MetaClaim;
  IsCounter = other2109.IsCounter;
  Source = other2109.Source;
  Target = other2109.Target;
  Reasoning = other2109.Reasoning;
  __isset = other2109.__isset;
  return *this;
}
void TDDIAssertedArtifactContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedArtifactContext(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedInference::~TDDIAssertedInference() throw() {
}


void TDDIAssertedInference::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedInference::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedInference::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedInference::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedInference::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedInference::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedInference::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedInference::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedInference::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedInference::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedInference::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedInference::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedInference::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedInference::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedInference::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedInference::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedInference& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedInference::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2110;
            ::apache::thrift::protocol::TType _etype2113;
            xfer += iprot->readListBegin(_etype2113, _size2110);
            this->ImplementationConstraint.resize(_size2110);
            uint32_t _i2114;
            for (_i2114 = 0; _i2114 < _size2110; ++_i2114)
            {
              xfer += this->ImplementationConstraint[_i2114].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2115;
            ::apache::thrift::protocol::TType _etype2118;
            xfer += iprot->readListBegin(_etype2118, _size2115);
            this->Note.resize(_size2115);
            uint32_t _i2119;
            for (_i2119 = 0; _i2119 < _size2115; ++_i2119)
            {
              xfer += this->Note[_i2119].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2120;
            ::apache::thrift::protocol::TType _etype2123;
            xfer += iprot->readListBegin(_etype2123, _size2120);
            this->TaggedValue.resize(_size2120);
            uint32_t _i2124;
            for (_i2124 = 0; _i2124 < _size2120; ++_i2124)
            {
              xfer += this->TaggedValue[_i2124].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2125;
          xfer += iprot->readI32(ecast2125);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast2125;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size2126;
            ::apache::thrift::protocol::TType _etype2129;
            xfer += iprot->readListBegin(_etype2129, _size2126);
            this->MetaClaim.resize(_size2126);
            uint32_t _i2130;
            for (_i2130 = 0; _i2130 < _size2126; ++_i2130)
            {
              xfer += this->MetaClaim[_i2130].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size2131;
            ::apache::thrift::protocol::TType _etype2134;
            xfer += iprot->readListBegin(_etype2134, _size2131);
            this->Source.resize(_size2131);
            uint32_t _i2135;
            for (_i2135 = 0; _i2135 < _size2131; ++_i2135)
            {
              xfer += this->Source[_i2135].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size2136;
            ::apache::thrift::protocol::TType _etype2139;
            xfer += iprot->readListBegin(_etype2139, _size2136);
            this->Target.resize(_size2136);
            uint32_t _i2140;
            for (_i2140 = 0; _i2140 < _size2136; ++_i2140)
            {
              xfer += this->Target[_i2140].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedInference::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedInference");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2141;
    for (_iter2141 = this->ImplementationConstraint.begin(); _iter2141 != this->ImplementationConstraint.end(); ++_iter2141)
    {
      xfer += (*_iter2141).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2142;
    for (_iter2142 = this->Note.begin(); _iter2142 != this->Note.end(); ++_iter2142)
    {
      xfer += (*_iter2142).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2143;
    for (_iter2143 = this->TaggedValue.begin(); _iter2143 != this->TaggedValue.end(); ++_iter2143)
    {
      xfer += (*_iter2143).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter2144;
    for (_iter2144 = this->MetaClaim.begin(); _iter2144 != this->MetaClaim.end(); ++_iter2144)
    {
      xfer += (*_iter2144).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2145;
    for (_iter2145 = this->Source.begin(); _iter2145 != this->Source.end(); ++_iter2145)
    {
      xfer += (*_iter2145).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2146;
    for (_iter2146 = this->Target.begin(); _iter2146 != this->Target.end(); ++_iter2146)
    {
      xfer += (*_iter2146).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedInference &a, TDDIAssertedInference &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedInference::TDDIAssertedInference(const TDDIAssertedInference& other2147) {
  Gid = other2147.Gid;
  IsCitation = other2147.IsCitation;
  IsAbstract = other2147.IsAbstract;
  CitedElement = other2147.CitedElement;
  AbstractForm = other2147.AbstractForm;
  Name = other2147.Name;
  Description = other2147.Description;
  ImplementationConstraint = other2147.ImplementationConstraint;
  Note = other2147.Note;
  TaggedValue = other2147.TaggedValue;
  AssertionDeclaration = other2147.AssertionDeclaration;
  MetaClaim = other2147.MetaClaim;
  IsCounter = other2147.IsCounter;
  Source = other2147.Source;
  Target = other2147.Target;
  Reasoning = other2147.Reasoning;
  __isset = other2147.__isset;
}
TDDIAssertedInference& TDDIAssertedInference::operator=(const TDDIAssertedInference& other2148) {
  Gid = other2148.Gid;
  IsCitation = other2148.IsCitation;
  IsAbstract = other2148.IsAbstract;
  CitedElement = other2148.CitedElement;
  AbstractForm = other2148.AbstractForm;
  Name = other2148.Name;
  Description = other2148.Description;
  ImplementationConstraint = other2148.ImplementationConstraint;
  Note = other2148.Note;
  TaggedValue = other2148.TaggedValue;
  AssertionDeclaration = other2148.AssertionDeclaration;
  MetaClaim = other2148.MetaClaim;
  IsCounter = other2148.IsCounter;
  Source = other2148.Source;
  Target = other2148.Target;
  Reasoning = other2148.Reasoning;
  __isset = other2148.__isset;
  return *this;
}
void TDDIAssertedInference::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedInference(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedEvidence::~TDDIAssertedEvidence() throw() {
}


void TDDIAssertedEvidence::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedEvidence::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedEvidence::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedEvidence::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedEvidence::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedEvidence::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedEvidence::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedEvidence::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedEvidence::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedEvidence::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedEvidence::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedEvidence::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedEvidence::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedEvidence::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedEvidence::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedEvidence::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedEvidence& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedEvidence::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2149;
            ::apache::thrift::protocol::TType _etype2152;
            xfer += iprot->readListBegin(_etype2152, _size2149);
            this->ImplementationConstraint.resize(_size2149);
            uint32_t _i2153;
            for (_i2153 = 0; _i2153 < _size2149; ++_i2153)
            {
              xfer += this->ImplementationConstraint[_i2153].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2154;
            ::apache::thrift::protocol::TType _etype2157;
            xfer += iprot->readListBegin(_etype2157, _size2154);
            this->Note.resize(_size2154);
            uint32_t _i2158;
            for (_i2158 = 0; _i2158 < _size2154; ++_i2158)
            {
              xfer += this->Note[_i2158].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2159;
            ::apache::thrift::protocol::TType _etype2162;
            xfer += iprot->readListBegin(_etype2162, _size2159);
            this->TaggedValue.resize(_size2159);
            uint32_t _i2163;
            for (_i2163 = 0; _i2163 < _size2159; ++_i2163)
            {
              xfer += this->TaggedValue[_i2163].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2164;
          xfer += iprot->readI32(ecast2164);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast2164;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size2165;
            ::apache::thrift::protocol::TType _etype2168;
            xfer += iprot->readListBegin(_etype2168, _size2165);
            this->MetaClaim.resize(_size2165);
            uint32_t _i2169;
            for (_i2169 = 0; _i2169 < _size2165; ++_i2169)
            {
              xfer += this->MetaClaim[_i2169].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size2170;
            ::apache::thrift::protocol::TType _etype2173;
            xfer += iprot->readListBegin(_etype2173, _size2170);
            this->Source.resize(_size2170);
            uint32_t _i2174;
            for (_i2174 = 0; _i2174 < _size2170; ++_i2174)
            {
              xfer += this->Source[_i2174].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size2175;
            ::apache::thrift::protocol::TType _etype2178;
            xfer += iprot->readListBegin(_etype2178, _size2175);
            this->Target.resize(_size2175);
            uint32_t _i2179;
            for (_i2179 = 0; _i2179 < _size2175; ++_i2179)
            {
              xfer += this->Target[_i2179].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedEvidence::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedEvidence");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2180;
    for (_iter2180 = this->ImplementationConstraint.begin(); _iter2180 != this->ImplementationConstraint.end(); ++_iter2180)
    {
      xfer += (*_iter2180).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2181;
    for (_iter2181 = this->Note.begin(); _iter2181 != this->Note.end(); ++_iter2181)
    {
      xfer += (*_iter2181).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2182;
    for (_iter2182 = this->TaggedValue.begin(); _iter2182 != this->TaggedValue.end(); ++_iter2182)
    {
      xfer += (*_iter2182).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter2183;
    for (_iter2183 = this->MetaClaim.begin(); _iter2183 != this->MetaClaim.end(); ++_iter2183)
    {
      xfer += (*_iter2183).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2184;
    for (_iter2184 = this->Source.begin(); _iter2184 != this->Source.end(); ++_iter2184)
    {
      xfer += (*_iter2184).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2185;
    for (_iter2185 = this->Target.begin(); _iter2185 != this->Target.end(); ++_iter2185)
    {
      xfer += (*_iter2185).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedEvidence &a, TDDIAssertedEvidence &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedEvidence::TDDIAssertedEvidence(const TDDIAssertedEvidence& other2186) {
  Gid = other2186.Gid;
  IsCitation = other2186.IsCitation;
  IsAbstract = other2186.IsAbstract;
  CitedElement = other2186.CitedElement;
  AbstractForm = other2186.AbstractForm;
  Name = other2186.Name;
  Description = other2186.Description;
  ImplementationConstraint = other2186.ImplementationConstraint;
  Note = other2186.Note;
  TaggedValue = other2186.TaggedValue;
  AssertionDeclaration = other2186.AssertionDeclaration;
  MetaClaim = other2186.MetaClaim;
  IsCounter = other2186.IsCounter;
  Source = other2186.Source;
  Target = other2186.Target;
  Reasoning = other2186.Reasoning;
  __isset = other2186.__isset;
}
TDDIAssertedEvidence& TDDIAssertedEvidence::operator=(const TDDIAssertedEvidence& other2187) {
  Gid = other2187.Gid;
  IsCitation = other2187.IsCitation;
  IsAbstract = other2187.IsAbstract;
  CitedElement = other2187.CitedElement;
  AbstractForm = other2187.AbstractForm;
  Name = other2187.Name;
  Description = other2187.Description;
  ImplementationConstraint = other2187.ImplementationConstraint;
  Note = other2187.Note;
  TaggedValue = other2187.TaggedValue;
  AssertionDeclaration = other2187.AssertionDeclaration;
  MetaClaim = other2187.MetaClaim;
  IsCounter = other2187.IsCounter;
  Source = other2187.Source;
  Target = other2187.Target;
  Reasoning = other2187.Reasoning;
  __isset = other2187.__isset;
  return *this;
}
void TDDIAssertedEvidence::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedEvidence(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedContext::~TDDIAssertedContext() throw() {
}


void TDDIAssertedContext::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedContext::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedContext::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedContext::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedContext::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedContext::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedContext::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedContext::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedContext::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedContext::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedContext::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedContext::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedContext::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedContext::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedContext::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedContext::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedContext& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2188;
            ::apache::thrift::protocol::TType _etype2191;
            xfer += iprot->readListBegin(_etype2191, _size2188);
            this->ImplementationConstraint.resize(_size2188);
            uint32_t _i2192;
            for (_i2192 = 0; _i2192 < _size2188; ++_i2192)
            {
              xfer += this->ImplementationConstraint[_i2192].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2193;
            ::apache::thrift::protocol::TType _etype2196;
            xfer += iprot->readListBegin(_etype2196, _size2193);
            this->Note.resize(_size2193);
            uint32_t _i2197;
            for (_i2197 = 0; _i2197 < _size2193; ++_i2197)
            {
              xfer += this->Note[_i2197].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2198;
            ::apache::thrift::protocol::TType _etype2201;
            xfer += iprot->readListBegin(_etype2201, _size2198);
            this->TaggedValue.resize(_size2198);
            uint32_t _i2202;
            for (_i2202 = 0; _i2202 < _size2198; ++_i2202)
            {
              xfer += this->TaggedValue[_i2202].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2203;
          xfer += iprot->readI32(ecast2203);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast2203;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size2204;
            ::apache::thrift::protocol::TType _etype2207;
            xfer += iprot->readListBegin(_etype2207, _size2204);
            this->MetaClaim.resize(_size2204);
            uint32_t _i2208;
            for (_i2208 = 0; _i2208 < _size2204; ++_i2208)
            {
              xfer += this->MetaClaim[_i2208].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size2209;
            ::apache::thrift::protocol::TType _etype2212;
            xfer += iprot->readListBegin(_etype2212, _size2209);
            this->Source.resize(_size2209);
            uint32_t _i2213;
            for (_i2213 = 0; _i2213 < _size2209; ++_i2213)
            {
              xfer += this->Source[_i2213].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size2214;
            ::apache::thrift::protocol::TType _etype2217;
            xfer += iprot->readListBegin(_etype2217, _size2214);
            this->Target.resize(_size2214);
            uint32_t _i2218;
            for (_i2218 = 0; _i2218 < _size2214; ++_i2218)
            {
              xfer += this->Target[_i2218].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedContext");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2219;
    for (_iter2219 = this->ImplementationConstraint.begin(); _iter2219 != this->ImplementationConstraint.end(); ++_iter2219)
    {
      xfer += (*_iter2219).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2220;
    for (_iter2220 = this->Note.begin(); _iter2220 != this->Note.end(); ++_iter2220)
    {
      xfer += (*_iter2220).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2221;
    for (_iter2221 = this->TaggedValue.begin(); _iter2221 != this->TaggedValue.end(); ++_iter2221)
    {
      xfer += (*_iter2221).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter2222;
    for (_iter2222 = this->MetaClaim.begin(); _iter2222 != this->MetaClaim.end(); ++_iter2222)
    {
      xfer += (*_iter2222).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2223;
    for (_iter2223 = this->Source.begin(); _iter2223 != this->Source.end(); ++_iter2223)
    {
      xfer += (*_iter2223).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter2224;
    for (_iter2224 = this->Target.begin(); _iter2224 != this->Target.end(); ++_iter2224)
    {
      xfer += (*_iter2224).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedContext &a, TDDIAssertedContext &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedContext::TDDIAssertedContext(const TDDIAssertedContext& other2225) {
  Gid = other2225.Gid;
  IsCitation = other2225.IsCitation;
  IsAbstract = other2225.IsAbstract;
  CitedElement = other2225.CitedElement;
  AbstractForm = other2225.AbstractForm;
  Name = other2225.Name;
  Description = other2225.Description;
  ImplementationConstraint = other2225.ImplementationConstraint;
  Note = other2225.Note;
  TaggedValue = other2225.TaggedValue;
  AssertionDeclaration = other2225.AssertionDeclaration;
  MetaClaim = other2225.MetaClaim;
  IsCounter = other2225.IsCounter;
  Source = other2225.Source;
  Target = other2225.Target;
  Reasoning = other2225.Reasoning;
  __isset = other2225.__isset;
}
TDDIAssertedContext& TDDIAssertedContext::operator=(const TDDIAssertedContext& other2226) {
  Gid = other2226.Gid;
  IsCitation = other2226.IsCitation;
  IsAbstract = other2226.IsAbstract;
  CitedElement = other2226.CitedElement;
  AbstractForm = other2226.AbstractForm;
  Name = other2226.Name;
  Description = other2226.Description;
  ImplementationConstraint = other2226.ImplementationConstraint;
  Note = other2226.Note;
  TaggedValue = other2226.TaggedValue;
  AssertionDeclaration = other2226.AssertionDeclaration;
  MetaClaim = other2226.MetaClaim;
  IsCounter = other2226.IsCounter;
  Source = other2226.Source;
  Target = other2226.Target;
  Reasoning = other2226.Reasoning;
  __isset = other2226.__isset;
  return *this;
}
void TDDIAssertedContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedContext(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedRelationshipUnion::~TDDIAssertedRelationshipUnion() throw() {
}


void TDDIAssertedRelationshipUnion::__set_AssertedArtifactSupport(const TDDIAssertedArtifactSupport& val) {
  this->AssertedArtifactSupport = val;
__isset.AssertedArtifactSupport = true;
}

void TDDIAssertedRelationshipUnion::__set_AssertedArtifactContext(const TDDIAssertedArtifactContext& val) {
  this->AssertedArtifactContext = val;
__isset.AssertedArtifactContext = true;
}

void TDDIAssertedRelationshipUnion::__set_AssertedInference(const TDDIAssertedInference& val) {
  this->AssertedInference = val;
__isset.AssertedInference = true;
}

void TDDIAssertedRelationshipUnion::__set_AssertedEvidence(const TDDIAssertedEvidence& val) {
  this->AssertedEvidence = val;
__isset.AssertedEvidence = true;
}

void TDDIAssertedRelationshipUnion::__set_AssertedContext(const TDDIAssertedContext& val) {
  this->AssertedContext = val;
__isset.AssertedContext = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedRelationshipUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedRelationshipUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->AssertedArtifactSupport.read(iprot);
          this->__isset.AssertedArtifactSupport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->AssertedArtifactContext.read(iprot);
          this->__isset.AssertedArtifactContext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->AssertedInference.read(iprot);
          this->__isset.AssertedInference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->AssertedEvidence.read(iprot);
          this->__isset.AssertedEvidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->AssertedContext.read(iprot);
          this->__isset.AssertedContext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedRelationshipUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedRelationshipUnion");

  if (this->__isset.AssertedArtifactSupport) {
    xfer += oprot->writeFieldBegin("AssertedArtifactSupport", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->AssertedArtifactSupport.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedArtifactContext) {
    xfer += oprot->writeFieldBegin("AssertedArtifactContext", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->AssertedArtifactContext.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedInference) {
    xfer += oprot->writeFieldBegin("AssertedInference", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->AssertedInference.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedEvidence) {
    xfer += oprot->writeFieldBegin("AssertedEvidence", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->AssertedEvidence.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedContext) {
    xfer += oprot->writeFieldBegin("AssertedContext", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->AssertedContext.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedRelationshipUnion &a, TDDIAssertedRelationshipUnion &b) {
  using ::std::swap;
  swap(a.AssertedArtifactSupport, b.AssertedArtifactSupport);
  swap(a.AssertedArtifactContext, b.AssertedArtifactContext);
  swap(a.AssertedInference, b.AssertedInference);
  swap(a.AssertedEvidence, b.AssertedEvidence);
  swap(a.AssertedContext, b.AssertedContext);
  swap(a.__isset, b.__isset);
}

TDDIAssertedRelationshipUnion::TDDIAssertedRelationshipUnion(const TDDIAssertedRelationshipUnion& other2227) {
  AssertedArtifactSupport = other2227.AssertedArtifactSupport;
  AssertedArtifactContext = other2227.AssertedArtifactContext;
  AssertedInference = other2227.AssertedInference;
  AssertedEvidence = other2227.AssertedEvidence;
  AssertedContext = other2227.AssertedContext;
  __isset = other2227.__isset;
}
TDDIAssertedRelationshipUnion& TDDIAssertedRelationshipUnion::operator=(const TDDIAssertedRelationshipUnion& other2228) {
  AssertedArtifactSupport = other2228.AssertedArtifactSupport;
  AssertedArtifactContext = other2228.AssertedArtifactContext;
  AssertedInference = other2228.AssertedInference;
  AssertedEvidence = other2228.AssertedEvidence;
  AssertedContext = other2228.AssertedContext;
  __isset = other2228.__isset;
  return *this;
}
void TDDIAssertedRelationshipUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedRelationshipUnion(";
  out << "AssertedArtifactSupport="; (__isset.AssertedArtifactSupport ? (out << to_string(AssertedArtifactSupport)) : (out << "<null>"));
  out << ", " << "AssertedArtifactContext="; (__isset.AssertedArtifactContext ? (out << to_string(AssertedArtifactContext)) : (out << "<null>"));
  out << ", " << "AssertedInference="; (__isset.AssertedInference ? (out << to_string(AssertedInference)) : (out << "<null>"));
  out << ", " << "AssertedEvidence="; (__isset.AssertedEvidence ? (out << to_string(AssertedEvidence)) : (out << "<null>"));
  out << ", " << "AssertedContext="; (__isset.AssertedContext ? (out << to_string(AssertedContext)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractAssertedRelationship::~TDDIAbstractAssertedRelationship() throw() {
}


void TDDIAbstractAssertedRelationship::__set_UsedAssertedRelationship(const TDDIAssertedRelationshipUnion& val) {
  this->UsedAssertedRelationship = val;
}

void TDDIAbstractAssertedRelationship::__set_UsedAssertedRelationshipType(const TDDIAssertedRelationshipUnionType val) {
  this->UsedAssertedRelationshipType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssertedRelationship& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssertedRelationship::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedAssertedRelationship.read(iprot);
          this->__isset.UsedAssertedRelationship = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2229;
          xfer += iprot->readI32(ecast2229);
          this->UsedAssertedRelationshipType = (TDDIAssertedRelationshipUnionType)ecast2229;
          this->__isset.UsedAssertedRelationshipType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssertedRelationship::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssertedRelationship");

  xfer += oprot->writeFieldBegin("UsedAssertedRelationship", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedAssertedRelationship.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedAssertedRelationshipType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedAssertedRelationshipType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssertedRelationship &a, TDDIAbstractAssertedRelationship &b) {
  using ::std::swap;
  swap(a.UsedAssertedRelationship, b.UsedAssertedRelationship);
  swap(a.UsedAssertedRelationshipType, b.UsedAssertedRelationshipType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssertedRelationship::TDDIAbstractAssertedRelationship(const TDDIAbstractAssertedRelationship& other2230) {
  UsedAssertedRelationship = other2230.UsedAssertedRelationship;
  UsedAssertedRelationshipType = other2230.UsedAssertedRelationshipType;
  __isset = other2230.__isset;
}
TDDIAbstractAssertedRelationship& TDDIAbstractAssertedRelationship::operator=(const TDDIAbstractAssertedRelationship& other2231) {
  UsedAssertedRelationship = other2231.UsedAssertedRelationship;
  UsedAssertedRelationshipType = other2231.UsedAssertedRelationshipType;
  __isset = other2231.__isset;
  return *this;
}
void TDDIAbstractAssertedRelationship::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssertedRelationship(";
  out << "UsedAssertedRelationship=" << to_string(UsedAssertedRelationship);
  out << ", " << "UsedAssertedRelationshipType=" << to_string(UsedAssertedRelationshipType);
  out << ")";
}


TDDIArtifactPackageUnion::~TDDIArtifactPackageUnion() throw() {
}


void TDDIArtifactPackageUnion::__set_ArtifactPackage(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackage> val) {
  this->ArtifactPackage = val;
__isset.ArtifactPackage = true;
}

void TDDIArtifactPackageUnion::__set_ArtifactPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageInterface> val) {
  this->ArtifactPackageInterface = val;
__isset.ArtifactPackageInterface = true;
}

void TDDIArtifactPackageUnion::__set_ArtifactPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageBinding> val) {
  this->ArtifactPackageBinding = val;
__isset.ArtifactPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactPackage) { 
            this->ArtifactPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackage>(new TDDIArtifactPackage);
          }
          xfer += this->ArtifactPackage->read(iprot);
          bool wasSet = false;
          if (this->ArtifactPackage->__isset.Gid) { wasSet = true; }
          if (this->ArtifactPackage->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactPackage->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactPackage->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactPackage->__isset.Name) { wasSet = true; }
          if (this->ArtifactPackage->__isset.Description) { wasSet = true; }
          if (this->ArtifactPackage->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactPackage->__isset.Note) { wasSet = true; }
          if (this->ArtifactPackage->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactPackage->__isset.ArtifactElement) { wasSet = true; }
          if (!wasSet) { this->ArtifactPackage.reset(); }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactPackageInterface) { 
            this->ArtifactPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageInterface>(new TDDIArtifactPackageInterface);
          }
          xfer += this->ArtifactPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->ArtifactPackageInterface->__isset.Gid) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.Name) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.Description) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.Note) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.ArtifactElement) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->ArtifactPackageInterface.reset(); }
          this->__isset.ArtifactPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactPackageBinding) { 
            this->ArtifactPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageBinding>(new TDDIArtifactPackageBinding);
          }
          xfer += this->ArtifactPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->ArtifactPackageBinding->__isset.Gid) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.Name) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.Description) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.Note) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.ArtifactElement) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.ParticipantPackage) { wasSet = true; }
          if (!wasSet) { this->ArtifactPackageBinding.reset(); }
          this->__isset.ArtifactPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactPackageUnion");

  if (this->__isset.ArtifactPackage) {
    xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ArtifactPackage) {
      xfer += this->ArtifactPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactPackageInterface) {
    xfer += oprot->writeFieldBegin("ArtifactPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArtifactPackageInterface) {
      xfer += this->ArtifactPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactPackageBinding) {
    xfer += oprot->writeFieldBegin("ArtifactPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArtifactPackageBinding) {
      xfer += this->ArtifactPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactPackageUnion &a, TDDIArtifactPackageUnion &b) {
  using ::std::swap;
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArtifactPackageInterface, b.ArtifactPackageInterface);
  swap(a.ArtifactPackageBinding, b.ArtifactPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIArtifactPackageUnion::TDDIArtifactPackageUnion(const TDDIArtifactPackageUnion& other2232) {
  ArtifactPackage = other2232.ArtifactPackage;
  ArtifactPackageInterface = other2232.ArtifactPackageInterface;
  ArtifactPackageBinding = other2232.ArtifactPackageBinding;
  __isset = other2232.__isset;
}
TDDIArtifactPackageUnion& TDDIArtifactPackageUnion::operator=(const TDDIArtifactPackageUnion& other2233) {
  ArtifactPackage = other2233.ArtifactPackage;
  ArtifactPackageInterface = other2233.ArtifactPackageInterface;
  ArtifactPackageBinding = other2233.ArtifactPackageBinding;
  __isset = other2233.__isset;
  return *this;
}
void TDDIArtifactPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactPackageUnion(";
  out << "ArtifactPackage="; (__isset.ArtifactPackage ? (out << to_string(ArtifactPackage)) : (out << "<null>"));
  out << ", " << "ArtifactPackageInterface="; (__isset.ArtifactPackageInterface ? (out << to_string(ArtifactPackageInterface)) : (out << "<null>"));
  out << ", " << "ArtifactPackageBinding="; (__isset.ArtifactPackageBinding ? (out << to_string(ArtifactPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArtifactPackage::~TDDIAbstractArtifactPackage() throw() {
}


void TDDIAbstractArtifactPackage::__set_UsedArtifactPackage(const TDDIArtifactPackageUnion& val) {
  this->UsedArtifactPackage = val;
}

void TDDIAbstractArtifactPackage::__set_UsedArtifactPackageType(const TDDIArtifactPackageUnionType val) {
  this->UsedArtifactPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArtifactPackage.read(iprot);
          this->__isset.UsedArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2234;
          xfer += iprot->readI32(ecast2234);
          this->UsedArtifactPackageType = (TDDIArtifactPackageUnionType)ecast2234;
          this->__isset.UsedArtifactPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactPackage");

  xfer += oprot->writeFieldBegin("UsedArtifactPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArtifactPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArtifactPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArtifactPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactPackage &a, TDDIAbstractArtifactPackage &b) {
  using ::std::swap;
  swap(a.UsedArtifactPackage, b.UsedArtifactPackage);
  swap(a.UsedArtifactPackageType, b.UsedArtifactPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactPackage::TDDIAbstractArtifactPackage(const TDDIAbstractArtifactPackage& other2235) {
  UsedArtifactPackage = other2235.UsedArtifactPackage;
  UsedArtifactPackageType = other2235.UsedArtifactPackageType;
  __isset = other2235.__isset;
}
TDDIAbstractArtifactPackage& TDDIAbstractArtifactPackage::operator=(const TDDIAbstractArtifactPackage& other2236) {
  UsedArtifactPackage = other2236.UsedArtifactPackage;
  UsedArtifactPackageType = other2236.UsedArtifactPackageType;
  __isset = other2236.__isset;
  return *this;
}
void TDDIAbstractArtifactPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactPackage(";
  out << "UsedArtifactPackage=" << to_string(UsedArtifactPackage);
  out << ", " << "UsedArtifactPackageType=" << to_string(UsedArtifactPackageType);
  out << ")";
}


TDDIArtifactPackage::~TDDIArtifactPackage() throw() {
}


void TDDIArtifactPackage::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactPackage::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactPackage::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactPackage::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactPackage::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactPackage::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactPackage::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactPackage::__set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ArtifactElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2237;
            ::apache::thrift::protocol::TType _etype2240;
            xfer += iprot->readListBegin(_etype2240, _size2237);
            this->ImplementationConstraint.resize(_size2237);
            uint32_t _i2241;
            for (_i2241 = 0; _i2241 < _size2237; ++_i2241)
            {
              xfer += this->ImplementationConstraint[_i2241].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2242;
            ::apache::thrift::protocol::TType _etype2245;
            xfer += iprot->readListBegin(_etype2245, _size2242);
            this->Note.resize(_size2242);
            uint32_t _i2246;
            for (_i2246 = 0; _i2246 < _size2242; ++_i2246)
            {
              xfer += this->Note[_i2246].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2247;
            ::apache::thrift::protocol::TType _etype2250;
            xfer += iprot->readListBegin(_etype2250, _size2247);
            this->TaggedValue.resize(_size2247);
            uint32_t _i2251;
            for (_i2251 = 0; _i2251 < _size2247; ++_i2251)
            {
              xfer += this->TaggedValue[_i2251].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactElement.clear();
            uint32_t _size2252;
            ::apache::thrift::protocol::TType _etype2255;
            xfer += iprot->readListBegin(_etype2255, _size2252);
            this->ArtifactElement.resize(_size2252);
            uint32_t _i2256;
            for (_i2256 = 0; _i2256 < _size2252; ++_i2256)
            {
              xfer += this->ArtifactElement[_i2256].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactPackage");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2257;
    for (_iter2257 = this->ImplementationConstraint.begin(); _iter2257 != this->ImplementationConstraint.end(); ++_iter2257)
    {
      xfer += (*_iter2257).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2258;
    for (_iter2258 = this->Note.begin(); _iter2258 != this->Note.end(); ++_iter2258)
    {
      xfer += (*_iter2258).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2259;
    for (_iter2259 = this->TaggedValue.begin(); _iter2259 != this->TaggedValue.end(); ++_iter2259)
    {
      xfer += (*_iter2259).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter2260;
    for (_iter2260 = this->ArtifactElement.begin(); _iter2260 != this->ArtifactElement.end(); ++_iter2260)
    {
      xfer += (*_iter2260).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactPackage &a, TDDIArtifactPackage &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.__isset, b.__isset);
}

TDDIArtifactPackage::TDDIArtifactPackage(const TDDIArtifactPackage& other2261) {
  Gid = other2261.Gid;
  IsCitation = other2261.IsCitation;
  IsAbstract = other2261.IsAbstract;
  CitedElement = other2261.CitedElement;
  AbstractForm = other2261.AbstractForm;
  Name = other2261.Name;
  Description = other2261.Description;
  ImplementationConstraint = other2261.ImplementationConstraint;
  Note = other2261.Note;
  TaggedValue = other2261.TaggedValue;
  ArtifactElement = other2261.ArtifactElement;
  __isset = other2261.__isset;
}
TDDIArtifactPackage& TDDIArtifactPackage::operator=(const TDDIArtifactPackage& other2262) {
  Gid = other2262.Gid;
  IsCitation = other2262.IsCitation;
  IsAbstract = other2262.IsAbstract;
  CitedElement = other2262.CitedElement;
  AbstractForm = other2262.AbstractForm;
  Name = other2262.Name;
  Description = other2262.Description;
  ImplementationConstraint = other2262.ImplementationConstraint;
  Note = other2262.Note;
  TaggedValue = other2262.TaggedValue;
  ArtifactElement = other2262.ArtifactElement;
  __isset = other2262.__isset;
  return *this;
}
void TDDIArtifactPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactPackage(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArtifactElement=" << to_string(ArtifactElement);
  out << ")";
}


TDDIArtifactPackageInterface::~TDDIArtifactPackageInterface() throw() {
}


void TDDIArtifactPackageInterface::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactPackageInterface::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactPackageInterface::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactPackageInterface::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactPackageInterface::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactPackageInterface::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactPackageInterface::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactPackageInterface::__set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ArtifactElement = val;
}

void TDDIArtifactPackageInterface::__set_Implements(const TDDIAbstractArtifactPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2263;
            ::apache::thrift::protocol::TType _etype2266;
            xfer += iprot->readListBegin(_etype2266, _size2263);
            this->ImplementationConstraint.resize(_size2263);
            uint32_t _i2267;
            for (_i2267 = 0; _i2267 < _size2263; ++_i2267)
            {
              xfer += this->ImplementationConstraint[_i2267].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2268;
            ::apache::thrift::protocol::TType _etype2271;
            xfer += iprot->readListBegin(_etype2271, _size2268);
            this->Note.resize(_size2268);
            uint32_t _i2272;
            for (_i2272 = 0; _i2272 < _size2268; ++_i2272)
            {
              xfer += this->Note[_i2272].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2273;
            ::apache::thrift::protocol::TType _etype2276;
            xfer += iprot->readListBegin(_etype2276, _size2273);
            this->TaggedValue.resize(_size2273);
            uint32_t _i2277;
            for (_i2277 = 0; _i2277 < _size2273; ++_i2277)
            {
              xfer += this->TaggedValue[_i2277].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactElement.clear();
            uint32_t _size2278;
            ::apache::thrift::protocol::TType _etype2281;
            xfer += iprot->readListBegin(_etype2281, _size2278);
            this->ArtifactElement.resize(_size2278);
            uint32_t _i2282;
            for (_i2282 = 0; _i2282 < _size2278; ++_i2282)
            {
              xfer += this->ArtifactElement[_i2282].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactPackageInterface");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2283;
    for (_iter2283 = this->ImplementationConstraint.begin(); _iter2283 != this->ImplementationConstraint.end(); ++_iter2283)
    {
      xfer += (*_iter2283).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2284;
    for (_iter2284 = this->Note.begin(); _iter2284 != this->Note.end(); ++_iter2284)
    {
      xfer += (*_iter2284).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2285;
    for (_iter2285 = this->TaggedValue.begin(); _iter2285 != this->TaggedValue.end(); ++_iter2285)
    {
      xfer += (*_iter2285).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter2286;
    for (_iter2286 = this->ArtifactElement.begin(); _iter2286 != this->ArtifactElement.end(); ++_iter2286)
    {
      xfer += (*_iter2286).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactPackageInterface &a, TDDIArtifactPackageInterface &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIArtifactPackageInterface::TDDIArtifactPackageInterface(const TDDIArtifactPackageInterface& other2287) {
  Gid = other2287.Gid;
  IsCitation = other2287.IsCitation;
  IsAbstract = other2287.IsAbstract;
  CitedElement = other2287.CitedElement;
  AbstractForm = other2287.AbstractForm;
  Name = other2287.Name;
  Description = other2287.Description;
  ImplementationConstraint = other2287.ImplementationConstraint;
  Note = other2287.Note;
  TaggedValue = other2287.TaggedValue;
  ArtifactElement = other2287.ArtifactElement;
  Implements = other2287.Implements;
  __isset = other2287.__isset;
}
TDDIArtifactPackageInterface& TDDIArtifactPackageInterface::operator=(const TDDIArtifactPackageInterface& other2288) {
  Gid = other2288.Gid;
  IsCitation = other2288.IsCitation;
  IsAbstract = other2288.IsAbstract;
  CitedElement = other2288.CitedElement;
  AbstractForm = other2288.AbstractForm;
  Name = other2288.Name;
  Description = other2288.Description;
  ImplementationConstraint = other2288.ImplementationConstraint;
  Note = other2288.Note;
  TaggedValue = other2288.TaggedValue;
  ArtifactElement = other2288.ArtifactElement;
  Implements = other2288.Implements;
  __isset = other2288.__isset;
  return *this;
}
void TDDIArtifactPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactPackageInterface(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArtifactElement=" << to_string(ArtifactElement);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIArtifactPackageBinding::~TDDIArtifactPackageBinding() throw() {
}


void TDDIArtifactPackageBinding::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactPackageBinding::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactPackageBinding::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactPackageBinding::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactPackageBinding::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactPackageBinding::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactPackageBinding::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactPackageBinding::__set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ArtifactElement = val;
}

void TDDIArtifactPackageBinding::__set_ParticipantPackage(const std::vector<TDDIAbstractArtifactPackage> & val) {
  this->ParticipantPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2289;
            ::apache::thrift::protocol::TType _etype2292;
            xfer += iprot->readListBegin(_etype2292, _size2289);
            this->ImplementationConstraint.resize(_size2289);
            uint32_t _i2293;
            for (_i2293 = 0; _i2293 < _size2289; ++_i2293)
            {
              xfer += this->ImplementationConstraint[_i2293].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2294;
            ::apache::thrift::protocol::TType _etype2297;
            xfer += iprot->readListBegin(_etype2297, _size2294);
            this->Note.resize(_size2294);
            uint32_t _i2298;
            for (_i2298 = 0; _i2298 < _size2294; ++_i2298)
            {
              xfer += this->Note[_i2298].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2299;
            ::apache::thrift::protocol::TType _etype2302;
            xfer += iprot->readListBegin(_etype2302, _size2299);
            this->TaggedValue.resize(_size2299);
            uint32_t _i2303;
            for (_i2303 = 0; _i2303 < _size2299; ++_i2303)
            {
              xfer += this->TaggedValue[_i2303].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactElement.clear();
            uint32_t _size2304;
            ::apache::thrift::protocol::TType _etype2307;
            xfer += iprot->readListBegin(_etype2307, _size2304);
            this->ArtifactElement.resize(_size2304);
            uint32_t _i2308;
            for (_i2308 = 0; _i2308 < _size2304; ++_i2308)
            {
              xfer += this->ArtifactElement[_i2308].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackage.clear();
            uint32_t _size2309;
            ::apache::thrift::protocol::TType _etype2312;
            xfer += iprot->readListBegin(_etype2312, _size2309);
            this->ParticipantPackage.resize(_size2309);
            uint32_t _i2313;
            for (_i2313 = 0; _i2313 < _size2309; ++_i2313)
            {
              xfer += this->ParticipantPackage[_i2313].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactPackageBinding");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2314;
    for (_iter2314 = this->ImplementationConstraint.begin(); _iter2314 != this->ImplementationConstraint.end(); ++_iter2314)
    {
      xfer += (*_iter2314).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2315;
    for (_iter2315 = this->Note.begin(); _iter2315 != this->Note.end(); ++_iter2315)
    {
      xfer += (*_iter2315).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2316;
    for (_iter2316 = this->TaggedValue.begin(); _iter2316 != this->TaggedValue.end(); ++_iter2316)
    {
      xfer += (*_iter2316).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter2317;
    for (_iter2317 = this->ArtifactElement.begin(); _iter2317 != this->ArtifactElement.end(); ++_iter2317)
    {
      xfer += (*_iter2317).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackage", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackage.size()));
    std::vector<TDDIAbstractArtifactPackage> ::const_iterator _iter2318;
    for (_iter2318 = this->ParticipantPackage.begin(); _iter2318 != this->ParticipantPackage.end(); ++_iter2318)
    {
      xfer += (*_iter2318).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactPackageBinding &a, TDDIArtifactPackageBinding &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.ParticipantPackage, b.ParticipantPackage);
  swap(a.__isset, b.__isset);
}

TDDIArtifactPackageBinding::TDDIArtifactPackageBinding(const TDDIArtifactPackageBinding& other2319) {
  Gid = other2319.Gid;
  IsCitation = other2319.IsCitation;
  IsAbstract = other2319.IsAbstract;
  CitedElement = other2319.CitedElement;
  AbstractForm = other2319.AbstractForm;
  Name = other2319.Name;
  Description = other2319.Description;
  ImplementationConstraint = other2319.ImplementationConstraint;
  Note = other2319.Note;
  TaggedValue = other2319.TaggedValue;
  ArtifactElement = other2319.ArtifactElement;
  ParticipantPackage = other2319.ParticipantPackage;
  __isset = other2319.__isset;
}
TDDIArtifactPackageBinding& TDDIArtifactPackageBinding::operator=(const TDDIArtifactPackageBinding& other2320) {
  Gid = other2320.Gid;
  IsCitation = other2320.IsCitation;
  IsAbstract = other2320.IsAbstract;
  CitedElement = other2320.CitedElement;
  AbstractForm = other2320.AbstractForm;
  Name = other2320.Name;
  Description = other2320.Description;
  ImplementationConstraint = other2320.ImplementationConstraint;
  Note = other2320.Note;
  TaggedValue = other2320.TaggedValue;
  ArtifactElement = other2320.ArtifactElement;
  ParticipantPackage = other2320.ParticipantPackage;
  __isset = other2320.__isset;
  return *this;
}
void TDDIArtifactPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactPackageBinding(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArtifactElement=" << to_string(ArtifactElement);
  out << ", " << "ParticipantPackage=" << to_string(ParticipantPackage);
  out << ")";
}


TDDIArtifactGroup::~TDDIArtifactGroup() throw() {
}


void TDDIArtifactGroup::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactGroup::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactGroup::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactGroup::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactGroup::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactGroup::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactGroup::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactGroup::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactGroup::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactGroup::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactGroup::__set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ArtifactElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2321;
            ::apache::thrift::protocol::TType _etype2324;
            xfer += iprot->readListBegin(_etype2324, _size2321);
            this->ImplementationConstraint.resize(_size2321);
            uint32_t _i2325;
            for (_i2325 = 0; _i2325 < _size2321; ++_i2325)
            {
              xfer += this->ImplementationConstraint[_i2325].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2326;
            ::apache::thrift::protocol::TType _etype2329;
            xfer += iprot->readListBegin(_etype2329, _size2326);
            this->Note.resize(_size2326);
            uint32_t _i2330;
            for (_i2330 = 0; _i2330 < _size2326; ++_i2330)
            {
              xfer += this->Note[_i2330].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2331;
            ::apache::thrift::protocol::TType _etype2334;
            xfer += iprot->readListBegin(_etype2334, _size2331);
            this->TaggedValue.resize(_size2331);
            uint32_t _i2335;
            for (_i2335 = 0; _i2335 < _size2331; ++_i2335)
            {
              xfer += this->TaggedValue[_i2335].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactElement.clear();
            uint32_t _size2336;
            ::apache::thrift::protocol::TType _etype2339;
            xfer += iprot->readListBegin(_etype2339, _size2336);
            this->ArtifactElement.resize(_size2336);
            uint32_t _i2340;
            for (_i2340 = 0; _i2340 < _size2336; ++_i2340)
            {
              xfer += this->ArtifactElement[_i2340].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactGroup");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2341;
    for (_iter2341 = this->ImplementationConstraint.begin(); _iter2341 != this->ImplementationConstraint.end(); ++_iter2341)
    {
      xfer += (*_iter2341).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2342;
    for (_iter2342 = this->Note.begin(); _iter2342 != this->Note.end(); ++_iter2342)
    {
      xfer += (*_iter2342).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2343;
    for (_iter2343 = this->TaggedValue.begin(); _iter2343 != this->TaggedValue.end(); ++_iter2343)
    {
      xfer += (*_iter2343).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter2344;
    for (_iter2344 = this->ArtifactElement.begin(); _iter2344 != this->ArtifactElement.end(); ++_iter2344)
    {
      xfer += (*_iter2344).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactGroup &a, TDDIArtifactGroup &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.__isset, b.__isset);
}

TDDIArtifactGroup::TDDIArtifactGroup(const TDDIArtifactGroup& other2345) {
  Gid = other2345.Gid;
  IsCitation = other2345.IsCitation;
  IsAbstract = other2345.IsAbstract;
  CitedElement = other2345.CitedElement;
  AbstractForm = other2345.AbstractForm;
  Name = other2345.Name;
  Description = other2345.Description;
  ImplementationConstraint = other2345.ImplementationConstraint;
  Note = other2345.Note;
  TaggedValue = other2345.TaggedValue;
  ArtifactElement = other2345.ArtifactElement;
  __isset = other2345.__isset;
}
TDDIArtifactGroup& TDDIArtifactGroup::operator=(const TDDIArtifactGroup& other2346) {
  Gid = other2346.Gid;
  IsCitation = other2346.IsCitation;
  IsAbstract = other2346.IsAbstract;
  CitedElement = other2346.CitedElement;
  AbstractForm = other2346.AbstractForm;
  Name = other2346.Name;
  Description = other2346.Description;
  ImplementationConstraint = other2346.ImplementationConstraint;
  Note = other2346.Note;
  TaggedValue = other2346.TaggedValue;
  ArtifactElement = other2346.ArtifactElement;
  __isset = other2346.__isset;
  return *this;
}
void TDDIArtifactGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactGroup(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArtifactElement=" << to_string(ArtifactElement);
  out << ")";
}


TDDIProperty::~TDDIProperty() throw() {
}


void TDDIProperty::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIProperty::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIProperty::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIProperty::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIProperty::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIProperty::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIProperty::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIProperty::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIProperty::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIProperty::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIProperty::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIProperty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2347;
            ::apache::thrift::protocol::TType _etype2350;
            xfer += iprot->readListBegin(_etype2350, _size2347);
            this->ImplementationConstraint.resize(_size2347);
            uint32_t _i2351;
            for (_i2351 = 0; _i2351 < _size2347; ++_i2351)
            {
              xfer += this->ImplementationConstraint[_i2351].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2352;
            ::apache::thrift::protocol::TType _etype2355;
            xfer += iprot->readListBegin(_etype2355, _size2352);
            this->Note.resize(_size2352);
            uint32_t _i2356;
            for (_i2356 = 0; _i2356 < _size2352; ++_i2356)
            {
              xfer += this->Note[_i2356].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2357;
            ::apache::thrift::protocol::TType _etype2360;
            xfer += iprot->readListBegin(_etype2360, _size2357);
            this->TaggedValue.resize(_size2357);
            uint32_t _i2361;
            for (_i2361 = 0; _i2361 < _size2357; ++_i2361)
            {
              xfer += this->TaggedValue[_i2361].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2362;
            ::apache::thrift::protocol::TType _etype2365;
            xfer += iprot->readListBegin(_etype2365, _size2362);
            this->Property.resize(_size2362);
            uint32_t _i2366;
            for (_i2366 = 0; _i2366 < _size2362; ++_i2366)
            {
              xfer += this->Property[_i2366].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIProperty");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2367;
    for (_iter2367 = this->ImplementationConstraint.begin(); _iter2367 != this->ImplementationConstraint.end(); ++_iter2367)
    {
      xfer += (*_iter2367).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2368;
    for (_iter2368 = this->Note.begin(); _iter2368 != this->Note.end(); ++_iter2368)
    {
      xfer += (*_iter2368).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2369;
    for (_iter2369 = this->TaggedValue.begin(); _iter2369 != this->TaggedValue.end(); ++_iter2369)
    {
      xfer += (*_iter2369).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2370;
    for (_iter2370 = this->Property.begin(); _iter2370 != this->Property.end(); ++_iter2370)
    {
      xfer += (*_iter2370).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIProperty &a, TDDIProperty &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.__isset, b.__isset);
}

TDDIProperty::TDDIProperty(const TDDIProperty& other2371) {
  Gid = other2371.Gid;
  IsCitation = other2371.IsCitation;
  IsAbstract = other2371.IsAbstract;
  CitedElement = other2371.CitedElement;
  AbstractForm = other2371.AbstractForm;
  Name = other2371.Name;
  Description = other2371.Description;
  ImplementationConstraint = other2371.ImplementationConstraint;
  Note = other2371.Note;
  TaggedValue = other2371.TaggedValue;
  Property = other2371.Property;
  __isset = other2371.__isset;
}
TDDIProperty& TDDIProperty::operator=(const TDDIProperty& other2372) {
  Gid = other2372.Gid;
  IsCitation = other2372.IsCitation;
  IsAbstract = other2372.IsAbstract;
  CitedElement = other2372.CitedElement;
  AbstractForm = other2372.AbstractForm;
  Name = other2372.Name;
  Description = other2372.Description;
  ImplementationConstraint = other2372.ImplementationConstraint;
  Note = other2372.Note;
  TaggedValue = other2372.TaggedValue;
  Property = other2372.Property;
  __isset = other2372.__isset;
  return *this;
}
void TDDIProperty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIProperty(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ")";
}


TDDITechnique::~TDDITechnique() throw() {
}


void TDDITechnique::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITechnique::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITechnique::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITechnique::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITechnique::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITechnique::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITechnique::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITechnique::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITechnique::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITechnique::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITechnique::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITechnique& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITechnique::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2373;
            ::apache::thrift::protocol::TType _etype2376;
            xfer += iprot->readListBegin(_etype2376, _size2373);
            this->ImplementationConstraint.resize(_size2373);
            uint32_t _i2377;
            for (_i2377 = 0; _i2377 < _size2373; ++_i2377)
            {
              xfer += this->ImplementationConstraint[_i2377].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2378;
            ::apache::thrift::protocol::TType _etype2381;
            xfer += iprot->readListBegin(_etype2381, _size2378);
            this->Note.resize(_size2378);
            uint32_t _i2382;
            for (_i2382 = 0; _i2382 < _size2378; ++_i2382)
            {
              xfer += this->Note[_i2382].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2383;
            ::apache::thrift::protocol::TType _etype2386;
            xfer += iprot->readListBegin(_etype2386, _size2383);
            this->TaggedValue.resize(_size2383);
            uint32_t _i2387;
            for (_i2387 = 0; _i2387 < _size2383; ++_i2387)
            {
              xfer += this->TaggedValue[_i2387].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2388;
            ::apache::thrift::protocol::TType _etype2391;
            xfer += iprot->readListBegin(_etype2391, _size2388);
            this->Property.resize(_size2388);
            uint32_t _i2392;
            for (_i2392 = 0; _i2392 < _size2388; ++_i2392)
            {
              xfer += this->Property[_i2392].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITechnique::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITechnique");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2393;
    for (_iter2393 = this->ImplementationConstraint.begin(); _iter2393 != this->ImplementationConstraint.end(); ++_iter2393)
    {
      xfer += (*_iter2393).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2394;
    for (_iter2394 = this->Note.begin(); _iter2394 != this->Note.end(); ++_iter2394)
    {
      xfer += (*_iter2394).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2395;
    for (_iter2395 = this->TaggedValue.begin(); _iter2395 != this->TaggedValue.end(); ++_iter2395)
    {
      xfer += (*_iter2395).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2396;
    for (_iter2396 = this->Property.begin(); _iter2396 != this->Property.end(); ++_iter2396)
    {
      xfer += (*_iter2396).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITechnique &a, TDDITechnique &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.__isset, b.__isset);
}

TDDITechnique::TDDITechnique(const TDDITechnique& other2397) {
  Gid = other2397.Gid;
  IsCitation = other2397.IsCitation;
  IsAbstract = other2397.IsAbstract;
  CitedElement = other2397.CitedElement;
  AbstractForm = other2397.AbstractForm;
  Name = other2397.Name;
  Description = other2397.Description;
  ImplementationConstraint = other2397.ImplementationConstraint;
  Note = other2397.Note;
  TaggedValue = other2397.TaggedValue;
  Property = other2397.Property;
  __isset = other2397.__isset;
}
TDDITechnique& TDDITechnique::operator=(const TDDITechnique& other2398) {
  Gid = other2398.Gid;
  IsCitation = other2398.IsCitation;
  IsAbstract = other2398.IsAbstract;
  CitedElement = other2398.CitedElement;
  AbstractForm = other2398.AbstractForm;
  Name = other2398.Name;
  Description = other2398.Description;
  ImplementationConstraint = other2398.ImplementationConstraint;
  Note = other2398.Note;
  TaggedValue = other2398.TaggedValue;
  Property = other2398.Property;
  __isset = other2398.__isset;
  return *this;
}
void TDDITechnique::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITechnique(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ")";
}


TDDIParticipant::~TDDIParticipant() throw() {
}


void TDDIParticipant::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIParticipant::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIParticipant::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIParticipant::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIParticipant::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIParticipant::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIParticipant::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIParticipant::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIParticipant::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIParticipant::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIParticipant::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIParticipant& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIParticipant::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2399;
            ::apache::thrift::protocol::TType _etype2402;
            xfer += iprot->readListBegin(_etype2402, _size2399);
            this->ImplementationConstraint.resize(_size2399);
            uint32_t _i2403;
            for (_i2403 = 0; _i2403 < _size2399; ++_i2403)
            {
              xfer += this->ImplementationConstraint[_i2403].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2404;
            ::apache::thrift::protocol::TType _etype2407;
            xfer += iprot->readListBegin(_etype2407, _size2404);
            this->Note.resize(_size2404);
            uint32_t _i2408;
            for (_i2408 = 0; _i2408 < _size2404; ++_i2408)
            {
              xfer += this->Note[_i2408].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2409;
            ::apache::thrift::protocol::TType _etype2412;
            xfer += iprot->readListBegin(_etype2412, _size2409);
            this->TaggedValue.resize(_size2409);
            uint32_t _i2413;
            for (_i2413 = 0; _i2413 < _size2409; ++_i2413)
            {
              xfer += this->TaggedValue[_i2413].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2414;
            ::apache::thrift::protocol::TType _etype2417;
            xfer += iprot->readListBegin(_etype2417, _size2414);
            this->Property.resize(_size2414);
            uint32_t _i2418;
            for (_i2418 = 0; _i2418 < _size2414; ++_i2418)
            {
              xfer += this->Property[_i2418].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIParticipant::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIParticipant");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2419;
    for (_iter2419 = this->ImplementationConstraint.begin(); _iter2419 != this->ImplementationConstraint.end(); ++_iter2419)
    {
      xfer += (*_iter2419).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2420;
    for (_iter2420 = this->Note.begin(); _iter2420 != this->Note.end(); ++_iter2420)
    {
      xfer += (*_iter2420).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2421;
    for (_iter2421 = this->TaggedValue.begin(); _iter2421 != this->TaggedValue.end(); ++_iter2421)
    {
      xfer += (*_iter2421).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2422;
    for (_iter2422 = this->Property.begin(); _iter2422 != this->Property.end(); ++_iter2422)
    {
      xfer += (*_iter2422).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIParticipant &a, TDDIParticipant &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.__isset, b.__isset);
}

TDDIParticipant::TDDIParticipant(const TDDIParticipant& other2423) {
  Gid = other2423.Gid;
  IsCitation = other2423.IsCitation;
  IsAbstract = other2423.IsAbstract;
  CitedElement = other2423.CitedElement;
  AbstractForm = other2423.AbstractForm;
  Name = other2423.Name;
  Description = other2423.Description;
  ImplementationConstraint = other2423.ImplementationConstraint;
  Note = other2423.Note;
  TaggedValue = other2423.TaggedValue;
  Property = other2423.Property;
  __isset = other2423.__isset;
}
TDDIParticipant& TDDIParticipant::operator=(const TDDIParticipant& other2424) {
  Gid = other2424.Gid;
  IsCitation = other2424.IsCitation;
  IsAbstract = other2424.IsAbstract;
  CitedElement = other2424.CitedElement;
  AbstractForm = other2424.AbstractForm;
  Name = other2424.Name;
  Description = other2424.Description;
  ImplementationConstraint = other2424.ImplementationConstraint;
  Note = other2424.Note;
  TaggedValue = other2424.TaggedValue;
  Property = other2424.Property;
  __isset = other2424.__isset;
  return *this;
}
void TDDIParticipant::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIParticipant(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ")";
}


TDDIActivity::~TDDIActivity() throw() {
}


void TDDIActivity::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIActivity::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIActivity::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIActivity::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIActivity::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIActivity::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIActivity::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIActivity::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIActivity::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIActivity::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIActivity::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}

void TDDIActivity::__set_StartTime(const std::string& val) {
  this->StartTime = val;
}

void TDDIActivity::__set_EndTime(const std::string& val) {
  this->EndTime = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIActivity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIActivity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2425;
            ::apache::thrift::protocol::TType _etype2428;
            xfer += iprot->readListBegin(_etype2428, _size2425);
            this->ImplementationConstraint.resize(_size2425);
            uint32_t _i2429;
            for (_i2429 = 0; _i2429 < _size2425; ++_i2429)
            {
              xfer += this->ImplementationConstraint[_i2429].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2430;
            ::apache::thrift::protocol::TType _etype2433;
            xfer += iprot->readListBegin(_etype2433, _size2430);
            this->Note.resize(_size2430);
            uint32_t _i2434;
            for (_i2434 = 0; _i2434 < _size2430; ++_i2434)
            {
              xfer += this->Note[_i2434].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2435;
            ::apache::thrift::protocol::TType _etype2438;
            xfer += iprot->readListBegin(_etype2438, _size2435);
            this->TaggedValue.resize(_size2435);
            uint32_t _i2439;
            for (_i2439 = 0; _i2439 < _size2435; ++_i2439)
            {
              xfer += this->TaggedValue[_i2439].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2440;
            ::apache::thrift::protocol::TType _etype2443;
            xfer += iprot->readListBegin(_etype2443, _size2440);
            this->Property.resize(_size2440);
            uint32_t _i2444;
            for (_i2444 = 0; _i2444 < _size2440; ++_i2444)
            {
              xfer += this->Property[_i2444].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->StartTime);
          this->__isset.StartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->EndTime);
          this->__isset.EndTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIActivity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIActivity");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2445;
    for (_iter2445 = this->ImplementationConstraint.begin(); _iter2445 != this->ImplementationConstraint.end(); ++_iter2445)
    {
      xfer += (*_iter2445).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2446;
    for (_iter2446 = this->Note.begin(); _iter2446 != this->Note.end(); ++_iter2446)
    {
      xfer += (*_iter2446).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2447;
    for (_iter2447 = this->TaggedValue.begin(); _iter2447 != this->TaggedValue.end(); ++_iter2447)
    {
      xfer += (*_iter2447).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2448;
    for (_iter2448 = this->Property.begin(); _iter2448 != this->Property.end(); ++_iter2448)
    {
      xfer += (*_iter2448).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StartTime", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->StartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("EndTime", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->EndTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIActivity &a, TDDIActivity &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.StartTime, b.StartTime);
  swap(a.EndTime, b.EndTime);
  swap(a.__isset, b.__isset);
}

TDDIActivity::TDDIActivity(const TDDIActivity& other2449) {
  Gid = other2449.Gid;
  IsCitation = other2449.IsCitation;
  IsAbstract = other2449.IsAbstract;
  CitedElement = other2449.CitedElement;
  AbstractForm = other2449.AbstractForm;
  Name = other2449.Name;
  Description = other2449.Description;
  ImplementationConstraint = other2449.ImplementationConstraint;
  Note = other2449.Note;
  TaggedValue = other2449.TaggedValue;
  Property = other2449.Property;
  StartTime = other2449.StartTime;
  EndTime = other2449.EndTime;
  __isset = other2449.__isset;
}
TDDIActivity& TDDIActivity::operator=(const TDDIActivity& other2450) {
  Gid = other2450.Gid;
  IsCitation = other2450.IsCitation;
  IsAbstract = other2450.IsAbstract;
  CitedElement = other2450.CitedElement;
  AbstractForm = other2450.AbstractForm;
  Name = other2450.Name;
  Description = other2450.Description;
  ImplementationConstraint = other2450.ImplementationConstraint;
  Note = other2450.Note;
  TaggedValue = other2450.TaggedValue;
  Property = other2450.Property;
  StartTime = other2450.StartTime;
  EndTime = other2450.EndTime;
  __isset = other2450.__isset;
  return *this;
}
void TDDIActivity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIActivity(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ", " << "StartTime=" << to_string(StartTime);
  out << ", " << "EndTime=" << to_string(EndTime);
  out << ")";
}


TDDIEvent::~TDDIEvent() throw() {
}


void TDDIEvent::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIEvent::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIEvent::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIEvent::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIEvent::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIEvent::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIEvent::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIEvent::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIEvent::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIEvent::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIEvent::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}

void TDDIEvent::__set_Occurence(const std::string& val) {
  this->Occurence = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2451;
            ::apache::thrift::protocol::TType _etype2454;
            xfer += iprot->readListBegin(_etype2454, _size2451);
            this->ImplementationConstraint.resize(_size2451);
            uint32_t _i2455;
            for (_i2455 = 0; _i2455 < _size2451; ++_i2455)
            {
              xfer += this->ImplementationConstraint[_i2455].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2456;
            ::apache::thrift::protocol::TType _etype2459;
            xfer += iprot->readListBegin(_etype2459, _size2456);
            this->Note.resize(_size2456);
            uint32_t _i2460;
            for (_i2460 = 0; _i2460 < _size2456; ++_i2460)
            {
              xfer += this->Note[_i2460].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2461;
            ::apache::thrift::protocol::TType _etype2464;
            xfer += iprot->readListBegin(_etype2464, _size2461);
            this->TaggedValue.resize(_size2461);
            uint32_t _i2465;
            for (_i2465 = 0; _i2465 < _size2461; ++_i2465)
            {
              xfer += this->TaggedValue[_i2465].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2466;
            ::apache::thrift::protocol::TType _etype2469;
            xfer += iprot->readListBegin(_etype2469, _size2466);
            this->Property.resize(_size2466);
            uint32_t _i2470;
            for (_i2470 = 0; _i2470 < _size2466; ++_i2470)
            {
              xfer += this->Property[_i2470].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Occurence);
          this->__isset.Occurence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIEvent");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2471;
    for (_iter2471 = this->ImplementationConstraint.begin(); _iter2471 != this->ImplementationConstraint.end(); ++_iter2471)
    {
      xfer += (*_iter2471).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2472;
    for (_iter2472 = this->Note.begin(); _iter2472 != this->Note.end(); ++_iter2472)
    {
      xfer += (*_iter2472).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2473;
    for (_iter2473 = this->TaggedValue.begin(); _iter2473 != this->TaggedValue.end(); ++_iter2473)
    {
      xfer += (*_iter2473).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2474;
    for (_iter2474 = this->Property.begin(); _iter2474 != this->Property.end(); ++_iter2474)
    {
      xfer += (*_iter2474).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Occurence", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->Occurence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIEvent &a, TDDIEvent &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.Occurence, b.Occurence);
  swap(a.__isset, b.__isset);
}

TDDIEvent::TDDIEvent(const TDDIEvent& other2475) {
  Gid = other2475.Gid;
  IsCitation = other2475.IsCitation;
  IsAbstract = other2475.IsAbstract;
  CitedElement = other2475.CitedElement;
  AbstractForm = other2475.AbstractForm;
  Name = other2475.Name;
  Description = other2475.Description;
  ImplementationConstraint = other2475.ImplementationConstraint;
  Note = other2475.Note;
  TaggedValue = other2475.TaggedValue;
  Property = other2475.Property;
  Occurence = other2475.Occurence;
  __isset = other2475.__isset;
}
TDDIEvent& TDDIEvent::operator=(const TDDIEvent& other2476) {
  Gid = other2476.Gid;
  IsCitation = other2476.IsCitation;
  IsAbstract = other2476.IsAbstract;
  CitedElement = other2476.CitedElement;
  AbstractForm = other2476.AbstractForm;
  Name = other2476.Name;
  Description = other2476.Description;
  ImplementationConstraint = other2476.ImplementationConstraint;
  Note = other2476.Note;
  TaggedValue = other2476.TaggedValue;
  Property = other2476.Property;
  Occurence = other2476.Occurence;
  __isset = other2476.__isset;
  return *this;
}
void TDDIEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIEvent(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ", " << "Occurence=" << to_string(Occurence);
  out << ")";
}


TDDIResource::~TDDIResource() throw() {
}


void TDDIResource::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIResource::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIResource::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIResource::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIResource::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIResource::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIResource::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIResource::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIResource::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIResource::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIResource::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIResource& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIResource::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2477;
            ::apache::thrift::protocol::TType _etype2480;
            xfer += iprot->readListBegin(_etype2480, _size2477);
            this->ImplementationConstraint.resize(_size2477);
            uint32_t _i2481;
            for (_i2481 = 0; _i2481 < _size2477; ++_i2481)
            {
              xfer += this->ImplementationConstraint[_i2481].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2482;
            ::apache::thrift::protocol::TType _etype2485;
            xfer += iprot->readListBegin(_etype2485, _size2482);
            this->Note.resize(_size2482);
            uint32_t _i2486;
            for (_i2486 = 0; _i2486 < _size2482; ++_i2486)
            {
              xfer += this->Note[_i2486].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2487;
            ::apache::thrift::protocol::TType _etype2490;
            xfer += iprot->readListBegin(_etype2490, _size2487);
            this->TaggedValue.resize(_size2487);
            uint32_t _i2491;
            for (_i2491 = 0; _i2491 < _size2487; ++_i2491)
            {
              xfer += this->TaggedValue[_i2491].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2492;
            ::apache::thrift::protocol::TType _etype2495;
            xfer += iprot->readListBegin(_etype2495, _size2492);
            this->Property.resize(_size2492);
            uint32_t _i2496;
            for (_i2496 = 0; _i2496 < _size2492; ++_i2496)
            {
              xfer += this->Property[_i2496].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIResource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIResource");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2497;
    for (_iter2497 = this->ImplementationConstraint.begin(); _iter2497 != this->ImplementationConstraint.end(); ++_iter2497)
    {
      xfer += (*_iter2497).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2498;
    for (_iter2498 = this->Note.begin(); _iter2498 != this->Note.end(); ++_iter2498)
    {
      xfer += (*_iter2498).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2499;
    for (_iter2499 = this->TaggedValue.begin(); _iter2499 != this->TaggedValue.end(); ++_iter2499)
    {
      xfer += (*_iter2499).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2500;
    for (_iter2500 = this->Property.begin(); _iter2500 != this->Property.end(); ++_iter2500)
    {
      xfer += (*_iter2500).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIResource &a, TDDIResource &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.__isset, b.__isset);
}

TDDIResource::TDDIResource(const TDDIResource& other2501) {
  Gid = other2501.Gid;
  IsCitation = other2501.IsCitation;
  IsAbstract = other2501.IsAbstract;
  CitedElement = other2501.CitedElement;
  AbstractForm = other2501.AbstractForm;
  Name = other2501.Name;
  Description = other2501.Description;
  ImplementationConstraint = other2501.ImplementationConstraint;
  Note = other2501.Note;
  TaggedValue = other2501.TaggedValue;
  Property = other2501.Property;
  __isset = other2501.__isset;
}
TDDIResource& TDDIResource::operator=(const TDDIResource& other2502) {
  Gid = other2502.Gid;
  IsCitation = other2502.IsCitation;
  IsAbstract = other2502.IsAbstract;
  CitedElement = other2502.CitedElement;
  AbstractForm = other2502.AbstractForm;
  Name = other2502.Name;
  Description = other2502.Description;
  ImplementationConstraint = other2502.ImplementationConstraint;
  Note = other2502.Note;
  TaggedValue = other2502.TaggedValue;
  Property = other2502.Property;
  __isset = other2502.__isset;
  return *this;
}
void TDDIResource::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIResource(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ")";
}


TDDIArtifact::~TDDIArtifact() throw() {
}


void TDDIArtifact::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifact::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifact::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifact::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifact::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifact::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifact::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifact::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifact::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifact::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifact::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}

void TDDIArtifact::__set_Version(const std::string& val) {
  this->Version = val;
}

void TDDIArtifact::__set_Date(const std::string& val) {
  this->Date = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2503;
            ::apache::thrift::protocol::TType _etype2506;
            xfer += iprot->readListBegin(_etype2506, _size2503);
            this->ImplementationConstraint.resize(_size2503);
            uint32_t _i2507;
            for (_i2507 = 0; _i2507 < _size2503; ++_i2507)
            {
              xfer += this->ImplementationConstraint[_i2507].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2508;
            ::apache::thrift::protocol::TType _etype2511;
            xfer += iprot->readListBegin(_etype2511, _size2508);
            this->Note.resize(_size2508);
            uint32_t _i2512;
            for (_i2512 = 0; _i2512 < _size2508; ++_i2512)
            {
              xfer += this->Note[_i2512].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2513;
            ::apache::thrift::protocol::TType _etype2516;
            xfer += iprot->readListBegin(_etype2516, _size2513);
            this->TaggedValue.resize(_size2513);
            uint32_t _i2517;
            for (_i2517 = 0; _i2517 < _size2513; ++_i2517)
            {
              xfer += this->TaggedValue[_i2517].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2518;
            ::apache::thrift::protocol::TType _etype2521;
            xfer += iprot->readListBegin(_etype2521, _size2518);
            this->Property.resize(_size2518);
            uint32_t _i2522;
            for (_i2522 = 0; _i2522 < _size2518; ++_i2522)
            {
              xfer += this->Property[_i2522].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Version);
          this->__isset.Version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Date);
          this->__isset.Date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifact");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2523;
    for (_iter2523 = this->ImplementationConstraint.begin(); _iter2523 != this->ImplementationConstraint.end(); ++_iter2523)
    {
      xfer += (*_iter2523).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2524;
    for (_iter2524 = this->Note.begin(); _iter2524 != this->Note.end(); ++_iter2524)
    {
      xfer += (*_iter2524).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2525;
    for (_iter2525 = this->TaggedValue.begin(); _iter2525 != this->TaggedValue.end(); ++_iter2525)
    {
      xfer += (*_iter2525).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2526;
    for (_iter2526 = this->Property.begin(); _iter2526 != this->Property.end(); ++_iter2526)
    {
      xfer += (*_iter2526).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Version", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->Version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Date", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->Date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifact &a, TDDIArtifact &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.Version, b.Version);
  swap(a.Date, b.Date);
  swap(a.__isset, b.__isset);
}

TDDIArtifact::TDDIArtifact(const TDDIArtifact& other2527) {
  Gid = other2527.Gid;
  IsCitation = other2527.IsCitation;
  IsAbstract = other2527.IsAbstract;
  CitedElement = other2527.CitedElement;
  AbstractForm = other2527.AbstractForm;
  Name = other2527.Name;
  Description = other2527.Description;
  ImplementationConstraint = other2527.ImplementationConstraint;
  Note = other2527.Note;
  TaggedValue = other2527.TaggedValue;
  Property = other2527.Property;
  Version = other2527.Version;
  Date = other2527.Date;
  __isset = other2527.__isset;
}
TDDIArtifact& TDDIArtifact::operator=(const TDDIArtifact& other2528) {
  Gid = other2528.Gid;
  IsCitation = other2528.IsCitation;
  IsAbstract = other2528.IsAbstract;
  CitedElement = other2528.CitedElement;
  AbstractForm = other2528.AbstractForm;
  Name = other2528.Name;
  Description = other2528.Description;
  ImplementationConstraint = other2528.ImplementationConstraint;
  Note = other2528.Note;
  TaggedValue = other2528.TaggedValue;
  Property = other2528.Property;
  Version = other2528.Version;
  Date = other2528.Date;
  __isset = other2528.__isset;
  return *this;
}
void TDDIArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifact(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ", " << "Version=" << to_string(Version);
  out << ", " << "Date=" << to_string(Date);
  out << ")";
}


TDDIArtifactAssetRelationship::~TDDIArtifactAssetRelationship() throw() {
}


void TDDIArtifactAssetRelationship::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactAssetRelationship::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactAssetRelationship::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactAssetRelationship::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactAssetRelationship::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactAssetRelationship::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactAssetRelationship::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactAssetRelationship::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactAssetRelationship::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactAssetRelationship::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactAssetRelationship::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}

void TDDIArtifactAssetRelationship::__set_Source(const std::vector<TDDIAbstractArtifactAssetRef> & val) {
  this->Source = val;
}

void TDDIArtifactAssetRelationship::__set_Target(const std::vector<TDDIAbstractArtifactAssetRef> & val) {
  this->Target = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetRelationship& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactAssetRelationship::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2529;
            ::apache::thrift::protocol::TType _etype2532;
            xfer += iprot->readListBegin(_etype2532, _size2529);
            this->ImplementationConstraint.resize(_size2529);
            uint32_t _i2533;
            for (_i2533 = 0; _i2533 < _size2529; ++_i2533)
            {
              xfer += this->ImplementationConstraint[_i2533].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2534;
            ::apache::thrift::protocol::TType _etype2537;
            xfer += iprot->readListBegin(_etype2537, _size2534);
            this->Note.resize(_size2534);
            uint32_t _i2538;
            for (_i2538 = 0; _i2538 < _size2534; ++_i2538)
            {
              xfer += this->Note[_i2538].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2539;
            ::apache::thrift::protocol::TType _etype2542;
            xfer += iprot->readListBegin(_etype2542, _size2539);
            this->TaggedValue.resize(_size2539);
            uint32_t _i2543;
            for (_i2543 = 0; _i2543 < _size2539; ++_i2543)
            {
              xfer += this->TaggedValue[_i2543].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2544;
            ::apache::thrift::protocol::TType _etype2547;
            xfer += iprot->readListBegin(_etype2547, _size2544);
            this->Property.resize(_size2544);
            uint32_t _i2548;
            for (_i2548 = 0; _i2548 < _size2544; ++_i2548)
            {
              xfer += this->Property[_i2548].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size2549;
            ::apache::thrift::protocol::TType _etype2552;
            xfer += iprot->readListBegin(_etype2552, _size2549);
            this->Source.resize(_size2549);
            uint32_t _i2553;
            for (_i2553 = 0; _i2553 < _size2549; ++_i2553)
            {
              xfer += this->Source[_i2553].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size2554;
            ::apache::thrift::protocol::TType _etype2557;
            xfer += iprot->readListBegin(_etype2557, _size2554);
            this->Target.resize(_size2554);
            uint32_t _i2558;
            for (_i2558 = 0; _i2558 < _size2554; ++_i2558)
            {
              xfer += this->Target[_i2558].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactAssetRelationship::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactAssetRelationship");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2559;
    for (_iter2559 = this->ImplementationConstraint.begin(); _iter2559 != this->ImplementationConstraint.end(); ++_iter2559)
    {
      xfer += (*_iter2559).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2560;
    for (_iter2560 = this->Note.begin(); _iter2560 != this->Note.end(); ++_iter2560)
    {
      xfer += (*_iter2560).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2561;
    for (_iter2561 = this->TaggedValue.begin(); _iter2561 != this->TaggedValue.end(); ++_iter2561)
    {
      xfer += (*_iter2561).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2562;
    for (_iter2562 = this->Property.begin(); _iter2562 != this->Property.end(); ++_iter2562)
    {
      xfer += (*_iter2562).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArtifactAssetRef> ::const_iterator _iter2563;
    for (_iter2563 = this->Source.begin(); _iter2563 != this->Source.end(); ++_iter2563)
    {
      xfer += (*_iter2563).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArtifactAssetRef> ::const_iterator _iter2564;
    for (_iter2564 = this->Target.begin(); _iter2564 != this->Target.end(); ++_iter2564)
    {
      xfer += (*_iter2564).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactAssetRelationship &a, TDDIArtifactAssetRelationship &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.__isset, b.__isset);
}

TDDIArtifactAssetRelationship::TDDIArtifactAssetRelationship(const TDDIArtifactAssetRelationship& other2565) {
  Gid = other2565.Gid;
  IsCitation = other2565.IsCitation;
  IsAbstract = other2565.IsAbstract;
  CitedElement = other2565.CitedElement;
  AbstractForm = other2565.AbstractForm;
  Name = other2565.Name;
  Description = other2565.Description;
  ImplementationConstraint = other2565.ImplementationConstraint;
  Note = other2565.Note;
  TaggedValue = other2565.TaggedValue;
  Property = other2565.Property;
  Source = other2565.Source;
  Target = other2565.Target;
  __isset = other2565.__isset;
}
TDDIArtifactAssetRelationship& TDDIArtifactAssetRelationship::operator=(const TDDIArtifactAssetRelationship& other2566) {
  Gid = other2566.Gid;
  IsCitation = other2566.IsCitation;
  IsAbstract = other2566.IsAbstract;
  CitedElement = other2566.CitedElement;
  AbstractForm = other2566.AbstractForm;
  Name = other2566.Name;
  Description = other2566.Description;
  ImplementationConstraint = other2566.ImplementationConstraint;
  Note = other2566.Note;
  TaggedValue = other2566.TaggedValue;
  Property = other2566.Property;
  Source = other2566.Source;
  Target = other2566.Target;
  __isset = other2566.__isset;
  return *this;
}
void TDDIArtifactAssetRelationship::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactAssetRelationship(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ")";
}


TDDIArtifactAssetUnion::~TDDIArtifactAssetUnion() throw() {
}


void TDDIArtifactAssetUnion::__set_Property(const TDDIProperty& val) {
  this->Property = val;
__isset.Property = true;
}

void TDDIArtifactAssetUnion::__set_Technique(const TDDITechnique& val) {
  this->Technique = val;
__isset.Technique = true;
}

void TDDIArtifactAssetUnion::__set_Participant(const TDDIParticipant& val) {
  this->Participant = val;
__isset.Participant = true;
}

void TDDIArtifactAssetUnion::__set_Activity(const TDDIActivity& val) {
  this->Activity = val;
__isset.Activity = true;
}

void TDDIArtifactAssetUnion::__set_Event(const TDDIEvent& val) {
  this->Event = val;
__isset.Event = true;
}

void TDDIArtifactAssetUnion::__set_Resource(const TDDIResource& val) {
  this->Resource = val;
__isset.Resource = true;
}

void TDDIArtifactAssetUnion::__set_Artifact(const TDDIArtifact& val) {
  this->Artifact = val;
__isset.Artifact = true;
}

void TDDIArtifactAssetUnion::__set_ArtifactAssetRelationship(const TDDIArtifactAssetRelationship& val) {
  this->ArtifactAssetRelationship = val;
__isset.ArtifactAssetRelationship = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactAssetUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Property.read(iprot);
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Technique.read(iprot);
          this->__isset.Technique = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Participant.read(iprot);
          this->__isset.Participant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Activity.read(iprot);
          this->__isset.Activity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Event.read(iprot);
          this->__isset.Event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Resource.read(iprot);
          this->__isset.Resource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Artifact.read(iprot);
          this->__isset.Artifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ArtifactAssetRelationship.read(iprot);
          this->__isset.ArtifactAssetRelationship = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactAssetUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactAssetUnion");

  if (this->__isset.Property) {
    xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Property.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Technique) {
    xfer += oprot->writeFieldBegin("Technique", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->Technique.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Participant) {
    xfer += oprot->writeFieldBegin("Participant", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->Participant.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Activity) {
    xfer += oprot->writeFieldBegin("Activity", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->Activity.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Event) {
    xfer += oprot->writeFieldBegin("Event", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->Event.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Resource) {
    xfer += oprot->writeFieldBegin("Resource", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->Resource.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Artifact) {
    xfer += oprot->writeFieldBegin("Artifact", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->Artifact.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactAssetRelationship) {
    xfer += oprot->writeFieldBegin("ArtifactAssetRelationship", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->ArtifactAssetRelationship.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactAssetUnion &a, TDDIArtifactAssetUnion &b) {
  using ::std::swap;
  swap(a.Property, b.Property);
  swap(a.Technique, b.Technique);
  swap(a.Participant, b.Participant);
  swap(a.Activity, b.Activity);
  swap(a.Event, b.Event);
  swap(a.Resource, b.Resource);
  swap(a.Artifact, b.Artifact);
  swap(a.ArtifactAssetRelationship, b.ArtifactAssetRelationship);
  swap(a.__isset, b.__isset);
}

TDDIArtifactAssetUnion::TDDIArtifactAssetUnion(const TDDIArtifactAssetUnion& other2567) {
  Property = other2567.Property;
  Technique = other2567.Technique;
  Participant = other2567.Participant;
  Activity = other2567.Activity;
  Event = other2567.Event;
  Resource = other2567.Resource;
  Artifact = other2567.Artifact;
  ArtifactAssetRelationship = other2567.ArtifactAssetRelationship;
  __isset = other2567.__isset;
}
TDDIArtifactAssetUnion& TDDIArtifactAssetUnion::operator=(const TDDIArtifactAssetUnion& other2568) {
  Property = other2568.Property;
  Technique = other2568.Technique;
  Participant = other2568.Participant;
  Activity = other2568.Activity;
  Event = other2568.Event;
  Resource = other2568.Resource;
  Artifact = other2568.Artifact;
  ArtifactAssetRelationship = other2568.ArtifactAssetRelationship;
  __isset = other2568.__isset;
  return *this;
}
void TDDIArtifactAssetUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactAssetUnion(";
  out << "Property="; (__isset.Property ? (out << to_string(Property)) : (out << "<null>"));
  out << ", " << "Technique="; (__isset.Technique ? (out << to_string(Technique)) : (out << "<null>"));
  out << ", " << "Participant="; (__isset.Participant ? (out << to_string(Participant)) : (out << "<null>"));
  out << ", " << "Activity="; (__isset.Activity ? (out << to_string(Activity)) : (out << "<null>"));
  out << ", " << "Event="; (__isset.Event ? (out << to_string(Event)) : (out << "<null>"));
  out << ", " << "Resource="; (__isset.Resource ? (out << to_string(Resource)) : (out << "<null>"));
  out << ", " << "Artifact="; (__isset.Artifact ? (out << to_string(Artifact)) : (out << "<null>"));
  out << ", " << "ArtifactAssetRelationship="; (__isset.ArtifactAssetRelationship ? (out << to_string(ArtifactAssetRelationship)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArtifactAsset::~TDDIAbstractArtifactAsset() throw() {
}


void TDDIAbstractArtifactAsset::__set_UsedArtifactAsset(const TDDIArtifactAssetUnion& val) {
  this->UsedArtifactAsset = val;
}

void TDDIAbstractArtifactAsset::__set_UsedArtifactAssetType(const TDDIArtifactAssetUnionType val) {
  this->UsedArtifactAssetType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactAsset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactAsset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArtifactAsset.read(iprot);
          this->__isset.UsedArtifactAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2569;
          xfer += iprot->readI32(ecast2569);
          this->UsedArtifactAssetType = (TDDIArtifactAssetUnionType)ecast2569;
          this->__isset.UsedArtifactAssetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactAsset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactAsset");

  xfer += oprot->writeFieldBegin("UsedArtifactAsset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArtifactAsset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArtifactAssetType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArtifactAssetType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactAsset &a, TDDIAbstractArtifactAsset &b) {
  using ::std::swap;
  swap(a.UsedArtifactAsset, b.UsedArtifactAsset);
  swap(a.UsedArtifactAssetType, b.UsedArtifactAssetType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactAsset::TDDIAbstractArtifactAsset(const TDDIAbstractArtifactAsset& other2570) {
  UsedArtifactAsset = other2570.UsedArtifactAsset;
  UsedArtifactAssetType = other2570.UsedArtifactAssetType;
  __isset = other2570.__isset;
}
TDDIAbstractArtifactAsset& TDDIAbstractArtifactAsset::operator=(const TDDIAbstractArtifactAsset& other2571) {
  UsedArtifactAsset = other2571.UsedArtifactAsset;
  UsedArtifactAssetType = other2571.UsedArtifactAssetType;
  __isset = other2571.__isset;
  return *this;
}
void TDDIAbstractArtifactAsset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactAsset(";
  out << "UsedArtifactAsset=" << to_string(UsedArtifactAsset);
  out << ", " << "UsedArtifactAssetType=" << to_string(UsedArtifactAssetType);
  out << ")";
}


TDDIAssuranceCasePackageUnion::~TDDIAssuranceCasePackageUnion() throw() {
}


void TDDIAssuranceCasePackageUnion::__set_AssuranceCasePackage(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackage> val) {
  this->AssuranceCasePackage = val;
__isset.AssuranceCasePackage = true;
}

void TDDIAssuranceCasePackageUnion::__set_AssuranceCasePackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> val) {
  this->AssuranceCasePackageInterface = val;
__isset.AssuranceCasePackageInterface = true;
}

void TDDIAssuranceCasePackageUnion::__set_AssuranceCasePackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageBinding> val) {
  this->AssuranceCasePackageBinding = val;
__isset.AssuranceCasePackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceCasePackage) { 
            this->AssuranceCasePackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackage>(new TDDIAssuranceCasePackage);
          }
          xfer += this->AssuranceCasePackage->read(iprot);
          bool wasSet = false;
          if (this->AssuranceCasePackage->__isset.Gid) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.CitedElement) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.AbstractForm) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.Name) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.Description) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.Note) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.TaggedValue) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.AssuranceCasePackage) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.Interface) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.ArtifactPackage) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.ArgumentPackage) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.TerminologyPackage) { wasSet = true; }
          if (!wasSet) { this->AssuranceCasePackage.reset(); }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceCasePackageInterface) { 
            this->AssuranceCasePackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface>(new TDDIAssuranceCasePackageInterface);
          }
          xfer += this->AssuranceCasePackageInterface->read(iprot);
          bool wasSet = false;
          if (this->AssuranceCasePackageInterface->__isset.Gid) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.AbstractForm) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Name) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Description) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Note) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.TaggedValue) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.AssuranceCasePackage) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Interface) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.ArtifactPackage) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.ArgumentPackage) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.TerminologyPackage) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->AssuranceCasePackageInterface.reset(); }
          this->__isset.AssuranceCasePackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceCasePackageBinding) { 
            this->AssuranceCasePackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageBinding>(new TDDIAssuranceCasePackageBinding);
          }
          xfer += this->AssuranceCasePackageBinding->read(iprot);
          bool wasSet = false;
          if (this->AssuranceCasePackageBinding->__isset.Gid) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.AbstractForm) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.Name) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.Description) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.Note) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.TaggedValue) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.AssuranceCasePackage) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.Interface) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.ArtifactPackage) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.ArgumentPackage) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.TerminologyPackage) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.ParticipantPackage) { wasSet = true; }
          if (!wasSet) { this->AssuranceCasePackageBinding.reset(); }
          this->__isset.AssuranceCasePackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackageUnion");

  if (this->__isset.AssuranceCasePackage) {
    xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->AssuranceCasePackage) {
      xfer += this->AssuranceCasePackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssuranceCasePackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssuranceCasePackageInterface) {
    xfer += oprot->writeFieldBegin("AssuranceCasePackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->AssuranceCasePackageInterface) {
      xfer += this->AssuranceCasePackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssuranceCasePackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssuranceCasePackageBinding) {
    xfer += oprot->writeFieldBegin("AssuranceCasePackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->AssuranceCasePackageBinding) {
      xfer += this->AssuranceCasePackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssuranceCasePackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackageUnion &a, TDDIAssuranceCasePackageUnion &b) {
  using ::std::swap;
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.AssuranceCasePackageInterface, b.AssuranceCasePackageInterface);
  swap(a.AssuranceCasePackageBinding, b.AssuranceCasePackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackageUnion::TDDIAssuranceCasePackageUnion(const TDDIAssuranceCasePackageUnion& other2572) {
  AssuranceCasePackage = other2572.AssuranceCasePackage;
  AssuranceCasePackageInterface = other2572.AssuranceCasePackageInterface;
  AssuranceCasePackageBinding = other2572.AssuranceCasePackageBinding;
  __isset = other2572.__isset;
}
TDDIAssuranceCasePackageUnion& TDDIAssuranceCasePackageUnion::operator=(const TDDIAssuranceCasePackageUnion& other2573) {
  AssuranceCasePackage = other2573.AssuranceCasePackage;
  AssuranceCasePackageInterface = other2573.AssuranceCasePackageInterface;
  AssuranceCasePackageBinding = other2573.AssuranceCasePackageBinding;
  __isset = other2573.__isset;
  return *this;
}
void TDDIAssuranceCasePackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackageUnion(";
  out << "AssuranceCasePackage="; (__isset.AssuranceCasePackage ? (out << to_string(AssuranceCasePackage)) : (out << "<null>"));
  out << ", " << "AssuranceCasePackageInterface="; (__isset.AssuranceCasePackageInterface ? (out << to_string(AssuranceCasePackageInterface)) : (out << "<null>"));
  out << ", " << "AssuranceCasePackageBinding="; (__isset.AssuranceCasePackageBinding ? (out << to_string(AssuranceCasePackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractAssuranceCasePackage::~TDDIAbstractAssuranceCasePackage() throw() {
}


void TDDIAbstractAssuranceCasePackage::__set_UsedAssuranceCasePackage(const TDDIAssuranceCasePackageUnion& val) {
  this->UsedAssuranceCasePackage = val;
}

void TDDIAbstractAssuranceCasePackage::__set_UsedAssuranceCasePackageType(const TDDIAssuranceCasePackageUnionType val) {
  this->UsedAssuranceCasePackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssuranceCasePackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssuranceCasePackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedAssuranceCasePackage.read(iprot);
          this->__isset.UsedAssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2574;
          xfer += iprot->readI32(ecast2574);
          this->UsedAssuranceCasePackageType = (TDDIAssuranceCasePackageUnionType)ecast2574;
          this->__isset.UsedAssuranceCasePackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssuranceCasePackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssuranceCasePackage");

  xfer += oprot->writeFieldBegin("UsedAssuranceCasePackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedAssuranceCasePackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedAssuranceCasePackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedAssuranceCasePackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssuranceCasePackage &a, TDDIAbstractAssuranceCasePackage &b) {
  using ::std::swap;
  swap(a.UsedAssuranceCasePackage, b.UsedAssuranceCasePackage);
  swap(a.UsedAssuranceCasePackageType, b.UsedAssuranceCasePackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssuranceCasePackage::TDDIAbstractAssuranceCasePackage(const TDDIAbstractAssuranceCasePackage& other2575) {
  UsedAssuranceCasePackage = other2575.UsedAssuranceCasePackage;
  UsedAssuranceCasePackageType = other2575.UsedAssuranceCasePackageType;
  __isset = other2575.__isset;
}
TDDIAbstractAssuranceCasePackage& TDDIAbstractAssuranceCasePackage::operator=(const TDDIAbstractAssuranceCasePackage& other2576) {
  UsedAssuranceCasePackage = other2576.UsedAssuranceCasePackage;
  UsedAssuranceCasePackageType = other2576.UsedAssuranceCasePackageType;
  __isset = other2576.__isset;
  return *this;
}
void TDDIAbstractAssuranceCasePackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssuranceCasePackage(";
  out << "UsedAssuranceCasePackage=" << to_string(UsedAssuranceCasePackage);
  out << ", " << "UsedAssuranceCasePackageType=" << to_string(UsedAssuranceCasePackageType);
  out << ")";
}


TDDIAssuranceCasePackage::~TDDIAssuranceCasePackage() throw() {
}


void TDDIAssuranceCasePackage::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssuranceCasePackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssuranceCasePackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssuranceCasePackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssuranceCasePackage::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssuranceCasePackage::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssuranceCasePackage::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssuranceCasePackage::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssuranceCasePackage::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssuranceCasePackage::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssuranceCasePackage::__set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackage = val;
}

void TDDIAssuranceCasePackage::__set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val) {
  this->Interface = val;
}

void TDDIAssuranceCasePackage::__set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val) {
  this->ArtifactPackage = val;
}

void TDDIAssuranceCasePackage::__set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val) {
  this->ArgumentPackage = val;
}

void TDDIAssuranceCasePackage::__set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val) {
  this->TerminologyPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2577;
            ::apache::thrift::protocol::TType _etype2580;
            xfer += iprot->readListBegin(_etype2580, _size2577);
            this->ImplementationConstraint.resize(_size2577);
            uint32_t _i2581;
            for (_i2581 = 0; _i2581 < _size2577; ++_i2581)
            {
              xfer += this->ImplementationConstraint[_i2581].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2582;
            ::apache::thrift::protocol::TType _etype2585;
            xfer += iprot->readListBegin(_etype2585, _size2582);
            this->Note.resize(_size2582);
            uint32_t _i2586;
            for (_i2586 = 0; _i2586 < _size2582; ++_i2586)
            {
              xfer += this->Note[_i2586].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2587;
            ::apache::thrift::protocol::TType _etype2590;
            xfer += iprot->readListBegin(_etype2590, _size2587);
            this->TaggedValue.resize(_size2587);
            uint32_t _i2591;
            for (_i2591 = 0; _i2591 < _size2587; ++_i2591)
            {
              xfer += this->TaggedValue[_i2591].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackage.clear();
            uint32_t _size2592;
            ::apache::thrift::protocol::TType _etype2595;
            xfer += iprot->readListBegin(_etype2595, _size2592);
            this->AssuranceCasePackage.resize(_size2592);
            uint32_t _i2596;
            for (_i2596 = 0; _i2596 < _size2592; ++_i2596)
            {
              xfer += this->AssuranceCasePackage[_i2596].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Interface.clear();
            uint32_t _size2597;
            ::apache::thrift::protocol::TType _etype2600;
            xfer += iprot->readListBegin(_etype2600, _size2597);
            this->Interface.resize(_size2597);
            uint32_t _i2601;
            for (_i2601 = 0; _i2601 < _size2597; ++_i2601)
            {
              xfer += this->Interface[_i2601].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Interface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactPackage.clear();
            uint32_t _size2602;
            ::apache::thrift::protocol::TType _etype2605;
            xfer += iprot->readListBegin(_etype2605, _size2602);
            this->ArtifactPackage.resize(_size2602);
            uint32_t _i2606;
            for (_i2606 = 0; _i2606 < _size2602; ++_i2606)
            {
              xfer += this->ArtifactPackage[_i2606].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentPackage.clear();
            uint32_t _size2607;
            ::apache::thrift::protocol::TType _etype2610;
            xfer += iprot->readListBegin(_etype2610, _size2607);
            this->ArgumentPackage.resize(_size2607);
            uint32_t _i2611;
            for (_i2611 = 0; _i2611 < _size2607; ++_i2611)
            {
              xfer += this->ArgumentPackage[_i2611].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyPackage.clear();
            uint32_t _size2612;
            ::apache::thrift::protocol::TType _etype2615;
            xfer += iprot->readListBegin(_etype2615, _size2612);
            this->TerminologyPackage.resize(_size2612);
            uint32_t _i2616;
            for (_i2616 = 0; _i2616 < _size2612; ++_i2616)
            {
              xfer += this->TerminologyPackage[_i2616].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackage");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2617;
    for (_iter2617 = this->ImplementationConstraint.begin(); _iter2617 != this->ImplementationConstraint.end(); ++_iter2617)
    {
      xfer += (*_iter2617).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2618;
    for (_iter2618 = this->Note.begin(); _iter2618 != this->Note.end(); ++_iter2618)
    {
      xfer += (*_iter2618).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2619;
    for (_iter2619 = this->TaggedValue.begin(); _iter2619 != this->TaggedValue.end(); ++_iter2619)
    {
      xfer += (*_iter2619).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackage.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter2620;
    for (_iter2620 = this->AssuranceCasePackage.begin(); _iter2620 != this->AssuranceCasePackage.end(); ++_iter2620)
    {
      xfer += (*_iter2620).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Interface", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Interface.size()));
    std::vector<TDDIAssuranceCasePackageInterfaceRef> ::const_iterator _iter2621;
    for (_iter2621 = this->Interface.begin(); _iter2621 != this->Interface.end(); ++_iter2621)
    {
      xfer += (*_iter2621).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactPackage.size()));
    std::vector<TDDIAbstractArtifactPackageRef> ::const_iterator _iter2622;
    for (_iter2622 = this->ArtifactPackage.begin(); _iter2622 != this->ArtifactPackage.end(); ++_iter2622)
    {
      xfer += (*_iter2622).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentPackage.size()));
    std::vector<TDDIAbstractArgumentPackageRef> ::const_iterator _iter2623;
    for (_iter2623 = this->ArgumentPackage.begin(); _iter2623 != this->ArgumentPackage.end(); ++_iter2623)
    {
      xfer += (*_iter2623).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyPackage.size()));
    std::vector<TDDIAbstractTerminologyPackageRef> ::const_iterator _iter2624;
    for (_iter2624 = this->TerminologyPackage.begin(); _iter2624 != this->TerminologyPackage.end(); ++_iter2624)
    {
      xfer += (*_iter2624).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackage &a, TDDIAssuranceCasePackage &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.Interface, b.Interface);
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackage::TDDIAssuranceCasePackage(const TDDIAssuranceCasePackage& other2625) {
  Gid = other2625.Gid;
  IsCitation = other2625.IsCitation;
  IsAbstract = other2625.IsAbstract;
  CitedElement = other2625.CitedElement;
  AbstractForm = other2625.AbstractForm;
  Name = other2625.Name;
  Description = other2625.Description;
  ImplementationConstraint = other2625.ImplementationConstraint;
  Note = other2625.Note;
  TaggedValue = other2625.TaggedValue;
  AssuranceCasePackage = other2625.AssuranceCasePackage;
  Interface = other2625.Interface;
  ArtifactPackage = other2625.ArtifactPackage;
  ArgumentPackage = other2625.ArgumentPackage;
  TerminologyPackage = other2625.TerminologyPackage;
  __isset = other2625.__isset;
}
TDDIAssuranceCasePackage& TDDIAssuranceCasePackage::operator=(const TDDIAssuranceCasePackage& other2626) {
  Gid = other2626.Gid;
  IsCitation = other2626.IsCitation;
  IsAbstract = other2626.IsAbstract;
  CitedElement = other2626.CitedElement;
  AbstractForm = other2626.AbstractForm;
  Name = other2626.Name;
  Description = other2626.Description;
  ImplementationConstraint = other2626.ImplementationConstraint;
  Note = other2626.Note;
  TaggedValue = other2626.TaggedValue;
  AssuranceCasePackage = other2626.AssuranceCasePackage;
  Interface = other2626.Interface;
  ArtifactPackage = other2626.ArtifactPackage;
  ArgumentPackage = other2626.ArgumentPackage;
  TerminologyPackage = other2626.TerminologyPackage;
  __isset = other2626.__isset;
  return *this;
}
void TDDIAssuranceCasePackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackage(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssuranceCasePackage=" << to_string(AssuranceCasePackage);
  out << ", " << "Interface=" << to_string(Interface);
  out << ", " << "ArtifactPackage=" << to_string(ArtifactPackage);
  out << ", " << "ArgumentPackage=" << to_string(ArgumentPackage);
  out << ", " << "TerminologyPackage=" << to_string(TerminologyPackage);
  out << ")";
}


TDDIAssuranceCasePackageInterface::~TDDIAssuranceCasePackageInterface() throw() {
}


void TDDIAssuranceCasePackageInterface::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssuranceCasePackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssuranceCasePackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssuranceCasePackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssuranceCasePackageInterface::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssuranceCasePackageInterface::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssuranceCasePackageInterface::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssuranceCasePackageInterface::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssuranceCasePackageInterface::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssuranceCasePackageInterface::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssuranceCasePackageInterface::__set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackage = val;
}

void TDDIAssuranceCasePackageInterface::__set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val) {
  this->Interface = val;
}

void TDDIAssuranceCasePackageInterface::__set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val) {
  this->ArtifactPackage = val;
}

void TDDIAssuranceCasePackageInterface::__set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val) {
  this->ArgumentPackage = val;
}

void TDDIAssuranceCasePackageInterface::__set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val) {
  this->TerminologyPackage = val;
}

void TDDIAssuranceCasePackageInterface::__set_Implements(const TDDIAbstractAssuranceCasePackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2627;
            ::apache::thrift::protocol::TType _etype2630;
            xfer += iprot->readListBegin(_etype2630, _size2627);
            this->ImplementationConstraint.resize(_size2627);
            uint32_t _i2631;
            for (_i2631 = 0; _i2631 < _size2627; ++_i2631)
            {
              xfer += this->ImplementationConstraint[_i2631].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2632;
            ::apache::thrift::protocol::TType _etype2635;
            xfer += iprot->readListBegin(_etype2635, _size2632);
            this->Note.resize(_size2632);
            uint32_t _i2636;
            for (_i2636 = 0; _i2636 < _size2632; ++_i2636)
            {
              xfer += this->Note[_i2636].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2637;
            ::apache::thrift::protocol::TType _etype2640;
            xfer += iprot->readListBegin(_etype2640, _size2637);
            this->TaggedValue.resize(_size2637);
            uint32_t _i2641;
            for (_i2641 = 0; _i2641 < _size2637; ++_i2641)
            {
              xfer += this->TaggedValue[_i2641].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackage.clear();
            uint32_t _size2642;
            ::apache::thrift::protocol::TType _etype2645;
            xfer += iprot->readListBegin(_etype2645, _size2642);
            this->AssuranceCasePackage.resize(_size2642);
            uint32_t _i2646;
            for (_i2646 = 0; _i2646 < _size2642; ++_i2646)
            {
              xfer += this->AssuranceCasePackage[_i2646].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Interface.clear();
            uint32_t _size2647;
            ::apache::thrift::protocol::TType _etype2650;
            xfer += iprot->readListBegin(_etype2650, _size2647);
            this->Interface.resize(_size2647);
            uint32_t _i2651;
            for (_i2651 = 0; _i2651 < _size2647; ++_i2651)
            {
              xfer += this->Interface[_i2651].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Interface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactPackage.clear();
            uint32_t _size2652;
            ::apache::thrift::protocol::TType _etype2655;
            xfer += iprot->readListBegin(_etype2655, _size2652);
            this->ArtifactPackage.resize(_size2652);
            uint32_t _i2656;
            for (_i2656 = 0; _i2656 < _size2652; ++_i2656)
            {
              xfer += this->ArtifactPackage[_i2656].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentPackage.clear();
            uint32_t _size2657;
            ::apache::thrift::protocol::TType _etype2660;
            xfer += iprot->readListBegin(_etype2660, _size2657);
            this->ArgumentPackage.resize(_size2657);
            uint32_t _i2661;
            for (_i2661 = 0; _i2661 < _size2657; ++_i2661)
            {
              xfer += this->ArgumentPackage[_i2661].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyPackage.clear();
            uint32_t _size2662;
            ::apache::thrift::protocol::TType _etype2665;
            xfer += iprot->readListBegin(_etype2665, _size2662);
            this->TerminologyPackage.resize(_size2662);
            uint32_t _i2666;
            for (_i2666 = 0; _i2666 < _size2662; ++_i2666)
            {
              xfer += this->TerminologyPackage[_i2666].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackageInterface");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2667;
    for (_iter2667 = this->ImplementationConstraint.begin(); _iter2667 != this->ImplementationConstraint.end(); ++_iter2667)
    {
      xfer += (*_iter2667).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2668;
    for (_iter2668 = this->Note.begin(); _iter2668 != this->Note.end(); ++_iter2668)
    {
      xfer += (*_iter2668).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2669;
    for (_iter2669 = this->TaggedValue.begin(); _iter2669 != this->TaggedValue.end(); ++_iter2669)
    {
      xfer += (*_iter2669).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackage.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter2670;
    for (_iter2670 = this->AssuranceCasePackage.begin(); _iter2670 != this->AssuranceCasePackage.end(); ++_iter2670)
    {
      xfer += (*_iter2670).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Interface", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Interface.size()));
    std::vector<TDDIAssuranceCasePackageInterfaceRef> ::const_iterator _iter2671;
    for (_iter2671 = this->Interface.begin(); _iter2671 != this->Interface.end(); ++_iter2671)
    {
      xfer += (*_iter2671).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactPackage.size()));
    std::vector<TDDIAbstractArtifactPackageRef> ::const_iterator _iter2672;
    for (_iter2672 = this->ArtifactPackage.begin(); _iter2672 != this->ArtifactPackage.end(); ++_iter2672)
    {
      xfer += (*_iter2672).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentPackage.size()));
    std::vector<TDDIAbstractArgumentPackageRef> ::const_iterator _iter2673;
    for (_iter2673 = this->ArgumentPackage.begin(); _iter2673 != this->ArgumentPackage.end(); ++_iter2673)
    {
      xfer += (*_iter2673).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyPackage.size()));
    std::vector<TDDIAbstractTerminologyPackageRef> ::const_iterator _iter2674;
    for (_iter2674 = this->TerminologyPackage.begin(); _iter2674 != this->TerminologyPackage.end(); ++_iter2674)
    {
      xfer += (*_iter2674).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackageInterface &a, TDDIAssuranceCasePackageInterface &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.Interface, b.Interface);
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackageInterface::TDDIAssuranceCasePackageInterface(const TDDIAssuranceCasePackageInterface& other2675) {
  Gid = other2675.Gid;
  IsCitation = other2675.IsCitation;
  IsAbstract = other2675.IsAbstract;
  CitedElement = other2675.CitedElement;
  AbstractForm = other2675.AbstractForm;
  Name = other2675.Name;
  Description = other2675.Description;
  ImplementationConstraint = other2675.ImplementationConstraint;
  Note = other2675.Note;
  TaggedValue = other2675.TaggedValue;
  AssuranceCasePackage = other2675.AssuranceCasePackage;
  Interface = other2675.Interface;
  ArtifactPackage = other2675.ArtifactPackage;
  ArgumentPackage = other2675.ArgumentPackage;
  TerminologyPackage = other2675.TerminologyPackage;
  Implements = other2675.Implements;
  __isset = other2675.__isset;
}
TDDIAssuranceCasePackageInterface& TDDIAssuranceCasePackageInterface::operator=(const TDDIAssuranceCasePackageInterface& other2676) {
  Gid = other2676.Gid;
  IsCitation = other2676.IsCitation;
  IsAbstract = other2676.IsAbstract;
  CitedElement = other2676.CitedElement;
  AbstractForm = other2676.AbstractForm;
  Name = other2676.Name;
  Description = other2676.Description;
  ImplementationConstraint = other2676.ImplementationConstraint;
  Note = other2676.Note;
  TaggedValue = other2676.TaggedValue;
  AssuranceCasePackage = other2676.AssuranceCasePackage;
  Interface = other2676.Interface;
  ArtifactPackage = other2676.ArtifactPackage;
  ArgumentPackage = other2676.ArgumentPackage;
  TerminologyPackage = other2676.TerminologyPackage;
  Implements = other2676.Implements;
  __isset = other2676.__isset;
  return *this;
}
void TDDIAssuranceCasePackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackageInterface(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssuranceCasePackage=" << to_string(AssuranceCasePackage);
  out << ", " << "Interface=" << to_string(Interface);
  out << ", " << "ArtifactPackage=" << to_string(ArtifactPackage);
  out << ", " << "ArgumentPackage=" << to_string(ArgumentPackage);
  out << ", " << "TerminologyPackage=" << to_string(TerminologyPackage);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIAssuranceCasePackageBinding::~TDDIAssuranceCasePackageBinding() throw() {
}


void TDDIAssuranceCasePackageBinding::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssuranceCasePackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssuranceCasePackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssuranceCasePackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssuranceCasePackageBinding::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssuranceCasePackageBinding::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssuranceCasePackageBinding::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssuranceCasePackageBinding::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssuranceCasePackageBinding::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssuranceCasePackageBinding::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssuranceCasePackageBinding::__set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackage = val;
}

void TDDIAssuranceCasePackageBinding::__set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val) {
  this->Interface = val;
}

void TDDIAssuranceCasePackageBinding::__set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val) {
  this->ArtifactPackage = val;
}

void TDDIAssuranceCasePackageBinding::__set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val) {
  this->ArgumentPackage = val;
}

void TDDIAssuranceCasePackageBinding::__set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val) {
  this->TerminologyPackage = val;
}

void TDDIAssuranceCasePackageBinding::__set_ParticipantPackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->ParticipantPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2677;
            ::apache::thrift::protocol::TType _etype2680;
            xfer += iprot->readListBegin(_etype2680, _size2677);
            this->ImplementationConstraint.resize(_size2677);
            uint32_t _i2681;
            for (_i2681 = 0; _i2681 < _size2677; ++_i2681)
            {
              xfer += this->ImplementationConstraint[_i2681].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2682;
            ::apache::thrift::protocol::TType _etype2685;
            xfer += iprot->readListBegin(_etype2685, _size2682);
            this->Note.resize(_size2682);
            uint32_t _i2686;
            for (_i2686 = 0; _i2686 < _size2682; ++_i2686)
            {
              xfer += this->Note[_i2686].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2687;
            ::apache::thrift::protocol::TType _etype2690;
            xfer += iprot->readListBegin(_etype2690, _size2687);
            this->TaggedValue.resize(_size2687);
            uint32_t _i2691;
            for (_i2691 = 0; _i2691 < _size2687; ++_i2691)
            {
              xfer += this->TaggedValue[_i2691].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackage.clear();
            uint32_t _size2692;
            ::apache::thrift::protocol::TType _etype2695;
            xfer += iprot->readListBegin(_etype2695, _size2692);
            this->AssuranceCasePackage.resize(_size2692);
            uint32_t _i2696;
            for (_i2696 = 0; _i2696 < _size2692; ++_i2696)
            {
              xfer += this->AssuranceCasePackage[_i2696].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Interface.clear();
            uint32_t _size2697;
            ::apache::thrift::protocol::TType _etype2700;
            xfer += iprot->readListBegin(_etype2700, _size2697);
            this->Interface.resize(_size2697);
            uint32_t _i2701;
            for (_i2701 = 0; _i2701 < _size2697; ++_i2701)
            {
              xfer += this->Interface[_i2701].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Interface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactPackage.clear();
            uint32_t _size2702;
            ::apache::thrift::protocol::TType _etype2705;
            xfer += iprot->readListBegin(_etype2705, _size2702);
            this->ArtifactPackage.resize(_size2702);
            uint32_t _i2706;
            for (_i2706 = 0; _i2706 < _size2702; ++_i2706)
            {
              xfer += this->ArtifactPackage[_i2706].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentPackage.clear();
            uint32_t _size2707;
            ::apache::thrift::protocol::TType _etype2710;
            xfer += iprot->readListBegin(_etype2710, _size2707);
            this->ArgumentPackage.resize(_size2707);
            uint32_t _i2711;
            for (_i2711 = 0; _i2711 < _size2707; ++_i2711)
            {
              xfer += this->ArgumentPackage[_i2711].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyPackage.clear();
            uint32_t _size2712;
            ::apache::thrift::protocol::TType _etype2715;
            xfer += iprot->readListBegin(_etype2715, _size2712);
            this->TerminologyPackage.resize(_size2712);
            uint32_t _i2716;
            for (_i2716 = 0; _i2716 < _size2712; ++_i2716)
            {
              xfer += this->TerminologyPackage[_i2716].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackage.clear();
            uint32_t _size2717;
            ::apache::thrift::protocol::TType _etype2720;
            xfer += iprot->readListBegin(_etype2720, _size2717);
            this->ParticipantPackage.resize(_size2717);
            uint32_t _i2721;
            for (_i2721 = 0; _i2721 < _size2717; ++_i2721)
            {
              xfer += this->ParticipantPackage[_i2721].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackageBinding");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2722;
    for (_iter2722 = this->ImplementationConstraint.begin(); _iter2722 != this->ImplementationConstraint.end(); ++_iter2722)
    {
      xfer += (*_iter2722).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2723;
    for (_iter2723 = this->Note.begin(); _iter2723 != this->Note.end(); ++_iter2723)
    {
      xfer += (*_iter2723).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2724;
    for (_iter2724 = this->TaggedValue.begin(); _iter2724 != this->TaggedValue.end(); ++_iter2724)
    {
      xfer += (*_iter2724).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackage.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter2725;
    for (_iter2725 = this->AssuranceCasePackage.begin(); _iter2725 != this->AssuranceCasePackage.end(); ++_iter2725)
    {
      xfer += (*_iter2725).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Interface", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Interface.size()));
    std::vector<TDDIAssuranceCasePackageInterfaceRef> ::const_iterator _iter2726;
    for (_iter2726 = this->Interface.begin(); _iter2726 != this->Interface.end(); ++_iter2726)
    {
      xfer += (*_iter2726).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactPackage.size()));
    std::vector<TDDIAbstractArtifactPackageRef> ::const_iterator _iter2727;
    for (_iter2727 = this->ArtifactPackage.begin(); _iter2727 != this->ArtifactPackage.end(); ++_iter2727)
    {
      xfer += (*_iter2727).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentPackage.size()));
    std::vector<TDDIAbstractArgumentPackageRef> ::const_iterator _iter2728;
    for (_iter2728 = this->ArgumentPackage.begin(); _iter2728 != this->ArgumentPackage.end(); ++_iter2728)
    {
      xfer += (*_iter2728).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyPackage.size()));
    std::vector<TDDIAbstractTerminologyPackageRef> ::const_iterator _iter2729;
    for (_iter2729 = this->TerminologyPackage.begin(); _iter2729 != this->TerminologyPackage.end(); ++_iter2729)
    {
      xfer += (*_iter2729).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackage", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackage.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter2730;
    for (_iter2730 = this->ParticipantPackage.begin(); _iter2730 != this->ParticipantPackage.end(); ++_iter2730)
    {
      xfer += (*_iter2730).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackageBinding &a, TDDIAssuranceCasePackageBinding &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.Interface, b.Interface);
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.ParticipantPackage, b.ParticipantPackage);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackageBinding::TDDIAssuranceCasePackageBinding(const TDDIAssuranceCasePackageBinding& other2731) {
  Gid = other2731.Gid;
  IsCitation = other2731.IsCitation;
  IsAbstract = other2731.IsAbstract;
  CitedElement = other2731.CitedElement;
  AbstractForm = other2731.AbstractForm;
  Name = other2731.Name;
  Description = other2731.Description;
  ImplementationConstraint = other2731.ImplementationConstraint;
  Note = other2731.Note;
  TaggedValue = other2731.TaggedValue;
  AssuranceCasePackage = other2731.AssuranceCasePackage;
  Interface = other2731.Interface;
  ArtifactPackage = other2731.ArtifactPackage;
  ArgumentPackage = other2731.ArgumentPackage;
  TerminologyPackage = other2731.TerminologyPackage;
  ParticipantPackage = other2731.ParticipantPackage;
  __isset = other2731.__isset;
}
TDDIAssuranceCasePackageBinding& TDDIAssuranceCasePackageBinding::operator=(const TDDIAssuranceCasePackageBinding& other2732) {
  Gid = other2732.Gid;
  IsCitation = other2732.IsCitation;
  IsAbstract = other2732.IsAbstract;
  CitedElement = other2732.CitedElement;
  AbstractForm = other2732.AbstractForm;
  Name = other2732.Name;
  Description = other2732.Description;
  ImplementationConstraint = other2732.ImplementationConstraint;
  Note = other2732.Note;
  TaggedValue = other2732.TaggedValue;
  AssuranceCasePackage = other2732.AssuranceCasePackage;
  Interface = other2732.Interface;
  ArtifactPackage = other2732.ArtifactPackage;
  ArgumentPackage = other2732.ArgumentPackage;
  TerminologyPackage = other2732.TerminologyPackage;
  ParticipantPackage = other2732.ParticipantPackage;
  __isset = other2732.__isset;
  return *this;
}
void TDDIAssuranceCasePackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackageBinding(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssuranceCasePackage=" << to_string(AssuranceCasePackage);
  out << ", " << "Interface=" << to_string(Interface);
  out << ", " << "ArtifactPackage=" << to_string(ArtifactPackage);
  out << ", " << "ArgumentPackage=" << to_string(ArgumentPackage);
  out << ", " << "TerminologyPackage=" << to_string(TerminologyPackage);
  out << ", " << "ParticipantPackage=" << to_string(ParticipantPackage);
  out << ")";
}


TDDILangString::~TDDILangString() throw() {
}


void TDDILangString::__set_Lang(const std::string& val) {
  this->Lang = val;
}

void TDDILangString::__set_Content(const std::string& val) {
  this->Content = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILangString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILangString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Lang);
          this->__isset.Lang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Content);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILangString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILangString");

  xfer += oprot->writeFieldBegin("Lang", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Lang);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILangString &a, TDDILangString &b) {
  using ::std::swap;
  swap(a.Lang, b.Lang);
  swap(a.Content, b.Content);
  swap(a.__isset, b.__isset);
}

TDDILangString::TDDILangString(const TDDILangString& other2733) {
  Lang = other2733.Lang;
  Content = other2733.Content;
  __isset = other2733.__isset;
}
TDDILangString& TDDILangString::operator=(const TDDILangString& other2734) {
  Lang = other2734.Lang;
  Content = other2734.Content;
  __isset = other2734.__isset;
  return *this;
}
void TDDILangString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILangString(";
  out << "Lang=" << to_string(Lang);
  out << ", " << "Content=" << to_string(Content);
  out << ")";
}


TDDIExpressionLangString::~TDDIExpressionLangString() throw() {
}


void TDDIExpressionLangString::__set_Lang(const std::string& val) {
  this->Lang = val;
}

void TDDIExpressionLangString::__set_Content(const std::string& val) {
  this->Content = val;
}

void TDDIExpressionLangString::__set_Expression(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> val) {
  this->Expression = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIExpressionLangString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIExpressionLangString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Lang);
          this->__isset.Lang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Content);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Expression) { 
            this->Expression = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement>(new TDDIAbstractExpressionElement);
          }
          xfer += this->Expression->read(iprot);
          bool wasSet = false;
          if (this->Expression->__isset.UsedExpressionElement) { wasSet = true; }
          if (this->Expression->__isset.UsedExpressionElementType) { wasSet = true; }
          if (!wasSet) { this->Expression.reset(); }
          this->__isset.Expression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIExpressionLangString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIExpressionLangString");

  xfer += oprot->writeFieldBegin("Lang", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Lang);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Expression", ::apache::thrift::protocol::T_STRUCT, 3);
  if (this->Expression) {
    xfer += this->Expression->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractExpressionElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIExpressionLangString &a, TDDIExpressionLangString &b) {
  using ::std::swap;
  swap(a.Lang, b.Lang);
  swap(a.Content, b.Content);
  swap(a.Expression, b.Expression);
  swap(a.__isset, b.__isset);
}

TDDIExpressionLangString::TDDIExpressionLangString(const TDDIExpressionLangString& other2735) {
  Lang = other2735.Lang;
  Content = other2735.Content;
  Expression = other2735.Expression;
  __isset = other2735.__isset;
}
TDDIExpressionLangString& TDDIExpressionLangString::operator=(const TDDIExpressionLangString& other2736) {
  Lang = other2736.Lang;
  Content = other2736.Content;
  Expression = other2736.Expression;
  __isset = other2736.__isset;
  return *this;
}
void TDDIExpressionLangString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIExpressionLangString(";
  out << "Lang=" << to_string(Lang);
  out << ", " << "Content=" << to_string(Content);
  out << ", " << "Expression=" << to_string(Expression);
  out << ")";
}


TDDILangStringUnion::~TDDILangStringUnion() throw() {
}


void TDDILangStringUnion::__set_LangString(const TDDILangString& val) {
  this->LangString = val;
__isset.LangString = true;
}

void TDDILangStringUnion::__set_ExpressionLangString(const TDDIExpressionLangString& val) {
  this->ExpressionLangString = val;
__isset.ExpressionLangString = true;
}
std::ostream& operator<<(std::ostream& out, const TDDILangStringUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILangStringUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->LangString.read(iprot);
          this->__isset.LangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ExpressionLangString.read(iprot);
          this->__isset.ExpressionLangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILangStringUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILangStringUnion");

  if (this->__isset.LangString) {
    xfer += oprot->writeFieldBegin("LangString", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->LangString.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ExpressionLangString) {
    xfer += oprot->writeFieldBegin("ExpressionLangString", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ExpressionLangString.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILangStringUnion &a, TDDILangStringUnion &b) {
  using ::std::swap;
  swap(a.LangString, b.LangString);
  swap(a.ExpressionLangString, b.ExpressionLangString);
  swap(a.__isset, b.__isset);
}

TDDILangStringUnion::TDDILangStringUnion(const TDDILangStringUnion& other2737) {
  LangString = other2737.LangString;
  ExpressionLangString = other2737.ExpressionLangString;
  __isset = other2737.__isset;
}
TDDILangStringUnion& TDDILangStringUnion::operator=(const TDDILangStringUnion& other2738) {
  LangString = other2738.LangString;
  ExpressionLangString = other2738.ExpressionLangString;
  __isset = other2738.__isset;
  return *this;
}
void TDDILangStringUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILangStringUnion(";
  out << "LangString="; (__isset.LangString ? (out << to_string(LangString)) : (out << "<null>"));
  out << ", " << "ExpressionLangString="; (__isset.ExpressionLangString ? (out << to_string(ExpressionLangString)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractLangString::~TDDIAbstractLangString() throw() {
}


void TDDIAbstractLangString::__set_UsedLangString(const TDDILangStringUnion& val) {
  this->UsedLangString = val;
}

void TDDIAbstractLangString::__set_UsedLangStringType(const TDDILangStringUnionType val) {
  this->UsedLangStringType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractLangString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractLangString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedLangString.read(iprot);
          this->__isset.UsedLangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2739;
          xfer += iprot->readI32(ecast2739);
          this->UsedLangStringType = (TDDILangStringUnionType)ecast2739;
          this->__isset.UsedLangStringType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractLangString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractLangString");

  xfer += oprot->writeFieldBegin("UsedLangString", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedLangString.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedLangStringType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedLangStringType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractLangString &a, TDDIAbstractLangString &b) {
  using ::std::swap;
  swap(a.UsedLangString, b.UsedLangString);
  swap(a.UsedLangStringType, b.UsedLangStringType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractLangString::TDDIAbstractLangString(const TDDIAbstractLangString& other2740) {
  UsedLangString = other2740.UsedLangString;
  UsedLangStringType = other2740.UsedLangStringType;
  __isset = other2740.__isset;
}
TDDIAbstractLangString& TDDIAbstractLangString::operator=(const TDDIAbstractLangString& other2741) {
  UsedLangString = other2741.UsedLangString;
  UsedLangStringType = other2741.UsedLangStringType;
  __isset = other2741.__isset;
  return *this;
}
void TDDIAbstractLangString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractLangString(";
  out << "UsedLangString=" << to_string(UsedLangString);
  out << ", " << "UsedLangStringType=" << to_string(UsedLangStringType);
  out << ")";
}


TDDIMultiLangString::~TDDIMultiLangString() throw() {
}


void TDDIMultiLangString::__set_Values(const std::vector<TDDIAbstractLangString> & val) {
  this->Values = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMultiLangString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMultiLangString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Values.clear();
            uint32_t _size2742;
            ::apache::thrift::protocol::TType _etype2745;
            xfer += iprot->readListBegin(_etype2745, _size2742);
            this->Values.resize(_size2742);
            uint32_t _i2746;
            for (_i2746 = 0; _i2746 < _size2742; ++_i2746)
            {
              xfer += this->Values[_i2746].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMultiLangString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMultiLangString");

  xfer += oprot->writeFieldBegin("Values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Values.size()));
    std::vector<TDDIAbstractLangString> ::const_iterator _iter2747;
    for (_iter2747 = this->Values.begin(); _iter2747 != this->Values.end(); ++_iter2747)
    {
      xfer += (*_iter2747).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMultiLangString &a, TDDIMultiLangString &b) {
  using ::std::swap;
  swap(a.Values, b.Values);
  swap(a.__isset, b.__isset);
}

TDDIMultiLangString::TDDIMultiLangString(const TDDIMultiLangString& other2748) {
  Values = other2748.Values;
  __isset = other2748.__isset;
}
TDDIMultiLangString& TDDIMultiLangString::operator=(const TDDIMultiLangString& other2749) {
  Values = other2749.Values;
  __isset = other2749.__isset;
  return *this;
}
void TDDIMultiLangString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMultiLangString(";
  out << "Values=" << to_string(Values);
  out << ")";
}


TDDIDescription::~TDDIDescription() throw() {
}


void TDDIDescription::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIDescription::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDescription::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDescription::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIDescription::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIDescription::__set_Content(const TDDIMultiLangString& val) {
  this->Content = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDescription& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Content.read(iprot);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDescription");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Content.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDescription &a, TDDIDescription &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Content, b.Content);
  swap(a.__isset, b.__isset);
}

TDDIDescription::TDDIDescription(const TDDIDescription& other2750) {
  Gid = other2750.Gid;
  IsCitation = other2750.IsCitation;
  IsAbstract = other2750.IsAbstract;
  CitedElement = other2750.CitedElement;
  AbstractForm = other2750.AbstractForm;
  Content = other2750.Content;
  __isset = other2750.__isset;
}
TDDIDescription& TDDIDescription::operator=(const TDDIDescription& other2751) {
  Gid = other2751.Gid;
  IsCitation = other2751.IsCitation;
  IsAbstract = other2751.IsAbstract;
  CitedElement = other2751.CitedElement;
  AbstractForm = other2751.AbstractForm;
  Content = other2751.Content;
  __isset = other2751.__isset;
  return *this;
}
void TDDIDescription::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDescription(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Content=" << to_string(Content);
  out << ")";
}


TDDIImplementationConstraint::~TDDIImplementationConstraint() throw() {
}


void TDDIImplementationConstraint::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIImplementationConstraint::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIImplementationConstraint::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIImplementationConstraint::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIImplementationConstraint::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIImplementationConstraint::__set_Content(const TDDIMultiLangString& val) {
  this->Content = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIImplementationConstraint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIImplementationConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Content.read(iprot);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIImplementationConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIImplementationConstraint");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Content.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIImplementationConstraint &a, TDDIImplementationConstraint &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Content, b.Content);
  swap(a.__isset, b.__isset);
}

TDDIImplementationConstraint::TDDIImplementationConstraint(const TDDIImplementationConstraint& other2752) {
  Gid = other2752.Gid;
  IsCitation = other2752.IsCitation;
  IsAbstract = other2752.IsAbstract;
  CitedElement = other2752.CitedElement;
  AbstractForm = other2752.AbstractForm;
  Content = other2752.Content;
  __isset = other2752.__isset;
}
TDDIImplementationConstraint& TDDIImplementationConstraint::operator=(const TDDIImplementationConstraint& other2753) {
  Gid = other2753.Gid;
  IsCitation = other2753.IsCitation;
  IsAbstract = other2753.IsAbstract;
  CitedElement = other2753.CitedElement;
  AbstractForm = other2753.AbstractForm;
  Content = other2753.Content;
  __isset = other2753.__isset;
  return *this;
}
void TDDIImplementationConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIImplementationConstraint(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Content=" << to_string(Content);
  out << ")";
}


TDDINote::~TDDINote() throw() {
}


void TDDINote::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDINote::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDINote::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDINote::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDINote::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDINote::__set_Content(const TDDIMultiLangString& val) {
  this->Content = val;
}
std::ostream& operator<<(std::ostream& out, const TDDINote& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDINote::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Content.read(iprot);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDINote::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDINote");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Content.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDINote &a, TDDINote &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Content, b.Content);
  swap(a.__isset, b.__isset);
}

TDDINote::TDDINote(const TDDINote& other2754) {
  Gid = other2754.Gid;
  IsCitation = other2754.IsCitation;
  IsAbstract = other2754.IsAbstract;
  CitedElement = other2754.CitedElement;
  AbstractForm = other2754.AbstractForm;
  Content = other2754.Content;
  __isset = other2754.__isset;
}
TDDINote& TDDINote::operator=(const TDDINote& other2755) {
  Gid = other2755.Gid;
  IsCitation = other2755.IsCitation;
  IsAbstract = other2755.IsAbstract;
  CitedElement = other2755.CitedElement;
  AbstractForm = other2755.AbstractForm;
  Content = other2755.Content;
  __isset = other2755.__isset;
  return *this;
}
void TDDINote::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDINote(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Content=" << to_string(Content);
  out << ")";
}


TDDITaggedValue::~TDDITaggedValue() throw() {
}


void TDDITaggedValue::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITaggedValue::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITaggedValue::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITaggedValue::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITaggedValue::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITaggedValue::__set_Content(const TDDIMultiLangString& val) {
  this->Content = val;
}

void TDDITaggedValue::__set_Key(const TDDIMultiLangString& val) {
  this->Key = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITaggedValue& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITaggedValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Content.read(iprot);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Key.read(iprot);
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITaggedValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITaggedValue");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Content.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->Key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITaggedValue &a, TDDITaggedValue &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Content, b.Content);
  swap(a.Key, b.Key);
  swap(a.__isset, b.__isset);
}

TDDITaggedValue::TDDITaggedValue(const TDDITaggedValue& other2756) {
  Gid = other2756.Gid;
  IsCitation = other2756.IsCitation;
  IsAbstract = other2756.IsAbstract;
  CitedElement = other2756.CitedElement;
  AbstractForm = other2756.AbstractForm;
  Content = other2756.Content;
  Key = other2756.Key;
  __isset = other2756.__isset;
}
TDDITaggedValue& TDDITaggedValue::operator=(const TDDITaggedValue& other2757) {
  Gid = other2757.Gid;
  IsCitation = other2757.IsCitation;
  IsAbstract = other2757.IsAbstract;
  CitedElement = other2757.CitedElement;
  AbstractForm = other2757.AbstractForm;
  Content = other2757.Content;
  Key = other2757.Key;
  __isset = other2757.__isset;
  return *this;
}
void TDDITaggedValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITaggedValue(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Content=" << to_string(Content);
  out << ", " << "Key=" << to_string(Key);
  out << ")";
}


TDDIUtilityElementUnion::~TDDIUtilityElementUnion() throw() {
}


void TDDIUtilityElementUnion::__set_Description(const TDDIDescription& val) {
  this->Description = val;
__isset.Description = true;
}

void TDDIUtilityElementUnion::__set_ImplementationConstraint(const TDDIImplementationConstraint& val) {
  this->ImplementationConstraint = val;
__isset.ImplementationConstraint = true;
}

void TDDIUtilityElementUnion::__set_Note(const TDDINote& val) {
  this->Note = val;
__isset.Note = true;
}

void TDDIUtilityElementUnion::__set_TaggedValue(const TDDITaggedValue& val) {
  this->TaggedValue = val;
__isset.TaggedValue = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIUtilityElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIUtilityElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Description.read(iprot);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ImplementationConstraint.read(iprot);
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Note.read(iprot);
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->TaggedValue.read(iprot);
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIUtilityElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIUtilityElementUnion");

  if (this->__isset.Description) {
    xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Description.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ImplementationConstraint) {
    xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ImplementationConstraint.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Note) {
    xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->Note.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TaggedValue) {
    xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->TaggedValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIUtilityElementUnion &a, TDDIUtilityElementUnion &b) {
  using ::std::swap;
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.__isset, b.__isset);
}

TDDIUtilityElementUnion::TDDIUtilityElementUnion(const TDDIUtilityElementUnion& other2758) {
  Description = other2758.Description;
  ImplementationConstraint = other2758.ImplementationConstraint;
  Note = other2758.Note;
  TaggedValue = other2758.TaggedValue;
  __isset = other2758.__isset;
}
TDDIUtilityElementUnion& TDDIUtilityElementUnion::operator=(const TDDIUtilityElementUnion& other2759) {
  Description = other2759.Description;
  ImplementationConstraint = other2759.ImplementationConstraint;
  Note = other2759.Note;
  TaggedValue = other2759.TaggedValue;
  __isset = other2759.__isset;
  return *this;
}
void TDDIUtilityElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIUtilityElementUnion(";
  out << "Description="; (__isset.Description ? (out << to_string(Description)) : (out << "<null>"));
  out << ", " << "ImplementationConstraint="; (__isset.ImplementationConstraint ? (out << to_string(ImplementationConstraint)) : (out << "<null>"));
  out << ", " << "Note="; (__isset.Note ? (out << to_string(Note)) : (out << "<null>"));
  out << ", " << "TaggedValue="; (__isset.TaggedValue ? (out << to_string(TaggedValue)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractUtilityElement::~TDDIAbstractUtilityElement() throw() {
}


void TDDIAbstractUtilityElement::__set_UsedUtilityElement(const TDDIUtilityElementUnion& val) {
  this->UsedUtilityElement = val;
}

void TDDIAbstractUtilityElement::__set_UsedUtilityElementType(const TDDIUtilityElementUnionType val) {
  this->UsedUtilityElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractUtilityElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractUtilityElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedUtilityElement.read(iprot);
          this->__isset.UsedUtilityElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2760;
          xfer += iprot->readI32(ecast2760);
          this->UsedUtilityElementType = (TDDIUtilityElementUnionType)ecast2760;
          this->__isset.UsedUtilityElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractUtilityElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractUtilityElement");

  xfer += oprot->writeFieldBegin("UsedUtilityElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedUtilityElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedUtilityElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedUtilityElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractUtilityElement &a, TDDIAbstractUtilityElement &b) {
  using ::std::swap;
  swap(a.UsedUtilityElement, b.UsedUtilityElement);
  swap(a.UsedUtilityElementType, b.UsedUtilityElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractUtilityElement::TDDIAbstractUtilityElement(const TDDIAbstractUtilityElement& other2761) {
  UsedUtilityElement = other2761.UsedUtilityElement;
  UsedUtilityElementType = other2761.UsedUtilityElementType;
  __isset = other2761.__isset;
}
TDDIAbstractUtilityElement& TDDIAbstractUtilityElement::operator=(const TDDIAbstractUtilityElement& other2762) {
  UsedUtilityElement = other2762.UsedUtilityElement;
  UsedUtilityElementType = other2762.UsedUtilityElementType;
  __isset = other2762.__isset;
  return *this;
}
void TDDIAbstractUtilityElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractUtilityElement(";
  out << "UsedUtilityElement=" << to_string(UsedUtilityElement);
  out << ", " << "UsedUtilityElementType=" << to_string(UsedUtilityElementType);
  out << ")";
}


TDDIArtifactElementUnion::~TDDIArtifactElementUnion() throw() {
}


void TDDIArtifactElementUnion::__set_TerminologyElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyElement> val) {
  this->TerminologyElement = val;
__isset.TerminologyElement = true;
}

void TDDIArtifactElementUnion::__set_AssuranceCasePackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> val) {
  this->AssuranceCasePackage = val;
__isset.AssuranceCasePackage = true;
}

void TDDIArtifactElementUnion::__set_ArtifactPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> val) {
  this->ArtifactPackage = val;
__isset.ArtifactPackage = true;
}

void TDDIArtifactElementUnion::__set_ArtifactGroup(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactGroup> val) {
  this->ArtifactGroup = val;
__isset.ArtifactGroup = true;
}

void TDDIArtifactElementUnion::__set_ArtifactAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> val) {
  this->ArtifactAsset = val;
__isset.ArtifactAsset = true;
}

void TDDIArtifactElementUnion::__set_ArgumentationElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> val) {
  this->ArgumentationElement = val;
__isset.ArgumentationElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyElement) { 
            this->TerminologyElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyElement>(new TDDIAbstractTerminologyElement);
          }
          xfer += this->TerminologyElement->read(iprot);
          bool wasSet = false;
          if (this->TerminologyElement->__isset.UsedTerminologyElement) { wasSet = true; }
          if (this->TerminologyElement->__isset.UsedTerminologyElementType) { wasSet = true; }
          if (!wasSet) { this->TerminologyElement.reset(); }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceCasePackage) { 
            this->AssuranceCasePackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage>(new TDDIAbstractAssuranceCasePackage);
          }
          xfer += this->AssuranceCasePackage->read(iprot);
          bool wasSet = false;
          if (this->AssuranceCasePackage->__isset.UsedAssuranceCasePackage) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.UsedAssuranceCasePackageType) { wasSet = true; }
          if (!wasSet) { this->AssuranceCasePackage.reset(); }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactPackage) { 
            this->ArtifactPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage>(new TDDIAbstractArtifactPackage);
          }
          xfer += this->ArtifactPackage->read(iprot);
          bool wasSet = false;
          if (this->ArtifactPackage->__isset.UsedArtifactPackage) { wasSet = true; }
          if (this->ArtifactPackage->__isset.UsedArtifactPackageType) { wasSet = true; }
          if (!wasSet) { this->ArtifactPackage.reset(); }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactGroup) { 
            this->ArtifactGroup = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactGroup>(new TDDIArtifactGroup);
          }
          xfer += this->ArtifactGroup->read(iprot);
          bool wasSet = false;
          if (this->ArtifactGroup->__isset.Gid) { wasSet = true; }
          if (this->ArtifactGroup->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactGroup->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactGroup->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactGroup->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactGroup->__isset.Name) { wasSet = true; }
          if (this->ArtifactGroup->__isset.Description) { wasSet = true; }
          if (this->ArtifactGroup->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactGroup->__isset.Note) { wasSet = true; }
          if (this->ArtifactGroup->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactGroup->__isset.ArtifactElement) { wasSet = true; }
          if (!wasSet) { this->ArtifactGroup.reset(); }
          this->__isset.ArtifactGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactAsset) { 
            this->ArtifactAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset>(new TDDIAbstractArtifactAsset);
          }
          xfer += this->ArtifactAsset->read(iprot);
          bool wasSet = false;
          if (this->ArtifactAsset->__isset.UsedArtifactAsset) { wasSet = true; }
          if (this->ArtifactAsset->__isset.UsedArtifactAssetType) { wasSet = true; }
          if (!wasSet) { this->ArtifactAsset.reset(); }
          this->__isset.ArtifactAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentationElement) { 
            this->ArgumentationElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement>(new TDDIAbstractArgumentationElement);
          }
          xfer += this->ArgumentationElement->read(iprot);
          bool wasSet = false;
          if (this->ArgumentationElement->__isset.UsedArgumentationElement) { wasSet = true; }
          if (this->ArgumentationElement->__isset.UsedArgumentationElementType) { wasSet = true; }
          if (!wasSet) { this->ArgumentationElement.reset(); }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactElementUnion");

  if (this->__isset.TerminologyElement) {
    xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->TerminologyElement) {
      xfer += this->TerminologyElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractTerminologyElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssuranceCasePackage) {
    xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->AssuranceCasePackage) {
      xfer += this->AssuranceCasePackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractAssuranceCasePackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactPackage) {
    xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArtifactPackage) {
      xfer += this->ArtifactPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArtifactPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactGroup) {
    xfer += oprot->writeFieldBegin("ArtifactGroup", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->ArtifactGroup) {
      xfer += this->ArtifactGroup->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactGroup"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactAsset) {
    xfer += oprot->writeFieldBegin("ArtifactAsset", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->ArtifactAsset) {
      xfer += this->ArtifactAsset->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArtifactAsset"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentationElement) {
    xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->ArgumentationElement) {
      xfer += this->ArgumentationElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArgumentationElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactElementUnion &a, TDDIArtifactElementUnion &b) {
  using ::std::swap;
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArtifactGroup, b.ArtifactGroup);
  swap(a.ArtifactAsset, b.ArtifactAsset);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.__isset, b.__isset);
}

TDDIArtifactElementUnion::TDDIArtifactElementUnion(const TDDIArtifactElementUnion& other2763) {
  TerminologyElement = other2763.TerminologyElement;
  AssuranceCasePackage = other2763.AssuranceCasePackage;
  ArtifactPackage = other2763.ArtifactPackage;
  ArtifactGroup = other2763.ArtifactGroup;
  ArtifactAsset = other2763.ArtifactAsset;
  ArgumentationElement = other2763.ArgumentationElement;
  __isset = other2763.__isset;
}
TDDIArtifactElementUnion& TDDIArtifactElementUnion::operator=(const TDDIArtifactElementUnion& other2764) {
  TerminologyElement = other2764.TerminologyElement;
  AssuranceCasePackage = other2764.AssuranceCasePackage;
  ArtifactPackage = other2764.ArtifactPackage;
  ArtifactGroup = other2764.ArtifactGroup;
  ArtifactAsset = other2764.ArtifactAsset;
  ArgumentationElement = other2764.ArgumentationElement;
  __isset = other2764.__isset;
  return *this;
}
void TDDIArtifactElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactElementUnion(";
  out << "TerminologyElement="; (__isset.TerminologyElement ? (out << to_string(TerminologyElement)) : (out << "<null>"));
  out << ", " << "AssuranceCasePackage="; (__isset.AssuranceCasePackage ? (out << to_string(AssuranceCasePackage)) : (out << "<null>"));
  out << ", " << "ArtifactPackage="; (__isset.ArtifactPackage ? (out << to_string(ArtifactPackage)) : (out << "<null>"));
  out << ", " << "ArtifactGroup="; (__isset.ArtifactGroup ? (out << to_string(ArtifactGroup)) : (out << "<null>"));
  out << ", " << "ArtifactAsset="; (__isset.ArtifactAsset ? (out << to_string(ArtifactAsset)) : (out << "<null>"));
  out << ", " << "ArgumentationElement="; (__isset.ArgumentationElement ? (out << to_string(ArgumentationElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArtifactElement::~TDDIAbstractArtifactElement() throw() {
}


void TDDIAbstractArtifactElement::__set_UsedArtifactElement(const TDDIArtifactElementUnion& val) {
  this->UsedArtifactElement = val;
}

void TDDIAbstractArtifactElement::__set_UsedArtifactElementType(const TDDIArtifactElementUnionType val) {
  this->UsedArtifactElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArtifactElement.read(iprot);
          this->__isset.UsedArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2765;
          xfer += iprot->readI32(ecast2765);
          this->UsedArtifactElementType = (TDDIArtifactElementUnionType)ecast2765;
          this->__isset.UsedArtifactElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactElement");

  xfer += oprot->writeFieldBegin("UsedArtifactElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArtifactElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArtifactElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArtifactElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactElement &a, TDDIAbstractArtifactElement &b) {
  using ::std::swap;
  swap(a.UsedArtifactElement, b.UsedArtifactElement);
  swap(a.UsedArtifactElementType, b.UsedArtifactElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactElement::TDDIAbstractArtifactElement(const TDDIAbstractArtifactElement& other2766) {
  UsedArtifactElement = other2766.UsedArtifactElement;
  UsedArtifactElementType = other2766.UsedArtifactElementType;
  __isset = other2766.__isset;
}
TDDIAbstractArtifactElement& TDDIAbstractArtifactElement::operator=(const TDDIAbstractArtifactElement& other2767) {
  UsedArtifactElement = other2767.UsedArtifactElement;
  UsedArtifactElementType = other2767.UsedArtifactElementType;
  __isset = other2767.__isset;
  return *this;
}
void TDDIAbstractArtifactElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactElement(";
  out << "UsedArtifactElement=" << to_string(UsedArtifactElement);
  out << ", " << "UsedArtifactElementType=" << to_string(UsedArtifactElementType);
  out << ")";
}


TDDIModelElementUnion::~TDDIModelElementUnion() throw() {
}


void TDDIModelElementUnion::__set_ArtifactElement(const TDDIAbstractArtifactElement& val) {
  this->ArtifactElement = val;
__isset.ArtifactElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIModelElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIModelElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ArtifactElement.read(iprot);
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIModelElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIModelElementUnion");

  if (this->__isset.ArtifactElement) {
    xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ArtifactElement.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIModelElementUnion &a, TDDIModelElementUnion &b) {
  using ::std::swap;
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.__isset, b.__isset);
}

TDDIModelElementUnion::TDDIModelElementUnion(const TDDIModelElementUnion& other2768) {
  ArtifactElement = other2768.ArtifactElement;
  __isset = other2768.__isset;
}
TDDIModelElementUnion& TDDIModelElementUnion::operator=(const TDDIModelElementUnion& other2769) {
  ArtifactElement = other2769.ArtifactElement;
  __isset = other2769.__isset;
  return *this;
}
void TDDIModelElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIModelElementUnion(";
  out << "ArtifactElement="; (__isset.ArtifactElement ? (out << to_string(ArtifactElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractModelElement::~TDDIAbstractModelElement() throw() {
}


void TDDIAbstractModelElement::__set_UsedModelElement(const TDDIModelElementUnion& val) {
  this->UsedModelElement = val;
}

void TDDIAbstractModelElement::__set_UsedModelElementType(const TDDIModelElementUnionType val) {
  this->UsedModelElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractModelElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractModelElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedModelElement.read(iprot);
          this->__isset.UsedModelElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2770;
          xfer += iprot->readI32(ecast2770);
          this->UsedModelElementType = (TDDIModelElementUnionType)ecast2770;
          this->__isset.UsedModelElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractModelElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractModelElement");

  xfer += oprot->writeFieldBegin("UsedModelElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedModelElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedModelElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedModelElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractModelElement &a, TDDIAbstractModelElement &b) {
  using ::std::swap;
  swap(a.UsedModelElement, b.UsedModelElement);
  swap(a.UsedModelElementType, b.UsedModelElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractModelElement::TDDIAbstractModelElement(const TDDIAbstractModelElement& other2771) {
  UsedModelElement = other2771.UsedModelElement;
  UsedModelElementType = other2771.UsedModelElementType;
  __isset = other2771.__isset;
}
TDDIAbstractModelElement& TDDIAbstractModelElement::operator=(const TDDIAbstractModelElement& other2772) {
  UsedModelElement = other2772.UsedModelElement;
  UsedModelElementType = other2772.UsedModelElementType;
  __isset = other2772.__isset;
  return *this;
}
void TDDIAbstractModelElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractModelElement(";
  out << "UsedModelElement=" << to_string(UsedModelElement);
  out << ", " << "UsedModelElementType=" << to_string(UsedModelElementType);
  out << ")";
}


TDDISACMElementUnion::~TDDISACMElementUnion() throw() {
}


void TDDISACMElementUnion::__set_UtilityElement(const TDDIAbstractUtilityElement& val) {
  this->UtilityElement = val;
__isset.UtilityElement = true;
}

void TDDISACMElementUnion::__set_ModelElement(const TDDIAbstractModelElement& val) {
  this->ModelElement = val;
__isset.ModelElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDISACMElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISACMElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UtilityElement.read(iprot);
          this->__isset.UtilityElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ModelElement.read(iprot);
          this->__isset.ModelElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISACMElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISACMElementUnion");

  if (this->__isset.UtilityElement) {
    xfer += oprot->writeFieldBegin("UtilityElement", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->UtilityElement.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ModelElement) {
    xfer += oprot->writeFieldBegin("ModelElement", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ModelElement.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISACMElementUnion &a, TDDISACMElementUnion &b) {
  using ::std::swap;
  swap(a.UtilityElement, b.UtilityElement);
  swap(a.ModelElement, b.ModelElement);
  swap(a.__isset, b.__isset);
}

TDDISACMElementUnion::TDDISACMElementUnion(const TDDISACMElementUnion& other2773) {
  UtilityElement = other2773.UtilityElement;
  ModelElement = other2773.ModelElement;
  __isset = other2773.__isset;
}
TDDISACMElementUnion& TDDISACMElementUnion::operator=(const TDDISACMElementUnion& other2774) {
  UtilityElement = other2774.UtilityElement;
  ModelElement = other2774.ModelElement;
  __isset = other2774.__isset;
  return *this;
}
void TDDISACMElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISACMElementUnion(";
  out << "UtilityElement="; (__isset.UtilityElement ? (out << to_string(UtilityElement)) : (out << "<null>"));
  out << ", " << "ModelElement="; (__isset.ModelElement ? (out << to_string(ModelElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractSACMElement::~TDDIAbstractSACMElement() throw() {
}


void TDDIAbstractSACMElement::__set_UsedSACMElement(const TDDISACMElementUnion& val) {
  this->UsedSACMElement = val;
}

void TDDIAbstractSACMElement::__set_UsedSACMElementType(const TDDISACMElementUnionType val) {
  this->UsedSACMElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractSACMElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractSACMElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedSACMElement.read(iprot);
          this->__isset.UsedSACMElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2775;
          xfer += iprot->readI32(ecast2775);
          this->UsedSACMElementType = (TDDISACMElementUnionType)ecast2775;
          this->__isset.UsedSACMElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractSACMElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractSACMElement");

  xfer += oprot->writeFieldBegin("UsedSACMElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedSACMElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedSACMElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedSACMElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractSACMElement &a, TDDIAbstractSACMElement &b) {
  using ::std::swap;
  swap(a.UsedSACMElement, b.UsedSACMElement);
  swap(a.UsedSACMElementType, b.UsedSACMElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractSACMElement::TDDIAbstractSACMElement(const TDDIAbstractSACMElement& other2776) {
  UsedSACMElement = other2776.UsedSACMElement;
  UsedSACMElementType = other2776.UsedSACMElementType;
  __isset = other2776.__isset;
}
TDDIAbstractSACMElement& TDDIAbstractSACMElement::operator=(const TDDIAbstractSACMElement& other2777) {
  UsedSACMElement = other2777.UsedSACMElement;
  UsedSACMElementType = other2777.UsedSACMElementType;
  __isset = other2777.__isset;
  return *this;
}
void TDDIAbstractSACMElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractSACMElement(";
  out << "UsedSACMElement=" << to_string(UsedSACMElement);
  out << ", " << "UsedSACMElementType=" << to_string(UsedSACMElementType);
  out << ")";
}


TDDIElementUnion::~TDDIElementUnion() throw() {
}


void TDDIElementUnion::__set_LangString(const TDDIAbstractLangString& val) {
  this->LangString = val;
__isset.LangString = true;
}

void TDDIElementUnion::__set_MultiLangString(const TDDIMultiLangString& val) {
  this->MultiLangString = val;
__isset.MultiLangString = true;
}

void TDDIElementUnion::__set_SACMElement(const TDDIAbstractSACMElement& val) {
  this->SACMElement = val;
__isset.SACMElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->LangString.read(iprot);
          this->__isset.LangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->MultiLangString.read(iprot);
          this->__isset.MultiLangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->SACMElement.read(iprot);
          this->__isset.SACMElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIElementUnion");

  if (this->__isset.LangString) {
    xfer += oprot->writeFieldBegin("LangString", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->LangString.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MultiLangString) {
    xfer += oprot->writeFieldBegin("MultiLangString", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->MultiLangString.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SACMElement) {
    xfer += oprot->writeFieldBegin("SACMElement", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->SACMElement.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIElementUnion &a, TDDIElementUnion &b) {
  using ::std::swap;
  swap(a.LangString, b.LangString);
  swap(a.MultiLangString, b.MultiLangString);
  swap(a.SACMElement, b.SACMElement);
  swap(a.__isset, b.__isset);
}

TDDIElementUnion::TDDIElementUnion(const TDDIElementUnion& other2778) {
  LangString = other2778.LangString;
  MultiLangString = other2778.MultiLangString;
  SACMElement = other2778.SACMElement;
  __isset = other2778.__isset;
}
TDDIElementUnion& TDDIElementUnion::operator=(const TDDIElementUnion& other2779) {
  LangString = other2779.LangString;
  MultiLangString = other2779.MultiLangString;
  SACMElement = other2779.SACMElement;
  __isset = other2779.__isset;
  return *this;
}
void TDDIElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIElementUnion(";
  out << "LangString="; (__isset.LangString ? (out << to_string(LangString)) : (out << "<null>"));
  out << ", " << "MultiLangString="; (__isset.MultiLangString ? (out << to_string(MultiLangString)) : (out << "<null>"));
  out << ", " << "SACMElement="; (__isset.SACMElement ? (out << to_string(SACMElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractElement::~TDDIAbstractElement() throw() {
}


void TDDIAbstractElement::__set_UsedElement(const TDDIElementUnion& val) {
  this->UsedElement = val;
}

void TDDIAbstractElement::__set_UsedElementType(const TDDIElementUnionType val) {
  this->UsedElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedElement.read(iprot);
          this->__isset.UsedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2780;
          xfer += iprot->readI32(ecast2780);
          this->UsedElementType = (TDDIElementUnionType)ecast2780;
          this->__isset.UsedElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractElement");

  xfer += oprot->writeFieldBegin("UsedElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractElement &a, TDDIAbstractElement &b) {
  using ::std::swap;
  swap(a.UsedElement, b.UsedElement);
  swap(a.UsedElementType, b.UsedElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractElement::TDDIAbstractElement(const TDDIAbstractElement& other2781) {
  UsedElement = other2781.UsedElement;
  UsedElementType = other2781.UsedElementType;
  __isset = other2781.__isset;
}
TDDIAbstractElement& TDDIAbstractElement::operator=(const TDDIAbstractElement& other2782) {
  UsedElement = other2782.UsedElement;
  UsedElementType = other2782.UsedElementType;
  __isset = other2782.__isset;
  return *this;
}
void TDDIAbstractElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractElement(";
  out << "UsedElement=" << to_string(UsedElement);
  out << ", " << "UsedElementType=" << to_string(UsedElementType);
  out << ")";
}


TDDITerminologyElementUnion::~TDDITerminologyElementUnion() throw() {
}


void TDDITerminologyElementUnion::__set_TerminologyGroup(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyGroup> val) {
  this->TerminologyGroup = val;
__isset.TerminologyGroup = true;
}

void TDDITerminologyElementUnion::__set_TerminologyPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> val) {
  this->TerminologyPackage = val;
__isset.TerminologyPackage = true;
}

void TDDITerminologyElementUnion::__set_TerminologyAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyAsset> val) {
  this->TerminologyAsset = val;
__isset.TerminologyAsset = true;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyGroup) { 
            this->TerminologyGroup = ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyGroup>(new TDDITerminologyGroup);
          }
          xfer += this->TerminologyGroup->read(iprot);
          bool wasSet = false;
          if (this->TerminologyGroup->__isset.Gid) { wasSet = true; }
          if (this->TerminologyGroup->__isset.IsCitation) { wasSet = true; }
          if (this->TerminologyGroup->__isset.IsAbstract) { wasSet = true; }
          if (this->TerminologyGroup->__isset.CitedElement) { wasSet = true; }
          if (this->TerminologyGroup->__isset.AbstractForm) { wasSet = true; }
          if (this->TerminologyGroup->__isset.Name) { wasSet = true; }
          if (this->TerminologyGroup->__isset.Description) { wasSet = true; }
          if (this->TerminologyGroup->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->TerminologyGroup->__isset.Note) { wasSet = true; }
          if (this->TerminologyGroup->__isset.TaggedValue) { wasSet = true; }
          if (this->TerminologyGroup->__isset.TerminologyElement) { wasSet = true; }
          if (!wasSet) { this->TerminologyGroup.reset(); }
          this->__isset.TerminologyGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyPackage) { 
            this->TerminologyPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage>(new TDDIAbstractTerminologyPackage);
          }
          xfer += this->TerminologyPackage->read(iprot);
          bool wasSet = false;
          if (this->TerminologyPackage->__isset.UsedTerminologyPackage) { wasSet = true; }
          if (this->TerminologyPackage->__isset.UsedTerminologyPackageType) { wasSet = true; }
          if (!wasSet) { this->TerminologyPackage.reset(); }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyAsset) { 
            this->TerminologyAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyAsset>(new TDDIAbstractTerminologyAsset);
          }
          xfer += this->TerminologyAsset->read(iprot);
          bool wasSet = false;
          if (this->TerminologyAsset->__isset.UsedTerminologyAsset) { wasSet = true; }
          if (this->TerminologyAsset->__isset.UsedTerminologyAssetType) { wasSet = true; }
          if (!wasSet) { this->TerminologyAsset.reset(); }
          this->__isset.TerminologyAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyElementUnion");

  if (this->__isset.TerminologyGroup) {
    xfer += oprot->writeFieldBegin("TerminologyGroup", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->TerminologyGroup) {
      xfer += this->TerminologyGroup->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerminologyGroup"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TerminologyPackage) {
    xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->TerminologyPackage) {
      xfer += this->TerminologyPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractTerminologyPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TerminologyAsset) {
    xfer += oprot->writeFieldBegin("TerminologyAsset", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->TerminologyAsset) {
      xfer += this->TerminologyAsset->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractTerminologyAsset"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyElementUnion &a, TDDITerminologyElementUnion &b) {
  using ::std::swap;
  swap(a.TerminologyGroup, b.TerminologyGroup);
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.TerminologyAsset, b.TerminologyAsset);
  swap(a.__isset, b.__isset);
}

TDDITerminologyElementUnion::TDDITerminologyElementUnion(const TDDITerminologyElementUnion& other2783) {
  TerminologyGroup = other2783.TerminologyGroup;
  TerminologyPackage = other2783.TerminologyPackage;
  TerminologyAsset = other2783.TerminologyAsset;
  __isset = other2783.__isset;
}
TDDITerminologyElementUnion& TDDITerminologyElementUnion::operator=(const TDDITerminologyElementUnion& other2784) {
  TerminologyGroup = other2784.TerminologyGroup;
  TerminologyPackage = other2784.TerminologyPackage;
  TerminologyAsset = other2784.TerminologyAsset;
  __isset = other2784.__isset;
  return *this;
}
void TDDITerminologyElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyElementUnion(";
  out << "TerminologyGroup="; (__isset.TerminologyGroup ? (out << to_string(TerminologyGroup)) : (out << "<null>"));
  out << ", " << "TerminologyPackage="; (__isset.TerminologyPackage ? (out << to_string(TerminologyPackage)) : (out << "<null>"));
  out << ", " << "TerminologyAsset="; (__isset.TerminologyAsset ? (out << to_string(TerminologyAsset)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractTerminologyElement::~TDDIAbstractTerminologyElement() throw() {
}


void TDDIAbstractTerminologyElement::__set_UsedTerminologyElement(const TDDITerminologyElementUnion& val) {
  this->UsedTerminologyElement = val;
}

void TDDIAbstractTerminologyElement::__set_UsedTerminologyElementType(const TDDITerminologyElementUnionType val) {
  this->UsedTerminologyElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractTerminologyElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedTerminologyElement.read(iprot);
          this->__isset.UsedTerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2785;
          xfer += iprot->readI32(ecast2785);
          this->UsedTerminologyElementType = (TDDITerminologyElementUnionType)ecast2785;
          this->__isset.UsedTerminologyElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractTerminologyElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractTerminologyElement");

  xfer += oprot->writeFieldBegin("UsedTerminologyElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedTerminologyElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedTerminologyElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedTerminologyElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractTerminologyElement &a, TDDIAbstractTerminologyElement &b) {
  using ::std::swap;
  swap(a.UsedTerminologyElement, b.UsedTerminologyElement);
  swap(a.UsedTerminologyElementType, b.UsedTerminologyElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractTerminologyElement::TDDIAbstractTerminologyElement(const TDDIAbstractTerminologyElement& other2786) {
  UsedTerminologyElement = other2786.UsedTerminologyElement;
  UsedTerminologyElementType = other2786.UsedTerminologyElementType;
  __isset = other2786.__isset;
}
TDDIAbstractTerminologyElement& TDDIAbstractTerminologyElement::operator=(const TDDIAbstractTerminologyElement& other2787) {
  UsedTerminologyElement = other2787.UsedTerminologyElement;
  UsedTerminologyElementType = other2787.UsedTerminologyElementType;
  __isset = other2787.__isset;
  return *this;
}
void TDDIAbstractTerminologyElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractTerminologyElement(";
  out << "UsedTerminologyElement=" << to_string(UsedTerminologyElement);
  out << ", " << "UsedTerminologyElementType=" << to_string(UsedTerminologyElementType);
  out << ")";
}


TDDITerminologyGroup::~TDDITerminologyGroup() throw() {
}


void TDDITerminologyGroup::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerminologyGroup::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerminologyGroup::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerminologyGroup::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerminologyGroup::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerminologyGroup::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerminologyGroup::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerminologyGroup::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerminologyGroup::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerminologyGroup::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerminologyGroup::__set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val) {
  this->TerminologyElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2788;
            ::apache::thrift::protocol::TType _etype2791;
            xfer += iprot->readListBegin(_etype2791, _size2788);
            this->ImplementationConstraint.resize(_size2788);
            uint32_t _i2792;
            for (_i2792 = 0; _i2792 < _size2788; ++_i2792)
            {
              xfer += this->ImplementationConstraint[_i2792].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2793;
            ::apache::thrift::protocol::TType _etype2796;
            xfer += iprot->readListBegin(_etype2796, _size2793);
            this->Note.resize(_size2793);
            uint32_t _i2797;
            for (_i2797 = 0; _i2797 < _size2793; ++_i2797)
            {
              xfer += this->Note[_i2797].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2798;
            ::apache::thrift::protocol::TType _etype2801;
            xfer += iprot->readListBegin(_etype2801, _size2798);
            this->TaggedValue.resize(_size2798);
            uint32_t _i2802;
            for (_i2802 = 0; _i2802 < _size2798; ++_i2802)
            {
              xfer += this->TaggedValue[_i2802].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyElement.clear();
            uint32_t _size2803;
            ::apache::thrift::protocol::TType _etype2806;
            xfer += iprot->readListBegin(_etype2806, _size2803);
            this->TerminologyElement.resize(_size2803);
            uint32_t _i2807;
            for (_i2807 = 0; _i2807 < _size2803; ++_i2807)
            {
              xfer += this->TerminologyElement[_i2807].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyGroup");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2808;
    for (_iter2808 = this->ImplementationConstraint.begin(); _iter2808 != this->ImplementationConstraint.end(); ++_iter2808)
    {
      xfer += (*_iter2808).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2809;
    for (_iter2809 = this->Note.begin(); _iter2809 != this->Note.end(); ++_iter2809)
    {
      xfer += (*_iter2809).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2810;
    for (_iter2810 = this->TaggedValue.begin(); _iter2810 != this->TaggedValue.end(); ++_iter2810)
    {
      xfer += (*_iter2810).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyElement.size()));
    std::vector<TDDIAbstractTerminologyElement> ::const_iterator _iter2811;
    for (_iter2811 = this->TerminologyElement.begin(); _iter2811 != this->TerminologyElement.end(); ++_iter2811)
    {
      xfer += (*_iter2811).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyGroup &a, TDDITerminologyGroup &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.__isset, b.__isset);
}

TDDITerminologyGroup::TDDITerminologyGroup(const TDDITerminologyGroup& other2812) {
  Gid = other2812.Gid;
  IsCitation = other2812.IsCitation;
  IsAbstract = other2812.IsAbstract;
  CitedElement = other2812.CitedElement;
  AbstractForm = other2812.AbstractForm;
  Name = other2812.Name;
  Description = other2812.Description;
  ImplementationConstraint = other2812.ImplementationConstraint;
  Note = other2812.Note;
  TaggedValue = other2812.TaggedValue;
  TerminologyElement = other2812.TerminologyElement;
  __isset = other2812.__isset;
}
TDDITerminologyGroup& TDDITerminologyGroup::operator=(const TDDITerminologyGroup& other2813) {
  Gid = other2813.Gid;
  IsCitation = other2813.IsCitation;
  IsAbstract = other2813.IsAbstract;
  CitedElement = other2813.CitedElement;
  AbstractForm = other2813.AbstractForm;
  Name = other2813.Name;
  Description = other2813.Description;
  ImplementationConstraint = other2813.ImplementationConstraint;
  Note = other2813.Note;
  TaggedValue = other2813.TaggedValue;
  TerminologyElement = other2813.TerminologyElement;
  __isset = other2813.__isset;
  return *this;
}
void TDDITerminologyGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyGroup(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "TerminologyElement=" << to_string(TerminologyElement);
  out << ")";
}


TDDITerminologyPackageUnion::~TDDITerminologyPackageUnion() throw() {
}


void TDDITerminologyPackageUnion::__set_TerminologyPackage(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackage> val) {
  this->TerminologyPackage = val;
__isset.TerminologyPackage = true;
}

void TDDITerminologyPackageUnion::__set_TerminologyPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageBinding> val) {
  this->TerminologyPackageBinding = val;
__isset.TerminologyPackageBinding = true;
}

void TDDITerminologyPackageUnion::__set_TerminologyPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageInterface> val) {
  this->TerminologyPackageInterface = val;
__isset.TerminologyPackageInterface = true;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyPackage) { 
            this->TerminologyPackage = ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackage>(new TDDITerminologyPackage);
          }
          xfer += this->TerminologyPackage->read(iprot);
          bool wasSet = false;
          if (this->TerminologyPackage->__isset.Gid) { wasSet = true; }
          if (this->TerminologyPackage->__isset.IsCitation) { wasSet = true; }
          if (this->TerminologyPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->TerminologyPackage->__isset.CitedElement) { wasSet = true; }
          if (this->TerminologyPackage->__isset.AbstractForm) { wasSet = true; }
          if (this->TerminologyPackage->__isset.Name) { wasSet = true; }
          if (this->TerminologyPackage->__isset.Description) { wasSet = true; }
          if (this->TerminologyPackage->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->TerminologyPackage->__isset.Note) { wasSet = true; }
          if (this->TerminologyPackage->__isset.TaggedValue) { wasSet = true; }
          if (this->TerminologyPackage->__isset.TerminologyElement) { wasSet = true; }
          if (!wasSet) { this->TerminologyPackage.reset(); }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyPackageBinding) { 
            this->TerminologyPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageBinding>(new TDDITerminologyPackageBinding);
          }
          xfer += this->TerminologyPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->TerminologyPackageBinding->__isset.Gid) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.AbstractForm) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.Name) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.Description) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.Note) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.TaggedValue) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.TerminologyElement) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.ParticipantPackage) { wasSet = true; }
          if (!wasSet) { this->TerminologyPackageBinding.reset(); }
          this->__isset.TerminologyPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyPackageInterface) { 
            this->TerminologyPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageInterface>(new TDDITerminologyPackageInterface);
          }
          xfer += this->TerminologyPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->TerminologyPackageInterface->__isset.Gid) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.AbstractForm) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.Name) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.Description) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.Note) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.TaggedValue) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.TerminologyElement) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->TerminologyPackageInterface.reset(); }
          this->__isset.TerminologyPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyPackageUnion");

  if (this->__isset.TerminologyPackage) {
    xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->TerminologyPackage) {
      xfer += this->TerminologyPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerminologyPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TerminologyPackageBinding) {
    xfer += oprot->writeFieldBegin("TerminologyPackageBinding", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->TerminologyPackageBinding) {
      xfer += this->TerminologyPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerminologyPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TerminologyPackageInterface) {
    xfer += oprot->writeFieldBegin("TerminologyPackageInterface", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->TerminologyPackageInterface) {
      xfer += this->TerminologyPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerminologyPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyPackageUnion &a, TDDITerminologyPackageUnion &b) {
  using ::std::swap;
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.TerminologyPackageBinding, b.TerminologyPackageBinding);
  swap(a.TerminologyPackageInterface, b.TerminologyPackageInterface);
  swap(a.__isset, b.__isset);
}

TDDITerminologyPackageUnion::TDDITerminologyPackageUnion(const TDDITerminologyPackageUnion& other2814) {
  TerminologyPackage = other2814.TerminologyPackage;
  TerminologyPackageBinding = other2814.TerminologyPackageBinding;
  TerminologyPackageInterface = other2814.TerminologyPackageInterface;
  __isset = other2814.__isset;
}
TDDITerminologyPackageUnion& TDDITerminologyPackageUnion::operator=(const TDDITerminologyPackageUnion& other2815) {
  TerminologyPackage = other2815.TerminologyPackage;
  TerminologyPackageBinding = other2815.TerminologyPackageBinding;
  TerminologyPackageInterface = other2815.TerminologyPackageInterface;
  __isset = other2815.__isset;
  return *this;
}
void TDDITerminologyPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyPackageUnion(";
  out << "TerminologyPackage="; (__isset.TerminologyPackage ? (out << to_string(TerminologyPackage)) : (out << "<null>"));
  out << ", " << "TerminologyPackageBinding="; (__isset.TerminologyPackageBinding ? (out << to_string(TerminologyPackageBinding)) : (out << "<null>"));
  out << ", " << "TerminologyPackageInterface="; (__isset.TerminologyPackageInterface ? (out << to_string(TerminologyPackageInterface)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractTerminologyPackage::~TDDIAbstractTerminologyPackage() throw() {
}


void TDDIAbstractTerminologyPackage::__set_UsedTerminologyPackage(const TDDITerminologyPackageUnion& val) {
  this->UsedTerminologyPackage = val;
}

void TDDIAbstractTerminologyPackage::__set_UsedTerminologyPackageType(const TDDITerminologyPackageUnionType val) {
  this->UsedTerminologyPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractTerminologyPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedTerminologyPackage.read(iprot);
          this->__isset.UsedTerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2816;
          xfer += iprot->readI32(ecast2816);
          this->UsedTerminologyPackageType = (TDDITerminologyPackageUnionType)ecast2816;
          this->__isset.UsedTerminologyPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractTerminologyPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractTerminologyPackage");

  xfer += oprot->writeFieldBegin("UsedTerminologyPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedTerminologyPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedTerminologyPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedTerminologyPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractTerminologyPackage &a, TDDIAbstractTerminologyPackage &b) {
  using ::std::swap;
  swap(a.UsedTerminologyPackage, b.UsedTerminologyPackage);
  swap(a.UsedTerminologyPackageType, b.UsedTerminologyPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractTerminologyPackage::TDDIAbstractTerminologyPackage(const TDDIAbstractTerminologyPackage& other2817) {
  UsedTerminologyPackage = other2817.UsedTerminologyPackage;
  UsedTerminologyPackageType = other2817.UsedTerminologyPackageType;
  __isset = other2817.__isset;
}
TDDIAbstractTerminologyPackage& TDDIAbstractTerminologyPackage::operator=(const TDDIAbstractTerminologyPackage& other2818) {
  UsedTerminologyPackage = other2818.UsedTerminologyPackage;
  UsedTerminologyPackageType = other2818.UsedTerminologyPackageType;
  __isset = other2818.__isset;
  return *this;
}
void TDDIAbstractTerminologyPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractTerminologyPackage(";
  out << "UsedTerminologyPackage=" << to_string(UsedTerminologyPackage);
  out << ", " << "UsedTerminologyPackageType=" << to_string(UsedTerminologyPackageType);
  out << ")";
}


TDDITerminologyPackage::~TDDITerminologyPackage() throw() {
}


void TDDITerminologyPackage::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerminologyPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerminologyPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerminologyPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerminologyPackage::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerminologyPackage::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerminologyPackage::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerminologyPackage::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerminologyPackage::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerminologyPackage::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerminologyPackage::__set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val) {
  this->TerminologyElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2819;
            ::apache::thrift::protocol::TType _etype2822;
            xfer += iprot->readListBegin(_etype2822, _size2819);
            this->ImplementationConstraint.resize(_size2819);
            uint32_t _i2823;
            for (_i2823 = 0; _i2823 < _size2819; ++_i2823)
            {
              xfer += this->ImplementationConstraint[_i2823].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2824;
            ::apache::thrift::protocol::TType _etype2827;
            xfer += iprot->readListBegin(_etype2827, _size2824);
            this->Note.resize(_size2824);
            uint32_t _i2828;
            for (_i2828 = 0; _i2828 < _size2824; ++_i2828)
            {
              xfer += this->Note[_i2828].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2829;
            ::apache::thrift::protocol::TType _etype2832;
            xfer += iprot->readListBegin(_etype2832, _size2829);
            this->TaggedValue.resize(_size2829);
            uint32_t _i2833;
            for (_i2833 = 0; _i2833 < _size2829; ++_i2833)
            {
              xfer += this->TaggedValue[_i2833].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyElement.clear();
            uint32_t _size2834;
            ::apache::thrift::protocol::TType _etype2837;
            xfer += iprot->readListBegin(_etype2837, _size2834);
            this->TerminologyElement.resize(_size2834);
            uint32_t _i2838;
            for (_i2838 = 0; _i2838 < _size2834; ++_i2838)
            {
              xfer += this->TerminologyElement[_i2838].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyPackage");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2839;
    for (_iter2839 = this->ImplementationConstraint.begin(); _iter2839 != this->ImplementationConstraint.end(); ++_iter2839)
    {
      xfer += (*_iter2839).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2840;
    for (_iter2840 = this->Note.begin(); _iter2840 != this->Note.end(); ++_iter2840)
    {
      xfer += (*_iter2840).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2841;
    for (_iter2841 = this->TaggedValue.begin(); _iter2841 != this->TaggedValue.end(); ++_iter2841)
    {
      xfer += (*_iter2841).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyElement.size()));
    std::vector<TDDIAbstractTerminologyElement> ::const_iterator _iter2842;
    for (_iter2842 = this->TerminologyElement.begin(); _iter2842 != this->TerminologyElement.end(); ++_iter2842)
    {
      xfer += (*_iter2842).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyPackage &a, TDDITerminologyPackage &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.__isset, b.__isset);
}

TDDITerminologyPackage::TDDITerminologyPackage(const TDDITerminologyPackage& other2843) {
  Gid = other2843.Gid;
  IsCitation = other2843.IsCitation;
  IsAbstract = other2843.IsAbstract;
  CitedElement = other2843.CitedElement;
  AbstractForm = other2843.AbstractForm;
  Name = other2843.Name;
  Description = other2843.Description;
  ImplementationConstraint = other2843.ImplementationConstraint;
  Note = other2843.Note;
  TaggedValue = other2843.TaggedValue;
  TerminologyElement = other2843.TerminologyElement;
  __isset = other2843.__isset;
}
TDDITerminologyPackage& TDDITerminologyPackage::operator=(const TDDITerminologyPackage& other2844) {
  Gid = other2844.Gid;
  IsCitation = other2844.IsCitation;
  IsAbstract = other2844.IsAbstract;
  CitedElement = other2844.CitedElement;
  AbstractForm = other2844.AbstractForm;
  Name = other2844.Name;
  Description = other2844.Description;
  ImplementationConstraint = other2844.ImplementationConstraint;
  Note = other2844.Note;
  TaggedValue = other2844.TaggedValue;
  TerminologyElement = other2844.TerminologyElement;
  __isset = other2844.__isset;
  return *this;
}
void TDDITerminologyPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyPackage(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "TerminologyElement=" << to_string(TerminologyElement);
  out << ")";
}


TDDITerminologyPackageBinding::~TDDITerminologyPackageBinding() throw() {
}


void TDDITerminologyPackageBinding::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerminologyPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerminologyPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerminologyPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerminologyPackageBinding::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerminologyPackageBinding::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerminologyPackageBinding::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerminologyPackageBinding::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerminologyPackageBinding::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerminologyPackageBinding::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerminologyPackageBinding::__set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val) {
  this->TerminologyElement = val;
}

void TDDITerminologyPackageBinding::__set_ParticipantPackage(const std::vector<TDDIAbstractTerminologyPackage> & val) {
  this->ParticipantPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2845;
            ::apache::thrift::protocol::TType _etype2848;
            xfer += iprot->readListBegin(_etype2848, _size2845);
            this->ImplementationConstraint.resize(_size2845);
            uint32_t _i2849;
            for (_i2849 = 0; _i2849 < _size2845; ++_i2849)
            {
              xfer += this->ImplementationConstraint[_i2849].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2850;
            ::apache::thrift::protocol::TType _etype2853;
            xfer += iprot->readListBegin(_etype2853, _size2850);
            this->Note.resize(_size2850);
            uint32_t _i2854;
            for (_i2854 = 0; _i2854 < _size2850; ++_i2854)
            {
              xfer += this->Note[_i2854].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2855;
            ::apache::thrift::protocol::TType _etype2858;
            xfer += iprot->readListBegin(_etype2858, _size2855);
            this->TaggedValue.resize(_size2855);
            uint32_t _i2859;
            for (_i2859 = 0; _i2859 < _size2855; ++_i2859)
            {
              xfer += this->TaggedValue[_i2859].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyElement.clear();
            uint32_t _size2860;
            ::apache::thrift::protocol::TType _etype2863;
            xfer += iprot->readListBegin(_etype2863, _size2860);
            this->TerminologyElement.resize(_size2860);
            uint32_t _i2864;
            for (_i2864 = 0; _i2864 < _size2860; ++_i2864)
            {
              xfer += this->TerminologyElement[_i2864].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackage.clear();
            uint32_t _size2865;
            ::apache::thrift::protocol::TType _etype2868;
            xfer += iprot->readListBegin(_etype2868, _size2865);
            this->ParticipantPackage.resize(_size2865);
            uint32_t _i2869;
            for (_i2869 = 0; _i2869 < _size2865; ++_i2869)
            {
              xfer += this->ParticipantPackage[_i2869].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyPackageBinding");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2870;
    for (_iter2870 = this->ImplementationConstraint.begin(); _iter2870 != this->ImplementationConstraint.end(); ++_iter2870)
    {
      xfer += (*_iter2870).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2871;
    for (_iter2871 = this->Note.begin(); _iter2871 != this->Note.end(); ++_iter2871)
    {
      xfer += (*_iter2871).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2872;
    for (_iter2872 = this->TaggedValue.begin(); _iter2872 != this->TaggedValue.end(); ++_iter2872)
    {
      xfer += (*_iter2872).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyElement.size()));
    std::vector<TDDIAbstractTerminologyElement> ::const_iterator _iter2873;
    for (_iter2873 = this->TerminologyElement.begin(); _iter2873 != this->TerminologyElement.end(); ++_iter2873)
    {
      xfer += (*_iter2873).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackage", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackage.size()));
    std::vector<TDDIAbstractTerminologyPackage> ::const_iterator _iter2874;
    for (_iter2874 = this->ParticipantPackage.begin(); _iter2874 != this->ParticipantPackage.end(); ++_iter2874)
    {
      xfer += (*_iter2874).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyPackageBinding &a, TDDITerminologyPackageBinding &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.ParticipantPackage, b.ParticipantPackage);
  swap(a.__isset, b.__isset);
}

TDDITerminologyPackageBinding::TDDITerminologyPackageBinding(const TDDITerminologyPackageBinding& other2875) {
  Gid = other2875.Gid;
  IsCitation = other2875.IsCitation;
  IsAbstract = other2875.IsAbstract;
  CitedElement = other2875.CitedElement;
  AbstractForm = other2875.AbstractForm;
  Name = other2875.Name;
  Description = other2875.Description;
  ImplementationConstraint = other2875.ImplementationConstraint;
  Note = other2875.Note;
  TaggedValue = other2875.TaggedValue;
  TerminologyElement = other2875.TerminologyElement;
  ParticipantPackage = other2875.ParticipantPackage;
  __isset = other2875.__isset;
}
TDDITerminologyPackageBinding& TDDITerminologyPackageBinding::operator=(const TDDITerminologyPackageBinding& other2876) {
  Gid = other2876.Gid;
  IsCitation = other2876.IsCitation;
  IsAbstract = other2876.IsAbstract;
  CitedElement = other2876.CitedElement;
  AbstractForm = other2876.AbstractForm;
  Name = other2876.Name;
  Description = other2876.Description;
  ImplementationConstraint = other2876.ImplementationConstraint;
  Note = other2876.Note;
  TaggedValue = other2876.TaggedValue;
  TerminologyElement = other2876.TerminologyElement;
  ParticipantPackage = other2876.ParticipantPackage;
  __isset = other2876.__isset;
  return *this;
}
void TDDITerminologyPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyPackageBinding(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "TerminologyElement=" << to_string(TerminologyElement);
  out << ", " << "ParticipantPackage=" << to_string(ParticipantPackage);
  out << ")";
}


TDDITerminologyPackageInterface::~TDDITerminologyPackageInterface() throw() {
}


void TDDITerminologyPackageInterface::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerminologyPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerminologyPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerminologyPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerminologyPackageInterface::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerminologyPackageInterface::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerminologyPackageInterface::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerminologyPackageInterface::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerminologyPackageInterface::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerminologyPackageInterface::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerminologyPackageInterface::__set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val) {
  this->TerminologyElement = val;
}

void TDDITerminologyPackageInterface::__set_Implements(const TDDIAbstractTerminologyPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2877;
            ::apache::thrift::protocol::TType _etype2880;
            xfer += iprot->readListBegin(_etype2880, _size2877);
            this->ImplementationConstraint.resize(_size2877);
            uint32_t _i2881;
            for (_i2881 = 0; _i2881 < _size2877; ++_i2881)
            {
              xfer += this->ImplementationConstraint[_i2881].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2882;
            ::apache::thrift::protocol::TType _etype2885;
            xfer += iprot->readListBegin(_etype2885, _size2882);
            this->Note.resize(_size2882);
            uint32_t _i2886;
            for (_i2886 = 0; _i2886 < _size2882; ++_i2886)
            {
              xfer += this->Note[_i2886].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2887;
            ::apache::thrift::protocol::TType _etype2890;
            xfer += iprot->readListBegin(_etype2890, _size2887);
            this->TaggedValue.resize(_size2887);
            uint32_t _i2891;
            for (_i2891 = 0; _i2891 < _size2887; ++_i2891)
            {
              xfer += this->TaggedValue[_i2891].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyElement.clear();
            uint32_t _size2892;
            ::apache::thrift::protocol::TType _etype2895;
            xfer += iprot->readListBegin(_etype2895, _size2892);
            this->TerminologyElement.resize(_size2892);
            uint32_t _i2896;
            for (_i2896 = 0; _i2896 < _size2892; ++_i2896)
            {
              xfer += this->TerminologyElement[_i2896].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyPackageInterface");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2897;
    for (_iter2897 = this->ImplementationConstraint.begin(); _iter2897 != this->ImplementationConstraint.end(); ++_iter2897)
    {
      xfer += (*_iter2897).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2898;
    for (_iter2898 = this->Note.begin(); _iter2898 != this->Note.end(); ++_iter2898)
    {
      xfer += (*_iter2898).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2899;
    for (_iter2899 = this->TaggedValue.begin(); _iter2899 != this->TaggedValue.end(); ++_iter2899)
    {
      xfer += (*_iter2899).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyElement.size()));
    std::vector<TDDIAbstractTerminologyElement> ::const_iterator _iter2900;
    for (_iter2900 = this->TerminologyElement.begin(); _iter2900 != this->TerminologyElement.end(); ++_iter2900)
    {
      xfer += (*_iter2900).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyPackageInterface &a, TDDITerminologyPackageInterface &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDITerminologyPackageInterface::TDDITerminologyPackageInterface(const TDDITerminologyPackageInterface& other2901) {
  Gid = other2901.Gid;
  IsCitation = other2901.IsCitation;
  IsAbstract = other2901.IsAbstract;
  CitedElement = other2901.CitedElement;
  AbstractForm = other2901.AbstractForm;
  Name = other2901.Name;
  Description = other2901.Description;
  ImplementationConstraint = other2901.ImplementationConstraint;
  Note = other2901.Note;
  TaggedValue = other2901.TaggedValue;
  TerminologyElement = other2901.TerminologyElement;
  Implements = other2901.Implements;
  __isset = other2901.__isset;
}
TDDITerminologyPackageInterface& TDDITerminologyPackageInterface::operator=(const TDDITerminologyPackageInterface& other2902) {
  Gid = other2902.Gid;
  IsCitation = other2902.IsCitation;
  IsAbstract = other2902.IsAbstract;
  CitedElement = other2902.CitedElement;
  AbstractForm = other2902.AbstractForm;
  Name = other2902.Name;
  Description = other2902.Description;
  ImplementationConstraint = other2902.ImplementationConstraint;
  Note = other2902.Note;
  TaggedValue = other2902.TaggedValue;
  TerminologyElement = other2902.TerminologyElement;
  Implements = other2902.Implements;
  __isset = other2902.__isset;
  return *this;
}
void TDDITerminologyPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyPackageInterface(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "TerminologyElement=" << to_string(TerminologyElement);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDICategory::~TDDICategory() throw() {
}


void TDDICategory::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDICategory::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDICategory::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDICategory::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDICategory::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDICategory::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDICategory::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDICategory::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDICategory::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDICategory::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}
std::ostream& operator<<(std::ostream& out, const TDDICategory& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDICategory::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2903;
            ::apache::thrift::protocol::TType _etype2906;
            xfer += iprot->readListBegin(_etype2906, _size2903);
            this->ImplementationConstraint.resize(_size2903);
            uint32_t _i2907;
            for (_i2907 = 0; _i2907 < _size2903; ++_i2907)
            {
              xfer += this->ImplementationConstraint[_i2907].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2908;
            ::apache::thrift::protocol::TType _etype2911;
            xfer += iprot->readListBegin(_etype2911, _size2908);
            this->Note.resize(_size2908);
            uint32_t _i2912;
            for (_i2912 = 0; _i2912 < _size2908; ++_i2912)
            {
              xfer += this->Note[_i2912].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2913;
            ::apache::thrift::protocol::TType _etype2916;
            xfer += iprot->readListBegin(_etype2916, _size2913);
            this->TaggedValue.resize(_size2913);
            uint32_t _i2917;
            for (_i2917 = 0; _i2917 < _size2913; ++_i2917)
            {
              xfer += this->TaggedValue[_i2917].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDICategory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDICategory");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2918;
    for (_iter2918 = this->ImplementationConstraint.begin(); _iter2918 != this->ImplementationConstraint.end(); ++_iter2918)
    {
      xfer += (*_iter2918).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2919;
    for (_iter2919 = this->Note.begin(); _iter2919 != this->Note.end(); ++_iter2919)
    {
      xfer += (*_iter2919).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2920;
    for (_iter2920 = this->TaggedValue.begin(); _iter2920 != this->TaggedValue.end(); ++_iter2920)
    {
      xfer += (*_iter2920).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDICategory &a, TDDICategory &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.__isset, b.__isset);
}

TDDICategory::TDDICategory(const TDDICategory& other2921) {
  Gid = other2921.Gid;
  IsCitation = other2921.IsCitation;
  IsAbstract = other2921.IsAbstract;
  CitedElement = other2921.CitedElement;
  AbstractForm = other2921.AbstractForm;
  Name = other2921.Name;
  Description = other2921.Description;
  ImplementationConstraint = other2921.ImplementationConstraint;
  Note = other2921.Note;
  TaggedValue = other2921.TaggedValue;
  __isset = other2921.__isset;
}
TDDICategory& TDDICategory::operator=(const TDDICategory& other2922) {
  Gid = other2922.Gid;
  IsCitation = other2922.IsCitation;
  IsAbstract = other2922.IsAbstract;
  CitedElement = other2922.CitedElement;
  AbstractForm = other2922.AbstractForm;
  Name = other2922.Name;
  Description = other2922.Description;
  ImplementationConstraint = other2922.ImplementationConstraint;
  Note = other2922.Note;
  TaggedValue = other2922.TaggedValue;
  __isset = other2922.__isset;
  return *this;
}
void TDDICategory::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDICategory(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ")";
}


TDDIExpression::~TDDIExpression() throw() {
}


void TDDIExpression::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIExpression::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIExpression::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIExpression::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIExpression::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIExpression::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIExpression::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIExpression::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIExpression::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIExpression::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIExpression::__set_Value(const std::string& val) {
  this->Value = val;
}

void TDDIExpression::__set_Category(const TDDICategory& val) {
  this->Category = val;
}

void TDDIExpression::__set_Element(const std::vector<TDDIAbstractExpressionElementRef> & val) {
  this->Element = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIExpression& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIExpression::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2923;
            ::apache::thrift::protocol::TType _etype2926;
            xfer += iprot->readListBegin(_etype2926, _size2923);
            this->ImplementationConstraint.resize(_size2923);
            uint32_t _i2927;
            for (_i2927 = 0; _i2927 < _size2923; ++_i2927)
            {
              xfer += this->ImplementationConstraint[_i2927].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2928;
            ::apache::thrift::protocol::TType _etype2931;
            xfer += iprot->readListBegin(_etype2931, _size2928);
            this->Note.resize(_size2928);
            uint32_t _i2932;
            for (_i2932 = 0; _i2932 < _size2928; ++_i2932)
            {
              xfer += this->Note[_i2932].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2933;
            ::apache::thrift::protocol::TType _etype2936;
            xfer += iprot->readListBegin(_etype2936, _size2933);
            this->TaggedValue.resize(_size2933);
            uint32_t _i2937;
            for (_i2937 = 0; _i2937 < _size2933; ++_i2937)
            {
              xfer += this->TaggedValue[_i2937].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Category.read(iprot);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Element.clear();
            uint32_t _size2938;
            ::apache::thrift::protocol::TType _etype2941;
            xfer += iprot->readListBegin(_etype2941, _size2938);
            this->Element.resize(_size2938);
            uint32_t _i2942;
            for (_i2942 = 0; _i2942 < _size2938; ++_i2942)
            {
              xfer += this->Element[_i2942].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Element = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIExpression::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIExpression");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2943;
    for (_iter2943 = this->ImplementationConstraint.begin(); _iter2943 != this->ImplementationConstraint.end(); ++_iter2943)
    {
      xfer += (*_iter2943).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2944;
    for (_iter2944 = this->Note.begin(); _iter2944 != this->Note.end(); ++_iter2944)
    {
      xfer += (*_iter2944).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2945;
    for (_iter2945 = this->TaggedValue.begin(); _iter2945 != this->TaggedValue.end(); ++_iter2945)
    {
      xfer += (*_iter2945).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Category.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Element", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Element.size()));
    std::vector<TDDIAbstractExpressionElementRef> ::const_iterator _iter2946;
    for (_iter2946 = this->Element.begin(); _iter2946 != this->Element.end(); ++_iter2946)
    {
      xfer += (*_iter2946).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIExpression &a, TDDIExpression &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Value, b.Value);
  swap(a.Category, b.Category);
  swap(a.Element, b.Element);
  swap(a.__isset, b.__isset);
}

TDDIExpression::TDDIExpression(const TDDIExpression& other2947) {
  Gid = other2947.Gid;
  IsCitation = other2947.IsCitation;
  IsAbstract = other2947.IsAbstract;
  CitedElement = other2947.CitedElement;
  AbstractForm = other2947.AbstractForm;
  Name = other2947.Name;
  Description = other2947.Description;
  ImplementationConstraint = other2947.ImplementationConstraint;
  Note = other2947.Note;
  TaggedValue = other2947.TaggedValue;
  Value = other2947.Value;
  Category = other2947.Category;
  Element = other2947.Element;
  __isset = other2947.__isset;
}
TDDIExpression& TDDIExpression::operator=(const TDDIExpression& other2948) {
  Gid = other2948.Gid;
  IsCitation = other2948.IsCitation;
  IsAbstract = other2948.IsAbstract;
  CitedElement = other2948.CitedElement;
  AbstractForm = other2948.AbstractForm;
  Name = other2948.Name;
  Description = other2948.Description;
  ImplementationConstraint = other2948.ImplementationConstraint;
  Note = other2948.Note;
  TaggedValue = other2948.TaggedValue;
  Value = other2948.Value;
  Category = other2948.Category;
  Element = other2948.Element;
  __isset = other2948.__isset;
  return *this;
}
void TDDIExpression::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIExpression(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "Element=" << to_string(Element);
  out << ")";
}


TDDITerm::~TDDITerm() throw() {
}


void TDDITerm::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerm::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerm::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerm::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerm::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerm::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerm::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerm::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerm::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerm::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerm::__set_Value(const std::string& val) {
  this->Value = val;
}

void TDDITerm::__set_Category(const TDDICategory& val) {
  this->Category = val;
}

void TDDITerm::__set_ExternalReference(const std::string& val) {
  this->ExternalReference = val;
}

void TDDITerm::__set_Origin(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> val) {
  this->Origin = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerm& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerm::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2949;
            ::apache::thrift::protocol::TType _etype2952;
            xfer += iprot->readListBegin(_etype2952, _size2949);
            this->ImplementationConstraint.resize(_size2949);
            uint32_t _i2953;
            for (_i2953 = 0; _i2953 < _size2949; ++_i2953)
            {
              xfer += this->ImplementationConstraint[_i2953].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2954;
            ::apache::thrift::protocol::TType _etype2957;
            xfer += iprot->readListBegin(_etype2957, _size2954);
            this->Note.resize(_size2954);
            uint32_t _i2958;
            for (_i2958 = 0; _i2958 < _size2954; ++_i2958)
            {
              xfer += this->Note[_i2958].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2959;
            ::apache::thrift::protocol::TType _etype2962;
            xfer += iprot->readListBegin(_etype2962, _size2959);
            this->TaggedValue.resize(_size2959);
            uint32_t _i2963;
            for (_i2963 = 0; _i2963 < _size2959; ++_i2963)
            {
              xfer += this->TaggedValue[_i2963].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Category.read(iprot);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ExternalReference);
          this->__isset.ExternalReference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Origin) { 
            this->Origin = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement>(new TDDIAbstractModelElement);
          }
          xfer += this->Origin->read(iprot);
          bool wasSet = false;
          if (this->Origin->__isset.UsedModelElement) { wasSet = true; }
          if (this->Origin->__isset.UsedModelElementType) { wasSet = true; }
          if (!wasSet) { this->Origin.reset(); }
          this->__isset.Origin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerm");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2964;
    for (_iter2964 = this->ImplementationConstraint.begin(); _iter2964 != this->ImplementationConstraint.end(); ++_iter2964)
    {
      xfer += (*_iter2964).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2965;
    for (_iter2965 = this->Note.begin(); _iter2965 != this->Note.end(); ++_iter2965)
    {
      xfer += (*_iter2965).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2966;
    for (_iter2966 = this->TaggedValue.begin(); _iter2966 != this->TaggedValue.end(); ++_iter2966)
    {
      xfer += (*_iter2966).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Category.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExternalReference", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->ExternalReference);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Origin", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->Origin) {
    xfer += this->Origin->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractModelElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerm &a, TDDITerm &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Value, b.Value);
  swap(a.Category, b.Category);
  swap(a.ExternalReference, b.ExternalReference);
  swap(a.Origin, b.Origin);
  swap(a.__isset, b.__isset);
}

TDDITerm::TDDITerm(const TDDITerm& other2967) {
  Gid = other2967.Gid;
  IsCitation = other2967.IsCitation;
  IsAbstract = other2967.IsAbstract;
  CitedElement = other2967.CitedElement;
  AbstractForm = other2967.AbstractForm;
  Name = other2967.Name;
  Description = other2967.Description;
  ImplementationConstraint = other2967.ImplementationConstraint;
  Note = other2967.Note;
  TaggedValue = other2967.TaggedValue;
  Value = other2967.Value;
  Category = other2967.Category;
  ExternalReference = other2967.ExternalReference;
  Origin = other2967.Origin;
  __isset = other2967.__isset;
}
TDDITerm& TDDITerm::operator=(const TDDITerm& other2968) {
  Gid = other2968.Gid;
  IsCitation = other2968.IsCitation;
  IsAbstract = other2968.IsAbstract;
  CitedElement = other2968.CitedElement;
  AbstractForm = other2968.AbstractForm;
  Name = other2968.Name;
  Description = other2968.Description;
  ImplementationConstraint = other2968.ImplementationConstraint;
  Note = other2968.Note;
  TaggedValue = other2968.TaggedValue;
  Value = other2968.Value;
  Category = other2968.Category;
  ExternalReference = other2968.ExternalReference;
  Origin = other2968.Origin;
  __isset = other2968.__isset;
  return *this;
}
void TDDITerm::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerm(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "ExternalReference=" << to_string(ExternalReference);
  out << ", " << "Origin=" << to_string(Origin);
  out << ")";
}


TDDIExpressionElementUnion::~TDDIExpressionElementUnion() throw() {
}


void TDDIExpressionElementUnion::__set_Expression(const TDDIExpression& val) {
  this->Expression = val;
__isset.Expression = true;
}

void TDDIExpressionElementUnion::__set_Term(const TDDITerm& val) {
  this->Term = val;
__isset.Term = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIExpressionElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIExpressionElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Expression.read(iprot);
          this->__isset.Expression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Term.read(iprot);
          this->__isset.Term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIExpressionElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIExpressionElementUnion");

  if (this->__isset.Expression) {
    xfer += oprot->writeFieldBegin("Expression", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Expression.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Term) {
    xfer += oprot->writeFieldBegin("Term", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->Term.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIExpressionElementUnion &a, TDDIExpressionElementUnion &b) {
  using ::std::swap;
  swap(a.Expression, b.Expression);
  swap(a.Term, b.Term);
  swap(a.__isset, b.__isset);
}

TDDIExpressionElementUnion::TDDIExpressionElementUnion(const TDDIExpressionElementUnion& other2969) {
  Expression = other2969.Expression;
  Term = other2969.Term;
  __isset = other2969.__isset;
}
TDDIExpressionElementUnion& TDDIExpressionElementUnion::operator=(const TDDIExpressionElementUnion& other2970) {
  Expression = other2970.Expression;
  Term = other2970.Term;
  __isset = other2970.__isset;
  return *this;
}
void TDDIExpressionElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIExpressionElementUnion(";
  out << "Expression="; (__isset.Expression ? (out << to_string(Expression)) : (out << "<null>"));
  out << ", " << "Term="; (__isset.Term ? (out << to_string(Term)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractExpressionElement::~TDDIAbstractExpressionElement() throw() {
}


void TDDIAbstractExpressionElement::__set_UsedExpressionElement(const TDDIExpressionElementUnion& val) {
  this->UsedExpressionElement = val;
}

void TDDIAbstractExpressionElement::__set_UsedExpressionElementType(const TDDIExpressionElementUnionType val) {
  this->UsedExpressionElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractExpressionElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractExpressionElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedExpressionElement.read(iprot);
          this->__isset.UsedExpressionElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2971;
          xfer += iprot->readI32(ecast2971);
          this->UsedExpressionElementType = (TDDIExpressionElementUnionType)ecast2971;
          this->__isset.UsedExpressionElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractExpressionElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractExpressionElement");

  xfer += oprot->writeFieldBegin("UsedExpressionElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedExpressionElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedExpressionElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedExpressionElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractExpressionElement &a, TDDIAbstractExpressionElement &b) {
  using ::std::swap;
  swap(a.UsedExpressionElement, b.UsedExpressionElement);
  swap(a.UsedExpressionElementType, b.UsedExpressionElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractExpressionElement::TDDIAbstractExpressionElement(const TDDIAbstractExpressionElement& other2972) {
  UsedExpressionElement = other2972.UsedExpressionElement;
  UsedExpressionElementType = other2972.UsedExpressionElementType;
  __isset = other2972.__isset;
}
TDDIAbstractExpressionElement& TDDIAbstractExpressionElement::operator=(const TDDIAbstractExpressionElement& other2973) {
  UsedExpressionElement = other2973.UsedExpressionElement;
  UsedExpressionElementType = other2973.UsedExpressionElementType;
  __isset = other2973.__isset;
  return *this;
}
void TDDIAbstractExpressionElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractExpressionElement(";
  out << "UsedExpressionElement=" << to_string(UsedExpressionElement);
  out << ", " << "UsedExpressionElementType=" << to_string(UsedExpressionElementType);
  out << ")";
}


TDDITerminologyAssetUnion::~TDDITerminologyAssetUnion() throw() {
}


void TDDITerminologyAssetUnion::__set_Category(const TDDICategory& val) {
  this->Category = val;
__isset.Category = true;
}

void TDDITerminologyAssetUnion::__set_ExpressionElement(const TDDIAbstractExpressionElement& val) {
  this->ExpressionElement = val;
__isset.ExpressionElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyAssetUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyAssetUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Category.read(iprot);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ExpressionElement.read(iprot);
          this->__isset.ExpressionElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyAssetUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyAssetUnion");

  if (this->__isset.Category) {
    xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->Category.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ExpressionElement) {
    xfer += oprot->writeFieldBegin("ExpressionElement", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ExpressionElement.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyAssetUnion &a, TDDITerminologyAssetUnion &b) {
  using ::std::swap;
  swap(a.Category, b.Category);
  swap(a.ExpressionElement, b.ExpressionElement);
  swap(a.__isset, b.__isset);
}

TDDITerminologyAssetUnion::TDDITerminologyAssetUnion(const TDDITerminologyAssetUnion& other2974) {
  Category = other2974.Category;
  ExpressionElement = other2974.ExpressionElement;
  __isset = other2974.__isset;
}
TDDITerminologyAssetUnion& TDDITerminologyAssetUnion::operator=(const TDDITerminologyAssetUnion& other2975) {
  Category = other2975.Category;
  ExpressionElement = other2975.ExpressionElement;
  __isset = other2975.__isset;
  return *this;
}
void TDDITerminologyAssetUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyAssetUnion(";
  out << "Category="; (__isset.Category ? (out << to_string(Category)) : (out << "<null>"));
  out << ", " << "ExpressionElement="; (__isset.ExpressionElement ? (out << to_string(ExpressionElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractTerminologyAsset::~TDDIAbstractTerminologyAsset() throw() {
}


void TDDIAbstractTerminologyAsset::__set_UsedTerminologyAsset(const TDDITerminologyAssetUnion& val) {
  this->UsedTerminologyAsset = val;
}

void TDDIAbstractTerminologyAsset::__set_UsedTerminologyAssetType(const TDDITerminologyAssetUnionType val) {
  this->UsedTerminologyAssetType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyAsset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractTerminologyAsset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedTerminologyAsset.read(iprot);
          this->__isset.UsedTerminologyAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2976;
          xfer += iprot->readI32(ecast2976);
          this->UsedTerminologyAssetType = (TDDITerminologyAssetUnionType)ecast2976;
          this->__isset.UsedTerminologyAssetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractTerminologyAsset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractTerminologyAsset");

  xfer += oprot->writeFieldBegin("UsedTerminologyAsset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedTerminologyAsset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedTerminologyAssetType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedTerminologyAssetType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractTerminologyAsset &a, TDDIAbstractTerminologyAsset &b) {
  using ::std::swap;
  swap(a.UsedTerminologyAsset, b.UsedTerminologyAsset);
  swap(a.UsedTerminologyAssetType, b.UsedTerminologyAssetType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractTerminologyAsset::TDDIAbstractTerminologyAsset(const TDDIAbstractTerminologyAsset& other2977) {
  UsedTerminologyAsset = other2977.UsedTerminologyAsset;
  UsedTerminologyAssetType = other2977.UsedTerminologyAssetType;
  __isset = other2977.__isset;
}
TDDIAbstractTerminologyAsset& TDDIAbstractTerminologyAsset::operator=(const TDDIAbstractTerminologyAsset& other2978) {
  UsedTerminologyAsset = other2978.UsedTerminologyAsset;
  UsedTerminologyAssetType = other2978.UsedTerminologyAssetType;
  __isset = other2978.__isset;
  return *this;
}
void TDDIAbstractTerminologyAsset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractTerminologyAsset(";
  out << "UsedTerminologyAsset=" << to_string(UsedTerminologyAsset);
  out << ", " << "UsedTerminologyAssetType=" << to_string(UsedTerminologyAssetType);
  out << ")";
}


TDDIValidationResult::~TDDIValidationResult() throw() {
}


void TDDIValidationResult::__set_ValidationViolationOccurred(const bool val) {
  this->ValidationViolationOccurred = val;
}

void TDDIValidationResult::__set_ValidationViolationMessages(const std::vector<TDDIValidationViolationMessage> & val) {
  this->ValidationViolationMessages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIValidationResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIValidationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ValidationViolationOccurred);
          this->__isset.ValidationViolationOccurred = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ValidationViolationMessages.clear();
            uint32_t _size2979;
            ::apache::thrift::protocol::TType _etype2982;
            xfer += iprot->readListBegin(_etype2982, _size2979);
            this->ValidationViolationMessages.resize(_size2979);
            uint32_t _i2983;
            for (_i2983 = 0; _i2983 < _size2979; ++_i2983)
            {
              xfer += this->ValidationViolationMessages[_i2983].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ValidationViolationMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIValidationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIValidationResult");

  xfer += oprot->writeFieldBegin("ValidationViolationOccurred", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ValidationViolationOccurred);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ValidationViolationMessages", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ValidationViolationMessages.size()));
    std::vector<TDDIValidationViolationMessage> ::const_iterator _iter2984;
    for (_iter2984 = this->ValidationViolationMessages.begin(); _iter2984 != this->ValidationViolationMessages.end(); ++_iter2984)
    {
      xfer += (*_iter2984).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIValidationResult &a, TDDIValidationResult &b) {
  using ::std::swap;
  swap(a.ValidationViolationOccurred, b.ValidationViolationOccurred);
  swap(a.ValidationViolationMessages, b.ValidationViolationMessages);
  swap(a.__isset, b.__isset);
}

TDDIValidationResult::TDDIValidationResult(const TDDIValidationResult& other2985) {
  ValidationViolationOccurred = other2985.ValidationViolationOccurred;
  ValidationViolationMessages = other2985.ValidationViolationMessages;
  __isset = other2985.__isset;
}
TDDIValidationResult& TDDIValidationResult::operator=(const TDDIValidationResult& other2986) {
  ValidationViolationOccurred = other2986.ValidationViolationOccurred;
  ValidationViolationMessages = other2986.ValidationViolationMessages;
  __isset = other2986.__isset;
  return *this;
}
void TDDIValidationResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIValidationResult(";
  out << "ValidationViolationOccurred=" << to_string(ValidationViolationOccurred);
  out << ", " << "ValidationViolationMessages=" << to_string(ValidationViolationMessages);
  out << ")";
}


TDDIValidationViolationMessage::~TDDIValidationViolationMessage() throw() {
}


void TDDIValidationViolationMessage::__set_Context(const std::string& val) {
  this->Context = val;
}

void TDDIValidationViolationMessage::__set_Message(const std::string& val) {
  this->Message = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIValidationViolationMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIValidationViolationMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Context);
          this->__isset.Context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Message);
          this->__isset.Message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIValidationViolationMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIValidationViolationMessage");

  xfer += oprot->writeFieldBegin("Context", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Context);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIValidationViolationMessage &a, TDDIValidationViolationMessage &b) {
  using ::std::swap;
  swap(a.Context, b.Context);
  swap(a.Message, b.Message);
  swap(a.__isset, b.__isset);
}

TDDIValidationViolationMessage::TDDIValidationViolationMessage(const TDDIValidationViolationMessage& other2987) {
  Context = other2987.Context;
  Message = other2987.Message;
  __isset = other2987.__isset;
}
TDDIValidationViolationMessage& TDDIValidationViolationMessage::operator=(const TDDIValidationViolationMessage& other2988) {
  Context = other2988.Context;
  Message = other2988.Message;
  __isset = other2988.__isset;
  return *this;
}
void TDDIValidationViolationMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIValidationViolationMessage(";
  out << "Context=" << to_string(Context);
  out << ", " << "Message=" << to_string(Message);
  out << ")";
}


TDDIValidationFailedException::~TDDIValidationFailedException() throw() {
}


void TDDIValidationFailedException::__set_ValidationResult(const TDDIValidationResult& val) {
  this->ValidationResult = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIValidationFailedException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIValidationFailedException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ValidationResult.read(iprot);
          this->__isset.ValidationResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIValidationFailedException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIValidationFailedException");

  xfer += oprot->writeFieldBegin("ValidationResult", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ValidationResult.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIValidationFailedException &a, TDDIValidationFailedException &b) {
  using ::std::swap;
  swap(a.ValidationResult, b.ValidationResult);
  swap(a.__isset, b.__isset);
}

TDDIValidationFailedException::TDDIValidationFailedException(const TDDIValidationFailedException& other2989) : TException() {
  ValidationResult = other2989.ValidationResult;
  __isset = other2989.__isset;
}
TDDIValidationFailedException& TDDIValidationFailedException::operator=(const TDDIValidationFailedException& other2990) {
  ValidationResult = other2990.ValidationResult;
  __isset = other2990.__isset;
  return *this;
}
void TDDIValidationFailedException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIValidationFailedException(";
  out << "ValidationResult=" << to_string(ValidationResult);
  out << ")";
}

const char* TDDIValidationFailedException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TDDIValidationFailedException";
  }
}

} // namespace
