/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mergedDDIThriftContract_TYPES_H
#define mergedDDIThriftContract_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace thriftContract {

enum TDDITimeUnit {
  TUMillisecond = 0,
  TUSecond = 1,
  TUMinute = 2,
  TUHour = 3,
  TUDay = 4,
  TUWeek = 5,
  TUMonth = 6,
  TUYear = 7
};

extern const std::map<int, const char*> _TDDITimeUnit_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDITimeUnit val);

enum TDDIArchitecturePackageUnionType {
  APUTArchitecturePackage = 0,
  APUTArchitecturePackageInterface = 1,
  APUTArchitecturePackageBinding = 2
};

extern const std::map<int, const char*> _TDDIArchitecturePackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackageUnionType val);

enum TDDIPortDirection {
  PDIN = 0,
  PDOUT = 1,
  PDINOUT = 2
};

extern const std::map<int, const char*> _TDDIPortDirection_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIPortDirection val);

enum TDDISystemUnionType {
  SUTSystem = 0,
  SUTPhysicalComponent = 1,
  SUTLogicalComponent = 2,
  SUTSafetyRelatedSystem = 3
};

extern const std::map<int, const char*> _TDDISystemUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDISystemUnionType val);

enum TDDIFunctionUnionType {
  FUTFunction = 0,
  FUTSafetyFunction = 1
};

extern const std::map<int, const char*> _TDDIFunctionUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFunctionUnionType val);

enum TDDIDesignArtifactUnionType {
  DAUTAbstractSystem = 0,
  DAUTAbstractFunction = 1,
  DAUTConfiguration = 2,
  DAUTSignal = 3,
  DAUTSystemBoundary = 4,
  DAUTContext = 5,
  DAUTLifecycleCondition = 6,
  DAUTPort = 7,
  DAUTPerfChars = 8,
  DAUTAbstractArchitecturePackage = 9
};

extern const std::map<int, const char*> _TDDIDesignArtifactUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIDesignArtifactUnionType val);

enum TDDIBaseElementUnionType {
  BEUTAbstractDesignArtifact = 0,
  BEUTAbstractODEPackage = 1,
  BEUTAbstractFailureAnalysisArtifact = 2,
  BEUTAbstractDependabilityArtifact = 3
};

extern const std::map<int, const char*> _TDDIBaseElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIBaseElementUnionType val);

enum TDDIDependabilityPackageUnionType {
  PUTDependabilityPackage = 0,
  PUTDependabilityPackageInterface = 1,
  PUTDependabilityPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIDependabilityPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackageUnionType val);

enum TDDIMeasureUnionType {
  MUTMeasure = 0,
  MUTFaultToleranceMeasure = 1
};

extern const std::map<int, const char*> _TDDIMeasureUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIMeasureUnionType val);

enum TDDIDependabilityArtifactUnionType {
  DAUTAbstractDependabilityPackage = 0,
  DAUTAbstractMeasure = 1,
  DAUTMeasureType = 2,
  DAUTMaintenanceProcedure = 3,
  DAUTAbstractDomainElement = 4,
  DAUTAbstractRequirementArtifact = 5,
  DAUTAbstractHARAArtifact = 6
};

extern const std::map<int, const char*> _TDDIDependabilityArtifactUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityArtifactUnionType val);

enum TDDIAbstractDomainPackageType {
  ADPTDomainPackage = 0,
  ADPTDomainPackageInterface = 1,
  ADPTDomainPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIAbstractDomainPackageType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainPackageType val);

enum TDDIStandardUnionType {
  SUTStandard = 0,
  SUTSafetyStandard = 1
};

extern const std::map<int, const char*> _TDDIStandardUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIStandardUnionType val);

enum TDDIDomainElementUnionType {
  DEUTAbstractDomainPackage = 0,
  DEUTAbstractStandard = 1,
  DEUTAssuranceLevel = 2
};

extern const std::map<int, const char*> _TDDIDomainElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIDomainElementUnionType val);

enum TDDIFailureUnionType {
  FUTAbstractInterfaceFailure = 0,
  FUTAbstractInternalFailure = 1,
  FUTCCF = 2
};

extern const std::map<int, const char*> _TDDIFailureUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFailureUnionType val);

enum TDDIInterfaceFailureUnionType {
  IFUTOutputFailure = 0,
  IFUTInputFailure = 1
};

extern const std::map<int, const char*> _TDDIInterfaceFailureUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIInterfaceFailureUnionType val);

enum TDDIInternalFailureUnionType {
  IFUTInternalFailure = 0,
  IFUTBasicEvent = 1,
  IFUTFMEAFailure = 2,
  IFUTFailState = 3
};

extern const std::map<int, const char*> _TDDIInternalFailureUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIInternalFailureUnionType val);

enum TDDIFailureAnalysisArtifactUnionType {
  AAUTAbstractFailureLogicPackage = 0,
  AAUTMinimalCutset = 1,
  AAUTInterfaceFailurePropagation = 2,
  AAUTAbstractFailure = 3,
  AAUTFailureMode = 4,
  AAUTProbabilityDistribution = 5,
  AAUTProbDistParam = 6,
  AAUTAbstractFTAArtifact = 7,
  AAUTAbstractFMEAArtifact = 8,
  AAUTAbstractMarkovArtifact = 9
};

extern const std::map<int, const char*> _TDDIFailureAnalysisArtifactUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFailureAnalysisArtifactUnionType val);

enum TDDIFailureLogicPackageUnionType {
  FLPUTFailureLogicPackage = 0,
  FLPUTFailureLogicPackageInterface = 1,
  FLPUTFailureLogicPackageBinding = 2,
  FLPUTAbstractFTAPackage = 3,
  FLPUTAbstractFMEAPackage = 4,
  FLPUTAbstractMarkovChainPackage = 5
};

extern const std::map<int, const char*> _TDDIFailureLogicPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackageUnionType val);

enum TDDIFMEAPackageUnionType {
  FMEAPUTPackage = 0,
  FMEAPUTPackageInterface = 1,
  FMEAPUTPackageBinding = 2,
  FMEAPUTBasicFMEAPackage = 3,
  FMEAPUTFMEDAPackage = 4
};

extern const std::map<int, const char*> _TDDIFMEAPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackageUnionType val);

enum TDDIFMEAArtifactUnionType {
  FMEAAUTAbstractFMEAPropagation = 0
};

extern const std::map<int, const char*> _TDDIFMEAArtifactUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFMEAArtifactUnionType val);

enum TDDIFMEAPropagationUnionType {
  FMEAPUTPropagation = 0,
  FMEAPUTDiagnosableFailurePropagation = 1
};

extern const std::map<int, const char*> _TDDIFMEAPropagationUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPropagationUnionType val);

enum TDDIGateType {
  GTOR = 0,
  GTAND = 1,
  GTNOT = 2,
  GTXOR = 3,
  GTVOTE = 4,
  GTPAND = 5,
  GTPOR = 6,
  GTSAND = 7
};

extern const std::map<int, const char*> _TDDIGateType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIGateType val);

enum TDDIFTAArtifactUnionType {
  FTAAUTInputEvent = 0,
  FTAAUTOutputEvent = 1,
  FTAAUTGate = 2,
  FTAAUTPropagation = 3
};

extern const std::map<int, const char*> _TDDIFTAArtifactUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFTAArtifactUnionType val);

enum TDDIFTAPackageUnionType {
  FTAPUTPackage = 0,
  FTAPUTPackageInterface = 1,
  FTAPUTPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIFTAPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFTAPackageUnionType val);

enum TDDIRiskParameterUnionType {
  RPUTRiskParameter = 0,
  RPUTSituation = 1,
  RPUTAccident = 2,
  RPUTOperationMeasure = 3
};

extern const std::map<int, const char*> _TDDIRiskParameterUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIRiskParameterUnionType val);

enum TDDIHARAArtifactUnionType {
  HAUTAbstractHARAPackage = 0,
  HAUTHazardTypeSystem = 1,
  HAUTAbstractRiskParameter = 2,
  HAUTRiskAssessment = 3,
  HAUTHazardType = 4,
  HAUTMalFunction = 5,
  HAUTHazard = 6
};

extern const std::map<int, const char*> _TDDIHARAArtifactUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIHARAArtifactUnionType val);

enum TDDIHARAPackageUnionType {
  HARAPUTPackage = 0,
  HARAPUTPackageInterface = 1,
  HARAPUTPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIHARAPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIHARAPackageUnionType val);

enum TDDIODEPackageUnionType {
  OPUTODEPackage = 0,
  OPUTODEPackageInterface = 1,
  OPUTODEPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIODEPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIODEPackageUnionType val);

enum TDDIMarkovArtifactUnionType {
  MAUTTransition = 0,
  MAUTState = 1
};

extern const std::map<int, const char*> _TDDIMarkovArtifactUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIMarkovArtifactUnionType val);

enum TDDIMarkovChainPackageUnionType {
  MCPUTMarkovChainPackage = 0,
  MCPUTMarkovChainPackageInterface = 1,
  MCPUTMarkovChainPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIMarkovChainPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackageUnionType val);

enum TDDIRequirementPackageUnionType {
  RPUTRequirementPackage = 0,
  RPUTRequirementPackageInterface = 1,
  RPUTRequirementPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIRequirementPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackageUnionType val);

enum TDDIRequirementSourceUnionType {
  RSUTLegalContract = 0
};

extern const std::map<int, const char*> _TDDIRequirementSourceUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIRequirementSourceUnionType val);

enum TDDIDependabilityRequirementUnionType {
  DRUTSafetyRequirement = 0
};

extern const std::map<int, const char*> _TDDIDependabilityRequirementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityRequirementUnionType val);

enum TDDIRequirementArtifactUnionType {
  RAUTAbstractRequirementPackage = 0,
  RAUTAbstractRequirementSource = 1,
  RAUTAbstractDependabilityRequirement = 2
};

extern const std::map<int, const char*> _TDDIRequirementArtifactUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIRequirementArtifactUnionType val);

enum TDDIAssertionDeclaration {
  ADAsserted = 0,
  ADNeedsSupport = 1,
  ADAssumed = 2,
  ADAxiomatic = 3,
  ADDefeated = 4,
  ADAsCited = 5
};

extern const std::map<int, const char*> _TDDIAssertionDeclaration_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAssertionDeclaration val);

enum TDDIArgumentationElementUnionType {
  AEUTArgumentGroup = 0,
  AEUTAbstractArgumentPackage = 1,
  AEUTAbstractArgumentAsset = 2
};

extern const std::map<int, const char*> _TDDIArgumentationElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArgumentationElementUnionType val);

enum TDDIArgumentPackageUnionType {
  APUTArgumentPackage = 0,
  APUTArgumentPackageInterface = 1,
  APUTArgumentPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIArgumentPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageUnionType val);

enum TDDIArgumentAssetUnionType {
  AAUTAbstractAssertion = 0,
  AAUTArgumentReasoning = 1,
  AAUTArtifactReference = 2
};

extern const std::map<int, const char*> _TDDIArgumentAssetUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArgumentAssetUnionType val);

enum TDDIAssertionUnionType {
  AUTClaim = 0,
  AUTAbstractAssertedRelationship = 1
};

extern const std::map<int, const char*> _TDDIAssertionUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAssertionUnionType val);

enum TDDIAssertedRelationshipUnionType {
  ARUTAssertedArtifactSupport = 0,
  ARUTAssertedArtifactContext = 1,
  ARUTAssertedInference = 2,
  ARUTAssertedEvidence = 3,
  ARUTAssertedContext = 4
};

extern const std::map<int, const char*> _TDDIAssertedRelationshipUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAssertedRelationshipUnionType val);

enum TDDIArtifactPackageUnionType {
  APUTArtifactPackage = 0,
  APUTArtifactPackageInterface = 1,
  APUTArtifactPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIArtifactPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageUnionType val);

enum TDDIArtifactAssetUnionType {
  AAUTProperty = 0,
  AAUTTechnique = 1,
  AAUTParticipant = 2,
  AAUTActivity = 3,
  AAUTEvent = 4,
  AAUTResource = 5,
  AAUTArtifact = 6,
  AAUTArtifactAssetRelationship = 7
};

extern const std::map<int, const char*> _TDDIArtifactAssetUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetUnionType val);

enum TDDIAssuranceCasePackageUnionType {
  ACPUTAssuranceCasePackage = 0,
  ACPUTAssuranceCasePackageInterface = 1,
  ACPUTAssuranceCasePackageBinding = 2
};

extern const std::map<int, const char*> _TDDIAssuranceCasePackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageUnionType val);

enum TDDILangStringUnionType {
  LSUTLangString = 0,
  LSUTExpressionLangString = 1
};

extern const std::map<int, const char*> _TDDILangStringUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDILangStringUnionType val);

enum TDDIUtilityElementUnionType {
  UEUTDescription = 0,
  UEUTImplementationConstraint = 1,
  UEUTNote = 2,
  UEUTTaggedValue = 3
};

extern const std::map<int, const char*> _TDDIUtilityElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIUtilityElementUnionType val);

enum TDDIArtifactElementUnionType {
  AEUTAbstractTerminologyElement = 0,
  AEUTAbstractAssuranceCasePackage = 1,
  AEUTAbstractArtifactPackage = 2,
  AEUTArtifactGroup = 3,
  AEUTAbstractArtifactAsset = 4,
  AEUTAbstractArgumentationElement = 5
};

extern const std::map<int, const char*> _TDDIArtifactElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArtifactElementUnionType val);

enum TDDIModelElementUnionType {
  MEUTAbstractArtifactElement = 0
};

extern const std::map<int, const char*> _TDDIModelElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIModelElementUnionType val);

enum TDDISACMElementUnionType {
  EUTAbstractUtilityElement = 0,
  EUTAbstractModelElement = 1
};

extern const std::map<int, const char*> _TDDISACMElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDISACMElementUnionType val);

enum TDDIElementUnionType {
  EUTAbstractLangString = 0,
  EUTMultiLangString = 1,
  EUTAbstractSACMElement = 2
};

extern const std::map<int, const char*> _TDDIElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIElementUnionType val);

enum TDDITerminologyElementUnionType {
  TEUTTerminologyGroup = 0,
  TEUTAbstractTerminologyPackage = 1,
  TEUTAbstractTerminologyAsset = 2
};

extern const std::map<int, const char*> _TDDITerminologyElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDITerminologyElementUnionType val);

enum TDDITerminologyPackageUnionType {
  TPUTTerminologyPackage = 0,
  TPUTTerminologyPackageBinding = 1,
  TPUTTerminologyPackageInterface = 2
};

extern const std::map<int, const char*> _TDDITerminologyPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageUnionType val);

enum TDDIExpressionElementUnionType {
  EEUTExpression = 0,
  EEUTTerm = 1
};

extern const std::map<int, const char*> _TDDIExpressionElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIExpressionElementUnionType val);

enum TDDITerminologyAssetUnionType {
  TAUTCategory = 0,
  TAUTAbstractExpressionElement = 1
};

extern const std::map<int, const char*> _TDDITerminologyAssetUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDITerminologyAssetUnionType val);

class TDDIKeyValueMapRef;

class TDDIAbstractDependabilityRequirementRef;

class TDDIAbstractDesignArtifactRef;

class TDDIAbstractArchitecturePackageRef;

class TDDIAbstractSystemRef;

class TDDIAbstractFunctionRef;

class TDDILifecycleConditionRef;

class TDDIAbstractFailureLogicPackageRef;

class TDDIPortRef;

class TDDIAbstractInterfaceFailureRef;

class TDDIAbstractStandardRef;

class TDDIMalFunctionRef;

class TDDIAbstractDependabilityArtifactRef;

class TDDIAbstractDependabilityPackageRef;

class TDDIAbstractDomainElementRef;

class TDDIAbstractDomainPackageRef;

class TDDIAbstractFailureAnalysisArtifactRef;

class TDDIAbstractFMEAArtifactRef;

class TDDIAbstractFMEAPackageRef;

class TDDIMinimalCutsetRef;

class TDDIAbstractFTAPackageRef;

class TDDIAbstractHARAPackageRef;

class TDDIAbstractMeasureRef;

class TDDIAbstractRiskParameterRef;

class TDDIAbstractODEPackageRef;

class TDDIAbstractMarkovChainPackageRef;

class TDDIAbstractRequirementArtifactRef;

class TDDIAbstractRequirementPackageRef;

class TDDIAbstractFailureRef;

class TDDIMaintenanceProcedureRef;

class TDDIHazardRef;

class TDDIImplementationConstraintRef;

class TDDINoteRef;

class TDDITaggedValueRef;

class TDDIAbstractArtifactElementRef;

class TDDIClaimRef;

class TDDIAbstractArgumentPackageRef;

class TDDIAbstractArgumentationElementRef;

class TDDIAbstractArgumentAssetRef;

class TDDIPropertyRef;

class TDDIAbstractArtifactAssetRef;

class TDDIAbstractAssuranceCasePackageRef;

class TDDIAssuranceCasePackageInterfaceRef;

class TDDIAbstractArtifactPackageRef;

class TDDIAbstractTerminologyPackageRef;

class TDDIAbstractExpressionElementRef;

class TDDIArchitecturePackageUnion;

class TDDIAbstractArchitecturePackage;

class TDDIArchitecturePackage;

class TDDIArchitecturePackageInterface;

class TDDIArchitecturePackageBinding;

class TDDIPerfChars;

class TDDIPort;

class TDDISignal;

class TDDIConfiguration;

class TDDIContext;

class TDDISystemBoundary;

class TDDISystem;

class TDDILogicalComponent;

class TDDISafetyRelatedSystem;

class TDDILifecycleCondition;

class TDDIPhysicalComponent;

class TDDISystemUnion;

class TDDIAbstractSystem;

class TDDIFunction;

class TDDISafetyFunction;

class TDDIFunctionUnion;

class TDDIAbstractFunction;

class TDDIDesignArtifactUnion;

class TDDIAbstractDesignArtifact;

class TDDIBaseElementUnion;

class TDDIAbstractBaseElement;

class TDDIValue;

class TDDIKeyValueMap;

class TDDIDependabilityPackageUnion;

class TDDIAbstractDependabilityPackage;

class TDDIDependabilityPackage;

class TDDIDependabilityPackageInterface;

class TDDIDependabilityPackageBinding;

class TDDIMeasureType;

class TDDIMeasure;

class TDDIFaultToleranceMeasure;

class TDDIMaintenanceProcedure;

class TDDIMeasureUnion;

class TDDIAbstractMeasure;

class TDDIDependabilityArtifactUnion;

class TDDIAbstractDependabilityArtifact;

class TDDIDomainPackageUnion;

class TDDIAbstractDomainPackage;

class TDDIDomainPackage;

class TDDIDomainPackageInterface;

class TDDIDomainPackageBinding;

class TDDIAssuranceLevel;

class TDDIStandard;

class TDDISafetyStandard;

class TDDIStandardUnion;

class TDDIAbstractStandard;

class TDDIDomainElementUnion;

class TDDIAbstractDomainElement;

class TDDIFailureMode;

class TDDIProbDistParam;

class TDDIProbabilityDistribution;

class TDDIFailureUnion;

class TDDIAbstractFailure;

class TDDIMinimalCutset;

class TDDIOutputFailure;

class TDDIInputFailure;

class TDDIInterfaceFailureUnion;

class TDDIAbstractInterfaceFailure;

class TDDIInterfaceFailurePropagation;

class TDDIInternalFailure;

class TDDICCF;

class TDDIInternalFailureUnion;

class TDDIAbstractInternalFailure;

class TDDIFailureAnalysisArtifactUnion;

class TDDIAbstractFailureAnalysisArtifact;

class TDDIFailureLogicPackage;

class TDDIFailureLogicPackageInterface;

class TDDIFailureLogicPackageBinding;

class TDDIFailureLogicPackageUnion;

class TDDIAbstractFailureLogicPackage;

class TDDIFMEAPackage;

class TDDIFMEAPackageInterface;

class TDDIFMEAPackageBinding;

class TDDIBasicFMEAPackage;

class TDDIFMEDAPackage;

class TDDIFMEAPackageUnion;

class TDDIAbstractFMEAPackage;

class TDDIFMEAArtifactUnion;

class TDDIAbstractFMEAArtifact;

class TDDIFMEAFailure;

class TDDIFMEAPropagation;

class TDDIDiagnosableFailurePropagation;

class TDDIFMEAPropagationUnion;

class TDDIAbstractFMEAPropagation;

class TDDIInputEvent;

class TDDIOutputEvent;

class TDDIGate;

class TDDIFTAPropagation;

class TDDIBasicEvent;

class TDDIFTAArtifactUnion;

class TDDIAbstractFTAArtifact;

class TDDIFTAPackage;

class TDDIFTAPackageInterface;

class TDDIFTAPackageBinding;

class TDDIFTAPackageUnion;

class TDDIAbstractFTAPackage;

class TDDIHazardType;

class TDDIHazardTypeSystem;

class TDDIRiskParameter;

class TDDISituation;

class TDDIAccident;

class TDDIOperationMeasure;

class TDDIHazard;

class TDDIRiskAssessment;

class TDDIMalFunction;

class TDDIRiskParameterUnion;

class TDDIAbstractRiskParameter;

class TDDIHARAArtifactUnion;

class TDDIAbstractHARAArtifact;

class TDDIHARAPackage;

class TDDIHARAPackageInterface;

class TDDIHARAPackageBinding;

class TDDIHARAPackageUnion;

class TDDIAbstractHARAPackage;

class TDDIODEPackageUnion;

class TDDIAbstractODEPackage;

class TDDIODEPackage;

class TDDIODEPackageInterface;

class TDDIODEPackageBinding;

class TDDIState;

class TDDIFailState;

class TDDITransition;

class TDDIMarkovArtifactUnion;

class TDDIAbstractMarkovArtifact;

class TDDIMarkovChainPackageUnion;

class TDDIAbstractMarkovChainPackage;

class TDDIMarkovChainPackage;

class TDDIMarkovChainPackageInterface;

class TDDIMarkovChainPackageBinding;

class TDDILegalContract;

class TDDIRequirementPackageUnion;

class TDDIAbstractRequirementPackage;

class TDDIRequirementPackage;

class TDDIRequirementPackageInterface;

class TDDIRequirementPackageBinding;

class TDDIRequirementSourceUnion;

class TDDIAbstractRequirementSource;

class TDDISafetyRequirement;

class TDDIDependabilityRequirementUnion;

class TDDIAbstractDependabilityRequirement;

class TDDIRequirementArtifactUnion;

class TDDIAbstractRequirementArtifact;

class TDDIArtifactReference;

class TDDIArgumentationElementUnion;

class TDDIAbstractArgumentationElement;

class TDDIArgumentGroup;

class TDDIArgumentPackageUnion;

class TDDIAbstractArgumentPackage;

class TDDIArgumentPackage;

class TDDIArgumentPackageInterface;

class TDDIArgumentPackageBinding;

class TDDIArgumentAssetUnion;

class TDDIAbstractArgumentAsset;

class TDDIArgumentReasoning;

class TDDIClaim;

class TDDIAssertionUnion;

class TDDIAbstractAssertion;

class TDDIAssertedArtifactSupport;

class TDDIAssertedArtifactContext;

class TDDIAssertedInference;

class TDDIAssertedEvidence;

class TDDIAssertedContext;

class TDDIAssertedRelationshipUnion;

class TDDIAbstractAssertedRelationship;

class TDDIArtifactPackageUnion;

class TDDIAbstractArtifactPackage;

class TDDIArtifactPackage;

class TDDIArtifactPackageInterface;

class TDDIArtifactPackageBinding;

class TDDIArtifactGroup;

class TDDIProperty;

class TDDITechnique;

class TDDIParticipant;

class TDDIActivity;

class TDDIEvent;

class TDDIResource;

class TDDIArtifact;

class TDDIArtifactAssetRelationship;

class TDDIArtifactAssetUnion;

class TDDIAbstractArtifactAsset;

class TDDIAssuranceCasePackageUnion;

class TDDIAbstractAssuranceCasePackage;

class TDDIAssuranceCasePackage;

class TDDIAssuranceCasePackageInterface;

class TDDIAssuranceCasePackageBinding;

class TDDILangString;

class TDDIExpressionLangString;

class TDDILangStringUnion;

class TDDIAbstractLangString;

class TDDIMultiLangString;

class TDDIDescription;

class TDDIImplementationConstraint;

class TDDINote;

class TDDITaggedValue;

class TDDIUtilityElementUnion;

class TDDIAbstractUtilityElement;

class TDDIArtifactElementUnion;

class TDDIAbstractArtifactElement;

class TDDIModelElementUnion;

class TDDIAbstractModelElement;

class TDDISACMElementUnion;

class TDDIAbstractSACMElement;

class TDDIElementUnion;

class TDDIAbstractElement;

class TDDITerminologyElementUnion;

class TDDIAbstractTerminologyElement;

class TDDITerminologyGroup;

class TDDITerminologyPackageUnion;

class TDDIAbstractTerminologyPackage;

class TDDITerminologyPackage;

class TDDITerminologyPackageBinding;

class TDDITerminologyPackageInterface;

class TDDICategory;

class TDDIExpression;

class TDDITerm;

class TDDIExpressionElementUnion;

class TDDIAbstractExpressionElement;

class TDDITerminologyAssetUnion;

class TDDIAbstractTerminologyAsset;

class TDDIValidationResult;

class TDDIValidationViolationMessage;

class TDDIValidationFailedException;

typedef struct _TDDIKeyValueMapRef__isset {
  _TDDIKeyValueMapRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIKeyValueMapRef__isset;

class TDDIKeyValueMapRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIKeyValueMapRef(const TDDIKeyValueMapRef&);
  TDDIKeyValueMapRef& operator=(const TDDIKeyValueMapRef&);
  TDDIKeyValueMapRef() : ref() {
  }

  virtual ~TDDIKeyValueMapRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIKeyValueMap> ref;

  _TDDIKeyValueMapRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIKeyValueMap> val);

  bool operator == (const TDDIKeyValueMapRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIKeyValueMapRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIKeyValueMapRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIKeyValueMapRef &a, TDDIKeyValueMapRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIKeyValueMapRef& obj);

typedef struct _TDDIAbstractDependabilityRequirementRef__isset {
  _TDDIAbstractDependabilityRequirementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractDependabilityRequirementRef__isset;

class TDDIAbstractDependabilityRequirementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDependabilityRequirementRef(const TDDIAbstractDependabilityRequirementRef&);
  TDDIAbstractDependabilityRequirementRef& operator=(const TDDIAbstractDependabilityRequirementRef&);
  TDDIAbstractDependabilityRequirementRef() : ref() {
  }

  virtual ~TDDIAbstractDependabilityRequirementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> ref;

  _TDDIAbstractDependabilityRequirementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> val);

  bool operator == (const TDDIAbstractDependabilityRequirementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDependabilityRequirementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDependabilityRequirementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDependabilityRequirementRef &a, TDDIAbstractDependabilityRequirementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityRequirementRef& obj);

typedef struct _TDDIAbstractDesignArtifactRef__isset {
  _TDDIAbstractDesignArtifactRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractDesignArtifactRef__isset;

class TDDIAbstractDesignArtifactRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDesignArtifactRef(const TDDIAbstractDesignArtifactRef&);
  TDDIAbstractDesignArtifactRef& operator=(const TDDIAbstractDesignArtifactRef&);
  TDDIAbstractDesignArtifactRef() : ref() {
  }

  virtual ~TDDIAbstractDesignArtifactRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDesignArtifact> ref;

  _TDDIAbstractDesignArtifactRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDesignArtifact> val);

  bool operator == (const TDDIAbstractDesignArtifactRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDesignArtifactRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDesignArtifactRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDesignArtifactRef &a, TDDIAbstractDesignArtifactRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDesignArtifactRef& obj);

typedef struct _TDDIAbstractArchitecturePackageRef__isset {
  _TDDIAbstractArchitecturePackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArchitecturePackageRef__isset;

class TDDIAbstractArchitecturePackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArchitecturePackageRef(const TDDIAbstractArchitecturePackageRef&);
  TDDIAbstractArchitecturePackageRef& operator=(const TDDIAbstractArchitecturePackageRef&);
  TDDIAbstractArchitecturePackageRef() : ref() {
  }

  virtual ~TDDIAbstractArchitecturePackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArchitecturePackage> ref;

  _TDDIAbstractArchitecturePackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArchitecturePackage> val);

  bool operator == (const TDDIAbstractArchitecturePackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArchitecturePackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArchitecturePackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArchitecturePackageRef &a, TDDIAbstractArchitecturePackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArchitecturePackageRef& obj);

typedef struct _TDDIAbstractSystemRef__isset {
  _TDDIAbstractSystemRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractSystemRef__isset;

class TDDIAbstractSystemRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractSystemRef(const TDDIAbstractSystemRef&);
  TDDIAbstractSystemRef& operator=(const TDDIAbstractSystemRef&);
  TDDIAbstractSystemRef() : ref() {
  }

  virtual ~TDDIAbstractSystemRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> ref;

  _TDDIAbstractSystemRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> val);

  bool operator == (const TDDIAbstractSystemRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractSystemRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractSystemRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractSystemRef &a, TDDIAbstractSystemRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractSystemRef& obj);

typedef struct _TDDIAbstractFunctionRef__isset {
  _TDDIAbstractFunctionRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFunctionRef__isset;

class TDDIAbstractFunctionRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFunctionRef(const TDDIAbstractFunctionRef&);
  TDDIAbstractFunctionRef& operator=(const TDDIAbstractFunctionRef&);
  TDDIAbstractFunctionRef() : ref() {
  }

  virtual ~TDDIAbstractFunctionRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> ref;

  _TDDIAbstractFunctionRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> val);

  bool operator == (const TDDIAbstractFunctionRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFunctionRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFunctionRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFunctionRef &a, TDDIAbstractFunctionRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFunctionRef& obj);

typedef struct _TDDILifecycleConditionRef__isset {
  _TDDILifecycleConditionRef__isset() : ref(false) {}
  bool ref :1;
} _TDDILifecycleConditionRef__isset;

class TDDILifecycleConditionRef : public virtual ::apache::thrift::TBase {
 public:

  TDDILifecycleConditionRef(const TDDILifecycleConditionRef&);
  TDDILifecycleConditionRef& operator=(const TDDILifecycleConditionRef&);
  TDDILifecycleConditionRef() : ref() {
  }

  virtual ~TDDILifecycleConditionRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDILifecycleCondition> ref;

  _TDDILifecycleConditionRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDILifecycleCondition> val);

  bool operator == (const TDDILifecycleConditionRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDILifecycleConditionRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILifecycleConditionRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILifecycleConditionRef &a, TDDILifecycleConditionRef &b);

std::ostream& operator<<(std::ostream& out, const TDDILifecycleConditionRef& obj);

typedef struct _TDDIAbstractFailureLogicPackageRef__isset {
  _TDDIAbstractFailureLogicPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFailureLogicPackageRef__isset;

class TDDIAbstractFailureLogicPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailureLogicPackageRef(const TDDIAbstractFailureLogicPackageRef&);
  TDDIAbstractFailureLogicPackageRef& operator=(const TDDIAbstractFailureLogicPackageRef&);
  TDDIAbstractFailureLogicPackageRef() : ref() {
  }

  virtual ~TDDIAbstractFailureLogicPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> ref;

  _TDDIAbstractFailureLogicPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> val);

  bool operator == (const TDDIAbstractFailureLogicPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailureLogicPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailureLogicPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailureLogicPackageRef &a, TDDIAbstractFailureLogicPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureLogicPackageRef& obj);

typedef struct _TDDIPortRef__isset {
  _TDDIPortRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIPortRef__isset;

class TDDIPortRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIPortRef(const TDDIPortRef&);
  TDDIPortRef& operator=(const TDDIPortRef&);
  TDDIPortRef() : ref() {
  }

  virtual ~TDDIPortRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIPort> ref;

  _TDDIPortRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val);

  bool operator == (const TDDIPortRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIPortRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPortRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPortRef &a, TDDIPortRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIPortRef& obj);

typedef struct _TDDIAbstractInterfaceFailureRef__isset {
  _TDDIAbstractInterfaceFailureRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractInterfaceFailureRef__isset;

class TDDIAbstractInterfaceFailureRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractInterfaceFailureRef(const TDDIAbstractInterfaceFailureRef&);
  TDDIAbstractInterfaceFailureRef& operator=(const TDDIAbstractInterfaceFailureRef&);
  TDDIAbstractInterfaceFailureRef() : ref() {
  }

  virtual ~TDDIAbstractInterfaceFailureRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInterfaceFailure> ref;

  _TDDIAbstractInterfaceFailureRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInterfaceFailure> val);

  bool operator == (const TDDIAbstractInterfaceFailureRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractInterfaceFailureRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractInterfaceFailureRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractInterfaceFailureRef &a, TDDIAbstractInterfaceFailureRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractInterfaceFailureRef& obj);

typedef struct _TDDIAbstractStandardRef__isset {
  _TDDIAbstractStandardRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractStandardRef__isset;

class TDDIAbstractStandardRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractStandardRef(const TDDIAbstractStandardRef&);
  TDDIAbstractStandardRef& operator=(const TDDIAbstractStandardRef&);
  TDDIAbstractStandardRef() : ref() {
  }

  virtual ~TDDIAbstractStandardRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> ref;

  _TDDIAbstractStandardRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> val);

  bool operator == (const TDDIAbstractStandardRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractStandardRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractStandardRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractStandardRef &a, TDDIAbstractStandardRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractStandardRef& obj);

typedef struct _TDDIMalFunctionRef__isset {
  _TDDIMalFunctionRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIMalFunctionRef__isset;

class TDDIMalFunctionRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIMalFunctionRef(const TDDIMalFunctionRef&);
  TDDIMalFunctionRef& operator=(const TDDIMalFunctionRef&);
  TDDIMalFunctionRef() : ref() {
  }

  virtual ~TDDIMalFunctionRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIMalFunction> ref;

  _TDDIMalFunctionRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMalFunction> val);

  bool operator == (const TDDIMalFunctionRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIMalFunctionRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMalFunctionRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMalFunctionRef &a, TDDIMalFunctionRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIMalFunctionRef& obj);

typedef struct _TDDIAbstractDependabilityArtifactRef__isset {
  _TDDIAbstractDependabilityArtifactRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractDependabilityArtifactRef__isset;

class TDDIAbstractDependabilityArtifactRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDependabilityArtifactRef(const TDDIAbstractDependabilityArtifactRef&);
  TDDIAbstractDependabilityArtifactRef& operator=(const TDDIAbstractDependabilityArtifactRef&);
  TDDIAbstractDependabilityArtifactRef() : ref() {
  }

  virtual ~TDDIAbstractDependabilityArtifactRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityArtifact> ref;

  _TDDIAbstractDependabilityArtifactRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityArtifact> val);

  bool operator == (const TDDIAbstractDependabilityArtifactRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDependabilityArtifactRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDependabilityArtifactRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDependabilityArtifactRef &a, TDDIAbstractDependabilityArtifactRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityArtifactRef& obj);

typedef struct _TDDIAbstractDependabilityPackageRef__isset {
  _TDDIAbstractDependabilityPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractDependabilityPackageRef__isset;

class TDDIAbstractDependabilityPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDependabilityPackageRef(const TDDIAbstractDependabilityPackageRef&);
  TDDIAbstractDependabilityPackageRef& operator=(const TDDIAbstractDependabilityPackageRef&);
  TDDIAbstractDependabilityPackageRef() : ref() {
  }

  virtual ~TDDIAbstractDependabilityPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityPackage> ref;

  _TDDIAbstractDependabilityPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityPackage> val);

  bool operator == (const TDDIAbstractDependabilityPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDependabilityPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDependabilityPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDependabilityPackageRef &a, TDDIAbstractDependabilityPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityPackageRef& obj);

typedef struct _TDDIAbstractDomainElementRef__isset {
  _TDDIAbstractDomainElementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractDomainElementRef__isset;

class TDDIAbstractDomainElementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDomainElementRef(const TDDIAbstractDomainElementRef&);
  TDDIAbstractDomainElementRef& operator=(const TDDIAbstractDomainElementRef&);
  TDDIAbstractDomainElementRef() : ref() {
  }

  virtual ~TDDIAbstractDomainElementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainElement> ref;

  _TDDIAbstractDomainElementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainElement> val);

  bool operator == (const TDDIAbstractDomainElementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDomainElementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDomainElementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDomainElementRef &a, TDDIAbstractDomainElementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainElementRef& obj);

typedef struct _TDDIAbstractDomainPackageRef__isset {
  _TDDIAbstractDomainPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractDomainPackageRef__isset;

class TDDIAbstractDomainPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDomainPackageRef(const TDDIAbstractDomainPackageRef&);
  TDDIAbstractDomainPackageRef& operator=(const TDDIAbstractDomainPackageRef&);
  TDDIAbstractDomainPackageRef() : ref() {
  }

  virtual ~TDDIAbstractDomainPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainPackage> ref;

  _TDDIAbstractDomainPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainPackage> val);

  bool operator == (const TDDIAbstractDomainPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDomainPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDomainPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDomainPackageRef &a, TDDIAbstractDomainPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainPackageRef& obj);

typedef struct _TDDIAbstractFailureAnalysisArtifactRef__isset {
  _TDDIAbstractFailureAnalysisArtifactRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFailureAnalysisArtifactRef__isset;

class TDDIAbstractFailureAnalysisArtifactRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailureAnalysisArtifactRef(const TDDIAbstractFailureAnalysisArtifactRef&);
  TDDIAbstractFailureAnalysisArtifactRef& operator=(const TDDIAbstractFailureAnalysisArtifactRef&);
  TDDIAbstractFailureAnalysisArtifactRef() : ref() {
  }

  virtual ~TDDIAbstractFailureAnalysisArtifactRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> ref;

  _TDDIAbstractFailureAnalysisArtifactRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> val);

  bool operator == (const TDDIAbstractFailureAnalysisArtifactRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailureAnalysisArtifactRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailureAnalysisArtifactRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailureAnalysisArtifactRef &a, TDDIAbstractFailureAnalysisArtifactRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureAnalysisArtifactRef& obj);

typedef struct _TDDIAbstractFMEAArtifactRef__isset {
  _TDDIAbstractFMEAArtifactRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFMEAArtifactRef__isset;

class TDDIAbstractFMEAArtifactRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFMEAArtifactRef(const TDDIAbstractFMEAArtifactRef&);
  TDDIAbstractFMEAArtifactRef& operator=(const TDDIAbstractFMEAArtifactRef&);
  TDDIAbstractFMEAArtifactRef() : ref() {
  }

  virtual ~TDDIAbstractFMEAArtifactRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAArtifact> ref;

  _TDDIAbstractFMEAArtifactRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAArtifact> val);

  bool operator == (const TDDIAbstractFMEAArtifactRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFMEAArtifactRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFMEAArtifactRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFMEAArtifactRef &a, TDDIAbstractFMEAArtifactRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAArtifactRef& obj);

typedef struct _TDDIAbstractFMEAPackageRef__isset {
  _TDDIAbstractFMEAPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFMEAPackageRef__isset;

class TDDIAbstractFMEAPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFMEAPackageRef(const TDDIAbstractFMEAPackageRef&);
  TDDIAbstractFMEAPackageRef& operator=(const TDDIAbstractFMEAPackageRef&);
  TDDIAbstractFMEAPackageRef() : ref() {
  }

  virtual ~TDDIAbstractFMEAPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> ref;

  _TDDIAbstractFMEAPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> val);

  bool operator == (const TDDIAbstractFMEAPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFMEAPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFMEAPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFMEAPackageRef &a, TDDIAbstractFMEAPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAPackageRef& obj);

typedef struct _TDDIMinimalCutsetRef__isset {
  _TDDIMinimalCutsetRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIMinimalCutsetRef__isset;

class TDDIMinimalCutsetRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIMinimalCutsetRef(const TDDIMinimalCutsetRef&);
  TDDIMinimalCutsetRef& operator=(const TDDIMinimalCutsetRef&);
  TDDIMinimalCutsetRef() : ref() {
  }

  virtual ~TDDIMinimalCutsetRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutset> ref;

  _TDDIMinimalCutsetRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutset> val);

  bool operator == (const TDDIMinimalCutsetRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIMinimalCutsetRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMinimalCutsetRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMinimalCutsetRef &a, TDDIMinimalCutsetRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIMinimalCutsetRef& obj);

typedef struct _TDDIAbstractFTAPackageRef__isset {
  _TDDIAbstractFTAPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFTAPackageRef__isset;

class TDDIAbstractFTAPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFTAPackageRef(const TDDIAbstractFTAPackageRef&);
  TDDIAbstractFTAPackageRef& operator=(const TDDIAbstractFTAPackageRef&);
  TDDIAbstractFTAPackageRef() : ref() {
  }

  virtual ~TDDIAbstractFTAPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> ref;

  _TDDIAbstractFTAPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> val);

  bool operator == (const TDDIAbstractFTAPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFTAPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFTAPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFTAPackageRef &a, TDDIAbstractFTAPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFTAPackageRef& obj);

typedef struct _TDDIAbstractHARAPackageRef__isset {
  _TDDIAbstractHARAPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractHARAPackageRef__isset;

class TDDIAbstractHARAPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractHARAPackageRef(const TDDIAbstractHARAPackageRef&);
  TDDIAbstractHARAPackageRef& operator=(const TDDIAbstractHARAPackageRef&);
  TDDIAbstractHARAPackageRef() : ref() {
  }

  virtual ~TDDIAbstractHARAPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> ref;

  _TDDIAbstractHARAPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> val);

  bool operator == (const TDDIAbstractHARAPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractHARAPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractHARAPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractHARAPackageRef &a, TDDIAbstractHARAPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractHARAPackageRef& obj);

typedef struct _TDDIAbstractMeasureRef__isset {
  _TDDIAbstractMeasureRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractMeasureRef__isset;

class TDDIAbstractMeasureRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractMeasureRef(const TDDIAbstractMeasureRef&);
  TDDIAbstractMeasureRef& operator=(const TDDIAbstractMeasureRef&);
  TDDIAbstractMeasureRef() : ref() {
  }

  virtual ~TDDIAbstractMeasureRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> ref;

  _TDDIAbstractMeasureRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> val);

  bool operator == (const TDDIAbstractMeasureRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractMeasureRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractMeasureRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractMeasureRef &a, TDDIAbstractMeasureRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractMeasureRef& obj);

typedef struct _TDDIAbstractRiskParameterRef__isset {
  _TDDIAbstractRiskParameterRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractRiskParameterRef__isset;

class TDDIAbstractRiskParameterRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRiskParameterRef(const TDDIAbstractRiskParameterRef&);
  TDDIAbstractRiskParameterRef& operator=(const TDDIAbstractRiskParameterRef&);
  TDDIAbstractRiskParameterRef() : ref() {
  }

  virtual ~TDDIAbstractRiskParameterRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> ref;

  _TDDIAbstractRiskParameterRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> val);

  bool operator == (const TDDIAbstractRiskParameterRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRiskParameterRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRiskParameterRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRiskParameterRef &a, TDDIAbstractRiskParameterRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRiskParameterRef& obj);

typedef struct _TDDIAbstractODEPackageRef__isset {
  _TDDIAbstractODEPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractODEPackageRef__isset;

class TDDIAbstractODEPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractODEPackageRef(const TDDIAbstractODEPackageRef&);
  TDDIAbstractODEPackageRef& operator=(const TDDIAbstractODEPackageRef&);
  TDDIAbstractODEPackageRef() : ref() {
  }

  virtual ~TDDIAbstractODEPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractODEPackage> ref;

  _TDDIAbstractODEPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractODEPackage> val);

  bool operator == (const TDDIAbstractODEPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractODEPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractODEPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractODEPackageRef &a, TDDIAbstractODEPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractODEPackageRef& obj);

typedef struct _TDDIAbstractMarkovChainPackageRef__isset {
  _TDDIAbstractMarkovChainPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractMarkovChainPackageRef__isset;

class TDDIAbstractMarkovChainPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractMarkovChainPackageRef(const TDDIAbstractMarkovChainPackageRef&);
  TDDIAbstractMarkovChainPackageRef& operator=(const TDDIAbstractMarkovChainPackageRef&);
  TDDIAbstractMarkovChainPackageRef() : ref() {
  }

  virtual ~TDDIAbstractMarkovChainPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovChainPackage> ref;

  _TDDIAbstractMarkovChainPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovChainPackage> val);

  bool operator == (const TDDIAbstractMarkovChainPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractMarkovChainPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractMarkovChainPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractMarkovChainPackageRef &a, TDDIAbstractMarkovChainPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractMarkovChainPackageRef& obj);

typedef struct _TDDIAbstractRequirementArtifactRef__isset {
  _TDDIAbstractRequirementArtifactRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractRequirementArtifactRef__isset;

class TDDIAbstractRequirementArtifactRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRequirementArtifactRef(const TDDIAbstractRequirementArtifactRef&);
  TDDIAbstractRequirementArtifactRef& operator=(const TDDIAbstractRequirementArtifactRef&);
  TDDIAbstractRequirementArtifactRef() : ref() {
  }

  virtual ~TDDIAbstractRequirementArtifactRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementArtifact> ref;

  _TDDIAbstractRequirementArtifactRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementArtifact> val);

  bool operator == (const TDDIAbstractRequirementArtifactRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRequirementArtifactRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRequirementArtifactRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRequirementArtifactRef &a, TDDIAbstractRequirementArtifactRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementArtifactRef& obj);

typedef struct _TDDIAbstractRequirementPackageRef__isset {
  _TDDIAbstractRequirementPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractRequirementPackageRef__isset;

class TDDIAbstractRequirementPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRequirementPackageRef(const TDDIAbstractRequirementPackageRef&);
  TDDIAbstractRequirementPackageRef& operator=(const TDDIAbstractRequirementPackageRef&);
  TDDIAbstractRequirementPackageRef() : ref() {
  }

  virtual ~TDDIAbstractRequirementPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementPackage> ref;

  _TDDIAbstractRequirementPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementPackage> val);

  bool operator == (const TDDIAbstractRequirementPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRequirementPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRequirementPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRequirementPackageRef &a, TDDIAbstractRequirementPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementPackageRef& obj);

typedef struct _TDDIAbstractFailureRef__isset {
  _TDDIAbstractFailureRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFailureRef__isset;

class TDDIAbstractFailureRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailureRef(const TDDIAbstractFailureRef&);
  TDDIAbstractFailureRef& operator=(const TDDIAbstractFailureRef&);
  TDDIAbstractFailureRef() : ref() {
  }

  virtual ~TDDIAbstractFailureRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> ref;

  _TDDIAbstractFailureRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  bool operator == (const TDDIAbstractFailureRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailureRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailureRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailureRef &a, TDDIAbstractFailureRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureRef& obj);

typedef struct _TDDIMaintenanceProcedureRef__isset {
  _TDDIMaintenanceProcedureRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIMaintenanceProcedureRef__isset;

class TDDIMaintenanceProcedureRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIMaintenanceProcedureRef(const TDDIMaintenanceProcedureRef&);
  TDDIMaintenanceProcedureRef& operator=(const TDDIMaintenanceProcedureRef&);
  TDDIMaintenanceProcedureRef() : ref() {
  }

  virtual ~TDDIMaintenanceProcedureRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> ref;

  _TDDIMaintenanceProcedureRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val);

  bool operator == (const TDDIMaintenanceProcedureRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIMaintenanceProcedureRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMaintenanceProcedureRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMaintenanceProcedureRef &a, TDDIMaintenanceProcedureRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIMaintenanceProcedureRef& obj);

typedef struct _TDDIHazardRef__isset {
  _TDDIHazardRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIHazardRef__isset;

class TDDIHazardRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazardRef(const TDDIHazardRef&);
  TDDIHazardRef& operator=(const TDDIHazardRef&);
  TDDIHazardRef() : ref() {
  }

  virtual ~TDDIHazardRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIHazard> ref;

  _TDDIHazardRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIHazard> val);

  bool operator == (const TDDIHazardRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIHazardRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazardRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazardRef &a, TDDIHazardRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazardRef& obj);

typedef struct _TDDIImplementationConstraintRef__isset {
  _TDDIImplementationConstraintRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIImplementationConstraintRef__isset;

class TDDIImplementationConstraintRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIImplementationConstraintRef(const TDDIImplementationConstraintRef&);
  TDDIImplementationConstraintRef& operator=(const TDDIImplementationConstraintRef&);
  TDDIImplementationConstraintRef() : ref() {
  }

  virtual ~TDDIImplementationConstraintRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> ref;

  _TDDIImplementationConstraintRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> val);

  bool operator == (const TDDIImplementationConstraintRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIImplementationConstraintRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIImplementationConstraintRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIImplementationConstraintRef &a, TDDIImplementationConstraintRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIImplementationConstraintRef& obj);

typedef struct _TDDINoteRef__isset {
  _TDDINoteRef__isset() : ref(false) {}
  bool ref :1;
} _TDDINoteRef__isset;

class TDDINoteRef : public virtual ::apache::thrift::TBase {
 public:

  TDDINoteRef(const TDDINoteRef&);
  TDDINoteRef& operator=(const TDDINoteRef&);
  TDDINoteRef() : ref() {
  }

  virtual ~TDDINoteRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDINote> ref;

  _TDDINoteRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDINote> val);

  bool operator == (const TDDINoteRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDINoteRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDINoteRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDINoteRef &a, TDDINoteRef &b);

std::ostream& operator<<(std::ostream& out, const TDDINoteRef& obj);

typedef struct _TDDITaggedValueRef__isset {
  _TDDITaggedValueRef__isset() : ref(false) {}
  bool ref :1;
} _TDDITaggedValueRef__isset;

class TDDITaggedValueRef : public virtual ::apache::thrift::TBase {
 public:

  TDDITaggedValueRef(const TDDITaggedValueRef&);
  TDDITaggedValueRef& operator=(const TDDITaggedValueRef&);
  TDDITaggedValueRef() : ref() {
  }

  virtual ~TDDITaggedValueRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> ref;

  _TDDITaggedValueRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> val);

  bool operator == (const TDDITaggedValueRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDITaggedValueRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITaggedValueRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITaggedValueRef &a, TDDITaggedValueRef &b);

std::ostream& operator<<(std::ostream& out, const TDDITaggedValueRef& obj);

typedef struct _TDDIAbstractArtifactElementRef__isset {
  _TDDIAbstractArtifactElementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArtifactElementRef__isset;

class TDDIAbstractArtifactElementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactElementRef(const TDDIAbstractArtifactElementRef&);
  TDDIAbstractArtifactElementRef& operator=(const TDDIAbstractArtifactElementRef&);
  TDDIAbstractArtifactElementRef() : ref() {
  }

  virtual ~TDDIAbstractArtifactElementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> ref;

  _TDDIAbstractArtifactElementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> val);

  bool operator == (const TDDIAbstractArtifactElementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactElementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactElementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactElementRef &a, TDDIAbstractArtifactElementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactElementRef& obj);

typedef struct _TDDIClaimRef__isset {
  _TDDIClaimRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIClaimRef__isset;

class TDDIClaimRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIClaimRef(const TDDIClaimRef&);
  TDDIClaimRef& operator=(const TDDIClaimRef&);
  TDDIClaimRef() : ref() {
  }

  virtual ~TDDIClaimRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIClaim> ref;

  _TDDIClaimRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIClaim> val);

  bool operator == (const TDDIClaimRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIClaimRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIClaimRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIClaimRef &a, TDDIClaimRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIClaimRef& obj);

typedef struct _TDDIAbstractArgumentPackageRef__isset {
  _TDDIAbstractArgumentPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArgumentPackageRef__isset;

class TDDIAbstractArgumentPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentPackageRef(const TDDIAbstractArgumentPackageRef&);
  TDDIAbstractArgumentPackageRef& operator=(const TDDIAbstractArgumentPackageRef&);
  TDDIAbstractArgumentPackageRef() : ref() {
  }

  virtual ~TDDIAbstractArgumentPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> ref;

  _TDDIAbstractArgumentPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> val);

  bool operator == (const TDDIAbstractArgumentPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentPackageRef &a, TDDIAbstractArgumentPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentPackageRef& obj);

typedef struct _TDDIAbstractArgumentationElementRef__isset {
  _TDDIAbstractArgumentationElementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArgumentationElementRef__isset;

class TDDIAbstractArgumentationElementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentationElementRef(const TDDIAbstractArgumentationElementRef&);
  TDDIAbstractArgumentationElementRef& operator=(const TDDIAbstractArgumentationElementRef&);
  TDDIAbstractArgumentationElementRef() : ref() {
  }

  virtual ~TDDIAbstractArgumentationElementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> ref;

  _TDDIAbstractArgumentationElementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> val);

  bool operator == (const TDDIAbstractArgumentationElementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentationElementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentationElementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentationElementRef &a, TDDIAbstractArgumentationElementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentationElementRef& obj);

typedef struct _TDDIAbstractArgumentAssetRef__isset {
  _TDDIAbstractArgumentAssetRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArgumentAssetRef__isset;

class TDDIAbstractArgumentAssetRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentAssetRef(const TDDIAbstractArgumentAssetRef&);
  TDDIAbstractArgumentAssetRef& operator=(const TDDIAbstractArgumentAssetRef&);
  TDDIAbstractArgumentAssetRef() : ref() {
  }

  virtual ~TDDIAbstractArgumentAssetRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> ref;

  _TDDIAbstractArgumentAssetRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> val);

  bool operator == (const TDDIAbstractArgumentAssetRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentAssetRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentAssetRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentAssetRef &a, TDDIAbstractArgumentAssetRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentAssetRef& obj);

typedef struct _TDDIPropertyRef__isset {
  _TDDIPropertyRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIPropertyRef__isset;

class TDDIPropertyRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIPropertyRef(const TDDIPropertyRef&);
  TDDIPropertyRef& operator=(const TDDIPropertyRef&);
  TDDIPropertyRef() : ref() {
  }

  virtual ~TDDIPropertyRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIProperty> ref;

  _TDDIPropertyRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIProperty> val);

  bool operator == (const TDDIPropertyRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIPropertyRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPropertyRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPropertyRef &a, TDDIPropertyRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIPropertyRef& obj);

typedef struct _TDDIAbstractArtifactAssetRef__isset {
  _TDDIAbstractArtifactAssetRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArtifactAssetRef__isset;

class TDDIAbstractArtifactAssetRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactAssetRef(const TDDIAbstractArtifactAssetRef&);
  TDDIAbstractArtifactAssetRef& operator=(const TDDIAbstractArtifactAssetRef&);
  TDDIAbstractArtifactAssetRef() : ref() {
  }

  virtual ~TDDIAbstractArtifactAssetRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> ref;

  _TDDIAbstractArtifactAssetRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> val);

  bool operator == (const TDDIAbstractArtifactAssetRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactAssetRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactAssetRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactAssetRef &a, TDDIAbstractArtifactAssetRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactAssetRef& obj);

typedef struct _TDDIAbstractAssuranceCasePackageRef__isset {
  _TDDIAbstractAssuranceCasePackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractAssuranceCasePackageRef__isset;

class TDDIAbstractAssuranceCasePackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssuranceCasePackageRef(const TDDIAbstractAssuranceCasePackageRef&);
  TDDIAbstractAssuranceCasePackageRef& operator=(const TDDIAbstractAssuranceCasePackageRef&);
  TDDIAbstractAssuranceCasePackageRef() : ref() {
  }

  virtual ~TDDIAbstractAssuranceCasePackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> ref;

  _TDDIAbstractAssuranceCasePackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> val);

  bool operator == (const TDDIAbstractAssuranceCasePackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssuranceCasePackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssuranceCasePackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssuranceCasePackageRef &a, TDDIAbstractAssuranceCasePackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssuranceCasePackageRef& obj);

typedef struct _TDDIAssuranceCasePackageInterfaceRef__isset {
  _TDDIAssuranceCasePackageInterfaceRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAssuranceCasePackageInterfaceRef__isset;

class TDDIAssuranceCasePackageInterfaceRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackageInterfaceRef(const TDDIAssuranceCasePackageInterfaceRef&);
  TDDIAssuranceCasePackageInterfaceRef& operator=(const TDDIAssuranceCasePackageInterfaceRef&);
  TDDIAssuranceCasePackageInterfaceRef() : ref() {
  }

  virtual ~TDDIAssuranceCasePackageInterfaceRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> ref;

  _TDDIAssuranceCasePackageInterfaceRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> val);

  bool operator == (const TDDIAssuranceCasePackageInterfaceRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackageInterfaceRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackageInterfaceRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackageInterfaceRef &a, TDDIAssuranceCasePackageInterfaceRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageInterfaceRef& obj);

typedef struct _TDDIAbstractArtifactPackageRef__isset {
  _TDDIAbstractArtifactPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArtifactPackageRef__isset;

class TDDIAbstractArtifactPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactPackageRef(const TDDIAbstractArtifactPackageRef&);
  TDDIAbstractArtifactPackageRef& operator=(const TDDIAbstractArtifactPackageRef&);
  TDDIAbstractArtifactPackageRef() : ref() {
  }

  virtual ~TDDIAbstractArtifactPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> ref;

  _TDDIAbstractArtifactPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> val);

  bool operator == (const TDDIAbstractArtifactPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactPackageRef &a, TDDIAbstractArtifactPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactPackageRef& obj);

typedef struct _TDDIAbstractTerminologyPackageRef__isset {
  _TDDIAbstractTerminologyPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractTerminologyPackageRef__isset;

class TDDIAbstractTerminologyPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractTerminologyPackageRef(const TDDIAbstractTerminologyPackageRef&);
  TDDIAbstractTerminologyPackageRef& operator=(const TDDIAbstractTerminologyPackageRef&);
  TDDIAbstractTerminologyPackageRef() : ref() {
  }

  virtual ~TDDIAbstractTerminologyPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> ref;

  _TDDIAbstractTerminologyPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> val);

  bool operator == (const TDDIAbstractTerminologyPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractTerminologyPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractTerminologyPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractTerminologyPackageRef &a, TDDIAbstractTerminologyPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyPackageRef& obj);

typedef struct _TDDIAbstractExpressionElementRef__isset {
  _TDDIAbstractExpressionElementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractExpressionElementRef__isset;

class TDDIAbstractExpressionElementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractExpressionElementRef(const TDDIAbstractExpressionElementRef&);
  TDDIAbstractExpressionElementRef& operator=(const TDDIAbstractExpressionElementRef&);
  TDDIAbstractExpressionElementRef() : ref() {
  }

  virtual ~TDDIAbstractExpressionElementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> ref;

  _TDDIAbstractExpressionElementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> val);

  bool operator == (const TDDIAbstractExpressionElementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractExpressionElementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractExpressionElementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractExpressionElementRef &a, TDDIAbstractExpressionElementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractExpressionElementRef& obj);

typedef struct _TDDIArchitecturePackageUnion__isset {
  _TDDIArchitecturePackageUnion__isset() : ArchitecturePackage(false), ArchitecturePackageInterface(false), ArchitecturePackageBinding(false) {}
  bool ArchitecturePackage :1;
  bool ArchitecturePackageInterface :1;
  bool ArchitecturePackageBinding :1;
} _TDDIArchitecturePackageUnion__isset;

class TDDIArchitecturePackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArchitecturePackageUnion(const TDDIArchitecturePackageUnion&);
  TDDIArchitecturePackageUnion& operator=(const TDDIArchitecturePackageUnion&);
  TDDIArchitecturePackageUnion() : ArchitecturePackage(), ArchitecturePackageInterface(), ArchitecturePackageBinding() {
  }

  virtual ~TDDIArchitecturePackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackage> ArchitecturePackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackageInterface> ArchitecturePackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackageBinding> ArchitecturePackageBinding;

  _TDDIArchitecturePackageUnion__isset __isset;

  void __set_ArchitecturePackage(::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackage> val);

  void __set_ArchitecturePackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackageInterface> val);

  void __set_ArchitecturePackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArchitecturePackageBinding> val);

  bool operator == (const TDDIArchitecturePackageUnion & rhs) const
  {
    if (__isset.ArchitecturePackage != rhs.__isset.ArchitecturePackage)
      return false;
    else if (__isset.ArchitecturePackage && !(ArchitecturePackage == rhs.ArchitecturePackage))
      return false;
    if (__isset.ArchitecturePackageInterface != rhs.__isset.ArchitecturePackageInterface)
      return false;
    else if (__isset.ArchitecturePackageInterface && !(ArchitecturePackageInterface == rhs.ArchitecturePackageInterface))
      return false;
    if (__isset.ArchitecturePackageBinding != rhs.__isset.ArchitecturePackageBinding)
      return false;
    else if (__isset.ArchitecturePackageBinding && !(ArchitecturePackageBinding == rhs.ArchitecturePackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIArchitecturePackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArchitecturePackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArchitecturePackageUnion &a, TDDIArchitecturePackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackageUnion& obj);

typedef struct _TDDIAbstractArchitecturePackage__isset {
  _TDDIAbstractArchitecturePackage__isset() : UsedArchitecturePackage(false), UsedArchitecturePackageType(false) {}
  bool UsedArchitecturePackage :1;
  bool UsedArchitecturePackageType :1;
} _TDDIAbstractArchitecturePackage__isset;

class TDDIAbstractArchitecturePackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArchitecturePackage(const TDDIAbstractArchitecturePackage&);
  TDDIAbstractArchitecturePackage& operator=(const TDDIAbstractArchitecturePackage&);
  TDDIAbstractArchitecturePackage() : UsedArchitecturePackageType((TDDIArchitecturePackageUnionType)0) {
  }

  virtual ~TDDIAbstractArchitecturePackage() throw();
  TDDIArchitecturePackageUnion UsedArchitecturePackage;
  TDDIArchitecturePackageUnionType UsedArchitecturePackageType;

  _TDDIAbstractArchitecturePackage__isset __isset;

  void __set_UsedArchitecturePackage(const TDDIArchitecturePackageUnion& val);

  void __set_UsedArchitecturePackageType(const TDDIArchitecturePackageUnionType val);

  bool operator == (const TDDIAbstractArchitecturePackage & rhs) const
  {
    if (!(UsedArchitecturePackage == rhs.UsedArchitecturePackage))
      return false;
    if (!(UsedArchitecturePackageType == rhs.UsedArchitecturePackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArchitecturePackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArchitecturePackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArchitecturePackage &a, TDDIAbstractArchitecturePackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArchitecturePackage& obj);

typedef struct _TDDIArchitecturePackage__isset {
  _TDDIArchitecturePackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), DesignArtifacts(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool DesignArtifacts :1;
} _TDDIArchitecturePackage__isset;

class TDDIArchitecturePackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIArchitecturePackage(const TDDIArchitecturePackage&);
  TDDIArchitecturePackage& operator=(const TDDIArchitecturePackage&);
  TDDIArchitecturePackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel() {



  }

  virtual ~TDDIArchitecturePackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractDesignArtifactRef>  DesignArtifacts;

  _TDDIArchitecturePackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_DesignArtifacts(const std::vector<TDDIAbstractDesignArtifactRef> & val);

  bool operator == (const TDDIArchitecturePackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(DesignArtifacts == rhs.DesignArtifacts))
      return false;
    return true;
  }
  bool operator != (const TDDIArchitecturePackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArchitecturePackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArchitecturePackage &a, TDDIArchitecturePackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackage& obj);

typedef struct _TDDIArchitecturePackageInterface__isset {
  _TDDIArchitecturePackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), DesignArtifacts(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool DesignArtifacts :1;
  bool Implements :1;
} _TDDIArchitecturePackageInterface__isset;

class TDDIArchitecturePackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIArchitecturePackageInterface(const TDDIArchitecturePackageInterface&);
  TDDIArchitecturePackageInterface& operator=(const TDDIArchitecturePackageInterface&);
  TDDIArchitecturePackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel() {



  }

  virtual ~TDDIArchitecturePackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractDesignArtifactRef>  DesignArtifacts;
  TDDIAbstractArchitecturePackage Implements;

  _TDDIArchitecturePackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_DesignArtifacts(const std::vector<TDDIAbstractDesignArtifactRef> & val);

  void __set_Implements(const TDDIAbstractArchitecturePackage& val);

  bool operator == (const TDDIArchitecturePackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(DesignArtifacts == rhs.DesignArtifacts))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIArchitecturePackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArchitecturePackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArchitecturePackageInterface &a, TDDIArchitecturePackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackageInterface& obj);

typedef struct _TDDIArchitecturePackageBinding__isset {
  _TDDIArchitecturePackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), DesignArtifacts(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool DesignArtifacts :1;
  bool ParticipantPackages :1;
} _TDDIArchitecturePackageBinding__isset;

class TDDIArchitecturePackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIArchitecturePackageBinding(const TDDIArchitecturePackageBinding&);
  TDDIArchitecturePackageBinding& operator=(const TDDIArchitecturePackageBinding&);
  TDDIArchitecturePackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel() {




  }

  virtual ~TDDIArchitecturePackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractDesignArtifactRef>  DesignArtifacts;
  std::vector<TDDIAbstractArchitecturePackageRef>  ParticipantPackages;

  _TDDIArchitecturePackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_DesignArtifacts(const std::vector<TDDIAbstractDesignArtifactRef> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractArchitecturePackageRef> & val);

  bool operator == (const TDDIArchitecturePackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(DesignArtifacts == rhs.DesignArtifacts))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIArchitecturePackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArchitecturePackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArchitecturePackageBinding &a, TDDIArchitecturePackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIArchitecturePackageBinding& obj);

typedef struct _TDDIPerfChars__isset {
  _TDDIPerfChars__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), ResponseTime(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool ResponseTime :1;
} _TDDIPerfChars__isset;

class TDDIPerfChars : public virtual ::apache::thrift::TBase {
 public:

  TDDIPerfChars(const TDDIPerfChars&);
  TDDIPerfChars& operator=(const TDDIPerfChars&);
  TDDIPerfChars() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), ResponseTime(0) {


  }

  virtual ~TDDIPerfChars() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  double ResponseTime;

  _TDDIPerfChars__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_ResponseTime(const double val);

  bool operator == (const TDDIPerfChars & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(ResponseTime == rhs.ResponseTime))
      return false;
    return true;
  }
  bool operator != (const TDDIPerfChars &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPerfChars & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPerfChars &a, TDDIPerfChars &b);

std::ostream& operator<<(std::ostream& out, const TDDIPerfChars& obj);

typedef struct _TDDIPort__isset {
  _TDDIPort__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), FlowType(true), Direction(true), RefinedPorts(true), InterfaceFailures(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool FlowType :1;
  bool Direction :1;
  bool RefinedPorts :1;
  bool InterfaceFailures :1;
} _TDDIPort__isset;

class TDDIPort : public virtual ::apache::thrift::TBase {
 public:

  TDDIPort(const TDDIPort&);
  TDDIPort& operator=(const TDDIPort&);
  TDDIPort() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), FlowType(""), Direction((TDDIPortDirection)0) {


    Direction = (TDDIPortDirection)0;



  }

  virtual ~TDDIPort() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::string FlowType;
  TDDIPortDirection Direction;
  std::vector<TDDIPortRef>  RefinedPorts;
  std::vector<TDDIAbstractInterfaceFailureRef>  InterfaceFailures;

  _TDDIPort__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_FlowType(const std::string& val);

  void __set_Direction(const TDDIPortDirection val);

  void __set_RefinedPorts(const std::vector<TDDIPortRef> & val);

  void __set_InterfaceFailures(const std::vector<TDDIAbstractInterfaceFailureRef> & val);

  bool operator == (const TDDIPort & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(FlowType == rhs.FlowType))
      return false;
    if (!(Direction == rhs.Direction))
      return false;
    if (!(RefinedPorts == rhs.RefinedPorts))
      return false;
    if (!(InterfaceFailures == rhs.InterfaceFailures))
      return false;
    return true;
  }
  bool operator != (const TDDIPort &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPort & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPort &a, TDDIPort &b);

std::ostream& operator<<(std::ostream& out, const TDDIPort& obj);

typedef struct _TDDISignal__isset {
  _TDDISignal__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
} _TDDISignal__isset;

class TDDISignal : public virtual ::apache::thrift::TBase {
 public:

  TDDISignal(const TDDISignal&);
  TDDISignal& operator=(const TDDISignal&);
  TDDISignal() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel() {


  }

  virtual ~TDDISignal() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  TDDIPort FromPort;
  TDDIPort ToPort;

  _TDDISignal__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_FromPort(const TDDIPort& val);

  void __set_ToPort(const TDDIPort& val);

  bool operator == (const TDDISignal & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(FromPort == rhs.FromPort))
      return false;
    if (!(ToPort == rhs.ToPort))
      return false;
    return true;
  }
  bool operator != (const TDDISignal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISignal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISignal &a, TDDISignal &b);

std::ostream& operator<<(std::ostream& out, const TDDISignal& obj);

typedef struct _TDDIConfiguration__isset {
  _TDDIConfiguration__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), SubSystems(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubSystems :1;
} _TDDIConfiguration__isset;

class TDDIConfiguration : public virtual ::apache::thrift::TBase {
 public:

  TDDIConfiguration(const TDDIConfiguration&);
  TDDIConfiguration& operator=(const TDDIConfiguration&);
  TDDIConfiguration() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel() {



  }

  virtual ~TDDIConfiguration() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractSystemRef>  SubSystems;

  _TDDIConfiguration__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  bool operator == (const TDDIConfiguration & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    return true;
  }
  bool operator != (const TDDIConfiguration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIConfiguration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIConfiguration &a, TDDIConfiguration &b);

std::ostream& operator<<(std::ostream& out, const TDDIConfiguration& obj);

typedef struct _TDDIContext__isset {
  _TDDIContext__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), UsageHistory(true), MissionTime(true), MissionTimeTimeUnit(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool UsageHistory :1;
  bool MissionTime :1;
  bool MissionTimeTimeUnit :1;
} _TDDIContext__isset;

class TDDIContext : public virtual ::apache::thrift::TBase {
 public:

  TDDIContext(const TDDIContext&);
  TDDIContext& operator=(const TDDIContext&);
  TDDIContext() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), UsageHistory(""), MissionTime(0), MissionTimeTimeUnit((TDDITimeUnit)3) {


    MissionTimeTimeUnit = (TDDITimeUnit)3;

  }

  virtual ~TDDIContext() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::string UsageHistory;
  double MissionTime;
  TDDITimeUnit MissionTimeTimeUnit;

  _TDDIContext__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_UsageHistory(const std::string& val);

  void __set_MissionTime(const double val);

  void __set_MissionTimeTimeUnit(const TDDITimeUnit val);

  bool operator == (const TDDIContext & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(UsageHistory == rhs.UsageHistory))
      return false;
    if (!(MissionTime == rhs.MissionTime))
      return false;
    if (!(MissionTimeTimeUnit == rhs.MissionTimeTimeUnit))
      return false;
    return true;
  }
  bool operator != (const TDDIContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIContext &a, TDDIContext &b);

std::ostream& operator<<(std::ostream& out, const TDDIContext& obj);

typedef struct _TDDISystemBoundary__isset {
  _TDDISystemBoundary__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), Ports(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool Ports :1;
} _TDDISystemBoundary__isset;

class TDDISystemBoundary : public virtual ::apache::thrift::TBase {
 public:

  TDDISystemBoundary(const TDDISystemBoundary&);
  TDDISystemBoundary& operator=(const TDDISystemBoundary&);
  TDDISystemBoundary() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel() {



  }

  virtual ~TDDISystemBoundary() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIPortRef>  Ports;

  _TDDISystemBoundary__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_Ports(const std::vector<TDDIPortRef> & val);

  bool operator == (const TDDISystemBoundary & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    return true;
  }
  bool operator != (const TDDISystemBoundary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISystemBoundary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISystemBoundary &a, TDDISystemBoundary &b);

std::ostream& operator<<(std::ostream& out, const TDDISystemBoundary& obj);

typedef struct _TDDISystem__isset {
  _TDDISystem__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), SubSystems(true), OverallLifetime(true), OverallLifetimeTimeUnit(true), RealisedFunctions(true), Configurations(true), Contexts(true), SystemBoundaries(true), AppliedStandards(true), FailureModels(true), Ports(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubSystems :1;
  bool OverallLifetime :1;
  bool OverallLifetimeTimeUnit :1;
  bool RealisedFunctions :1;
  bool Configurations :1;
  bool Contexts :1;
  bool SystemBoundaries :1;
  bool AppliedStandards :1;
  bool FailureModels :1;
  bool Ports :1;
} _TDDISystem__isset;

class TDDISystem : public virtual ::apache::thrift::TBase {
 public:

  TDDISystem(const TDDISystem&);
  TDDISystem& operator=(const TDDISystem&);
  TDDISystem() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), OverallLifetime(0), OverallLifetimeTimeUnit((TDDITimeUnit)3) {



    OverallLifetimeTimeUnit = (TDDITimeUnit)3;








  }

  virtual ~TDDISystem() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractSystemRef>  SubSystems;
  double OverallLifetime;
  TDDITimeUnit OverallLifetimeTimeUnit;
  std::vector<TDDIAbstractFunctionRef>  RealisedFunctions;
  std::vector<TDDIConfiguration>  Configurations;
  std::vector<TDDIContext>  Contexts;
  std::vector<TDDISystemBoundary>  SystemBoundaries;
  std::vector<TDDIAbstractStandardRef>  AppliedStandards;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureModels;
  std::vector<TDDIPortRef>  Ports;

  _TDDISystem__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  void __set_OverallLifetime(const double val);

  void __set_OverallLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_Configurations(const std::vector<TDDIConfiguration> & val);

  void __set_Contexts(const std::vector<TDDIContext> & val);

  void __set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val);

  void __set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_Ports(const std::vector<TDDIPortRef> & val);

  bool operator == (const TDDISystem & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    if (!(OverallLifetime == rhs.OverallLifetime))
      return false;
    if (!(OverallLifetimeTimeUnit == rhs.OverallLifetimeTimeUnit))
      return false;
    if (!(RealisedFunctions == rhs.RealisedFunctions))
      return false;
    if (!(Configurations == rhs.Configurations))
      return false;
    if (!(Contexts == rhs.Contexts))
      return false;
    if (!(SystemBoundaries == rhs.SystemBoundaries))
      return false;
    if (!(AppliedStandards == rhs.AppliedStandards))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    return true;
  }
  bool operator != (const TDDISystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISystem &a, TDDISystem &b);

std::ostream& operator<<(std::ostream& out, const TDDISystem& obj);

typedef struct _TDDILogicalComponent__isset {
  _TDDILogicalComponent__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), SubSystems(true), OverallLifetime(true), OverallLifetimeTimeUnit(true), RealisedFunctions(true), Configurations(true), Contexts(true), SystemBoundaries(true), AppliedStandards(true), FailureModels(true), Ports(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubSystems :1;
  bool OverallLifetime :1;
  bool OverallLifetimeTimeUnit :1;
  bool RealisedFunctions :1;
  bool Configurations :1;
  bool Contexts :1;
  bool SystemBoundaries :1;
  bool AppliedStandards :1;
  bool FailureModels :1;
  bool Ports :1;
} _TDDILogicalComponent__isset;

class TDDILogicalComponent : public virtual ::apache::thrift::TBase {
 public:

  TDDILogicalComponent(const TDDILogicalComponent&);
  TDDILogicalComponent& operator=(const TDDILogicalComponent&);
  TDDILogicalComponent() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), OverallLifetime(0), OverallLifetimeTimeUnit((TDDITimeUnit)3) {



    OverallLifetimeTimeUnit = (TDDITimeUnit)3;








  }

  virtual ~TDDILogicalComponent() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractSystemRef>  SubSystems;
  double OverallLifetime;
  TDDITimeUnit OverallLifetimeTimeUnit;
  std::vector<TDDIAbstractFunctionRef>  RealisedFunctions;
  std::vector<TDDIConfiguration>  Configurations;
  std::vector<TDDIContext>  Contexts;
  std::vector<TDDISystemBoundary>  SystemBoundaries;
  std::vector<TDDIAbstractStandardRef>  AppliedStandards;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureModels;
  std::vector<TDDIPortRef>  Ports;

  _TDDILogicalComponent__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  void __set_OverallLifetime(const double val);

  void __set_OverallLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_Configurations(const std::vector<TDDIConfiguration> & val);

  void __set_Contexts(const std::vector<TDDIContext> & val);

  void __set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val);

  void __set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_Ports(const std::vector<TDDIPortRef> & val);

  bool operator == (const TDDILogicalComponent & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    if (!(OverallLifetime == rhs.OverallLifetime))
      return false;
    if (!(OverallLifetimeTimeUnit == rhs.OverallLifetimeTimeUnit))
      return false;
    if (!(RealisedFunctions == rhs.RealisedFunctions))
      return false;
    if (!(Configurations == rhs.Configurations))
      return false;
    if (!(Contexts == rhs.Contexts))
      return false;
    if (!(SystemBoundaries == rhs.SystemBoundaries))
      return false;
    if (!(AppliedStandards == rhs.AppliedStandards))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    return true;
  }
  bool operator != (const TDDILogicalComponent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILogicalComponent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILogicalComponent &a, TDDILogicalComponent &b);

std::ostream& operator<<(std::ostream& out, const TDDILogicalComponent& obj);

typedef struct _TDDISafetyRelatedSystem__isset {
  _TDDISafetyRelatedSystem__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), SubSystems(true), OverallLifetime(true), OverallLifetimeTimeUnit(true), RealisedFunctions(true), Configurations(true), Contexts(true), SystemBoundaries(true), AppliedStandards(true), FailureModels(true), Ports(true), SafeState(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubSystems :1;
  bool OverallLifetime :1;
  bool OverallLifetimeTimeUnit :1;
  bool RealisedFunctions :1;
  bool Configurations :1;
  bool Contexts :1;
  bool SystemBoundaries :1;
  bool AppliedStandards :1;
  bool FailureModels :1;
  bool Ports :1;
  bool SafeState :1;
} _TDDISafetyRelatedSystem__isset;

class TDDISafetyRelatedSystem : public virtual ::apache::thrift::TBase {
 public:

  TDDISafetyRelatedSystem(const TDDISafetyRelatedSystem&);
  TDDISafetyRelatedSystem& operator=(const TDDISafetyRelatedSystem&);
  TDDISafetyRelatedSystem() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), OverallLifetime(0), OverallLifetimeTimeUnit((TDDITimeUnit)3), SafeState("") {



    OverallLifetimeTimeUnit = (TDDITimeUnit)3;








  }

  virtual ~TDDISafetyRelatedSystem() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractSystemRef>  SubSystems;
  double OverallLifetime;
  TDDITimeUnit OverallLifetimeTimeUnit;
  std::vector<TDDIAbstractFunctionRef>  RealisedFunctions;
  std::vector<TDDIConfiguration>  Configurations;
  std::vector<TDDIContext>  Contexts;
  std::vector<TDDISystemBoundary>  SystemBoundaries;
  std::vector<TDDIAbstractStandardRef>  AppliedStandards;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureModels;
  std::vector<TDDIPortRef>  Ports;
  std::string SafeState;

  _TDDISafetyRelatedSystem__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  void __set_OverallLifetime(const double val);

  void __set_OverallLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_Configurations(const std::vector<TDDIConfiguration> & val);

  void __set_Contexts(const std::vector<TDDIContext> & val);

  void __set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val);

  void __set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_Ports(const std::vector<TDDIPortRef> & val);

  void __set_SafeState(const std::string& val);

  bool operator == (const TDDISafetyRelatedSystem & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    if (!(OverallLifetime == rhs.OverallLifetime))
      return false;
    if (!(OverallLifetimeTimeUnit == rhs.OverallLifetimeTimeUnit))
      return false;
    if (!(RealisedFunctions == rhs.RealisedFunctions))
      return false;
    if (!(Configurations == rhs.Configurations))
      return false;
    if (!(Contexts == rhs.Contexts))
      return false;
    if (!(SystemBoundaries == rhs.SystemBoundaries))
      return false;
    if (!(AppliedStandards == rhs.AppliedStandards))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(SafeState == rhs.SafeState))
      return false;
    return true;
  }
  bool operator != (const TDDISafetyRelatedSystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISafetyRelatedSystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISafetyRelatedSystem &a, TDDISafetyRelatedSystem &b);

std::ostream& operator<<(std::ostream& out, const TDDISafetyRelatedSystem& obj);

typedef struct _TDDILifecycleCondition__isset {
  _TDDILifecycleCondition__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), Value(true), Conditions(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool Value :1;
  bool Conditions :1;
} _TDDILifecycleCondition__isset;

class TDDILifecycleCondition : public virtual ::apache::thrift::TBase {
 public:

  TDDILifecycleCondition(const TDDILifecycleCondition&);
  TDDILifecycleCondition& operator=(const TDDILifecycleCondition&);
  TDDILifecycleCondition() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), Value("") {



  }

  virtual ~TDDILifecycleCondition() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::string Value;
  std::vector<TDDILifecycleConditionRef>  Conditions;

  _TDDILifecycleCondition__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_Value(const std::string& val);

  void __set_Conditions(const std::vector<TDDILifecycleConditionRef> & val);

  bool operator == (const TDDILifecycleCondition & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Conditions == rhs.Conditions))
      return false;
    return true;
  }
  bool operator != (const TDDILifecycleCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILifecycleCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILifecycleCondition &a, TDDILifecycleCondition &b);

std::ostream& operator<<(std::ostream& out, const TDDILifecycleCondition& obj);

typedef struct _TDDIPhysicalComponent__isset {
  _TDDIPhysicalComponent__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), SubSystems(true), OverallLifetime(true), OverallLifetimeTimeUnit(true), RealisedFunctions(true), Configurations(true), Contexts(true), SystemBoundaries(true), AppliedStandards(true), FailureModels(true), Ports(true), Dimensions(true), PricePerUnit(false), Mass(true), ProtectionCategory(false), UsefulLifetime(true), UsefulLifetimeTimeUnit(true), LogicalComponents(true), LifecycleConditions(true), MaintenanceProcedure(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubSystems :1;
  bool OverallLifetime :1;
  bool OverallLifetimeTimeUnit :1;
  bool RealisedFunctions :1;
  bool Configurations :1;
  bool Contexts :1;
  bool SystemBoundaries :1;
  bool AppliedStandards :1;
  bool FailureModels :1;
  bool Ports :1;
  bool Dimensions :1;
  bool PricePerUnit :1;
  bool Mass :1;
  bool ProtectionCategory :1;
  bool UsefulLifetime :1;
  bool UsefulLifetimeTimeUnit :1;
  bool LogicalComponents :1;
  bool LifecycleConditions :1;
  bool MaintenanceProcedure :1;
} _TDDIPhysicalComponent__isset;

class TDDIPhysicalComponent : public virtual ::apache::thrift::TBase {
 public:

  TDDIPhysicalComponent(const TDDIPhysicalComponent&);
  TDDIPhysicalComponent& operator=(const TDDIPhysicalComponent&);
  TDDIPhysicalComponent() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), OverallLifetime(0), OverallLifetimeTimeUnit((TDDITimeUnit)3), Dimensions(""), PricePerUnit(0), Mass(0), ProtectionCategory(0), UsefulLifetime(0), UsefulLifetimeTimeUnit((TDDITimeUnit)0), MaintenanceProcedure() {



    OverallLifetimeTimeUnit = (TDDITimeUnit)3;








    UsefulLifetimeTimeUnit = (TDDITimeUnit)0;



  }

  virtual ~TDDIPhysicalComponent() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractSystemRef>  SubSystems;
  double OverallLifetime;
  TDDITimeUnit OverallLifetimeTimeUnit;
  std::vector<TDDIAbstractFunctionRef>  RealisedFunctions;
  std::vector<TDDIConfiguration>  Configurations;
  std::vector<TDDIContext>  Contexts;
  std::vector<TDDISystemBoundary>  SystemBoundaries;
  std::vector<TDDIAbstractStandardRef>  AppliedStandards;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureModels;
  std::vector<TDDIPortRef>  Ports;
  std::string Dimensions;
  int32_t PricePerUnit;
  double Mass;
  int32_t ProtectionCategory;
  double UsefulLifetime;
  TDDITimeUnit UsefulLifetimeTimeUnit;
  std::vector<TDDILogicalComponent>  LogicalComponents;
  std::vector<TDDILifecycleCondition>  LifecycleConditions;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> MaintenanceProcedure;

  _TDDIPhysicalComponent__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  void __set_OverallLifetime(const double val);

  void __set_OverallLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_Configurations(const std::vector<TDDIConfiguration> & val);

  void __set_Contexts(const std::vector<TDDIContext> & val);

  void __set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val);

  void __set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_Ports(const std::vector<TDDIPortRef> & val);

  void __set_Dimensions(const std::string& val);

  void __set_PricePerUnit(const int32_t val);

  void __set_Mass(const double val);

  void __set_ProtectionCategory(const int32_t val);

  void __set_UsefulLifetime(const double val);

  void __set_UsefulLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_LogicalComponents(const std::vector<TDDILogicalComponent> & val);

  void __set_LifecycleConditions(const std::vector<TDDILifecycleCondition> & val);

  void __set_MaintenanceProcedure(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val);

  bool operator == (const TDDIPhysicalComponent & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    if (!(OverallLifetime == rhs.OverallLifetime))
      return false;
    if (!(OverallLifetimeTimeUnit == rhs.OverallLifetimeTimeUnit))
      return false;
    if (!(RealisedFunctions == rhs.RealisedFunctions))
      return false;
    if (!(Configurations == rhs.Configurations))
      return false;
    if (!(Contexts == rhs.Contexts))
      return false;
    if (!(SystemBoundaries == rhs.SystemBoundaries))
      return false;
    if (!(AppliedStandards == rhs.AppliedStandards))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(Dimensions == rhs.Dimensions))
      return false;
    if (!(PricePerUnit == rhs.PricePerUnit))
      return false;
    if (!(Mass == rhs.Mass))
      return false;
    if (!(ProtectionCategory == rhs.ProtectionCategory))
      return false;
    if (!(UsefulLifetime == rhs.UsefulLifetime))
      return false;
    if (!(UsefulLifetimeTimeUnit == rhs.UsefulLifetimeTimeUnit))
      return false;
    if (!(LogicalComponents == rhs.LogicalComponents))
      return false;
    if (!(LifecycleConditions == rhs.LifecycleConditions))
      return false;
    if (!(MaintenanceProcedure == rhs.MaintenanceProcedure))
      return false;
    return true;
  }
  bool operator != (const TDDIPhysicalComponent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPhysicalComponent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPhysicalComponent &a, TDDIPhysicalComponent &b);

std::ostream& operator<<(std::ostream& out, const TDDIPhysicalComponent& obj);

typedef struct _TDDISystemUnion__isset {
  _TDDISystemUnion__isset() : System(false), PhysicalComponent(false), LogicalComponent(false), SafetyRelatedSystem(false) {}
  bool System :1;
  bool PhysicalComponent :1;
  bool LogicalComponent :1;
  bool SafetyRelatedSystem :1;
} _TDDISystemUnion__isset;

class TDDISystemUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDISystemUnion(const TDDISystemUnion&);
  TDDISystemUnion& operator=(const TDDISystemUnion&);
  TDDISystemUnion() {
  }

  virtual ~TDDISystemUnion() throw();
  TDDISystem System;
  TDDIPhysicalComponent PhysicalComponent;
  TDDILogicalComponent LogicalComponent;
  TDDISafetyRelatedSystem SafetyRelatedSystem;

  _TDDISystemUnion__isset __isset;

  void __set_System(const TDDISystem& val);

  void __set_PhysicalComponent(const TDDIPhysicalComponent& val);

  void __set_LogicalComponent(const TDDILogicalComponent& val);

  void __set_SafetyRelatedSystem(const TDDISafetyRelatedSystem& val);

  bool operator == (const TDDISystemUnion & rhs) const
  {
    if (__isset.System != rhs.__isset.System)
      return false;
    else if (__isset.System && !(System == rhs.System))
      return false;
    if (__isset.PhysicalComponent != rhs.__isset.PhysicalComponent)
      return false;
    else if (__isset.PhysicalComponent && !(PhysicalComponent == rhs.PhysicalComponent))
      return false;
    if (__isset.LogicalComponent != rhs.__isset.LogicalComponent)
      return false;
    else if (__isset.LogicalComponent && !(LogicalComponent == rhs.LogicalComponent))
      return false;
    if (__isset.SafetyRelatedSystem != rhs.__isset.SafetyRelatedSystem)
      return false;
    else if (__isset.SafetyRelatedSystem && !(SafetyRelatedSystem == rhs.SafetyRelatedSystem))
      return false;
    return true;
  }
  bool operator != (const TDDISystemUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISystemUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISystemUnion &a, TDDISystemUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDISystemUnion& obj);

typedef struct _TDDIAbstractSystem__isset {
  _TDDIAbstractSystem__isset() : UsedSystem(false), UsedSystemType(false) {}
  bool UsedSystem :1;
  bool UsedSystemType :1;
} _TDDIAbstractSystem__isset;

class TDDIAbstractSystem : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractSystem(const TDDIAbstractSystem&);
  TDDIAbstractSystem& operator=(const TDDIAbstractSystem&);
  TDDIAbstractSystem() : UsedSystemType((TDDISystemUnionType)0) {
  }

  virtual ~TDDIAbstractSystem() throw();
  TDDISystemUnion UsedSystem;
  TDDISystemUnionType UsedSystemType;

  _TDDIAbstractSystem__isset __isset;

  void __set_UsedSystem(const TDDISystemUnion& val);

  void __set_UsedSystemType(const TDDISystemUnionType val);

  bool operator == (const TDDIAbstractSystem & rhs) const
  {
    if (!(UsedSystem == rhs.UsedSystem))
      return false;
    if (!(UsedSystemType == rhs.UsedSystemType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractSystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractSystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractSystem &a, TDDIAbstractSystem &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractSystem& obj);

typedef struct _TDDIFunction__isset {
  _TDDIFunction__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), SubFunctions(true), Ports(true), PerfChars(false), FailureModels(true), Malfunctions(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubFunctions :1;
  bool Ports :1;
  bool PerfChars :1;
  bool FailureModels :1;
  bool Malfunctions :1;
} _TDDIFunction__isset;

class TDDIFunction : public virtual ::apache::thrift::TBase {
 public:

  TDDIFunction(const TDDIFunction&);
  TDDIFunction& operator=(const TDDIFunction&);
  TDDIFunction() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel() {






  }

  virtual ~TDDIFunction() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractFunctionRef>  SubFunctions;
  std::vector<TDDIPortRef>  Ports;
  TDDIPerfChars PerfChars;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureModels;
  std::vector<TDDIMalFunctionRef>  Malfunctions;

  _TDDIFunction__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_Ports(const std::vector<TDDIPortRef> & val);

  void __set_PerfChars(const TDDIPerfChars& val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_Malfunctions(const std::vector<TDDIMalFunctionRef> & val);

  bool operator == (const TDDIFunction & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubFunctions == rhs.SubFunctions))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(PerfChars == rhs.PerfChars))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(Malfunctions == rhs.Malfunctions))
      return false;
    return true;
  }
  bool operator != (const TDDIFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFunction &a, TDDIFunction &b);

std::ostream& operator<<(std::ostream& out, const TDDIFunction& obj);

typedef struct _TDDISafetyFunction__isset {
  _TDDISafetyFunction__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityRequirements(true), AssuranceLevel(false), SubFunctions(true), Ports(true), PerfChars(false), FailureModels(true), Malfunctions(true), Object(true), Behavior(true), SafeState(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubFunctions :1;
  bool Ports :1;
  bool PerfChars :1;
  bool FailureModels :1;
  bool Malfunctions :1;
  bool Object :1;
  bool Behavior :1;
  bool SafeState :1;
} _TDDISafetyFunction__isset;

class TDDISafetyFunction : public virtual ::apache::thrift::TBase {
 public:

  TDDISafetyFunction(const TDDISafetyFunction&);
  TDDISafetyFunction& operator=(const TDDISafetyFunction&);
  TDDISafetyFunction() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), AssuranceLevel(), Object(""), Behavior(""), SafeState("") {






  }

  virtual ~TDDISafetyFunction() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractFunctionRef>  SubFunctions;
  std::vector<TDDIPortRef>  Ports;
  TDDIPerfChars PerfChars;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureModels;
  std::vector<TDDIMalFunctionRef>  Malfunctions;
  std::string Object;
  std::string Behavior;
  std::string SafeState;

  _TDDISafetyFunction__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_Ports(const std::vector<TDDIPortRef> & val);

  void __set_PerfChars(const TDDIPerfChars& val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_Malfunctions(const std::vector<TDDIMalFunctionRef> & val);

  void __set_Object(const std::string& val);

  void __set_Behavior(const std::string& val);

  void __set_SafeState(const std::string& val);

  bool operator == (const TDDISafetyFunction & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubFunctions == rhs.SubFunctions))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(PerfChars == rhs.PerfChars))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(Malfunctions == rhs.Malfunctions))
      return false;
    if (!(Object == rhs.Object))
      return false;
    if (!(Behavior == rhs.Behavior))
      return false;
    if (!(SafeState == rhs.SafeState))
      return false;
    return true;
  }
  bool operator != (const TDDISafetyFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISafetyFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISafetyFunction &a, TDDISafetyFunction &b);

std::ostream& operator<<(std::ostream& out, const TDDISafetyFunction& obj);

typedef struct _TDDIFunctionUnion__isset {
  _TDDIFunctionUnion__isset() : Function(false), SafetyFunction(false) {}
  bool Function :1;
  bool SafetyFunction :1;
} _TDDIFunctionUnion__isset;

class TDDIFunctionUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFunctionUnion(const TDDIFunctionUnion&);
  TDDIFunctionUnion& operator=(const TDDIFunctionUnion&);
  TDDIFunctionUnion() {
  }

  virtual ~TDDIFunctionUnion() throw();
  TDDIFunction Function;
  TDDISafetyFunction SafetyFunction;

  _TDDIFunctionUnion__isset __isset;

  void __set_Function(const TDDIFunction& val);

  void __set_SafetyFunction(const TDDISafetyFunction& val);

  bool operator == (const TDDIFunctionUnion & rhs) const
  {
    if (__isset.Function != rhs.__isset.Function)
      return false;
    else if (__isset.Function && !(Function == rhs.Function))
      return false;
    if (__isset.SafetyFunction != rhs.__isset.SafetyFunction)
      return false;
    else if (__isset.SafetyFunction && !(SafetyFunction == rhs.SafetyFunction))
      return false;
    return true;
  }
  bool operator != (const TDDIFunctionUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFunctionUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFunctionUnion &a, TDDIFunctionUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFunctionUnion& obj);

typedef struct _TDDIAbstractFunction__isset {
  _TDDIAbstractFunction__isset() : UsedFunction(false), UsedFunctionType(false) {}
  bool UsedFunction :1;
  bool UsedFunctionType :1;
} _TDDIAbstractFunction__isset;

class TDDIAbstractFunction : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFunction(const TDDIAbstractFunction&);
  TDDIAbstractFunction& operator=(const TDDIAbstractFunction&);
  TDDIAbstractFunction() : UsedFunctionType((TDDIFunctionUnionType)0) {
  }

  virtual ~TDDIAbstractFunction() throw();
  TDDIFunctionUnion UsedFunction;
  TDDIFunctionUnionType UsedFunctionType;

  _TDDIAbstractFunction__isset __isset;

  void __set_UsedFunction(const TDDIFunctionUnion& val);

  void __set_UsedFunctionType(const TDDIFunctionUnionType val);

  bool operator == (const TDDIAbstractFunction & rhs) const
  {
    if (!(UsedFunction == rhs.UsedFunction))
      return false;
    if (!(UsedFunctionType == rhs.UsedFunctionType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFunction &a, TDDIAbstractFunction &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFunction& obj);

typedef struct _TDDIDesignArtifactUnion__isset {
  _TDDIDesignArtifactUnion__isset() : System(false), Function(false), Configuration(false), Signal(false), SystemBoundary(false), Context(false), LifecycleCondition(false), Port(false), PerfChars(false), ArchitecturePackage(false) {}
  bool System :1;
  bool Function :1;
  bool Configuration :1;
  bool Signal :1;
  bool SystemBoundary :1;
  bool Context :1;
  bool LifecycleCondition :1;
  bool Port :1;
  bool PerfChars :1;
  bool ArchitecturePackage :1;
} _TDDIDesignArtifactUnion__isset;

class TDDIDesignArtifactUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIDesignArtifactUnion(const TDDIDesignArtifactUnion&);
  TDDIDesignArtifactUnion& operator=(const TDDIDesignArtifactUnion&);
  TDDIDesignArtifactUnion() {
  }

  virtual ~TDDIDesignArtifactUnion() throw();
  TDDIAbstractSystem System;
  TDDIAbstractFunction Function;
  TDDIConfiguration Configuration;
  TDDISignal Signal;
  TDDISystemBoundary SystemBoundary;
  TDDIContext Context;
  TDDILifecycleCondition LifecycleCondition;
  TDDIPort Port;
  TDDIPerfChars PerfChars;
  TDDIAbstractArchitecturePackage ArchitecturePackage;

  _TDDIDesignArtifactUnion__isset __isset;

  void __set_System(const TDDIAbstractSystem& val);

  void __set_Function(const TDDIAbstractFunction& val);

  void __set_Configuration(const TDDIConfiguration& val);

  void __set_Signal(const TDDISignal& val);

  void __set_SystemBoundary(const TDDISystemBoundary& val);

  void __set_Context(const TDDIContext& val);

  void __set_LifecycleCondition(const TDDILifecycleCondition& val);

  void __set_Port(const TDDIPort& val);

  void __set_PerfChars(const TDDIPerfChars& val);

  void __set_ArchitecturePackage(const TDDIAbstractArchitecturePackage& val);

  bool operator == (const TDDIDesignArtifactUnion & rhs) const
  {
    if (__isset.System != rhs.__isset.System)
      return false;
    else if (__isset.System && !(System == rhs.System))
      return false;
    if (__isset.Function != rhs.__isset.Function)
      return false;
    else if (__isset.Function && !(Function == rhs.Function))
      return false;
    if (__isset.Configuration != rhs.__isset.Configuration)
      return false;
    else if (__isset.Configuration && !(Configuration == rhs.Configuration))
      return false;
    if (__isset.Signal != rhs.__isset.Signal)
      return false;
    else if (__isset.Signal && !(Signal == rhs.Signal))
      return false;
    if (__isset.SystemBoundary != rhs.__isset.SystemBoundary)
      return false;
    else if (__isset.SystemBoundary && !(SystemBoundary == rhs.SystemBoundary))
      return false;
    if (__isset.Context != rhs.__isset.Context)
      return false;
    else if (__isset.Context && !(Context == rhs.Context))
      return false;
    if (__isset.LifecycleCondition != rhs.__isset.LifecycleCondition)
      return false;
    else if (__isset.LifecycleCondition && !(LifecycleCondition == rhs.LifecycleCondition))
      return false;
    if (__isset.Port != rhs.__isset.Port)
      return false;
    else if (__isset.Port && !(Port == rhs.Port))
      return false;
    if (__isset.PerfChars != rhs.__isset.PerfChars)
      return false;
    else if (__isset.PerfChars && !(PerfChars == rhs.PerfChars))
      return false;
    if (__isset.ArchitecturePackage != rhs.__isset.ArchitecturePackage)
      return false;
    else if (__isset.ArchitecturePackage && !(ArchitecturePackage == rhs.ArchitecturePackage))
      return false;
    return true;
  }
  bool operator != (const TDDIDesignArtifactUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDesignArtifactUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDesignArtifactUnion &a, TDDIDesignArtifactUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIDesignArtifactUnion& obj);

typedef struct _TDDIAbstractDesignArtifact__isset {
  _TDDIAbstractDesignArtifact__isset() : UsedDesignArtifact(false), UsedDesignArtifactType(false) {}
  bool UsedDesignArtifact :1;
  bool UsedDesignArtifactType :1;
} _TDDIAbstractDesignArtifact__isset;

class TDDIAbstractDesignArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDesignArtifact(const TDDIAbstractDesignArtifact&);
  TDDIAbstractDesignArtifact& operator=(const TDDIAbstractDesignArtifact&);
  TDDIAbstractDesignArtifact() : UsedDesignArtifactType((TDDIDesignArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractDesignArtifact() throw();
  TDDIDesignArtifactUnion UsedDesignArtifact;
  TDDIDesignArtifactUnionType UsedDesignArtifactType;

  _TDDIAbstractDesignArtifact__isset __isset;

  void __set_UsedDesignArtifact(const TDDIDesignArtifactUnion& val);

  void __set_UsedDesignArtifactType(const TDDIDesignArtifactUnionType val);

  bool operator == (const TDDIAbstractDesignArtifact & rhs) const
  {
    if (!(UsedDesignArtifact == rhs.UsedDesignArtifact))
      return false;
    if (!(UsedDesignArtifactType == rhs.UsedDesignArtifactType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDesignArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDesignArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDesignArtifact &a, TDDIAbstractDesignArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDesignArtifact& obj);

typedef struct _TDDIBaseElementUnion__isset {
  _TDDIBaseElementUnion__isset() : DesignArtifact(false), ODEPackage(false), FailureAnalysisArtifact(false), DependabilityArtifact(false) {}
  bool DesignArtifact :1;
  bool ODEPackage :1;
  bool FailureAnalysisArtifact :1;
  bool DependabilityArtifact :1;
} _TDDIBaseElementUnion__isset;

class TDDIBaseElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIBaseElementUnion(const TDDIBaseElementUnion&);
  TDDIBaseElementUnion& operator=(const TDDIBaseElementUnion&);
  TDDIBaseElementUnion() : DesignArtifact(), ODEPackage(), FailureAnalysisArtifact(), DependabilityArtifact() {
  }

  virtual ~TDDIBaseElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDesignArtifact> DesignArtifact;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractODEPackage> ODEPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> FailureAnalysisArtifact;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityArtifact> DependabilityArtifact;

  _TDDIBaseElementUnion__isset __isset;

  void __set_DesignArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDesignArtifact> val);

  void __set_ODEPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractODEPackage> val);

  void __set_FailureAnalysisArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> val);

  void __set_DependabilityArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityArtifact> val);

  bool operator == (const TDDIBaseElementUnion & rhs) const
  {
    if (__isset.DesignArtifact != rhs.__isset.DesignArtifact)
      return false;
    else if (__isset.DesignArtifact && !(DesignArtifact == rhs.DesignArtifact))
      return false;
    if (__isset.ODEPackage != rhs.__isset.ODEPackage)
      return false;
    else if (__isset.ODEPackage && !(ODEPackage == rhs.ODEPackage))
      return false;
    if (__isset.FailureAnalysisArtifact != rhs.__isset.FailureAnalysisArtifact)
      return false;
    else if (__isset.FailureAnalysisArtifact && !(FailureAnalysisArtifact == rhs.FailureAnalysisArtifact))
      return false;
    if (__isset.DependabilityArtifact != rhs.__isset.DependabilityArtifact)
      return false;
    else if (__isset.DependabilityArtifact && !(DependabilityArtifact == rhs.DependabilityArtifact))
      return false;
    return true;
  }
  bool operator != (const TDDIBaseElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIBaseElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIBaseElementUnion &a, TDDIBaseElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIBaseElementUnion& obj);

typedef struct _TDDIAbstractBaseElement__isset {
  _TDDIAbstractBaseElement__isset() : UsedBaseElement(false), UsedBaseElementType(false) {}
  bool UsedBaseElement :1;
  bool UsedBaseElementType :1;
} _TDDIAbstractBaseElement__isset;

class TDDIAbstractBaseElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractBaseElement(const TDDIAbstractBaseElement&);
  TDDIAbstractBaseElement& operator=(const TDDIAbstractBaseElement&);
  TDDIAbstractBaseElement() : UsedBaseElementType((TDDIBaseElementUnionType)0) {
  }

  virtual ~TDDIAbstractBaseElement() throw();
  TDDIBaseElementUnion UsedBaseElement;
  TDDIBaseElementUnionType UsedBaseElementType;

  _TDDIAbstractBaseElement__isset __isset;

  void __set_UsedBaseElement(const TDDIBaseElementUnion& val);

  void __set_UsedBaseElementType(const TDDIBaseElementUnionType val);

  bool operator == (const TDDIAbstractBaseElement & rhs) const
  {
    if (!(UsedBaseElement == rhs.UsedBaseElement))
      return false;
    if (!(UsedBaseElementType == rhs.UsedBaseElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractBaseElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractBaseElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractBaseElement &a, TDDIAbstractBaseElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractBaseElement& obj);

typedef struct _TDDIValue__isset {
  _TDDIValue__isset() : Tag(true), Value(true) {}
  bool Tag :1;
  bool Value :1;
} _TDDIValue__isset;

class TDDIValue : public virtual ::apache::thrift::TBase {
 public:

  TDDIValue(const TDDIValue&);
  TDDIValue& operator=(const TDDIValue&);
  TDDIValue() : Tag(""), Value("") {
  }

  virtual ~TDDIValue() throw();
  std::string Tag;
  std::string Value;

  _TDDIValue__isset __isset;

  void __set_Tag(const std::string& val);

  void __set_Value(const std::string& val);

  bool operator == (const TDDIValue & rhs) const
  {
    if (!(Tag == rhs.Tag))
      return false;
    if (!(Value == rhs.Value))
      return false;
    return true;
  }
  bool operator != (const TDDIValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIValue &a, TDDIValue &b);

std::ostream& operator<<(std::ostream& out, const TDDIValue& obj);

typedef struct _TDDIKeyValueMap__isset {
  _TDDIKeyValueMap__isset() : Key(true), Values(true) {}
  bool Key :1;
  bool Values :1;
} _TDDIKeyValueMap__isset;

class TDDIKeyValueMap : public virtual ::apache::thrift::TBase {
 public:

  TDDIKeyValueMap(const TDDIKeyValueMap&);
  TDDIKeyValueMap& operator=(const TDDIKeyValueMap&);
  TDDIKeyValueMap() : Key("") {

  }

  virtual ~TDDIKeyValueMap() throw();
  std::string Key;
  std::vector<TDDIValue>  Values;

  _TDDIKeyValueMap__isset __isset;

  void __set_Key(const std::string& val);

  void __set_Values(const std::vector<TDDIValue> & val);

  bool operator == (const TDDIKeyValueMap & rhs) const
  {
    if (!(Key == rhs.Key))
      return false;
    if (!(Values == rhs.Values))
      return false;
    return true;
  }
  bool operator != (const TDDIKeyValueMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIKeyValueMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIKeyValueMap &a, TDDIKeyValueMap &b);

std::ostream& operator<<(std::ostream& out, const TDDIKeyValueMap& obj);

typedef struct _TDDIDependabilityPackageUnion__isset {
  _TDDIDependabilityPackageUnion__isset() : DependabilityPackage(false), DependabilityPackageInterface(false), DependabilityPackageBinding(false) {}
  bool DependabilityPackage :1;
  bool DependabilityPackageInterface :1;
  bool DependabilityPackageBinding :1;
} _TDDIDependabilityPackageUnion__isset;

class TDDIDependabilityPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIDependabilityPackageUnion(const TDDIDependabilityPackageUnion&);
  TDDIDependabilityPackageUnion& operator=(const TDDIDependabilityPackageUnion&);
  TDDIDependabilityPackageUnion() : DependabilityPackage(), DependabilityPackageInterface(), DependabilityPackageBinding() {
  }

  virtual ~TDDIDependabilityPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> DependabilityPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackageInterface> DependabilityPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackageBinding> DependabilityPackageBinding;

  _TDDIDependabilityPackageUnion__isset __isset;

  void __set_DependabilityPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> val);

  void __set_DependabilityPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackageInterface> val);

  void __set_DependabilityPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackageBinding> val);

  bool operator == (const TDDIDependabilityPackageUnion & rhs) const
  {
    if (__isset.DependabilityPackage != rhs.__isset.DependabilityPackage)
      return false;
    else if (__isset.DependabilityPackage && !(DependabilityPackage == rhs.DependabilityPackage))
      return false;
    if (__isset.DependabilityPackageInterface != rhs.__isset.DependabilityPackageInterface)
      return false;
    else if (__isset.DependabilityPackageInterface && !(DependabilityPackageInterface == rhs.DependabilityPackageInterface))
      return false;
    if (__isset.DependabilityPackageBinding != rhs.__isset.DependabilityPackageBinding)
      return false;
    else if (__isset.DependabilityPackageBinding && !(DependabilityPackageBinding == rhs.DependabilityPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIDependabilityPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDependabilityPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDependabilityPackageUnion &a, TDDIDependabilityPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackageUnion& obj);

typedef struct _TDDIAbstractDependabilityPackage__isset {
  _TDDIAbstractDependabilityPackage__isset() : UsedDependabilityPackage(false), UsedDependabilityPackageType(false) {}
  bool UsedDependabilityPackage :1;
  bool UsedDependabilityPackageType :1;
} _TDDIAbstractDependabilityPackage__isset;

class TDDIAbstractDependabilityPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDependabilityPackage(const TDDIAbstractDependabilityPackage&);
  TDDIAbstractDependabilityPackage& operator=(const TDDIAbstractDependabilityPackage&);
  TDDIAbstractDependabilityPackage() : UsedDependabilityPackageType((TDDIDependabilityPackageUnionType)0) {
  }

  virtual ~TDDIAbstractDependabilityPackage() throw();
  TDDIDependabilityPackageUnion UsedDependabilityPackage;
  TDDIDependabilityPackageUnionType UsedDependabilityPackageType;

  _TDDIAbstractDependabilityPackage__isset __isset;

  void __set_UsedDependabilityPackage(const TDDIDependabilityPackageUnion& val);

  void __set_UsedDependabilityPackageType(const TDDIDependabilityPackageUnionType val);

  bool operator == (const TDDIAbstractDependabilityPackage & rhs) const
  {
    if (!(UsedDependabilityPackage == rhs.UsedDependabilityPackage))
      return false;
    if (!(UsedDependabilityPackageType == rhs.UsedDependabilityPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDependabilityPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDependabilityPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDependabilityPackage &a, TDDIAbstractDependabilityPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityPackage& obj);

typedef struct _TDDIDependabilityPackage__isset {
  _TDDIDependabilityPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityArtifacts(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityArtifacts :1;
} _TDDIDependabilityPackage__isset;

class TDDIDependabilityPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIDependabilityPackage(const TDDIDependabilityPackage&);
  TDDIDependabilityPackage& operator=(const TDDIDependabilityPackage&);
  TDDIDependabilityPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIDependabilityPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityArtifactRef>  DependabilityArtifacts;

  _TDDIDependabilityPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityArtifacts(const std::vector<TDDIAbstractDependabilityArtifactRef> & val);

  bool operator == (const TDDIDependabilityPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityArtifacts == rhs.DependabilityArtifacts))
      return false;
    return true;
  }
  bool operator != (const TDDIDependabilityPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDependabilityPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDependabilityPackage &a, TDDIDependabilityPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackage& obj);

typedef struct _TDDIDependabilityPackageInterface__isset {
  _TDDIDependabilityPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityArtifacts(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityArtifacts :1;
  bool Implements :1;
} _TDDIDependabilityPackageInterface__isset;

class TDDIDependabilityPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIDependabilityPackageInterface(const TDDIDependabilityPackageInterface&);
  TDDIDependabilityPackageInterface& operator=(const TDDIDependabilityPackageInterface&);
  TDDIDependabilityPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIDependabilityPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityArtifactRef>  DependabilityArtifacts;
  TDDIAbstractDependabilityPackage Implements;

  _TDDIDependabilityPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityArtifacts(const std::vector<TDDIAbstractDependabilityArtifactRef> & val);

  void __set_Implements(const TDDIAbstractDependabilityPackage& val);

  bool operator == (const TDDIDependabilityPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityArtifacts == rhs.DependabilityArtifacts))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIDependabilityPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDependabilityPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDependabilityPackageInterface &a, TDDIDependabilityPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackageInterface& obj);

typedef struct _TDDIDependabilityPackageBinding__isset {
  _TDDIDependabilityPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DependabilityArtifacts(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DependabilityArtifacts :1;
  bool ParticipantPackages :1;
} _TDDIDependabilityPackageBinding__isset;

class TDDIDependabilityPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIDependabilityPackageBinding(const TDDIDependabilityPackageBinding&);
  TDDIDependabilityPackageBinding& operator=(const TDDIDependabilityPackageBinding&);
  TDDIDependabilityPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {



  }

  virtual ~TDDIDependabilityPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDependabilityArtifactRef>  DependabilityArtifacts;
  std::vector<TDDIAbstractDependabilityPackageRef>  ParticipantPackages;

  _TDDIDependabilityPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DependabilityArtifacts(const std::vector<TDDIAbstractDependabilityArtifactRef> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractDependabilityPackageRef> & val);

  bool operator == (const TDDIDependabilityPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DependabilityArtifacts == rhs.DependabilityArtifacts))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIDependabilityPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDependabilityPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDependabilityPackageBinding &a, TDDIDependabilityPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackageBinding& obj);

typedef struct _TDDIMeasureType__isset {
  _TDDIMeasureType__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
} _TDDIMeasureType__isset;

class TDDIMeasureType : public virtual ::apache::thrift::TBase {
 public:

  TDDIMeasureType(const TDDIMeasureType&);
  TDDIMeasureType& operator=(const TDDIMeasureType&);
  TDDIMeasureType() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {

  }

  virtual ~TDDIMeasureType() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;

  _TDDIMeasureType__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  bool operator == (const TDDIMeasureType & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    return true;
  }
  bool operator != (const TDDIMeasureType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMeasureType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMeasureType &a, TDDIMeasureType &b);

std::ostream& operator<<(std::ostream& out, const TDDIMeasureType& obj);

typedef struct _TDDIMeasure__isset {
  _TDDIMeasure__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), IntrinsicSafety(true), SafeGuard(true), ApplierInformation(true), RiskAcceptability(true), FurtherAction(true), Source(true), AssuranceLevel(false), MeasureType(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool IntrinsicSafety :1;
  bool SafeGuard :1;
  bool ApplierInformation :1;
  bool RiskAcceptability :1;
  bool FurtherAction :1;
  bool Source :1;
  bool AssuranceLevel :1;
  bool MeasureType :1;
} _TDDIMeasure__isset;

class TDDIMeasure : public virtual ::apache::thrift::TBase {
 public:

  TDDIMeasure(const TDDIMeasure&);
  TDDIMeasure& operator=(const TDDIMeasure&);
  TDDIMeasure() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), IntrinsicSafety(""), SafeGuard(""), ApplierInformation(""), RiskAcceptability(false), FurtherAction(""), Source(""), AssuranceLevel() {

  }

  virtual ~TDDIMeasure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string IntrinsicSafety;
  std::string SafeGuard;
  std::string ApplierInformation;
  bool RiskAcceptability;
  std::string FurtherAction;
  std::string Source;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  TDDIMeasureType MeasureType;

  _TDDIMeasure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_IntrinsicSafety(const std::string& val);

  void __set_SafeGuard(const std::string& val);

  void __set_ApplierInformation(const std::string& val);

  void __set_RiskAcceptability(const bool val);

  void __set_FurtherAction(const std::string& val);

  void __set_Source(const std::string& val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_MeasureType(const TDDIMeasureType& val);

  bool operator == (const TDDIMeasure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(IntrinsicSafety == rhs.IntrinsicSafety))
      return false;
    if (!(SafeGuard == rhs.SafeGuard))
      return false;
    if (!(ApplierInformation == rhs.ApplierInformation))
      return false;
    if (!(RiskAcceptability == rhs.RiskAcceptability))
      return false;
    if (!(FurtherAction == rhs.FurtherAction))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(MeasureType == rhs.MeasureType))
      return false;
    return true;
  }
  bool operator != (const TDDIMeasure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMeasure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMeasure &a, TDDIMeasure &b);

std::ostream& operator<<(std::ostream& out, const TDDIMeasure& obj);

typedef struct _TDDIFaultToleranceMeasure__isset {
  _TDDIFaultToleranceMeasure__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), IntrinsicSafety(true), SafeGuard(true), ApplierInformation(true), RiskAcceptability(true), FurtherAction(true), Source(true), AssuranceLevel(false), MeasureType(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool IntrinsicSafety :1;
  bool SafeGuard :1;
  bool ApplierInformation :1;
  bool RiskAcceptability :1;
  bool FurtherAction :1;
  bool Source :1;
  bool AssuranceLevel :1;
  bool MeasureType :1;
} _TDDIFaultToleranceMeasure__isset;

class TDDIFaultToleranceMeasure : public virtual ::apache::thrift::TBase {
 public:

  TDDIFaultToleranceMeasure(const TDDIFaultToleranceMeasure&);
  TDDIFaultToleranceMeasure& operator=(const TDDIFaultToleranceMeasure&);
  TDDIFaultToleranceMeasure() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), IntrinsicSafety(""), SafeGuard(""), ApplierInformation(""), RiskAcceptability(false), FurtherAction(""), Source(""), AssuranceLevel() {

  }

  virtual ~TDDIFaultToleranceMeasure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string IntrinsicSafety;
  std::string SafeGuard;
  std::string ApplierInformation;
  bool RiskAcceptability;
  std::string FurtherAction;
  std::string Source;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  TDDIMeasureType MeasureType;

  _TDDIFaultToleranceMeasure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_IntrinsicSafety(const std::string& val);

  void __set_SafeGuard(const std::string& val);

  void __set_ApplierInformation(const std::string& val);

  void __set_RiskAcceptability(const bool val);

  void __set_FurtherAction(const std::string& val);

  void __set_Source(const std::string& val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_MeasureType(const TDDIMeasureType& val);

  bool operator == (const TDDIFaultToleranceMeasure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(IntrinsicSafety == rhs.IntrinsicSafety))
      return false;
    if (!(SafeGuard == rhs.SafeGuard))
      return false;
    if (!(ApplierInformation == rhs.ApplierInformation))
      return false;
    if (!(RiskAcceptability == rhs.RiskAcceptability))
      return false;
    if (!(FurtherAction == rhs.FurtherAction))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(MeasureType == rhs.MeasureType))
      return false;
    return true;
  }
  bool operator != (const TDDIFaultToleranceMeasure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFaultToleranceMeasure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFaultToleranceMeasure &a, TDDIFaultToleranceMeasure &b);

std::ostream& operator<<(std::ostream& out, const TDDIFaultToleranceMeasure& obj);

typedef struct _TDDIMaintenanceProcedure__isset {
  _TDDIMaintenanceProcedure__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), ActivityDescription(true), TechnicalDescription(true), ToolSpecification(true), StaffNumber(false), StaffSkillLevel(true), StafftrainingDescription(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool ActivityDescription :1;
  bool TechnicalDescription :1;
  bool ToolSpecification :1;
  bool StaffNumber :1;
  bool StaffSkillLevel :1;
  bool StafftrainingDescription :1;
} _TDDIMaintenanceProcedure__isset;

class TDDIMaintenanceProcedure : public virtual ::apache::thrift::TBase {
 public:

  TDDIMaintenanceProcedure(const TDDIMaintenanceProcedure&);
  TDDIMaintenanceProcedure& operator=(const TDDIMaintenanceProcedure&);
  TDDIMaintenanceProcedure() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), ActivityDescription(""), TechnicalDescription(""), ToolSpecification(""), StaffNumber(0), StaffSkillLevel(""), StafftrainingDescription("") {

  }

  virtual ~TDDIMaintenanceProcedure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string ActivityDescription;
  std::string TechnicalDescription;
  std::string ToolSpecification;
  int32_t StaffNumber;
  std::string StaffSkillLevel;
  std::string StafftrainingDescription;

  _TDDIMaintenanceProcedure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_ActivityDescription(const std::string& val);

  void __set_TechnicalDescription(const std::string& val);

  void __set_ToolSpecification(const std::string& val);

  void __set_StaffNumber(const int32_t val);

  void __set_StaffSkillLevel(const std::string& val);

  void __set_StafftrainingDescription(const std::string& val);

  bool operator == (const TDDIMaintenanceProcedure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(ActivityDescription == rhs.ActivityDescription))
      return false;
    if (!(TechnicalDescription == rhs.TechnicalDescription))
      return false;
    if (!(ToolSpecification == rhs.ToolSpecification))
      return false;
    if (!(StaffNumber == rhs.StaffNumber))
      return false;
    if (!(StaffSkillLevel == rhs.StaffSkillLevel))
      return false;
    if (!(StafftrainingDescription == rhs.StafftrainingDescription))
      return false;
    return true;
  }
  bool operator != (const TDDIMaintenanceProcedure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMaintenanceProcedure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMaintenanceProcedure &a, TDDIMaintenanceProcedure &b);

std::ostream& operator<<(std::ostream& out, const TDDIMaintenanceProcedure& obj);

typedef struct _TDDIMeasureUnion__isset {
  _TDDIMeasureUnion__isset() : Measure(false), FaultToleranceMeasure(false) {}
  bool Measure :1;
  bool FaultToleranceMeasure :1;
} _TDDIMeasureUnion__isset;

class TDDIMeasureUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIMeasureUnion(const TDDIMeasureUnion&);
  TDDIMeasureUnion& operator=(const TDDIMeasureUnion&);
  TDDIMeasureUnion() {
  }

  virtual ~TDDIMeasureUnion() throw();
  TDDIMeasure Measure;
  TDDIFaultToleranceMeasure FaultToleranceMeasure;

  _TDDIMeasureUnion__isset __isset;

  void __set_Measure(const TDDIMeasure& val);

  void __set_FaultToleranceMeasure(const TDDIFaultToleranceMeasure& val);

  bool operator == (const TDDIMeasureUnion & rhs) const
  {
    if (__isset.Measure != rhs.__isset.Measure)
      return false;
    else if (__isset.Measure && !(Measure == rhs.Measure))
      return false;
    if (__isset.FaultToleranceMeasure != rhs.__isset.FaultToleranceMeasure)
      return false;
    else if (__isset.FaultToleranceMeasure && !(FaultToleranceMeasure == rhs.FaultToleranceMeasure))
      return false;
    return true;
  }
  bool operator != (const TDDIMeasureUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMeasureUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMeasureUnion &a, TDDIMeasureUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIMeasureUnion& obj);

typedef struct _TDDIAbstractMeasure__isset {
  _TDDIAbstractMeasure__isset() : UsedMeasure(false), UsedMeasureType(false) {}
  bool UsedMeasure :1;
  bool UsedMeasureType :1;
} _TDDIAbstractMeasure__isset;

class TDDIAbstractMeasure : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractMeasure(const TDDIAbstractMeasure&);
  TDDIAbstractMeasure& operator=(const TDDIAbstractMeasure&);
  TDDIAbstractMeasure() : UsedMeasureType((TDDIMeasureUnionType)0) {
  }

  virtual ~TDDIAbstractMeasure() throw();
  TDDIMeasureUnion UsedMeasure;
  TDDIMeasureUnionType UsedMeasureType;

  _TDDIAbstractMeasure__isset __isset;

  void __set_UsedMeasure(const TDDIMeasureUnion& val);

  void __set_UsedMeasureType(const TDDIMeasureUnionType val);

  bool operator == (const TDDIAbstractMeasure & rhs) const
  {
    if (!(UsedMeasure == rhs.UsedMeasure))
      return false;
    if (!(UsedMeasureType == rhs.UsedMeasureType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractMeasure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractMeasure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractMeasure &a, TDDIAbstractMeasure &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractMeasure& obj);

typedef struct _TDDIDependabilityArtifactUnion__isset {
  _TDDIDependabilityArtifactUnion__isset() : DependabilityPackage(false), Measure(false), MeasureType(false), MaintenanceProcedure(false), DomainElement(false), RequirementArtifact(false), HARAArtifact(false) {}
  bool DependabilityPackage :1;
  bool Measure :1;
  bool MeasureType :1;
  bool MaintenanceProcedure :1;
  bool DomainElement :1;
  bool RequirementArtifact :1;
  bool HARAArtifact :1;
} _TDDIDependabilityArtifactUnion__isset;

class TDDIDependabilityArtifactUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIDependabilityArtifactUnion(const TDDIDependabilityArtifactUnion&);
  TDDIDependabilityArtifactUnion& operator=(const TDDIDependabilityArtifactUnion&);
  TDDIDependabilityArtifactUnion() : DomainElement(), RequirementArtifact(), HARAArtifact() {
  }

  virtual ~TDDIDependabilityArtifactUnion() throw();
  TDDIAbstractDependabilityPackage DependabilityPackage;
  TDDIAbstractMeasure Measure;
  TDDIMeasureType MeasureType;
  TDDIMaintenanceProcedure MaintenanceProcedure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainElement> DomainElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementArtifact> RequirementArtifact;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAArtifact> HARAArtifact;

  _TDDIDependabilityArtifactUnion__isset __isset;

  void __set_DependabilityPackage(const TDDIAbstractDependabilityPackage& val);

  void __set_Measure(const TDDIAbstractMeasure& val);

  void __set_MeasureType(const TDDIMeasureType& val);

  void __set_MaintenanceProcedure(const TDDIMaintenanceProcedure& val);

  void __set_DomainElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDomainElement> val);

  void __set_RequirementArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementArtifact> val);

  void __set_HARAArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAArtifact> val);

  bool operator == (const TDDIDependabilityArtifactUnion & rhs) const
  {
    if (__isset.DependabilityPackage != rhs.__isset.DependabilityPackage)
      return false;
    else if (__isset.DependabilityPackage && !(DependabilityPackage == rhs.DependabilityPackage))
      return false;
    if (__isset.Measure != rhs.__isset.Measure)
      return false;
    else if (__isset.Measure && !(Measure == rhs.Measure))
      return false;
    if (__isset.MeasureType != rhs.__isset.MeasureType)
      return false;
    else if (__isset.MeasureType && !(MeasureType == rhs.MeasureType))
      return false;
    if (__isset.MaintenanceProcedure != rhs.__isset.MaintenanceProcedure)
      return false;
    else if (__isset.MaintenanceProcedure && !(MaintenanceProcedure == rhs.MaintenanceProcedure))
      return false;
    if (__isset.DomainElement != rhs.__isset.DomainElement)
      return false;
    else if (__isset.DomainElement && !(DomainElement == rhs.DomainElement))
      return false;
    if (__isset.RequirementArtifact != rhs.__isset.RequirementArtifact)
      return false;
    else if (__isset.RequirementArtifact && !(RequirementArtifact == rhs.RequirementArtifact))
      return false;
    if (__isset.HARAArtifact != rhs.__isset.HARAArtifact)
      return false;
    else if (__isset.HARAArtifact && !(HARAArtifact == rhs.HARAArtifact))
      return false;
    return true;
  }
  bool operator != (const TDDIDependabilityArtifactUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDependabilityArtifactUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDependabilityArtifactUnion &a, TDDIDependabilityArtifactUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityArtifactUnion& obj);

typedef struct _TDDIAbstractDependabilityArtifact__isset {
  _TDDIAbstractDependabilityArtifact__isset() : UsedDependabilityArtifact(false), UsedDependabilityArtifactType(false) {}
  bool UsedDependabilityArtifact :1;
  bool UsedDependabilityArtifactType :1;
} _TDDIAbstractDependabilityArtifact__isset;

class TDDIAbstractDependabilityArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDependabilityArtifact(const TDDIAbstractDependabilityArtifact&);
  TDDIAbstractDependabilityArtifact& operator=(const TDDIAbstractDependabilityArtifact&);
  TDDIAbstractDependabilityArtifact() : UsedDependabilityArtifactType((TDDIDependabilityArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractDependabilityArtifact() throw();
  TDDIDependabilityArtifactUnion UsedDependabilityArtifact;
  TDDIDependabilityArtifactUnionType UsedDependabilityArtifactType;

  _TDDIAbstractDependabilityArtifact__isset __isset;

  void __set_UsedDependabilityArtifact(const TDDIDependabilityArtifactUnion& val);

  void __set_UsedDependabilityArtifactType(const TDDIDependabilityArtifactUnionType val);

  bool operator == (const TDDIAbstractDependabilityArtifact & rhs) const
  {
    if (!(UsedDependabilityArtifact == rhs.UsedDependabilityArtifact))
      return false;
    if (!(UsedDependabilityArtifactType == rhs.UsedDependabilityArtifactType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDependabilityArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDependabilityArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDependabilityArtifact &a, TDDIAbstractDependabilityArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityArtifact& obj);

typedef struct _TDDIDomainPackageUnion__isset {
  _TDDIDomainPackageUnion__isset() : DomainPackage(false), DomainPackageInterface(false), DomainPackageBinding(false) {}
  bool DomainPackage :1;
  bool DomainPackageInterface :1;
  bool DomainPackageBinding :1;
} _TDDIDomainPackageUnion__isset;

class TDDIDomainPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIDomainPackageUnion(const TDDIDomainPackageUnion&);
  TDDIDomainPackageUnion& operator=(const TDDIDomainPackageUnion&);
  TDDIDomainPackageUnion() : DomainPackage(), DomainPackageInterface(), DomainPackageBinding() {
  }

  virtual ~TDDIDomainPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> DomainPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackageInterface> DomainPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackageBinding> DomainPackageBinding;

  _TDDIDomainPackageUnion__isset __isset;

  void __set_DomainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> val);

  void __set_DomainPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackageInterface> val);

  void __set_DomainPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackageBinding> val);

  bool operator == (const TDDIDomainPackageUnion & rhs) const
  {
    if (__isset.DomainPackage != rhs.__isset.DomainPackage)
      return false;
    else if (__isset.DomainPackage && !(DomainPackage == rhs.DomainPackage))
      return false;
    if (__isset.DomainPackageInterface != rhs.__isset.DomainPackageInterface)
      return false;
    else if (__isset.DomainPackageInterface && !(DomainPackageInterface == rhs.DomainPackageInterface))
      return false;
    if (__isset.DomainPackageBinding != rhs.__isset.DomainPackageBinding)
      return false;
    else if (__isset.DomainPackageBinding && !(DomainPackageBinding == rhs.DomainPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIDomainPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDomainPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDomainPackageUnion &a, TDDIDomainPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIDomainPackageUnion& obj);

typedef struct _TDDIAbstractDomainPackage__isset {
  _TDDIAbstractDomainPackage__isset() : UsedDomainPackage(false), UsedDomainPackageType(false) {}
  bool UsedDomainPackage :1;
  bool UsedDomainPackageType :1;
} _TDDIAbstractDomainPackage__isset;

class TDDIAbstractDomainPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDomainPackage(const TDDIAbstractDomainPackage&);
  TDDIAbstractDomainPackage& operator=(const TDDIAbstractDomainPackage&);
  TDDIAbstractDomainPackage() : UsedDomainPackageType((TDDIAbstractDomainPackageType)0) {
  }

  virtual ~TDDIAbstractDomainPackage() throw();
  TDDIDomainPackageUnion UsedDomainPackage;
  TDDIAbstractDomainPackageType UsedDomainPackageType;

  _TDDIAbstractDomainPackage__isset __isset;

  void __set_UsedDomainPackage(const TDDIDomainPackageUnion& val);

  void __set_UsedDomainPackageType(const TDDIAbstractDomainPackageType val);

  bool operator == (const TDDIAbstractDomainPackage & rhs) const
  {
    if (!(UsedDomainPackage == rhs.UsedDomainPackage))
      return false;
    if (!(UsedDomainPackageType == rhs.UsedDomainPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDomainPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDomainPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDomainPackage &a, TDDIAbstractDomainPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainPackage& obj);

typedef struct _TDDIDomainPackage__isset {
  _TDDIDomainPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DomainElements(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DomainElements :1;
} _TDDIDomainPackage__isset;

class TDDIDomainPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIDomainPackage(const TDDIDomainPackage&);
  TDDIDomainPackage& operator=(const TDDIDomainPackage&);
  TDDIDomainPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIDomainPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDomainElementRef>  DomainElements;

  _TDDIDomainPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DomainElements(const std::vector<TDDIAbstractDomainElementRef> & val);

  bool operator == (const TDDIDomainPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DomainElements == rhs.DomainElements))
      return false;
    return true;
  }
  bool operator != (const TDDIDomainPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDomainPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDomainPackage &a, TDDIDomainPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIDomainPackage& obj);

typedef struct _TDDIDomainPackageInterface__isset {
  _TDDIDomainPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DomainElements(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DomainElements :1;
  bool Implements :1;
} _TDDIDomainPackageInterface__isset;

class TDDIDomainPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIDomainPackageInterface(const TDDIDomainPackageInterface&);
  TDDIDomainPackageInterface& operator=(const TDDIDomainPackageInterface&);
  TDDIDomainPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIDomainPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDomainElementRef>  DomainElements;
  TDDIAbstractDomainPackage Implements;

  _TDDIDomainPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DomainElements(const std::vector<TDDIAbstractDomainElementRef> & val);

  void __set_Implements(const TDDIAbstractDomainPackage& val);

  bool operator == (const TDDIDomainPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DomainElements == rhs.DomainElements))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIDomainPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDomainPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDomainPackageInterface &a, TDDIDomainPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIDomainPackageInterface& obj);

typedef struct _TDDIDomainPackageBinding__isset {
  _TDDIDomainPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DomainElements(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DomainElements :1;
  bool ParticipantPackages :1;
} _TDDIDomainPackageBinding__isset;

class TDDIDomainPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIDomainPackageBinding(const TDDIDomainPackageBinding&);
  TDDIDomainPackageBinding& operator=(const TDDIDomainPackageBinding&);
  TDDIDomainPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {



  }

  virtual ~TDDIDomainPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractDomainElementRef>  DomainElements;
  std::vector<TDDIAbstractDomainPackageRef>  ParticipantPackages;

  _TDDIDomainPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DomainElements(const std::vector<TDDIAbstractDomainElementRef> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractDomainPackageRef> & val);

  bool operator == (const TDDIDomainPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DomainElements == rhs.DomainElements))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIDomainPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDomainPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDomainPackageBinding &a, TDDIDomainPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIDomainPackageBinding& obj);

typedef struct _TDDIAssuranceLevel__isset {
  _TDDIAssuranceLevel__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
} _TDDIAssuranceLevel__isset;

class TDDIAssuranceLevel : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceLevel(const TDDIAssuranceLevel&);
  TDDIAssuranceLevel& operator=(const TDDIAssuranceLevel&);
  TDDIAssuranceLevel() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {

  }

  virtual ~TDDIAssuranceLevel() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;

  _TDDIAssuranceLevel__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  bool operator == (const TDDIAssuranceLevel & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceLevel &a, TDDIAssuranceLevel &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceLevel& obj);

typedef struct _TDDIStandard__isset {
  _TDDIStandard__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
} _TDDIStandard__isset;

class TDDIStandard : public virtual ::apache::thrift::TBase {
 public:

  TDDIStandard(const TDDIStandard&);
  TDDIStandard& operator=(const TDDIStandard&);
  TDDIStandard() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {

  }

  virtual ~TDDIStandard() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;

  _TDDIStandard__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  bool operator == (const TDDIStandard & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    return true;
  }
  bool operator != (const TDDIStandard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIStandard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIStandard &a, TDDIStandard &b);

std::ostream& operator<<(std::ostream& out, const TDDIStandard& obj);

typedef struct _TDDISafetyStandard__isset {
  _TDDISafetyStandard__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), AssuranceLevels(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool AssuranceLevels :1;
} _TDDISafetyStandard__isset;

class TDDISafetyStandard : public virtual ::apache::thrift::TBase {
 public:

  TDDISafetyStandard(const TDDISafetyStandard&);
  TDDISafetyStandard& operator=(const TDDISafetyStandard&);
  TDDISafetyStandard() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDISafetyStandard() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAssuranceLevel>  AssuranceLevels;

  _TDDISafetyStandard__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_AssuranceLevels(const std::vector<TDDIAssuranceLevel> & val);

  bool operator == (const TDDISafetyStandard & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AssuranceLevels == rhs.AssuranceLevels))
      return false;
    return true;
  }
  bool operator != (const TDDISafetyStandard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISafetyStandard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISafetyStandard &a, TDDISafetyStandard &b);

std::ostream& operator<<(std::ostream& out, const TDDISafetyStandard& obj);

typedef struct _TDDIStandardUnion__isset {
  _TDDIStandardUnion__isset() : Standard(false), SafetyStandard(false) {}
  bool Standard :1;
  bool SafetyStandard :1;
} _TDDIStandardUnion__isset;

class TDDIStandardUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIStandardUnion(const TDDIStandardUnion&);
  TDDIStandardUnion& operator=(const TDDIStandardUnion&);
  TDDIStandardUnion() {
  }

  virtual ~TDDIStandardUnion() throw();
  TDDIStandard Standard;
  TDDISafetyStandard SafetyStandard;

  _TDDIStandardUnion__isset __isset;

  void __set_Standard(const TDDIStandard& val);

  void __set_SafetyStandard(const TDDISafetyStandard& val);

  bool operator == (const TDDIStandardUnion & rhs) const
  {
    if (__isset.Standard != rhs.__isset.Standard)
      return false;
    else if (__isset.Standard && !(Standard == rhs.Standard))
      return false;
    if (__isset.SafetyStandard != rhs.__isset.SafetyStandard)
      return false;
    else if (__isset.SafetyStandard && !(SafetyStandard == rhs.SafetyStandard))
      return false;
    return true;
  }
  bool operator != (const TDDIStandardUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIStandardUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIStandardUnion &a, TDDIStandardUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIStandardUnion& obj);

typedef struct _TDDIAbstractStandard__isset {
  _TDDIAbstractStandard__isset() : UsedStandard(false), UsedStandardType(false) {}
  bool UsedStandard :1;
  bool UsedStandardType :1;
} _TDDIAbstractStandard__isset;

class TDDIAbstractStandard : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractStandard(const TDDIAbstractStandard&);
  TDDIAbstractStandard& operator=(const TDDIAbstractStandard&);
  TDDIAbstractStandard() : UsedStandardType((TDDIStandardUnionType)0) {
  }

  virtual ~TDDIAbstractStandard() throw();
  TDDIStandardUnion UsedStandard;
  TDDIStandardUnionType UsedStandardType;

  _TDDIAbstractStandard__isset __isset;

  void __set_UsedStandard(const TDDIStandardUnion& val);

  void __set_UsedStandardType(const TDDIStandardUnionType val);

  bool operator == (const TDDIAbstractStandard & rhs) const
  {
    if (!(UsedStandard == rhs.UsedStandard))
      return false;
    if (!(UsedStandardType == rhs.UsedStandardType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractStandard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractStandard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractStandard &a, TDDIAbstractStandard &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractStandard& obj);

typedef struct _TDDIDomainElementUnion__isset {
  _TDDIDomainElementUnion__isset() : DomainPackage(false), Standard(false), AssuranceLevel(false) {}
  bool DomainPackage :1;
  bool Standard :1;
  bool AssuranceLevel :1;
} _TDDIDomainElementUnion__isset;

class TDDIDomainElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIDomainElementUnion(const TDDIDomainElementUnion&);
  TDDIDomainElementUnion& operator=(const TDDIDomainElementUnion&);
  TDDIDomainElementUnion() {
  }

  virtual ~TDDIDomainElementUnion() throw();
  TDDIAbstractDomainPackage DomainPackage;
  TDDIAbstractStandard Standard;
  TDDIAssuranceLevel AssuranceLevel;

  _TDDIDomainElementUnion__isset __isset;

  void __set_DomainPackage(const TDDIAbstractDomainPackage& val);

  void __set_Standard(const TDDIAbstractStandard& val);

  void __set_AssuranceLevel(const TDDIAssuranceLevel& val);

  bool operator == (const TDDIDomainElementUnion & rhs) const
  {
    if (__isset.DomainPackage != rhs.__isset.DomainPackage)
      return false;
    else if (__isset.DomainPackage && !(DomainPackage == rhs.DomainPackage))
      return false;
    if (__isset.Standard != rhs.__isset.Standard)
      return false;
    else if (__isset.Standard && !(Standard == rhs.Standard))
      return false;
    if (__isset.AssuranceLevel != rhs.__isset.AssuranceLevel)
      return false;
    else if (__isset.AssuranceLevel && !(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    return true;
  }
  bool operator != (const TDDIDomainElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDomainElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDomainElementUnion &a, TDDIDomainElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIDomainElementUnion& obj);

typedef struct _TDDIAbstractDomainElement__isset {
  _TDDIAbstractDomainElement__isset() : UsedDomainElement(false), UsedDomainElementType(false) {}
  bool UsedDomainElement :1;
  bool UsedDomainElementType :1;
} _TDDIAbstractDomainElement__isset;

class TDDIAbstractDomainElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDomainElement(const TDDIAbstractDomainElement&);
  TDDIAbstractDomainElement& operator=(const TDDIAbstractDomainElement&);
  TDDIAbstractDomainElement() : UsedDomainElementType((TDDIDomainElementUnionType)0) {
  }

  virtual ~TDDIAbstractDomainElement() throw();
  TDDIDomainElementUnion UsedDomainElement;
  TDDIDomainElementUnionType UsedDomainElementType;

  _TDDIAbstractDomainElement__isset __isset;

  void __set_UsedDomainElement(const TDDIDomainElementUnion& val);

  void __set_UsedDomainElementType(const TDDIDomainElementUnionType val);

  bool operator == (const TDDIAbstractDomainElement & rhs) const
  {
    if (!(UsedDomainElement == rhs.UsedDomainElement))
      return false;
    if (!(UsedDomainElementType == rhs.UsedDomainElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDomainElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDomainElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDomainElement &a, TDDIAbstractDomainElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDomainElement& obj);

typedef struct _TDDIFailureMode__isset {
  _TDDIFailureMode__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
} _TDDIFailureMode__isset;

class TDDIFailureMode : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureMode(const TDDIFailureMode&);
  TDDIFailureMode& operator=(const TDDIFailureMode&);
  TDDIFailureMode() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {

  }

  virtual ~TDDIFailureMode() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;

  _TDDIFailureMode__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  bool operator == (const TDDIFailureMode & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureMode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureMode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureMode &a, TDDIFailureMode &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureMode& obj);

typedef struct _TDDIProbDistParam__isset {
  _TDDIProbDistParam__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Value(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Value :1;
} _TDDIProbDistParam__isset;

class TDDIProbDistParam : public virtual ::apache::thrift::TBase {
 public:

  TDDIProbDistParam(const TDDIProbDistParam&);
  TDDIProbDistParam& operator=(const TDDIProbDistParam&);
  TDDIProbDistParam() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Value("") {

  }

  virtual ~TDDIProbDistParam() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string Value;

  _TDDIProbDistParam__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Value(const std::string& val);

  bool operator == (const TDDIProbDistParam & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Value == rhs.Value))
      return false;
    return true;
  }
  bool operator != (const TDDIProbDistParam &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIProbDistParam & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIProbDistParam &a, TDDIProbDistParam &b);

std::ostream& operator<<(std::ostream& out, const TDDIProbDistParam& obj);

typedef struct _TDDIProbabilityDistribution__isset {
  _TDDIProbabilityDistribution__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Type(true), ProbDistParams(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Type :1;
  bool ProbDistParams :1;
} _TDDIProbabilityDistribution__isset;

class TDDIProbabilityDistribution : public virtual ::apache::thrift::TBase {
 public:

  TDDIProbabilityDistribution(const TDDIProbabilityDistribution&);
  TDDIProbabilityDistribution& operator=(const TDDIProbabilityDistribution&);
  TDDIProbabilityDistribution() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Type("") {


  }

  virtual ~TDDIProbabilityDistribution() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string Type;
  std::vector<TDDIProbDistParam>  ProbDistParams;

  _TDDIProbabilityDistribution__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Type(const std::string& val);

  void __set_ProbDistParams(const std::vector<TDDIProbDistParam> & val);

  bool operator == (const TDDIProbabilityDistribution & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(ProbDistParams == rhs.ProbDistParams))
      return false;
    return true;
  }
  bool operator != (const TDDIProbabilityDistribution &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIProbabilityDistribution & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIProbabilityDistribution &a, TDDIProbabilityDistribution &b);

std::ostream& operator<<(std::ostream& out, const TDDIProbabilityDistribution& obj);

typedef struct _TDDIFailureUnion__isset {
  _TDDIFailureUnion__isset() : InterfaceFailure(false), InternalFailure(false), CCF(false) {}
  bool InterfaceFailure :1;
  bool InternalFailure :1;
  bool CCF :1;
} _TDDIFailureUnion__isset;

class TDDIFailureUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureUnion(const TDDIFailureUnion&);
  TDDIFailureUnion& operator=(const TDDIFailureUnion&);
  TDDIFailureUnion() : InterfaceFailure(), InternalFailure(), CCF() {
  }

  virtual ~TDDIFailureUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInterfaceFailure> InterfaceFailure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInternalFailure> InternalFailure;
  ::apache::thrift::stdcxx::shared_ptr<TDDICCF> CCF;

  _TDDIFailureUnion__isset __isset;

  void __set_InterfaceFailure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInterfaceFailure> val);

  void __set_InternalFailure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractInternalFailure> val);

  void __set_CCF(::apache::thrift::stdcxx::shared_ptr<TDDICCF> val);

  bool operator == (const TDDIFailureUnion & rhs) const
  {
    if (__isset.InterfaceFailure != rhs.__isset.InterfaceFailure)
      return false;
    else if (__isset.InterfaceFailure && !(InterfaceFailure == rhs.InterfaceFailure))
      return false;
    if (__isset.InternalFailure != rhs.__isset.InternalFailure)
      return false;
    else if (__isset.InternalFailure && !(InternalFailure == rhs.InternalFailure))
      return false;
    if (__isset.CCF != rhs.__isset.CCF)
      return false;
    else if (__isset.CCF && !(CCF == rhs.CCF))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureUnion &a, TDDIFailureUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureUnion& obj);

typedef struct _TDDIAbstractFailure__isset {
  _TDDIAbstractFailure__isset() : UsedFailure(false), UsedFailureType(false) {}
  bool UsedFailure :1;
  bool UsedFailureType :1;
} _TDDIAbstractFailure__isset;

class TDDIAbstractFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailure(const TDDIAbstractFailure&);
  TDDIAbstractFailure& operator=(const TDDIAbstractFailure&);
  TDDIAbstractFailure() : UsedFailureType((TDDIFailureUnionType)0) {
  }

  virtual ~TDDIAbstractFailure() throw();
  TDDIFailureUnion UsedFailure;
  TDDIFailureUnionType UsedFailureType;

  _TDDIAbstractFailure__isset __isset;

  void __set_UsedFailure(const TDDIFailureUnion& val);

  void __set_UsedFailureType(const TDDIFailureUnionType val);

  bool operator == (const TDDIAbstractFailure & rhs) const
  {
    if (!(UsedFailure == rhs.UsedFailure))
      return false;
    if (!(UsedFailureType == rhs.UsedFailureType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailure &a, TDDIAbstractFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailure& obj);

typedef struct _TDDIMinimalCutset__isset {
  _TDDIMinimalCutset__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Failures(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Failures :1;
} _TDDIMinimalCutset__isset;

class TDDIMinimalCutset : public virtual ::apache::thrift::TBase {
 public:

  TDDIMinimalCutset(const TDDIMinimalCutset&);
  TDDIMinimalCutset& operator=(const TDDIMinimalCutset&);
  TDDIMinimalCutset() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIMinimalCutset() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailure>  Failures;

  _TDDIMinimalCutset__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Failures(const std::vector<TDDIAbstractFailure> & val);

  bool operator == (const TDDIMinimalCutset & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    return true;
  }
  bool operator != (const TDDIMinimalCutset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMinimalCutset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMinimalCutset &a, TDDIMinimalCutset &b);

std::ostream& operator<<(std::ostream& out, const TDDIMinimalCutset& obj);

typedef struct _TDDIOutputFailure__isset {
  _TDDIOutputFailure__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureRate(false), FailureMode(false), ProbabilityDistribution(false), MinimalCutsets(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureRate :1;
  bool FailureMode :1;
  bool ProbabilityDistribution :1;
  bool MinimalCutsets :1;
} _TDDIOutputFailure__isset;

class TDDIOutputFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIOutputFailure(const TDDIOutputFailure&);
  TDDIOutputFailure& operator=(const TDDIOutputFailure&);
  TDDIOutputFailure() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), FailureRate(0) {


  }

  virtual ~TDDIOutputFailure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  double FailureRate;
  TDDIFailureMode FailureMode;
  TDDIProbabilityDistribution ProbabilityDistribution;
  std::vector<TDDIMinimalCutset>  MinimalCutsets;

  _TDDIOutputFailure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureRate(const double val);

  void __set_FailureMode(const TDDIFailureMode& val);

  void __set_ProbabilityDistribution(const TDDIProbabilityDistribution& val);

  void __set_MinimalCutsets(const std::vector<TDDIMinimalCutset> & val);

  bool operator == (const TDDIOutputFailure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(FailureMode == rhs.FailureMode))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    if (!(MinimalCutsets == rhs.MinimalCutsets))
      return false;
    return true;
  }
  bool operator != (const TDDIOutputFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIOutputFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIOutputFailure &a, TDDIOutputFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIOutputFailure& obj);

typedef struct _TDDIInputFailure__isset {
  _TDDIInputFailure__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureRate(false), FailureMode(false), ProbabilityDistribution(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureRate :1;
  bool FailureMode :1;
  bool ProbabilityDistribution :1;
} _TDDIInputFailure__isset;

class TDDIInputFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIInputFailure(const TDDIInputFailure&);
  TDDIInputFailure& operator=(const TDDIInputFailure&);
  TDDIInputFailure() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), FailureRate(0) {

  }

  virtual ~TDDIInputFailure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  double FailureRate;
  TDDIFailureMode FailureMode;
  TDDIProbabilityDistribution ProbabilityDistribution;

  _TDDIInputFailure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureRate(const double val);

  void __set_FailureMode(const TDDIFailureMode& val);

  void __set_ProbabilityDistribution(const TDDIProbabilityDistribution& val);

  bool operator == (const TDDIInputFailure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(FailureMode == rhs.FailureMode))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    return true;
  }
  bool operator != (const TDDIInputFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIInputFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIInputFailure &a, TDDIInputFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIInputFailure& obj);

typedef struct _TDDIInterfaceFailureUnion__isset {
  _TDDIInterfaceFailureUnion__isset() : OutputFailure(false), InputFailure(false) {}
  bool OutputFailure :1;
  bool InputFailure :1;
} _TDDIInterfaceFailureUnion__isset;

class TDDIInterfaceFailureUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIInterfaceFailureUnion(const TDDIInterfaceFailureUnion&);
  TDDIInterfaceFailureUnion& operator=(const TDDIInterfaceFailureUnion&);
  TDDIInterfaceFailureUnion() {
  }

  virtual ~TDDIInterfaceFailureUnion() throw();
  TDDIOutputFailure OutputFailure;
  TDDIInputFailure InputFailure;

  _TDDIInterfaceFailureUnion__isset __isset;

  void __set_OutputFailure(const TDDIOutputFailure& val);

  void __set_InputFailure(const TDDIInputFailure& val);

  bool operator == (const TDDIInterfaceFailureUnion & rhs) const
  {
    if (__isset.OutputFailure != rhs.__isset.OutputFailure)
      return false;
    else if (__isset.OutputFailure && !(OutputFailure == rhs.OutputFailure))
      return false;
    if (__isset.InputFailure != rhs.__isset.InputFailure)
      return false;
    else if (__isset.InputFailure && !(InputFailure == rhs.InputFailure))
      return false;
    return true;
  }
  bool operator != (const TDDIInterfaceFailureUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIInterfaceFailureUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIInterfaceFailureUnion &a, TDDIInterfaceFailureUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIInterfaceFailureUnion& obj);

typedef struct _TDDIAbstractInterfaceFailure__isset {
  _TDDIAbstractInterfaceFailure__isset() : UsedInterfaceFailure(false), UsedInterfaceFailureType(false) {}
  bool UsedInterfaceFailure :1;
  bool UsedInterfaceFailureType :1;
} _TDDIAbstractInterfaceFailure__isset;

class TDDIAbstractInterfaceFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractInterfaceFailure(const TDDIAbstractInterfaceFailure&);
  TDDIAbstractInterfaceFailure& operator=(const TDDIAbstractInterfaceFailure&);
  TDDIAbstractInterfaceFailure() : UsedInterfaceFailureType((TDDIInterfaceFailureUnionType)0) {
  }

  virtual ~TDDIAbstractInterfaceFailure() throw();
  TDDIInterfaceFailureUnion UsedInterfaceFailure;
  TDDIInterfaceFailureUnionType UsedInterfaceFailureType;

  _TDDIAbstractInterfaceFailure__isset __isset;

  void __set_UsedInterfaceFailure(const TDDIInterfaceFailureUnion& val);

  void __set_UsedInterfaceFailureType(const TDDIInterfaceFailureUnionType val);

  bool operator == (const TDDIAbstractInterfaceFailure & rhs) const
  {
    if (!(UsedInterfaceFailure == rhs.UsedInterfaceFailure))
      return false;
    if (!(UsedInterfaceFailureType == rhs.UsedInterfaceFailureType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractInterfaceFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractInterfaceFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractInterfaceFailure &a, TDDIAbstractInterfaceFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractInterfaceFailure& obj);

typedef struct _TDDIInterfaceFailurePropagation__isset {
  _TDDIInterfaceFailurePropagation__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Cause(false), Effect(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Cause :1;
  bool Effect :1;
} _TDDIInterfaceFailurePropagation__isset;

class TDDIInterfaceFailurePropagation : public virtual ::apache::thrift::TBase {
 public:

  TDDIInterfaceFailurePropagation(const TDDIInterfaceFailurePropagation&);
  TDDIInterfaceFailurePropagation& operator=(const TDDIInterfaceFailurePropagation&);
  TDDIInterfaceFailurePropagation() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {

  }

  virtual ~TDDIInterfaceFailurePropagation() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  TDDIAbstractInterfaceFailure Cause;
  TDDIAbstractInterfaceFailure Effect;

  _TDDIInterfaceFailurePropagation__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Cause(const TDDIAbstractInterfaceFailure& val);

  void __set_Effect(const TDDIAbstractInterfaceFailure& val);

  bool operator == (const TDDIInterfaceFailurePropagation & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Cause == rhs.Cause))
      return false;
    if (!(Effect == rhs.Effect))
      return false;
    return true;
  }
  bool operator != (const TDDIInterfaceFailurePropagation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIInterfaceFailurePropagation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIInterfaceFailurePropagation &a, TDDIInterfaceFailurePropagation &b);

std::ostream& operator<<(std::ostream& out, const TDDIInterfaceFailurePropagation& obj);

typedef struct _TDDIInternalFailure__isset {
  _TDDIInternalFailure__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureRate(false), FailureMode(false), ProbabilityDistribution(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureRate :1;
  bool FailureMode :1;
  bool ProbabilityDistribution :1;
} _TDDIInternalFailure__isset;

class TDDIInternalFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIInternalFailure(const TDDIInternalFailure&);
  TDDIInternalFailure& operator=(const TDDIInternalFailure&);
  TDDIInternalFailure() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), FailureRate(0) {

  }

  virtual ~TDDIInternalFailure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  double FailureRate;
  TDDIFailureMode FailureMode;
  TDDIProbabilityDistribution ProbabilityDistribution;

  _TDDIInternalFailure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureRate(const double val);

  void __set_FailureMode(const TDDIFailureMode& val);

  void __set_ProbabilityDistribution(const TDDIProbabilityDistribution& val);

  bool operator == (const TDDIInternalFailure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(FailureMode == rhs.FailureMode))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    return true;
  }
  bool operator != (const TDDIInternalFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIInternalFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIInternalFailure &a, TDDIInternalFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIInternalFailure& obj);

typedef struct _TDDICCF__isset {
  _TDDICCF__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureRate(false), FailureMode(false), ProbabilityDistribution(false), Failures(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureRate :1;
  bool FailureMode :1;
  bool ProbabilityDistribution :1;
  bool Failures :1;
} _TDDICCF__isset;

class TDDICCF : public virtual ::apache::thrift::TBase {
 public:

  TDDICCF(const TDDICCF&);
  TDDICCF& operator=(const TDDICCF&);
  TDDICCF() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), FailureRate(0) {


  }

  virtual ~TDDICCF() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  double FailureRate;
  TDDIFailureMode FailureMode;
  TDDIProbabilityDistribution ProbabilityDistribution;
  std::vector<TDDIAbstractFailure>  Failures;

  _TDDICCF__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureRate(const double val);

  void __set_FailureMode(const TDDIFailureMode& val);

  void __set_ProbabilityDistribution(const TDDIProbabilityDistribution& val);

  void __set_Failures(const std::vector<TDDIAbstractFailure> & val);

  bool operator == (const TDDICCF & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(FailureMode == rhs.FailureMode))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    return true;
  }
  bool operator != (const TDDICCF &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDICCF & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDICCF &a, TDDICCF &b);

std::ostream& operator<<(std::ostream& out, const TDDICCF& obj);

typedef struct _TDDIInternalFailureUnion__isset {
  _TDDIInternalFailureUnion__isset() : InternalFailure(false), BasicEvent(false), FMEAFailure(false), FailState(false) {}
  bool InternalFailure :1;
  bool BasicEvent :1;
  bool FMEAFailure :1;
  bool FailState :1;
} _TDDIInternalFailureUnion__isset;

class TDDIInternalFailureUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIInternalFailureUnion(const TDDIInternalFailureUnion&);
  TDDIInternalFailureUnion& operator=(const TDDIInternalFailureUnion&);
  TDDIInternalFailureUnion() : BasicEvent(), FMEAFailure(), FailState() {
  }

  virtual ~TDDIInternalFailureUnion() throw();
  TDDIInternalFailure InternalFailure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIBasicEvent> BasicEvent;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFMEAFailure> FMEAFailure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailState> FailState;

  _TDDIInternalFailureUnion__isset __isset;

  void __set_InternalFailure(const TDDIInternalFailure& val);

  void __set_BasicEvent(::apache::thrift::stdcxx::shared_ptr<TDDIBasicEvent> val);

  void __set_FMEAFailure(::apache::thrift::stdcxx::shared_ptr<TDDIFMEAFailure> val);

  void __set_FailState(::apache::thrift::stdcxx::shared_ptr<TDDIFailState> val);

  bool operator == (const TDDIInternalFailureUnion & rhs) const
  {
    if (__isset.InternalFailure != rhs.__isset.InternalFailure)
      return false;
    else if (__isset.InternalFailure && !(InternalFailure == rhs.InternalFailure))
      return false;
    if (__isset.BasicEvent != rhs.__isset.BasicEvent)
      return false;
    else if (__isset.BasicEvent && !(BasicEvent == rhs.BasicEvent))
      return false;
    if (__isset.FMEAFailure != rhs.__isset.FMEAFailure)
      return false;
    else if (__isset.FMEAFailure && !(FMEAFailure == rhs.FMEAFailure))
      return false;
    if (__isset.FailState != rhs.__isset.FailState)
      return false;
    else if (__isset.FailState && !(FailState == rhs.FailState))
      return false;
    return true;
  }
  bool operator != (const TDDIInternalFailureUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIInternalFailureUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIInternalFailureUnion &a, TDDIInternalFailureUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIInternalFailureUnion& obj);

typedef struct _TDDIAbstractInternalFailure__isset {
  _TDDIAbstractInternalFailure__isset() : UsedInternalFailure(false), UsedInternalFailureType(false) {}
  bool UsedInternalFailure :1;
  bool UsedInternalFailureType :1;
} _TDDIAbstractInternalFailure__isset;

class TDDIAbstractInternalFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractInternalFailure(const TDDIAbstractInternalFailure&);
  TDDIAbstractInternalFailure& operator=(const TDDIAbstractInternalFailure&);
  TDDIAbstractInternalFailure() : UsedInternalFailureType((TDDIInternalFailureUnionType)0) {
  }

  virtual ~TDDIAbstractInternalFailure() throw();
  TDDIInternalFailureUnion UsedInternalFailure;
  TDDIInternalFailureUnionType UsedInternalFailureType;

  _TDDIAbstractInternalFailure__isset __isset;

  void __set_UsedInternalFailure(const TDDIInternalFailureUnion& val);

  void __set_UsedInternalFailureType(const TDDIInternalFailureUnionType val);

  bool operator == (const TDDIAbstractInternalFailure & rhs) const
  {
    if (!(UsedInternalFailure == rhs.UsedInternalFailure))
      return false;
    if (!(UsedInternalFailureType == rhs.UsedInternalFailureType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractInternalFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractInternalFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractInternalFailure &a, TDDIAbstractInternalFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractInternalFailure& obj);

typedef struct _TDDIFailureAnalysisArtifactUnion__isset {
  _TDDIFailureAnalysisArtifactUnion__isset() : FailureLogicPackage(false), MinimalCutset(false), InterfaceFailurePropagation(false), Failure(false), FailureMode(false), ProbabilityDistribution(false), ProbDistParam(false), FTAArtifact(false), FMEAArtifact(false), MarkovArtifact(false) {}
  bool FailureLogicPackage :1;
  bool MinimalCutset :1;
  bool InterfaceFailurePropagation :1;
  bool Failure :1;
  bool FailureMode :1;
  bool ProbabilityDistribution :1;
  bool ProbDistParam :1;
  bool FTAArtifact :1;
  bool FMEAArtifact :1;
  bool MarkovArtifact :1;
} _TDDIFailureAnalysisArtifactUnion__isset;

class TDDIFailureAnalysisArtifactUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureAnalysisArtifactUnion(const TDDIFailureAnalysisArtifactUnion&);
  TDDIFailureAnalysisArtifactUnion& operator=(const TDDIFailureAnalysisArtifactUnion&);
  TDDIFailureAnalysisArtifactUnion() : FailureLogicPackage(), FTAArtifact(), FMEAArtifact(), MarkovArtifact() {
  }

  virtual ~TDDIFailureAnalysisArtifactUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> FailureLogicPackage;
  TDDIMinimalCutset MinimalCutset;
  TDDIInterfaceFailurePropagation InterfaceFailurePropagation;
  TDDIAbstractFailure Failure;
  TDDIFailureMode FailureMode;
  TDDIProbabilityDistribution ProbabilityDistribution;
  TDDIProbDistParam ProbDistParam;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAArtifact> FTAArtifact;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAArtifact> FMEAArtifact;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovArtifact> MarkovArtifact;

  _TDDIFailureAnalysisArtifactUnion__isset __isset;

  void __set_FailureLogicPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> val);

  void __set_MinimalCutset(const TDDIMinimalCutset& val);

  void __set_InterfaceFailurePropagation(const TDDIInterfaceFailurePropagation& val);

  void __set_Failure(const TDDIAbstractFailure& val);

  void __set_FailureMode(const TDDIFailureMode& val);

  void __set_ProbabilityDistribution(const TDDIProbabilityDistribution& val);

  void __set_ProbDistParam(const TDDIProbDistParam& val);

  void __set_FTAArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAArtifact> val);

  void __set_FMEAArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAArtifact> val);

  void __set_MarkovArtifact(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovArtifact> val);

  bool operator == (const TDDIFailureAnalysisArtifactUnion & rhs) const
  {
    if (__isset.FailureLogicPackage != rhs.__isset.FailureLogicPackage)
      return false;
    else if (__isset.FailureLogicPackage && !(FailureLogicPackage == rhs.FailureLogicPackage))
      return false;
    if (__isset.MinimalCutset != rhs.__isset.MinimalCutset)
      return false;
    else if (__isset.MinimalCutset && !(MinimalCutset == rhs.MinimalCutset))
      return false;
    if (__isset.InterfaceFailurePropagation != rhs.__isset.InterfaceFailurePropagation)
      return false;
    else if (__isset.InterfaceFailurePropagation && !(InterfaceFailurePropagation == rhs.InterfaceFailurePropagation))
      return false;
    if (__isset.Failure != rhs.__isset.Failure)
      return false;
    else if (__isset.Failure && !(Failure == rhs.Failure))
      return false;
    if (__isset.FailureMode != rhs.__isset.FailureMode)
      return false;
    else if (__isset.FailureMode && !(FailureMode == rhs.FailureMode))
      return false;
    if (__isset.ProbabilityDistribution != rhs.__isset.ProbabilityDistribution)
      return false;
    else if (__isset.ProbabilityDistribution && !(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    if (__isset.ProbDistParam != rhs.__isset.ProbDistParam)
      return false;
    else if (__isset.ProbDistParam && !(ProbDistParam == rhs.ProbDistParam))
      return false;
    if (__isset.FTAArtifact != rhs.__isset.FTAArtifact)
      return false;
    else if (__isset.FTAArtifact && !(FTAArtifact == rhs.FTAArtifact))
      return false;
    if (__isset.FMEAArtifact != rhs.__isset.FMEAArtifact)
      return false;
    else if (__isset.FMEAArtifact && !(FMEAArtifact == rhs.FMEAArtifact))
      return false;
    if (__isset.MarkovArtifact != rhs.__isset.MarkovArtifact)
      return false;
    else if (__isset.MarkovArtifact && !(MarkovArtifact == rhs.MarkovArtifact))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureAnalysisArtifactUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureAnalysisArtifactUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureAnalysisArtifactUnion &a, TDDIFailureAnalysisArtifactUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureAnalysisArtifactUnion& obj);

typedef struct _TDDIAbstractFailureAnalysisArtifact__isset {
  _TDDIAbstractFailureAnalysisArtifact__isset() : UsedFailureAnalysisArtifact(false), UsedFailureAnalysisArtifactType(false) {}
  bool UsedFailureAnalysisArtifact :1;
  bool UsedFailureAnalysisArtifactType :1;
} _TDDIAbstractFailureAnalysisArtifact__isset;

class TDDIAbstractFailureAnalysisArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailureAnalysisArtifact(const TDDIAbstractFailureAnalysisArtifact&);
  TDDIAbstractFailureAnalysisArtifact& operator=(const TDDIAbstractFailureAnalysisArtifact&);
  TDDIAbstractFailureAnalysisArtifact() : UsedFailureAnalysisArtifactType((TDDIFailureAnalysisArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractFailureAnalysisArtifact() throw();
  TDDIFailureAnalysisArtifactUnion UsedFailureAnalysisArtifact;
  TDDIFailureAnalysisArtifactUnionType UsedFailureAnalysisArtifactType;

  _TDDIAbstractFailureAnalysisArtifact__isset __isset;

  void __set_UsedFailureAnalysisArtifact(const TDDIFailureAnalysisArtifactUnion& val);

  void __set_UsedFailureAnalysisArtifactType(const TDDIFailureAnalysisArtifactUnionType val);

  bool operator == (const TDDIAbstractFailureAnalysisArtifact & rhs) const
  {
    if (!(UsedFailureAnalysisArtifact == rhs.UsedFailureAnalysisArtifact))
      return false;
    if (!(UsedFailureAnalysisArtifactType == rhs.UsedFailureAnalysisArtifactType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailureAnalysisArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailureAnalysisArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailureAnalysisArtifact &a, TDDIAbstractFailureAnalysisArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureAnalysisArtifact& obj);

typedef struct _TDDIFailureLogicPackage__isset {
  _TDDIFailureLogicPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
} _TDDIFailureLogicPackage__isset;

class TDDIFailureLogicPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureLogicPackage(const TDDIFailureLogicPackage&);
  TDDIFailureLogicPackage& operator=(const TDDIFailureLogicPackage&);
  TDDIFailureLogicPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIFailureLogicPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifact>  FailureAnalysisArtifacts;

  _TDDIFailureLogicPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifact> & val);

  bool operator == (const TDDIFailureLogicPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureLogicPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureLogicPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureLogicPackage &a, TDDIFailureLogicPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackage& obj);

typedef struct _TDDIFailureLogicPackageInterface__isset {
  _TDDIFailureLogicPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool Implements :1;
} _TDDIFailureLogicPackageInterface__isset;

class TDDIFailureLogicPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureLogicPackageInterface(const TDDIFailureLogicPackageInterface&);
  TDDIFailureLogicPackageInterface& operator=(const TDDIFailureLogicPackageInterface&);
  TDDIFailureLogicPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Implements() {


  }

  virtual ~TDDIFailureLogicPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifact>  FailureAnalysisArtifacts;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> Implements;

  _TDDIFailureLogicPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifact> & val);

  void __set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureLogicPackage> val);

  bool operator == (const TDDIFailureLogicPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureLogicPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureLogicPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureLogicPackageInterface &a, TDDIFailureLogicPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackageInterface& obj);

typedef struct _TDDIFailureLogicPackageBinding__isset {
  _TDDIFailureLogicPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool ParticipantPackages :1;
} _TDDIFailureLogicPackageBinding__isset;

class TDDIFailureLogicPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureLogicPackageBinding(const TDDIFailureLogicPackageBinding&);
  TDDIFailureLogicPackageBinding& operator=(const TDDIFailureLogicPackageBinding&);
  TDDIFailureLogicPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {



  }

  virtual ~TDDIFailureLogicPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifact>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFailureLogicPackageRef>  ParticipantPackages;

  _TDDIFailureLogicPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifact> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  bool operator == (const TDDIFailureLogicPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureLogicPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureLogicPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureLogicPackageBinding &a, TDDIFailureLogicPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackageBinding& obj);

typedef struct _TDDIFailureLogicPackageUnion__isset {
  _TDDIFailureLogicPackageUnion__isset() : FailureLogicPackage(false), FailureLogicPackageInterface(false), FailureLogicPackageBinding(false), FTAPackage(false), FMEAPackage(false), MarkovChainPackage(false) {}
  bool FailureLogicPackage :1;
  bool FailureLogicPackageInterface :1;
  bool FailureLogicPackageBinding :1;
  bool FTAPackage :1;
  bool FMEAPackage :1;
  bool MarkovChainPackage :1;
} _TDDIFailureLogicPackageUnion__isset;

class TDDIFailureLogicPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureLogicPackageUnion(const TDDIFailureLogicPackageUnion&);
  TDDIFailureLogicPackageUnion& operator=(const TDDIFailureLogicPackageUnion&);
  TDDIFailureLogicPackageUnion() : FTAPackage(), FMEAPackage(), MarkovChainPackage() {
  }

  virtual ~TDDIFailureLogicPackageUnion() throw();
  TDDIFailureLogicPackage FailureLogicPackage;
  TDDIFailureLogicPackageInterface FailureLogicPackageInterface;
  TDDIFailureLogicPackageBinding FailureLogicPackageBinding;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> FTAPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> FMEAPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovChainPackage> MarkovChainPackage;

  _TDDIFailureLogicPackageUnion__isset __isset;

  void __set_FailureLogicPackage(const TDDIFailureLogicPackage& val);

  void __set_FailureLogicPackageInterface(const TDDIFailureLogicPackageInterface& val);

  void __set_FailureLogicPackageBinding(const TDDIFailureLogicPackageBinding& val);

  void __set_FTAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> val);

  void __set_FMEAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> val);

  void __set_MarkovChainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMarkovChainPackage> val);

  bool operator == (const TDDIFailureLogicPackageUnion & rhs) const
  {
    if (__isset.FailureLogicPackage != rhs.__isset.FailureLogicPackage)
      return false;
    else if (__isset.FailureLogicPackage && !(FailureLogicPackage == rhs.FailureLogicPackage))
      return false;
    if (__isset.FailureLogicPackageInterface != rhs.__isset.FailureLogicPackageInterface)
      return false;
    else if (__isset.FailureLogicPackageInterface && !(FailureLogicPackageInterface == rhs.FailureLogicPackageInterface))
      return false;
    if (__isset.FailureLogicPackageBinding != rhs.__isset.FailureLogicPackageBinding)
      return false;
    else if (__isset.FailureLogicPackageBinding && !(FailureLogicPackageBinding == rhs.FailureLogicPackageBinding))
      return false;
    if (__isset.FTAPackage != rhs.__isset.FTAPackage)
      return false;
    else if (__isset.FTAPackage && !(FTAPackage == rhs.FTAPackage))
      return false;
    if (__isset.FMEAPackage != rhs.__isset.FMEAPackage)
      return false;
    else if (__isset.FMEAPackage && !(FMEAPackage == rhs.FMEAPackage))
      return false;
    if (__isset.MarkovChainPackage != rhs.__isset.MarkovChainPackage)
      return false;
    else if (__isset.MarkovChainPackage && !(MarkovChainPackage == rhs.MarkovChainPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureLogicPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureLogicPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureLogicPackageUnion &a, TDDIFailureLogicPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackageUnion& obj);

typedef struct _TDDIAbstractFailureLogicPackage__isset {
  _TDDIAbstractFailureLogicPackage__isset() : UsedFailureLogicPackage(false), UsedFailureLogicPackageType(false) {}
  bool UsedFailureLogicPackage :1;
  bool UsedFailureLogicPackageType :1;
} _TDDIAbstractFailureLogicPackage__isset;

class TDDIAbstractFailureLogicPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailureLogicPackage(const TDDIAbstractFailureLogicPackage&);
  TDDIAbstractFailureLogicPackage& operator=(const TDDIAbstractFailureLogicPackage&);
  TDDIAbstractFailureLogicPackage() : UsedFailureLogicPackageType((TDDIFailureLogicPackageUnionType)0) {
  }

  virtual ~TDDIAbstractFailureLogicPackage() throw();
  TDDIFailureLogicPackageUnion UsedFailureLogicPackage;
  TDDIFailureLogicPackageUnionType UsedFailureLogicPackageType;

  _TDDIAbstractFailureLogicPackage__isset __isset;

  void __set_UsedFailureLogicPackage(const TDDIFailureLogicPackageUnion& val);

  void __set_UsedFailureLogicPackageType(const TDDIFailureLogicPackageUnionType val);

  bool operator == (const TDDIAbstractFailureLogicPackage & rhs) const
  {
    if (!(UsedFailureLogicPackage == rhs.UsedFailureLogicPackage))
      return false;
    if (!(UsedFailureLogicPackageType == rhs.UsedFailureLogicPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailureLogicPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailureLogicPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailureLogicPackage &a, TDDIAbstractFailureLogicPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureLogicPackage& obj);

typedef struct _TDDIFMEAPackage__isset {
  _TDDIFMEAPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), FMEAArtifacts(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool FMEAArtifacts :1;
} _TDDIFMEAPackage__isset;

class TDDIFMEAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAPackage(const TDDIFMEAPackage&);
  TDDIFMEAPackage& operator=(const TDDIFMEAPackage&);
  TDDIFMEAPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {



  }

  virtual ~TDDIFMEAPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFMEAArtifactRef>  FMEAArtifacts;

  _TDDIFMEAPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val);

  bool operator == (const TDDIFMEAPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(FMEAArtifacts == rhs.FMEAArtifacts))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAPackage &a, TDDIFMEAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackage& obj);

typedef struct _TDDIFMEAPackageInterface__isset {
  _TDDIFMEAPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), FMEAArtifacts(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool FMEAArtifacts :1;
  bool Implements :1;
} _TDDIFMEAPackageInterface__isset;

class TDDIFMEAPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAPackageInterface(const TDDIFMEAPackageInterface&);
  TDDIFMEAPackageInterface& operator=(const TDDIFMEAPackageInterface&);
  TDDIFMEAPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Implements() {



  }

  virtual ~TDDIFMEAPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFMEAArtifactRef>  FMEAArtifacts;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> Implements;

  _TDDIFMEAPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val);

  void __set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPackage> val);

  bool operator == (const TDDIFMEAPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(FMEAArtifacts == rhs.FMEAArtifacts))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAPackageInterface &a, TDDIFMEAPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackageInterface& obj);

typedef struct _TDDIFMEAPackageBinding__isset {
  _TDDIFMEAPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), FMEAArtifacts(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool FMEAArtifacts :1;
  bool ParticipantPackages :1;
} _TDDIFMEAPackageBinding__isset;

class TDDIFMEAPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAPackageBinding(const TDDIFMEAPackageBinding&);
  TDDIFMEAPackageBinding& operator=(const TDDIFMEAPackageBinding&);
  TDDIFMEAPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {




  }

  virtual ~TDDIFMEAPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFMEAArtifactRef>  FMEAArtifacts;
  std::vector<TDDIAbstractFMEAPackageRef>  ParticipantPackages;

  _TDDIFMEAPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractFMEAPackageRef> & val);

  bool operator == (const TDDIFMEAPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(FMEAArtifacts == rhs.FMEAArtifacts))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAPackageBinding &a, TDDIFMEAPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackageBinding& obj);

typedef struct _TDDIBasicFMEAPackage__isset {
  _TDDIBasicFMEAPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), FMEAArtifacts(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool FMEAArtifacts :1;
} _TDDIBasicFMEAPackage__isset;

class TDDIBasicFMEAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIBasicFMEAPackage(const TDDIBasicFMEAPackage&);
  TDDIBasicFMEAPackage& operator=(const TDDIBasicFMEAPackage&);
  TDDIBasicFMEAPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {



  }

  virtual ~TDDIBasicFMEAPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFMEAArtifactRef>  FMEAArtifacts;

  _TDDIBasicFMEAPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val);

  bool operator == (const TDDIBasicFMEAPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(FMEAArtifacts == rhs.FMEAArtifacts))
      return false;
    return true;
  }
  bool operator != (const TDDIBasicFMEAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIBasicFMEAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIBasicFMEAPackage &a, TDDIBasicFMEAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIBasicFMEAPackage& obj);

typedef struct _TDDIFMEDAPackage__isset {
  _TDDIFMEDAPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), FMEAArtifacts(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool FMEAArtifacts :1;
} _TDDIFMEDAPackage__isset;

class TDDIFMEDAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEDAPackage(const TDDIFMEDAPackage&);
  TDDIFMEDAPackage& operator=(const TDDIFMEDAPackage&);
  TDDIFMEDAPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {



  }

  virtual ~TDDIFMEDAPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFMEAArtifactRef>  FMEAArtifacts;

  _TDDIFMEDAPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_FMEAArtifacts(const std::vector<TDDIAbstractFMEAArtifactRef> & val);

  bool operator == (const TDDIFMEDAPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(FMEAArtifacts == rhs.FMEAArtifacts))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEDAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEDAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEDAPackage &a, TDDIFMEDAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEDAPackage& obj);

typedef struct _TDDIFMEAPackageUnion__isset {
  _TDDIFMEAPackageUnion__isset() : FMEAPackage(false), FMEAPackageInterface(false), FMEAPackageBinding(false), BasicFMEAPackage(false), FMEDAPackage(false) {}
  bool FMEAPackage :1;
  bool FMEAPackageInterface :1;
  bool FMEAPackageBinding :1;
  bool BasicFMEAPackage :1;
  bool FMEDAPackage :1;
} _TDDIFMEAPackageUnion__isset;

class TDDIFMEAPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAPackageUnion(const TDDIFMEAPackageUnion&);
  TDDIFMEAPackageUnion& operator=(const TDDIFMEAPackageUnion&);
  TDDIFMEAPackageUnion() {
  }

  virtual ~TDDIFMEAPackageUnion() throw();
  TDDIFMEAPackage FMEAPackage;
  TDDIFMEAPackageInterface FMEAPackageInterface;
  TDDIFMEAPackageBinding FMEAPackageBinding;
  TDDIBasicFMEAPackage BasicFMEAPackage;
  TDDIFMEDAPackage FMEDAPackage;

  _TDDIFMEAPackageUnion__isset __isset;

  void __set_FMEAPackage(const TDDIFMEAPackage& val);

  void __set_FMEAPackageInterface(const TDDIFMEAPackageInterface& val);

  void __set_FMEAPackageBinding(const TDDIFMEAPackageBinding& val);

  void __set_BasicFMEAPackage(const TDDIBasicFMEAPackage& val);

  void __set_FMEDAPackage(const TDDIFMEDAPackage& val);

  bool operator == (const TDDIFMEAPackageUnion & rhs) const
  {
    if (__isset.FMEAPackage != rhs.__isset.FMEAPackage)
      return false;
    else if (__isset.FMEAPackage && !(FMEAPackage == rhs.FMEAPackage))
      return false;
    if (__isset.FMEAPackageInterface != rhs.__isset.FMEAPackageInterface)
      return false;
    else if (__isset.FMEAPackageInterface && !(FMEAPackageInterface == rhs.FMEAPackageInterface))
      return false;
    if (__isset.FMEAPackageBinding != rhs.__isset.FMEAPackageBinding)
      return false;
    else if (__isset.FMEAPackageBinding && !(FMEAPackageBinding == rhs.FMEAPackageBinding))
      return false;
    if (__isset.BasicFMEAPackage != rhs.__isset.BasicFMEAPackage)
      return false;
    else if (__isset.BasicFMEAPackage && !(BasicFMEAPackage == rhs.BasicFMEAPackage))
      return false;
    if (__isset.FMEDAPackage != rhs.__isset.FMEDAPackage)
      return false;
    else if (__isset.FMEDAPackage && !(FMEDAPackage == rhs.FMEDAPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAPackageUnion &a, TDDIFMEAPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPackageUnion& obj);

typedef struct _TDDIAbstractFMEAPackage__isset {
  _TDDIAbstractFMEAPackage__isset() : UsedFMEAPackage(false), UsedFMEAPackageType(false) {}
  bool UsedFMEAPackage :1;
  bool UsedFMEAPackageType :1;
} _TDDIAbstractFMEAPackage__isset;

class TDDIAbstractFMEAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFMEAPackage(const TDDIAbstractFMEAPackage&);
  TDDIAbstractFMEAPackage& operator=(const TDDIAbstractFMEAPackage&);
  TDDIAbstractFMEAPackage() : UsedFMEAPackageType((TDDIFMEAPackageUnionType)0) {
  }

  virtual ~TDDIAbstractFMEAPackage() throw();
  TDDIFMEAPackageUnion UsedFMEAPackage;
  TDDIFMEAPackageUnionType UsedFMEAPackageType;

  _TDDIAbstractFMEAPackage__isset __isset;

  void __set_UsedFMEAPackage(const TDDIFMEAPackageUnion& val);

  void __set_UsedFMEAPackageType(const TDDIFMEAPackageUnionType val);

  bool operator == (const TDDIAbstractFMEAPackage & rhs) const
  {
    if (!(UsedFMEAPackage == rhs.UsedFMEAPackage))
      return false;
    if (!(UsedFMEAPackageType == rhs.UsedFMEAPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFMEAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFMEAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFMEAPackage &a, TDDIAbstractFMEAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAPackage& obj);

typedef struct _TDDIFMEAArtifactUnion__isset {
  _TDDIFMEAArtifactUnion__isset() : FMEAPropagation(false) {}
  bool FMEAPropagation :1;
} _TDDIFMEAArtifactUnion__isset;

class TDDIFMEAArtifactUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAArtifactUnion(const TDDIFMEAArtifactUnion&);
  TDDIFMEAArtifactUnion& operator=(const TDDIFMEAArtifactUnion&);
  TDDIFMEAArtifactUnion() : FMEAPropagation() {
  }

  virtual ~TDDIFMEAArtifactUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPropagation> FMEAPropagation;

  _TDDIFMEAArtifactUnion__isset __isset;

  void __set_FMEAPropagation(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAPropagation> val);

  bool operator == (const TDDIFMEAArtifactUnion & rhs) const
  {
    if (__isset.FMEAPropagation != rhs.__isset.FMEAPropagation)
      return false;
    else if (__isset.FMEAPropagation && !(FMEAPropagation == rhs.FMEAPropagation))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAArtifactUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAArtifactUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAArtifactUnion &a, TDDIFMEAArtifactUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAArtifactUnion& obj);

typedef struct _TDDIAbstractFMEAArtifact__isset {
  _TDDIAbstractFMEAArtifact__isset() : UsedFMEAArtifact(false), UsedFMEAArtifactType(false) {}
  bool UsedFMEAArtifact :1;
  bool UsedFMEAArtifactType :1;
} _TDDIAbstractFMEAArtifact__isset;

class TDDIAbstractFMEAArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFMEAArtifact(const TDDIAbstractFMEAArtifact&);
  TDDIAbstractFMEAArtifact& operator=(const TDDIAbstractFMEAArtifact&);
  TDDIAbstractFMEAArtifact() : UsedFMEAArtifactType((TDDIFMEAArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractFMEAArtifact() throw();
  TDDIFMEAArtifactUnion UsedFMEAArtifact;
  TDDIFMEAArtifactUnionType UsedFMEAArtifactType;

  _TDDIAbstractFMEAArtifact__isset __isset;

  void __set_UsedFMEAArtifact(const TDDIFMEAArtifactUnion& val);

  void __set_UsedFMEAArtifactType(const TDDIFMEAArtifactUnionType val);

  bool operator == (const TDDIAbstractFMEAArtifact & rhs) const
  {
    if (!(UsedFMEAArtifact == rhs.UsedFMEAArtifact))
      return false;
    if (!(UsedFMEAArtifactType == rhs.UsedFMEAArtifactType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFMEAArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFMEAArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFMEAArtifact &a, TDDIAbstractFMEAArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAArtifact& obj);

typedef struct _TDDIFMEAFailure__isset {
  _TDDIFMEAFailure__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureRate(false), FailureMode(false), ProbabilityDistribution(false), OutputFailure(false), InputFailure(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureRate :1;
  bool FailureMode :1;
  bool ProbabilityDistribution :1;
  bool OutputFailure :1;
  bool InputFailure :1;
} _TDDIFMEAFailure__isset;

class TDDIFMEAFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAFailure(const TDDIFMEAFailure&);
  TDDIFMEAFailure& operator=(const TDDIFMEAFailure&);
  TDDIFMEAFailure() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), FailureRate(0), FailureMode(), ProbabilityDistribution(), OutputFailure(), InputFailure() {

  }

  virtual ~TDDIFMEAFailure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  double FailureRate;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> FailureMode;
  ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> ProbabilityDistribution;
  ::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> OutputFailure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIInputFailure> InputFailure;

  _TDDIFMEAFailure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureRate(const double val);

  void __set_FailureMode(::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> val);

  void __set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val);

  void __set_OutputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> val);

  void __set_InputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIInputFailure> val);

  bool operator == (const TDDIFMEAFailure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(FailureMode == rhs.FailureMode))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    if (!(OutputFailure == rhs.OutputFailure))
      return false;
    if (!(InputFailure == rhs.InputFailure))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAFailure &a, TDDIFMEAFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAFailure& obj);

typedef struct _TDDIFMEAPropagation__isset {
  _TDDIFMEAPropagation__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FMEACause(false), FMEAEffect(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FMEACause :1;
  bool FMEAEffect :1;
} _TDDIFMEAPropagation__isset;

class TDDIFMEAPropagation : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAPropagation(const TDDIFMEAPropagation&);
  TDDIFMEAPropagation& operator=(const TDDIFMEAPropagation&);
  TDDIFMEAPropagation() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {

  }

  virtual ~TDDIFMEAPropagation() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  TDDIFMEAFailure FMEACause;
  TDDIFMEAFailure FMEAEffect;

  _TDDIFMEAPropagation__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FMEACause(const TDDIFMEAFailure& val);

  void __set_FMEAEffect(const TDDIFMEAFailure& val);

  bool operator == (const TDDIFMEAPropagation & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FMEACause == rhs.FMEACause))
      return false;
    if (!(FMEAEffect == rhs.FMEAEffect))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAPropagation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAPropagation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAPropagation &a, TDDIFMEAPropagation &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPropagation& obj);

typedef struct _TDDIDiagnosableFailurePropagation__isset {
  _TDDIDiagnosableFailurePropagation__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FMEACause(false), FMEAEffect(false), DiagnosisRate(true), ProbabilityDistribution(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FMEACause :1;
  bool FMEAEffect :1;
  bool DiagnosisRate :1;
  bool ProbabilityDistribution :1;
} _TDDIDiagnosableFailurePropagation__isset;

class TDDIDiagnosableFailurePropagation : public virtual ::apache::thrift::TBase {
 public:

  TDDIDiagnosableFailurePropagation(const TDDIDiagnosableFailurePropagation&);
  TDDIDiagnosableFailurePropagation& operator=(const TDDIDiagnosableFailurePropagation&);
  TDDIDiagnosableFailurePropagation() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), DiagnosisRate(0), ProbabilityDistribution() {

  }

  virtual ~TDDIDiagnosableFailurePropagation() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  TDDIFMEAFailure FMEACause;
  TDDIFMEAFailure FMEAEffect;
  double DiagnosisRate;
  ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> ProbabilityDistribution;

  _TDDIDiagnosableFailurePropagation__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FMEACause(const TDDIFMEAFailure& val);

  void __set_FMEAEffect(const TDDIFMEAFailure& val);

  void __set_DiagnosisRate(const double val);

  void __set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val);

  bool operator == (const TDDIDiagnosableFailurePropagation & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FMEACause == rhs.FMEACause))
      return false;
    if (!(FMEAEffect == rhs.FMEAEffect))
      return false;
    if (!(DiagnosisRate == rhs.DiagnosisRate))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    return true;
  }
  bool operator != (const TDDIDiagnosableFailurePropagation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDiagnosableFailurePropagation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDiagnosableFailurePropagation &a, TDDIDiagnosableFailurePropagation &b);

std::ostream& operator<<(std::ostream& out, const TDDIDiagnosableFailurePropagation& obj);

typedef struct _TDDIFMEAPropagationUnion__isset {
  _TDDIFMEAPropagationUnion__isset() : FMEAPropagation(false), DiagnosableFailurePropagation(false) {}
  bool FMEAPropagation :1;
  bool DiagnosableFailurePropagation :1;
} _TDDIFMEAPropagationUnion__isset;

class TDDIFMEAPropagationUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAPropagationUnion(const TDDIFMEAPropagationUnion&);
  TDDIFMEAPropagationUnion& operator=(const TDDIFMEAPropagationUnion&);
  TDDIFMEAPropagationUnion() {
  }

  virtual ~TDDIFMEAPropagationUnion() throw();
  TDDIFMEAPropagation FMEAPropagation;
  TDDIDiagnosableFailurePropagation DiagnosableFailurePropagation;

  _TDDIFMEAPropagationUnion__isset __isset;

  void __set_FMEAPropagation(const TDDIFMEAPropagation& val);

  void __set_DiagnosableFailurePropagation(const TDDIDiagnosableFailurePropagation& val);

  bool operator == (const TDDIFMEAPropagationUnion & rhs) const
  {
    if (__isset.FMEAPropagation != rhs.__isset.FMEAPropagation)
      return false;
    else if (__isset.FMEAPropagation && !(FMEAPropagation == rhs.FMEAPropagation))
      return false;
    if (__isset.DiagnosableFailurePropagation != rhs.__isset.DiagnosableFailurePropagation)
      return false;
    else if (__isset.DiagnosableFailurePropagation && !(DiagnosableFailurePropagation == rhs.DiagnosableFailurePropagation))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAPropagationUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAPropagationUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAPropagationUnion &a, TDDIFMEAPropagationUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAPropagationUnion& obj);

typedef struct _TDDIAbstractFMEAPropagation__isset {
  _TDDIAbstractFMEAPropagation__isset() : UsedFMEAPropagation(false), UsedFMEAPropagationType(false) {}
  bool UsedFMEAPropagation :1;
  bool UsedFMEAPropagationType :1;
} _TDDIAbstractFMEAPropagation__isset;

class TDDIAbstractFMEAPropagation : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFMEAPropagation(const TDDIAbstractFMEAPropagation&);
  TDDIAbstractFMEAPropagation& operator=(const TDDIAbstractFMEAPropagation&);
  TDDIAbstractFMEAPropagation() : UsedFMEAPropagationType((TDDIFMEAPropagationUnionType)0) {
  }

  virtual ~TDDIAbstractFMEAPropagation() throw();
  TDDIFMEAPropagationUnion UsedFMEAPropagation;
  TDDIFMEAPropagationUnionType UsedFMEAPropagationType;

  _TDDIAbstractFMEAPropagation__isset __isset;

  void __set_UsedFMEAPropagation(const TDDIFMEAPropagationUnion& val);

  void __set_UsedFMEAPropagationType(const TDDIFMEAPropagationUnionType val);

  bool operator == (const TDDIAbstractFMEAPropagation & rhs) const
  {
    if (!(UsedFMEAPropagation == rhs.UsedFMEAPropagation))
      return false;
    if (!(UsedFMEAPropagationType == rhs.UsedFMEAPropagationType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFMEAPropagation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFMEAPropagation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFMEAPropagation &a, TDDIAbstractFMEAPropagation &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAPropagation& obj);

typedef struct _TDDIInputEvent__isset {
  _TDDIInputEvent__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), InputFailure(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool InputFailure :1;
} _TDDIInputEvent__isset;

class TDDIInputEvent : public virtual ::apache::thrift::TBase {
 public:

  TDDIInputEvent(const TDDIInputEvent&);
  TDDIInputEvent& operator=(const TDDIInputEvent&);
  TDDIInputEvent() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), InputFailure() {

  }

  virtual ~TDDIInputEvent() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIInputFailure> InputFailure;

  _TDDIInputEvent__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_InputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIInputFailure> val);

  bool operator == (const TDDIInputEvent & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(InputFailure == rhs.InputFailure))
      return false;
    return true;
  }
  bool operator != (const TDDIInputEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIInputEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIInputEvent &a, TDDIInputEvent &b);

std::ostream& operator<<(std::ostream& out, const TDDIInputEvent& obj);

typedef struct _TDDIOutputEvent__isset {
  _TDDIOutputEvent__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), OutputFailure(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool OutputFailure :1;
} _TDDIOutputEvent__isset;

class TDDIOutputEvent : public virtual ::apache::thrift::TBase {
 public:

  TDDIOutputEvent(const TDDIOutputEvent&);
  TDDIOutputEvent& operator=(const TDDIOutputEvent&);
  TDDIOutputEvent() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), OutputFailure() {

  }

  virtual ~TDDIOutputEvent() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> OutputFailure;

  _TDDIOutputEvent__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_OutputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> val);

  bool operator == (const TDDIOutputEvent & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(OutputFailure == rhs.OutputFailure))
      return false;
    return true;
  }
  bool operator != (const TDDIOutputEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIOutputEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIOutputEvent &a, TDDIOutputEvent &b);

std::ostream& operator<<(std::ostream& out, const TDDIOutputEvent& obj);

typedef struct _TDDIGate__isset {
  _TDDIGate__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Type(true), MinimalCutsets(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Type :1;
  bool MinimalCutsets :1;
} _TDDIGate__isset;

class TDDIGate : public virtual ::apache::thrift::TBase {
 public:

  TDDIGate(const TDDIGate&);
  TDDIGate& operator=(const TDDIGate&);
  TDDIGate() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Type((TDDIGateType)0) {

    Type = (TDDIGateType)0;


  }

  virtual ~TDDIGate() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  TDDIGateType Type;
  std::vector<TDDIMinimalCutsetRef>  MinimalCutsets;

  _TDDIGate__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Type(const TDDIGateType val);

  void __set_MinimalCutsets(const std::vector<TDDIMinimalCutsetRef> & val);

  bool operator == (const TDDIGate & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(MinimalCutsets == rhs.MinimalCutsets))
      return false;
    return true;
  }
  bool operator != (const TDDIGate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIGate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIGate &a, TDDIGate &b);

std::ostream& operator<<(std::ostream& out, const TDDIGate& obj);

typedef struct _TDDIFTAPropagation__isset {
  _TDDIFTAPropagation__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Source(false), Target(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Source :1;
  bool Target :1;
} _TDDIFTAPropagation__isset;

class TDDIFTAPropagation : public virtual ::apache::thrift::TBase {
 public:

  TDDIFTAPropagation(const TDDIFTAPropagation&);
  TDDIFTAPropagation& operator=(const TDDIFTAPropagation&);
  TDDIFTAPropagation() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Source(), Target() {

  }

  virtual ~TDDIFTAPropagation() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> Source;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> Target;

  _TDDIFTAPropagation__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Source(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> val);

  void __set_Target(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureAnalysisArtifact> val);

  bool operator == (const TDDIFTAPropagation & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    return true;
  }
  bool operator != (const TDDIFTAPropagation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFTAPropagation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFTAPropagation &a, TDDIFTAPropagation &b);

std::ostream& operator<<(std::ostream& out, const TDDIFTAPropagation& obj);

typedef struct _TDDIBasicEvent__isset {
  _TDDIBasicEvent__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureRate(false), FailureMode(false), ProbabilityDistribution(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureRate :1;
  bool FailureMode :1;
  bool ProbabilityDistribution :1;
} _TDDIBasicEvent__isset;

class TDDIBasicEvent : public virtual ::apache::thrift::TBase {
 public:

  TDDIBasicEvent(const TDDIBasicEvent&);
  TDDIBasicEvent& operator=(const TDDIBasicEvent&);
  TDDIBasicEvent() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), FailureRate(0), FailureMode(), ProbabilityDistribution() {

  }

  virtual ~TDDIBasicEvent() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  double FailureRate;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> FailureMode;
  ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> ProbabilityDistribution;

  _TDDIBasicEvent__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureRate(const double val);

  void __set_FailureMode(::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> val);

  void __set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val);

  bool operator == (const TDDIBasicEvent & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(FailureMode == rhs.FailureMode))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    return true;
  }
  bool operator != (const TDDIBasicEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIBasicEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIBasicEvent &a, TDDIBasicEvent &b);

std::ostream& operator<<(std::ostream& out, const TDDIBasicEvent& obj);

typedef struct _TDDIFTAArtifactUnion__isset {
  _TDDIFTAArtifactUnion__isset() : InputEvent(false), OutputEvent(false), Gate(false), FTAPropagation(false) {}
  bool InputEvent :1;
  bool OutputEvent :1;
  bool Gate :1;
  bool FTAPropagation :1;
} _TDDIFTAArtifactUnion__isset;

class TDDIFTAArtifactUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFTAArtifactUnion(const TDDIFTAArtifactUnion&);
  TDDIFTAArtifactUnion& operator=(const TDDIFTAArtifactUnion&);
  TDDIFTAArtifactUnion() {
  }

  virtual ~TDDIFTAArtifactUnion() throw();
  TDDIInputEvent InputEvent;
  TDDIOutputEvent OutputEvent;
  TDDIGate Gate;
  TDDIFTAPropagation FTAPropagation;

  _TDDIFTAArtifactUnion__isset __isset;

  void __set_InputEvent(const TDDIInputEvent& val);

  void __set_OutputEvent(const TDDIOutputEvent& val);

  void __set_Gate(const TDDIGate& val);

  void __set_FTAPropagation(const TDDIFTAPropagation& val);

  bool operator == (const TDDIFTAArtifactUnion & rhs) const
  {
    if (__isset.InputEvent != rhs.__isset.InputEvent)
      return false;
    else if (__isset.InputEvent && !(InputEvent == rhs.InputEvent))
      return false;
    if (__isset.OutputEvent != rhs.__isset.OutputEvent)
      return false;
    else if (__isset.OutputEvent && !(OutputEvent == rhs.OutputEvent))
      return false;
    if (__isset.Gate != rhs.__isset.Gate)
      return false;
    else if (__isset.Gate && !(Gate == rhs.Gate))
      return false;
    if (__isset.FTAPropagation != rhs.__isset.FTAPropagation)
      return false;
    else if (__isset.FTAPropagation && !(FTAPropagation == rhs.FTAPropagation))
      return false;
    return true;
  }
  bool operator != (const TDDIFTAArtifactUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFTAArtifactUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFTAArtifactUnion &a, TDDIFTAArtifactUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFTAArtifactUnion& obj);

typedef struct _TDDIAbstractFTAArtifact__isset {
  _TDDIAbstractFTAArtifact__isset() : UsedFTAArtifact(false), UsedFTAArtifactType(false) {}
  bool UsedFTAArtifact :1;
  bool UsedFTAArtifactType :1;
} _TDDIAbstractFTAArtifact__isset;

class TDDIAbstractFTAArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFTAArtifact(const TDDIAbstractFTAArtifact&);
  TDDIAbstractFTAArtifact& operator=(const TDDIAbstractFTAArtifact&);
  TDDIAbstractFTAArtifact() : UsedFTAArtifactType((TDDIFTAArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractFTAArtifact() throw();
  TDDIFTAArtifactUnion UsedFTAArtifact;
  TDDIFTAArtifactUnionType UsedFTAArtifactType;

  _TDDIAbstractFTAArtifact__isset __isset;

  void __set_UsedFTAArtifact(const TDDIFTAArtifactUnion& val);

  void __set_UsedFTAArtifactType(const TDDIFTAArtifactUnionType val);

  bool operator == (const TDDIAbstractFTAArtifact & rhs) const
  {
    if (!(UsedFTAArtifact == rhs.UsedFTAArtifact))
      return false;
    if (!(UsedFTAArtifactType == rhs.UsedFTAArtifactType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFTAArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFTAArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFTAArtifact &a, TDDIAbstractFTAArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFTAArtifact& obj);

typedef struct _TDDIFTAPackage__isset {
  _TDDIFTAPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), FTAArtifacts(true), BasicEvents(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool FTAArtifacts :1;
  bool BasicEvents :1;
} _TDDIFTAPackage__isset;

class TDDIFTAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIFTAPackage(const TDDIFTAPackage&);
  TDDIFTAPackage& operator=(const TDDIFTAPackage&);
  TDDIFTAPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {




  }

  virtual ~TDDIFTAPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFTAArtifact>  FTAArtifacts;
  std::vector<TDDIBasicEvent>  BasicEvents;

  _TDDIFTAPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_FTAArtifacts(const std::vector<TDDIAbstractFTAArtifact> & val);

  void __set_BasicEvents(const std::vector<TDDIBasicEvent> & val);

  bool operator == (const TDDIFTAPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(FTAArtifacts == rhs.FTAArtifacts))
      return false;
    if (!(BasicEvents == rhs.BasicEvents))
      return false;
    return true;
  }
  bool operator != (const TDDIFTAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFTAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFTAPackage &a, TDDIFTAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIFTAPackage& obj);

typedef struct _TDDIFTAPackageInterface__isset {
  _TDDIFTAPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), FTAArtifacts(true), BasicEvents(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool FTAArtifacts :1;
  bool BasicEvents :1;
  bool Implements :1;
} _TDDIFTAPackageInterface__isset;

class TDDIFTAPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIFTAPackageInterface(const TDDIFTAPackageInterface&);
  TDDIFTAPackageInterface& operator=(const TDDIFTAPackageInterface&);
  TDDIFTAPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Implements() {




  }

  virtual ~TDDIFTAPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFTAArtifact>  FTAArtifacts;
  std::vector<TDDIBasicEvent>  BasicEvents;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> Implements;

  _TDDIFTAPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_FTAArtifacts(const std::vector<TDDIAbstractFTAArtifact> & val);

  void __set_BasicEvents(const std::vector<TDDIBasicEvent> & val);

  void __set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFTAPackage> val);

  bool operator == (const TDDIFTAPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(FTAArtifacts == rhs.FTAArtifacts))
      return false;
    if (!(BasicEvents == rhs.BasicEvents))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIFTAPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFTAPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFTAPackageInterface &a, TDDIFTAPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIFTAPackageInterface& obj);

typedef struct _TDDIFTAPackageBinding__isset {
  _TDDIFTAPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), FTAArtifacts(true), BasicEvents(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool FTAArtifacts :1;
  bool BasicEvents :1;
  bool ParticipantPackages :1;
} _TDDIFTAPackageBinding__isset;

class TDDIFTAPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIFTAPackageBinding(const TDDIFTAPackageBinding&);
  TDDIFTAPackageBinding& operator=(const TDDIFTAPackageBinding&);
  TDDIFTAPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {





  }

  virtual ~TDDIFTAPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractFTAArtifact>  FTAArtifacts;
  std::vector<TDDIBasicEvent>  BasicEvents;
  std::vector<TDDIAbstractFTAPackageRef>  ParticipantPackages;

  _TDDIFTAPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_FTAArtifacts(const std::vector<TDDIAbstractFTAArtifact> & val);

  void __set_BasicEvents(const std::vector<TDDIBasicEvent> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractFTAPackageRef> & val);

  bool operator == (const TDDIFTAPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(FTAArtifacts == rhs.FTAArtifacts))
      return false;
    if (!(BasicEvents == rhs.BasicEvents))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIFTAPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFTAPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFTAPackageBinding &a, TDDIFTAPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIFTAPackageBinding& obj);

typedef struct _TDDIFTAPackageUnion__isset {
  _TDDIFTAPackageUnion__isset() : FTAPackage(false), FTAPackageInterface(false), FTAPackageBinding(false) {}
  bool FTAPackage :1;
  bool FTAPackageInterface :1;
  bool FTAPackageBinding :1;
} _TDDIFTAPackageUnion__isset;

class TDDIFTAPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFTAPackageUnion(const TDDIFTAPackageUnion&);
  TDDIFTAPackageUnion& operator=(const TDDIFTAPackageUnion&);
  TDDIFTAPackageUnion() {
  }

  virtual ~TDDIFTAPackageUnion() throw();
  TDDIFTAPackage FTAPackage;
  TDDIFTAPackageInterface FTAPackageInterface;
  TDDIFTAPackageBinding FTAPackageBinding;

  _TDDIFTAPackageUnion__isset __isset;

  void __set_FTAPackage(const TDDIFTAPackage& val);

  void __set_FTAPackageInterface(const TDDIFTAPackageInterface& val);

  void __set_FTAPackageBinding(const TDDIFTAPackageBinding& val);

  bool operator == (const TDDIFTAPackageUnion & rhs) const
  {
    if (__isset.FTAPackage != rhs.__isset.FTAPackage)
      return false;
    else if (__isset.FTAPackage && !(FTAPackage == rhs.FTAPackage))
      return false;
    if (__isset.FTAPackageInterface != rhs.__isset.FTAPackageInterface)
      return false;
    else if (__isset.FTAPackageInterface && !(FTAPackageInterface == rhs.FTAPackageInterface))
      return false;
    if (__isset.FTAPackageBinding != rhs.__isset.FTAPackageBinding)
      return false;
    else if (__isset.FTAPackageBinding && !(FTAPackageBinding == rhs.FTAPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIFTAPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFTAPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFTAPackageUnion &a, TDDIFTAPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFTAPackageUnion& obj);

typedef struct _TDDIAbstractFTAPackage__isset {
  _TDDIAbstractFTAPackage__isset() : UsedFTAPackage(false), UsedFTAPackageType(false) {}
  bool UsedFTAPackage :1;
  bool UsedFTAPackageType :1;
} _TDDIAbstractFTAPackage__isset;

class TDDIAbstractFTAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFTAPackage(const TDDIAbstractFTAPackage&);
  TDDIAbstractFTAPackage& operator=(const TDDIAbstractFTAPackage&);
  TDDIAbstractFTAPackage() : UsedFTAPackageType((TDDIFTAPackageUnionType)0) {
  }

  virtual ~TDDIAbstractFTAPackage() throw();
  TDDIFTAPackageUnion UsedFTAPackage;
  TDDIFTAPackageUnionType UsedFTAPackageType;

  _TDDIAbstractFTAPackage__isset __isset;

  void __set_UsedFTAPackage(const TDDIFTAPackageUnion& val);

  void __set_UsedFTAPackageType(const TDDIFTAPackageUnionType val);

  bool operator == (const TDDIAbstractFTAPackage & rhs) const
  {
    if (!(UsedFTAPackage == rhs.UsedFTAPackage))
      return false;
    if (!(UsedFTAPackageType == rhs.UsedFTAPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFTAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFTAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFTAPackage &a, TDDIAbstractFTAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFTAPackage& obj);

typedef struct _TDDIHazardType__isset {
  _TDDIHazardType__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
} _TDDIHazardType__isset;

class TDDIHazardType : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazardType(const TDDIHazardType&);
  TDDIHazardType& operator=(const TDDIHazardType&);
  TDDIHazardType() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {

  }

  virtual ~TDDIHazardType() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;

  _TDDIHazardType__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  bool operator == (const TDDIHazardType & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    return true;
  }
  bool operator != (const TDDIHazardType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazardType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazardType &a, TDDIHazardType &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazardType& obj);

typedef struct _TDDIHazardTypeSystem__isset {
  _TDDIHazardTypeSystem__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), HazardTypes(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool HazardTypes :1;
} _TDDIHazardTypeSystem__isset;

class TDDIHazardTypeSystem : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazardTypeSystem(const TDDIHazardTypeSystem&);
  TDDIHazardTypeSystem& operator=(const TDDIHazardTypeSystem&);
  TDDIHazardTypeSystem() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIHazardTypeSystem() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIHazardType>  HazardTypes;

  _TDDIHazardTypeSystem__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_HazardTypes(const std::vector<TDDIHazardType> & val);

  bool operator == (const TDDIHazardTypeSystem & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(HazardTypes == rhs.HazardTypes))
      return false;
    return true;
  }
  bool operator != (const TDDIHazardTypeSystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazardTypeSystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazardTypeSystem &a, TDDIHazardTypeSystem &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazardTypeSystem& obj);

typedef struct _TDDIRiskParameter__isset {
  _TDDIRiskParameter__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Argument(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Argument :1;
} _TDDIRiskParameter__isset;

class TDDIRiskParameter : public virtual ::apache::thrift::TBase {
 public:

  TDDIRiskParameter(const TDDIRiskParameter&);
  TDDIRiskParameter& operator=(const TDDIRiskParameter&);
  TDDIRiskParameter() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Argument("") {

  }

  virtual ~TDDIRiskParameter() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string Argument;

  _TDDIRiskParameter__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Argument(const std::string& val);

  bool operator == (const TDDIRiskParameter & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Argument == rhs.Argument))
      return false;
    return true;
  }
  bool operator != (const TDDIRiskParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRiskParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRiskParameter &a, TDDIRiskParameter &b);

std::ostream& operator<<(std::ostream& out, const TDDIRiskParameter& obj);

typedef struct _TDDISituation__isset {
  _TDDISituation__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Argument(true), Likelihood(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Argument :1;
  bool Likelihood :1;
} _TDDISituation__isset;

class TDDISituation : public virtual ::apache::thrift::TBase {
 public:

  TDDISituation(const TDDISituation&);
  TDDISituation& operator=(const TDDISituation&);
  TDDISituation() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Argument(""), Likelihood("") {

  }

  virtual ~TDDISituation() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string Argument;
  std::string Likelihood;

  _TDDISituation__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Argument(const std::string& val);

  void __set_Likelihood(const std::string& val);

  bool operator == (const TDDISituation & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Argument == rhs.Argument))
      return false;
    if (!(Likelihood == rhs.Likelihood))
      return false;
    return true;
  }
  bool operator != (const TDDISituation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISituation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISituation &a, TDDISituation &b);

std::ostream& operator<<(std::ostream& out, const TDDISituation& obj);

typedef struct _TDDIAccident__isset {
  _TDDIAccident__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Argument(true), Severity(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Argument :1;
  bool Severity :1;
} _TDDIAccident__isset;

class TDDIAccident : public virtual ::apache::thrift::TBase {
 public:

  TDDIAccident(const TDDIAccident&);
  TDDIAccident& operator=(const TDDIAccident&);
  TDDIAccident() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Argument(""), Severity("") {

  }

  virtual ~TDDIAccident() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string Argument;
  std::string Severity;

  _TDDIAccident__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Argument(const std::string& val);

  void __set_Severity(const std::string& val);

  bool operator == (const TDDIAccident & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Argument == rhs.Argument))
      return false;
    if (!(Severity == rhs.Severity))
      return false;
    return true;
  }
  bool operator != (const TDDIAccident &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAccident & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAccident &a, TDDIAccident &b);

std::ostream& operator<<(std::ostream& out, const TDDIAccident& obj);

typedef struct _TDDIOperationMeasure__isset {
  _TDDIOperationMeasure__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Argument(true), Controlability(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Argument :1;
  bool Controlability :1;
} _TDDIOperationMeasure__isset;

class TDDIOperationMeasure : public virtual ::apache::thrift::TBase {
 public:

  TDDIOperationMeasure(const TDDIOperationMeasure&);
  TDDIOperationMeasure& operator=(const TDDIOperationMeasure&);
  TDDIOperationMeasure() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Argument(""), Controlability("") {

  }

  virtual ~TDDIOperationMeasure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string Argument;
  std::string Controlability;

  _TDDIOperationMeasure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Argument(const std::string& val);

  void __set_Controlability(const std::string& val);

  bool operator == (const TDDIOperationMeasure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Argument == rhs.Argument))
      return false;
    if (!(Controlability == rhs.Controlability))
      return false;
    return true;
  }
  bool operator != (const TDDIOperationMeasure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIOperationMeasure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIOperationMeasure &a, TDDIOperationMeasure &b);

std::ostream& operator<<(std::ostream& out, const TDDIOperationMeasure& obj);

typedef struct _TDDIHazard__isset {
  _TDDIHazard__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Condition(true), HazardType(false), Measures(true), OutputFailure(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Condition :1;
  bool HazardType :1;
  bool Measures :1;
  bool OutputFailure :1;
} _TDDIHazard__isset;

class TDDIHazard : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazard(const TDDIHazard&);
  TDDIHazard& operator=(const TDDIHazard&);
  TDDIHazard() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Condition(""), OutputFailure() {


  }

  virtual ~TDDIHazard() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string Condition;
  TDDIHazardType HazardType;
  std::vector<TDDIAbstractMeasureRef>  Measures;
  ::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> OutputFailure;

  _TDDIHazard__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Condition(const std::string& val);

  void __set_HazardType(const TDDIHazardType& val);

  void __set_Measures(const std::vector<TDDIAbstractMeasureRef> & val);

  void __set_OutputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> val);

  bool operator == (const TDDIHazard & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Condition == rhs.Condition))
      return false;
    if (!(HazardType == rhs.HazardType))
      return false;
    if (!(Measures == rhs.Measures))
      return false;
    if (!(OutputFailure == rhs.OutputFailure))
      return false;
    return true;
  }
  bool operator != (const TDDIHazard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazard &a, TDDIHazard &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazard& obj);

typedef struct _TDDIRiskAssessment__isset {
  _TDDIRiskAssessment__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), RelatedStandard(true), RiskParamaters(true), Hazard(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool RelatedStandard :1;
  bool RiskParamaters :1;
  bool Hazard :1;
} _TDDIRiskAssessment__isset;

class TDDIRiskAssessment : public virtual ::apache::thrift::TBase {
 public:

  TDDIRiskAssessment(const TDDIRiskAssessment&);
  TDDIRiskAssessment& operator=(const TDDIRiskAssessment&);
  TDDIRiskAssessment() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), RelatedStandard("") {


  }

  virtual ~TDDIRiskAssessment() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string RelatedStandard;
  std::vector<TDDIAbstractRiskParameterRef>  RiskParamaters;
  TDDIHazard Hazard;

  _TDDIRiskAssessment__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_RelatedStandard(const std::string& val);

  void __set_RiskParamaters(const std::vector<TDDIAbstractRiskParameterRef> & val);

  void __set_Hazard(const TDDIHazard& val);

  bool operator == (const TDDIRiskAssessment & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(RelatedStandard == rhs.RelatedStandard))
      return false;
    if (!(RiskParamaters == rhs.RiskParamaters))
      return false;
    if (!(Hazard == rhs.Hazard))
      return false;
    return true;
  }
  bool operator != (const TDDIRiskAssessment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRiskAssessment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRiskAssessment &a, TDDIRiskAssessment &b);

std::ostream& operator<<(std::ostream& out, const TDDIRiskAssessment& obj);

typedef struct _TDDIMalFunction__isset {
  _TDDIMalFunction__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Hazards(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Hazards :1;
} _TDDIMalFunction__isset;

class TDDIMalFunction : public virtual ::apache::thrift::TBase {
 public:

  TDDIMalFunction(const TDDIMalFunction&);
  TDDIMalFunction& operator=(const TDDIMalFunction&);
  TDDIMalFunction() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIMalFunction() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIHazard>  Hazards;

  _TDDIMalFunction__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Hazards(const std::vector<TDDIHazard> & val);

  bool operator == (const TDDIMalFunction & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Hazards == rhs.Hazards))
      return false;
    return true;
  }
  bool operator != (const TDDIMalFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMalFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMalFunction &a, TDDIMalFunction &b);

std::ostream& operator<<(std::ostream& out, const TDDIMalFunction& obj);

typedef struct _TDDIRiskParameterUnion__isset {
  _TDDIRiskParameterUnion__isset() : RiskParameter(false), Situation(false), Accident(false), OperationMeasure(false) {}
  bool RiskParameter :1;
  bool Situation :1;
  bool Accident :1;
  bool OperationMeasure :1;
} _TDDIRiskParameterUnion__isset;

class TDDIRiskParameterUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIRiskParameterUnion(const TDDIRiskParameterUnion&);
  TDDIRiskParameterUnion& operator=(const TDDIRiskParameterUnion&);
  TDDIRiskParameterUnion() {
  }

  virtual ~TDDIRiskParameterUnion() throw();
  TDDIRiskParameter RiskParameter;
  TDDISituation Situation;
  TDDIAccident Accident;
  TDDIOperationMeasure OperationMeasure;

  _TDDIRiskParameterUnion__isset __isset;

  void __set_RiskParameter(const TDDIRiskParameter& val);

  void __set_Situation(const TDDISituation& val);

  void __set_Accident(const TDDIAccident& val);

  void __set_OperationMeasure(const TDDIOperationMeasure& val);

  bool operator == (const TDDIRiskParameterUnion & rhs) const
  {
    if (__isset.RiskParameter != rhs.__isset.RiskParameter)
      return false;
    else if (__isset.RiskParameter && !(RiskParameter == rhs.RiskParameter))
      return false;
    if (__isset.Situation != rhs.__isset.Situation)
      return false;
    else if (__isset.Situation && !(Situation == rhs.Situation))
      return false;
    if (__isset.Accident != rhs.__isset.Accident)
      return false;
    else if (__isset.Accident && !(Accident == rhs.Accident))
      return false;
    if (__isset.OperationMeasure != rhs.__isset.OperationMeasure)
      return false;
    else if (__isset.OperationMeasure && !(OperationMeasure == rhs.OperationMeasure))
      return false;
    return true;
  }
  bool operator != (const TDDIRiskParameterUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRiskParameterUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRiskParameterUnion &a, TDDIRiskParameterUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIRiskParameterUnion& obj);

typedef struct _TDDIAbstractRiskParameter__isset {
  _TDDIAbstractRiskParameter__isset() : UsedRiskParameter(false), UsedRiskParameterType(false) {}
  bool UsedRiskParameter :1;
  bool UsedRiskParameterType :1;
} _TDDIAbstractRiskParameter__isset;

class TDDIAbstractRiskParameter : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRiskParameter(const TDDIAbstractRiskParameter&);
  TDDIAbstractRiskParameter& operator=(const TDDIAbstractRiskParameter&);
  TDDIAbstractRiskParameter() : UsedRiskParameterType((TDDIRiskParameterUnionType)0) {
  }

  virtual ~TDDIAbstractRiskParameter() throw();
  TDDIRiskParameterUnion UsedRiskParameter;
  TDDIRiskParameterUnionType UsedRiskParameterType;

  _TDDIAbstractRiskParameter__isset __isset;

  void __set_UsedRiskParameter(const TDDIRiskParameterUnion& val);

  void __set_UsedRiskParameterType(const TDDIRiskParameterUnionType val);

  bool operator == (const TDDIAbstractRiskParameter & rhs) const
  {
    if (!(UsedRiskParameter == rhs.UsedRiskParameter))
      return false;
    if (!(UsedRiskParameterType == rhs.UsedRiskParameterType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRiskParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRiskParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRiskParameter &a, TDDIAbstractRiskParameter &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRiskParameter& obj);

typedef struct _TDDIHARAArtifactUnion__isset {
  _TDDIHARAArtifactUnion__isset() : HARAPackage(false), HazardTypeSystem(false), RiskParameter(false), RiskAssessment(false), HazardType(false), MalFunction(false), Hazard(false) {}
  bool HARAPackage :1;
  bool HazardTypeSystem :1;
  bool RiskParameter :1;
  bool RiskAssessment :1;
  bool HazardType :1;
  bool MalFunction :1;
  bool Hazard :1;
} _TDDIHARAArtifactUnion__isset;

class TDDIHARAArtifactUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIHARAArtifactUnion(const TDDIHARAArtifactUnion&);
  TDDIHARAArtifactUnion& operator=(const TDDIHARAArtifactUnion&);
  TDDIHARAArtifactUnion() : HARAPackage() {
  }

  virtual ~TDDIHARAArtifactUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> HARAPackage;
  TDDIHazardTypeSystem HazardTypeSystem;
  TDDIAbstractRiskParameter RiskParameter;
  TDDIRiskAssessment RiskAssessment;
  TDDIHazardType HazardType;
  TDDIMalFunction MalFunction;
  TDDIHazard Hazard;

  _TDDIHARAArtifactUnion__isset __isset;

  void __set_HARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> val);

  void __set_HazardTypeSystem(const TDDIHazardTypeSystem& val);

  void __set_RiskParameter(const TDDIAbstractRiskParameter& val);

  void __set_RiskAssessment(const TDDIRiskAssessment& val);

  void __set_HazardType(const TDDIHazardType& val);

  void __set_MalFunction(const TDDIMalFunction& val);

  void __set_Hazard(const TDDIHazard& val);

  bool operator == (const TDDIHARAArtifactUnion & rhs) const
  {
    if (__isset.HARAPackage != rhs.__isset.HARAPackage)
      return false;
    else if (__isset.HARAPackage && !(HARAPackage == rhs.HARAPackage))
      return false;
    if (__isset.HazardTypeSystem != rhs.__isset.HazardTypeSystem)
      return false;
    else if (__isset.HazardTypeSystem && !(HazardTypeSystem == rhs.HazardTypeSystem))
      return false;
    if (__isset.RiskParameter != rhs.__isset.RiskParameter)
      return false;
    else if (__isset.RiskParameter && !(RiskParameter == rhs.RiskParameter))
      return false;
    if (__isset.RiskAssessment != rhs.__isset.RiskAssessment)
      return false;
    else if (__isset.RiskAssessment && !(RiskAssessment == rhs.RiskAssessment))
      return false;
    if (__isset.HazardType != rhs.__isset.HazardType)
      return false;
    else if (__isset.HazardType && !(HazardType == rhs.HazardType))
      return false;
    if (__isset.MalFunction != rhs.__isset.MalFunction)
      return false;
    else if (__isset.MalFunction && !(MalFunction == rhs.MalFunction))
      return false;
    if (__isset.Hazard != rhs.__isset.Hazard)
      return false;
    else if (__isset.Hazard && !(Hazard == rhs.Hazard))
      return false;
    return true;
  }
  bool operator != (const TDDIHARAArtifactUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHARAArtifactUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHARAArtifactUnion &a, TDDIHARAArtifactUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIHARAArtifactUnion& obj);

typedef struct _TDDIAbstractHARAArtifact__isset {
  _TDDIAbstractHARAArtifact__isset() : UsedHARAArtifact(false), UsedHARAArtifactType(false) {}
  bool UsedHARAArtifact :1;
  bool UsedHARAArtifactType :1;
} _TDDIAbstractHARAArtifact__isset;

class TDDIAbstractHARAArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractHARAArtifact(const TDDIAbstractHARAArtifact&);
  TDDIAbstractHARAArtifact& operator=(const TDDIAbstractHARAArtifact&);
  TDDIAbstractHARAArtifact() : UsedHARAArtifactType((TDDIHARAArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractHARAArtifact() throw();
  TDDIHARAArtifactUnion UsedHARAArtifact;
  TDDIHARAArtifactUnionType UsedHARAArtifactType;

  _TDDIAbstractHARAArtifact__isset __isset;

  void __set_UsedHARAArtifact(const TDDIHARAArtifactUnion& val);

  void __set_UsedHARAArtifactType(const TDDIHARAArtifactUnionType val);

  bool operator == (const TDDIAbstractHARAArtifact & rhs) const
  {
    if (!(UsedHARAArtifact == rhs.UsedHARAArtifact))
      return false;
    if (!(UsedHARAArtifactType == rhs.UsedHARAArtifactType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractHARAArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractHARAArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractHARAArtifact &a, TDDIAbstractHARAArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractHARAArtifact& obj);

typedef struct _TDDIHARAPackage__isset {
  _TDDIHARAPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), HARAArtifacts(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool HARAArtifacts :1;
} _TDDIHARAPackage__isset;

class TDDIHARAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIHARAPackage(const TDDIHARAPackage&);
  TDDIHARAPackage& operator=(const TDDIHARAPackage&);
  TDDIHARAPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIHARAPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractHARAArtifact>  HARAArtifacts;

  _TDDIHARAPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_HARAArtifacts(const std::vector<TDDIAbstractHARAArtifact> & val);

  bool operator == (const TDDIHARAPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(HARAArtifacts == rhs.HARAArtifacts))
      return false;
    return true;
  }
  bool operator != (const TDDIHARAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHARAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHARAPackage &a, TDDIHARAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIHARAPackage& obj);

typedef struct _TDDIHARAPackageInterface__isset {
  _TDDIHARAPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), HARAArtifacts(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool HARAArtifacts :1;
  bool Implements :1;
} _TDDIHARAPackageInterface__isset;

class TDDIHARAPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIHARAPackageInterface(const TDDIHARAPackageInterface&);
  TDDIHARAPackageInterface& operator=(const TDDIHARAPackageInterface&);
  TDDIHARAPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Implements() {


  }

  virtual ~TDDIHARAPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractHARAArtifact>  HARAArtifacts;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> Implements;

  _TDDIHARAPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_HARAArtifacts(const std::vector<TDDIAbstractHARAArtifact> & val);

  void __set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractHARAPackage> val);

  bool operator == (const TDDIHARAPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(HARAArtifacts == rhs.HARAArtifacts))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIHARAPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHARAPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHARAPackageInterface &a, TDDIHARAPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIHARAPackageInterface& obj);

typedef struct _TDDIHARAPackageBinding__isset {
  _TDDIHARAPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), HARAArtifacts(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool HARAArtifacts :1;
  bool ParticipantPackages :1;
} _TDDIHARAPackageBinding__isset;

class TDDIHARAPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIHARAPackageBinding(const TDDIHARAPackageBinding&);
  TDDIHARAPackageBinding& operator=(const TDDIHARAPackageBinding&);
  TDDIHARAPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {



  }

  virtual ~TDDIHARAPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractHARAArtifact>  HARAArtifacts;
  std::vector<TDDIAbstractHARAPackageRef>  ParticipantPackages;

  _TDDIHARAPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_HARAArtifacts(const std::vector<TDDIAbstractHARAArtifact> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractHARAPackageRef> & val);

  bool operator == (const TDDIHARAPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(HARAArtifacts == rhs.HARAArtifacts))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIHARAPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHARAPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHARAPackageBinding &a, TDDIHARAPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIHARAPackageBinding& obj);

typedef struct _TDDIHARAPackageUnion__isset {
  _TDDIHARAPackageUnion__isset() : HARAPackage(false), HARAPackageInterface(false), HARAPackageBinding(false) {}
  bool HARAPackage :1;
  bool HARAPackageInterface :1;
  bool HARAPackageBinding :1;
} _TDDIHARAPackageUnion__isset;

class TDDIHARAPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIHARAPackageUnion(const TDDIHARAPackageUnion&);
  TDDIHARAPackageUnion& operator=(const TDDIHARAPackageUnion&);
  TDDIHARAPackageUnion() {
  }

  virtual ~TDDIHARAPackageUnion() throw();
  TDDIHARAPackage HARAPackage;
  TDDIHARAPackageInterface HARAPackageInterface;
  TDDIHARAPackageBinding HARAPackageBinding;

  _TDDIHARAPackageUnion__isset __isset;

  void __set_HARAPackage(const TDDIHARAPackage& val);

  void __set_HARAPackageInterface(const TDDIHARAPackageInterface& val);

  void __set_HARAPackageBinding(const TDDIHARAPackageBinding& val);

  bool operator == (const TDDIHARAPackageUnion & rhs) const
  {
    if (__isset.HARAPackage != rhs.__isset.HARAPackage)
      return false;
    else if (__isset.HARAPackage && !(HARAPackage == rhs.HARAPackage))
      return false;
    if (__isset.HARAPackageInterface != rhs.__isset.HARAPackageInterface)
      return false;
    else if (__isset.HARAPackageInterface && !(HARAPackageInterface == rhs.HARAPackageInterface))
      return false;
    if (__isset.HARAPackageBinding != rhs.__isset.HARAPackageBinding)
      return false;
    else if (__isset.HARAPackageBinding && !(HARAPackageBinding == rhs.HARAPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIHARAPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHARAPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHARAPackageUnion &a, TDDIHARAPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIHARAPackageUnion& obj);

typedef struct _TDDIAbstractHARAPackage__isset {
  _TDDIAbstractHARAPackage__isset() : UsedHARAPackage(false), UsedHARAPackageType(false) {}
  bool UsedHARAPackage :1;
  bool UsedHARAPackageType :1;
} _TDDIAbstractHARAPackage__isset;

class TDDIAbstractHARAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractHARAPackage(const TDDIAbstractHARAPackage&);
  TDDIAbstractHARAPackage& operator=(const TDDIAbstractHARAPackage&);
  TDDIAbstractHARAPackage() : UsedHARAPackageType((TDDIHARAPackageUnionType)0) {
  }

  virtual ~TDDIAbstractHARAPackage() throw();
  TDDIHARAPackageUnion UsedHARAPackage;
  TDDIHARAPackageUnionType UsedHARAPackageType;

  _TDDIAbstractHARAPackage__isset __isset;

  void __set_UsedHARAPackage(const TDDIHARAPackageUnion& val);

  void __set_UsedHARAPackageType(const TDDIHARAPackageUnionType val);

  bool operator == (const TDDIAbstractHARAPackage & rhs) const
  {
    if (!(UsedHARAPackage == rhs.UsedHARAPackage))
      return false;
    if (!(UsedHARAPackageType == rhs.UsedHARAPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractHARAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractHARAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractHARAPackage &a, TDDIAbstractHARAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractHARAPackage& obj);

typedef struct _TDDIODEPackageUnion__isset {
  _TDDIODEPackageUnion__isset() : ODEPackage(false), ODEPackageInterface(false), ODEPackageBinding(false) {}
  bool ODEPackage :1;
  bool ODEPackageInterface :1;
  bool ODEPackageBinding :1;
} _TDDIODEPackageUnion__isset;

class TDDIODEPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIODEPackageUnion(const TDDIODEPackageUnion&);
  TDDIODEPackageUnion& operator=(const TDDIODEPackageUnion&);
  TDDIODEPackageUnion() : ODEPackage(), ODEPackageInterface(), ODEPackageBinding() {
  }

  virtual ~TDDIODEPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIODEPackage> ODEPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIODEPackageInterface> ODEPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIODEPackageBinding> ODEPackageBinding;

  _TDDIODEPackageUnion__isset __isset;

  void __set_ODEPackage(::apache::thrift::stdcxx::shared_ptr<TDDIODEPackage> val);

  void __set_ODEPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIODEPackageInterface> val);

  void __set_ODEPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIODEPackageBinding> val);

  bool operator == (const TDDIODEPackageUnion & rhs) const
  {
    if (__isset.ODEPackage != rhs.__isset.ODEPackage)
      return false;
    else if (__isset.ODEPackage && !(ODEPackage == rhs.ODEPackage))
      return false;
    if (__isset.ODEPackageInterface != rhs.__isset.ODEPackageInterface)
      return false;
    else if (__isset.ODEPackageInterface && !(ODEPackageInterface == rhs.ODEPackageInterface))
      return false;
    if (__isset.ODEPackageBinding != rhs.__isset.ODEPackageBinding)
      return false;
    else if (__isset.ODEPackageBinding && !(ODEPackageBinding == rhs.ODEPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIODEPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIODEPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIODEPackageUnion &a, TDDIODEPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIODEPackageUnion& obj);

typedef struct _TDDIAbstractODEPackage__isset {
  _TDDIAbstractODEPackage__isset() : UsedODEPackage(false), UsedODEPackageType(false) {}
  bool UsedODEPackage :1;
  bool UsedODEPackageType :1;
} _TDDIAbstractODEPackage__isset;

class TDDIAbstractODEPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractODEPackage(const TDDIAbstractODEPackage&);
  TDDIAbstractODEPackage& operator=(const TDDIAbstractODEPackage&);
  TDDIAbstractODEPackage() : UsedODEPackageType((TDDIODEPackageUnionType)0) {
  }

  virtual ~TDDIAbstractODEPackage() throw();
  TDDIODEPackageUnion UsedODEPackage;
  TDDIODEPackageUnionType UsedODEPackageType;

  _TDDIAbstractODEPackage__isset __isset;

  void __set_UsedODEPackage(const TDDIODEPackageUnion& val);

  void __set_UsedODEPackageType(const TDDIODEPackageUnionType val);

  bool operator == (const TDDIAbstractODEPackage & rhs) const
  {
    if (!(UsedODEPackage == rhs.UsedODEPackage))
      return false;
    if (!(UsedODEPackageType == rhs.UsedODEPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractODEPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractODEPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractODEPackage &a, TDDIAbstractODEPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractODEPackage& obj);

typedef struct _TDDIODEPackage__isset {
  _TDDIODEPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), ODEPackages(true), ArchitecturePackages(true), DependabilityPackages(true), FailureLogicPackages(true), AssuranceCasePackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool ODEPackages :1;
  bool ArchitecturePackages :1;
  bool DependabilityPackages :1;
  bool FailureLogicPackages :1;
  bool AssuranceCasePackages :1;
} _TDDIODEPackage__isset;

class TDDIODEPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIODEPackage(const TDDIODEPackage&);
  TDDIODEPackage& operator=(const TDDIODEPackage&);
  TDDIODEPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {






  }

  virtual ~TDDIODEPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractODEPackageRef>  ODEPackages;
  std::vector<TDDIAbstractArchitecturePackageRef>  ArchitecturePackages;
  std::vector<TDDIAbstractDependabilityPackageRef>  DependabilityPackages;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureLogicPackages;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackages;

  _TDDIODEPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_ODEPackages(const std::vector<TDDIAbstractODEPackageRef> & val);

  void __set_ArchitecturePackages(const std::vector<TDDIAbstractArchitecturePackageRef> & val);

  void __set_DependabilityPackages(const std::vector<TDDIAbstractDependabilityPackageRef> & val);

  void __set_FailureLogicPackages(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_AssuranceCasePackages(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  bool operator == (const TDDIODEPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(ODEPackages == rhs.ODEPackages))
      return false;
    if (!(ArchitecturePackages == rhs.ArchitecturePackages))
      return false;
    if (!(DependabilityPackages == rhs.DependabilityPackages))
      return false;
    if (!(FailureLogicPackages == rhs.FailureLogicPackages))
      return false;
    if (!(AssuranceCasePackages == rhs.AssuranceCasePackages))
      return false;
    return true;
  }
  bool operator != (const TDDIODEPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIODEPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIODEPackage &a, TDDIODEPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIODEPackage& obj);

typedef struct _TDDIODEPackageInterface__isset {
  _TDDIODEPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), ODEPackages(true), ArchitecturePackages(true), DependabilityPackages(true), FailureLogicPackages(true), AssuranceCasePackages(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool ODEPackages :1;
  bool ArchitecturePackages :1;
  bool DependabilityPackages :1;
  bool FailureLogicPackages :1;
  bool AssuranceCasePackages :1;
  bool Implements :1;
} _TDDIODEPackageInterface__isset;

class TDDIODEPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIODEPackageInterface(const TDDIODEPackageInterface&);
  TDDIODEPackageInterface& operator=(const TDDIODEPackageInterface&);
  TDDIODEPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {






  }

  virtual ~TDDIODEPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractODEPackageRef>  ODEPackages;
  std::vector<TDDIAbstractArchitecturePackageRef>  ArchitecturePackages;
  std::vector<TDDIAbstractDependabilityPackageRef>  DependabilityPackages;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureLogicPackages;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackages;
  TDDIAbstractODEPackage Implements;

  _TDDIODEPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_ODEPackages(const std::vector<TDDIAbstractODEPackageRef> & val);

  void __set_ArchitecturePackages(const std::vector<TDDIAbstractArchitecturePackageRef> & val);

  void __set_DependabilityPackages(const std::vector<TDDIAbstractDependabilityPackageRef> & val);

  void __set_FailureLogicPackages(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_AssuranceCasePackages(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  void __set_Implements(const TDDIAbstractODEPackage& val);

  bool operator == (const TDDIODEPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(ODEPackages == rhs.ODEPackages))
      return false;
    if (!(ArchitecturePackages == rhs.ArchitecturePackages))
      return false;
    if (!(DependabilityPackages == rhs.DependabilityPackages))
      return false;
    if (!(FailureLogicPackages == rhs.FailureLogicPackages))
      return false;
    if (!(AssuranceCasePackages == rhs.AssuranceCasePackages))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIODEPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIODEPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIODEPackageInterface &a, TDDIODEPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIODEPackageInterface& obj);

typedef struct _TDDIODEPackageBinding__isset {
  _TDDIODEPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), ODEPackages(true), ArchitecturePackages(true), DependabilityPackages(true), FailureLogicPackages(true), AssuranceCasePackages(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool ODEPackages :1;
  bool ArchitecturePackages :1;
  bool DependabilityPackages :1;
  bool FailureLogicPackages :1;
  bool AssuranceCasePackages :1;
  bool ParticipantPackages :1;
} _TDDIODEPackageBinding__isset;

class TDDIODEPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIODEPackageBinding(const TDDIODEPackageBinding&);
  TDDIODEPackageBinding& operator=(const TDDIODEPackageBinding&);
  TDDIODEPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {







  }

  virtual ~TDDIODEPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractODEPackageRef>  ODEPackages;
  std::vector<TDDIAbstractArchitecturePackageRef>  ArchitecturePackages;
  std::vector<TDDIAbstractDependabilityPackageRef>  DependabilityPackages;
  std::vector<TDDIAbstractFailureLogicPackageRef>  FailureLogicPackages;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackages;
  std::vector<TDDIAbstractODEPackageRef>  ParticipantPackages;

  _TDDIODEPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_ODEPackages(const std::vector<TDDIAbstractODEPackageRef> & val);

  void __set_ArchitecturePackages(const std::vector<TDDIAbstractArchitecturePackageRef> & val);

  void __set_DependabilityPackages(const std::vector<TDDIAbstractDependabilityPackageRef> & val);

  void __set_FailureLogicPackages(const std::vector<TDDIAbstractFailureLogicPackageRef> & val);

  void __set_AssuranceCasePackages(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractODEPackageRef> & val);

  bool operator == (const TDDIODEPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(ODEPackages == rhs.ODEPackages))
      return false;
    if (!(ArchitecturePackages == rhs.ArchitecturePackages))
      return false;
    if (!(DependabilityPackages == rhs.DependabilityPackages))
      return false;
    if (!(FailureLogicPackages == rhs.FailureLogicPackages))
      return false;
    if (!(AssuranceCasePackages == rhs.AssuranceCasePackages))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIODEPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIODEPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIODEPackageBinding &a, TDDIODEPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIODEPackageBinding& obj);

typedef struct _TDDIState__isset {
  _TDDIState__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), IsInitialState(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool IsInitialState :1;
} _TDDIState__isset;

class TDDIState : public virtual ::apache::thrift::TBase {
 public:

  TDDIState(const TDDIState&);
  TDDIState& operator=(const TDDIState&);
  TDDIState() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), IsInitialState(0) {

  }

  virtual ~TDDIState() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  bool IsInitialState;

  _TDDIState__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_IsInitialState(const bool val);

  bool operator == (const TDDIState & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(IsInitialState == rhs.IsInitialState))
      return false;
    return true;
  }
  bool operator != (const TDDIState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIState &a, TDDIState &b);

std::ostream& operator<<(std::ostream& out, const TDDIState& obj);

typedef struct _TDDIFailState__isset {
  _TDDIFailState__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureRate(false), FailureMode(false), ProbabilityDistribution(false), OutputFailure(false), AssociatedStates(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureRate :1;
  bool FailureMode :1;
  bool ProbabilityDistribution :1;
  bool OutputFailure :1;
  bool AssociatedStates :1;
} _TDDIFailState__isset;

class TDDIFailState : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailState(const TDDIFailState&);
  TDDIFailState& operator=(const TDDIFailState&);
  TDDIFailState() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), FailureRate(0), FailureMode(), ProbabilityDistribution(), OutputFailure() {


  }

  virtual ~TDDIFailState() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  double FailureRate;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> FailureMode;
  ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> ProbabilityDistribution;
  ::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> OutputFailure;
  std::vector<TDDIState>  AssociatedStates;

  _TDDIFailState__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureRate(const double val);

  void __set_FailureMode(::apache::thrift::stdcxx::shared_ptr<TDDIFailureMode> val);

  void __set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val);

  void __set_OutputFailure(::apache::thrift::stdcxx::shared_ptr<TDDIOutputFailure> val);

  void __set_AssociatedStates(const std::vector<TDDIState> & val);

  bool operator == (const TDDIFailState & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(FailureMode == rhs.FailureMode))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    if (!(OutputFailure == rhs.OutputFailure))
      return false;
    if (!(AssociatedStates == rhs.AssociatedStates))
      return false;
    return true;
  }
  bool operator != (const TDDIFailState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailState &a, TDDIFailState &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailState& obj);

typedef struct _TDDITransition__isset {
  _TDDITransition__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), Probability(false), ProbabilityDistribution(false), FromFailState(false), ToFailState(false), FromState(false), ToState(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool Probability :1;
  bool ProbabilityDistribution :1;
  bool FromFailState :1;
  bool ToFailState :1;
  bool FromState :1;
  bool ToState :1;
} _TDDITransition__isset;

class TDDITransition : public virtual ::apache::thrift::TBase {
 public:

  TDDITransition(const TDDITransition&);
  TDDITransition& operator=(const TDDITransition&);
  TDDITransition() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Probability(0), ProbabilityDistribution(), FromFailState(), ToFailState(), FromState(), ToState() {

  }

  virtual ~TDDITransition() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  double Probability;
  ::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> ProbabilityDistribution;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailState> FromFailState;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailState> ToFailState;
  ::apache::thrift::stdcxx::shared_ptr<TDDIState> FromState;
  ::apache::thrift::stdcxx::shared_ptr<TDDIState> ToState;

  _TDDITransition__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_Probability(const double val);

  void __set_ProbabilityDistribution(::apache::thrift::stdcxx::shared_ptr<TDDIProbabilityDistribution> val);

  void __set_FromFailState(::apache::thrift::stdcxx::shared_ptr<TDDIFailState> val);

  void __set_ToFailState(::apache::thrift::stdcxx::shared_ptr<TDDIFailState> val);

  void __set_FromState(::apache::thrift::stdcxx::shared_ptr<TDDIState> val);

  void __set_ToState(::apache::thrift::stdcxx::shared_ptr<TDDIState> val);

  bool operator == (const TDDITransition & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(Probability == rhs.Probability))
      return false;
    if (!(ProbabilityDistribution == rhs.ProbabilityDistribution))
      return false;
    if (!(FromFailState == rhs.FromFailState))
      return false;
    if (!(ToFailState == rhs.ToFailState))
      return false;
    if (!(FromState == rhs.FromState))
      return false;
    if (!(ToState == rhs.ToState))
      return false;
    return true;
  }
  bool operator != (const TDDITransition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITransition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITransition &a, TDDITransition &b);

std::ostream& operator<<(std::ostream& out, const TDDITransition& obj);

typedef struct _TDDIMarkovArtifactUnion__isset {
  _TDDIMarkovArtifactUnion__isset() : Transition(false), State(false) {}
  bool Transition :1;
  bool State :1;
} _TDDIMarkovArtifactUnion__isset;

class TDDIMarkovArtifactUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIMarkovArtifactUnion(const TDDIMarkovArtifactUnion&);
  TDDIMarkovArtifactUnion& operator=(const TDDIMarkovArtifactUnion&);
  TDDIMarkovArtifactUnion() {
  }

  virtual ~TDDIMarkovArtifactUnion() throw();
  TDDITransition Transition;
  TDDIState State;

  _TDDIMarkovArtifactUnion__isset __isset;

  void __set_Transition(const TDDITransition& val);

  void __set_State(const TDDIState& val);

  bool operator == (const TDDIMarkovArtifactUnion & rhs) const
  {
    if (__isset.Transition != rhs.__isset.Transition)
      return false;
    else if (__isset.Transition && !(Transition == rhs.Transition))
      return false;
    if (__isset.State != rhs.__isset.State)
      return false;
    else if (__isset.State && !(State == rhs.State))
      return false;
    return true;
  }
  bool operator != (const TDDIMarkovArtifactUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMarkovArtifactUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMarkovArtifactUnion &a, TDDIMarkovArtifactUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIMarkovArtifactUnion& obj);

typedef struct _TDDIAbstractMarkovArtifact__isset {
  _TDDIAbstractMarkovArtifact__isset() : UsedMarkovArtifact(false), UsedMarkovArtifactType(false) {}
  bool UsedMarkovArtifact :1;
  bool UsedMarkovArtifactType :1;
} _TDDIAbstractMarkovArtifact__isset;

class TDDIAbstractMarkovArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractMarkovArtifact(const TDDIAbstractMarkovArtifact&);
  TDDIAbstractMarkovArtifact& operator=(const TDDIAbstractMarkovArtifact&);
  TDDIAbstractMarkovArtifact() : UsedMarkovArtifactType((TDDIMarkovArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractMarkovArtifact() throw();
  TDDIMarkovArtifactUnion UsedMarkovArtifact;
  TDDIMarkovArtifactUnionType UsedMarkovArtifactType;

  _TDDIAbstractMarkovArtifact__isset __isset;

  void __set_UsedMarkovArtifact(const TDDIMarkovArtifactUnion& val);

  void __set_UsedMarkovArtifactType(const TDDIMarkovArtifactUnionType val);

  bool operator == (const TDDIAbstractMarkovArtifact & rhs) const
  {
    if (!(UsedMarkovArtifact == rhs.UsedMarkovArtifact))
      return false;
    if (!(UsedMarkovArtifactType == rhs.UsedMarkovArtifactType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractMarkovArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractMarkovArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractMarkovArtifact &a, TDDIAbstractMarkovArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractMarkovArtifact& obj);

typedef struct _TDDIMarkovChainPackageUnion__isset {
  _TDDIMarkovChainPackageUnion__isset() : MarkovChainPackage(false), MarkovChainPackageInterface(false), MarkovChainPackageBinding(false) {}
  bool MarkovChainPackage :1;
  bool MarkovChainPackageInterface :1;
  bool MarkovChainPackageBinding :1;
} _TDDIMarkovChainPackageUnion__isset;

class TDDIMarkovChainPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIMarkovChainPackageUnion(const TDDIMarkovChainPackageUnion&);
  TDDIMarkovChainPackageUnion& operator=(const TDDIMarkovChainPackageUnion&);
  TDDIMarkovChainPackageUnion() : MarkovChainPackage(), MarkovChainPackageInterface(), MarkovChainPackageBinding() {
  }

  virtual ~TDDIMarkovChainPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackage> MarkovChainPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackageInterface> MarkovChainPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackageBinding> MarkovChainPackageBinding;

  _TDDIMarkovChainPackageUnion__isset __isset;

  void __set_MarkovChainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackage> val);

  void __set_MarkovChainPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackageInterface> val);

  void __set_MarkovChainPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChainPackageBinding> val);

  bool operator == (const TDDIMarkovChainPackageUnion & rhs) const
  {
    if (__isset.MarkovChainPackage != rhs.__isset.MarkovChainPackage)
      return false;
    else if (__isset.MarkovChainPackage && !(MarkovChainPackage == rhs.MarkovChainPackage))
      return false;
    if (__isset.MarkovChainPackageInterface != rhs.__isset.MarkovChainPackageInterface)
      return false;
    else if (__isset.MarkovChainPackageInterface && !(MarkovChainPackageInterface == rhs.MarkovChainPackageInterface))
      return false;
    if (__isset.MarkovChainPackageBinding != rhs.__isset.MarkovChainPackageBinding)
      return false;
    else if (__isset.MarkovChainPackageBinding && !(MarkovChainPackageBinding == rhs.MarkovChainPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIMarkovChainPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMarkovChainPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMarkovChainPackageUnion &a, TDDIMarkovChainPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackageUnion& obj);

typedef struct _TDDIAbstractMarkovChainPackage__isset {
  _TDDIAbstractMarkovChainPackage__isset() : UsedMarkovChainPackage(false), UsedMarkovChainPackageType(false) {}
  bool UsedMarkovChainPackage :1;
  bool UsedMarkovChainPackageType :1;
} _TDDIAbstractMarkovChainPackage__isset;

class TDDIAbstractMarkovChainPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractMarkovChainPackage(const TDDIAbstractMarkovChainPackage&);
  TDDIAbstractMarkovChainPackage& operator=(const TDDIAbstractMarkovChainPackage&);
  TDDIAbstractMarkovChainPackage() : UsedMarkovChainPackageType((TDDIMarkovChainPackageUnionType)0) {
  }

  virtual ~TDDIAbstractMarkovChainPackage() throw();
  TDDIMarkovChainPackageUnion UsedMarkovChainPackage;
  TDDIMarkovChainPackageUnionType UsedMarkovChainPackageType;

  _TDDIAbstractMarkovChainPackage__isset __isset;

  void __set_UsedMarkovChainPackage(const TDDIMarkovChainPackageUnion& val);

  void __set_UsedMarkovChainPackageType(const TDDIMarkovChainPackageUnionType val);

  bool operator == (const TDDIAbstractMarkovChainPackage & rhs) const
  {
    if (!(UsedMarkovChainPackage == rhs.UsedMarkovChainPackage))
      return false;
    if (!(UsedMarkovChainPackageType == rhs.UsedMarkovChainPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractMarkovChainPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractMarkovChainPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractMarkovChainPackage &a, TDDIAbstractMarkovChainPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractMarkovChainPackage& obj);

typedef struct _TDDIMarkovChainPackage__isset {
  _TDDIMarkovChainPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), MarkovArtifacts(true), FailStates(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool MarkovArtifacts :1;
  bool FailStates :1;
} _TDDIMarkovChainPackage__isset;

class TDDIMarkovChainPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIMarkovChainPackage(const TDDIMarkovChainPackage&);
  TDDIMarkovChainPackage& operator=(const TDDIMarkovChainPackage&);
  TDDIMarkovChainPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {




  }

  virtual ~TDDIMarkovChainPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractMarkovArtifact>  MarkovArtifacts;
  std::vector<TDDIFailState>  FailStates;

  _TDDIMarkovChainPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_MarkovArtifacts(const std::vector<TDDIAbstractMarkovArtifact> & val);

  void __set_FailStates(const std::vector<TDDIFailState> & val);

  bool operator == (const TDDIMarkovChainPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(MarkovArtifacts == rhs.MarkovArtifacts))
      return false;
    if (!(FailStates == rhs.FailStates))
      return false;
    return true;
  }
  bool operator != (const TDDIMarkovChainPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMarkovChainPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMarkovChainPackage &a, TDDIMarkovChainPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackage& obj);

typedef struct _TDDIMarkovChainPackageInterface__isset {
  _TDDIMarkovChainPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), MarkovArtifacts(true), FailStates(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool MarkovArtifacts :1;
  bool FailStates :1;
  bool Implements :1;
} _TDDIMarkovChainPackageInterface__isset;

class TDDIMarkovChainPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIMarkovChainPackageInterface(const TDDIMarkovChainPackageInterface&);
  TDDIMarkovChainPackageInterface& operator=(const TDDIMarkovChainPackageInterface&);
  TDDIMarkovChainPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {




  }

  virtual ~TDDIMarkovChainPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractMarkovArtifact>  MarkovArtifacts;
  std::vector<TDDIFailState>  FailStates;
  TDDIAbstractMarkovChainPackage Implements;

  _TDDIMarkovChainPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_MarkovArtifacts(const std::vector<TDDIAbstractMarkovArtifact> & val);

  void __set_FailStates(const std::vector<TDDIFailState> & val);

  void __set_Implements(const TDDIAbstractMarkovChainPackage& val);

  bool operator == (const TDDIMarkovChainPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(MarkovArtifacts == rhs.MarkovArtifacts))
      return false;
    if (!(FailStates == rhs.FailStates))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIMarkovChainPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMarkovChainPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMarkovChainPackageInterface &a, TDDIMarkovChainPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackageInterface& obj);

typedef struct _TDDIMarkovChainPackageBinding__isset {
  _TDDIMarkovChainPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), FailureAnalysisArtifacts(true), MarkovArtifacts(true), FailStates(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool FailureAnalysisArtifacts :1;
  bool MarkovArtifacts :1;
  bool FailStates :1;
  bool ParticipantPackages :1;
} _TDDIMarkovChainPackageBinding__isset;

class TDDIMarkovChainPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIMarkovChainPackageBinding(const TDDIMarkovChainPackageBinding&);
  TDDIMarkovChainPackageBinding& operator=(const TDDIMarkovChainPackageBinding&);
  TDDIMarkovChainPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {





  }

  virtual ~TDDIMarkovChainPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractFailureAnalysisArtifactRef>  FailureAnalysisArtifacts;
  std::vector<TDDIAbstractMarkovArtifact>  MarkovArtifacts;
  std::vector<TDDIFailState>  FailStates;
  std::vector<TDDIAbstractMarkovChainPackageRef>  ParticipantPackages;

  _TDDIMarkovChainPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_FailureAnalysisArtifacts(const std::vector<TDDIAbstractFailureAnalysisArtifactRef> & val);

  void __set_MarkovArtifacts(const std::vector<TDDIAbstractMarkovArtifact> & val);

  void __set_FailStates(const std::vector<TDDIFailState> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractMarkovChainPackageRef> & val);

  bool operator == (const TDDIMarkovChainPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(FailureAnalysisArtifacts == rhs.FailureAnalysisArtifacts))
      return false;
    if (!(MarkovArtifacts == rhs.MarkovArtifacts))
      return false;
    if (!(FailStates == rhs.FailStates))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIMarkovChainPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMarkovChainPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMarkovChainPackageBinding &a, TDDIMarkovChainPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIMarkovChainPackageBinding& obj);

typedef struct _TDDILegalContract__isset {
  _TDDILegalContract__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
} _TDDILegalContract__isset;

class TDDILegalContract : public virtual ::apache::thrift::TBase {
 public:

  TDDILegalContract(const TDDILegalContract&);
  TDDILegalContract& operator=(const TDDILegalContract&);
  TDDILegalContract() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {

  }

  virtual ~TDDILegalContract() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;

  _TDDILegalContract__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  bool operator == (const TDDILegalContract & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    return true;
  }
  bool operator != (const TDDILegalContract &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILegalContract & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILegalContract &a, TDDILegalContract &b);

std::ostream& operator<<(std::ostream& out, const TDDILegalContract& obj);

typedef struct _TDDIRequirementPackageUnion__isset {
  _TDDIRequirementPackageUnion__isset() : RequirementPackage(false), RequirementPackageInterface(false), RequirementPackageBinding(false) {}
  bool RequirementPackage :1;
  bool RequirementPackageInterface :1;
  bool RequirementPackageBinding :1;
} _TDDIRequirementPackageUnion__isset;

class TDDIRequirementPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIRequirementPackageUnion(const TDDIRequirementPackageUnion&);
  TDDIRequirementPackageUnion& operator=(const TDDIRequirementPackageUnion&);
  TDDIRequirementPackageUnion() : RequirementPackage(), RequirementPackageInterface(), RequirementPackageBinding() {
  }

  virtual ~TDDIRequirementPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> RequirementPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackageInterface> RequirementPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackageBinding> RequirementPackageBinding;

  _TDDIRequirementPackageUnion__isset __isset;

  void __set_RequirementPackage(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> val);

  void __set_RequirementPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackageInterface> val);

  void __set_RequirementPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackageBinding> val);

  bool operator == (const TDDIRequirementPackageUnion & rhs) const
  {
    if (__isset.RequirementPackage != rhs.__isset.RequirementPackage)
      return false;
    else if (__isset.RequirementPackage && !(RequirementPackage == rhs.RequirementPackage))
      return false;
    if (__isset.RequirementPackageInterface != rhs.__isset.RequirementPackageInterface)
      return false;
    else if (__isset.RequirementPackageInterface && !(RequirementPackageInterface == rhs.RequirementPackageInterface))
      return false;
    if (__isset.RequirementPackageBinding != rhs.__isset.RequirementPackageBinding)
      return false;
    else if (__isset.RequirementPackageBinding && !(RequirementPackageBinding == rhs.RequirementPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIRequirementPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRequirementPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRequirementPackageUnion &a, TDDIRequirementPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackageUnion& obj);

typedef struct _TDDIAbstractRequirementPackage__isset {
  _TDDIAbstractRequirementPackage__isset() : UsedRequirementPackage(false), UsedRequirementPackageType(false) {}
  bool UsedRequirementPackage :1;
  bool UsedRequirementPackageType :1;
} _TDDIAbstractRequirementPackage__isset;

class TDDIAbstractRequirementPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRequirementPackage(const TDDIAbstractRequirementPackage&);
  TDDIAbstractRequirementPackage& operator=(const TDDIAbstractRequirementPackage&);
  TDDIAbstractRequirementPackage() : UsedRequirementPackageType((TDDIRequirementPackageUnionType)0) {
  }

  virtual ~TDDIAbstractRequirementPackage() throw();
  TDDIRequirementPackageUnion UsedRequirementPackage;
  TDDIRequirementPackageUnionType UsedRequirementPackageType;

  _TDDIAbstractRequirementPackage__isset __isset;

  void __set_UsedRequirementPackage(const TDDIRequirementPackageUnion& val);

  void __set_UsedRequirementPackageType(const TDDIRequirementPackageUnionType val);

  bool operator == (const TDDIAbstractRequirementPackage & rhs) const
  {
    if (!(UsedRequirementPackage == rhs.UsedRequirementPackage))
      return false;
    if (!(UsedRequirementPackageType == rhs.UsedRequirementPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRequirementPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRequirementPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRequirementPackage &a, TDDIAbstractRequirementPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementPackage& obj);

typedef struct _TDDIRequirementPackage__isset {
  _TDDIRequirementPackage__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), RequirementArtifacts(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool RequirementArtifacts :1;
} _TDDIRequirementPackage__isset;

class TDDIRequirementPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIRequirementPackage(const TDDIRequirementPackage&);
  TDDIRequirementPackage& operator=(const TDDIRequirementPackage&);
  TDDIRequirementPackage() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {


  }

  virtual ~TDDIRequirementPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractRequirementArtifactRef>  RequirementArtifacts;

  _TDDIRequirementPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_RequirementArtifacts(const std::vector<TDDIAbstractRequirementArtifactRef> & val);

  bool operator == (const TDDIRequirementPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(RequirementArtifacts == rhs.RequirementArtifacts))
      return false;
    return true;
  }
  bool operator != (const TDDIRequirementPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRequirementPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRequirementPackage &a, TDDIRequirementPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackage& obj);

typedef struct _TDDIRequirementPackageInterface__isset {
  _TDDIRequirementPackageInterface__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), RequirementArtifacts(true), Implements(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool RequirementArtifacts :1;
  bool Implements :1;
} _TDDIRequirementPackageInterface__isset;

class TDDIRequirementPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIRequirementPackageInterface(const TDDIRequirementPackageInterface&);
  TDDIRequirementPackageInterface& operator=(const TDDIRequirementPackageInterface&);
  TDDIRequirementPackageInterface() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), Implements() {


  }

  virtual ~TDDIRequirementPackageInterface() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractRequirementArtifactRef>  RequirementArtifacts;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementPackage> Implements;

  _TDDIRequirementPackageInterface__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_RequirementArtifacts(const std::vector<TDDIAbstractRequirementArtifactRef> & val);

  void __set_Implements(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementPackage> val);

  bool operator == (const TDDIRequirementPackageInterface & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(RequirementArtifacts == rhs.RequirementArtifacts))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIRequirementPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRequirementPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRequirementPackageInterface &a, TDDIRequirementPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackageInterface& obj);

typedef struct _TDDIRequirementPackageBinding__isset {
  _TDDIRequirementPackageBinding__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), RequirementArtifacts(true), ParticipantPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool RequirementArtifacts :1;
  bool ParticipantPackages :1;
} _TDDIRequirementPackageBinding__isset;

class TDDIRequirementPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIRequirementPackageBinding(const TDDIRequirementPackageBinding&);
  TDDIRequirementPackageBinding& operator=(const TDDIRequirementPackageBinding&);
  TDDIRequirementPackageBinding() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement() {



  }

  virtual ~TDDIRequirementPackageBinding() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::vector<TDDIAbstractRequirementArtifactRef>  RequirementArtifacts;
  std::vector<TDDIAbstractRequirementPackageRef>  ParticipantPackages;

  _TDDIRequirementPackageBinding__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_RequirementArtifacts(const std::vector<TDDIAbstractRequirementArtifactRef> & val);

  void __set_ParticipantPackages(const std::vector<TDDIAbstractRequirementPackageRef> & val);

  bool operator == (const TDDIRequirementPackageBinding & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(RequirementArtifacts == rhs.RequirementArtifacts))
      return false;
    if (!(ParticipantPackages == rhs.ParticipantPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIRequirementPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRequirementPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRequirementPackageBinding &a, TDDIRequirementPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackageBinding& obj);

typedef struct _TDDIRequirementSourceUnion__isset {
  _TDDIRequirementSourceUnion__isset() : LegalContract(false) {}
  bool LegalContract :1;
} _TDDIRequirementSourceUnion__isset;

class TDDIRequirementSourceUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIRequirementSourceUnion(const TDDIRequirementSourceUnion&);
  TDDIRequirementSourceUnion& operator=(const TDDIRequirementSourceUnion&);
  TDDIRequirementSourceUnion() {
  }

  virtual ~TDDIRequirementSourceUnion() throw();
  TDDILegalContract LegalContract;

  _TDDIRequirementSourceUnion__isset __isset;

  void __set_LegalContract(const TDDILegalContract& val);

  bool operator == (const TDDIRequirementSourceUnion & rhs) const
  {
    if (__isset.LegalContract != rhs.__isset.LegalContract)
      return false;
    else if (__isset.LegalContract && !(LegalContract == rhs.LegalContract))
      return false;
    return true;
  }
  bool operator != (const TDDIRequirementSourceUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRequirementSourceUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRequirementSourceUnion &a, TDDIRequirementSourceUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIRequirementSourceUnion& obj);

typedef struct _TDDIAbstractRequirementSource__isset {
  _TDDIAbstractRequirementSource__isset() : UsedRequirementSource(false), UsedRequirementSourceType(false) {}
  bool UsedRequirementSource :1;
  bool UsedRequirementSourceType :1;
} _TDDIAbstractRequirementSource__isset;

class TDDIAbstractRequirementSource : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRequirementSource(const TDDIAbstractRequirementSource&);
  TDDIAbstractRequirementSource& operator=(const TDDIAbstractRequirementSource&);
  TDDIAbstractRequirementSource() : UsedRequirementSourceType((TDDIRequirementArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractRequirementSource() throw();
  TDDIRequirementSourceUnion UsedRequirementSource;
  TDDIRequirementArtifactUnionType UsedRequirementSourceType;

  _TDDIAbstractRequirementSource__isset __isset;

  void __set_UsedRequirementSource(const TDDIRequirementSourceUnion& val);

  void __set_UsedRequirementSourceType(const TDDIRequirementArtifactUnionType val);

  bool operator == (const TDDIAbstractRequirementSource & rhs) const
  {
    if (!(UsedRequirementSource == rhs.UsedRequirementSource))
      return false;
    if (!(UsedRequirementSourceType == rhs.UsedRequirementSourceType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRequirementSource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRequirementSource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRequirementSource &a, TDDIAbstractRequirementSource &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementSource& obj);

typedef struct _TDDISafetyRequirement__isset {
  _TDDISafetyRequirement__isset() : Id(false), Name(true), Description(true), IsCitation(true), IsAbstract(true), KeyValueMaps(true), CitedElement(false), DecompositionArgument(true), RefinedRequirements(true), RequirementSource(false), Measures(true), FailureModes(true), AssuranceLevel(false), MaintenanceProcedures(true), Hazards(true), FailureReactionTime(false), FailureDetectionTime(false), FailureLatencyTime(false), IsSafetyGoal(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool KeyValueMaps :1;
  bool CitedElement :1;
  bool DecompositionArgument :1;
  bool RefinedRequirements :1;
  bool RequirementSource :1;
  bool Measures :1;
  bool FailureModes :1;
  bool AssuranceLevel :1;
  bool MaintenanceProcedures :1;
  bool Hazards :1;
  bool FailureReactionTime :1;
  bool FailureDetectionTime :1;
  bool FailureLatencyTime :1;
  bool IsSafetyGoal :1;
} _TDDISafetyRequirement__isset;

class TDDISafetyRequirement : public virtual ::apache::thrift::TBase {
 public:

  TDDISafetyRequirement(const TDDISafetyRequirement&);
  TDDISafetyRequirement& operator=(const TDDISafetyRequirement&);
  TDDISafetyRequirement() : Id(0), Name(""), Description(""), IsCitation(false), IsAbstract(false), CitedElement(), DecompositionArgument(""), AssuranceLevel(), FailureReactionTime(0), FailureDetectionTime(0), FailureLatencyTime(0), IsSafetyGoal(0) {






  }

  virtual ~TDDISafetyRequirement() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  bool IsCitation;
  bool IsAbstract;
  std::vector<TDDIKeyValueMapRef>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> CitedElement;
  std::string DecompositionArgument;
  std::vector<TDDIAbstractDependabilityRequirementRef>  RefinedRequirements;
  TDDIAbstractRequirementSource RequirementSource;
  std::vector<TDDIAbstractMeasureRef>  Measures;
  std::vector<TDDIAbstractFailureRef>  FailureModes;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIMaintenanceProcedureRef>  MaintenanceProcedures;
  std::vector<TDDIHazardRef>  Hazards;
  double FailureReactionTime;
  double FailureDetectionTime;
  double FailureLatencyTime;
  bool IsSafetyGoal;

  _TDDISafetyRequirement__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMapRef> & val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractBaseElement> val);

  void __set_DecompositionArgument(const std::string& val);

  void __set_RefinedRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_RequirementSource(const TDDIAbstractRequirementSource& val);

  void __set_Measures(const std::vector<TDDIAbstractMeasureRef> & val);

  void __set_FailureModes(const std::vector<TDDIAbstractFailureRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_MaintenanceProcedures(const std::vector<TDDIMaintenanceProcedureRef> & val);

  void __set_Hazards(const std::vector<TDDIHazardRef> & val);

  void __set_FailureReactionTime(const double val);

  void __set_FailureDetectionTime(const double val);

  void __set_FailureLatencyTime(const double val);

  void __set_IsSafetyGoal(const bool val);

  bool operator == (const TDDISafetyRequirement & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(DecompositionArgument == rhs.DecompositionArgument))
      return false;
    if (!(RefinedRequirements == rhs.RefinedRequirements))
      return false;
    if (!(RequirementSource == rhs.RequirementSource))
      return false;
    if (!(Measures == rhs.Measures))
      return false;
    if (!(FailureModes == rhs.FailureModes))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(MaintenanceProcedures == rhs.MaintenanceProcedures))
      return false;
    if (!(Hazards == rhs.Hazards))
      return false;
    if (!(FailureReactionTime == rhs.FailureReactionTime))
      return false;
    if (!(FailureDetectionTime == rhs.FailureDetectionTime))
      return false;
    if (!(FailureLatencyTime == rhs.FailureLatencyTime))
      return false;
    if (!(IsSafetyGoal == rhs.IsSafetyGoal))
      return false;
    return true;
  }
  bool operator != (const TDDISafetyRequirement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISafetyRequirement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISafetyRequirement &a, TDDISafetyRequirement &b);

std::ostream& operator<<(std::ostream& out, const TDDISafetyRequirement& obj);

typedef struct _TDDIDependabilityRequirementUnion__isset {
  _TDDIDependabilityRequirementUnion__isset() : SafetyRequirement(false) {}
  bool SafetyRequirement :1;
} _TDDIDependabilityRequirementUnion__isset;

class TDDIDependabilityRequirementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIDependabilityRequirementUnion(const TDDIDependabilityRequirementUnion&);
  TDDIDependabilityRequirementUnion& operator=(const TDDIDependabilityRequirementUnion&);
  TDDIDependabilityRequirementUnion() {
  }

  virtual ~TDDIDependabilityRequirementUnion() throw();
  TDDISafetyRequirement SafetyRequirement;

  _TDDIDependabilityRequirementUnion__isset __isset;

  void __set_SafetyRequirement(const TDDISafetyRequirement& val);

  bool operator == (const TDDIDependabilityRequirementUnion & rhs) const
  {
    if (__isset.SafetyRequirement != rhs.__isset.SafetyRequirement)
      return false;
    else if (__isset.SafetyRequirement && !(SafetyRequirement == rhs.SafetyRequirement))
      return false;
    return true;
  }
  bool operator != (const TDDIDependabilityRequirementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDependabilityRequirementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDependabilityRequirementUnion &a, TDDIDependabilityRequirementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityRequirementUnion& obj);

typedef struct _TDDIAbstractDependabilityRequirement__isset {
  _TDDIAbstractDependabilityRequirement__isset() : UsedDependabilityRequirement(false), UsedDependabilityRequirementType(false) {}
  bool UsedDependabilityRequirement :1;
  bool UsedDependabilityRequirementType :1;
} _TDDIAbstractDependabilityRequirement__isset;

class TDDIAbstractDependabilityRequirement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDependabilityRequirement(const TDDIAbstractDependabilityRequirement&);
  TDDIAbstractDependabilityRequirement& operator=(const TDDIAbstractDependabilityRequirement&);
  TDDIAbstractDependabilityRequirement() : UsedDependabilityRequirementType((TDDIDependabilityRequirementUnionType)0) {
  }

  virtual ~TDDIAbstractDependabilityRequirement() throw();
  TDDIDependabilityRequirementUnion UsedDependabilityRequirement;
  TDDIDependabilityRequirementUnionType UsedDependabilityRequirementType;

  _TDDIAbstractDependabilityRequirement__isset __isset;

  void __set_UsedDependabilityRequirement(const TDDIDependabilityRequirementUnion& val);

  void __set_UsedDependabilityRequirementType(const TDDIDependabilityRequirementUnionType val);

  bool operator == (const TDDIAbstractDependabilityRequirement & rhs) const
  {
    if (!(UsedDependabilityRequirement == rhs.UsedDependabilityRequirement))
      return false;
    if (!(UsedDependabilityRequirementType == rhs.UsedDependabilityRequirementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDependabilityRequirement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDependabilityRequirement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDependabilityRequirement &a, TDDIAbstractDependabilityRequirement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityRequirement& obj);

typedef struct _TDDIRequirementArtifactUnion__isset {
  _TDDIRequirementArtifactUnion__isset() : RequirementPackage(false), RequirementSource(false), DependabilityRequirement(false) {}
  bool RequirementPackage :1;
  bool RequirementSource :1;
  bool DependabilityRequirement :1;
} _TDDIRequirementArtifactUnion__isset;

class TDDIRequirementArtifactUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIRequirementArtifactUnion(const TDDIRequirementArtifactUnion&);
  TDDIRequirementArtifactUnion& operator=(const TDDIRequirementArtifactUnion&);
  TDDIRequirementArtifactUnion() {
  }

  virtual ~TDDIRequirementArtifactUnion() throw();
  TDDIAbstractRequirementPackage RequirementPackage;
  TDDIAbstractRequirementSource RequirementSource;
  TDDIAbstractDependabilityRequirement DependabilityRequirement;

  _TDDIRequirementArtifactUnion__isset __isset;

  void __set_RequirementPackage(const TDDIAbstractRequirementPackage& val);

  void __set_RequirementSource(const TDDIAbstractRequirementSource& val);

  void __set_DependabilityRequirement(const TDDIAbstractDependabilityRequirement& val);

  bool operator == (const TDDIRequirementArtifactUnion & rhs) const
  {
    if (__isset.RequirementPackage != rhs.__isset.RequirementPackage)
      return false;
    else if (__isset.RequirementPackage && !(RequirementPackage == rhs.RequirementPackage))
      return false;
    if (__isset.RequirementSource != rhs.__isset.RequirementSource)
      return false;
    else if (__isset.RequirementSource && !(RequirementSource == rhs.RequirementSource))
      return false;
    if (__isset.DependabilityRequirement != rhs.__isset.DependabilityRequirement)
      return false;
    else if (__isset.DependabilityRequirement && !(DependabilityRequirement == rhs.DependabilityRequirement))
      return false;
    return true;
  }
  bool operator != (const TDDIRequirementArtifactUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRequirementArtifactUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRequirementArtifactUnion &a, TDDIRequirementArtifactUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIRequirementArtifactUnion& obj);

typedef struct _TDDIAbstractRequirementArtifact__isset {
  _TDDIAbstractRequirementArtifact__isset() : UsedRequirementArtifact(false), UsedRequirementArtifactType(false) {}
  bool UsedRequirementArtifact :1;
  bool UsedRequirementArtifactType :1;
} _TDDIAbstractRequirementArtifact__isset;

class TDDIAbstractRequirementArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRequirementArtifact(const TDDIAbstractRequirementArtifact&);
  TDDIAbstractRequirementArtifact& operator=(const TDDIAbstractRequirementArtifact&);
  TDDIAbstractRequirementArtifact() : UsedRequirementArtifactType((TDDIRequirementArtifactUnionType)0) {
  }

  virtual ~TDDIAbstractRequirementArtifact() throw();
  TDDIRequirementArtifactUnion UsedRequirementArtifact;
  TDDIRequirementArtifactUnionType UsedRequirementArtifactType;

  _TDDIAbstractRequirementArtifact__isset __isset;

  void __set_UsedRequirementArtifact(const TDDIRequirementArtifactUnion& val);

  void __set_UsedRequirementArtifactType(const TDDIRequirementArtifactUnionType val);

  bool operator == (const TDDIAbstractRequirementArtifact & rhs) const
  {
    if (!(UsedRequirementArtifact == rhs.UsedRequirementArtifact))
      return false;
    if (!(UsedRequirementArtifactType == rhs.UsedRequirementArtifactType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRequirementArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRequirementArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRequirementArtifact &a, TDDIAbstractRequirementArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementArtifact& obj);

typedef struct _TDDIArtifactReference__isset {
  _TDDIArtifactReference__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ReferencedArtifactElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ReferencedArtifactElement :1;
} _TDDIArtifactReference__isset;

class TDDIArtifactReference : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactReference(const TDDIArtifactReference&);
  TDDIArtifactReference& operator=(const TDDIArtifactReference&);
  TDDIArtifactReference() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArtifactReference() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ReferencedArtifactElement;

  _TDDIArtifactReference__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ReferencedArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  bool operator == (const TDDIArtifactReference & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ReferencedArtifactElement == rhs.ReferencedArtifactElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactReference &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactReference & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactReference &a, TDDIArtifactReference &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactReference& obj);

typedef struct _TDDIArgumentationElementUnion__isset {
  _TDDIArgumentationElementUnion__isset() : ArgumentGroup(false), ArgumentPackage(false), ArgumentAsset(false) {}
  bool ArgumentGroup :1;
  bool ArgumentPackage :1;
  bool ArgumentAsset :1;
} _TDDIArgumentationElementUnion__isset;

class TDDIArgumentationElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentationElementUnion(const TDDIArgumentationElementUnion&);
  TDDIArgumentationElementUnion& operator=(const TDDIArgumentationElementUnion&);
  TDDIArgumentationElementUnion() : ArgumentGroup(), ArgumentPackage(), ArgumentAsset() {
  }

  virtual ~TDDIArgumentationElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentGroup> ArgumentGroup;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> ArgumentPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> ArgumentAsset;

  _TDDIArgumentationElementUnion__isset __isset;

  void __set_ArgumentGroup(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentGroup> val);

  void __set_ArgumentPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> val);

  void __set_ArgumentAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> val);

  bool operator == (const TDDIArgumentationElementUnion & rhs) const
  {
    if (__isset.ArgumentGroup != rhs.__isset.ArgumentGroup)
      return false;
    else if (__isset.ArgumentGroup && !(ArgumentGroup == rhs.ArgumentGroup))
      return false;
    if (__isset.ArgumentPackage != rhs.__isset.ArgumentPackage)
      return false;
    else if (__isset.ArgumentPackage && !(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (__isset.ArgumentAsset != rhs.__isset.ArgumentAsset)
      return false;
    else if (__isset.ArgumentAsset && !(ArgumentAsset == rhs.ArgumentAsset))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentationElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentationElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentationElementUnion &a, TDDIArgumentationElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentationElementUnion& obj);

typedef struct _TDDIAbstractArgumentationElement__isset {
  _TDDIAbstractArgumentationElement__isset() : UsedArgumentationElement(false), UsedArgumentationElementType(false) {}
  bool UsedArgumentationElement :1;
  bool UsedArgumentationElementType :1;
} _TDDIAbstractArgumentationElement__isset;

class TDDIAbstractArgumentationElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentationElement(const TDDIAbstractArgumentationElement&);
  TDDIAbstractArgumentationElement& operator=(const TDDIAbstractArgumentationElement&);
  TDDIAbstractArgumentationElement() : UsedArgumentationElementType((TDDIArgumentationElementUnionType)0) {
  }

  virtual ~TDDIAbstractArgumentationElement() throw();
  TDDIArgumentationElementUnion UsedArgumentationElement;
  TDDIArgumentationElementUnionType UsedArgumentationElementType;

  _TDDIAbstractArgumentationElement__isset __isset;

  void __set_UsedArgumentationElement(const TDDIArgumentationElementUnion& val);

  void __set_UsedArgumentationElementType(const TDDIArgumentationElementUnionType val);

  bool operator == (const TDDIAbstractArgumentationElement & rhs) const
  {
    if (!(UsedArgumentationElement == rhs.UsedArgumentationElement))
      return false;
    if (!(UsedArgumentationElementType == rhs.UsedArgumentationElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentationElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentationElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentationElement &a, TDDIAbstractArgumentationElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentationElement& obj);

typedef struct _TDDIArgumentGroup__isset {
  _TDDIArgumentGroup__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArgumentationElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArgumentationElement :1;
} _TDDIArgumentGroup__isset;

class TDDIArgumentGroup : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentGroup(const TDDIArgumentGroup&);
  TDDIArgumentGroup& operator=(const TDDIArgumentGroup&);
  TDDIArgumentGroup() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArgumentGroup() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArgumentationElementRef>  ArgumentationElement;

  _TDDIArgumentGroup__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val);

  bool operator == (const TDDIArgumentGroup & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentGroup &a, TDDIArgumentGroup &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentGroup& obj);

typedef struct _TDDIArgumentPackageUnion__isset {
  _TDDIArgumentPackageUnion__isset() : ArgumentPackage(false), ArgumentPackageInterface(false), ArgumentPackageBinding(false) {}
  bool ArgumentPackage :1;
  bool ArgumentPackageInterface :1;
  bool ArgumentPackageBinding :1;
} _TDDIArgumentPackageUnion__isset;

class TDDIArgumentPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentPackageUnion(const TDDIArgumentPackageUnion&);
  TDDIArgumentPackageUnion& operator=(const TDDIArgumentPackageUnion&);
  TDDIArgumentPackageUnion() : ArgumentPackage(), ArgumentPackageInterface(), ArgumentPackageBinding() {
  }

  virtual ~TDDIArgumentPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackage> ArgumentPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageInterface> ArgumentPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageBinding> ArgumentPackageBinding;

  _TDDIArgumentPackageUnion__isset __isset;

  void __set_ArgumentPackage(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackage> val);

  void __set_ArgumentPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageInterface> val);

  void __set_ArgumentPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageBinding> val);

  bool operator == (const TDDIArgumentPackageUnion & rhs) const
  {
    if (__isset.ArgumentPackage != rhs.__isset.ArgumentPackage)
      return false;
    else if (__isset.ArgumentPackage && !(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (__isset.ArgumentPackageInterface != rhs.__isset.ArgumentPackageInterface)
      return false;
    else if (__isset.ArgumentPackageInterface && !(ArgumentPackageInterface == rhs.ArgumentPackageInterface))
      return false;
    if (__isset.ArgumentPackageBinding != rhs.__isset.ArgumentPackageBinding)
      return false;
    else if (__isset.ArgumentPackageBinding && !(ArgumentPackageBinding == rhs.ArgumentPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentPackageUnion &a, TDDIArgumentPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageUnion& obj);

typedef struct _TDDIAbstractArgumentPackage__isset {
  _TDDIAbstractArgumentPackage__isset() : UsedArgumentPackage(false), UsedArgumentPackageType(false) {}
  bool UsedArgumentPackage :1;
  bool UsedArgumentPackageType :1;
} _TDDIAbstractArgumentPackage__isset;

class TDDIAbstractArgumentPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentPackage(const TDDIAbstractArgumentPackage&);
  TDDIAbstractArgumentPackage& operator=(const TDDIAbstractArgumentPackage&);
  TDDIAbstractArgumentPackage() : UsedArgumentPackageType((TDDIArgumentPackageUnionType)0) {
  }

  virtual ~TDDIAbstractArgumentPackage() throw();
  TDDIArgumentPackageUnion UsedArgumentPackage;
  TDDIArgumentPackageUnionType UsedArgumentPackageType;

  _TDDIAbstractArgumentPackage__isset __isset;

  void __set_UsedArgumentPackage(const TDDIArgumentPackageUnion& val);

  void __set_UsedArgumentPackageType(const TDDIArgumentPackageUnionType val);

  bool operator == (const TDDIAbstractArgumentPackage & rhs) const
  {
    if (!(UsedArgumentPackage == rhs.UsedArgumentPackage))
      return false;
    if (!(UsedArgumentPackageType == rhs.UsedArgumentPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentPackage &a, TDDIAbstractArgumentPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentPackage& obj);

typedef struct _TDDIArgumentPackage__isset {
  _TDDIArgumentPackage__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArgumentationElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArgumentationElement :1;
} _TDDIArgumentPackage__isset;

class TDDIArgumentPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentPackage(const TDDIArgumentPackage&);
  TDDIArgumentPackage& operator=(const TDDIArgumentPackage&);
  TDDIArgumentPackage() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArgumentPackage() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArgumentationElementRef>  ArgumentationElement;

  _TDDIArgumentPackage__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val);

  bool operator == (const TDDIArgumentPackage & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentPackage &a, TDDIArgumentPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackage& obj);

typedef struct _TDDIArgumentPackageInterface__isset {
  _TDDIArgumentPackageInterface__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArgumentationElement(true), Implements(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArgumentationElement :1;
  bool Implements :1;
} _TDDIArgumentPackageInterface__isset;

class TDDIArgumentPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentPackageInterface(const TDDIArgumentPackageInterface&);
  TDDIArgumentPackageInterface& operator=(const TDDIArgumentPackageInterface&);
  TDDIArgumentPackageInterface() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArgumentPackageInterface() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArgumentationElementRef>  ArgumentationElement;
  TDDIAbstractArgumentPackage Implements;

  _TDDIArgumentPackageInterface__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val);

  void __set_Implements(const TDDIAbstractArgumentPackage& val);

  bool operator == (const TDDIArgumentPackageInterface & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentPackageInterface &a, TDDIArgumentPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageInterface& obj);

typedef struct _TDDIArgumentPackageBinding__isset {
  _TDDIArgumentPackageBinding__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArgumentationElement(true), ParticipantPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArgumentationElement :1;
  bool ParticipantPackage :1;
} _TDDIArgumentPackageBinding__isset;

class TDDIArgumentPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentPackageBinding(const TDDIArgumentPackageBinding&);
  TDDIArgumentPackageBinding& operator=(const TDDIArgumentPackageBinding&);
  TDDIArgumentPackageBinding() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {





  }

  virtual ~TDDIArgumentPackageBinding() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArgumentationElementRef>  ArgumentationElement;
  std::vector<TDDIAbstractArgumentPackageRef>  ParticipantPackage;

  _TDDIArgumentPackageBinding__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val);

  void __set_ParticipantPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val);

  bool operator == (const TDDIArgumentPackageBinding & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    if (!(ParticipantPackage == rhs.ParticipantPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentPackageBinding &a, TDDIArgumentPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageBinding& obj);

typedef struct _TDDIArgumentAssetUnion__isset {
  _TDDIArgumentAssetUnion__isset() : Assertion(false), ArgumentReasoning(false), ArtifactReference(false) {}
  bool Assertion :1;
  bool ArgumentReasoning :1;
  bool ArtifactReference :1;
} _TDDIArgumentAssetUnion__isset;

class TDDIArgumentAssetUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentAssetUnion(const TDDIArgumentAssetUnion&);
  TDDIArgumentAssetUnion& operator=(const TDDIArgumentAssetUnion&);
  TDDIArgumentAssetUnion() : Assertion(), ArgumentReasoning(), ArtifactReference() {
  }

  virtual ~TDDIArgumentAssetUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertion> Assertion;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentReasoning> ArgumentReasoning;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactReference> ArtifactReference;

  _TDDIArgumentAssetUnion__isset __isset;

  void __set_Assertion(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertion> val);

  void __set_ArgumentReasoning(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentReasoning> val);

  void __set_ArtifactReference(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactReference> val);

  bool operator == (const TDDIArgumentAssetUnion & rhs) const
  {
    if (__isset.Assertion != rhs.__isset.Assertion)
      return false;
    else if (__isset.Assertion && !(Assertion == rhs.Assertion))
      return false;
    if (__isset.ArgumentReasoning != rhs.__isset.ArgumentReasoning)
      return false;
    else if (__isset.ArgumentReasoning && !(ArgumentReasoning == rhs.ArgumentReasoning))
      return false;
    if (__isset.ArtifactReference != rhs.__isset.ArtifactReference)
      return false;
    else if (__isset.ArtifactReference && !(ArtifactReference == rhs.ArtifactReference))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentAssetUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentAssetUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentAssetUnion &a, TDDIArgumentAssetUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentAssetUnion& obj);

typedef struct _TDDIAbstractArgumentAsset__isset {
  _TDDIAbstractArgumentAsset__isset() : UsedArgumentAsset(false), UsedArgumentAssetType(false) {}
  bool UsedArgumentAsset :1;
  bool UsedArgumentAssetType :1;
} _TDDIAbstractArgumentAsset__isset;

class TDDIAbstractArgumentAsset : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentAsset(const TDDIAbstractArgumentAsset&);
  TDDIAbstractArgumentAsset& operator=(const TDDIAbstractArgumentAsset&);
  TDDIAbstractArgumentAsset() : UsedArgumentAssetType((TDDIArgumentAssetUnionType)0) {
  }

  virtual ~TDDIAbstractArgumentAsset() throw();
  TDDIArgumentAssetUnion UsedArgumentAsset;
  TDDIArgumentAssetUnionType UsedArgumentAssetType;

  _TDDIAbstractArgumentAsset__isset __isset;

  void __set_UsedArgumentAsset(const TDDIArgumentAssetUnion& val);

  void __set_UsedArgumentAssetType(const TDDIArgumentAssetUnionType val);

  bool operator == (const TDDIAbstractArgumentAsset & rhs) const
  {
    if (!(UsedArgumentAsset == rhs.UsedArgumentAsset))
      return false;
    if (!(UsedArgumentAssetType == rhs.UsedArgumentAssetType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentAsset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentAsset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentAsset &a, TDDIAbstractArgumentAsset &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentAsset& obj);

typedef struct _TDDIArgumentReasoning__isset {
  _TDDIArgumentReasoning__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Structure(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Structure :1;
} _TDDIArgumentReasoning__isset;

class TDDIArgumentReasoning : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentReasoning(const TDDIArgumentReasoning&);
  TDDIArgumentReasoning& operator=(const TDDIArgumentReasoning&);
  TDDIArgumentReasoning() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {



  }

  virtual ~TDDIArgumentReasoning() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAbstractArgumentPackage Structure;

  _TDDIArgumentReasoning__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Structure(const TDDIAbstractArgumentPackage& val);

  bool operator == (const TDDIArgumentReasoning & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Structure == rhs.Structure))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentReasoning &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentReasoning & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentReasoning &a, TDDIArgumentReasoning &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentReasoning& obj);

typedef struct _TDDIClaim__isset {
  _TDDIClaim__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
} _TDDIClaim__isset;

class TDDIClaim : public virtual ::apache::thrift::TBase {
 public:

  TDDIClaim(const TDDIClaim&);
  TDDIClaim& operator=(const TDDIClaim&);
  TDDIClaim() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;


  }

  virtual ~TDDIClaim() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;

  _TDDIClaim__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  bool operator == (const TDDIClaim & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    return true;
  }
  bool operator != (const TDDIClaim &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIClaim & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIClaim &a, TDDIClaim &b);

std::ostream& operator<<(std::ostream& out, const TDDIClaim& obj);

typedef struct _TDDIAssertionUnion__isset {
  _TDDIAssertionUnion__isset() : Claim(false), AssertedRelationship(false) {}
  bool Claim :1;
  bool AssertedRelationship :1;
} _TDDIAssertionUnion__isset;

class TDDIAssertionUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertionUnion(const TDDIAssertionUnion&);
  TDDIAssertionUnion& operator=(const TDDIAssertionUnion&);
  TDDIAssertionUnion() : AssertedRelationship() {
  }

  virtual ~TDDIAssertionUnion() throw();
  TDDIClaim Claim;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertedRelationship> AssertedRelationship;

  _TDDIAssertionUnion__isset __isset;

  void __set_Claim(const TDDIClaim& val);

  void __set_AssertedRelationship(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertedRelationship> val);

  bool operator == (const TDDIAssertionUnion & rhs) const
  {
    if (__isset.Claim != rhs.__isset.Claim)
      return false;
    else if (__isset.Claim && !(Claim == rhs.Claim))
      return false;
    if (__isset.AssertedRelationship != rhs.__isset.AssertedRelationship)
      return false;
    else if (__isset.AssertedRelationship && !(AssertedRelationship == rhs.AssertedRelationship))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertionUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertionUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertionUnion &a, TDDIAssertionUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertionUnion& obj);

typedef struct _TDDIAbstractAssertion__isset {
  _TDDIAbstractAssertion__isset() : UsedAssertion(false), UsedAssertionType(false) {}
  bool UsedAssertion :1;
  bool UsedAssertionType :1;
} _TDDIAbstractAssertion__isset;

class TDDIAbstractAssertion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssertion(const TDDIAbstractAssertion&);
  TDDIAbstractAssertion& operator=(const TDDIAbstractAssertion&);
  TDDIAbstractAssertion() : UsedAssertionType((TDDIAssertionUnionType)0) {
  }

  virtual ~TDDIAbstractAssertion() throw();
  TDDIAssertionUnion UsedAssertion;
  TDDIAssertionUnionType UsedAssertionType;

  _TDDIAbstractAssertion__isset __isset;

  void __set_UsedAssertion(const TDDIAssertionUnion& val);

  void __set_UsedAssertionType(const TDDIAssertionUnionType val);

  bool operator == (const TDDIAbstractAssertion & rhs) const
  {
    if (!(UsedAssertion == rhs.UsedAssertion))
      return false;
    if (!(UsedAssertionType == rhs.UsedAssertionType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssertion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssertion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssertion &a, TDDIAbstractAssertion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssertion& obj);

typedef struct _TDDIAssertedArtifactSupport__isset {
  _TDDIAssertedArtifactSupport__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedArtifactSupport__isset;

class TDDIAssertedArtifactSupport : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedArtifactSupport(const TDDIAssertedArtifactSupport&);
  TDDIAssertedArtifactSupport& operator=(const TDDIAssertedArtifactSupport&);
  TDDIAssertedArtifactSupport() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedArtifactSupport() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedArtifactSupport__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedArtifactSupport & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedArtifactSupport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedArtifactSupport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedArtifactSupport &a, TDDIAssertedArtifactSupport &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedArtifactSupport& obj);

typedef struct _TDDIAssertedArtifactContext__isset {
  _TDDIAssertedArtifactContext__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedArtifactContext__isset;

class TDDIAssertedArtifactContext : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedArtifactContext(const TDDIAssertedArtifactContext&);
  TDDIAssertedArtifactContext& operator=(const TDDIAssertedArtifactContext&);
  TDDIAssertedArtifactContext() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedArtifactContext() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedArtifactContext__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedArtifactContext & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedArtifactContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedArtifactContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedArtifactContext &a, TDDIAssertedArtifactContext &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedArtifactContext& obj);

typedef struct _TDDIAssertedInference__isset {
  _TDDIAssertedInference__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedInference__isset;

class TDDIAssertedInference : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedInference(const TDDIAssertedInference&);
  TDDIAssertedInference& operator=(const TDDIAssertedInference&);
  TDDIAssertedInference() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedInference() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedInference__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedInference & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedInference &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedInference & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedInference &a, TDDIAssertedInference &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedInference& obj);

typedef struct _TDDIAssertedEvidence__isset {
  _TDDIAssertedEvidence__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedEvidence__isset;

class TDDIAssertedEvidence : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedEvidence(const TDDIAssertedEvidence&);
  TDDIAssertedEvidence& operator=(const TDDIAssertedEvidence&);
  TDDIAssertedEvidence() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedEvidence() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedEvidence__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedEvidence & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedEvidence &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedEvidence & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedEvidence &a, TDDIAssertedEvidence &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedEvidence& obj);

typedef struct _TDDIAssertedContext__isset {
  _TDDIAssertedContext__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedContext__isset;

class TDDIAssertedContext : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedContext(const TDDIAssertedContext&);
  TDDIAssertedContext& operator=(const TDDIAssertedContext&);
  TDDIAssertedContext() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedContext() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedContext__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedContext & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedContext &a, TDDIAssertedContext &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedContext& obj);

typedef struct _TDDIAssertedRelationshipUnion__isset {
  _TDDIAssertedRelationshipUnion__isset() : AssertedArtifactSupport(false), AssertedArtifactContext(false), AssertedInference(false), AssertedEvidence(false), AssertedContext(false) {}
  bool AssertedArtifactSupport :1;
  bool AssertedArtifactContext :1;
  bool AssertedInference :1;
  bool AssertedEvidence :1;
  bool AssertedContext :1;
} _TDDIAssertedRelationshipUnion__isset;

class TDDIAssertedRelationshipUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedRelationshipUnion(const TDDIAssertedRelationshipUnion&);
  TDDIAssertedRelationshipUnion& operator=(const TDDIAssertedRelationshipUnion&);
  TDDIAssertedRelationshipUnion() {
  }

  virtual ~TDDIAssertedRelationshipUnion() throw();
  TDDIAssertedArtifactSupport AssertedArtifactSupport;
  TDDIAssertedArtifactContext AssertedArtifactContext;
  TDDIAssertedInference AssertedInference;
  TDDIAssertedEvidence AssertedEvidence;
  TDDIAssertedContext AssertedContext;

  _TDDIAssertedRelationshipUnion__isset __isset;

  void __set_AssertedArtifactSupport(const TDDIAssertedArtifactSupport& val);

  void __set_AssertedArtifactContext(const TDDIAssertedArtifactContext& val);

  void __set_AssertedInference(const TDDIAssertedInference& val);

  void __set_AssertedEvidence(const TDDIAssertedEvidence& val);

  void __set_AssertedContext(const TDDIAssertedContext& val);

  bool operator == (const TDDIAssertedRelationshipUnion & rhs) const
  {
    if (__isset.AssertedArtifactSupport != rhs.__isset.AssertedArtifactSupport)
      return false;
    else if (__isset.AssertedArtifactSupport && !(AssertedArtifactSupport == rhs.AssertedArtifactSupport))
      return false;
    if (__isset.AssertedArtifactContext != rhs.__isset.AssertedArtifactContext)
      return false;
    else if (__isset.AssertedArtifactContext && !(AssertedArtifactContext == rhs.AssertedArtifactContext))
      return false;
    if (__isset.AssertedInference != rhs.__isset.AssertedInference)
      return false;
    else if (__isset.AssertedInference && !(AssertedInference == rhs.AssertedInference))
      return false;
    if (__isset.AssertedEvidence != rhs.__isset.AssertedEvidence)
      return false;
    else if (__isset.AssertedEvidence && !(AssertedEvidence == rhs.AssertedEvidence))
      return false;
    if (__isset.AssertedContext != rhs.__isset.AssertedContext)
      return false;
    else if (__isset.AssertedContext && !(AssertedContext == rhs.AssertedContext))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedRelationshipUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedRelationshipUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedRelationshipUnion &a, TDDIAssertedRelationshipUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedRelationshipUnion& obj);

typedef struct _TDDIAbstractAssertedRelationship__isset {
  _TDDIAbstractAssertedRelationship__isset() : UsedAssertedRelationship(false), UsedAssertedRelationshipType(false) {}
  bool UsedAssertedRelationship :1;
  bool UsedAssertedRelationshipType :1;
} _TDDIAbstractAssertedRelationship__isset;

class TDDIAbstractAssertedRelationship : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssertedRelationship(const TDDIAbstractAssertedRelationship&);
  TDDIAbstractAssertedRelationship& operator=(const TDDIAbstractAssertedRelationship&);
  TDDIAbstractAssertedRelationship() : UsedAssertedRelationshipType((TDDIAssertedRelationshipUnionType)0) {
  }

  virtual ~TDDIAbstractAssertedRelationship() throw();
  TDDIAssertedRelationshipUnion UsedAssertedRelationship;
  TDDIAssertedRelationshipUnionType UsedAssertedRelationshipType;

  _TDDIAbstractAssertedRelationship__isset __isset;

  void __set_UsedAssertedRelationship(const TDDIAssertedRelationshipUnion& val);

  void __set_UsedAssertedRelationshipType(const TDDIAssertedRelationshipUnionType val);

  bool operator == (const TDDIAbstractAssertedRelationship & rhs) const
  {
    if (!(UsedAssertedRelationship == rhs.UsedAssertedRelationship))
      return false;
    if (!(UsedAssertedRelationshipType == rhs.UsedAssertedRelationshipType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssertedRelationship &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssertedRelationship & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssertedRelationship &a, TDDIAbstractAssertedRelationship &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssertedRelationship& obj);

typedef struct _TDDIArtifactPackageUnion__isset {
  _TDDIArtifactPackageUnion__isset() : ArtifactPackage(false), ArtifactPackageInterface(false), ArtifactPackageBinding(false) {}
  bool ArtifactPackage :1;
  bool ArtifactPackageInterface :1;
  bool ArtifactPackageBinding :1;
} _TDDIArtifactPackageUnion__isset;

class TDDIArtifactPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactPackageUnion(const TDDIArtifactPackageUnion&);
  TDDIArtifactPackageUnion& operator=(const TDDIArtifactPackageUnion&);
  TDDIArtifactPackageUnion() : ArtifactPackage(), ArtifactPackageInterface(), ArtifactPackageBinding() {
  }

  virtual ~TDDIArtifactPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackage> ArtifactPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageInterface> ArtifactPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageBinding> ArtifactPackageBinding;

  _TDDIArtifactPackageUnion__isset __isset;

  void __set_ArtifactPackage(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackage> val);

  void __set_ArtifactPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageInterface> val);

  void __set_ArtifactPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageBinding> val);

  bool operator == (const TDDIArtifactPackageUnion & rhs) const
  {
    if (__isset.ArtifactPackage != rhs.__isset.ArtifactPackage)
      return false;
    else if (__isset.ArtifactPackage && !(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (__isset.ArtifactPackageInterface != rhs.__isset.ArtifactPackageInterface)
      return false;
    else if (__isset.ArtifactPackageInterface && !(ArtifactPackageInterface == rhs.ArtifactPackageInterface))
      return false;
    if (__isset.ArtifactPackageBinding != rhs.__isset.ArtifactPackageBinding)
      return false;
    else if (__isset.ArtifactPackageBinding && !(ArtifactPackageBinding == rhs.ArtifactPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactPackageUnion &a, TDDIArtifactPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageUnion& obj);

typedef struct _TDDIAbstractArtifactPackage__isset {
  _TDDIAbstractArtifactPackage__isset() : UsedArtifactPackage(false), UsedArtifactPackageType(false) {}
  bool UsedArtifactPackage :1;
  bool UsedArtifactPackageType :1;
} _TDDIAbstractArtifactPackage__isset;

class TDDIAbstractArtifactPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactPackage(const TDDIAbstractArtifactPackage&);
  TDDIAbstractArtifactPackage& operator=(const TDDIAbstractArtifactPackage&);
  TDDIAbstractArtifactPackage() : UsedArtifactPackageType((TDDIArtifactPackageUnionType)0) {
  }

  virtual ~TDDIAbstractArtifactPackage() throw();
  TDDIArtifactPackageUnion UsedArtifactPackage;
  TDDIArtifactPackageUnionType UsedArtifactPackageType;

  _TDDIAbstractArtifactPackage__isset __isset;

  void __set_UsedArtifactPackage(const TDDIArtifactPackageUnion& val);

  void __set_UsedArtifactPackageType(const TDDIArtifactPackageUnionType val);

  bool operator == (const TDDIAbstractArtifactPackage & rhs) const
  {
    if (!(UsedArtifactPackage == rhs.UsedArtifactPackage))
      return false;
    if (!(UsedArtifactPackageType == rhs.UsedArtifactPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactPackage &a, TDDIAbstractArtifactPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactPackage& obj);

typedef struct _TDDIArtifactPackage__isset {
  _TDDIArtifactPackage__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArtifactElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArtifactElement :1;
} _TDDIArtifactPackage__isset;

class TDDIArtifactPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactPackage(const TDDIArtifactPackage&);
  TDDIArtifactPackage& operator=(const TDDIArtifactPackage&);
  TDDIArtifactPackage() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArtifactPackage() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ArtifactElement;

  _TDDIArtifactPackage__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  bool operator == (const TDDIArtifactPackage & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArtifactElement == rhs.ArtifactElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactPackage &a, TDDIArtifactPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackage& obj);

typedef struct _TDDIArtifactPackageInterface__isset {
  _TDDIArtifactPackageInterface__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArtifactElement(true), Implements(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArtifactElement :1;
  bool Implements :1;
} _TDDIArtifactPackageInterface__isset;

class TDDIArtifactPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactPackageInterface(const TDDIArtifactPackageInterface&);
  TDDIArtifactPackageInterface& operator=(const TDDIArtifactPackageInterface&);
  TDDIArtifactPackageInterface() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArtifactPackageInterface() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ArtifactElement;
  TDDIAbstractArtifactPackage Implements;

  _TDDIArtifactPackageInterface__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  void __set_Implements(const TDDIAbstractArtifactPackage& val);

  bool operator == (const TDDIArtifactPackageInterface & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArtifactElement == rhs.ArtifactElement))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactPackageInterface &a, TDDIArtifactPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageInterface& obj);

typedef struct _TDDIArtifactPackageBinding__isset {
  _TDDIArtifactPackageBinding__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArtifactElement(true), ParticipantPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArtifactElement :1;
  bool ParticipantPackage :1;
} _TDDIArtifactPackageBinding__isset;

class TDDIArtifactPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactPackageBinding(const TDDIArtifactPackageBinding&);
  TDDIArtifactPackageBinding& operator=(const TDDIArtifactPackageBinding&);
  TDDIArtifactPackageBinding() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {





  }

  virtual ~TDDIArtifactPackageBinding() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ArtifactElement;
  std::vector<TDDIAbstractArtifactPackage>  ParticipantPackage;

  _TDDIArtifactPackageBinding__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  void __set_ParticipantPackage(const std::vector<TDDIAbstractArtifactPackage> & val);

  bool operator == (const TDDIArtifactPackageBinding & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArtifactElement == rhs.ArtifactElement))
      return false;
    if (!(ParticipantPackage == rhs.ParticipantPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactPackageBinding &a, TDDIArtifactPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageBinding& obj);

typedef struct _TDDIArtifactGroup__isset {
  _TDDIArtifactGroup__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArtifactElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArtifactElement :1;
} _TDDIArtifactGroup__isset;

class TDDIArtifactGroup : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactGroup(const TDDIArtifactGroup&);
  TDDIArtifactGroup& operator=(const TDDIArtifactGroup&);
  TDDIArtifactGroup() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArtifactGroup() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ArtifactElement;

  _TDDIArtifactGroup__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  bool operator == (const TDDIArtifactGroup & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArtifactElement == rhs.ArtifactElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactGroup &a, TDDIArtifactGroup &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactGroup& obj);

typedef struct _TDDIProperty__isset {
  _TDDIProperty__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
} _TDDIProperty__isset;

class TDDIProperty : public virtual ::apache::thrift::TBase {
 public:

  TDDIProperty(const TDDIProperty&);
  TDDIProperty& operator=(const TDDIProperty&);
  TDDIProperty() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIProperty() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;

  _TDDIProperty__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  bool operator == (const TDDIProperty & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    return true;
  }
  bool operator != (const TDDIProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIProperty &a, TDDIProperty &b);

std::ostream& operator<<(std::ostream& out, const TDDIProperty& obj);

typedef struct _TDDITechnique__isset {
  _TDDITechnique__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
} _TDDITechnique__isset;

class TDDITechnique : public virtual ::apache::thrift::TBase {
 public:

  TDDITechnique(const TDDITechnique&);
  TDDITechnique& operator=(const TDDITechnique&);
  TDDITechnique() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDITechnique() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;

  _TDDITechnique__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  bool operator == (const TDDITechnique & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    return true;
  }
  bool operator != (const TDDITechnique &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITechnique & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITechnique &a, TDDITechnique &b);

std::ostream& operator<<(std::ostream& out, const TDDITechnique& obj);

typedef struct _TDDIParticipant__isset {
  _TDDIParticipant__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
} _TDDIParticipant__isset;

class TDDIParticipant : public virtual ::apache::thrift::TBase {
 public:

  TDDIParticipant(const TDDIParticipant&);
  TDDIParticipant& operator=(const TDDIParticipant&);
  TDDIParticipant() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIParticipant() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;

  _TDDIParticipant__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  bool operator == (const TDDIParticipant & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    return true;
  }
  bool operator != (const TDDIParticipant &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIParticipant & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIParticipant &a, TDDIParticipant &b);

std::ostream& operator<<(std::ostream& out, const TDDIParticipant& obj);

typedef struct _TDDIActivity__isset {
  _TDDIActivity__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true), StartTime(true), EndTime(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
  bool StartTime :1;
  bool EndTime :1;
} _TDDIActivity__isset;

class TDDIActivity : public virtual ::apache::thrift::TBase {
 public:

  TDDIActivity(const TDDIActivity&);
  TDDIActivity& operator=(const TDDIActivity&);
  TDDIActivity() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), StartTime(""), EndTime("") {




  }

  virtual ~TDDIActivity() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;
  std::string StartTime;
  std::string EndTime;

  _TDDIActivity__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  void __set_StartTime(const std::string& val);

  void __set_EndTime(const std::string& val);

  bool operator == (const TDDIActivity & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    if (!(StartTime == rhs.StartTime))
      return false;
    if (!(EndTime == rhs.EndTime))
      return false;
    return true;
  }
  bool operator != (const TDDIActivity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIActivity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIActivity &a, TDDIActivity &b);

std::ostream& operator<<(std::ostream& out, const TDDIActivity& obj);

typedef struct _TDDIEvent__isset {
  _TDDIEvent__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true), Occurence(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
  bool Occurence :1;
} _TDDIEvent__isset;

class TDDIEvent : public virtual ::apache::thrift::TBase {
 public:

  TDDIEvent(const TDDIEvent&);
  TDDIEvent& operator=(const TDDIEvent&);
  TDDIEvent() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), Occurence("") {




  }

  virtual ~TDDIEvent() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;
  std::string Occurence;

  _TDDIEvent__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  void __set_Occurence(const std::string& val);

  bool operator == (const TDDIEvent & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    if (!(Occurence == rhs.Occurence))
      return false;
    return true;
  }
  bool operator != (const TDDIEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIEvent &a, TDDIEvent &b);

std::ostream& operator<<(std::ostream& out, const TDDIEvent& obj);

typedef struct _TDDIResource__isset {
  _TDDIResource__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
} _TDDIResource__isset;

class TDDIResource : public virtual ::apache::thrift::TBase {
 public:

  TDDIResource(const TDDIResource&);
  TDDIResource& operator=(const TDDIResource&);
  TDDIResource() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIResource() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;

  _TDDIResource__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  bool operator == (const TDDIResource & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    return true;
  }
  bool operator != (const TDDIResource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIResource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIResource &a, TDDIResource &b);

std::ostream& operator<<(std::ostream& out, const TDDIResource& obj);

typedef struct _TDDIArtifact__isset {
  _TDDIArtifact__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true), Version(true), Date(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
  bool Version :1;
  bool Date :1;
} _TDDIArtifact__isset;

class TDDIArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifact(const TDDIArtifact&);
  TDDIArtifact& operator=(const TDDIArtifact&);
  TDDIArtifact() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), Version(""), Date("") {




  }

  virtual ~TDDIArtifact() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;
  std::string Version;
  std::string Date;

  _TDDIArtifact__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  void __set_Version(const std::string& val);

  void __set_Date(const std::string& val);

  bool operator == (const TDDIArtifact & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    if (!(Version == rhs.Version))
      return false;
    if (!(Date == rhs.Date))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifact &a, TDDIArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifact& obj);

typedef struct _TDDIArtifactAssetRelationship__isset {
  _TDDIArtifactAssetRelationship__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true), Source(true), Target(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
  bool Source :1;
  bool Target :1;
} _TDDIArtifactAssetRelationship__isset;

class TDDIArtifactAssetRelationship : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactAssetRelationship(const TDDIArtifactAssetRelationship&);
  TDDIArtifactAssetRelationship& operator=(const TDDIArtifactAssetRelationship&);
  TDDIArtifactAssetRelationship() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {






  }

  virtual ~TDDIArtifactAssetRelationship() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;
  std::vector<TDDIAbstractArtifactAssetRef>  Source;
  std::vector<TDDIAbstractArtifactAssetRef>  Target;

  _TDDIArtifactAssetRelationship__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  void __set_Source(const std::vector<TDDIAbstractArtifactAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArtifactAssetRef> & val);

  bool operator == (const TDDIArtifactAssetRelationship & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactAssetRelationship &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactAssetRelationship & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactAssetRelationship &a, TDDIArtifactAssetRelationship &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetRelationship& obj);

typedef struct _TDDIArtifactAssetUnion__isset {
  _TDDIArtifactAssetUnion__isset() : Property(false), Technique(false), Participant(false), Activity(false), Event(false), Resource(false), Artifact(false), ArtifactAssetRelationship(false) {}
  bool Property :1;
  bool Technique :1;
  bool Participant :1;
  bool Activity :1;
  bool Event :1;
  bool Resource :1;
  bool Artifact :1;
  bool ArtifactAssetRelationship :1;
} _TDDIArtifactAssetUnion__isset;

class TDDIArtifactAssetUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactAssetUnion(const TDDIArtifactAssetUnion&);
  TDDIArtifactAssetUnion& operator=(const TDDIArtifactAssetUnion&);
  TDDIArtifactAssetUnion() {
  }

  virtual ~TDDIArtifactAssetUnion() throw();
  TDDIProperty Property;
  TDDITechnique Technique;
  TDDIParticipant Participant;
  TDDIActivity Activity;
  TDDIEvent Event;
  TDDIResource Resource;
  TDDIArtifact Artifact;
  TDDIArtifactAssetRelationship ArtifactAssetRelationship;

  _TDDIArtifactAssetUnion__isset __isset;

  void __set_Property(const TDDIProperty& val);

  void __set_Technique(const TDDITechnique& val);

  void __set_Participant(const TDDIParticipant& val);

  void __set_Activity(const TDDIActivity& val);

  void __set_Event(const TDDIEvent& val);

  void __set_Resource(const TDDIResource& val);

  void __set_Artifact(const TDDIArtifact& val);

  void __set_ArtifactAssetRelationship(const TDDIArtifactAssetRelationship& val);

  bool operator == (const TDDIArtifactAssetUnion & rhs) const
  {
    if (__isset.Property != rhs.__isset.Property)
      return false;
    else if (__isset.Property && !(Property == rhs.Property))
      return false;
    if (__isset.Technique != rhs.__isset.Technique)
      return false;
    else if (__isset.Technique && !(Technique == rhs.Technique))
      return false;
    if (__isset.Participant != rhs.__isset.Participant)
      return false;
    else if (__isset.Participant && !(Participant == rhs.Participant))
      return false;
    if (__isset.Activity != rhs.__isset.Activity)
      return false;
    else if (__isset.Activity && !(Activity == rhs.Activity))
      return false;
    if (__isset.Event != rhs.__isset.Event)
      return false;
    else if (__isset.Event && !(Event == rhs.Event))
      return false;
    if (__isset.Resource != rhs.__isset.Resource)
      return false;
    else if (__isset.Resource && !(Resource == rhs.Resource))
      return false;
    if (__isset.Artifact != rhs.__isset.Artifact)
      return false;
    else if (__isset.Artifact && !(Artifact == rhs.Artifact))
      return false;
    if (__isset.ArtifactAssetRelationship != rhs.__isset.ArtifactAssetRelationship)
      return false;
    else if (__isset.ArtifactAssetRelationship && !(ArtifactAssetRelationship == rhs.ArtifactAssetRelationship))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactAssetUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactAssetUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactAssetUnion &a, TDDIArtifactAssetUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetUnion& obj);

typedef struct _TDDIAbstractArtifactAsset__isset {
  _TDDIAbstractArtifactAsset__isset() : UsedArtifactAsset(false), UsedArtifactAssetType(false) {}
  bool UsedArtifactAsset :1;
  bool UsedArtifactAssetType :1;
} _TDDIAbstractArtifactAsset__isset;

class TDDIAbstractArtifactAsset : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactAsset(const TDDIAbstractArtifactAsset&);
  TDDIAbstractArtifactAsset& operator=(const TDDIAbstractArtifactAsset&);
  TDDIAbstractArtifactAsset() : UsedArtifactAssetType((TDDIArtifactAssetUnionType)0) {
  }

  virtual ~TDDIAbstractArtifactAsset() throw();
  TDDIArtifactAssetUnion UsedArtifactAsset;
  TDDIArtifactAssetUnionType UsedArtifactAssetType;

  _TDDIAbstractArtifactAsset__isset __isset;

  void __set_UsedArtifactAsset(const TDDIArtifactAssetUnion& val);

  void __set_UsedArtifactAssetType(const TDDIArtifactAssetUnionType val);

  bool operator == (const TDDIAbstractArtifactAsset & rhs) const
  {
    if (!(UsedArtifactAsset == rhs.UsedArtifactAsset))
      return false;
    if (!(UsedArtifactAssetType == rhs.UsedArtifactAssetType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactAsset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactAsset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactAsset &a, TDDIAbstractArtifactAsset &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactAsset& obj);

typedef struct _TDDIAssuranceCasePackageUnion__isset {
  _TDDIAssuranceCasePackageUnion__isset() : AssuranceCasePackage(false), AssuranceCasePackageInterface(false), AssuranceCasePackageBinding(false) {}
  bool AssuranceCasePackage :1;
  bool AssuranceCasePackageInterface :1;
  bool AssuranceCasePackageBinding :1;
} _TDDIAssuranceCasePackageUnion__isset;

class TDDIAssuranceCasePackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackageUnion(const TDDIAssuranceCasePackageUnion&);
  TDDIAssuranceCasePackageUnion& operator=(const TDDIAssuranceCasePackageUnion&);
  TDDIAssuranceCasePackageUnion() : AssuranceCasePackage(), AssuranceCasePackageInterface(), AssuranceCasePackageBinding() {
  }

  virtual ~TDDIAssuranceCasePackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackage> AssuranceCasePackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> AssuranceCasePackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageBinding> AssuranceCasePackageBinding;

  _TDDIAssuranceCasePackageUnion__isset __isset;

  void __set_AssuranceCasePackage(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackage> val);

  void __set_AssuranceCasePackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> val);

  void __set_AssuranceCasePackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageBinding> val);

  bool operator == (const TDDIAssuranceCasePackageUnion & rhs) const
  {
    if (__isset.AssuranceCasePackage != rhs.__isset.AssuranceCasePackage)
      return false;
    else if (__isset.AssuranceCasePackage && !(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (__isset.AssuranceCasePackageInterface != rhs.__isset.AssuranceCasePackageInterface)
      return false;
    else if (__isset.AssuranceCasePackageInterface && !(AssuranceCasePackageInterface == rhs.AssuranceCasePackageInterface))
      return false;
    if (__isset.AssuranceCasePackageBinding != rhs.__isset.AssuranceCasePackageBinding)
      return false;
    else if (__isset.AssuranceCasePackageBinding && !(AssuranceCasePackageBinding == rhs.AssuranceCasePackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackageUnion &a, TDDIAssuranceCasePackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageUnion& obj);

typedef struct _TDDIAbstractAssuranceCasePackage__isset {
  _TDDIAbstractAssuranceCasePackage__isset() : UsedAssuranceCasePackage(false), UsedAssuranceCasePackageType(false) {}
  bool UsedAssuranceCasePackage :1;
  bool UsedAssuranceCasePackageType :1;
} _TDDIAbstractAssuranceCasePackage__isset;

class TDDIAbstractAssuranceCasePackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssuranceCasePackage(const TDDIAbstractAssuranceCasePackage&);
  TDDIAbstractAssuranceCasePackage& operator=(const TDDIAbstractAssuranceCasePackage&);
  TDDIAbstractAssuranceCasePackage() : UsedAssuranceCasePackageType((TDDIAssuranceCasePackageUnionType)0) {
  }

  virtual ~TDDIAbstractAssuranceCasePackage() throw();
  TDDIAssuranceCasePackageUnion UsedAssuranceCasePackage;
  TDDIAssuranceCasePackageUnionType UsedAssuranceCasePackageType;

  _TDDIAbstractAssuranceCasePackage__isset __isset;

  void __set_UsedAssuranceCasePackage(const TDDIAssuranceCasePackageUnion& val);

  void __set_UsedAssuranceCasePackageType(const TDDIAssuranceCasePackageUnionType val);

  bool operator == (const TDDIAbstractAssuranceCasePackage & rhs) const
  {
    if (!(UsedAssuranceCasePackage == rhs.UsedAssuranceCasePackage))
      return false;
    if (!(UsedAssuranceCasePackageType == rhs.UsedAssuranceCasePackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssuranceCasePackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssuranceCasePackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssuranceCasePackage &a, TDDIAbstractAssuranceCasePackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssuranceCasePackage& obj);

typedef struct _TDDIAssuranceCasePackage__isset {
  _TDDIAssuranceCasePackage__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssuranceCasePackage(true), Interface(true), ArtifactPackage(true), ArgumentPackage(true), TerminologyPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssuranceCasePackage :1;
  bool Interface :1;
  bool ArtifactPackage :1;
  bool ArgumentPackage :1;
  bool TerminologyPackage :1;
} _TDDIAssuranceCasePackage__isset;

class TDDIAssuranceCasePackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackage(const TDDIAssuranceCasePackage&);
  TDDIAssuranceCasePackage& operator=(const TDDIAssuranceCasePackage&);
  TDDIAssuranceCasePackage() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {








  }

  virtual ~TDDIAssuranceCasePackage() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackage;
  std::vector<TDDIAssuranceCasePackageInterfaceRef>  Interface;
  std::vector<TDDIAbstractArtifactPackageRef>  ArtifactPackage;
  std::vector<TDDIAbstractArgumentPackageRef>  ArgumentPackage;
  std::vector<TDDIAbstractTerminologyPackageRef>  TerminologyPackage;

  _TDDIAssuranceCasePackage__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  void __set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val);

  void __set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val);

  void __set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val);

  void __set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val);

  bool operator == (const TDDIAssuranceCasePackage & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (!(Interface == rhs.Interface))
      return false;
    if (!(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (!(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (!(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackage &a, TDDIAssuranceCasePackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackage& obj);

typedef struct _TDDIAssuranceCasePackageInterface__isset {
  _TDDIAssuranceCasePackageInterface__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssuranceCasePackage(true), Interface(true), ArtifactPackage(true), ArgumentPackage(true), TerminologyPackage(true), Implements(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssuranceCasePackage :1;
  bool Interface :1;
  bool ArtifactPackage :1;
  bool ArgumentPackage :1;
  bool TerminologyPackage :1;
  bool Implements :1;
} _TDDIAssuranceCasePackageInterface__isset;

class TDDIAssuranceCasePackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackageInterface(const TDDIAssuranceCasePackageInterface&);
  TDDIAssuranceCasePackageInterface& operator=(const TDDIAssuranceCasePackageInterface&);
  TDDIAssuranceCasePackageInterface() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {








  }

  virtual ~TDDIAssuranceCasePackageInterface() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackage;
  std::vector<TDDIAssuranceCasePackageInterfaceRef>  Interface;
  std::vector<TDDIAbstractArtifactPackageRef>  ArtifactPackage;
  std::vector<TDDIAbstractArgumentPackageRef>  ArgumentPackage;
  std::vector<TDDIAbstractTerminologyPackageRef>  TerminologyPackage;
  TDDIAbstractAssuranceCasePackage Implements;

  _TDDIAssuranceCasePackageInterface__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  void __set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val);

  void __set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val);

  void __set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val);

  void __set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val);

  void __set_Implements(const TDDIAbstractAssuranceCasePackage& val);

  bool operator == (const TDDIAssuranceCasePackageInterface & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (!(Interface == rhs.Interface))
      return false;
    if (!(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (!(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (!(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackageInterface &a, TDDIAssuranceCasePackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageInterface& obj);

typedef struct _TDDIAssuranceCasePackageBinding__isset {
  _TDDIAssuranceCasePackageBinding__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssuranceCasePackage(true), Interface(true), ArtifactPackage(true), ArgumentPackage(true), TerminologyPackage(true), ParticipantPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssuranceCasePackage :1;
  bool Interface :1;
  bool ArtifactPackage :1;
  bool ArgumentPackage :1;
  bool TerminologyPackage :1;
  bool ParticipantPackage :1;
} _TDDIAssuranceCasePackageBinding__isset;

class TDDIAssuranceCasePackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackageBinding(const TDDIAssuranceCasePackageBinding&);
  TDDIAssuranceCasePackageBinding& operator=(const TDDIAssuranceCasePackageBinding&);
  TDDIAssuranceCasePackageBinding() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {









  }

  virtual ~TDDIAssuranceCasePackageBinding() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackage;
  std::vector<TDDIAssuranceCasePackageInterfaceRef>  Interface;
  std::vector<TDDIAbstractArtifactPackageRef>  ArtifactPackage;
  std::vector<TDDIAbstractArgumentPackageRef>  ArgumentPackage;
  std::vector<TDDIAbstractTerminologyPackageRef>  TerminologyPackage;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  ParticipantPackage;

  _TDDIAssuranceCasePackageBinding__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  void __set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val);

  void __set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val);

  void __set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val);

  void __set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val);

  void __set_ParticipantPackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  bool operator == (const TDDIAssuranceCasePackageBinding & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (!(Interface == rhs.Interface))
      return false;
    if (!(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (!(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (!(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    if (!(ParticipantPackage == rhs.ParticipantPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackageBinding &a, TDDIAssuranceCasePackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageBinding& obj);

typedef struct _TDDILangString__isset {
  _TDDILangString__isset() : Lang(true), Content(true) {}
  bool Lang :1;
  bool Content :1;
} _TDDILangString__isset;

class TDDILangString : public virtual ::apache::thrift::TBase {
 public:

  TDDILangString(const TDDILangString&);
  TDDILangString& operator=(const TDDILangString&);
  TDDILangString() : Lang(""), Content("") {
  }

  virtual ~TDDILangString() throw();
  std::string Lang;
  std::string Content;

  _TDDILangString__isset __isset;

  void __set_Lang(const std::string& val);

  void __set_Content(const std::string& val);

  bool operator == (const TDDILangString & rhs) const
  {
    if (!(Lang == rhs.Lang))
      return false;
    if (!(Content == rhs.Content))
      return false;
    return true;
  }
  bool operator != (const TDDILangString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILangString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILangString &a, TDDILangString &b);

std::ostream& operator<<(std::ostream& out, const TDDILangString& obj);

typedef struct _TDDIExpressionLangString__isset {
  _TDDIExpressionLangString__isset() : Lang(true), Content(true), Expression(false) {}
  bool Lang :1;
  bool Content :1;
  bool Expression :1;
} _TDDIExpressionLangString__isset;

class TDDIExpressionLangString : public virtual ::apache::thrift::TBase {
 public:

  TDDIExpressionLangString(const TDDIExpressionLangString&);
  TDDIExpressionLangString& operator=(const TDDIExpressionLangString&);
  TDDIExpressionLangString() : Lang(""), Content(""), Expression() {
  }

  virtual ~TDDIExpressionLangString() throw();
  std::string Lang;
  std::string Content;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> Expression;

  _TDDIExpressionLangString__isset __isset;

  void __set_Lang(const std::string& val);

  void __set_Content(const std::string& val);

  void __set_Expression(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> val);

  bool operator == (const TDDIExpressionLangString & rhs) const
  {
    if (!(Lang == rhs.Lang))
      return false;
    if (!(Content == rhs.Content))
      return false;
    if (!(Expression == rhs.Expression))
      return false;
    return true;
  }
  bool operator != (const TDDIExpressionLangString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIExpressionLangString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIExpressionLangString &a, TDDIExpressionLangString &b);

std::ostream& operator<<(std::ostream& out, const TDDIExpressionLangString& obj);

typedef struct _TDDILangStringUnion__isset {
  _TDDILangStringUnion__isset() : LangString(false), ExpressionLangString(false) {}
  bool LangString :1;
  bool ExpressionLangString :1;
} _TDDILangStringUnion__isset;

class TDDILangStringUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDILangStringUnion(const TDDILangStringUnion&);
  TDDILangStringUnion& operator=(const TDDILangStringUnion&);
  TDDILangStringUnion() {
  }

  virtual ~TDDILangStringUnion() throw();
  TDDILangString LangString;
  TDDIExpressionLangString ExpressionLangString;

  _TDDILangStringUnion__isset __isset;

  void __set_LangString(const TDDILangString& val);

  void __set_ExpressionLangString(const TDDIExpressionLangString& val);

  bool operator == (const TDDILangStringUnion & rhs) const
  {
    if (__isset.LangString != rhs.__isset.LangString)
      return false;
    else if (__isset.LangString && !(LangString == rhs.LangString))
      return false;
    if (__isset.ExpressionLangString != rhs.__isset.ExpressionLangString)
      return false;
    else if (__isset.ExpressionLangString && !(ExpressionLangString == rhs.ExpressionLangString))
      return false;
    return true;
  }
  bool operator != (const TDDILangStringUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILangStringUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILangStringUnion &a, TDDILangStringUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDILangStringUnion& obj);

typedef struct _TDDIAbstractLangString__isset {
  _TDDIAbstractLangString__isset() : UsedLangString(false), UsedLangStringType(false) {}
  bool UsedLangString :1;
  bool UsedLangStringType :1;
} _TDDIAbstractLangString__isset;

class TDDIAbstractLangString : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractLangString(const TDDIAbstractLangString&);
  TDDIAbstractLangString& operator=(const TDDIAbstractLangString&);
  TDDIAbstractLangString() : UsedLangStringType((TDDILangStringUnionType)0) {
  }

  virtual ~TDDIAbstractLangString() throw();
  TDDILangStringUnion UsedLangString;
  TDDILangStringUnionType UsedLangStringType;

  _TDDIAbstractLangString__isset __isset;

  void __set_UsedLangString(const TDDILangStringUnion& val);

  void __set_UsedLangStringType(const TDDILangStringUnionType val);

  bool operator == (const TDDIAbstractLangString & rhs) const
  {
    if (!(UsedLangString == rhs.UsedLangString))
      return false;
    if (!(UsedLangStringType == rhs.UsedLangStringType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractLangString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractLangString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractLangString &a, TDDIAbstractLangString &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractLangString& obj);

typedef struct _TDDIMultiLangString__isset {
  _TDDIMultiLangString__isset() : Values(true) {}
  bool Values :1;
} _TDDIMultiLangString__isset;

class TDDIMultiLangString : public virtual ::apache::thrift::TBase {
 public:

  TDDIMultiLangString(const TDDIMultiLangString&);
  TDDIMultiLangString& operator=(const TDDIMultiLangString&);
  TDDIMultiLangString() {

  }

  virtual ~TDDIMultiLangString() throw();
  std::vector<TDDIAbstractLangString>  Values;

  _TDDIMultiLangString__isset __isset;

  void __set_Values(const std::vector<TDDIAbstractLangString> & val);

  bool operator == (const TDDIMultiLangString & rhs) const
  {
    if (!(Values == rhs.Values))
      return false;
    return true;
  }
  bool operator != (const TDDIMultiLangString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMultiLangString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMultiLangString &a, TDDIMultiLangString &b);

std::ostream& operator<<(std::ostream& out, const TDDIMultiLangString& obj);

typedef struct _TDDIDescription__isset {
  _TDDIDescription__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Content(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Content :1;
} _TDDIDescription__isset;

class TDDIDescription : public virtual ::apache::thrift::TBase {
 public:

  TDDIDescription(const TDDIDescription&);
  TDDIDescription& operator=(const TDDIDescription&);
  TDDIDescription() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm() {
  }

  virtual ~TDDIDescription() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  TDDIMultiLangString Content;

  _TDDIDescription__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Content(const TDDIMultiLangString& val);

  bool operator == (const TDDIDescription & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Content == rhs.Content))
      return false;
    return true;
  }
  bool operator != (const TDDIDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDescription & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDescription &a, TDDIDescription &b);

std::ostream& operator<<(std::ostream& out, const TDDIDescription& obj);

typedef struct _TDDIImplementationConstraint__isset {
  _TDDIImplementationConstraint__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Content(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Content :1;
} _TDDIImplementationConstraint__isset;

class TDDIImplementationConstraint : public virtual ::apache::thrift::TBase {
 public:

  TDDIImplementationConstraint(const TDDIImplementationConstraint&);
  TDDIImplementationConstraint& operator=(const TDDIImplementationConstraint&);
  TDDIImplementationConstraint() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm() {
  }

  virtual ~TDDIImplementationConstraint() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  TDDIMultiLangString Content;

  _TDDIImplementationConstraint__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Content(const TDDIMultiLangString& val);

  bool operator == (const TDDIImplementationConstraint & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Content == rhs.Content))
      return false;
    return true;
  }
  bool operator != (const TDDIImplementationConstraint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIImplementationConstraint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIImplementationConstraint &a, TDDIImplementationConstraint &b);

std::ostream& operator<<(std::ostream& out, const TDDIImplementationConstraint& obj);

typedef struct _TDDINote__isset {
  _TDDINote__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Content(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Content :1;
} _TDDINote__isset;

class TDDINote : public virtual ::apache::thrift::TBase {
 public:

  TDDINote(const TDDINote&);
  TDDINote& operator=(const TDDINote&);
  TDDINote() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm() {
  }

  virtual ~TDDINote() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  TDDIMultiLangString Content;

  _TDDINote__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Content(const TDDIMultiLangString& val);

  bool operator == (const TDDINote & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Content == rhs.Content))
      return false;
    return true;
  }
  bool operator != (const TDDINote &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDINote & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDINote &a, TDDINote &b);

std::ostream& operator<<(std::ostream& out, const TDDINote& obj);

typedef struct _TDDITaggedValue__isset {
  _TDDITaggedValue__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Content(false), Key(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Content :1;
  bool Key :1;
} _TDDITaggedValue__isset;

class TDDITaggedValue : public virtual ::apache::thrift::TBase {
 public:

  TDDITaggedValue(const TDDITaggedValue&);
  TDDITaggedValue& operator=(const TDDITaggedValue&);
  TDDITaggedValue() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm() {
  }

  virtual ~TDDITaggedValue() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  TDDIMultiLangString Content;
  TDDIMultiLangString Key;

  _TDDITaggedValue__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Content(const TDDIMultiLangString& val);

  void __set_Key(const TDDIMultiLangString& val);

  bool operator == (const TDDITaggedValue & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Content == rhs.Content))
      return false;
    if (!(Key == rhs.Key))
      return false;
    return true;
  }
  bool operator != (const TDDITaggedValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITaggedValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITaggedValue &a, TDDITaggedValue &b);

std::ostream& operator<<(std::ostream& out, const TDDITaggedValue& obj);

typedef struct _TDDIUtilityElementUnion__isset {
  _TDDIUtilityElementUnion__isset() : Description(false), ImplementationConstraint(false), Note(false), TaggedValue(false) {}
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
} _TDDIUtilityElementUnion__isset;

class TDDIUtilityElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIUtilityElementUnion(const TDDIUtilityElementUnion&);
  TDDIUtilityElementUnion& operator=(const TDDIUtilityElementUnion&);
  TDDIUtilityElementUnion() {
  }

  virtual ~TDDIUtilityElementUnion() throw();
  TDDIDescription Description;
  TDDIImplementationConstraint ImplementationConstraint;
  TDDINote Note;
  TDDITaggedValue TaggedValue;

  _TDDIUtilityElementUnion__isset __isset;

  void __set_Description(const TDDIDescription& val);

  void __set_ImplementationConstraint(const TDDIImplementationConstraint& val);

  void __set_Note(const TDDINote& val);

  void __set_TaggedValue(const TDDITaggedValue& val);

  bool operator == (const TDDIUtilityElementUnion & rhs) const
  {
    if (__isset.Description != rhs.__isset.Description)
      return false;
    else if (__isset.Description && !(Description == rhs.Description))
      return false;
    if (__isset.ImplementationConstraint != rhs.__isset.ImplementationConstraint)
      return false;
    else if (__isset.ImplementationConstraint && !(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (__isset.Note != rhs.__isset.Note)
      return false;
    else if (__isset.Note && !(Note == rhs.Note))
      return false;
    if (__isset.TaggedValue != rhs.__isset.TaggedValue)
      return false;
    else if (__isset.TaggedValue && !(TaggedValue == rhs.TaggedValue))
      return false;
    return true;
  }
  bool operator != (const TDDIUtilityElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIUtilityElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIUtilityElementUnion &a, TDDIUtilityElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIUtilityElementUnion& obj);

typedef struct _TDDIAbstractUtilityElement__isset {
  _TDDIAbstractUtilityElement__isset() : UsedUtilityElement(false), UsedUtilityElementType(false) {}
  bool UsedUtilityElement :1;
  bool UsedUtilityElementType :1;
} _TDDIAbstractUtilityElement__isset;

class TDDIAbstractUtilityElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractUtilityElement(const TDDIAbstractUtilityElement&);
  TDDIAbstractUtilityElement& operator=(const TDDIAbstractUtilityElement&);
  TDDIAbstractUtilityElement() : UsedUtilityElementType((TDDIUtilityElementUnionType)0) {
  }

  virtual ~TDDIAbstractUtilityElement() throw();
  TDDIUtilityElementUnion UsedUtilityElement;
  TDDIUtilityElementUnionType UsedUtilityElementType;

  _TDDIAbstractUtilityElement__isset __isset;

  void __set_UsedUtilityElement(const TDDIUtilityElementUnion& val);

  void __set_UsedUtilityElementType(const TDDIUtilityElementUnionType val);

  bool operator == (const TDDIAbstractUtilityElement & rhs) const
  {
    if (!(UsedUtilityElement == rhs.UsedUtilityElement))
      return false;
    if (!(UsedUtilityElementType == rhs.UsedUtilityElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractUtilityElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractUtilityElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractUtilityElement &a, TDDIAbstractUtilityElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractUtilityElement& obj);

typedef struct _TDDIArtifactElementUnion__isset {
  _TDDIArtifactElementUnion__isset() : TerminologyElement(false), AssuranceCasePackage(false), ArtifactPackage(false), ArtifactGroup(false), ArtifactAsset(false), ArgumentationElement(false) {}
  bool TerminologyElement :1;
  bool AssuranceCasePackage :1;
  bool ArtifactPackage :1;
  bool ArtifactGroup :1;
  bool ArtifactAsset :1;
  bool ArgumentationElement :1;
} _TDDIArtifactElementUnion__isset;

class TDDIArtifactElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactElementUnion(const TDDIArtifactElementUnion&);
  TDDIArtifactElementUnion& operator=(const TDDIArtifactElementUnion&);
  TDDIArtifactElementUnion() : TerminologyElement(), AssuranceCasePackage(), ArtifactPackage(), ArtifactGroup(), ArtifactAsset(), ArgumentationElement() {
  }

  virtual ~TDDIArtifactElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyElement> TerminologyElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> AssuranceCasePackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> ArtifactPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactGroup> ArtifactGroup;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> ArtifactAsset;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> ArgumentationElement;

  _TDDIArtifactElementUnion__isset __isset;

  void __set_TerminologyElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyElement> val);

  void __set_AssuranceCasePackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> val);

  void __set_ArtifactPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> val);

  void __set_ArtifactGroup(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactGroup> val);

  void __set_ArtifactAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> val);

  void __set_ArgumentationElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> val);

  bool operator == (const TDDIArtifactElementUnion & rhs) const
  {
    if (__isset.TerminologyElement != rhs.__isset.TerminologyElement)
      return false;
    else if (__isset.TerminologyElement && !(TerminologyElement == rhs.TerminologyElement))
      return false;
    if (__isset.AssuranceCasePackage != rhs.__isset.AssuranceCasePackage)
      return false;
    else if (__isset.AssuranceCasePackage && !(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (__isset.ArtifactPackage != rhs.__isset.ArtifactPackage)
      return false;
    else if (__isset.ArtifactPackage && !(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (__isset.ArtifactGroup != rhs.__isset.ArtifactGroup)
      return false;
    else if (__isset.ArtifactGroup && !(ArtifactGroup == rhs.ArtifactGroup))
      return false;
    if (__isset.ArtifactAsset != rhs.__isset.ArtifactAsset)
      return false;
    else if (__isset.ArtifactAsset && !(ArtifactAsset == rhs.ArtifactAsset))
      return false;
    if (__isset.ArgumentationElement != rhs.__isset.ArgumentationElement)
      return false;
    else if (__isset.ArgumentationElement && !(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactElementUnion &a, TDDIArtifactElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactElementUnion& obj);

typedef struct _TDDIAbstractArtifactElement__isset {
  _TDDIAbstractArtifactElement__isset() : UsedArtifactElement(false), UsedArtifactElementType(false) {}
  bool UsedArtifactElement :1;
  bool UsedArtifactElementType :1;
} _TDDIAbstractArtifactElement__isset;

class TDDIAbstractArtifactElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactElement(const TDDIAbstractArtifactElement&);
  TDDIAbstractArtifactElement& operator=(const TDDIAbstractArtifactElement&);
  TDDIAbstractArtifactElement() : UsedArtifactElementType((TDDIArtifactElementUnionType)0) {
  }

  virtual ~TDDIAbstractArtifactElement() throw();
  TDDIArtifactElementUnion UsedArtifactElement;
  TDDIArtifactElementUnionType UsedArtifactElementType;

  _TDDIAbstractArtifactElement__isset __isset;

  void __set_UsedArtifactElement(const TDDIArtifactElementUnion& val);

  void __set_UsedArtifactElementType(const TDDIArtifactElementUnionType val);

  bool operator == (const TDDIAbstractArtifactElement & rhs) const
  {
    if (!(UsedArtifactElement == rhs.UsedArtifactElement))
      return false;
    if (!(UsedArtifactElementType == rhs.UsedArtifactElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactElement &a, TDDIAbstractArtifactElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactElement& obj);

typedef struct _TDDIModelElementUnion__isset {
  _TDDIModelElementUnion__isset() : ArtifactElement(false) {}
  bool ArtifactElement :1;
} _TDDIModelElementUnion__isset;

class TDDIModelElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIModelElementUnion(const TDDIModelElementUnion&);
  TDDIModelElementUnion& operator=(const TDDIModelElementUnion&);
  TDDIModelElementUnion() {
  }

  virtual ~TDDIModelElementUnion() throw();
  TDDIAbstractArtifactElement ArtifactElement;

  _TDDIModelElementUnion__isset __isset;

  void __set_ArtifactElement(const TDDIAbstractArtifactElement& val);

  bool operator == (const TDDIModelElementUnion & rhs) const
  {
    if (__isset.ArtifactElement != rhs.__isset.ArtifactElement)
      return false;
    else if (__isset.ArtifactElement && !(ArtifactElement == rhs.ArtifactElement))
      return false;
    return true;
  }
  bool operator != (const TDDIModelElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIModelElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIModelElementUnion &a, TDDIModelElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIModelElementUnion& obj);

typedef struct _TDDIAbstractModelElement__isset {
  _TDDIAbstractModelElement__isset() : UsedModelElement(false), UsedModelElementType(false) {}
  bool UsedModelElement :1;
  bool UsedModelElementType :1;
} _TDDIAbstractModelElement__isset;

class TDDIAbstractModelElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractModelElement(const TDDIAbstractModelElement&);
  TDDIAbstractModelElement& operator=(const TDDIAbstractModelElement&);
  TDDIAbstractModelElement() : UsedModelElementType((TDDIModelElementUnionType)0) {
  }

  virtual ~TDDIAbstractModelElement() throw();
  TDDIModelElementUnion UsedModelElement;
  TDDIModelElementUnionType UsedModelElementType;

  _TDDIAbstractModelElement__isset __isset;

  void __set_UsedModelElement(const TDDIModelElementUnion& val);

  void __set_UsedModelElementType(const TDDIModelElementUnionType val);

  bool operator == (const TDDIAbstractModelElement & rhs) const
  {
    if (!(UsedModelElement == rhs.UsedModelElement))
      return false;
    if (!(UsedModelElementType == rhs.UsedModelElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractModelElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractModelElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractModelElement &a, TDDIAbstractModelElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractModelElement& obj);

typedef struct _TDDISACMElementUnion__isset {
  _TDDISACMElementUnion__isset() : UtilityElement(false), ModelElement(false) {}
  bool UtilityElement :1;
  bool ModelElement :1;
} _TDDISACMElementUnion__isset;

class TDDISACMElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDISACMElementUnion(const TDDISACMElementUnion&);
  TDDISACMElementUnion& operator=(const TDDISACMElementUnion&);
  TDDISACMElementUnion() {
  }

  virtual ~TDDISACMElementUnion() throw();
  TDDIAbstractUtilityElement UtilityElement;
  TDDIAbstractModelElement ModelElement;

  _TDDISACMElementUnion__isset __isset;

  void __set_UtilityElement(const TDDIAbstractUtilityElement& val);

  void __set_ModelElement(const TDDIAbstractModelElement& val);

  bool operator == (const TDDISACMElementUnion & rhs) const
  {
    if (__isset.UtilityElement != rhs.__isset.UtilityElement)
      return false;
    else if (__isset.UtilityElement && !(UtilityElement == rhs.UtilityElement))
      return false;
    if (__isset.ModelElement != rhs.__isset.ModelElement)
      return false;
    else if (__isset.ModelElement && !(ModelElement == rhs.ModelElement))
      return false;
    return true;
  }
  bool operator != (const TDDISACMElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISACMElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISACMElementUnion &a, TDDISACMElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDISACMElementUnion& obj);

typedef struct _TDDIAbstractSACMElement__isset {
  _TDDIAbstractSACMElement__isset() : UsedSACMElement(false), UsedSACMElementType(false) {}
  bool UsedSACMElement :1;
  bool UsedSACMElementType :1;
} _TDDIAbstractSACMElement__isset;

class TDDIAbstractSACMElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractSACMElement(const TDDIAbstractSACMElement&);
  TDDIAbstractSACMElement& operator=(const TDDIAbstractSACMElement&);
  TDDIAbstractSACMElement() : UsedSACMElementType((TDDISACMElementUnionType)0) {
  }

  virtual ~TDDIAbstractSACMElement() throw();
  TDDISACMElementUnion UsedSACMElement;
  TDDISACMElementUnionType UsedSACMElementType;

  _TDDIAbstractSACMElement__isset __isset;

  void __set_UsedSACMElement(const TDDISACMElementUnion& val);

  void __set_UsedSACMElementType(const TDDISACMElementUnionType val);

  bool operator == (const TDDIAbstractSACMElement & rhs) const
  {
    if (!(UsedSACMElement == rhs.UsedSACMElement))
      return false;
    if (!(UsedSACMElementType == rhs.UsedSACMElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractSACMElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractSACMElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractSACMElement &a, TDDIAbstractSACMElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractSACMElement& obj);

typedef struct _TDDIElementUnion__isset {
  _TDDIElementUnion__isset() : LangString(false), MultiLangString(false), SACMElement(false) {}
  bool LangString :1;
  bool MultiLangString :1;
  bool SACMElement :1;
} _TDDIElementUnion__isset;

class TDDIElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIElementUnion(const TDDIElementUnion&);
  TDDIElementUnion& operator=(const TDDIElementUnion&);
  TDDIElementUnion() {
  }

  virtual ~TDDIElementUnion() throw();
  TDDIAbstractLangString LangString;
  TDDIMultiLangString MultiLangString;
  TDDIAbstractSACMElement SACMElement;

  _TDDIElementUnion__isset __isset;

  void __set_LangString(const TDDIAbstractLangString& val);

  void __set_MultiLangString(const TDDIMultiLangString& val);

  void __set_SACMElement(const TDDIAbstractSACMElement& val);

  bool operator == (const TDDIElementUnion & rhs) const
  {
    if (__isset.LangString != rhs.__isset.LangString)
      return false;
    else if (__isset.LangString && !(LangString == rhs.LangString))
      return false;
    if (__isset.MultiLangString != rhs.__isset.MultiLangString)
      return false;
    else if (__isset.MultiLangString && !(MultiLangString == rhs.MultiLangString))
      return false;
    if (__isset.SACMElement != rhs.__isset.SACMElement)
      return false;
    else if (__isset.SACMElement && !(SACMElement == rhs.SACMElement))
      return false;
    return true;
  }
  bool operator != (const TDDIElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIElementUnion &a, TDDIElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIElementUnion& obj);

typedef struct _TDDIAbstractElement__isset {
  _TDDIAbstractElement__isset() : UsedElement(false), UsedElementType(false) {}
  bool UsedElement :1;
  bool UsedElementType :1;
} _TDDIAbstractElement__isset;

class TDDIAbstractElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractElement(const TDDIAbstractElement&);
  TDDIAbstractElement& operator=(const TDDIAbstractElement&);
  TDDIAbstractElement() : UsedElementType((TDDIElementUnionType)0) {
  }

  virtual ~TDDIAbstractElement() throw();
  TDDIElementUnion UsedElement;
  TDDIElementUnionType UsedElementType;

  _TDDIAbstractElement__isset __isset;

  void __set_UsedElement(const TDDIElementUnion& val);

  void __set_UsedElementType(const TDDIElementUnionType val);

  bool operator == (const TDDIAbstractElement & rhs) const
  {
    if (!(UsedElement == rhs.UsedElement))
      return false;
    if (!(UsedElementType == rhs.UsedElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractElement &a, TDDIAbstractElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractElement& obj);

typedef struct _TDDITerminologyElementUnion__isset {
  _TDDITerminologyElementUnion__isset() : TerminologyGroup(false), TerminologyPackage(false), TerminologyAsset(false) {}
  bool TerminologyGroup :1;
  bool TerminologyPackage :1;
  bool TerminologyAsset :1;
} _TDDITerminologyElementUnion__isset;

class TDDITerminologyElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyElementUnion(const TDDITerminologyElementUnion&);
  TDDITerminologyElementUnion& operator=(const TDDITerminologyElementUnion&);
  TDDITerminologyElementUnion() : TerminologyGroup(), TerminologyPackage(), TerminologyAsset() {
  }

  virtual ~TDDITerminologyElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyGroup> TerminologyGroup;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> TerminologyPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyAsset> TerminologyAsset;

  _TDDITerminologyElementUnion__isset __isset;

  void __set_TerminologyGroup(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyGroup> val);

  void __set_TerminologyPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> val);

  void __set_TerminologyAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyAsset> val);

  bool operator == (const TDDITerminologyElementUnion & rhs) const
  {
    if (__isset.TerminologyGroup != rhs.__isset.TerminologyGroup)
      return false;
    else if (__isset.TerminologyGroup && !(TerminologyGroup == rhs.TerminologyGroup))
      return false;
    if (__isset.TerminologyPackage != rhs.__isset.TerminologyPackage)
      return false;
    else if (__isset.TerminologyPackage && !(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    if (__isset.TerminologyAsset != rhs.__isset.TerminologyAsset)
      return false;
    else if (__isset.TerminologyAsset && !(TerminologyAsset == rhs.TerminologyAsset))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyElementUnion &a, TDDITerminologyElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyElementUnion& obj);

typedef struct _TDDIAbstractTerminologyElement__isset {
  _TDDIAbstractTerminologyElement__isset() : UsedTerminologyElement(false), UsedTerminologyElementType(false) {}
  bool UsedTerminologyElement :1;
  bool UsedTerminologyElementType :1;
} _TDDIAbstractTerminologyElement__isset;

class TDDIAbstractTerminologyElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractTerminologyElement(const TDDIAbstractTerminologyElement&);
  TDDIAbstractTerminologyElement& operator=(const TDDIAbstractTerminologyElement&);
  TDDIAbstractTerminologyElement() : UsedTerminologyElementType((TDDITerminologyElementUnionType)0) {
  }

  virtual ~TDDIAbstractTerminologyElement() throw();
  TDDITerminologyElementUnion UsedTerminologyElement;
  TDDITerminologyElementUnionType UsedTerminologyElementType;

  _TDDIAbstractTerminologyElement__isset __isset;

  void __set_UsedTerminologyElement(const TDDITerminologyElementUnion& val);

  void __set_UsedTerminologyElementType(const TDDITerminologyElementUnionType val);

  bool operator == (const TDDIAbstractTerminologyElement & rhs) const
  {
    if (!(UsedTerminologyElement == rhs.UsedTerminologyElement))
      return false;
    if (!(UsedTerminologyElementType == rhs.UsedTerminologyElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractTerminologyElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractTerminologyElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractTerminologyElement &a, TDDIAbstractTerminologyElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyElement& obj);

typedef struct _TDDITerminologyGroup__isset {
  _TDDITerminologyGroup__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), TerminologyElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool TerminologyElement :1;
} _TDDITerminologyGroup__isset;

class TDDITerminologyGroup : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyGroup(const TDDITerminologyGroup&);
  TDDITerminologyGroup& operator=(const TDDITerminologyGroup&);
  TDDITerminologyGroup() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDITerminologyGroup() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractTerminologyElement>  TerminologyElement;

  _TDDITerminologyGroup__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val);

  bool operator == (const TDDITerminologyGroup & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(TerminologyElement == rhs.TerminologyElement))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyGroup &a, TDDITerminologyGroup &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyGroup& obj);

typedef struct _TDDITerminologyPackageUnion__isset {
  _TDDITerminologyPackageUnion__isset() : TerminologyPackage(false), TerminologyPackageBinding(false), TerminologyPackageInterface(false) {}
  bool TerminologyPackage :1;
  bool TerminologyPackageBinding :1;
  bool TerminologyPackageInterface :1;
} _TDDITerminologyPackageUnion__isset;

class TDDITerminologyPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyPackageUnion(const TDDITerminologyPackageUnion&);
  TDDITerminologyPackageUnion& operator=(const TDDITerminologyPackageUnion&);
  TDDITerminologyPackageUnion() : TerminologyPackage(), TerminologyPackageBinding(), TerminologyPackageInterface() {
  }

  virtual ~TDDITerminologyPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackage> TerminologyPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageBinding> TerminologyPackageBinding;
  ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageInterface> TerminologyPackageInterface;

  _TDDITerminologyPackageUnion__isset __isset;

  void __set_TerminologyPackage(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackage> val);

  void __set_TerminologyPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageBinding> val);

  void __set_TerminologyPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageInterface> val);

  bool operator == (const TDDITerminologyPackageUnion & rhs) const
  {
    if (__isset.TerminologyPackage != rhs.__isset.TerminologyPackage)
      return false;
    else if (__isset.TerminologyPackage && !(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    if (__isset.TerminologyPackageBinding != rhs.__isset.TerminologyPackageBinding)
      return false;
    else if (__isset.TerminologyPackageBinding && !(TerminologyPackageBinding == rhs.TerminologyPackageBinding))
      return false;
    if (__isset.TerminologyPackageInterface != rhs.__isset.TerminologyPackageInterface)
      return false;
    else if (__isset.TerminologyPackageInterface && !(TerminologyPackageInterface == rhs.TerminologyPackageInterface))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyPackageUnion &a, TDDITerminologyPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageUnion& obj);

typedef struct _TDDIAbstractTerminologyPackage__isset {
  _TDDIAbstractTerminologyPackage__isset() : UsedTerminologyPackage(false), UsedTerminologyPackageType(false) {}
  bool UsedTerminologyPackage :1;
  bool UsedTerminologyPackageType :1;
} _TDDIAbstractTerminologyPackage__isset;

class TDDIAbstractTerminologyPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractTerminologyPackage(const TDDIAbstractTerminologyPackage&);
  TDDIAbstractTerminologyPackage& operator=(const TDDIAbstractTerminologyPackage&);
  TDDIAbstractTerminologyPackage() : UsedTerminologyPackageType((TDDITerminologyPackageUnionType)0) {
  }

  virtual ~TDDIAbstractTerminologyPackage() throw();
  TDDITerminologyPackageUnion UsedTerminologyPackage;
  TDDITerminologyPackageUnionType UsedTerminologyPackageType;

  _TDDIAbstractTerminologyPackage__isset __isset;

  void __set_UsedTerminologyPackage(const TDDITerminologyPackageUnion& val);

  void __set_UsedTerminologyPackageType(const TDDITerminologyPackageUnionType val);

  bool operator == (const TDDIAbstractTerminologyPackage & rhs) const
  {
    if (!(UsedTerminologyPackage == rhs.UsedTerminologyPackage))
      return false;
    if (!(UsedTerminologyPackageType == rhs.UsedTerminologyPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractTerminologyPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractTerminologyPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractTerminologyPackage &a, TDDIAbstractTerminologyPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyPackage& obj);

typedef struct _TDDITerminologyPackage__isset {
  _TDDITerminologyPackage__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), TerminologyElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool TerminologyElement :1;
} _TDDITerminologyPackage__isset;

class TDDITerminologyPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyPackage(const TDDITerminologyPackage&);
  TDDITerminologyPackage& operator=(const TDDITerminologyPackage&);
  TDDITerminologyPackage() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDITerminologyPackage() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractTerminologyElement>  TerminologyElement;

  _TDDITerminologyPackage__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val);

  bool operator == (const TDDITerminologyPackage & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(TerminologyElement == rhs.TerminologyElement))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyPackage &a, TDDITerminologyPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackage& obj);

typedef struct _TDDITerminologyPackageBinding__isset {
  _TDDITerminologyPackageBinding__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), TerminologyElement(true), ParticipantPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool TerminologyElement :1;
  bool ParticipantPackage :1;
} _TDDITerminologyPackageBinding__isset;

class TDDITerminologyPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyPackageBinding(const TDDITerminologyPackageBinding&);
  TDDITerminologyPackageBinding& operator=(const TDDITerminologyPackageBinding&);
  TDDITerminologyPackageBinding() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {





  }

  virtual ~TDDITerminologyPackageBinding() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractTerminologyElement>  TerminologyElement;
  std::vector<TDDIAbstractTerminologyPackage>  ParticipantPackage;

  _TDDITerminologyPackageBinding__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val);

  void __set_ParticipantPackage(const std::vector<TDDIAbstractTerminologyPackage> & val);

  bool operator == (const TDDITerminologyPackageBinding & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(TerminologyElement == rhs.TerminologyElement))
      return false;
    if (!(ParticipantPackage == rhs.ParticipantPackage))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyPackageBinding &a, TDDITerminologyPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageBinding& obj);

typedef struct _TDDITerminologyPackageInterface__isset {
  _TDDITerminologyPackageInterface__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), TerminologyElement(true), Implements(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool TerminologyElement :1;
  bool Implements :1;
} _TDDITerminologyPackageInterface__isset;

class TDDITerminologyPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyPackageInterface(const TDDITerminologyPackageInterface&);
  TDDITerminologyPackageInterface& operator=(const TDDITerminologyPackageInterface&);
  TDDITerminologyPackageInterface() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDITerminologyPackageInterface() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractTerminologyElement>  TerminologyElement;
  TDDIAbstractTerminologyPackage Implements;

  _TDDITerminologyPackageInterface__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val);

  void __set_Implements(const TDDIAbstractTerminologyPackage& val);

  bool operator == (const TDDITerminologyPackageInterface & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(TerminologyElement == rhs.TerminologyElement))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyPackageInterface &a, TDDITerminologyPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageInterface& obj);

typedef struct _TDDICategory__isset {
  _TDDICategory__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
} _TDDICategory__isset;

class TDDICategory : public virtual ::apache::thrift::TBase {
 public:

  TDDICategory(const TDDICategory&);
  TDDICategory& operator=(const TDDICategory&);
  TDDICategory() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {



  }

  virtual ~TDDICategory() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;

  _TDDICategory__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  bool operator == (const TDDICategory & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    return true;
  }
  bool operator != (const TDDICategory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDICategory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDICategory &a, TDDICategory &b);

std::ostream& operator<<(std::ostream& out, const TDDICategory& obj);

typedef struct _TDDIExpression__isset {
  _TDDIExpression__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Value(true), Category(false), Element(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Value :1;
  bool Category :1;
  bool Element :1;
} _TDDIExpression__isset;

class TDDIExpression : public virtual ::apache::thrift::TBase {
 public:

  TDDIExpression(const TDDIExpression&);
  TDDIExpression& operator=(const TDDIExpression&);
  TDDIExpression() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), Value("") {




  }

  virtual ~TDDIExpression() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::string Value;
  TDDICategory Category;
  std::vector<TDDIAbstractExpressionElementRef>  Element;

  _TDDIExpression__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Value(const std::string& val);

  void __set_Category(const TDDICategory& val);

  void __set_Element(const std::vector<TDDIAbstractExpressionElementRef> & val);

  bool operator == (const TDDIExpression & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(Element == rhs.Element))
      return false;
    return true;
  }
  bool operator != (const TDDIExpression &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIExpression & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIExpression &a, TDDIExpression &b);

std::ostream& operator<<(std::ostream& out, const TDDIExpression& obj);

typedef struct _TDDITerm__isset {
  _TDDITerm__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Value(true), Category(false), ExternalReference(true), Origin(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Value :1;
  bool Category :1;
  bool ExternalReference :1;
  bool Origin :1;
} _TDDITerm__isset;

class TDDITerm : public virtual ::apache::thrift::TBase {
 public:

  TDDITerm(const TDDITerm&);
  TDDITerm& operator=(const TDDITerm&);
  TDDITerm() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), Value(""), ExternalReference(""), Origin() {



  }

  virtual ~TDDITerm() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::string Value;
  TDDICategory Category;
  std::string ExternalReference;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> Origin;

  _TDDITerm__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Value(const std::string& val);

  void __set_Category(const TDDICategory& val);

  void __set_ExternalReference(const std::string& val);

  void __set_Origin(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> val);

  bool operator == (const TDDITerm & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(ExternalReference == rhs.ExternalReference))
      return false;
    if (!(Origin == rhs.Origin))
      return false;
    return true;
  }
  bool operator != (const TDDITerm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerm &a, TDDITerm &b);

std::ostream& operator<<(std::ostream& out, const TDDITerm& obj);

typedef struct _TDDIExpressionElementUnion__isset {
  _TDDIExpressionElementUnion__isset() : Expression(false), Term(false) {}
  bool Expression :1;
  bool Term :1;
} _TDDIExpressionElementUnion__isset;

class TDDIExpressionElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIExpressionElementUnion(const TDDIExpressionElementUnion&);
  TDDIExpressionElementUnion& operator=(const TDDIExpressionElementUnion&);
  TDDIExpressionElementUnion() {
  }

  virtual ~TDDIExpressionElementUnion() throw();
  TDDIExpression Expression;
  TDDITerm Term;

  _TDDIExpressionElementUnion__isset __isset;

  void __set_Expression(const TDDIExpression& val);

  void __set_Term(const TDDITerm& val);

  bool operator == (const TDDIExpressionElementUnion & rhs) const
  {
    if (__isset.Expression != rhs.__isset.Expression)
      return false;
    else if (__isset.Expression && !(Expression == rhs.Expression))
      return false;
    if (__isset.Term != rhs.__isset.Term)
      return false;
    else if (__isset.Term && !(Term == rhs.Term))
      return false;
    return true;
  }
  bool operator != (const TDDIExpressionElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIExpressionElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIExpressionElementUnion &a, TDDIExpressionElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIExpressionElementUnion& obj);

typedef struct _TDDIAbstractExpressionElement__isset {
  _TDDIAbstractExpressionElement__isset() : UsedExpressionElement(false), UsedExpressionElementType(false) {}
  bool UsedExpressionElement :1;
  bool UsedExpressionElementType :1;
} _TDDIAbstractExpressionElement__isset;

class TDDIAbstractExpressionElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractExpressionElement(const TDDIAbstractExpressionElement&);
  TDDIAbstractExpressionElement& operator=(const TDDIAbstractExpressionElement&);
  TDDIAbstractExpressionElement() : UsedExpressionElementType((TDDIExpressionElementUnionType)0) {
  }

  virtual ~TDDIAbstractExpressionElement() throw();
  TDDIExpressionElementUnion UsedExpressionElement;
  TDDIExpressionElementUnionType UsedExpressionElementType;

  _TDDIAbstractExpressionElement__isset __isset;

  void __set_UsedExpressionElement(const TDDIExpressionElementUnion& val);

  void __set_UsedExpressionElementType(const TDDIExpressionElementUnionType val);

  bool operator == (const TDDIAbstractExpressionElement & rhs) const
  {
    if (!(UsedExpressionElement == rhs.UsedExpressionElement))
      return false;
    if (!(UsedExpressionElementType == rhs.UsedExpressionElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractExpressionElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractExpressionElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractExpressionElement &a, TDDIAbstractExpressionElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractExpressionElement& obj);

typedef struct _TDDITerminologyAssetUnion__isset {
  _TDDITerminologyAssetUnion__isset() : Category(false), ExpressionElement(false) {}
  bool Category :1;
  bool ExpressionElement :1;
} _TDDITerminologyAssetUnion__isset;

class TDDITerminologyAssetUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyAssetUnion(const TDDITerminologyAssetUnion&);
  TDDITerminologyAssetUnion& operator=(const TDDITerminologyAssetUnion&);
  TDDITerminologyAssetUnion() {
  }

  virtual ~TDDITerminologyAssetUnion() throw();
  TDDICategory Category;
  TDDIAbstractExpressionElement ExpressionElement;

  _TDDITerminologyAssetUnion__isset __isset;

  void __set_Category(const TDDICategory& val);

  void __set_ExpressionElement(const TDDIAbstractExpressionElement& val);

  bool operator == (const TDDITerminologyAssetUnion & rhs) const
  {
    if (__isset.Category != rhs.__isset.Category)
      return false;
    else if (__isset.Category && !(Category == rhs.Category))
      return false;
    if (__isset.ExpressionElement != rhs.__isset.ExpressionElement)
      return false;
    else if (__isset.ExpressionElement && !(ExpressionElement == rhs.ExpressionElement))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyAssetUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyAssetUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyAssetUnion &a, TDDITerminologyAssetUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyAssetUnion& obj);

typedef struct _TDDIAbstractTerminologyAsset__isset {
  _TDDIAbstractTerminologyAsset__isset() : UsedTerminologyAsset(false), UsedTerminologyAssetType(false) {}
  bool UsedTerminologyAsset :1;
  bool UsedTerminologyAssetType :1;
} _TDDIAbstractTerminologyAsset__isset;

class TDDIAbstractTerminologyAsset : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractTerminologyAsset(const TDDIAbstractTerminologyAsset&);
  TDDIAbstractTerminologyAsset& operator=(const TDDIAbstractTerminologyAsset&);
  TDDIAbstractTerminologyAsset() : UsedTerminologyAssetType((TDDITerminologyAssetUnionType)0) {
  }

  virtual ~TDDIAbstractTerminologyAsset() throw();
  TDDITerminologyAssetUnion UsedTerminologyAsset;
  TDDITerminologyAssetUnionType UsedTerminologyAssetType;

  _TDDIAbstractTerminologyAsset__isset __isset;

  void __set_UsedTerminologyAsset(const TDDITerminologyAssetUnion& val);

  void __set_UsedTerminologyAssetType(const TDDITerminologyAssetUnionType val);

  bool operator == (const TDDIAbstractTerminologyAsset & rhs) const
  {
    if (!(UsedTerminologyAsset == rhs.UsedTerminologyAsset))
      return false;
    if (!(UsedTerminologyAssetType == rhs.UsedTerminologyAssetType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractTerminologyAsset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractTerminologyAsset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractTerminologyAsset &a, TDDIAbstractTerminologyAsset &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyAsset& obj);

typedef struct _TDDIValidationResult__isset {
  _TDDIValidationResult__isset() : ValidationViolationOccurred(true), ValidationViolationMessages(true) {}
  bool ValidationViolationOccurred :1;
  bool ValidationViolationMessages :1;
} _TDDIValidationResult__isset;

class TDDIValidationResult : public virtual ::apache::thrift::TBase {
 public:

  TDDIValidationResult(const TDDIValidationResult&);
  TDDIValidationResult& operator=(const TDDIValidationResult&);
  TDDIValidationResult() : ValidationViolationOccurred(false) {

  }

  virtual ~TDDIValidationResult() throw();
  bool ValidationViolationOccurred;
  std::vector<TDDIValidationViolationMessage>  ValidationViolationMessages;

  _TDDIValidationResult__isset __isset;

  void __set_ValidationViolationOccurred(const bool val);

  void __set_ValidationViolationMessages(const std::vector<TDDIValidationViolationMessage> & val);

  bool operator == (const TDDIValidationResult & rhs) const
  {
    if (!(ValidationViolationOccurred == rhs.ValidationViolationOccurred))
      return false;
    if (!(ValidationViolationMessages == rhs.ValidationViolationMessages))
      return false;
    return true;
  }
  bool operator != (const TDDIValidationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIValidationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIValidationResult &a, TDDIValidationResult &b);

std::ostream& operator<<(std::ostream& out, const TDDIValidationResult& obj);

typedef struct _TDDIValidationViolationMessage__isset {
  _TDDIValidationViolationMessage__isset() : Context(true), Message(true) {}
  bool Context :1;
  bool Message :1;
} _TDDIValidationViolationMessage__isset;

class TDDIValidationViolationMessage : public virtual ::apache::thrift::TBase {
 public:

  TDDIValidationViolationMessage(const TDDIValidationViolationMessage&);
  TDDIValidationViolationMessage& operator=(const TDDIValidationViolationMessage&);
  TDDIValidationViolationMessage() : Context(""), Message("") {
  }

  virtual ~TDDIValidationViolationMessage() throw();
  std::string Context;
  std::string Message;

  _TDDIValidationViolationMessage__isset __isset;

  void __set_Context(const std::string& val);

  void __set_Message(const std::string& val);

  bool operator == (const TDDIValidationViolationMessage & rhs) const
  {
    if (!(Context == rhs.Context))
      return false;
    if (!(Message == rhs.Message))
      return false;
    return true;
  }
  bool operator != (const TDDIValidationViolationMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIValidationViolationMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIValidationViolationMessage &a, TDDIValidationViolationMessage &b);

std::ostream& operator<<(std::ostream& out, const TDDIValidationViolationMessage& obj);

typedef struct _TDDIValidationFailedException__isset {
  _TDDIValidationFailedException__isset() : ValidationResult(false) {}
  bool ValidationResult :1;
} _TDDIValidationFailedException__isset;

class TDDIValidationFailedException : public ::apache::thrift::TException {
 public:

  TDDIValidationFailedException(const TDDIValidationFailedException&);
  TDDIValidationFailedException& operator=(const TDDIValidationFailedException&);
  TDDIValidationFailedException() {
  }

  virtual ~TDDIValidationFailedException() throw();
  TDDIValidationResult ValidationResult;

  _TDDIValidationFailedException__isset __isset;

  void __set_ValidationResult(const TDDIValidationResult& val);

  bool operator == (const TDDIValidationFailedException & rhs) const
  {
    if (!(ValidationResult == rhs.ValidationResult))
      return false;
    return true;
  }
  bool operator != (const TDDIValidationFailedException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIValidationFailedException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(TDDIValidationFailedException &a, TDDIValidationFailedException &b);

std::ostream& operator<<(std::ostream& out, const TDDIValidationFailedException& obj);

} // namespace

#endif
