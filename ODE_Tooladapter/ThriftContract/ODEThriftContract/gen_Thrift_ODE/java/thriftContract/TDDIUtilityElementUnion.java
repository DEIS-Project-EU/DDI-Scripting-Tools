/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIUtilityElementUnion extends org.apache.thrift.TUnion<TDDIUtilityElementUnion, TDDIUtilityElementUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIUtilityElementUnion");
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField IMPLEMENTATION_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("ImplementationConstraint", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("Note", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TAGGED_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("TaggedValue", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESCRIPTION((short)1, "Description"),
    IMPLEMENTATION_CONSTRAINT((short)2, "ImplementationConstraint"),
    NOTE((short)3, "Note"),
    TAGGED_VALUE((short)4, "TaggedValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESCRIPTION
          return DESCRIPTION;
        case 2: // IMPLEMENTATION_CONSTRAINT
          return IMPLEMENTATION_CONSTRAINT;
        case 3: // NOTE
          return NOTE;
        case 4: // TAGGED_VALUE
          return TAGGED_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIDescription.class)));
    tmpMap.put(_Fields.IMPLEMENTATION_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("ImplementationConstraint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIImplementationConstraint.class)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("Note", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDINote.class)));
    tmpMap.put(_Fields.TAGGED_VALUE, new org.apache.thrift.meta_data.FieldMetaData("TaggedValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDITaggedValue.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIUtilityElementUnion.class, metaDataMap);
  }

  public TDDIUtilityElementUnion() {
    super();
  }

  public TDDIUtilityElementUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIUtilityElementUnion(TDDIUtilityElementUnion other) {
    super(other);
  }
  public TDDIUtilityElementUnion deepCopy() {
    return new TDDIUtilityElementUnion(this);
  }

  public static TDDIUtilityElementUnion Description(TDDIDescription value) {
    TDDIUtilityElementUnion x = new TDDIUtilityElementUnion();
    x.setDescription(value);
    return x;
  }

  public static TDDIUtilityElementUnion ImplementationConstraint(TDDIImplementationConstraint value) {
    TDDIUtilityElementUnion x = new TDDIUtilityElementUnion();
    x.setImplementationConstraint(value);
    return x;
  }

  public static TDDIUtilityElementUnion Note(TDDINote value) {
    TDDIUtilityElementUnion x = new TDDIUtilityElementUnion();
    x.setNote(value);
    return x;
  }

  public static TDDIUtilityElementUnion TaggedValue(TDDITaggedValue value) {
    TDDIUtilityElementUnion x = new TDDIUtilityElementUnion();
    x.setTaggedValue(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case DESCRIPTION:
        if (value instanceof TDDIDescription) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIDescription for field 'Description', but got " + value.getClass().getSimpleName());
      case IMPLEMENTATION_CONSTRAINT:
        if (value instanceof TDDIImplementationConstraint) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIImplementationConstraint for field 'ImplementationConstraint', but got " + value.getClass().getSimpleName());
      case NOTE:
        if (value instanceof TDDINote) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDINote for field 'Note', but got " + value.getClass().getSimpleName());
      case TAGGED_VALUE:
        if (value instanceof TDDITaggedValue) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDITaggedValue for field 'TaggedValue', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case DESCRIPTION:
          if (field.type == DESCRIPTION_FIELD_DESC.type) {
            TDDIDescription Description;
            Description = new TDDIDescription();
            Description.read(iprot);
            return Description;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case IMPLEMENTATION_CONSTRAINT:
          if (field.type == IMPLEMENTATION_CONSTRAINT_FIELD_DESC.type) {
            TDDIImplementationConstraint ImplementationConstraint;
            ImplementationConstraint = new TDDIImplementationConstraint();
            ImplementationConstraint.read(iprot);
            return ImplementationConstraint;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NOTE:
          if (field.type == NOTE_FIELD_DESC.type) {
            TDDINote Note;
            Note = new TDDINote();
            Note.read(iprot);
            return Note;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TAGGED_VALUE:
          if (field.type == TAGGED_VALUE_FIELD_DESC.type) {
            TDDITaggedValue TaggedValue;
            TaggedValue = new TDDITaggedValue();
            TaggedValue.read(iprot);
            return TaggedValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DESCRIPTION:
        TDDIDescription Description = (TDDIDescription)value_;
        Description.write(oprot);
        return;
      case IMPLEMENTATION_CONSTRAINT:
        TDDIImplementationConstraint ImplementationConstraint = (TDDIImplementationConstraint)value_;
        ImplementationConstraint.write(oprot);
        return;
      case NOTE:
        TDDINote Note = (TDDINote)value_;
        Note.write(oprot);
        return;
      case TAGGED_VALUE:
        TDDITaggedValue TaggedValue = (TDDITaggedValue)value_;
        TaggedValue.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case DESCRIPTION:
          TDDIDescription Description;
          Description = new TDDIDescription();
          Description.read(iprot);
          return Description;
        case IMPLEMENTATION_CONSTRAINT:
          TDDIImplementationConstraint ImplementationConstraint;
          ImplementationConstraint = new TDDIImplementationConstraint();
          ImplementationConstraint.read(iprot);
          return ImplementationConstraint;
        case NOTE:
          TDDINote Note;
          Note = new TDDINote();
          Note.read(iprot);
          return Note;
        case TAGGED_VALUE:
          TDDITaggedValue TaggedValue;
          TaggedValue = new TDDITaggedValue();
          TaggedValue.read(iprot);
          return TaggedValue;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DESCRIPTION:
        TDDIDescription Description = (TDDIDescription)value_;
        Description.write(oprot);
        return;
      case IMPLEMENTATION_CONSTRAINT:
        TDDIImplementationConstraint ImplementationConstraint = (TDDIImplementationConstraint)value_;
        ImplementationConstraint.write(oprot);
        return;
      case NOTE:
        TDDINote Note = (TDDINote)value_;
        Note.write(oprot);
        return;
      case TAGGED_VALUE:
        TDDITaggedValue TaggedValue = (TDDITaggedValue)value_;
        TaggedValue.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case DESCRIPTION:
        return DESCRIPTION_FIELD_DESC;
      case IMPLEMENTATION_CONSTRAINT:
        return IMPLEMENTATION_CONSTRAINT_FIELD_DESC;
      case NOTE:
        return NOTE_FIELD_DESC;
      case TAGGED_VALUE:
        return TAGGED_VALUE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIDescription getDescription() {
    if (getSetField() == _Fields.DESCRIPTION) {
      return (TDDIDescription)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Description' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDescription(TDDIDescription value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DESCRIPTION;
    value_ = value;
  }

  public TDDIImplementationConstraint getImplementationConstraint() {
    if (getSetField() == _Fields.IMPLEMENTATION_CONSTRAINT) {
      return (TDDIImplementationConstraint)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ImplementationConstraint' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setImplementationConstraint(TDDIImplementationConstraint value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.IMPLEMENTATION_CONSTRAINT;
    value_ = value;
  }

  public TDDINote getNote() {
    if (getSetField() == _Fields.NOTE) {
      return (TDDINote)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Note' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNote(TDDINote value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.NOTE;
    value_ = value;
  }

  public TDDITaggedValue getTaggedValue() {
    if (getSetField() == _Fields.TAGGED_VALUE) {
      return (TDDITaggedValue)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'TaggedValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTaggedValue(TDDITaggedValue value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TAGGED_VALUE;
    value_ = value;
  }

  public boolean isSetDescription() {
    return setField_ == _Fields.DESCRIPTION;
  }


  public boolean isSetImplementationConstraint() {
    return setField_ == _Fields.IMPLEMENTATION_CONSTRAINT;
  }


  public boolean isSetNote() {
    return setField_ == _Fields.NOTE;
  }


  public boolean isSetTaggedValue() {
    return setField_ == _Fields.TAGGED_VALUE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIUtilityElementUnion) {
      return equals((TDDIUtilityElementUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIUtilityElementUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIUtilityElementUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
