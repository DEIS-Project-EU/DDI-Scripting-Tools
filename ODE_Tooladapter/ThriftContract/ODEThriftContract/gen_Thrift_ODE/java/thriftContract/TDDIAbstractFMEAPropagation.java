/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDIAbstractFMEAPropagation implements org.apache.thrift.TBase<TDDIAbstractFMEAPropagation, TDDIAbstractFMEAPropagation._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractFMEAPropagation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractFMEAPropagation");

  private static final org.apache.thrift.protocol.TField USED_FMEAPROPAGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedFMEAPropagation", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_FMEAPROPAGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedFMEAPropagationType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractFMEAPropagationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractFMEAPropagationTupleSchemeFactory();

  public TDDIFMEAPropagationUnion UsedFMEAPropagation; // required
  /**
   * 
   * @see TDDIFMEAPropagationUnionType
   */
  public TDDIFMEAPropagationUnionType UsedFMEAPropagationType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_FMEAPROPAGATION((short)1, "UsedFMEAPropagation"),
    /**
     * 
     * @see TDDIFMEAPropagationUnionType
     */
    USED_FMEAPROPAGATION_TYPE((short)2, "UsedFMEAPropagationType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_FMEAPROPAGATION
          return USED_FMEAPROPAGATION;
        case 2: // USED_FMEAPROPAGATION_TYPE
          return USED_FMEAPROPAGATION_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_FMEAPROPAGATION, new org.apache.thrift.meta_data.FieldMetaData("UsedFMEAPropagation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIFMEAPropagationUnion.class)));
    tmpMap.put(_Fields.USED_FMEAPROPAGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedFMEAPropagationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIFMEAPropagationUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractFMEAPropagation.class, metaDataMap);
  }

  public TDDIAbstractFMEAPropagation() {
  }

  public TDDIAbstractFMEAPropagation(
    TDDIFMEAPropagationUnion UsedFMEAPropagation,
    TDDIFMEAPropagationUnionType UsedFMEAPropagationType)
  {
    this();
    this.UsedFMEAPropagation = UsedFMEAPropagation;
    this.UsedFMEAPropagationType = UsedFMEAPropagationType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractFMEAPropagation(TDDIAbstractFMEAPropagation other) {
    if (other.isSetUsedFMEAPropagation()) {
      this.UsedFMEAPropagation = new TDDIFMEAPropagationUnion(other.UsedFMEAPropagation);
    }
    if (other.isSetUsedFMEAPropagationType()) {
      this.UsedFMEAPropagationType = other.UsedFMEAPropagationType;
    }
  }

  public TDDIAbstractFMEAPropagation deepCopy() {
    return new TDDIAbstractFMEAPropagation(this);
  }

  @Override
  public void clear() {
    this.UsedFMEAPropagation = null;
    this.UsedFMEAPropagationType = null;
  }

  public TDDIFMEAPropagationUnion getUsedFMEAPropagation() {
    return this.UsedFMEAPropagation;
  }

  public TDDIAbstractFMEAPropagation setUsedFMEAPropagation(TDDIFMEAPropagationUnion UsedFMEAPropagation) {
    this.UsedFMEAPropagation = UsedFMEAPropagation;
    return this;
  }

  public void unsetUsedFMEAPropagation() {
    this.UsedFMEAPropagation = null;
  }

  /** Returns true if field UsedFMEAPropagation is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedFMEAPropagation() {
    return this.UsedFMEAPropagation != null;
  }

  public void setUsedFMEAPropagationIsSet(boolean value) {
    if (!value) {
      this.UsedFMEAPropagation = null;
    }
  }

  /**
   * 
   * @see TDDIFMEAPropagationUnionType
   */
  public TDDIFMEAPropagationUnionType getUsedFMEAPropagationType() {
    return this.UsedFMEAPropagationType;
  }

  /**
   * 
   * @see TDDIFMEAPropagationUnionType
   */
  public TDDIAbstractFMEAPropagation setUsedFMEAPropagationType(TDDIFMEAPropagationUnionType UsedFMEAPropagationType) {
    this.UsedFMEAPropagationType = UsedFMEAPropagationType;
    return this;
  }

  public void unsetUsedFMEAPropagationType() {
    this.UsedFMEAPropagationType = null;
  }

  /** Returns true if field UsedFMEAPropagationType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedFMEAPropagationType() {
    return this.UsedFMEAPropagationType != null;
  }

  public void setUsedFMEAPropagationTypeIsSet(boolean value) {
    if (!value) {
      this.UsedFMEAPropagationType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_FMEAPROPAGATION:
      if (value == null) {
        unsetUsedFMEAPropagation();
      } else {
        setUsedFMEAPropagation((TDDIFMEAPropagationUnion)value);
      }
      break;

    case USED_FMEAPROPAGATION_TYPE:
      if (value == null) {
        unsetUsedFMEAPropagationType();
      } else {
        setUsedFMEAPropagationType((TDDIFMEAPropagationUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_FMEAPROPAGATION:
      return getUsedFMEAPropagation();

    case USED_FMEAPROPAGATION_TYPE:
      return getUsedFMEAPropagationType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_FMEAPROPAGATION:
      return isSetUsedFMEAPropagation();
    case USED_FMEAPROPAGATION_TYPE:
      return isSetUsedFMEAPropagationType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractFMEAPropagation)
      return this.equals((TDDIAbstractFMEAPropagation)that);
    return false;
  }

  public boolean equals(TDDIAbstractFMEAPropagation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedFMEAPropagation = true && this.isSetUsedFMEAPropagation();
    boolean that_present_UsedFMEAPropagation = true && that.isSetUsedFMEAPropagation();
    if (this_present_UsedFMEAPropagation || that_present_UsedFMEAPropagation) {
      if (!(this_present_UsedFMEAPropagation && that_present_UsedFMEAPropagation))
        return false;
      if (!this.UsedFMEAPropagation.equals(that.UsedFMEAPropagation))
        return false;
    }

    boolean this_present_UsedFMEAPropagationType = true && this.isSetUsedFMEAPropagationType();
    boolean that_present_UsedFMEAPropagationType = true && that.isSetUsedFMEAPropagationType();
    if (this_present_UsedFMEAPropagationType || that_present_UsedFMEAPropagationType) {
      if (!(this_present_UsedFMEAPropagationType && that_present_UsedFMEAPropagationType))
        return false;
      if (!this.UsedFMEAPropagationType.equals(that.UsedFMEAPropagationType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedFMEAPropagation()) ? 131071 : 524287);
    if (isSetUsedFMEAPropagation())
      hashCode = hashCode * 8191 + UsedFMEAPropagation.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedFMEAPropagationType()) ? 131071 : 524287);
    if (isSetUsedFMEAPropagationType())
      hashCode = hashCode * 8191 + UsedFMEAPropagationType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractFMEAPropagation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedFMEAPropagation()).compareTo(other.isSetUsedFMEAPropagation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedFMEAPropagation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedFMEAPropagation, other.UsedFMEAPropagation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedFMEAPropagationType()).compareTo(other.isSetUsedFMEAPropagationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedFMEAPropagationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedFMEAPropagationType, other.UsedFMEAPropagationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractFMEAPropagation(");
    boolean first = true;

    sb.append("UsedFMEAPropagation:");
    if (this.UsedFMEAPropagation == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedFMEAPropagation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedFMEAPropagationType:");
    if (this.UsedFMEAPropagationType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedFMEAPropagationType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractFMEAPropagationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractFMEAPropagationStandardScheme getScheme() {
      return new TDDIAbstractFMEAPropagationStandardScheme();
    }
  }

  private static class TDDIAbstractFMEAPropagationStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractFMEAPropagation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractFMEAPropagation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_FMEAPROPAGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedFMEAPropagation = new TDDIFMEAPropagationUnion();
              struct.UsedFMEAPropagation.read(iprot);
              struct.setUsedFMEAPropagationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_FMEAPROPAGATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedFMEAPropagationType = thriftContract.TDDIFMEAPropagationUnionType.findByValue(iprot.readI32());
              struct.setUsedFMEAPropagationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractFMEAPropagation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedFMEAPropagation != null) {
        oprot.writeFieldBegin(USED_FMEAPROPAGATION_FIELD_DESC);
        struct.UsedFMEAPropagation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedFMEAPropagationType != null) {
        oprot.writeFieldBegin(USED_FMEAPROPAGATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedFMEAPropagationType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractFMEAPropagationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractFMEAPropagationTupleScheme getScheme() {
      return new TDDIAbstractFMEAPropagationTupleScheme();
    }
  }

  private static class TDDIAbstractFMEAPropagationTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractFMEAPropagation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractFMEAPropagation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedFMEAPropagation()) {
        optionals.set(0);
      }
      if (struct.isSetUsedFMEAPropagationType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedFMEAPropagation()) {
        struct.UsedFMEAPropagation.write(oprot);
      }
      if (struct.isSetUsedFMEAPropagationType()) {
        oprot.writeI32(struct.UsedFMEAPropagationType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractFMEAPropagation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedFMEAPropagation = new TDDIFMEAPropagationUnion();
        struct.UsedFMEAPropagation.read(iprot);
        struct.setUsedFMEAPropagationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedFMEAPropagationType = thriftContract.TDDIFMEAPropagationUnionType.findByValue(iprot.readI32());
        struct.setUsedFMEAPropagationTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

