/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDISafetyRequirement implements org.apache.thrift.TBase<TDDISafetyRequirement, TDDISafetyRequirement._Fields>, java.io.Serializable, Cloneable, Comparable<TDDISafetyRequirement> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDISafetyRequirement");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_CITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCitation", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("IsAbstract", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CITED_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("CitedElement", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField DECOMPOSITION_ARGUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("DecompositionArgument", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REFINED_REQUIREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("RefinedRequirements", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("RequirementSource", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField MEASURES_FIELD_DESC = new org.apache.thrift.protocol.TField("Measures", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField FAILURE_MODES_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureModes", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField ASSURANCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceLevel", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_PROCEDURES_FIELD_DESC = new org.apache.thrift.protocol.TField("MaintenanceProcedures", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField HAZARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("Hazards", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField FAILURE_REACTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureReactionTime", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField FAILURE_DETECTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureDetectionTime", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField FAILURE_LATENCY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureLatencyTime", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField IS_SAFETY_GOAL_FIELD_DESC = new org.apache.thrift.protocol.TField("IsSafetyGoal", org.apache.thrift.protocol.TType.BOOL, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDISafetyRequirementStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDISafetyRequirementTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public boolean IsCitation; // required
  public boolean IsAbstract; // required
  public java.util.List<TDDIKeyValueMapRef> KeyValueMaps; // required
  public TDDIAbstractBaseElement CitedElement; // required
  public java.lang.String DecompositionArgument; // required
  public java.util.List<TDDIAbstractDependabilityRequirementRef> RefinedRequirements; // required
  public TDDIAbstractRequirementSource RequirementSource; // required
  public java.util.List<TDDIAbstractMeasureRef> Measures; // required
  public java.util.List<TDDIAbstractFailureRef> FailureModes; // required
  public TDDIAssuranceLevel AssuranceLevel; // required
  public java.util.List<TDDIMaintenanceProcedureRef> MaintenanceProcedures; // required
  public java.util.List<TDDIHazardRef> Hazards; // required
  public double FailureReactionTime; // required
  public double FailureDetectionTime; // required
  public double FailureLatencyTime; // required
  public boolean IsSafetyGoal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    IS_CITATION((short)4, "IsCitation"),
    IS_ABSTRACT((short)5, "IsAbstract"),
    KEY_VALUE_MAPS((short)6, "KeyValueMaps"),
    CITED_ELEMENT((short)7, "CitedElement"),
    DECOMPOSITION_ARGUMENT((short)8, "DecompositionArgument"),
    REFINED_REQUIREMENTS((short)9, "RefinedRequirements"),
    REQUIREMENT_SOURCE((short)10, "RequirementSource"),
    MEASURES((short)11, "Measures"),
    FAILURE_MODES((short)12, "FailureModes"),
    ASSURANCE_LEVEL((short)13, "AssuranceLevel"),
    MAINTENANCE_PROCEDURES((short)14, "MaintenanceProcedures"),
    HAZARDS((short)15, "Hazards"),
    FAILURE_REACTION_TIME((short)16, "FailureReactionTime"),
    FAILURE_DETECTION_TIME((short)17, "FailureDetectionTime"),
    FAILURE_LATENCY_TIME((short)18, "FailureLatencyTime"),
    IS_SAFETY_GOAL((short)19, "IsSafetyGoal");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // IS_CITATION
          return IS_CITATION;
        case 5: // IS_ABSTRACT
          return IS_ABSTRACT;
        case 6: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 7: // CITED_ELEMENT
          return CITED_ELEMENT;
        case 8: // DECOMPOSITION_ARGUMENT
          return DECOMPOSITION_ARGUMENT;
        case 9: // REFINED_REQUIREMENTS
          return REFINED_REQUIREMENTS;
        case 10: // REQUIREMENT_SOURCE
          return REQUIREMENT_SOURCE;
        case 11: // MEASURES
          return MEASURES;
        case 12: // FAILURE_MODES
          return FAILURE_MODES;
        case 13: // ASSURANCE_LEVEL
          return ASSURANCE_LEVEL;
        case 14: // MAINTENANCE_PROCEDURES
          return MAINTENANCE_PROCEDURES;
        case 15: // HAZARDS
          return HAZARDS;
        case 16: // FAILURE_REACTION_TIME
          return FAILURE_REACTION_TIME;
        case 17: // FAILURE_DETECTION_TIME
          return FAILURE_DETECTION_TIME;
        case 18: // FAILURE_LATENCY_TIME
          return FAILURE_LATENCY_TIME;
        case 19: // IS_SAFETY_GOAL
          return IS_SAFETY_GOAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISCITATION_ISSET_ID = 1;
  private static final int __ISABSTRACT_ISSET_ID = 2;
  private static final int __FAILUREREACTIONTIME_ISSET_ID = 3;
  private static final int __FAILUREDETECTIONTIME_ISSET_ID = 4;
  private static final int __FAILURELATENCYTIME_ISSET_ID = 5;
  private static final int __ISSAFETYGOAL_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CITATION, new org.apache.thrift.meta_data.FieldMetaData("IsCitation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ABSTRACT, new org.apache.thrift.meta_data.FieldMetaData("IsAbstract", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMapRef.class))));
    tmpMap.put(_Fields.CITED_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("CitedElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractBaseElement.class)));
    tmpMap.put(_Fields.DECOMPOSITION_ARGUMENT, new org.apache.thrift.meta_data.FieldMetaData("DecompositionArgument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFINED_REQUIREMENTS, new org.apache.thrift.meta_data.FieldMetaData("RefinedRequirements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractDependabilityRequirementRef.class))));
    tmpMap.put(_Fields.REQUIREMENT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("RequirementSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractRequirementSource.class)));
    tmpMap.put(_Fields.MEASURES, new org.apache.thrift.meta_data.FieldMetaData("Measures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractMeasureRef.class))));
    tmpMap.put(_Fields.FAILURE_MODES, new org.apache.thrift.meta_data.FieldMetaData("FailureModes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureRef.class))));
    tmpMap.put(_Fields.ASSURANCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("AssuranceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssuranceLevel.class)));
    tmpMap.put(_Fields.MAINTENANCE_PROCEDURES, new org.apache.thrift.meta_data.FieldMetaData("MaintenanceProcedures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMaintenanceProcedureRef.class))));
    tmpMap.put(_Fields.HAZARDS, new org.apache.thrift.meta_data.FieldMetaData("Hazards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIHazardRef.class))));
    tmpMap.put(_Fields.FAILURE_REACTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("FailureReactionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAILURE_DETECTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("FailureDetectionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAILURE_LATENCY_TIME, new org.apache.thrift.meta_data.FieldMetaData("FailureLatencyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_SAFETY_GOAL, new org.apache.thrift.meta_data.FieldMetaData("IsSafetyGoal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDISafetyRequirement.class, metaDataMap);
  }

  public TDDISafetyRequirement() {
    this.Name = "";

    this.Description = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();

    this.DecompositionArgument = "";

    this.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>();

    this.FailureModes = new java.util.ArrayList<TDDIAbstractFailureRef>();

    this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>();

    this.Hazards = new java.util.ArrayList<TDDIHazardRef>();

  }

  public TDDISafetyRequirement(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    boolean IsCitation,
    boolean IsAbstract,
    java.util.List<TDDIKeyValueMapRef> KeyValueMaps,
    TDDIAbstractBaseElement CitedElement,
    java.lang.String DecompositionArgument,
    java.util.List<TDDIAbstractDependabilityRequirementRef> RefinedRequirements,
    TDDIAbstractRequirementSource RequirementSource,
    java.util.List<TDDIAbstractMeasureRef> Measures,
    java.util.List<TDDIAbstractFailureRef> FailureModes,
    TDDIAssuranceLevel AssuranceLevel,
    java.util.List<TDDIMaintenanceProcedureRef> MaintenanceProcedures,
    java.util.List<TDDIHazardRef> Hazards,
    double FailureReactionTime,
    double FailureDetectionTime,
    double FailureLatencyTime,
    boolean IsSafetyGoal)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    this.KeyValueMaps = KeyValueMaps;
    this.CitedElement = CitedElement;
    this.DecompositionArgument = DecompositionArgument;
    this.RefinedRequirements = RefinedRequirements;
    this.RequirementSource = RequirementSource;
    this.Measures = Measures;
    this.FailureModes = FailureModes;
    this.AssuranceLevel = AssuranceLevel;
    this.MaintenanceProcedures = MaintenanceProcedures;
    this.Hazards = Hazards;
    this.FailureReactionTime = FailureReactionTime;
    setFailureReactionTimeIsSet(true);
    this.FailureDetectionTime = FailureDetectionTime;
    setFailureDetectionTimeIsSet(true);
    this.FailureLatencyTime = FailureLatencyTime;
    setFailureLatencyTimeIsSet(true);
    this.IsSafetyGoal = IsSafetyGoal;
    setIsSafetyGoalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDISafetyRequirement(TDDISafetyRequirement other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    this.IsCitation = other.IsCitation;
    this.IsAbstract = other.IsAbstract;
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMapRef> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(other.KeyValueMaps.size());
      for (TDDIKeyValueMapRef other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMapRef(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetCitedElement()) {
      this.CitedElement = new TDDIAbstractBaseElement(other.CitedElement);
    }
    if (other.isSetDecompositionArgument()) {
      this.DecompositionArgument = other.DecompositionArgument;
    }
    if (other.isSetRefinedRequirements()) {
      java.util.List<TDDIAbstractDependabilityRequirementRef> __this__RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(other.RefinedRequirements.size());
      for (TDDIAbstractDependabilityRequirementRef other_element : other.RefinedRequirements) {
        __this__RefinedRequirements.add(new TDDIAbstractDependabilityRequirementRef(other_element));
      }
      this.RefinedRequirements = __this__RefinedRequirements;
    }
    if (other.isSetRequirementSource()) {
      this.RequirementSource = new TDDIAbstractRequirementSource(other.RequirementSource);
    }
    if (other.isSetMeasures()) {
      java.util.List<TDDIAbstractMeasureRef> __this__Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>(other.Measures.size());
      for (TDDIAbstractMeasureRef other_element : other.Measures) {
        __this__Measures.add(new TDDIAbstractMeasureRef(other_element));
      }
      this.Measures = __this__Measures;
    }
    if (other.isSetFailureModes()) {
      java.util.List<TDDIAbstractFailureRef> __this__FailureModes = new java.util.ArrayList<TDDIAbstractFailureRef>(other.FailureModes.size());
      for (TDDIAbstractFailureRef other_element : other.FailureModes) {
        __this__FailureModes.add(new TDDIAbstractFailureRef(other_element));
      }
      this.FailureModes = __this__FailureModes;
    }
    if (other.isSetAssuranceLevel()) {
      this.AssuranceLevel = new TDDIAssuranceLevel(other.AssuranceLevel);
    }
    if (other.isSetMaintenanceProcedures()) {
      java.util.List<TDDIMaintenanceProcedureRef> __this__MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>(other.MaintenanceProcedures.size());
      for (TDDIMaintenanceProcedureRef other_element : other.MaintenanceProcedures) {
        __this__MaintenanceProcedures.add(new TDDIMaintenanceProcedureRef(other_element));
      }
      this.MaintenanceProcedures = __this__MaintenanceProcedures;
    }
    if (other.isSetHazards()) {
      java.util.List<TDDIHazardRef> __this__Hazards = new java.util.ArrayList<TDDIHazardRef>(other.Hazards.size());
      for (TDDIHazardRef other_element : other.Hazards) {
        __this__Hazards.add(new TDDIHazardRef(other_element));
      }
      this.Hazards = __this__Hazards;
    }
    this.FailureReactionTime = other.FailureReactionTime;
    this.FailureDetectionTime = other.FailureDetectionTime;
    this.FailureLatencyTime = other.FailureLatencyTime;
    this.IsSafetyGoal = other.IsSafetyGoal;
  }

  public TDDISafetyRequirement deepCopy() {
    return new TDDISafetyRequirement(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();

    this.CitedElement = null;
    this.DecompositionArgument = "";

    this.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.RequirementSource = null;
    this.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>();

    this.FailureModes = new java.util.ArrayList<TDDIAbstractFailureRef>();

    this.AssuranceLevel = null;
    this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>();

    this.Hazards = new java.util.ArrayList<TDDIHazardRef>();

    setFailureReactionTimeIsSet(false);
    this.FailureReactionTime = 0.0;
    setFailureDetectionTimeIsSet(false);
    this.FailureDetectionTime = 0.0;
    setFailureLatencyTimeIsSet(false);
    this.FailureLatencyTime = 0.0;
    setIsSafetyGoalIsSet(false);
    this.IsSafetyGoal = false;
  }

  public long getId() {
    return this.Id;
  }

  public TDDISafetyRequirement setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDISafetyRequirement setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDISafetyRequirement setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public boolean isIsCitation() {
    return this.IsCitation;
  }

  public TDDISafetyRequirement setIsCitation(boolean IsCitation) {
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    return this;
  }

  public void unsetIsCitation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  /** Returns true if field IsCitation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCitation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  public void setIsCitationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCITATION_ISSET_ID, value);
  }

  public boolean isIsAbstract() {
    return this.IsAbstract;
  }

  public TDDISafetyRequirement setIsAbstract(boolean IsAbstract) {
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    return this;
  }

  public void unsetIsAbstract() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  /** Returns true if field IsAbstract is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAbstract() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  public void setIsAbstractIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISABSTRACT_ISSET_ID, value);
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMapRef> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMapRef elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMapRef> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDISafetyRequirement setKeyValueMaps(java.util.List<TDDIKeyValueMapRef> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public TDDIAbstractBaseElement getCitedElement() {
    return this.CitedElement;
  }

  public TDDISafetyRequirement setCitedElement(TDDIAbstractBaseElement CitedElement) {
    this.CitedElement = CitedElement;
    return this;
  }

  public void unsetCitedElement() {
    this.CitedElement = null;
  }

  /** Returns true if field CitedElement is set (has been assigned a value) and false otherwise */
  public boolean isSetCitedElement() {
    return this.CitedElement != null;
  }

  public void setCitedElementIsSet(boolean value) {
    if (!value) {
      this.CitedElement = null;
    }
  }

  public java.lang.String getDecompositionArgument() {
    return this.DecompositionArgument;
  }

  public TDDISafetyRequirement setDecompositionArgument(java.lang.String DecompositionArgument) {
    this.DecompositionArgument = DecompositionArgument;
    return this;
  }

  public void unsetDecompositionArgument() {
    this.DecompositionArgument = null;
  }

  /** Returns true if field DecompositionArgument is set (has been assigned a value) and false otherwise */
  public boolean isSetDecompositionArgument() {
    return this.DecompositionArgument != null;
  }

  public void setDecompositionArgumentIsSet(boolean value) {
    if (!value) {
      this.DecompositionArgument = null;
    }
  }

  public int getRefinedRequirementsSize() {
    return (this.RefinedRequirements == null) ? 0 : this.RefinedRequirements.size();
  }

  public java.util.Iterator<TDDIAbstractDependabilityRequirementRef> getRefinedRequirementsIterator() {
    return (this.RefinedRequirements == null) ? null : this.RefinedRequirements.iterator();
  }

  public void addToRefinedRequirements(TDDIAbstractDependabilityRequirementRef elem) {
    if (this.RefinedRequirements == null) {
      this.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();
    }
    this.RefinedRequirements.add(elem);
  }

  public java.util.List<TDDIAbstractDependabilityRequirementRef> getRefinedRequirements() {
    return this.RefinedRequirements;
  }

  public TDDISafetyRequirement setRefinedRequirements(java.util.List<TDDIAbstractDependabilityRequirementRef> RefinedRequirements) {
    this.RefinedRequirements = RefinedRequirements;
    return this;
  }

  public void unsetRefinedRequirements() {
    this.RefinedRequirements = null;
  }

  /** Returns true if field RefinedRequirements is set (has been assigned a value) and false otherwise */
  public boolean isSetRefinedRequirements() {
    return this.RefinedRequirements != null;
  }

  public void setRefinedRequirementsIsSet(boolean value) {
    if (!value) {
      this.RefinedRequirements = null;
    }
  }

  public TDDIAbstractRequirementSource getRequirementSource() {
    return this.RequirementSource;
  }

  public TDDISafetyRequirement setRequirementSource(TDDIAbstractRequirementSource RequirementSource) {
    this.RequirementSource = RequirementSource;
    return this;
  }

  public void unsetRequirementSource() {
    this.RequirementSource = null;
  }

  /** Returns true if field RequirementSource is set (has been assigned a value) and false otherwise */
  public boolean isSetRequirementSource() {
    return this.RequirementSource != null;
  }

  public void setRequirementSourceIsSet(boolean value) {
    if (!value) {
      this.RequirementSource = null;
    }
  }

  public int getMeasuresSize() {
    return (this.Measures == null) ? 0 : this.Measures.size();
  }

  public java.util.Iterator<TDDIAbstractMeasureRef> getMeasuresIterator() {
    return (this.Measures == null) ? null : this.Measures.iterator();
  }

  public void addToMeasures(TDDIAbstractMeasureRef elem) {
    if (this.Measures == null) {
      this.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>();
    }
    this.Measures.add(elem);
  }

  public java.util.List<TDDIAbstractMeasureRef> getMeasures() {
    return this.Measures;
  }

  public TDDISafetyRequirement setMeasures(java.util.List<TDDIAbstractMeasureRef> Measures) {
    this.Measures = Measures;
    return this;
  }

  public void unsetMeasures() {
    this.Measures = null;
  }

  /** Returns true if field Measures is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasures() {
    return this.Measures != null;
  }

  public void setMeasuresIsSet(boolean value) {
    if (!value) {
      this.Measures = null;
    }
  }

  public int getFailureModesSize() {
    return (this.FailureModes == null) ? 0 : this.FailureModes.size();
  }

  public java.util.Iterator<TDDIAbstractFailureRef> getFailureModesIterator() {
    return (this.FailureModes == null) ? null : this.FailureModes.iterator();
  }

  public void addToFailureModes(TDDIAbstractFailureRef elem) {
    if (this.FailureModes == null) {
      this.FailureModes = new java.util.ArrayList<TDDIAbstractFailureRef>();
    }
    this.FailureModes.add(elem);
  }

  public java.util.List<TDDIAbstractFailureRef> getFailureModes() {
    return this.FailureModes;
  }

  public TDDISafetyRequirement setFailureModes(java.util.List<TDDIAbstractFailureRef> FailureModes) {
    this.FailureModes = FailureModes;
    return this;
  }

  public void unsetFailureModes() {
    this.FailureModes = null;
  }

  /** Returns true if field FailureModes is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureModes() {
    return this.FailureModes != null;
  }

  public void setFailureModesIsSet(boolean value) {
    if (!value) {
      this.FailureModes = null;
    }
  }

  public TDDIAssuranceLevel getAssuranceLevel() {
    return this.AssuranceLevel;
  }

  public TDDISafetyRequirement setAssuranceLevel(TDDIAssuranceLevel AssuranceLevel) {
    this.AssuranceLevel = AssuranceLevel;
    return this;
  }

  public void unsetAssuranceLevel() {
    this.AssuranceLevel = null;
  }

  /** Returns true if field AssuranceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceLevel() {
    return this.AssuranceLevel != null;
  }

  public void setAssuranceLevelIsSet(boolean value) {
    if (!value) {
      this.AssuranceLevel = null;
    }
  }

  public int getMaintenanceProceduresSize() {
    return (this.MaintenanceProcedures == null) ? 0 : this.MaintenanceProcedures.size();
  }

  public java.util.Iterator<TDDIMaintenanceProcedureRef> getMaintenanceProceduresIterator() {
    return (this.MaintenanceProcedures == null) ? null : this.MaintenanceProcedures.iterator();
  }

  public void addToMaintenanceProcedures(TDDIMaintenanceProcedureRef elem) {
    if (this.MaintenanceProcedures == null) {
      this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>();
    }
    this.MaintenanceProcedures.add(elem);
  }

  public java.util.List<TDDIMaintenanceProcedureRef> getMaintenanceProcedures() {
    return this.MaintenanceProcedures;
  }

  public TDDISafetyRequirement setMaintenanceProcedures(java.util.List<TDDIMaintenanceProcedureRef> MaintenanceProcedures) {
    this.MaintenanceProcedures = MaintenanceProcedures;
    return this;
  }

  public void unsetMaintenanceProcedures() {
    this.MaintenanceProcedures = null;
  }

  /** Returns true if field MaintenanceProcedures is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceProcedures() {
    return this.MaintenanceProcedures != null;
  }

  public void setMaintenanceProceduresIsSet(boolean value) {
    if (!value) {
      this.MaintenanceProcedures = null;
    }
  }

  public int getHazardsSize() {
    return (this.Hazards == null) ? 0 : this.Hazards.size();
  }

  public java.util.Iterator<TDDIHazardRef> getHazardsIterator() {
    return (this.Hazards == null) ? null : this.Hazards.iterator();
  }

  public void addToHazards(TDDIHazardRef elem) {
    if (this.Hazards == null) {
      this.Hazards = new java.util.ArrayList<TDDIHazardRef>();
    }
    this.Hazards.add(elem);
  }

  public java.util.List<TDDIHazardRef> getHazards() {
    return this.Hazards;
  }

  public TDDISafetyRequirement setHazards(java.util.List<TDDIHazardRef> Hazards) {
    this.Hazards = Hazards;
    return this;
  }

  public void unsetHazards() {
    this.Hazards = null;
  }

  /** Returns true if field Hazards is set (has been assigned a value) and false otherwise */
  public boolean isSetHazards() {
    return this.Hazards != null;
  }

  public void setHazardsIsSet(boolean value) {
    if (!value) {
      this.Hazards = null;
    }
  }

  public double getFailureReactionTime() {
    return this.FailureReactionTime;
  }

  public TDDISafetyRequirement setFailureReactionTime(double FailureReactionTime) {
    this.FailureReactionTime = FailureReactionTime;
    setFailureReactionTimeIsSet(true);
    return this;
  }

  public void unsetFailureReactionTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILUREREACTIONTIME_ISSET_ID);
  }

  /** Returns true if field FailureReactionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureReactionTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILUREREACTIONTIME_ISSET_ID);
  }

  public void setFailureReactionTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILUREREACTIONTIME_ISSET_ID, value);
  }

  public double getFailureDetectionTime() {
    return this.FailureDetectionTime;
  }

  public TDDISafetyRequirement setFailureDetectionTime(double FailureDetectionTime) {
    this.FailureDetectionTime = FailureDetectionTime;
    setFailureDetectionTimeIsSet(true);
    return this;
  }

  public void unsetFailureDetectionTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILUREDETECTIONTIME_ISSET_ID);
  }

  /** Returns true if field FailureDetectionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureDetectionTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILUREDETECTIONTIME_ISSET_ID);
  }

  public void setFailureDetectionTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILUREDETECTIONTIME_ISSET_ID, value);
  }

  public double getFailureLatencyTime() {
    return this.FailureLatencyTime;
  }

  public TDDISafetyRequirement setFailureLatencyTime(double FailureLatencyTime) {
    this.FailureLatencyTime = FailureLatencyTime;
    setFailureLatencyTimeIsSet(true);
    return this;
  }

  public void unsetFailureLatencyTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILURELATENCYTIME_ISSET_ID);
  }

  /** Returns true if field FailureLatencyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureLatencyTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILURELATENCYTIME_ISSET_ID);
  }

  public void setFailureLatencyTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILURELATENCYTIME_ISSET_ID, value);
  }

  public boolean isIsSafetyGoal() {
    return this.IsSafetyGoal;
  }

  public TDDISafetyRequirement setIsSafetyGoal(boolean IsSafetyGoal) {
    this.IsSafetyGoal = IsSafetyGoal;
    setIsSafetyGoalIsSet(true);
    return this;
  }

  public void unsetIsSafetyGoal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSAFETYGOAL_ISSET_ID);
  }

  /** Returns true if field IsSafetyGoal is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSafetyGoal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSAFETYGOAL_ISSET_ID);
  }

  public void setIsSafetyGoalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSAFETYGOAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case IS_CITATION:
      if (value == null) {
        unsetIsCitation();
      } else {
        setIsCitation((java.lang.Boolean)value);
      }
      break;

    case IS_ABSTRACT:
      if (value == null) {
        unsetIsAbstract();
      } else {
        setIsAbstract((java.lang.Boolean)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMapRef>)value);
      }
      break;

    case CITED_ELEMENT:
      if (value == null) {
        unsetCitedElement();
      } else {
        setCitedElement((TDDIAbstractBaseElement)value);
      }
      break;

    case DECOMPOSITION_ARGUMENT:
      if (value == null) {
        unsetDecompositionArgument();
      } else {
        setDecompositionArgument((java.lang.String)value);
      }
      break;

    case REFINED_REQUIREMENTS:
      if (value == null) {
        unsetRefinedRequirements();
      } else {
        setRefinedRequirements((java.util.List<TDDIAbstractDependabilityRequirementRef>)value);
      }
      break;

    case REQUIREMENT_SOURCE:
      if (value == null) {
        unsetRequirementSource();
      } else {
        setRequirementSource((TDDIAbstractRequirementSource)value);
      }
      break;

    case MEASURES:
      if (value == null) {
        unsetMeasures();
      } else {
        setMeasures((java.util.List<TDDIAbstractMeasureRef>)value);
      }
      break;

    case FAILURE_MODES:
      if (value == null) {
        unsetFailureModes();
      } else {
        setFailureModes((java.util.List<TDDIAbstractFailureRef>)value);
      }
      break;

    case ASSURANCE_LEVEL:
      if (value == null) {
        unsetAssuranceLevel();
      } else {
        setAssuranceLevel((TDDIAssuranceLevel)value);
      }
      break;

    case MAINTENANCE_PROCEDURES:
      if (value == null) {
        unsetMaintenanceProcedures();
      } else {
        setMaintenanceProcedures((java.util.List<TDDIMaintenanceProcedureRef>)value);
      }
      break;

    case HAZARDS:
      if (value == null) {
        unsetHazards();
      } else {
        setHazards((java.util.List<TDDIHazardRef>)value);
      }
      break;

    case FAILURE_REACTION_TIME:
      if (value == null) {
        unsetFailureReactionTime();
      } else {
        setFailureReactionTime((java.lang.Double)value);
      }
      break;

    case FAILURE_DETECTION_TIME:
      if (value == null) {
        unsetFailureDetectionTime();
      } else {
        setFailureDetectionTime((java.lang.Double)value);
      }
      break;

    case FAILURE_LATENCY_TIME:
      if (value == null) {
        unsetFailureLatencyTime();
      } else {
        setFailureLatencyTime((java.lang.Double)value);
      }
      break;

    case IS_SAFETY_GOAL:
      if (value == null) {
        unsetIsSafetyGoal();
      } else {
        setIsSafetyGoal((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case IS_CITATION:
      return isIsCitation();

    case IS_ABSTRACT:
      return isIsAbstract();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case CITED_ELEMENT:
      return getCitedElement();

    case DECOMPOSITION_ARGUMENT:
      return getDecompositionArgument();

    case REFINED_REQUIREMENTS:
      return getRefinedRequirements();

    case REQUIREMENT_SOURCE:
      return getRequirementSource();

    case MEASURES:
      return getMeasures();

    case FAILURE_MODES:
      return getFailureModes();

    case ASSURANCE_LEVEL:
      return getAssuranceLevel();

    case MAINTENANCE_PROCEDURES:
      return getMaintenanceProcedures();

    case HAZARDS:
      return getHazards();

    case FAILURE_REACTION_TIME:
      return getFailureReactionTime();

    case FAILURE_DETECTION_TIME:
      return getFailureDetectionTime();

    case FAILURE_LATENCY_TIME:
      return getFailureLatencyTime();

    case IS_SAFETY_GOAL:
      return isIsSafetyGoal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case IS_CITATION:
      return isSetIsCitation();
    case IS_ABSTRACT:
      return isSetIsAbstract();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case CITED_ELEMENT:
      return isSetCitedElement();
    case DECOMPOSITION_ARGUMENT:
      return isSetDecompositionArgument();
    case REFINED_REQUIREMENTS:
      return isSetRefinedRequirements();
    case REQUIREMENT_SOURCE:
      return isSetRequirementSource();
    case MEASURES:
      return isSetMeasures();
    case FAILURE_MODES:
      return isSetFailureModes();
    case ASSURANCE_LEVEL:
      return isSetAssuranceLevel();
    case MAINTENANCE_PROCEDURES:
      return isSetMaintenanceProcedures();
    case HAZARDS:
      return isSetHazards();
    case FAILURE_REACTION_TIME:
      return isSetFailureReactionTime();
    case FAILURE_DETECTION_TIME:
      return isSetFailureDetectionTime();
    case FAILURE_LATENCY_TIME:
      return isSetFailureLatencyTime();
    case IS_SAFETY_GOAL:
      return isSetIsSafetyGoal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDISafetyRequirement)
      return this.equals((TDDISafetyRequirement)that);
    return false;
  }

  public boolean equals(TDDISafetyRequirement that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_IsCitation = true;
    boolean that_present_IsCitation = true;
    if (this_present_IsCitation || that_present_IsCitation) {
      if (!(this_present_IsCitation && that_present_IsCitation))
        return false;
      if (this.IsCitation != that.IsCitation)
        return false;
    }

    boolean this_present_IsAbstract = true;
    boolean that_present_IsAbstract = true;
    if (this_present_IsAbstract || that_present_IsAbstract) {
      if (!(this_present_IsAbstract && that_present_IsAbstract))
        return false;
      if (this.IsAbstract != that.IsAbstract)
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_CitedElement = true && this.isSetCitedElement();
    boolean that_present_CitedElement = true && that.isSetCitedElement();
    if (this_present_CitedElement || that_present_CitedElement) {
      if (!(this_present_CitedElement && that_present_CitedElement))
        return false;
      if (!this.CitedElement.equals(that.CitedElement))
        return false;
    }

    boolean this_present_DecompositionArgument = true && this.isSetDecompositionArgument();
    boolean that_present_DecompositionArgument = true && that.isSetDecompositionArgument();
    if (this_present_DecompositionArgument || that_present_DecompositionArgument) {
      if (!(this_present_DecompositionArgument && that_present_DecompositionArgument))
        return false;
      if (!this.DecompositionArgument.equals(that.DecompositionArgument))
        return false;
    }

    boolean this_present_RefinedRequirements = true && this.isSetRefinedRequirements();
    boolean that_present_RefinedRequirements = true && that.isSetRefinedRequirements();
    if (this_present_RefinedRequirements || that_present_RefinedRequirements) {
      if (!(this_present_RefinedRequirements && that_present_RefinedRequirements))
        return false;
      if (!this.RefinedRequirements.equals(that.RefinedRequirements))
        return false;
    }

    boolean this_present_RequirementSource = true && this.isSetRequirementSource();
    boolean that_present_RequirementSource = true && that.isSetRequirementSource();
    if (this_present_RequirementSource || that_present_RequirementSource) {
      if (!(this_present_RequirementSource && that_present_RequirementSource))
        return false;
      if (!this.RequirementSource.equals(that.RequirementSource))
        return false;
    }

    boolean this_present_Measures = true && this.isSetMeasures();
    boolean that_present_Measures = true && that.isSetMeasures();
    if (this_present_Measures || that_present_Measures) {
      if (!(this_present_Measures && that_present_Measures))
        return false;
      if (!this.Measures.equals(that.Measures))
        return false;
    }

    boolean this_present_FailureModes = true && this.isSetFailureModes();
    boolean that_present_FailureModes = true && that.isSetFailureModes();
    if (this_present_FailureModes || that_present_FailureModes) {
      if (!(this_present_FailureModes && that_present_FailureModes))
        return false;
      if (!this.FailureModes.equals(that.FailureModes))
        return false;
    }

    boolean this_present_AssuranceLevel = true && this.isSetAssuranceLevel();
    boolean that_present_AssuranceLevel = true && that.isSetAssuranceLevel();
    if (this_present_AssuranceLevel || that_present_AssuranceLevel) {
      if (!(this_present_AssuranceLevel && that_present_AssuranceLevel))
        return false;
      if (!this.AssuranceLevel.equals(that.AssuranceLevel))
        return false;
    }

    boolean this_present_MaintenanceProcedures = true && this.isSetMaintenanceProcedures();
    boolean that_present_MaintenanceProcedures = true && that.isSetMaintenanceProcedures();
    if (this_present_MaintenanceProcedures || that_present_MaintenanceProcedures) {
      if (!(this_present_MaintenanceProcedures && that_present_MaintenanceProcedures))
        return false;
      if (!this.MaintenanceProcedures.equals(that.MaintenanceProcedures))
        return false;
    }

    boolean this_present_Hazards = true && this.isSetHazards();
    boolean that_present_Hazards = true && that.isSetHazards();
    if (this_present_Hazards || that_present_Hazards) {
      if (!(this_present_Hazards && that_present_Hazards))
        return false;
      if (!this.Hazards.equals(that.Hazards))
        return false;
    }

    boolean this_present_FailureReactionTime = true;
    boolean that_present_FailureReactionTime = true;
    if (this_present_FailureReactionTime || that_present_FailureReactionTime) {
      if (!(this_present_FailureReactionTime && that_present_FailureReactionTime))
        return false;
      if (this.FailureReactionTime != that.FailureReactionTime)
        return false;
    }

    boolean this_present_FailureDetectionTime = true;
    boolean that_present_FailureDetectionTime = true;
    if (this_present_FailureDetectionTime || that_present_FailureDetectionTime) {
      if (!(this_present_FailureDetectionTime && that_present_FailureDetectionTime))
        return false;
      if (this.FailureDetectionTime != that.FailureDetectionTime)
        return false;
    }

    boolean this_present_FailureLatencyTime = true;
    boolean that_present_FailureLatencyTime = true;
    if (this_present_FailureLatencyTime || that_present_FailureLatencyTime) {
      if (!(this_present_FailureLatencyTime && that_present_FailureLatencyTime))
        return false;
      if (this.FailureLatencyTime != that.FailureLatencyTime)
        return false;
    }

    boolean this_present_IsSafetyGoal = true;
    boolean that_present_IsSafetyGoal = true;
    if (this_present_IsSafetyGoal || that_present_IsSafetyGoal) {
      if (!(this_present_IsSafetyGoal && that_present_IsSafetyGoal))
        return false;
      if (this.IsSafetyGoal != that.IsSafetyGoal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((IsCitation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((IsAbstract) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetCitedElement()) ? 131071 : 524287);
    if (isSetCitedElement())
      hashCode = hashCode * 8191 + CitedElement.hashCode();

    hashCode = hashCode * 8191 + ((isSetDecompositionArgument()) ? 131071 : 524287);
    if (isSetDecompositionArgument())
      hashCode = hashCode * 8191 + DecompositionArgument.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefinedRequirements()) ? 131071 : 524287);
    if (isSetRefinedRequirements())
      hashCode = hashCode * 8191 + RefinedRequirements.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequirementSource()) ? 131071 : 524287);
    if (isSetRequirementSource())
      hashCode = hashCode * 8191 + RequirementSource.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeasures()) ? 131071 : 524287);
    if (isSetMeasures())
      hashCode = hashCode * 8191 + Measures.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailureModes()) ? 131071 : 524287);
    if (isSetFailureModes())
      hashCode = hashCode * 8191 + FailureModes.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssuranceLevel()) ? 131071 : 524287);
    if (isSetAssuranceLevel())
      hashCode = hashCode * 8191 + AssuranceLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaintenanceProcedures()) ? 131071 : 524287);
    if (isSetMaintenanceProcedures())
      hashCode = hashCode * 8191 + MaintenanceProcedures.hashCode();

    hashCode = hashCode * 8191 + ((isSetHazards()) ? 131071 : 524287);
    if (isSetHazards())
      hashCode = hashCode * 8191 + Hazards.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(FailureReactionTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(FailureDetectionTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(FailureLatencyTime);

    hashCode = hashCode * 8191 + ((IsSafetyGoal) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TDDISafetyRequirement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsCitation()).compareTo(other.isSetIsCitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCitation, other.IsCitation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsAbstract()).compareTo(other.isSetIsAbstract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAbstract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsAbstract, other.IsAbstract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCitedElement()).compareTo(other.isSetCitedElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCitedElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CitedElement, other.CitedElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDecompositionArgument()).compareTo(other.isSetDecompositionArgument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecompositionArgument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DecompositionArgument, other.DecompositionArgument);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRefinedRequirements()).compareTo(other.isSetRefinedRequirements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefinedRequirements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RefinedRequirements, other.RefinedRequirements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequirementSource()).compareTo(other.isSetRequirementSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequirementSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RequirementSource, other.RequirementSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMeasures()).compareTo(other.isSetMeasures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Measures, other.Measures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureModes()).compareTo(other.isSetFailureModes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureModes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureModes, other.FailureModes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssuranceLevel()).compareTo(other.isSetAssuranceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssuranceLevel, other.AssuranceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaintenanceProcedures()).compareTo(other.isSetMaintenanceProcedures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceProcedures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MaintenanceProcedures, other.MaintenanceProcedures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHazards()).compareTo(other.isSetHazards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHazards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Hazards, other.Hazards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureReactionTime()).compareTo(other.isSetFailureReactionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureReactionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureReactionTime, other.FailureReactionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureDetectionTime()).compareTo(other.isSetFailureDetectionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureDetectionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureDetectionTime, other.FailureDetectionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureLatencyTime()).compareTo(other.isSetFailureLatencyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureLatencyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureLatencyTime, other.FailureLatencyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsSafetyGoal()).compareTo(other.isSetIsSafetyGoal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSafetyGoal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsSafetyGoal, other.IsSafetyGoal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDISafetyRequirement(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCitation:");
    sb.append(this.IsCitation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsAbstract:");
    sb.append(this.IsAbstract);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CitedElement:");
    if (this.CitedElement == null) {
      sb.append("null");
    } else {
      sb.append(this.CitedElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DecompositionArgument:");
    if (this.DecompositionArgument == null) {
      sb.append("null");
    } else {
      sb.append(this.DecompositionArgument);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RefinedRequirements:");
    if (this.RefinedRequirements == null) {
      sb.append("null");
    } else {
      sb.append(this.RefinedRequirements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequirementSource:");
    if (this.RequirementSource == null) {
      sb.append("null");
    } else {
      sb.append(this.RequirementSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Measures:");
    if (this.Measures == null) {
      sb.append("null");
    } else {
      sb.append(this.Measures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureModes:");
    if (this.FailureModes == null) {
      sb.append("null");
    } else {
      sb.append(this.FailureModes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssuranceLevel:");
    if (this.AssuranceLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.AssuranceLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MaintenanceProcedures:");
    if (this.MaintenanceProcedures == null) {
      sb.append("null");
    } else {
      sb.append(this.MaintenanceProcedures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Hazards:");
    if (this.Hazards == null) {
      sb.append("null");
    } else {
      sb.append(this.Hazards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureReactionTime:");
    sb.append(this.FailureReactionTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureDetectionTime:");
    sb.append(this.FailureDetectionTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureLatencyTime:");
    sb.append(this.FailureLatencyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsSafetyGoal:");
    sb.append(this.IsSafetyGoal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (CitedElement != null) {
      CitedElement.validate();
    }
    if (RequirementSource != null) {
      RequirementSource.validate();
    }
    if (AssuranceLevel != null) {
      AssuranceLevel.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDISafetyRequirementStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDISafetyRequirementStandardScheme getScheme() {
      return new TDDISafetyRequirementStandardScheme();
    }
  }

  private static class TDDISafetyRequirementStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDISafetyRequirement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDISafetyRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_CITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsCitation = iprot.readBool();
              struct.setIsCitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ABSTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsAbstract = iprot.readBool();
              struct.setIsAbstractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1824 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(_list1824.size);
                TDDIKeyValueMapRef _elem1825;
                for (int _i1826 = 0; _i1826 < _list1824.size; ++_i1826)
                {
                  _elem1825 = new TDDIKeyValueMapRef();
                  _elem1825.read(iprot);
                  struct.KeyValueMaps.add(_elem1825);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CITED_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.CitedElement = new TDDIAbstractBaseElement();
              struct.CitedElement.read(iprot);
              struct.setCitedElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DECOMPOSITION_ARGUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DecompositionArgument = iprot.readString();
              struct.setDecompositionArgumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REFINED_REQUIREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1827 = iprot.readListBegin();
                struct.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list1827.size);
                TDDIAbstractDependabilityRequirementRef _elem1828;
                for (int _i1829 = 0; _i1829 < _list1827.size; ++_i1829)
                {
                  _elem1828 = new TDDIAbstractDependabilityRequirementRef();
                  _elem1828.read(iprot);
                  struct.RefinedRequirements.add(_elem1828);
                }
                iprot.readListEnd();
              }
              struct.setRefinedRequirementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUIREMENT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.RequirementSource = new TDDIAbstractRequirementSource();
              struct.RequirementSource.read(iprot);
              struct.setRequirementSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MEASURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1830 = iprot.readListBegin();
                struct.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>(_list1830.size);
                TDDIAbstractMeasureRef _elem1831;
                for (int _i1832 = 0; _i1832 < _list1830.size; ++_i1832)
                {
                  _elem1831 = new TDDIAbstractMeasureRef();
                  _elem1831.read(iprot);
                  struct.Measures.add(_elem1831);
                }
                iprot.readListEnd();
              }
              struct.setMeasuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FAILURE_MODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1833 = iprot.readListBegin();
                struct.FailureModes = new java.util.ArrayList<TDDIAbstractFailureRef>(_list1833.size);
                TDDIAbstractFailureRef _elem1834;
                for (int _i1835 = 0; _i1835 < _list1833.size; ++_i1835)
                {
                  _elem1834 = new TDDIAbstractFailureRef();
                  _elem1834.read(iprot);
                  struct.FailureModes.add(_elem1834);
                }
                iprot.readListEnd();
              }
              struct.setFailureModesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ASSURANCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AssuranceLevel = new TDDIAssuranceLevel();
              struct.AssuranceLevel.read(iprot);
              struct.setAssuranceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MAINTENANCE_PROCEDURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1836 = iprot.readListBegin();
                struct.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>(_list1836.size);
                TDDIMaintenanceProcedureRef _elem1837;
                for (int _i1838 = 0; _i1838 < _list1836.size; ++_i1838)
                {
                  _elem1837 = new TDDIMaintenanceProcedureRef();
                  _elem1837.read(iprot);
                  struct.MaintenanceProcedures.add(_elem1837);
                }
                iprot.readListEnd();
              }
              struct.setMaintenanceProceduresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HAZARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1839 = iprot.readListBegin();
                struct.Hazards = new java.util.ArrayList<TDDIHazardRef>(_list1839.size);
                TDDIHazardRef _elem1840;
                for (int _i1841 = 0; _i1841 < _list1839.size; ++_i1841)
                {
                  _elem1840 = new TDDIHazardRef();
                  _elem1840.read(iprot);
                  struct.Hazards.add(_elem1840);
                }
                iprot.readListEnd();
              }
              struct.setHazardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FAILURE_REACTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.FailureReactionTime = iprot.readDouble();
              struct.setFailureReactionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FAILURE_DETECTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.FailureDetectionTime = iprot.readDouble();
              struct.setFailureDetectionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FAILURE_LATENCY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.FailureLatencyTime = iprot.readDouble();
              struct.setFailureLatencyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_SAFETY_GOAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsSafetyGoal = iprot.readBool();
              struct.setIsSafetyGoalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDISafetyRequirement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CITATION_FIELD_DESC);
      oprot.writeBool(struct.IsCitation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ABSTRACT_FIELD_DESC);
      oprot.writeBool(struct.IsAbstract);
      oprot.writeFieldEnd();
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMapRef _iter1842 : struct.KeyValueMaps)
          {
            _iter1842.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CitedElement != null) {
        oprot.writeFieldBegin(CITED_ELEMENT_FIELD_DESC);
        struct.CitedElement.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.DecompositionArgument != null) {
        oprot.writeFieldBegin(DECOMPOSITION_ARGUMENT_FIELD_DESC);
        oprot.writeString(struct.DecompositionArgument);
        oprot.writeFieldEnd();
      }
      if (struct.RefinedRequirements != null) {
        oprot.writeFieldBegin(REFINED_REQUIREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.RefinedRequirements.size()));
          for (TDDIAbstractDependabilityRequirementRef _iter1843 : struct.RefinedRequirements)
          {
            _iter1843.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.RequirementSource != null) {
        oprot.writeFieldBegin(REQUIREMENT_SOURCE_FIELD_DESC);
        struct.RequirementSource.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Measures != null) {
        oprot.writeFieldBegin(MEASURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Measures.size()));
          for (TDDIAbstractMeasureRef _iter1844 : struct.Measures)
          {
            _iter1844.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.FailureModes != null) {
        oprot.writeFieldBegin(FAILURE_MODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FailureModes.size()));
          for (TDDIAbstractFailureRef _iter1845 : struct.FailureModes)
          {
            _iter1845.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AssuranceLevel != null) {
        oprot.writeFieldBegin(ASSURANCE_LEVEL_FIELD_DESC);
        struct.AssuranceLevel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.MaintenanceProcedures != null) {
        oprot.writeFieldBegin(MAINTENANCE_PROCEDURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.MaintenanceProcedures.size()));
          for (TDDIMaintenanceProcedureRef _iter1846 : struct.MaintenanceProcedures)
          {
            _iter1846.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Hazards != null) {
        oprot.writeFieldBegin(HAZARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Hazards.size()));
          for (TDDIHazardRef _iter1847 : struct.Hazards)
          {
            _iter1847.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FAILURE_REACTION_TIME_FIELD_DESC);
      oprot.writeDouble(struct.FailureReactionTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAILURE_DETECTION_TIME_FIELD_DESC);
      oprot.writeDouble(struct.FailureDetectionTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAILURE_LATENCY_TIME_FIELD_DESC);
      oprot.writeDouble(struct.FailureLatencyTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SAFETY_GOAL_FIELD_DESC);
      oprot.writeBool(struct.IsSafetyGoal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDISafetyRequirementTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDISafetyRequirementTupleScheme getScheme() {
      return new TDDISafetyRequirementTupleScheme();
    }
  }

  private static class TDDISafetyRequirementTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDISafetyRequirement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDISafetyRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetIsCitation()) {
        optionals.set(3);
      }
      if (struct.isSetIsAbstract()) {
        optionals.set(4);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(5);
      }
      if (struct.isSetCitedElement()) {
        optionals.set(6);
      }
      if (struct.isSetDecompositionArgument()) {
        optionals.set(7);
      }
      if (struct.isSetRefinedRequirements()) {
        optionals.set(8);
      }
      if (struct.isSetRequirementSource()) {
        optionals.set(9);
      }
      if (struct.isSetMeasures()) {
        optionals.set(10);
      }
      if (struct.isSetFailureModes()) {
        optionals.set(11);
      }
      if (struct.isSetAssuranceLevel()) {
        optionals.set(12);
      }
      if (struct.isSetMaintenanceProcedures()) {
        optionals.set(13);
      }
      if (struct.isSetHazards()) {
        optionals.set(14);
      }
      if (struct.isSetFailureReactionTime()) {
        optionals.set(15);
      }
      if (struct.isSetFailureDetectionTime()) {
        optionals.set(16);
      }
      if (struct.isSetFailureLatencyTime()) {
        optionals.set(17);
      }
      if (struct.isSetIsSafetyGoal()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetIsCitation()) {
        oprot.writeBool(struct.IsCitation);
      }
      if (struct.isSetIsAbstract()) {
        oprot.writeBool(struct.IsAbstract);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMapRef _iter1848 : struct.KeyValueMaps)
          {
            _iter1848.write(oprot);
          }
        }
      }
      if (struct.isSetCitedElement()) {
        struct.CitedElement.write(oprot);
      }
      if (struct.isSetDecompositionArgument()) {
        oprot.writeString(struct.DecompositionArgument);
      }
      if (struct.isSetRefinedRequirements()) {
        {
          oprot.writeI32(struct.RefinedRequirements.size());
          for (TDDIAbstractDependabilityRequirementRef _iter1849 : struct.RefinedRequirements)
          {
            _iter1849.write(oprot);
          }
        }
      }
      if (struct.isSetRequirementSource()) {
        struct.RequirementSource.write(oprot);
      }
      if (struct.isSetMeasures()) {
        {
          oprot.writeI32(struct.Measures.size());
          for (TDDIAbstractMeasureRef _iter1850 : struct.Measures)
          {
            _iter1850.write(oprot);
          }
        }
      }
      if (struct.isSetFailureModes()) {
        {
          oprot.writeI32(struct.FailureModes.size());
          for (TDDIAbstractFailureRef _iter1851 : struct.FailureModes)
          {
            _iter1851.write(oprot);
          }
        }
      }
      if (struct.isSetAssuranceLevel()) {
        struct.AssuranceLevel.write(oprot);
      }
      if (struct.isSetMaintenanceProcedures()) {
        {
          oprot.writeI32(struct.MaintenanceProcedures.size());
          for (TDDIMaintenanceProcedureRef _iter1852 : struct.MaintenanceProcedures)
          {
            _iter1852.write(oprot);
          }
        }
      }
      if (struct.isSetHazards()) {
        {
          oprot.writeI32(struct.Hazards.size());
          for (TDDIHazardRef _iter1853 : struct.Hazards)
          {
            _iter1853.write(oprot);
          }
        }
      }
      if (struct.isSetFailureReactionTime()) {
        oprot.writeDouble(struct.FailureReactionTime);
      }
      if (struct.isSetFailureDetectionTime()) {
        oprot.writeDouble(struct.FailureDetectionTime);
      }
      if (struct.isSetFailureLatencyTime()) {
        oprot.writeDouble(struct.FailureLatencyTime);
      }
      if (struct.isSetIsSafetyGoal()) {
        oprot.writeBool(struct.IsSafetyGoal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDISafetyRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.IsCitation = iprot.readBool();
        struct.setIsCitationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.IsAbstract = iprot.readBool();
        struct.setIsAbstractIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list1854 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(_list1854.size);
          TDDIKeyValueMapRef _elem1855;
          for (int _i1856 = 0; _i1856 < _list1854.size; ++_i1856)
          {
            _elem1855 = new TDDIKeyValueMapRef();
            _elem1855.read(iprot);
            struct.KeyValueMaps.add(_elem1855);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.CitedElement = new TDDIAbstractBaseElement();
        struct.CitedElement.read(iprot);
        struct.setCitedElementIsSet(true);
      }
      if (incoming.get(7)) {
        struct.DecompositionArgument = iprot.readString();
        struct.setDecompositionArgumentIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list1857 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list1857.size);
          TDDIAbstractDependabilityRequirementRef _elem1858;
          for (int _i1859 = 0; _i1859 < _list1857.size; ++_i1859)
          {
            _elem1858 = new TDDIAbstractDependabilityRequirementRef();
            _elem1858.read(iprot);
            struct.RefinedRequirements.add(_elem1858);
          }
        }
        struct.setRefinedRequirementsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.RequirementSource = new TDDIAbstractRequirementSource();
        struct.RequirementSource.read(iprot);
        struct.setRequirementSourceIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list1860 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>(_list1860.size);
          TDDIAbstractMeasureRef _elem1861;
          for (int _i1862 = 0; _i1862 < _list1860.size; ++_i1862)
          {
            _elem1861 = new TDDIAbstractMeasureRef();
            _elem1861.read(iprot);
            struct.Measures.add(_elem1861);
          }
        }
        struct.setMeasuresIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list1863 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FailureModes = new java.util.ArrayList<TDDIAbstractFailureRef>(_list1863.size);
          TDDIAbstractFailureRef _elem1864;
          for (int _i1865 = 0; _i1865 < _list1863.size; ++_i1865)
          {
            _elem1864 = new TDDIAbstractFailureRef();
            _elem1864.read(iprot);
            struct.FailureModes.add(_elem1864);
          }
        }
        struct.setFailureModesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.AssuranceLevel = new TDDIAssuranceLevel();
        struct.AssuranceLevel.read(iprot);
        struct.setAssuranceLevelIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list1866 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>(_list1866.size);
          TDDIMaintenanceProcedureRef _elem1867;
          for (int _i1868 = 0; _i1868 < _list1866.size; ++_i1868)
          {
            _elem1867 = new TDDIMaintenanceProcedureRef();
            _elem1867.read(iprot);
            struct.MaintenanceProcedures.add(_elem1867);
          }
        }
        struct.setMaintenanceProceduresIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list1869 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Hazards = new java.util.ArrayList<TDDIHazardRef>(_list1869.size);
          TDDIHazardRef _elem1870;
          for (int _i1871 = 0; _i1871 < _list1869.size; ++_i1871)
          {
            _elem1870 = new TDDIHazardRef();
            _elem1870.read(iprot);
            struct.Hazards.add(_elem1870);
          }
        }
        struct.setHazardsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.FailureReactionTime = iprot.readDouble();
        struct.setFailureReactionTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.FailureDetectionTime = iprot.readDouble();
        struct.setFailureDetectionTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.FailureLatencyTime = iprot.readDouble();
        struct.setFailureLatencyTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.IsSafetyGoal = iprot.readBool();
        struct.setIsSafetyGoalIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

