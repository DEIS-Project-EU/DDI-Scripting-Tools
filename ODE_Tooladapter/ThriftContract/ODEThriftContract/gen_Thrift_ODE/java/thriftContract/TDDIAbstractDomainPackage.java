/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDIAbstractDomainPackage implements org.apache.thrift.TBase<TDDIAbstractDomainPackage, TDDIAbstractDomainPackage._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractDomainPackage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractDomainPackage");

  private static final org.apache.thrift.protocol.TField USED_DOMAIN_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedDomainPackage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_DOMAIN_PACKAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedDomainPackageType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractDomainPackageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractDomainPackageTupleSchemeFactory();

  public TDDIDomainPackageUnion UsedDomainPackage; // required
  /**
   * 
   * @see TDDIAbstractDomainPackageType
   */
  public TDDIAbstractDomainPackageType UsedDomainPackageType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_DOMAIN_PACKAGE((short)1, "UsedDomainPackage"),
    /**
     * 
     * @see TDDIAbstractDomainPackageType
     */
    USED_DOMAIN_PACKAGE_TYPE((short)2, "UsedDomainPackageType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_DOMAIN_PACKAGE
          return USED_DOMAIN_PACKAGE;
        case 2: // USED_DOMAIN_PACKAGE_TYPE
          return USED_DOMAIN_PACKAGE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_DOMAIN_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("UsedDomainPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIDomainPackageUnion.class)));
    tmpMap.put(_Fields.USED_DOMAIN_PACKAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedDomainPackageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIAbstractDomainPackageType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractDomainPackage.class, metaDataMap);
  }

  public TDDIAbstractDomainPackage() {
  }

  public TDDIAbstractDomainPackage(
    TDDIDomainPackageUnion UsedDomainPackage,
    TDDIAbstractDomainPackageType UsedDomainPackageType)
  {
    this();
    this.UsedDomainPackage = UsedDomainPackage;
    this.UsedDomainPackageType = UsedDomainPackageType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractDomainPackage(TDDIAbstractDomainPackage other) {
    if (other.isSetUsedDomainPackage()) {
      this.UsedDomainPackage = new TDDIDomainPackageUnion(other.UsedDomainPackage);
    }
    if (other.isSetUsedDomainPackageType()) {
      this.UsedDomainPackageType = other.UsedDomainPackageType;
    }
  }

  public TDDIAbstractDomainPackage deepCopy() {
    return new TDDIAbstractDomainPackage(this);
  }

  @Override
  public void clear() {
    this.UsedDomainPackage = null;
    this.UsedDomainPackageType = null;
  }

  public TDDIDomainPackageUnion getUsedDomainPackage() {
    return this.UsedDomainPackage;
  }

  public TDDIAbstractDomainPackage setUsedDomainPackage(TDDIDomainPackageUnion UsedDomainPackage) {
    this.UsedDomainPackage = UsedDomainPackage;
    return this;
  }

  public void unsetUsedDomainPackage() {
    this.UsedDomainPackage = null;
  }

  /** Returns true if field UsedDomainPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedDomainPackage() {
    return this.UsedDomainPackage != null;
  }

  public void setUsedDomainPackageIsSet(boolean value) {
    if (!value) {
      this.UsedDomainPackage = null;
    }
  }

  /**
   * 
   * @see TDDIAbstractDomainPackageType
   */
  public TDDIAbstractDomainPackageType getUsedDomainPackageType() {
    return this.UsedDomainPackageType;
  }

  /**
   * 
   * @see TDDIAbstractDomainPackageType
   */
  public TDDIAbstractDomainPackage setUsedDomainPackageType(TDDIAbstractDomainPackageType UsedDomainPackageType) {
    this.UsedDomainPackageType = UsedDomainPackageType;
    return this;
  }

  public void unsetUsedDomainPackageType() {
    this.UsedDomainPackageType = null;
  }

  /** Returns true if field UsedDomainPackageType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedDomainPackageType() {
    return this.UsedDomainPackageType != null;
  }

  public void setUsedDomainPackageTypeIsSet(boolean value) {
    if (!value) {
      this.UsedDomainPackageType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_DOMAIN_PACKAGE:
      if (value == null) {
        unsetUsedDomainPackage();
      } else {
        setUsedDomainPackage((TDDIDomainPackageUnion)value);
      }
      break;

    case USED_DOMAIN_PACKAGE_TYPE:
      if (value == null) {
        unsetUsedDomainPackageType();
      } else {
        setUsedDomainPackageType((TDDIAbstractDomainPackageType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_DOMAIN_PACKAGE:
      return getUsedDomainPackage();

    case USED_DOMAIN_PACKAGE_TYPE:
      return getUsedDomainPackageType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_DOMAIN_PACKAGE:
      return isSetUsedDomainPackage();
    case USED_DOMAIN_PACKAGE_TYPE:
      return isSetUsedDomainPackageType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractDomainPackage)
      return this.equals((TDDIAbstractDomainPackage)that);
    return false;
  }

  public boolean equals(TDDIAbstractDomainPackage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedDomainPackage = true && this.isSetUsedDomainPackage();
    boolean that_present_UsedDomainPackage = true && that.isSetUsedDomainPackage();
    if (this_present_UsedDomainPackage || that_present_UsedDomainPackage) {
      if (!(this_present_UsedDomainPackage && that_present_UsedDomainPackage))
        return false;
      if (!this.UsedDomainPackage.equals(that.UsedDomainPackage))
        return false;
    }

    boolean this_present_UsedDomainPackageType = true && this.isSetUsedDomainPackageType();
    boolean that_present_UsedDomainPackageType = true && that.isSetUsedDomainPackageType();
    if (this_present_UsedDomainPackageType || that_present_UsedDomainPackageType) {
      if (!(this_present_UsedDomainPackageType && that_present_UsedDomainPackageType))
        return false;
      if (!this.UsedDomainPackageType.equals(that.UsedDomainPackageType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedDomainPackage()) ? 131071 : 524287);
    if (isSetUsedDomainPackage())
      hashCode = hashCode * 8191 + UsedDomainPackage.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedDomainPackageType()) ? 131071 : 524287);
    if (isSetUsedDomainPackageType())
      hashCode = hashCode * 8191 + UsedDomainPackageType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractDomainPackage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedDomainPackage()).compareTo(other.isSetUsedDomainPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedDomainPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedDomainPackage, other.UsedDomainPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedDomainPackageType()).compareTo(other.isSetUsedDomainPackageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedDomainPackageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedDomainPackageType, other.UsedDomainPackageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractDomainPackage(");
    boolean first = true;

    sb.append("UsedDomainPackage:");
    if (this.UsedDomainPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedDomainPackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedDomainPackageType:");
    if (this.UsedDomainPackageType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedDomainPackageType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractDomainPackageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractDomainPackageStandardScheme getScheme() {
      return new TDDIAbstractDomainPackageStandardScheme();
    }
  }

  private static class TDDIAbstractDomainPackageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractDomainPackage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractDomainPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_DOMAIN_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedDomainPackage = new TDDIDomainPackageUnion();
              struct.UsedDomainPackage.read(iprot);
              struct.setUsedDomainPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_DOMAIN_PACKAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedDomainPackageType = thriftContract.TDDIAbstractDomainPackageType.findByValue(iprot.readI32());
              struct.setUsedDomainPackageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractDomainPackage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedDomainPackage != null) {
        oprot.writeFieldBegin(USED_DOMAIN_PACKAGE_FIELD_DESC);
        struct.UsedDomainPackage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedDomainPackageType != null) {
        oprot.writeFieldBegin(USED_DOMAIN_PACKAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedDomainPackageType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractDomainPackageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractDomainPackageTupleScheme getScheme() {
      return new TDDIAbstractDomainPackageTupleScheme();
    }
  }

  private static class TDDIAbstractDomainPackageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractDomainPackage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractDomainPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedDomainPackage()) {
        optionals.set(0);
      }
      if (struct.isSetUsedDomainPackageType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedDomainPackage()) {
        struct.UsedDomainPackage.write(oprot);
      }
      if (struct.isSetUsedDomainPackageType()) {
        oprot.writeI32(struct.UsedDomainPackageType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractDomainPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedDomainPackage = new TDDIDomainPackageUnion();
        struct.UsedDomainPackage.read(iprot);
        struct.setUsedDomainPackageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedDomainPackageType = thriftContract.TDDIAbstractDomainPackageType.findByValue(iprot.readI32());
        struct.setUsedDomainPackageTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

