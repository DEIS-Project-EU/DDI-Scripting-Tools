/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDIFTAPackageInterface implements org.apache.thrift.TBase<TDDIFTAPackageInterface, TDDIFTAPackageInterface._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIFTAPackageInterface> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIFTAPackageInterface");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_CITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCitation", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("IsAbstract", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CITED_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("CitedElement", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField FAILURE_ANALYSIS_ARTIFACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureAnalysisArtifacts", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField FTAARTIFACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("FTAArtifacts", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField BASIC_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("BasicEvents", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField IMPLEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Implements", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIFTAPackageInterfaceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIFTAPackageInterfaceTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public boolean IsCitation; // required
  public boolean IsAbstract; // required
  public java.util.List<TDDIKeyValueMapRef> KeyValueMaps; // required
  public TDDIAbstractBaseElement CitedElement; // required
  public java.util.List<TDDIAbstractFailureAnalysisArtifactRef> FailureAnalysisArtifacts; // required
  public java.util.List<TDDIAbstractFTAArtifact> FTAArtifacts; // required
  public java.util.List<TDDIBasicEvent> BasicEvents; // required
  public TDDIAbstractFTAPackage Implements; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    IS_CITATION((short)4, "IsCitation"),
    IS_ABSTRACT((short)5, "IsAbstract"),
    KEY_VALUE_MAPS((short)6, "KeyValueMaps"),
    CITED_ELEMENT((short)7, "CitedElement"),
    FAILURE_ANALYSIS_ARTIFACTS((short)8, "FailureAnalysisArtifacts"),
    FTAARTIFACTS((short)9, "FTAArtifacts"),
    BASIC_EVENTS((short)10, "BasicEvents"),
    IMPLEMENTS((short)11, "Implements");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // IS_CITATION
          return IS_CITATION;
        case 5: // IS_ABSTRACT
          return IS_ABSTRACT;
        case 6: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 7: // CITED_ELEMENT
          return CITED_ELEMENT;
        case 8: // FAILURE_ANALYSIS_ARTIFACTS
          return FAILURE_ANALYSIS_ARTIFACTS;
        case 9: // FTAARTIFACTS
          return FTAARTIFACTS;
        case 10: // BASIC_EVENTS
          return BASIC_EVENTS;
        case 11: // IMPLEMENTS
          return IMPLEMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISCITATION_ISSET_ID = 1;
  private static final int __ISABSTRACT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CITATION, new org.apache.thrift.meta_data.FieldMetaData("IsCitation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ABSTRACT, new org.apache.thrift.meta_data.FieldMetaData("IsAbstract", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMapRef.class))));
    tmpMap.put(_Fields.CITED_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("CitedElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractBaseElement.class)));
    tmpMap.put(_Fields.FAILURE_ANALYSIS_ARTIFACTS, new org.apache.thrift.meta_data.FieldMetaData("FailureAnalysisArtifacts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureAnalysisArtifactRef.class))));
    tmpMap.put(_Fields.FTAARTIFACTS, new org.apache.thrift.meta_data.FieldMetaData("FTAArtifacts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFTAArtifact.class))));
    tmpMap.put(_Fields.BASIC_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("BasicEvents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIBasicEvent.class))));
    tmpMap.put(_Fields.IMPLEMENTS, new org.apache.thrift.meta_data.FieldMetaData("Implements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractFTAPackage")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIFTAPackageInterface.class, metaDataMap);
  }

  public TDDIFTAPackageInterface() {
    this.Name = "";

    this.Description = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();

    this.FailureAnalysisArtifacts = new java.util.ArrayList<TDDIAbstractFailureAnalysisArtifactRef>();

    this.FTAArtifacts = new java.util.ArrayList<TDDIAbstractFTAArtifact>();

    this.BasicEvents = new java.util.ArrayList<TDDIBasicEvent>();

  }

  public TDDIFTAPackageInterface(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    boolean IsCitation,
    boolean IsAbstract,
    java.util.List<TDDIKeyValueMapRef> KeyValueMaps,
    TDDIAbstractBaseElement CitedElement,
    java.util.List<TDDIAbstractFailureAnalysisArtifactRef> FailureAnalysisArtifacts,
    java.util.List<TDDIAbstractFTAArtifact> FTAArtifacts,
    java.util.List<TDDIBasicEvent> BasicEvents,
    TDDIAbstractFTAPackage Implements)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    this.KeyValueMaps = KeyValueMaps;
    this.CitedElement = CitedElement;
    this.FailureAnalysisArtifacts = FailureAnalysisArtifacts;
    this.FTAArtifacts = FTAArtifacts;
    this.BasicEvents = BasicEvents;
    this.Implements = Implements;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIFTAPackageInterface(TDDIFTAPackageInterface other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    this.IsCitation = other.IsCitation;
    this.IsAbstract = other.IsAbstract;
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMapRef> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(other.KeyValueMaps.size());
      for (TDDIKeyValueMapRef other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMapRef(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetCitedElement()) {
      this.CitedElement = new TDDIAbstractBaseElement(other.CitedElement);
    }
    if (other.isSetFailureAnalysisArtifacts()) {
      java.util.List<TDDIAbstractFailureAnalysisArtifactRef> __this__FailureAnalysisArtifacts = new java.util.ArrayList<TDDIAbstractFailureAnalysisArtifactRef>(other.FailureAnalysisArtifacts.size());
      for (TDDIAbstractFailureAnalysisArtifactRef other_element : other.FailureAnalysisArtifacts) {
        __this__FailureAnalysisArtifacts.add(new TDDIAbstractFailureAnalysisArtifactRef(other_element));
      }
      this.FailureAnalysisArtifacts = __this__FailureAnalysisArtifacts;
    }
    if (other.isSetFTAArtifacts()) {
      java.util.List<TDDIAbstractFTAArtifact> __this__FTAArtifacts = new java.util.ArrayList<TDDIAbstractFTAArtifact>(other.FTAArtifacts.size());
      for (TDDIAbstractFTAArtifact other_element : other.FTAArtifacts) {
        __this__FTAArtifacts.add(new TDDIAbstractFTAArtifact(other_element));
      }
      this.FTAArtifacts = __this__FTAArtifacts;
    }
    if (other.isSetBasicEvents()) {
      java.util.List<TDDIBasicEvent> __this__BasicEvents = new java.util.ArrayList<TDDIBasicEvent>(other.BasicEvents.size());
      for (TDDIBasicEvent other_element : other.BasicEvents) {
        __this__BasicEvents.add(new TDDIBasicEvent(other_element));
      }
      this.BasicEvents = __this__BasicEvents;
    }
    if (other.isSetImplements()) {
      this.Implements = new TDDIAbstractFTAPackage(other.Implements);
    }
  }

  public TDDIFTAPackageInterface deepCopy() {
    return new TDDIFTAPackageInterface(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();

    this.CitedElement = null;
    this.FailureAnalysisArtifacts = new java.util.ArrayList<TDDIAbstractFailureAnalysisArtifactRef>();

    this.FTAArtifacts = new java.util.ArrayList<TDDIAbstractFTAArtifact>();

    this.BasicEvents = new java.util.ArrayList<TDDIBasicEvent>();

    this.Implements = null;
  }

  public long getId() {
    return this.Id;
  }

  public TDDIFTAPackageInterface setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIFTAPackageInterface setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIFTAPackageInterface setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public boolean isIsCitation() {
    return this.IsCitation;
  }

  public TDDIFTAPackageInterface setIsCitation(boolean IsCitation) {
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    return this;
  }

  public void unsetIsCitation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  /** Returns true if field IsCitation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCitation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  public void setIsCitationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCITATION_ISSET_ID, value);
  }

  public boolean isIsAbstract() {
    return this.IsAbstract;
  }

  public TDDIFTAPackageInterface setIsAbstract(boolean IsAbstract) {
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    return this;
  }

  public void unsetIsAbstract() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  /** Returns true if field IsAbstract is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAbstract() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  public void setIsAbstractIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISABSTRACT_ISSET_ID, value);
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMapRef> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMapRef elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMapRef> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIFTAPackageInterface setKeyValueMaps(java.util.List<TDDIKeyValueMapRef> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public TDDIAbstractBaseElement getCitedElement() {
    return this.CitedElement;
  }

  public TDDIFTAPackageInterface setCitedElement(TDDIAbstractBaseElement CitedElement) {
    this.CitedElement = CitedElement;
    return this;
  }

  public void unsetCitedElement() {
    this.CitedElement = null;
  }

  /** Returns true if field CitedElement is set (has been assigned a value) and false otherwise */
  public boolean isSetCitedElement() {
    return this.CitedElement != null;
  }

  public void setCitedElementIsSet(boolean value) {
    if (!value) {
      this.CitedElement = null;
    }
  }

  public int getFailureAnalysisArtifactsSize() {
    return (this.FailureAnalysisArtifacts == null) ? 0 : this.FailureAnalysisArtifacts.size();
  }

  public java.util.Iterator<TDDIAbstractFailureAnalysisArtifactRef> getFailureAnalysisArtifactsIterator() {
    return (this.FailureAnalysisArtifacts == null) ? null : this.FailureAnalysisArtifacts.iterator();
  }

  public void addToFailureAnalysisArtifacts(TDDIAbstractFailureAnalysisArtifactRef elem) {
    if (this.FailureAnalysisArtifacts == null) {
      this.FailureAnalysisArtifacts = new java.util.ArrayList<TDDIAbstractFailureAnalysisArtifactRef>();
    }
    this.FailureAnalysisArtifacts.add(elem);
  }

  public java.util.List<TDDIAbstractFailureAnalysisArtifactRef> getFailureAnalysisArtifacts() {
    return this.FailureAnalysisArtifacts;
  }

  public TDDIFTAPackageInterface setFailureAnalysisArtifacts(java.util.List<TDDIAbstractFailureAnalysisArtifactRef> FailureAnalysisArtifacts) {
    this.FailureAnalysisArtifacts = FailureAnalysisArtifacts;
    return this;
  }

  public void unsetFailureAnalysisArtifacts() {
    this.FailureAnalysisArtifacts = null;
  }

  /** Returns true if field FailureAnalysisArtifacts is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureAnalysisArtifacts() {
    return this.FailureAnalysisArtifacts != null;
  }

  public void setFailureAnalysisArtifactsIsSet(boolean value) {
    if (!value) {
      this.FailureAnalysisArtifacts = null;
    }
  }

  public int getFTAArtifactsSize() {
    return (this.FTAArtifacts == null) ? 0 : this.FTAArtifacts.size();
  }

  public java.util.Iterator<TDDIAbstractFTAArtifact> getFTAArtifactsIterator() {
    return (this.FTAArtifacts == null) ? null : this.FTAArtifacts.iterator();
  }

  public void addToFTAArtifacts(TDDIAbstractFTAArtifact elem) {
    if (this.FTAArtifacts == null) {
      this.FTAArtifacts = new java.util.ArrayList<TDDIAbstractFTAArtifact>();
    }
    this.FTAArtifacts.add(elem);
  }

  public java.util.List<TDDIAbstractFTAArtifact> getFTAArtifacts() {
    return this.FTAArtifacts;
  }

  public TDDIFTAPackageInterface setFTAArtifacts(java.util.List<TDDIAbstractFTAArtifact> FTAArtifacts) {
    this.FTAArtifacts = FTAArtifacts;
    return this;
  }

  public void unsetFTAArtifacts() {
    this.FTAArtifacts = null;
  }

  /** Returns true if field FTAArtifacts is set (has been assigned a value) and false otherwise */
  public boolean isSetFTAArtifacts() {
    return this.FTAArtifacts != null;
  }

  public void setFTAArtifactsIsSet(boolean value) {
    if (!value) {
      this.FTAArtifacts = null;
    }
  }

  public int getBasicEventsSize() {
    return (this.BasicEvents == null) ? 0 : this.BasicEvents.size();
  }

  public java.util.Iterator<TDDIBasicEvent> getBasicEventsIterator() {
    return (this.BasicEvents == null) ? null : this.BasicEvents.iterator();
  }

  public void addToBasicEvents(TDDIBasicEvent elem) {
    if (this.BasicEvents == null) {
      this.BasicEvents = new java.util.ArrayList<TDDIBasicEvent>();
    }
    this.BasicEvents.add(elem);
  }

  public java.util.List<TDDIBasicEvent> getBasicEvents() {
    return this.BasicEvents;
  }

  public TDDIFTAPackageInterface setBasicEvents(java.util.List<TDDIBasicEvent> BasicEvents) {
    this.BasicEvents = BasicEvents;
    return this;
  }

  public void unsetBasicEvents() {
    this.BasicEvents = null;
  }

  /** Returns true if field BasicEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetBasicEvents() {
    return this.BasicEvents != null;
  }

  public void setBasicEventsIsSet(boolean value) {
    if (!value) {
      this.BasicEvents = null;
    }
  }

  public TDDIAbstractFTAPackage getImplements() {
    return this.Implements;
  }

  public TDDIFTAPackageInterface setImplements(TDDIAbstractFTAPackage Implements) {
    this.Implements = Implements;
    return this;
  }

  public void unsetImplements() {
    this.Implements = null;
  }

  /** Returns true if field Implements is set (has been assigned a value) and false otherwise */
  public boolean isSetImplements() {
    return this.Implements != null;
  }

  public void setImplementsIsSet(boolean value) {
    if (!value) {
      this.Implements = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case IS_CITATION:
      if (value == null) {
        unsetIsCitation();
      } else {
        setIsCitation((java.lang.Boolean)value);
      }
      break;

    case IS_ABSTRACT:
      if (value == null) {
        unsetIsAbstract();
      } else {
        setIsAbstract((java.lang.Boolean)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMapRef>)value);
      }
      break;

    case CITED_ELEMENT:
      if (value == null) {
        unsetCitedElement();
      } else {
        setCitedElement((TDDIAbstractBaseElement)value);
      }
      break;

    case FAILURE_ANALYSIS_ARTIFACTS:
      if (value == null) {
        unsetFailureAnalysisArtifacts();
      } else {
        setFailureAnalysisArtifacts((java.util.List<TDDIAbstractFailureAnalysisArtifactRef>)value);
      }
      break;

    case FTAARTIFACTS:
      if (value == null) {
        unsetFTAArtifacts();
      } else {
        setFTAArtifacts((java.util.List<TDDIAbstractFTAArtifact>)value);
      }
      break;

    case BASIC_EVENTS:
      if (value == null) {
        unsetBasicEvents();
      } else {
        setBasicEvents((java.util.List<TDDIBasicEvent>)value);
      }
      break;

    case IMPLEMENTS:
      if (value == null) {
        unsetImplements();
      } else {
        setImplements((TDDIAbstractFTAPackage)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case IS_CITATION:
      return isIsCitation();

    case IS_ABSTRACT:
      return isIsAbstract();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case CITED_ELEMENT:
      return getCitedElement();

    case FAILURE_ANALYSIS_ARTIFACTS:
      return getFailureAnalysisArtifacts();

    case FTAARTIFACTS:
      return getFTAArtifacts();

    case BASIC_EVENTS:
      return getBasicEvents();

    case IMPLEMENTS:
      return getImplements();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case IS_CITATION:
      return isSetIsCitation();
    case IS_ABSTRACT:
      return isSetIsAbstract();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case CITED_ELEMENT:
      return isSetCitedElement();
    case FAILURE_ANALYSIS_ARTIFACTS:
      return isSetFailureAnalysisArtifacts();
    case FTAARTIFACTS:
      return isSetFTAArtifacts();
    case BASIC_EVENTS:
      return isSetBasicEvents();
    case IMPLEMENTS:
      return isSetImplements();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIFTAPackageInterface)
      return this.equals((TDDIFTAPackageInterface)that);
    return false;
  }

  public boolean equals(TDDIFTAPackageInterface that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_IsCitation = true;
    boolean that_present_IsCitation = true;
    if (this_present_IsCitation || that_present_IsCitation) {
      if (!(this_present_IsCitation && that_present_IsCitation))
        return false;
      if (this.IsCitation != that.IsCitation)
        return false;
    }

    boolean this_present_IsAbstract = true;
    boolean that_present_IsAbstract = true;
    if (this_present_IsAbstract || that_present_IsAbstract) {
      if (!(this_present_IsAbstract && that_present_IsAbstract))
        return false;
      if (this.IsAbstract != that.IsAbstract)
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_CitedElement = true && this.isSetCitedElement();
    boolean that_present_CitedElement = true && that.isSetCitedElement();
    if (this_present_CitedElement || that_present_CitedElement) {
      if (!(this_present_CitedElement && that_present_CitedElement))
        return false;
      if (!this.CitedElement.equals(that.CitedElement))
        return false;
    }

    boolean this_present_FailureAnalysisArtifacts = true && this.isSetFailureAnalysisArtifacts();
    boolean that_present_FailureAnalysisArtifacts = true && that.isSetFailureAnalysisArtifacts();
    if (this_present_FailureAnalysisArtifacts || that_present_FailureAnalysisArtifacts) {
      if (!(this_present_FailureAnalysisArtifacts && that_present_FailureAnalysisArtifacts))
        return false;
      if (!this.FailureAnalysisArtifacts.equals(that.FailureAnalysisArtifacts))
        return false;
    }

    boolean this_present_FTAArtifacts = true && this.isSetFTAArtifacts();
    boolean that_present_FTAArtifacts = true && that.isSetFTAArtifacts();
    if (this_present_FTAArtifacts || that_present_FTAArtifacts) {
      if (!(this_present_FTAArtifacts && that_present_FTAArtifacts))
        return false;
      if (!this.FTAArtifacts.equals(that.FTAArtifacts))
        return false;
    }

    boolean this_present_BasicEvents = true && this.isSetBasicEvents();
    boolean that_present_BasicEvents = true && that.isSetBasicEvents();
    if (this_present_BasicEvents || that_present_BasicEvents) {
      if (!(this_present_BasicEvents && that_present_BasicEvents))
        return false;
      if (!this.BasicEvents.equals(that.BasicEvents))
        return false;
    }

    boolean this_present_Implements = true && this.isSetImplements();
    boolean that_present_Implements = true && that.isSetImplements();
    if (this_present_Implements || that_present_Implements) {
      if (!(this_present_Implements && that_present_Implements))
        return false;
      if (!this.Implements.equals(that.Implements))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((IsCitation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((IsAbstract) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetCitedElement()) ? 131071 : 524287);
    if (isSetCitedElement())
      hashCode = hashCode * 8191 + CitedElement.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailureAnalysisArtifacts()) ? 131071 : 524287);
    if (isSetFailureAnalysisArtifacts())
      hashCode = hashCode * 8191 + FailureAnalysisArtifacts.hashCode();

    hashCode = hashCode * 8191 + ((isSetFTAArtifacts()) ? 131071 : 524287);
    if (isSetFTAArtifacts())
      hashCode = hashCode * 8191 + FTAArtifacts.hashCode();

    hashCode = hashCode * 8191 + ((isSetBasicEvents()) ? 131071 : 524287);
    if (isSetBasicEvents())
      hashCode = hashCode * 8191 + BasicEvents.hashCode();

    hashCode = hashCode * 8191 + ((isSetImplements()) ? 131071 : 524287);
    if (isSetImplements())
      hashCode = hashCode * 8191 + Implements.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIFTAPackageInterface other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsCitation()).compareTo(other.isSetIsCitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCitation, other.IsCitation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsAbstract()).compareTo(other.isSetIsAbstract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAbstract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsAbstract, other.IsAbstract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCitedElement()).compareTo(other.isSetCitedElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCitedElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CitedElement, other.CitedElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureAnalysisArtifacts()).compareTo(other.isSetFailureAnalysisArtifacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureAnalysisArtifacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureAnalysisArtifacts, other.FailureAnalysisArtifacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFTAArtifacts()).compareTo(other.isSetFTAArtifacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFTAArtifacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FTAArtifacts, other.FTAArtifacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBasicEvents()).compareTo(other.isSetBasicEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasicEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BasicEvents, other.BasicEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImplements()).compareTo(other.isSetImplements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImplements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Implements, other.Implements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIFTAPackageInterface(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCitation:");
    sb.append(this.IsCitation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsAbstract:");
    sb.append(this.IsAbstract);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CitedElement:");
    if (this.CitedElement == null) {
      sb.append("null");
    } else {
      sb.append(this.CitedElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureAnalysisArtifacts:");
    if (this.FailureAnalysisArtifacts == null) {
      sb.append("null");
    } else {
      sb.append(this.FailureAnalysisArtifacts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FTAArtifacts:");
    if (this.FTAArtifacts == null) {
      sb.append("null");
    } else {
      sb.append(this.FTAArtifacts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BasicEvents:");
    if (this.BasicEvents == null) {
      sb.append("null");
    } else {
      sb.append(this.BasicEvents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Implements:");
    if (this.Implements == null) {
      sb.append("null");
    } else {
      sb.append(this.Implements);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (CitedElement != null) {
      CitedElement.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIFTAPackageInterfaceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIFTAPackageInterfaceStandardScheme getScheme() {
      return new TDDIFTAPackageInterfaceStandardScheme();
    }
  }

  private static class TDDIFTAPackageInterfaceStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIFTAPackageInterface> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIFTAPackageInterface struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_CITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsCitation = iprot.readBool();
              struct.setIsCitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ABSTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsAbstract = iprot.readBool();
              struct.setIsAbstractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1240 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(_list1240.size);
                TDDIKeyValueMapRef _elem1241;
                for (int _i1242 = 0; _i1242 < _list1240.size; ++_i1242)
                {
                  _elem1241 = new TDDIKeyValueMapRef();
                  _elem1241.read(iprot);
                  struct.KeyValueMaps.add(_elem1241);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CITED_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.CitedElement = new TDDIAbstractBaseElement();
              struct.CitedElement.read(iprot);
              struct.setCitedElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FAILURE_ANALYSIS_ARTIFACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1243 = iprot.readListBegin();
                struct.FailureAnalysisArtifacts = new java.util.ArrayList<TDDIAbstractFailureAnalysisArtifactRef>(_list1243.size);
                TDDIAbstractFailureAnalysisArtifactRef _elem1244;
                for (int _i1245 = 0; _i1245 < _list1243.size; ++_i1245)
                {
                  _elem1244 = new TDDIAbstractFailureAnalysisArtifactRef();
                  _elem1244.read(iprot);
                  struct.FailureAnalysisArtifacts.add(_elem1244);
                }
                iprot.readListEnd();
              }
              struct.setFailureAnalysisArtifactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FTAARTIFACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1246 = iprot.readListBegin();
                struct.FTAArtifacts = new java.util.ArrayList<TDDIAbstractFTAArtifact>(_list1246.size);
                TDDIAbstractFTAArtifact _elem1247;
                for (int _i1248 = 0; _i1248 < _list1246.size; ++_i1248)
                {
                  _elem1247 = new TDDIAbstractFTAArtifact();
                  _elem1247.read(iprot);
                  struct.FTAArtifacts.add(_elem1247);
                }
                iprot.readListEnd();
              }
              struct.setFTAArtifactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BASIC_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1249 = iprot.readListBegin();
                struct.BasicEvents = new java.util.ArrayList<TDDIBasicEvent>(_list1249.size);
                TDDIBasicEvent _elem1250;
                for (int _i1251 = 0; _i1251 < _list1249.size; ++_i1251)
                {
                  _elem1250 = new TDDIBasicEvent();
                  _elem1250.read(iprot);
                  struct.BasicEvents.add(_elem1250);
                }
                iprot.readListEnd();
              }
              struct.setBasicEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMPLEMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Implements = new TDDIAbstractFTAPackage();
              struct.Implements.read(iprot);
              struct.setImplementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIFTAPackageInterface struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CITATION_FIELD_DESC);
      oprot.writeBool(struct.IsCitation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ABSTRACT_FIELD_DESC);
      oprot.writeBool(struct.IsAbstract);
      oprot.writeFieldEnd();
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMapRef _iter1252 : struct.KeyValueMaps)
          {
            _iter1252.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CitedElement != null) {
        oprot.writeFieldBegin(CITED_ELEMENT_FIELD_DESC);
        struct.CitedElement.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.FailureAnalysisArtifacts != null) {
        oprot.writeFieldBegin(FAILURE_ANALYSIS_ARTIFACTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FailureAnalysisArtifacts.size()));
          for (TDDIAbstractFailureAnalysisArtifactRef _iter1253 : struct.FailureAnalysisArtifacts)
          {
            _iter1253.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.FTAArtifacts != null) {
        oprot.writeFieldBegin(FTAARTIFACTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FTAArtifacts.size()));
          for (TDDIAbstractFTAArtifact _iter1254 : struct.FTAArtifacts)
          {
            _iter1254.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.BasicEvents != null) {
        oprot.writeFieldBegin(BASIC_EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.BasicEvents.size()));
          for (TDDIBasicEvent _iter1255 : struct.BasicEvents)
          {
            _iter1255.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Implements != null) {
        oprot.writeFieldBegin(IMPLEMENTS_FIELD_DESC);
        struct.Implements.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIFTAPackageInterfaceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIFTAPackageInterfaceTupleScheme getScheme() {
      return new TDDIFTAPackageInterfaceTupleScheme();
    }
  }

  private static class TDDIFTAPackageInterfaceTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIFTAPackageInterface> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIFTAPackageInterface struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetIsCitation()) {
        optionals.set(3);
      }
      if (struct.isSetIsAbstract()) {
        optionals.set(4);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(5);
      }
      if (struct.isSetCitedElement()) {
        optionals.set(6);
      }
      if (struct.isSetFailureAnalysisArtifacts()) {
        optionals.set(7);
      }
      if (struct.isSetFTAArtifacts()) {
        optionals.set(8);
      }
      if (struct.isSetBasicEvents()) {
        optionals.set(9);
      }
      if (struct.isSetImplements()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetIsCitation()) {
        oprot.writeBool(struct.IsCitation);
      }
      if (struct.isSetIsAbstract()) {
        oprot.writeBool(struct.IsAbstract);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMapRef _iter1256 : struct.KeyValueMaps)
          {
            _iter1256.write(oprot);
          }
        }
      }
      if (struct.isSetCitedElement()) {
        struct.CitedElement.write(oprot);
      }
      if (struct.isSetFailureAnalysisArtifacts()) {
        {
          oprot.writeI32(struct.FailureAnalysisArtifacts.size());
          for (TDDIAbstractFailureAnalysisArtifactRef _iter1257 : struct.FailureAnalysisArtifacts)
          {
            _iter1257.write(oprot);
          }
        }
      }
      if (struct.isSetFTAArtifacts()) {
        {
          oprot.writeI32(struct.FTAArtifacts.size());
          for (TDDIAbstractFTAArtifact _iter1258 : struct.FTAArtifacts)
          {
            _iter1258.write(oprot);
          }
        }
      }
      if (struct.isSetBasicEvents()) {
        {
          oprot.writeI32(struct.BasicEvents.size());
          for (TDDIBasicEvent _iter1259 : struct.BasicEvents)
          {
            _iter1259.write(oprot);
          }
        }
      }
      if (struct.isSetImplements()) {
        struct.Implements.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIFTAPackageInterface struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.IsCitation = iprot.readBool();
        struct.setIsCitationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.IsAbstract = iprot.readBool();
        struct.setIsAbstractIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list1260 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(_list1260.size);
          TDDIKeyValueMapRef _elem1261;
          for (int _i1262 = 0; _i1262 < _list1260.size; ++_i1262)
          {
            _elem1261 = new TDDIKeyValueMapRef();
            _elem1261.read(iprot);
            struct.KeyValueMaps.add(_elem1261);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.CitedElement = new TDDIAbstractBaseElement();
        struct.CitedElement.read(iprot);
        struct.setCitedElementIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list1263 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FailureAnalysisArtifacts = new java.util.ArrayList<TDDIAbstractFailureAnalysisArtifactRef>(_list1263.size);
          TDDIAbstractFailureAnalysisArtifactRef _elem1264;
          for (int _i1265 = 0; _i1265 < _list1263.size; ++_i1265)
          {
            _elem1264 = new TDDIAbstractFailureAnalysisArtifactRef();
            _elem1264.read(iprot);
            struct.FailureAnalysisArtifacts.add(_elem1264);
          }
        }
        struct.setFailureAnalysisArtifactsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list1266 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FTAArtifacts = new java.util.ArrayList<TDDIAbstractFTAArtifact>(_list1266.size);
          TDDIAbstractFTAArtifact _elem1267;
          for (int _i1268 = 0; _i1268 < _list1266.size; ++_i1268)
          {
            _elem1267 = new TDDIAbstractFTAArtifact();
            _elem1267.read(iprot);
            struct.FTAArtifacts.add(_elem1267);
          }
        }
        struct.setFTAArtifactsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list1269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.BasicEvents = new java.util.ArrayList<TDDIBasicEvent>(_list1269.size);
          TDDIBasicEvent _elem1270;
          for (int _i1271 = 0; _i1271 < _list1269.size; ++_i1271)
          {
            _elem1270 = new TDDIBasicEvent();
            _elem1270.read(iprot);
            struct.BasicEvents.add(_elem1270);
          }
        }
        struct.setBasicEventsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.Implements = new TDDIAbstractFTAPackage();
        struct.Implements.read(iprot);
        struct.setImplementsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

