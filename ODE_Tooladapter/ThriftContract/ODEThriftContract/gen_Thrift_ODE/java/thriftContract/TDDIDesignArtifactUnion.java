/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIDesignArtifactUnion extends org.apache.thrift.TUnion<TDDIDesignArtifactUnion, TDDIDesignArtifactUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIDesignArtifactUnion");
  private static final org.apache.thrift.protocol.TField SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("System", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Function", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("Configuration", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SIGNAL_FIELD_DESC = new org.apache.thrift.protocol.TField("Signal", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SYSTEM_BOUNDARY_FIELD_DESC = new org.apache.thrift.protocol.TField("SystemBoundary", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("Context", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField LIFECYCLE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("LifecycleCondition", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("Port", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField PERF_CHARS_FIELD_DESC = new org.apache.thrift.protocol.TField("PerfChars", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField ARCHITECTURE_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ArchitecturePackage", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYSTEM((short)1, "System"),
    FUNCTION((short)2, "Function"),
    CONFIGURATION((short)3, "Configuration"),
    SIGNAL((short)4, "Signal"),
    SYSTEM_BOUNDARY((short)5, "SystemBoundary"),
    CONTEXT((short)6, "Context"),
    LIFECYCLE_CONDITION((short)7, "LifecycleCondition"),
    PORT((short)8, "Port"),
    PERF_CHARS((short)9, "PerfChars"),
    ARCHITECTURE_PACKAGE((short)10, "ArchitecturePackage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYSTEM
          return SYSTEM;
        case 2: // FUNCTION
          return FUNCTION;
        case 3: // CONFIGURATION
          return CONFIGURATION;
        case 4: // SIGNAL
          return SIGNAL;
        case 5: // SYSTEM_BOUNDARY
          return SYSTEM_BOUNDARY;
        case 6: // CONTEXT
          return CONTEXT;
        case 7: // LIFECYCLE_CONDITION
          return LIFECYCLE_CONDITION;
        case 8: // PORT
          return PORT;
        case 9: // PERF_CHARS
          return PERF_CHARS;
        case 10: // ARCHITECTURE_PACKAGE
          return ARCHITECTURE_PACKAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("System", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractSystem.class)));
    tmpMap.put(_Fields.FUNCTION, new org.apache.thrift.meta_data.FieldMetaData("Function", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFunction.class)));
    tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("Configuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIConfiguration.class)));
    tmpMap.put(_Fields.SIGNAL, new org.apache.thrift.meta_data.FieldMetaData("Signal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISignal.class)));
    tmpMap.put(_Fields.SYSTEM_BOUNDARY, new org.apache.thrift.meta_data.FieldMetaData("SystemBoundary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISystemBoundary.class)));
    tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("Context", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIContext.class)));
    tmpMap.put(_Fields.LIFECYCLE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("LifecycleCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDILifecycleCondition.class)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("Port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPort.class)));
    tmpMap.put(_Fields.PERF_CHARS, new org.apache.thrift.meta_data.FieldMetaData("PerfChars", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPerfChars.class)));
    tmpMap.put(_Fields.ARCHITECTURE_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ArchitecturePackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractArchitecturePackage.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIDesignArtifactUnion.class, metaDataMap);
  }

  public TDDIDesignArtifactUnion() {
    super();
  }

  public TDDIDesignArtifactUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIDesignArtifactUnion(TDDIDesignArtifactUnion other) {
    super(other);
  }
  public TDDIDesignArtifactUnion deepCopy() {
    return new TDDIDesignArtifactUnion(this);
  }

  public static TDDIDesignArtifactUnion System(TDDIAbstractSystem value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setSystem(value);
    return x;
  }

  public static TDDIDesignArtifactUnion Function(TDDIAbstractFunction value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setFunction(value);
    return x;
  }

  public static TDDIDesignArtifactUnion Configuration(TDDIConfiguration value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setConfiguration(value);
    return x;
  }

  public static TDDIDesignArtifactUnion Signal(TDDISignal value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setSignal(value);
    return x;
  }

  public static TDDIDesignArtifactUnion SystemBoundary(TDDISystemBoundary value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setSystemBoundary(value);
    return x;
  }

  public static TDDIDesignArtifactUnion Context(TDDIContext value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setContext(value);
    return x;
  }

  public static TDDIDesignArtifactUnion LifecycleCondition(TDDILifecycleCondition value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setLifecycleCondition(value);
    return x;
  }

  public static TDDIDesignArtifactUnion Port(TDDIPort value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setPort(value);
    return x;
  }

  public static TDDIDesignArtifactUnion PerfChars(TDDIPerfChars value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setPerfChars(value);
    return x;
  }

  public static TDDIDesignArtifactUnion ArchitecturePackage(TDDIAbstractArchitecturePackage value) {
    TDDIDesignArtifactUnion x = new TDDIDesignArtifactUnion();
    x.setArchitecturePackage(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case SYSTEM:
        if (value instanceof TDDIAbstractSystem) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractSystem for field 'System', but got " + value.getClass().getSimpleName());
      case FUNCTION:
        if (value instanceof TDDIAbstractFunction) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractFunction for field 'Function', but got " + value.getClass().getSimpleName());
      case CONFIGURATION:
        if (value instanceof TDDIConfiguration) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIConfiguration for field 'Configuration', but got " + value.getClass().getSimpleName());
      case SIGNAL:
        if (value instanceof TDDISignal) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDISignal for field 'Signal', but got " + value.getClass().getSimpleName());
      case SYSTEM_BOUNDARY:
        if (value instanceof TDDISystemBoundary) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDISystemBoundary for field 'SystemBoundary', but got " + value.getClass().getSimpleName());
      case CONTEXT:
        if (value instanceof TDDIContext) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIContext for field 'Context', but got " + value.getClass().getSimpleName());
      case LIFECYCLE_CONDITION:
        if (value instanceof TDDILifecycleCondition) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDILifecycleCondition for field 'LifecycleCondition', but got " + value.getClass().getSimpleName());
      case PORT:
        if (value instanceof TDDIPort) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIPort for field 'Port', but got " + value.getClass().getSimpleName());
      case PERF_CHARS:
        if (value instanceof TDDIPerfChars) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIPerfChars for field 'PerfChars', but got " + value.getClass().getSimpleName());
      case ARCHITECTURE_PACKAGE:
        if (value instanceof TDDIAbstractArchitecturePackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractArchitecturePackage for field 'ArchitecturePackage', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case SYSTEM:
          if (field.type == SYSTEM_FIELD_DESC.type) {
            TDDIAbstractSystem System;
            System = new TDDIAbstractSystem();
            System.read(iprot);
            return System;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FUNCTION:
          if (field.type == FUNCTION_FIELD_DESC.type) {
            TDDIAbstractFunction Function;
            Function = new TDDIAbstractFunction();
            Function.read(iprot);
            return Function;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONFIGURATION:
          if (field.type == CONFIGURATION_FIELD_DESC.type) {
            TDDIConfiguration Configuration;
            Configuration = new TDDIConfiguration();
            Configuration.read(iprot);
            return Configuration;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SIGNAL:
          if (field.type == SIGNAL_FIELD_DESC.type) {
            TDDISignal Signal;
            Signal = new TDDISignal();
            Signal.read(iprot);
            return Signal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SYSTEM_BOUNDARY:
          if (field.type == SYSTEM_BOUNDARY_FIELD_DESC.type) {
            TDDISystemBoundary SystemBoundary;
            SystemBoundary = new TDDISystemBoundary();
            SystemBoundary.read(iprot);
            return SystemBoundary;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONTEXT:
          if (field.type == CONTEXT_FIELD_DESC.type) {
            TDDIContext Context;
            Context = new TDDIContext();
            Context.read(iprot);
            return Context;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LIFECYCLE_CONDITION:
          if (field.type == LIFECYCLE_CONDITION_FIELD_DESC.type) {
            TDDILifecycleCondition LifecycleCondition;
            LifecycleCondition = new TDDILifecycleCondition();
            LifecycleCondition.read(iprot);
            return LifecycleCondition;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PORT:
          if (field.type == PORT_FIELD_DESC.type) {
            TDDIPort Port;
            Port = new TDDIPort();
            Port.read(iprot);
            return Port;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PERF_CHARS:
          if (field.type == PERF_CHARS_FIELD_DESC.type) {
            TDDIPerfChars PerfChars;
            PerfChars = new TDDIPerfChars();
            PerfChars.read(iprot);
            return PerfChars;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARCHITECTURE_PACKAGE:
          if (field.type == ARCHITECTURE_PACKAGE_FIELD_DESC.type) {
            TDDIAbstractArchitecturePackage ArchitecturePackage;
            ArchitecturePackage = new TDDIAbstractArchitecturePackage();
            ArchitecturePackage.read(iprot);
            return ArchitecturePackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case SYSTEM:
        TDDIAbstractSystem System = (TDDIAbstractSystem)value_;
        System.write(oprot);
        return;
      case FUNCTION:
        TDDIAbstractFunction Function = (TDDIAbstractFunction)value_;
        Function.write(oprot);
        return;
      case CONFIGURATION:
        TDDIConfiguration Configuration = (TDDIConfiguration)value_;
        Configuration.write(oprot);
        return;
      case SIGNAL:
        TDDISignal Signal = (TDDISignal)value_;
        Signal.write(oprot);
        return;
      case SYSTEM_BOUNDARY:
        TDDISystemBoundary SystemBoundary = (TDDISystemBoundary)value_;
        SystemBoundary.write(oprot);
        return;
      case CONTEXT:
        TDDIContext Context = (TDDIContext)value_;
        Context.write(oprot);
        return;
      case LIFECYCLE_CONDITION:
        TDDILifecycleCondition LifecycleCondition = (TDDILifecycleCondition)value_;
        LifecycleCondition.write(oprot);
        return;
      case PORT:
        TDDIPort Port = (TDDIPort)value_;
        Port.write(oprot);
        return;
      case PERF_CHARS:
        TDDIPerfChars PerfChars = (TDDIPerfChars)value_;
        PerfChars.write(oprot);
        return;
      case ARCHITECTURE_PACKAGE:
        TDDIAbstractArchitecturePackage ArchitecturePackage = (TDDIAbstractArchitecturePackage)value_;
        ArchitecturePackage.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case SYSTEM:
          TDDIAbstractSystem System;
          System = new TDDIAbstractSystem();
          System.read(iprot);
          return System;
        case FUNCTION:
          TDDIAbstractFunction Function;
          Function = new TDDIAbstractFunction();
          Function.read(iprot);
          return Function;
        case CONFIGURATION:
          TDDIConfiguration Configuration;
          Configuration = new TDDIConfiguration();
          Configuration.read(iprot);
          return Configuration;
        case SIGNAL:
          TDDISignal Signal;
          Signal = new TDDISignal();
          Signal.read(iprot);
          return Signal;
        case SYSTEM_BOUNDARY:
          TDDISystemBoundary SystemBoundary;
          SystemBoundary = new TDDISystemBoundary();
          SystemBoundary.read(iprot);
          return SystemBoundary;
        case CONTEXT:
          TDDIContext Context;
          Context = new TDDIContext();
          Context.read(iprot);
          return Context;
        case LIFECYCLE_CONDITION:
          TDDILifecycleCondition LifecycleCondition;
          LifecycleCondition = new TDDILifecycleCondition();
          LifecycleCondition.read(iprot);
          return LifecycleCondition;
        case PORT:
          TDDIPort Port;
          Port = new TDDIPort();
          Port.read(iprot);
          return Port;
        case PERF_CHARS:
          TDDIPerfChars PerfChars;
          PerfChars = new TDDIPerfChars();
          PerfChars.read(iprot);
          return PerfChars;
        case ARCHITECTURE_PACKAGE:
          TDDIAbstractArchitecturePackage ArchitecturePackage;
          ArchitecturePackage = new TDDIAbstractArchitecturePackage();
          ArchitecturePackage.read(iprot);
          return ArchitecturePackage;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case SYSTEM:
        TDDIAbstractSystem System = (TDDIAbstractSystem)value_;
        System.write(oprot);
        return;
      case FUNCTION:
        TDDIAbstractFunction Function = (TDDIAbstractFunction)value_;
        Function.write(oprot);
        return;
      case CONFIGURATION:
        TDDIConfiguration Configuration = (TDDIConfiguration)value_;
        Configuration.write(oprot);
        return;
      case SIGNAL:
        TDDISignal Signal = (TDDISignal)value_;
        Signal.write(oprot);
        return;
      case SYSTEM_BOUNDARY:
        TDDISystemBoundary SystemBoundary = (TDDISystemBoundary)value_;
        SystemBoundary.write(oprot);
        return;
      case CONTEXT:
        TDDIContext Context = (TDDIContext)value_;
        Context.write(oprot);
        return;
      case LIFECYCLE_CONDITION:
        TDDILifecycleCondition LifecycleCondition = (TDDILifecycleCondition)value_;
        LifecycleCondition.write(oprot);
        return;
      case PORT:
        TDDIPort Port = (TDDIPort)value_;
        Port.write(oprot);
        return;
      case PERF_CHARS:
        TDDIPerfChars PerfChars = (TDDIPerfChars)value_;
        PerfChars.write(oprot);
        return;
      case ARCHITECTURE_PACKAGE:
        TDDIAbstractArchitecturePackage ArchitecturePackage = (TDDIAbstractArchitecturePackage)value_;
        ArchitecturePackage.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case SYSTEM:
        return SYSTEM_FIELD_DESC;
      case FUNCTION:
        return FUNCTION_FIELD_DESC;
      case CONFIGURATION:
        return CONFIGURATION_FIELD_DESC;
      case SIGNAL:
        return SIGNAL_FIELD_DESC;
      case SYSTEM_BOUNDARY:
        return SYSTEM_BOUNDARY_FIELD_DESC;
      case CONTEXT:
        return CONTEXT_FIELD_DESC;
      case LIFECYCLE_CONDITION:
        return LIFECYCLE_CONDITION_FIELD_DESC;
      case PORT:
        return PORT_FIELD_DESC;
      case PERF_CHARS:
        return PERF_CHARS_FIELD_DESC;
      case ARCHITECTURE_PACKAGE:
        return ARCHITECTURE_PACKAGE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIAbstractSystem getSystem() {
    if (getSetField() == _Fields.SYSTEM) {
      return (TDDIAbstractSystem)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'System' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSystem(TDDIAbstractSystem value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SYSTEM;
    value_ = value;
  }

  public TDDIAbstractFunction getFunction() {
    if (getSetField() == _Fields.FUNCTION) {
      return (TDDIAbstractFunction)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Function' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFunction(TDDIAbstractFunction value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FUNCTION;
    value_ = value;
  }

  public TDDIConfiguration getConfiguration() {
    if (getSetField() == _Fields.CONFIGURATION) {
      return (TDDIConfiguration)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Configuration' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setConfiguration(TDDIConfiguration value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.CONFIGURATION;
    value_ = value;
  }

  public TDDISignal getSignal() {
    if (getSetField() == _Fields.SIGNAL) {
      return (TDDISignal)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Signal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSignal(TDDISignal value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SIGNAL;
    value_ = value;
  }

  public TDDISystemBoundary getSystemBoundary() {
    if (getSetField() == _Fields.SYSTEM_BOUNDARY) {
      return (TDDISystemBoundary)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'SystemBoundary' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSystemBoundary(TDDISystemBoundary value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SYSTEM_BOUNDARY;
    value_ = value;
  }

  public TDDIContext getContext() {
    if (getSetField() == _Fields.CONTEXT) {
      return (TDDIContext)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Context' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setContext(TDDIContext value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.CONTEXT;
    value_ = value;
  }

  public TDDILifecycleCondition getLifecycleCondition() {
    if (getSetField() == _Fields.LIFECYCLE_CONDITION) {
      return (TDDILifecycleCondition)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'LifecycleCondition' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLifecycleCondition(TDDILifecycleCondition value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.LIFECYCLE_CONDITION;
    value_ = value;
  }

  public TDDIPort getPort() {
    if (getSetField() == _Fields.PORT) {
      return (TDDIPort)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Port' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPort(TDDIPort value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PORT;
    value_ = value;
  }

  public TDDIPerfChars getPerfChars() {
    if (getSetField() == _Fields.PERF_CHARS) {
      return (TDDIPerfChars)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'PerfChars' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPerfChars(TDDIPerfChars value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PERF_CHARS;
    value_ = value;
  }

  public TDDIAbstractArchitecturePackage getArchitecturePackage() {
    if (getSetField() == _Fields.ARCHITECTURE_PACKAGE) {
      return (TDDIAbstractArchitecturePackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArchitecturePackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArchitecturePackage(TDDIAbstractArchitecturePackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARCHITECTURE_PACKAGE;
    value_ = value;
  }

  public boolean isSetSystem() {
    return setField_ == _Fields.SYSTEM;
  }


  public boolean isSetFunction() {
    return setField_ == _Fields.FUNCTION;
  }


  public boolean isSetConfiguration() {
    return setField_ == _Fields.CONFIGURATION;
  }


  public boolean isSetSignal() {
    return setField_ == _Fields.SIGNAL;
  }


  public boolean isSetSystemBoundary() {
    return setField_ == _Fields.SYSTEM_BOUNDARY;
  }


  public boolean isSetContext() {
    return setField_ == _Fields.CONTEXT;
  }


  public boolean isSetLifecycleCondition() {
    return setField_ == _Fields.LIFECYCLE_CONDITION;
  }


  public boolean isSetPort() {
    return setField_ == _Fields.PORT;
  }


  public boolean isSetPerfChars() {
    return setField_ == _Fields.PERF_CHARS;
  }


  public boolean isSetArchitecturePackage() {
    return setField_ == _Fields.ARCHITECTURE_PACKAGE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIDesignArtifactUnion) {
      return equals((TDDIDesignArtifactUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIDesignArtifactUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIDesignArtifactUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
