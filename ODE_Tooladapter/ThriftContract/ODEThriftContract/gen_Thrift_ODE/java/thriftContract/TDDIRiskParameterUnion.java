/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIRiskParameterUnion extends org.apache.thrift.TUnion<TDDIRiskParameterUnion, TDDIRiskParameterUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIRiskParameterUnion");
  private static final org.apache.thrift.protocol.TField RISK_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("RiskParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("Situation", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ACCIDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("Accident", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATION_MEASURE_FIELD_DESC = new org.apache.thrift.protocol.TField("OperationMeasure", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RISK_PARAMETER((short)1, "RiskParameter"),
    SITUATION((short)2, "Situation"),
    ACCIDENT((short)3, "Accident"),
    OPERATION_MEASURE((short)4, "OperationMeasure");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RISK_PARAMETER
          return RISK_PARAMETER;
        case 2: // SITUATION
          return SITUATION;
        case 3: // ACCIDENT
          return ACCIDENT;
        case 4: // OPERATION_MEASURE
          return OPERATION_MEASURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RISK_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("RiskParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIRiskParameter.class)));
    tmpMap.put(_Fields.SITUATION, new org.apache.thrift.meta_data.FieldMetaData("Situation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISituation.class)));
    tmpMap.put(_Fields.ACCIDENT, new org.apache.thrift.meta_data.FieldMetaData("Accident", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAccident.class)));
    tmpMap.put(_Fields.OPERATION_MEASURE, new org.apache.thrift.meta_data.FieldMetaData("OperationMeasure", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIOperationMeasure.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIRiskParameterUnion.class, metaDataMap);
  }

  public TDDIRiskParameterUnion() {
    super();
  }

  public TDDIRiskParameterUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIRiskParameterUnion(TDDIRiskParameterUnion other) {
    super(other);
  }
  public TDDIRiskParameterUnion deepCopy() {
    return new TDDIRiskParameterUnion(this);
  }

  public static TDDIRiskParameterUnion RiskParameter(TDDIRiskParameter value) {
    TDDIRiskParameterUnion x = new TDDIRiskParameterUnion();
    x.setRiskParameter(value);
    return x;
  }

  public static TDDIRiskParameterUnion Situation(TDDISituation value) {
    TDDIRiskParameterUnion x = new TDDIRiskParameterUnion();
    x.setSituation(value);
    return x;
  }

  public static TDDIRiskParameterUnion Accident(TDDIAccident value) {
    TDDIRiskParameterUnion x = new TDDIRiskParameterUnion();
    x.setAccident(value);
    return x;
  }

  public static TDDIRiskParameterUnion OperationMeasure(TDDIOperationMeasure value) {
    TDDIRiskParameterUnion x = new TDDIRiskParameterUnion();
    x.setOperationMeasure(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case RISK_PARAMETER:
        if (value instanceof TDDIRiskParameter) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIRiskParameter for field 'RiskParameter', but got " + value.getClass().getSimpleName());
      case SITUATION:
        if (value instanceof TDDISituation) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDISituation for field 'Situation', but got " + value.getClass().getSimpleName());
      case ACCIDENT:
        if (value instanceof TDDIAccident) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAccident for field 'Accident', but got " + value.getClass().getSimpleName());
      case OPERATION_MEASURE:
        if (value instanceof TDDIOperationMeasure) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIOperationMeasure for field 'OperationMeasure', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case RISK_PARAMETER:
          if (field.type == RISK_PARAMETER_FIELD_DESC.type) {
            TDDIRiskParameter RiskParameter;
            RiskParameter = new TDDIRiskParameter();
            RiskParameter.read(iprot);
            return RiskParameter;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SITUATION:
          if (field.type == SITUATION_FIELD_DESC.type) {
            TDDISituation Situation;
            Situation = new TDDISituation();
            Situation.read(iprot);
            return Situation;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ACCIDENT:
          if (field.type == ACCIDENT_FIELD_DESC.type) {
            TDDIAccident Accident;
            Accident = new TDDIAccident();
            Accident.read(iprot);
            return Accident;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OPERATION_MEASURE:
          if (field.type == OPERATION_MEASURE_FIELD_DESC.type) {
            TDDIOperationMeasure OperationMeasure;
            OperationMeasure = new TDDIOperationMeasure();
            OperationMeasure.read(iprot);
            return OperationMeasure;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case RISK_PARAMETER:
        TDDIRiskParameter RiskParameter = (TDDIRiskParameter)value_;
        RiskParameter.write(oprot);
        return;
      case SITUATION:
        TDDISituation Situation = (TDDISituation)value_;
        Situation.write(oprot);
        return;
      case ACCIDENT:
        TDDIAccident Accident = (TDDIAccident)value_;
        Accident.write(oprot);
        return;
      case OPERATION_MEASURE:
        TDDIOperationMeasure OperationMeasure = (TDDIOperationMeasure)value_;
        OperationMeasure.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case RISK_PARAMETER:
          TDDIRiskParameter RiskParameter;
          RiskParameter = new TDDIRiskParameter();
          RiskParameter.read(iprot);
          return RiskParameter;
        case SITUATION:
          TDDISituation Situation;
          Situation = new TDDISituation();
          Situation.read(iprot);
          return Situation;
        case ACCIDENT:
          TDDIAccident Accident;
          Accident = new TDDIAccident();
          Accident.read(iprot);
          return Accident;
        case OPERATION_MEASURE:
          TDDIOperationMeasure OperationMeasure;
          OperationMeasure = new TDDIOperationMeasure();
          OperationMeasure.read(iprot);
          return OperationMeasure;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case RISK_PARAMETER:
        TDDIRiskParameter RiskParameter = (TDDIRiskParameter)value_;
        RiskParameter.write(oprot);
        return;
      case SITUATION:
        TDDISituation Situation = (TDDISituation)value_;
        Situation.write(oprot);
        return;
      case ACCIDENT:
        TDDIAccident Accident = (TDDIAccident)value_;
        Accident.write(oprot);
        return;
      case OPERATION_MEASURE:
        TDDIOperationMeasure OperationMeasure = (TDDIOperationMeasure)value_;
        OperationMeasure.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case RISK_PARAMETER:
        return RISK_PARAMETER_FIELD_DESC;
      case SITUATION:
        return SITUATION_FIELD_DESC;
      case ACCIDENT:
        return ACCIDENT_FIELD_DESC;
      case OPERATION_MEASURE:
        return OPERATION_MEASURE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIRiskParameter getRiskParameter() {
    if (getSetField() == _Fields.RISK_PARAMETER) {
      return (TDDIRiskParameter)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'RiskParameter' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRiskParameter(TDDIRiskParameter value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.RISK_PARAMETER;
    value_ = value;
  }

  public TDDISituation getSituation() {
    if (getSetField() == _Fields.SITUATION) {
      return (TDDISituation)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Situation' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSituation(TDDISituation value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SITUATION;
    value_ = value;
  }

  public TDDIAccident getAccident() {
    if (getSetField() == _Fields.ACCIDENT) {
      return (TDDIAccident)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Accident' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAccident(TDDIAccident value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ACCIDENT;
    value_ = value;
  }

  public TDDIOperationMeasure getOperationMeasure() {
    if (getSetField() == _Fields.OPERATION_MEASURE) {
      return (TDDIOperationMeasure)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'OperationMeasure' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOperationMeasure(TDDIOperationMeasure value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.OPERATION_MEASURE;
    value_ = value;
  }

  public boolean isSetRiskParameter() {
    return setField_ == _Fields.RISK_PARAMETER;
  }


  public boolean isSetSituation() {
    return setField_ == _Fields.SITUATION;
  }


  public boolean isSetAccident() {
    return setField_ == _Fields.ACCIDENT;
  }


  public boolean isSetOperationMeasure() {
    return setField_ == _Fields.OPERATION_MEASURE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIRiskParameterUnion) {
      return equals((TDDIRiskParameterUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIRiskParameterUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIRiskParameterUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
