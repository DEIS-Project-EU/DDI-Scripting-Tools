/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIBaseElementUnion extends org.apache.thrift.TUnion<TDDIBaseElementUnion, TDDIBaseElementUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIBaseElementUnion");
  private static final org.apache.thrift.protocol.TField DESIGN_ARTIFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("DesignArtifact", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ODEPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ODEPackage", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FAILURE_ANALYSIS_ARTIFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureAnalysisArtifact", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_ARTIFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityArtifact", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESIGN_ARTIFACT((short)1, "DesignArtifact"),
    ODEPACKAGE((short)2, "ODEPackage"),
    FAILURE_ANALYSIS_ARTIFACT((short)3, "FailureAnalysisArtifact"),
    DEPENDABILITY_ARTIFACT((short)4, "DependabilityArtifact");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESIGN_ARTIFACT
          return DESIGN_ARTIFACT;
        case 2: // ODEPACKAGE
          return ODEPACKAGE;
        case 3: // FAILURE_ANALYSIS_ARTIFACT
          return FAILURE_ANALYSIS_ARTIFACT;
        case 4: // DEPENDABILITY_ARTIFACT
          return DEPENDABILITY_ARTIFACT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESIGN_ARTIFACT, new org.apache.thrift.meta_data.FieldMetaData("DesignArtifact", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractDesignArtifact.class)));
    tmpMap.put(_Fields.ODEPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ODEPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractODEPackage")));
    tmpMap.put(_Fields.FAILURE_ANALYSIS_ARTIFACT, new org.apache.thrift.meta_data.FieldMetaData("FailureAnalysisArtifact", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractFailureAnalysisArtifact")));
    tmpMap.put(_Fields.DEPENDABILITY_ARTIFACT, new org.apache.thrift.meta_data.FieldMetaData("DependabilityArtifact", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractDependabilityArtifact")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIBaseElementUnion.class, metaDataMap);
  }

  public TDDIBaseElementUnion() {
    super();
  }

  public TDDIBaseElementUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIBaseElementUnion(TDDIBaseElementUnion other) {
    super(other);
  }
  public TDDIBaseElementUnion deepCopy() {
    return new TDDIBaseElementUnion(this);
  }

  public static TDDIBaseElementUnion DesignArtifact(TDDIAbstractDesignArtifact value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setDesignArtifact(value);
    return x;
  }

  public static TDDIBaseElementUnion ODEPackage(TDDIAbstractODEPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setODEPackage(value);
    return x;
  }

  public static TDDIBaseElementUnion FailureAnalysisArtifact(TDDIAbstractFailureAnalysisArtifact value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setFailureAnalysisArtifact(value);
    return x;
  }

  public static TDDIBaseElementUnion DependabilityArtifact(TDDIAbstractDependabilityArtifact value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setDependabilityArtifact(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case DESIGN_ARTIFACT:
        if (value instanceof TDDIAbstractDesignArtifact) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractDesignArtifact for field 'DesignArtifact', but got " + value.getClass().getSimpleName());
      case ODEPACKAGE:
        if (value instanceof TDDIAbstractODEPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractODEPackage for field 'ODEPackage', but got " + value.getClass().getSimpleName());
      case FAILURE_ANALYSIS_ARTIFACT:
        if (value instanceof TDDIAbstractFailureAnalysisArtifact) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractFailureAnalysisArtifact for field 'FailureAnalysisArtifact', but got " + value.getClass().getSimpleName());
      case DEPENDABILITY_ARTIFACT:
        if (value instanceof TDDIAbstractDependabilityArtifact) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractDependabilityArtifact for field 'DependabilityArtifact', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case DESIGN_ARTIFACT:
          if (field.type == DESIGN_ARTIFACT_FIELD_DESC.type) {
            TDDIAbstractDesignArtifact DesignArtifact;
            DesignArtifact = new TDDIAbstractDesignArtifact();
            DesignArtifact.read(iprot);
            return DesignArtifact;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ODEPACKAGE:
          if (field.type == ODEPACKAGE_FIELD_DESC.type) {
            TDDIAbstractODEPackage ODEPackage;
            ODEPackage = new TDDIAbstractODEPackage();
            ODEPackage.read(iprot);
            return ODEPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FAILURE_ANALYSIS_ARTIFACT:
          if (field.type == FAILURE_ANALYSIS_ARTIFACT_FIELD_DESC.type) {
            TDDIAbstractFailureAnalysisArtifact FailureAnalysisArtifact;
            FailureAnalysisArtifact = new TDDIAbstractFailureAnalysisArtifact();
            FailureAnalysisArtifact.read(iprot);
            return FailureAnalysisArtifact;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEPENDABILITY_ARTIFACT:
          if (field.type == DEPENDABILITY_ARTIFACT_FIELD_DESC.type) {
            TDDIAbstractDependabilityArtifact DependabilityArtifact;
            DependabilityArtifact = new TDDIAbstractDependabilityArtifact();
            DependabilityArtifact.read(iprot);
            return DependabilityArtifact;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DESIGN_ARTIFACT:
        TDDIAbstractDesignArtifact DesignArtifact = (TDDIAbstractDesignArtifact)value_;
        DesignArtifact.write(oprot);
        return;
      case ODEPACKAGE:
        TDDIAbstractODEPackage ODEPackage = (TDDIAbstractODEPackage)value_;
        ODEPackage.write(oprot);
        return;
      case FAILURE_ANALYSIS_ARTIFACT:
        TDDIAbstractFailureAnalysisArtifact FailureAnalysisArtifact = (TDDIAbstractFailureAnalysisArtifact)value_;
        FailureAnalysisArtifact.write(oprot);
        return;
      case DEPENDABILITY_ARTIFACT:
        TDDIAbstractDependabilityArtifact DependabilityArtifact = (TDDIAbstractDependabilityArtifact)value_;
        DependabilityArtifact.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case DESIGN_ARTIFACT:
          TDDIAbstractDesignArtifact DesignArtifact;
          DesignArtifact = new TDDIAbstractDesignArtifact();
          DesignArtifact.read(iprot);
          return DesignArtifact;
        case ODEPACKAGE:
          TDDIAbstractODEPackage ODEPackage;
          ODEPackage = new TDDIAbstractODEPackage();
          ODEPackage.read(iprot);
          return ODEPackage;
        case FAILURE_ANALYSIS_ARTIFACT:
          TDDIAbstractFailureAnalysisArtifact FailureAnalysisArtifact;
          FailureAnalysisArtifact = new TDDIAbstractFailureAnalysisArtifact();
          FailureAnalysisArtifact.read(iprot);
          return FailureAnalysisArtifact;
        case DEPENDABILITY_ARTIFACT:
          TDDIAbstractDependabilityArtifact DependabilityArtifact;
          DependabilityArtifact = new TDDIAbstractDependabilityArtifact();
          DependabilityArtifact.read(iprot);
          return DependabilityArtifact;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DESIGN_ARTIFACT:
        TDDIAbstractDesignArtifact DesignArtifact = (TDDIAbstractDesignArtifact)value_;
        DesignArtifact.write(oprot);
        return;
      case ODEPACKAGE:
        TDDIAbstractODEPackage ODEPackage = (TDDIAbstractODEPackage)value_;
        ODEPackage.write(oprot);
        return;
      case FAILURE_ANALYSIS_ARTIFACT:
        TDDIAbstractFailureAnalysisArtifact FailureAnalysisArtifact = (TDDIAbstractFailureAnalysisArtifact)value_;
        FailureAnalysisArtifact.write(oprot);
        return;
      case DEPENDABILITY_ARTIFACT:
        TDDIAbstractDependabilityArtifact DependabilityArtifact = (TDDIAbstractDependabilityArtifact)value_;
        DependabilityArtifact.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case DESIGN_ARTIFACT:
        return DESIGN_ARTIFACT_FIELD_DESC;
      case ODEPACKAGE:
        return ODEPACKAGE_FIELD_DESC;
      case FAILURE_ANALYSIS_ARTIFACT:
        return FAILURE_ANALYSIS_ARTIFACT_FIELD_DESC;
      case DEPENDABILITY_ARTIFACT:
        return DEPENDABILITY_ARTIFACT_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIAbstractDesignArtifact getDesignArtifact() {
    if (getSetField() == _Fields.DESIGN_ARTIFACT) {
      return (TDDIAbstractDesignArtifact)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DesignArtifact' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDesignArtifact(TDDIAbstractDesignArtifact value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DESIGN_ARTIFACT;
    value_ = value;
  }

  public TDDIAbstractODEPackage getODEPackage() {
    if (getSetField() == _Fields.ODEPACKAGE) {
      return (TDDIAbstractODEPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ODEPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setODEPackage(TDDIAbstractODEPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ODEPACKAGE;
    value_ = value;
  }

  public TDDIAbstractFailureAnalysisArtifact getFailureAnalysisArtifact() {
    if (getSetField() == _Fields.FAILURE_ANALYSIS_ARTIFACT) {
      return (TDDIAbstractFailureAnalysisArtifact)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'FailureAnalysisArtifact' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFailureAnalysisArtifact(TDDIAbstractFailureAnalysisArtifact value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FAILURE_ANALYSIS_ARTIFACT;
    value_ = value;
  }

  public TDDIAbstractDependabilityArtifact getDependabilityArtifact() {
    if (getSetField() == _Fields.DEPENDABILITY_ARTIFACT) {
      return (TDDIAbstractDependabilityArtifact)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DependabilityArtifact' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDependabilityArtifact(TDDIAbstractDependabilityArtifact value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DEPENDABILITY_ARTIFACT;
    value_ = value;
  }

  public boolean isSetDesignArtifact() {
    return setField_ == _Fields.DESIGN_ARTIFACT;
  }


  public boolean isSetODEPackage() {
    return setField_ == _Fields.ODEPACKAGE;
  }


  public boolean isSetFailureAnalysisArtifact() {
    return setField_ == _Fields.FAILURE_ANALYSIS_ARTIFACT;
  }


  public boolean isSetDependabilityArtifact() {
    return setField_ == _Fields.DEPENDABILITY_ARTIFACT;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIBaseElementUnion) {
      return equals((TDDIBaseElementUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIBaseElementUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIBaseElementUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
