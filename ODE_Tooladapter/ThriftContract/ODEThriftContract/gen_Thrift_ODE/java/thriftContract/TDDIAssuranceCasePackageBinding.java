/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDIAssuranceCasePackageBinding implements org.apache.thrift.TBase<TDDIAssuranceCasePackageBinding, TDDIAssuranceCasePackageBinding._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAssuranceCasePackageBinding> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAssuranceCasePackageBinding");

  private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("Gid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_CITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCitation", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField IS_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("IsAbstract", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CITED_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("CitedElement", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ABSTRACT_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("AbstractForm", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField IMPLEMENTATION_CONSTRAINT_FIELD_DESC = new org.apache.thrift.protocol.TField("ImplementationConstraint", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("Note", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TAGGED_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("TaggedValue", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ASSURANCE_CASE_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceCasePackage", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("Interface", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField ARTIFACT_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ArtifactPackage", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField ARGUMENT_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ArgumentPackage", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField TERMINOLOGY_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("TerminologyPackage", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ParticipantPackage", org.apache.thrift.protocol.TType.LIST, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAssuranceCasePackageBindingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAssuranceCasePackageBindingTupleSchemeFactory();

  public java.lang.String Gid; // required
  public boolean IsCitation; // required
  public boolean IsAbstract; // required
  public TDDIAbstractSACMElement CitedElement; // required
  public TDDIAbstractSACMElement AbstractForm; // required
  public TDDIAbstractLangString Name; // required
  public TDDIDescription Description; // required
  public java.util.List<TDDIImplementationConstraintRef> ImplementationConstraint; // required
  public java.util.List<TDDINoteRef> Note; // required
  public java.util.List<TDDITaggedValueRef> TaggedValue; // required
  public java.util.List<TDDIAbstractAssuranceCasePackageRef> AssuranceCasePackage; // required
  public java.util.List<TDDIAssuranceCasePackageInterfaceRef> Interface; // required
  public java.util.List<TDDIAbstractArtifactPackageRef> ArtifactPackage; // required
  public java.util.List<TDDIAbstractArgumentPackageRef> ArgumentPackage; // required
  public java.util.List<TDDIAbstractTerminologyPackageRef> TerminologyPackage; // required
  public java.util.List<TDDIAbstractAssuranceCasePackageRef> ParticipantPackage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GID((short)1, "Gid"),
    IS_CITATION((short)2, "IsCitation"),
    IS_ABSTRACT((short)3, "IsAbstract"),
    CITED_ELEMENT((short)4, "CitedElement"),
    ABSTRACT_FORM((short)5, "AbstractForm"),
    NAME((short)6, "Name"),
    DESCRIPTION((short)7, "Description"),
    IMPLEMENTATION_CONSTRAINT((short)8, "ImplementationConstraint"),
    NOTE((short)9, "Note"),
    TAGGED_VALUE((short)10, "TaggedValue"),
    ASSURANCE_CASE_PACKAGE((short)11, "AssuranceCasePackage"),
    INTERFACE((short)12, "Interface"),
    ARTIFACT_PACKAGE((short)13, "ArtifactPackage"),
    ARGUMENT_PACKAGE((short)14, "ArgumentPackage"),
    TERMINOLOGY_PACKAGE((short)15, "TerminologyPackage"),
    PARTICIPANT_PACKAGE((short)16, "ParticipantPackage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GID
          return GID;
        case 2: // IS_CITATION
          return IS_CITATION;
        case 3: // IS_ABSTRACT
          return IS_ABSTRACT;
        case 4: // CITED_ELEMENT
          return CITED_ELEMENT;
        case 5: // ABSTRACT_FORM
          return ABSTRACT_FORM;
        case 6: // NAME
          return NAME;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // IMPLEMENTATION_CONSTRAINT
          return IMPLEMENTATION_CONSTRAINT;
        case 9: // NOTE
          return NOTE;
        case 10: // TAGGED_VALUE
          return TAGGED_VALUE;
        case 11: // ASSURANCE_CASE_PACKAGE
          return ASSURANCE_CASE_PACKAGE;
        case 12: // INTERFACE
          return INTERFACE;
        case 13: // ARTIFACT_PACKAGE
          return ARTIFACT_PACKAGE;
        case 14: // ARGUMENT_PACKAGE
          return ARGUMENT_PACKAGE;
        case 15: // TERMINOLOGY_PACKAGE
          return TERMINOLOGY_PACKAGE;
        case 16: // PARTICIPANT_PACKAGE
          return PARTICIPANT_PACKAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISCITATION_ISSET_ID = 0;
  private static final int __ISABSTRACT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("Gid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CITATION, new org.apache.thrift.meta_data.FieldMetaData("IsCitation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ABSTRACT, new org.apache.thrift.meta_data.FieldMetaData("IsAbstract", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CITED_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("CitedElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractSACMElement")));
    tmpMap.put(_Fields.ABSTRACT_FORM, new org.apache.thrift.meta_data.FieldMetaData("AbstractForm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractSACMElement")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractLangString")));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIDescription")));
    tmpMap.put(_Fields.IMPLEMENTATION_CONSTRAINT, new org.apache.thrift.meta_data.FieldMetaData("ImplementationConstraint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIImplementationConstraintRef.class))));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("Note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDINoteRef.class))));
    tmpMap.put(_Fields.TAGGED_VALUE, new org.apache.thrift.meta_data.FieldMetaData("TaggedValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDITaggedValueRef.class))));
    tmpMap.put(_Fields.ASSURANCE_CASE_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("AssuranceCasePackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractAssuranceCasePackageRef.class))));
    tmpMap.put(_Fields.INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("Interface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssuranceCasePackageInterfaceRef.class))));
    tmpMap.put(_Fields.ARTIFACT_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ArtifactPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractArtifactPackageRef.class))));
    tmpMap.put(_Fields.ARGUMENT_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ArgumentPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractArgumentPackageRef.class))));
    tmpMap.put(_Fields.TERMINOLOGY_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("TerminologyPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractTerminologyPackageRef.class))));
    tmpMap.put(_Fields.PARTICIPANT_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ParticipantPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractAssuranceCasePackageRef.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAssuranceCasePackageBinding.class, metaDataMap);
  }

  public TDDIAssuranceCasePackageBinding() {
    this.Gid = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.ImplementationConstraint = new java.util.ArrayList<TDDIImplementationConstraintRef>();

    this.Note = new java.util.ArrayList<TDDINoteRef>();

    this.TaggedValue = new java.util.ArrayList<TDDITaggedValueRef>();

    this.AssuranceCasePackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>();

    this.Interface = new java.util.ArrayList<TDDIAssuranceCasePackageInterfaceRef>();

    this.ArtifactPackage = new java.util.ArrayList<TDDIAbstractArtifactPackageRef>();

    this.ArgumentPackage = new java.util.ArrayList<TDDIAbstractArgumentPackageRef>();

    this.TerminologyPackage = new java.util.ArrayList<TDDIAbstractTerminologyPackageRef>();

    this.ParticipantPackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>();

  }

  public TDDIAssuranceCasePackageBinding(
    java.lang.String Gid,
    boolean IsCitation,
    boolean IsAbstract,
    TDDIAbstractSACMElement CitedElement,
    TDDIAbstractSACMElement AbstractForm,
    TDDIAbstractLangString Name,
    TDDIDescription Description,
    java.util.List<TDDIImplementationConstraintRef> ImplementationConstraint,
    java.util.List<TDDINoteRef> Note,
    java.util.List<TDDITaggedValueRef> TaggedValue,
    java.util.List<TDDIAbstractAssuranceCasePackageRef> AssuranceCasePackage,
    java.util.List<TDDIAssuranceCasePackageInterfaceRef> Interface,
    java.util.List<TDDIAbstractArtifactPackageRef> ArtifactPackage,
    java.util.List<TDDIAbstractArgumentPackageRef> ArgumentPackage,
    java.util.List<TDDIAbstractTerminologyPackageRef> TerminologyPackage,
    java.util.List<TDDIAbstractAssuranceCasePackageRef> ParticipantPackage)
  {
    this();
    this.Gid = Gid;
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    this.CitedElement = CitedElement;
    this.AbstractForm = AbstractForm;
    this.Name = Name;
    this.Description = Description;
    this.ImplementationConstraint = ImplementationConstraint;
    this.Note = Note;
    this.TaggedValue = TaggedValue;
    this.AssuranceCasePackage = AssuranceCasePackage;
    this.Interface = Interface;
    this.ArtifactPackage = ArtifactPackage;
    this.ArgumentPackage = ArgumentPackage;
    this.TerminologyPackage = TerminologyPackage;
    this.ParticipantPackage = ParticipantPackage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAssuranceCasePackageBinding(TDDIAssuranceCasePackageBinding other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGid()) {
      this.Gid = other.Gid;
    }
    this.IsCitation = other.IsCitation;
    this.IsAbstract = other.IsAbstract;
    if (other.isSetCitedElement()) {
      this.CitedElement = new TDDIAbstractSACMElement(other.CitedElement);
    }
    if (other.isSetAbstractForm()) {
      this.AbstractForm = new TDDIAbstractSACMElement(other.AbstractForm);
    }
    if (other.isSetName()) {
      this.Name = new TDDIAbstractLangString(other.Name);
    }
    if (other.isSetDescription()) {
      this.Description = new TDDIDescription(other.Description);
    }
    if (other.isSetImplementationConstraint()) {
      java.util.List<TDDIImplementationConstraintRef> __this__ImplementationConstraint = new java.util.ArrayList<TDDIImplementationConstraintRef>(other.ImplementationConstraint.size());
      for (TDDIImplementationConstraintRef other_element : other.ImplementationConstraint) {
        __this__ImplementationConstraint.add(new TDDIImplementationConstraintRef(other_element));
      }
      this.ImplementationConstraint = __this__ImplementationConstraint;
    }
    if (other.isSetNote()) {
      java.util.List<TDDINoteRef> __this__Note = new java.util.ArrayList<TDDINoteRef>(other.Note.size());
      for (TDDINoteRef other_element : other.Note) {
        __this__Note.add(new TDDINoteRef(other_element));
      }
      this.Note = __this__Note;
    }
    if (other.isSetTaggedValue()) {
      java.util.List<TDDITaggedValueRef> __this__TaggedValue = new java.util.ArrayList<TDDITaggedValueRef>(other.TaggedValue.size());
      for (TDDITaggedValueRef other_element : other.TaggedValue) {
        __this__TaggedValue.add(new TDDITaggedValueRef(other_element));
      }
      this.TaggedValue = __this__TaggedValue;
    }
    if (other.isSetAssuranceCasePackage()) {
      java.util.List<TDDIAbstractAssuranceCasePackageRef> __this__AssuranceCasePackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>(other.AssuranceCasePackage.size());
      for (TDDIAbstractAssuranceCasePackageRef other_element : other.AssuranceCasePackage) {
        __this__AssuranceCasePackage.add(new TDDIAbstractAssuranceCasePackageRef(other_element));
      }
      this.AssuranceCasePackage = __this__AssuranceCasePackage;
    }
    if (other.isSetInterface()) {
      java.util.List<TDDIAssuranceCasePackageInterfaceRef> __this__Interface = new java.util.ArrayList<TDDIAssuranceCasePackageInterfaceRef>(other.Interface.size());
      for (TDDIAssuranceCasePackageInterfaceRef other_element : other.Interface) {
        __this__Interface.add(new TDDIAssuranceCasePackageInterfaceRef(other_element));
      }
      this.Interface = __this__Interface;
    }
    if (other.isSetArtifactPackage()) {
      java.util.List<TDDIAbstractArtifactPackageRef> __this__ArtifactPackage = new java.util.ArrayList<TDDIAbstractArtifactPackageRef>(other.ArtifactPackage.size());
      for (TDDIAbstractArtifactPackageRef other_element : other.ArtifactPackage) {
        __this__ArtifactPackage.add(new TDDIAbstractArtifactPackageRef(other_element));
      }
      this.ArtifactPackage = __this__ArtifactPackage;
    }
    if (other.isSetArgumentPackage()) {
      java.util.List<TDDIAbstractArgumentPackageRef> __this__ArgumentPackage = new java.util.ArrayList<TDDIAbstractArgumentPackageRef>(other.ArgumentPackage.size());
      for (TDDIAbstractArgumentPackageRef other_element : other.ArgumentPackage) {
        __this__ArgumentPackage.add(new TDDIAbstractArgumentPackageRef(other_element));
      }
      this.ArgumentPackage = __this__ArgumentPackage;
    }
    if (other.isSetTerminologyPackage()) {
      java.util.List<TDDIAbstractTerminologyPackageRef> __this__TerminologyPackage = new java.util.ArrayList<TDDIAbstractTerminologyPackageRef>(other.TerminologyPackage.size());
      for (TDDIAbstractTerminologyPackageRef other_element : other.TerminologyPackage) {
        __this__TerminologyPackage.add(new TDDIAbstractTerminologyPackageRef(other_element));
      }
      this.TerminologyPackage = __this__TerminologyPackage;
    }
    if (other.isSetParticipantPackage()) {
      java.util.List<TDDIAbstractAssuranceCasePackageRef> __this__ParticipantPackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>(other.ParticipantPackage.size());
      for (TDDIAbstractAssuranceCasePackageRef other_element : other.ParticipantPackage) {
        __this__ParticipantPackage.add(new TDDIAbstractAssuranceCasePackageRef(other_element));
      }
      this.ParticipantPackage = __this__ParticipantPackage;
    }
  }

  public TDDIAssuranceCasePackageBinding deepCopy() {
    return new TDDIAssuranceCasePackageBinding(this);
  }

  @Override
  public void clear() {
    this.Gid = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.CitedElement = null;
    this.AbstractForm = null;
    this.Name = null;
    this.Description = null;
    this.ImplementationConstraint = new java.util.ArrayList<TDDIImplementationConstraintRef>();

    this.Note = new java.util.ArrayList<TDDINoteRef>();

    this.TaggedValue = new java.util.ArrayList<TDDITaggedValueRef>();

    this.AssuranceCasePackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>();

    this.Interface = new java.util.ArrayList<TDDIAssuranceCasePackageInterfaceRef>();

    this.ArtifactPackage = new java.util.ArrayList<TDDIAbstractArtifactPackageRef>();

    this.ArgumentPackage = new java.util.ArrayList<TDDIAbstractArgumentPackageRef>();

    this.TerminologyPackage = new java.util.ArrayList<TDDIAbstractTerminologyPackageRef>();

    this.ParticipantPackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>();

  }

  public java.lang.String getGid() {
    return this.Gid;
  }

  public TDDIAssuranceCasePackageBinding setGid(java.lang.String Gid) {
    this.Gid = Gid;
    return this;
  }

  public void unsetGid() {
    this.Gid = null;
  }

  /** Returns true if field Gid is set (has been assigned a value) and false otherwise */
  public boolean isSetGid() {
    return this.Gid != null;
  }

  public void setGidIsSet(boolean value) {
    if (!value) {
      this.Gid = null;
    }
  }

  public boolean isIsCitation() {
    return this.IsCitation;
  }

  public TDDIAssuranceCasePackageBinding setIsCitation(boolean IsCitation) {
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    return this;
  }

  public void unsetIsCitation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  /** Returns true if field IsCitation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCitation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  public void setIsCitationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCITATION_ISSET_ID, value);
  }

  public boolean isIsAbstract() {
    return this.IsAbstract;
  }

  public TDDIAssuranceCasePackageBinding setIsAbstract(boolean IsAbstract) {
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    return this;
  }

  public void unsetIsAbstract() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  /** Returns true if field IsAbstract is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAbstract() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  public void setIsAbstractIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISABSTRACT_ISSET_ID, value);
  }

  public TDDIAbstractSACMElement getCitedElement() {
    return this.CitedElement;
  }

  public TDDIAssuranceCasePackageBinding setCitedElement(TDDIAbstractSACMElement CitedElement) {
    this.CitedElement = CitedElement;
    return this;
  }

  public void unsetCitedElement() {
    this.CitedElement = null;
  }

  /** Returns true if field CitedElement is set (has been assigned a value) and false otherwise */
  public boolean isSetCitedElement() {
    return this.CitedElement != null;
  }

  public void setCitedElementIsSet(boolean value) {
    if (!value) {
      this.CitedElement = null;
    }
  }

  public TDDIAbstractSACMElement getAbstractForm() {
    return this.AbstractForm;
  }

  public TDDIAssuranceCasePackageBinding setAbstractForm(TDDIAbstractSACMElement AbstractForm) {
    this.AbstractForm = AbstractForm;
    return this;
  }

  public void unsetAbstractForm() {
    this.AbstractForm = null;
  }

  /** Returns true if field AbstractForm is set (has been assigned a value) and false otherwise */
  public boolean isSetAbstractForm() {
    return this.AbstractForm != null;
  }

  public void setAbstractFormIsSet(boolean value) {
    if (!value) {
      this.AbstractForm = null;
    }
  }

  public TDDIAbstractLangString getName() {
    return this.Name;
  }

  public TDDIAssuranceCasePackageBinding setName(TDDIAbstractLangString Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public TDDIDescription getDescription() {
    return this.Description;
  }

  public TDDIAssuranceCasePackageBinding setDescription(TDDIDescription Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getImplementationConstraintSize() {
    return (this.ImplementationConstraint == null) ? 0 : this.ImplementationConstraint.size();
  }

  public java.util.Iterator<TDDIImplementationConstraintRef> getImplementationConstraintIterator() {
    return (this.ImplementationConstraint == null) ? null : this.ImplementationConstraint.iterator();
  }

  public void addToImplementationConstraint(TDDIImplementationConstraintRef elem) {
    if (this.ImplementationConstraint == null) {
      this.ImplementationConstraint = new java.util.ArrayList<TDDIImplementationConstraintRef>();
    }
    this.ImplementationConstraint.add(elem);
  }

  public java.util.List<TDDIImplementationConstraintRef> getImplementationConstraint() {
    return this.ImplementationConstraint;
  }

  public TDDIAssuranceCasePackageBinding setImplementationConstraint(java.util.List<TDDIImplementationConstraintRef> ImplementationConstraint) {
    this.ImplementationConstraint = ImplementationConstraint;
    return this;
  }

  public void unsetImplementationConstraint() {
    this.ImplementationConstraint = null;
  }

  /** Returns true if field ImplementationConstraint is set (has been assigned a value) and false otherwise */
  public boolean isSetImplementationConstraint() {
    return this.ImplementationConstraint != null;
  }

  public void setImplementationConstraintIsSet(boolean value) {
    if (!value) {
      this.ImplementationConstraint = null;
    }
  }

  public int getNoteSize() {
    return (this.Note == null) ? 0 : this.Note.size();
  }

  public java.util.Iterator<TDDINoteRef> getNoteIterator() {
    return (this.Note == null) ? null : this.Note.iterator();
  }

  public void addToNote(TDDINoteRef elem) {
    if (this.Note == null) {
      this.Note = new java.util.ArrayList<TDDINoteRef>();
    }
    this.Note.add(elem);
  }

  public java.util.List<TDDINoteRef> getNote() {
    return this.Note;
  }

  public TDDIAssuranceCasePackageBinding setNote(java.util.List<TDDINoteRef> Note) {
    this.Note = Note;
    return this;
  }

  public void unsetNote() {
    this.Note = null;
  }

  /** Returns true if field Note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.Note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.Note = null;
    }
  }

  public int getTaggedValueSize() {
    return (this.TaggedValue == null) ? 0 : this.TaggedValue.size();
  }

  public java.util.Iterator<TDDITaggedValueRef> getTaggedValueIterator() {
    return (this.TaggedValue == null) ? null : this.TaggedValue.iterator();
  }

  public void addToTaggedValue(TDDITaggedValueRef elem) {
    if (this.TaggedValue == null) {
      this.TaggedValue = new java.util.ArrayList<TDDITaggedValueRef>();
    }
    this.TaggedValue.add(elem);
  }

  public java.util.List<TDDITaggedValueRef> getTaggedValue() {
    return this.TaggedValue;
  }

  public TDDIAssuranceCasePackageBinding setTaggedValue(java.util.List<TDDITaggedValueRef> TaggedValue) {
    this.TaggedValue = TaggedValue;
    return this;
  }

  public void unsetTaggedValue() {
    this.TaggedValue = null;
  }

  /** Returns true if field TaggedValue is set (has been assigned a value) and false otherwise */
  public boolean isSetTaggedValue() {
    return this.TaggedValue != null;
  }

  public void setTaggedValueIsSet(boolean value) {
    if (!value) {
      this.TaggedValue = null;
    }
  }

  public int getAssuranceCasePackageSize() {
    return (this.AssuranceCasePackage == null) ? 0 : this.AssuranceCasePackage.size();
  }

  public java.util.Iterator<TDDIAbstractAssuranceCasePackageRef> getAssuranceCasePackageIterator() {
    return (this.AssuranceCasePackage == null) ? null : this.AssuranceCasePackage.iterator();
  }

  public void addToAssuranceCasePackage(TDDIAbstractAssuranceCasePackageRef elem) {
    if (this.AssuranceCasePackage == null) {
      this.AssuranceCasePackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>();
    }
    this.AssuranceCasePackage.add(elem);
  }

  public java.util.List<TDDIAbstractAssuranceCasePackageRef> getAssuranceCasePackage() {
    return this.AssuranceCasePackage;
  }

  public TDDIAssuranceCasePackageBinding setAssuranceCasePackage(java.util.List<TDDIAbstractAssuranceCasePackageRef> AssuranceCasePackage) {
    this.AssuranceCasePackage = AssuranceCasePackage;
    return this;
  }

  public void unsetAssuranceCasePackage() {
    this.AssuranceCasePackage = null;
  }

  /** Returns true if field AssuranceCasePackage is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceCasePackage() {
    return this.AssuranceCasePackage != null;
  }

  public void setAssuranceCasePackageIsSet(boolean value) {
    if (!value) {
      this.AssuranceCasePackage = null;
    }
  }

  public int getInterfaceSize() {
    return (this.Interface == null) ? 0 : this.Interface.size();
  }

  public java.util.Iterator<TDDIAssuranceCasePackageInterfaceRef> getInterfaceIterator() {
    return (this.Interface == null) ? null : this.Interface.iterator();
  }

  public void addToInterface(TDDIAssuranceCasePackageInterfaceRef elem) {
    if (this.Interface == null) {
      this.Interface = new java.util.ArrayList<TDDIAssuranceCasePackageInterfaceRef>();
    }
    this.Interface.add(elem);
  }

  public java.util.List<TDDIAssuranceCasePackageInterfaceRef> getInterface() {
    return this.Interface;
  }

  public TDDIAssuranceCasePackageBinding setInterface(java.util.List<TDDIAssuranceCasePackageInterfaceRef> Interface) {
    this.Interface = Interface;
    return this;
  }

  public void unsetInterface() {
    this.Interface = null;
  }

  /** Returns true if field Interface is set (has been assigned a value) and false otherwise */
  public boolean isSetInterface() {
    return this.Interface != null;
  }

  public void setInterfaceIsSet(boolean value) {
    if (!value) {
      this.Interface = null;
    }
  }

  public int getArtifactPackageSize() {
    return (this.ArtifactPackage == null) ? 0 : this.ArtifactPackage.size();
  }

  public java.util.Iterator<TDDIAbstractArtifactPackageRef> getArtifactPackageIterator() {
    return (this.ArtifactPackage == null) ? null : this.ArtifactPackage.iterator();
  }

  public void addToArtifactPackage(TDDIAbstractArtifactPackageRef elem) {
    if (this.ArtifactPackage == null) {
      this.ArtifactPackage = new java.util.ArrayList<TDDIAbstractArtifactPackageRef>();
    }
    this.ArtifactPackage.add(elem);
  }

  public java.util.List<TDDIAbstractArtifactPackageRef> getArtifactPackage() {
    return this.ArtifactPackage;
  }

  public TDDIAssuranceCasePackageBinding setArtifactPackage(java.util.List<TDDIAbstractArtifactPackageRef> ArtifactPackage) {
    this.ArtifactPackage = ArtifactPackage;
    return this;
  }

  public void unsetArtifactPackage() {
    this.ArtifactPackage = null;
  }

  /** Returns true if field ArtifactPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetArtifactPackage() {
    return this.ArtifactPackage != null;
  }

  public void setArtifactPackageIsSet(boolean value) {
    if (!value) {
      this.ArtifactPackage = null;
    }
  }

  public int getArgumentPackageSize() {
    return (this.ArgumentPackage == null) ? 0 : this.ArgumentPackage.size();
  }

  public java.util.Iterator<TDDIAbstractArgumentPackageRef> getArgumentPackageIterator() {
    return (this.ArgumentPackage == null) ? null : this.ArgumentPackage.iterator();
  }

  public void addToArgumentPackage(TDDIAbstractArgumentPackageRef elem) {
    if (this.ArgumentPackage == null) {
      this.ArgumentPackage = new java.util.ArrayList<TDDIAbstractArgumentPackageRef>();
    }
    this.ArgumentPackage.add(elem);
  }

  public java.util.List<TDDIAbstractArgumentPackageRef> getArgumentPackage() {
    return this.ArgumentPackage;
  }

  public TDDIAssuranceCasePackageBinding setArgumentPackage(java.util.List<TDDIAbstractArgumentPackageRef> ArgumentPackage) {
    this.ArgumentPackage = ArgumentPackage;
    return this;
  }

  public void unsetArgumentPackage() {
    this.ArgumentPackage = null;
  }

  /** Returns true if field ArgumentPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetArgumentPackage() {
    return this.ArgumentPackage != null;
  }

  public void setArgumentPackageIsSet(boolean value) {
    if (!value) {
      this.ArgumentPackage = null;
    }
  }

  public int getTerminologyPackageSize() {
    return (this.TerminologyPackage == null) ? 0 : this.TerminologyPackage.size();
  }

  public java.util.Iterator<TDDIAbstractTerminologyPackageRef> getTerminologyPackageIterator() {
    return (this.TerminologyPackage == null) ? null : this.TerminologyPackage.iterator();
  }

  public void addToTerminologyPackage(TDDIAbstractTerminologyPackageRef elem) {
    if (this.TerminologyPackage == null) {
      this.TerminologyPackage = new java.util.ArrayList<TDDIAbstractTerminologyPackageRef>();
    }
    this.TerminologyPackage.add(elem);
  }

  public java.util.List<TDDIAbstractTerminologyPackageRef> getTerminologyPackage() {
    return this.TerminologyPackage;
  }

  public TDDIAssuranceCasePackageBinding setTerminologyPackage(java.util.List<TDDIAbstractTerminologyPackageRef> TerminologyPackage) {
    this.TerminologyPackage = TerminologyPackage;
    return this;
  }

  public void unsetTerminologyPackage() {
    this.TerminologyPackage = null;
  }

  /** Returns true if field TerminologyPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetTerminologyPackage() {
    return this.TerminologyPackage != null;
  }

  public void setTerminologyPackageIsSet(boolean value) {
    if (!value) {
      this.TerminologyPackage = null;
    }
  }

  public int getParticipantPackageSize() {
    return (this.ParticipantPackage == null) ? 0 : this.ParticipantPackage.size();
  }

  public java.util.Iterator<TDDIAbstractAssuranceCasePackageRef> getParticipantPackageIterator() {
    return (this.ParticipantPackage == null) ? null : this.ParticipantPackage.iterator();
  }

  public void addToParticipantPackage(TDDIAbstractAssuranceCasePackageRef elem) {
    if (this.ParticipantPackage == null) {
      this.ParticipantPackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>();
    }
    this.ParticipantPackage.add(elem);
  }

  public java.util.List<TDDIAbstractAssuranceCasePackageRef> getParticipantPackage() {
    return this.ParticipantPackage;
  }

  public TDDIAssuranceCasePackageBinding setParticipantPackage(java.util.List<TDDIAbstractAssuranceCasePackageRef> ParticipantPackage) {
    this.ParticipantPackage = ParticipantPackage;
    return this;
  }

  public void unsetParticipantPackage() {
    this.ParticipantPackage = null;
  }

  /** Returns true if field ParticipantPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantPackage() {
    return this.ParticipantPackage != null;
  }

  public void setParticipantPackageIsSet(boolean value) {
    if (!value) {
      this.ParticipantPackage = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case GID:
      if (value == null) {
        unsetGid();
      } else {
        setGid((java.lang.String)value);
      }
      break;

    case IS_CITATION:
      if (value == null) {
        unsetIsCitation();
      } else {
        setIsCitation((java.lang.Boolean)value);
      }
      break;

    case IS_ABSTRACT:
      if (value == null) {
        unsetIsAbstract();
      } else {
        setIsAbstract((java.lang.Boolean)value);
      }
      break;

    case CITED_ELEMENT:
      if (value == null) {
        unsetCitedElement();
      } else {
        setCitedElement((TDDIAbstractSACMElement)value);
      }
      break;

    case ABSTRACT_FORM:
      if (value == null) {
        unsetAbstractForm();
      } else {
        setAbstractForm((TDDIAbstractSACMElement)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((TDDIAbstractLangString)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((TDDIDescription)value);
      }
      break;

    case IMPLEMENTATION_CONSTRAINT:
      if (value == null) {
        unsetImplementationConstraint();
      } else {
        setImplementationConstraint((java.util.List<TDDIImplementationConstraintRef>)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((java.util.List<TDDINoteRef>)value);
      }
      break;

    case TAGGED_VALUE:
      if (value == null) {
        unsetTaggedValue();
      } else {
        setTaggedValue((java.util.List<TDDITaggedValueRef>)value);
      }
      break;

    case ASSURANCE_CASE_PACKAGE:
      if (value == null) {
        unsetAssuranceCasePackage();
      } else {
        setAssuranceCasePackage((java.util.List<TDDIAbstractAssuranceCasePackageRef>)value);
      }
      break;

    case INTERFACE:
      if (value == null) {
        unsetInterface();
      } else {
        setInterface((java.util.List<TDDIAssuranceCasePackageInterfaceRef>)value);
      }
      break;

    case ARTIFACT_PACKAGE:
      if (value == null) {
        unsetArtifactPackage();
      } else {
        setArtifactPackage((java.util.List<TDDIAbstractArtifactPackageRef>)value);
      }
      break;

    case ARGUMENT_PACKAGE:
      if (value == null) {
        unsetArgumentPackage();
      } else {
        setArgumentPackage((java.util.List<TDDIAbstractArgumentPackageRef>)value);
      }
      break;

    case TERMINOLOGY_PACKAGE:
      if (value == null) {
        unsetTerminologyPackage();
      } else {
        setTerminologyPackage((java.util.List<TDDIAbstractTerminologyPackageRef>)value);
      }
      break;

    case PARTICIPANT_PACKAGE:
      if (value == null) {
        unsetParticipantPackage();
      } else {
        setParticipantPackage((java.util.List<TDDIAbstractAssuranceCasePackageRef>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GID:
      return getGid();

    case IS_CITATION:
      return isIsCitation();

    case IS_ABSTRACT:
      return isIsAbstract();

    case CITED_ELEMENT:
      return getCitedElement();

    case ABSTRACT_FORM:
      return getAbstractForm();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case IMPLEMENTATION_CONSTRAINT:
      return getImplementationConstraint();

    case NOTE:
      return getNote();

    case TAGGED_VALUE:
      return getTaggedValue();

    case ASSURANCE_CASE_PACKAGE:
      return getAssuranceCasePackage();

    case INTERFACE:
      return getInterface();

    case ARTIFACT_PACKAGE:
      return getArtifactPackage();

    case ARGUMENT_PACKAGE:
      return getArgumentPackage();

    case TERMINOLOGY_PACKAGE:
      return getTerminologyPackage();

    case PARTICIPANT_PACKAGE:
      return getParticipantPackage();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GID:
      return isSetGid();
    case IS_CITATION:
      return isSetIsCitation();
    case IS_ABSTRACT:
      return isSetIsAbstract();
    case CITED_ELEMENT:
      return isSetCitedElement();
    case ABSTRACT_FORM:
      return isSetAbstractForm();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case IMPLEMENTATION_CONSTRAINT:
      return isSetImplementationConstraint();
    case NOTE:
      return isSetNote();
    case TAGGED_VALUE:
      return isSetTaggedValue();
    case ASSURANCE_CASE_PACKAGE:
      return isSetAssuranceCasePackage();
    case INTERFACE:
      return isSetInterface();
    case ARTIFACT_PACKAGE:
      return isSetArtifactPackage();
    case ARGUMENT_PACKAGE:
      return isSetArgumentPackage();
    case TERMINOLOGY_PACKAGE:
      return isSetTerminologyPackage();
    case PARTICIPANT_PACKAGE:
      return isSetParticipantPackage();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAssuranceCasePackageBinding)
      return this.equals((TDDIAssuranceCasePackageBinding)that);
    return false;
  }

  public boolean equals(TDDIAssuranceCasePackageBinding that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Gid = true && this.isSetGid();
    boolean that_present_Gid = true && that.isSetGid();
    if (this_present_Gid || that_present_Gid) {
      if (!(this_present_Gid && that_present_Gid))
        return false;
      if (!this.Gid.equals(that.Gid))
        return false;
    }

    boolean this_present_IsCitation = true;
    boolean that_present_IsCitation = true;
    if (this_present_IsCitation || that_present_IsCitation) {
      if (!(this_present_IsCitation && that_present_IsCitation))
        return false;
      if (this.IsCitation != that.IsCitation)
        return false;
    }

    boolean this_present_IsAbstract = true;
    boolean that_present_IsAbstract = true;
    if (this_present_IsAbstract || that_present_IsAbstract) {
      if (!(this_present_IsAbstract && that_present_IsAbstract))
        return false;
      if (this.IsAbstract != that.IsAbstract)
        return false;
    }

    boolean this_present_CitedElement = true && this.isSetCitedElement();
    boolean that_present_CitedElement = true && that.isSetCitedElement();
    if (this_present_CitedElement || that_present_CitedElement) {
      if (!(this_present_CitedElement && that_present_CitedElement))
        return false;
      if (!this.CitedElement.equals(that.CitedElement))
        return false;
    }

    boolean this_present_AbstractForm = true && this.isSetAbstractForm();
    boolean that_present_AbstractForm = true && that.isSetAbstractForm();
    if (this_present_AbstractForm || that_present_AbstractForm) {
      if (!(this_present_AbstractForm && that_present_AbstractForm))
        return false;
      if (!this.AbstractForm.equals(that.AbstractForm))
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_ImplementationConstraint = true && this.isSetImplementationConstraint();
    boolean that_present_ImplementationConstraint = true && that.isSetImplementationConstraint();
    if (this_present_ImplementationConstraint || that_present_ImplementationConstraint) {
      if (!(this_present_ImplementationConstraint && that_present_ImplementationConstraint))
        return false;
      if (!this.ImplementationConstraint.equals(that.ImplementationConstraint))
        return false;
    }

    boolean this_present_Note = true && this.isSetNote();
    boolean that_present_Note = true && that.isSetNote();
    if (this_present_Note || that_present_Note) {
      if (!(this_present_Note && that_present_Note))
        return false;
      if (!this.Note.equals(that.Note))
        return false;
    }

    boolean this_present_TaggedValue = true && this.isSetTaggedValue();
    boolean that_present_TaggedValue = true && that.isSetTaggedValue();
    if (this_present_TaggedValue || that_present_TaggedValue) {
      if (!(this_present_TaggedValue && that_present_TaggedValue))
        return false;
      if (!this.TaggedValue.equals(that.TaggedValue))
        return false;
    }

    boolean this_present_AssuranceCasePackage = true && this.isSetAssuranceCasePackage();
    boolean that_present_AssuranceCasePackage = true && that.isSetAssuranceCasePackage();
    if (this_present_AssuranceCasePackage || that_present_AssuranceCasePackage) {
      if (!(this_present_AssuranceCasePackage && that_present_AssuranceCasePackage))
        return false;
      if (!this.AssuranceCasePackage.equals(that.AssuranceCasePackage))
        return false;
    }

    boolean this_present_Interface = true && this.isSetInterface();
    boolean that_present_Interface = true && that.isSetInterface();
    if (this_present_Interface || that_present_Interface) {
      if (!(this_present_Interface && that_present_Interface))
        return false;
      if (!this.Interface.equals(that.Interface))
        return false;
    }

    boolean this_present_ArtifactPackage = true && this.isSetArtifactPackage();
    boolean that_present_ArtifactPackage = true && that.isSetArtifactPackage();
    if (this_present_ArtifactPackage || that_present_ArtifactPackage) {
      if (!(this_present_ArtifactPackage && that_present_ArtifactPackage))
        return false;
      if (!this.ArtifactPackage.equals(that.ArtifactPackage))
        return false;
    }

    boolean this_present_ArgumentPackage = true && this.isSetArgumentPackage();
    boolean that_present_ArgumentPackage = true && that.isSetArgumentPackage();
    if (this_present_ArgumentPackage || that_present_ArgumentPackage) {
      if (!(this_present_ArgumentPackage && that_present_ArgumentPackage))
        return false;
      if (!this.ArgumentPackage.equals(that.ArgumentPackage))
        return false;
    }

    boolean this_present_TerminologyPackage = true && this.isSetTerminologyPackage();
    boolean that_present_TerminologyPackage = true && that.isSetTerminologyPackage();
    if (this_present_TerminologyPackage || that_present_TerminologyPackage) {
      if (!(this_present_TerminologyPackage && that_present_TerminologyPackage))
        return false;
      if (!this.TerminologyPackage.equals(that.TerminologyPackage))
        return false;
    }

    boolean this_present_ParticipantPackage = true && this.isSetParticipantPackage();
    boolean that_present_ParticipantPackage = true && that.isSetParticipantPackage();
    if (this_present_ParticipantPackage || that_present_ParticipantPackage) {
      if (!(this_present_ParticipantPackage && that_present_ParticipantPackage))
        return false;
      if (!this.ParticipantPackage.equals(that.ParticipantPackage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGid()) ? 131071 : 524287);
    if (isSetGid())
      hashCode = hashCode * 8191 + Gid.hashCode();

    hashCode = hashCode * 8191 + ((IsCitation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((IsAbstract) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCitedElement()) ? 131071 : 524287);
    if (isSetCitedElement())
      hashCode = hashCode * 8191 + CitedElement.hashCode();

    hashCode = hashCode * 8191 + ((isSetAbstractForm()) ? 131071 : 524287);
    if (isSetAbstractForm())
      hashCode = hashCode * 8191 + AbstractForm.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetImplementationConstraint()) ? 131071 : 524287);
    if (isSetImplementationConstraint())
      hashCode = hashCode * 8191 + ImplementationConstraint.hashCode();

    hashCode = hashCode * 8191 + ((isSetNote()) ? 131071 : 524287);
    if (isSetNote())
      hashCode = hashCode * 8191 + Note.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaggedValue()) ? 131071 : 524287);
    if (isSetTaggedValue())
      hashCode = hashCode * 8191 + TaggedValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssuranceCasePackage()) ? 131071 : 524287);
    if (isSetAssuranceCasePackage())
      hashCode = hashCode * 8191 + AssuranceCasePackage.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterface()) ? 131071 : 524287);
    if (isSetInterface())
      hashCode = hashCode * 8191 + Interface.hashCode();

    hashCode = hashCode * 8191 + ((isSetArtifactPackage()) ? 131071 : 524287);
    if (isSetArtifactPackage())
      hashCode = hashCode * 8191 + ArtifactPackage.hashCode();

    hashCode = hashCode * 8191 + ((isSetArgumentPackage()) ? 131071 : 524287);
    if (isSetArgumentPackage())
      hashCode = hashCode * 8191 + ArgumentPackage.hashCode();

    hashCode = hashCode * 8191 + ((isSetTerminologyPackage()) ? 131071 : 524287);
    if (isSetTerminologyPackage())
      hashCode = hashCode * 8191 + TerminologyPackage.hashCode();

    hashCode = hashCode * 8191 + ((isSetParticipantPackage()) ? 131071 : 524287);
    if (isSetParticipantPackage())
      hashCode = hashCode * 8191 + ParticipantPackage.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAssuranceCasePackageBinding other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Gid, other.Gid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsCitation()).compareTo(other.isSetIsCitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCitation, other.IsCitation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsAbstract()).compareTo(other.isSetIsAbstract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAbstract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsAbstract, other.IsAbstract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCitedElement()).compareTo(other.isSetCitedElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCitedElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CitedElement, other.CitedElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAbstractForm()).compareTo(other.isSetAbstractForm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbstractForm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AbstractForm, other.AbstractForm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImplementationConstraint()).compareTo(other.isSetImplementationConstraint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImplementationConstraint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ImplementationConstraint, other.ImplementationConstraint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Note, other.Note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaggedValue()).compareTo(other.isSetTaggedValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaggedValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TaggedValue, other.TaggedValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssuranceCasePackage()).compareTo(other.isSetAssuranceCasePackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceCasePackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssuranceCasePackage, other.AssuranceCasePackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInterface()).compareTo(other.isSetInterface());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterface()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Interface, other.Interface);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArtifactPackage()).compareTo(other.isSetArtifactPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtifactPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ArtifactPackage, other.ArtifactPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArgumentPackage()).compareTo(other.isSetArgumentPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgumentPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ArgumentPackage, other.ArgumentPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTerminologyPackage()).compareTo(other.isSetTerminologyPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerminologyPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TerminologyPackage, other.TerminologyPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParticipantPackage()).compareTo(other.isSetParticipantPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ParticipantPackage, other.ParticipantPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAssuranceCasePackageBinding(");
    boolean first = true;

    sb.append("Gid:");
    if (this.Gid == null) {
      sb.append("null");
    } else {
      sb.append(this.Gid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCitation:");
    sb.append(this.IsCitation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsAbstract:");
    sb.append(this.IsAbstract);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CitedElement:");
    if (this.CitedElement == null) {
      sb.append("null");
    } else {
      sb.append(this.CitedElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AbstractForm:");
    if (this.AbstractForm == null) {
      sb.append("null");
    } else {
      sb.append(this.AbstractForm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ImplementationConstraint:");
    if (this.ImplementationConstraint == null) {
      sb.append("null");
    } else {
      sb.append(this.ImplementationConstraint);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Note:");
    if (this.Note == null) {
      sb.append("null");
    } else {
      sb.append(this.Note);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TaggedValue:");
    if (this.TaggedValue == null) {
      sb.append("null");
    } else {
      sb.append(this.TaggedValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssuranceCasePackage:");
    if (this.AssuranceCasePackage == null) {
      sb.append("null");
    } else {
      sb.append(this.AssuranceCasePackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Interface:");
    if (this.Interface == null) {
      sb.append("null");
    } else {
      sb.append(this.Interface);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ArtifactPackage:");
    if (this.ArtifactPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.ArtifactPackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ArgumentPackage:");
    if (this.ArgumentPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.ArgumentPackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TerminologyPackage:");
    if (this.TerminologyPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.TerminologyPackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ParticipantPackage:");
    if (this.ParticipantPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.ParticipantPackage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAssuranceCasePackageBindingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAssuranceCasePackageBindingStandardScheme getScheme() {
      return new TDDIAssuranceCasePackageBindingStandardScheme();
    }
  }

  private static class TDDIAssuranceCasePackageBindingStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAssuranceCasePackageBinding> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAssuranceCasePackageBinding struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Gid = iprot.readString();
              struct.setGidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_CITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsCitation = iprot.readBool();
              struct.setIsCitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_ABSTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsAbstract = iprot.readBool();
              struct.setIsAbstractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CITED_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.CitedElement = new TDDIAbstractSACMElement();
              struct.CitedElement.read(iprot);
              struct.setCitedElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ABSTRACT_FORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AbstractForm = new TDDIAbstractSACMElement();
              struct.AbstractForm.read(iprot);
              struct.setAbstractFormIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Name = new TDDIAbstractLangString();
              struct.Name.read(iprot);
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Description = new TDDIDescription();
              struct.Description.read(iprot);
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMPLEMENTATION_CONSTRAINT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2872 = iprot.readListBegin();
                struct.ImplementationConstraint = new java.util.ArrayList<TDDIImplementationConstraintRef>(_list2872.size);
                TDDIImplementationConstraintRef _elem2873;
                for (int _i2874 = 0; _i2874 < _list2872.size; ++_i2874)
                {
                  _elem2873 = new TDDIImplementationConstraintRef();
                  _elem2873.read(iprot);
                  struct.ImplementationConstraint.add(_elem2873);
                }
                iprot.readListEnd();
              }
              struct.setImplementationConstraintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2875 = iprot.readListBegin();
                struct.Note = new java.util.ArrayList<TDDINoteRef>(_list2875.size);
                TDDINoteRef _elem2876;
                for (int _i2877 = 0; _i2877 < _list2875.size; ++_i2877)
                {
                  _elem2876 = new TDDINoteRef();
                  _elem2876.read(iprot);
                  struct.Note.add(_elem2876);
                }
                iprot.readListEnd();
              }
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TAGGED_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2878 = iprot.readListBegin();
                struct.TaggedValue = new java.util.ArrayList<TDDITaggedValueRef>(_list2878.size);
                TDDITaggedValueRef _elem2879;
                for (int _i2880 = 0; _i2880 < _list2878.size; ++_i2880)
                {
                  _elem2879 = new TDDITaggedValueRef();
                  _elem2879.read(iprot);
                  struct.TaggedValue.add(_elem2879);
                }
                iprot.readListEnd();
              }
              struct.setTaggedValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ASSURANCE_CASE_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2881 = iprot.readListBegin();
                struct.AssuranceCasePackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>(_list2881.size);
                TDDIAbstractAssuranceCasePackageRef _elem2882;
                for (int _i2883 = 0; _i2883 < _list2881.size; ++_i2883)
                {
                  _elem2882 = new TDDIAbstractAssuranceCasePackageRef();
                  _elem2882.read(iprot);
                  struct.AssuranceCasePackage.add(_elem2882);
                }
                iprot.readListEnd();
              }
              struct.setAssuranceCasePackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INTERFACE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2884 = iprot.readListBegin();
                struct.Interface = new java.util.ArrayList<TDDIAssuranceCasePackageInterfaceRef>(_list2884.size);
                TDDIAssuranceCasePackageInterfaceRef _elem2885;
                for (int _i2886 = 0; _i2886 < _list2884.size; ++_i2886)
                {
                  _elem2885 = new TDDIAssuranceCasePackageInterfaceRef();
                  _elem2885.read(iprot);
                  struct.Interface.add(_elem2885);
                }
                iprot.readListEnd();
              }
              struct.setInterfaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ARTIFACT_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2887 = iprot.readListBegin();
                struct.ArtifactPackage = new java.util.ArrayList<TDDIAbstractArtifactPackageRef>(_list2887.size);
                TDDIAbstractArtifactPackageRef _elem2888;
                for (int _i2889 = 0; _i2889 < _list2887.size; ++_i2889)
                {
                  _elem2888 = new TDDIAbstractArtifactPackageRef();
                  _elem2888.read(iprot);
                  struct.ArtifactPackage.add(_elem2888);
                }
                iprot.readListEnd();
              }
              struct.setArtifactPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ARGUMENT_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2890 = iprot.readListBegin();
                struct.ArgumentPackage = new java.util.ArrayList<TDDIAbstractArgumentPackageRef>(_list2890.size);
                TDDIAbstractArgumentPackageRef _elem2891;
                for (int _i2892 = 0; _i2892 < _list2890.size; ++_i2892)
                {
                  _elem2891 = new TDDIAbstractArgumentPackageRef();
                  _elem2891.read(iprot);
                  struct.ArgumentPackage.add(_elem2891);
                }
                iprot.readListEnd();
              }
              struct.setArgumentPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TERMINOLOGY_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2893 = iprot.readListBegin();
                struct.TerminologyPackage = new java.util.ArrayList<TDDIAbstractTerminologyPackageRef>(_list2893.size);
                TDDIAbstractTerminologyPackageRef _elem2894;
                for (int _i2895 = 0; _i2895 < _list2893.size; ++_i2895)
                {
                  _elem2894 = new TDDIAbstractTerminologyPackageRef();
                  _elem2894.read(iprot);
                  struct.TerminologyPackage.add(_elem2894);
                }
                iprot.readListEnd();
              }
              struct.setTerminologyPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PARTICIPANT_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2896 = iprot.readListBegin();
                struct.ParticipantPackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>(_list2896.size);
                TDDIAbstractAssuranceCasePackageRef _elem2897;
                for (int _i2898 = 0; _i2898 < _list2896.size; ++_i2898)
                {
                  _elem2897 = new TDDIAbstractAssuranceCasePackageRef();
                  _elem2897.read(iprot);
                  struct.ParticipantPackage.add(_elem2897);
                }
                iprot.readListEnd();
              }
              struct.setParticipantPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAssuranceCasePackageBinding struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Gid != null) {
        oprot.writeFieldBegin(GID_FIELD_DESC);
        oprot.writeString(struct.Gid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CITATION_FIELD_DESC);
      oprot.writeBool(struct.IsCitation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ABSTRACT_FIELD_DESC);
      oprot.writeBool(struct.IsAbstract);
      oprot.writeFieldEnd();
      if (struct.CitedElement != null) {
        oprot.writeFieldBegin(CITED_ELEMENT_FIELD_DESC);
        struct.CitedElement.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.AbstractForm != null) {
        oprot.writeFieldBegin(ABSTRACT_FORM_FIELD_DESC);
        struct.AbstractForm.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        struct.Name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        struct.Description.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ImplementationConstraint != null) {
        oprot.writeFieldBegin(IMPLEMENTATION_CONSTRAINT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ImplementationConstraint.size()));
          for (TDDIImplementationConstraintRef _iter2899 : struct.ImplementationConstraint)
          {
            _iter2899.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Note.size()));
          for (TDDINoteRef _iter2900 : struct.Note)
          {
            _iter2900.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.TaggedValue != null) {
        oprot.writeFieldBegin(TAGGED_VALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.TaggedValue.size()));
          for (TDDITaggedValueRef _iter2901 : struct.TaggedValue)
          {
            _iter2901.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AssuranceCasePackage != null) {
        oprot.writeFieldBegin(ASSURANCE_CASE_PACKAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AssuranceCasePackage.size()));
          for (TDDIAbstractAssuranceCasePackageRef _iter2902 : struct.AssuranceCasePackage)
          {
            _iter2902.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Interface != null) {
        oprot.writeFieldBegin(INTERFACE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Interface.size()));
          for (TDDIAssuranceCasePackageInterfaceRef _iter2903 : struct.Interface)
          {
            _iter2903.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ArtifactPackage != null) {
        oprot.writeFieldBegin(ARTIFACT_PACKAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ArtifactPackage.size()));
          for (TDDIAbstractArtifactPackageRef _iter2904 : struct.ArtifactPackage)
          {
            _iter2904.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ArgumentPackage != null) {
        oprot.writeFieldBegin(ARGUMENT_PACKAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ArgumentPackage.size()));
          for (TDDIAbstractArgumentPackageRef _iter2905 : struct.ArgumentPackage)
          {
            _iter2905.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.TerminologyPackage != null) {
        oprot.writeFieldBegin(TERMINOLOGY_PACKAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.TerminologyPackage.size()));
          for (TDDIAbstractTerminologyPackageRef _iter2906 : struct.TerminologyPackage)
          {
            _iter2906.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ParticipantPackage != null) {
        oprot.writeFieldBegin(PARTICIPANT_PACKAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ParticipantPackage.size()));
          for (TDDIAbstractAssuranceCasePackageRef _iter2907 : struct.ParticipantPackage)
          {
            _iter2907.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAssuranceCasePackageBindingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAssuranceCasePackageBindingTupleScheme getScheme() {
      return new TDDIAssuranceCasePackageBindingTupleScheme();
    }
  }

  private static class TDDIAssuranceCasePackageBindingTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAssuranceCasePackageBinding> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAssuranceCasePackageBinding struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGid()) {
        optionals.set(0);
      }
      if (struct.isSetIsCitation()) {
        optionals.set(1);
      }
      if (struct.isSetIsAbstract()) {
        optionals.set(2);
      }
      if (struct.isSetCitedElement()) {
        optionals.set(3);
      }
      if (struct.isSetAbstractForm()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetDescription()) {
        optionals.set(6);
      }
      if (struct.isSetImplementationConstraint()) {
        optionals.set(7);
      }
      if (struct.isSetNote()) {
        optionals.set(8);
      }
      if (struct.isSetTaggedValue()) {
        optionals.set(9);
      }
      if (struct.isSetAssuranceCasePackage()) {
        optionals.set(10);
      }
      if (struct.isSetInterface()) {
        optionals.set(11);
      }
      if (struct.isSetArtifactPackage()) {
        optionals.set(12);
      }
      if (struct.isSetArgumentPackage()) {
        optionals.set(13);
      }
      if (struct.isSetTerminologyPackage()) {
        optionals.set(14);
      }
      if (struct.isSetParticipantPackage()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetGid()) {
        oprot.writeString(struct.Gid);
      }
      if (struct.isSetIsCitation()) {
        oprot.writeBool(struct.IsCitation);
      }
      if (struct.isSetIsAbstract()) {
        oprot.writeBool(struct.IsAbstract);
      }
      if (struct.isSetCitedElement()) {
        struct.CitedElement.write(oprot);
      }
      if (struct.isSetAbstractForm()) {
        struct.AbstractForm.write(oprot);
      }
      if (struct.isSetName()) {
        struct.Name.write(oprot);
      }
      if (struct.isSetDescription()) {
        struct.Description.write(oprot);
      }
      if (struct.isSetImplementationConstraint()) {
        {
          oprot.writeI32(struct.ImplementationConstraint.size());
          for (TDDIImplementationConstraintRef _iter2908 : struct.ImplementationConstraint)
          {
            _iter2908.write(oprot);
          }
        }
      }
      if (struct.isSetNote()) {
        {
          oprot.writeI32(struct.Note.size());
          for (TDDINoteRef _iter2909 : struct.Note)
          {
            _iter2909.write(oprot);
          }
        }
      }
      if (struct.isSetTaggedValue()) {
        {
          oprot.writeI32(struct.TaggedValue.size());
          for (TDDITaggedValueRef _iter2910 : struct.TaggedValue)
          {
            _iter2910.write(oprot);
          }
        }
      }
      if (struct.isSetAssuranceCasePackage()) {
        {
          oprot.writeI32(struct.AssuranceCasePackage.size());
          for (TDDIAbstractAssuranceCasePackageRef _iter2911 : struct.AssuranceCasePackage)
          {
            _iter2911.write(oprot);
          }
        }
      }
      if (struct.isSetInterface()) {
        {
          oprot.writeI32(struct.Interface.size());
          for (TDDIAssuranceCasePackageInterfaceRef _iter2912 : struct.Interface)
          {
            _iter2912.write(oprot);
          }
        }
      }
      if (struct.isSetArtifactPackage()) {
        {
          oprot.writeI32(struct.ArtifactPackage.size());
          for (TDDIAbstractArtifactPackageRef _iter2913 : struct.ArtifactPackage)
          {
            _iter2913.write(oprot);
          }
        }
      }
      if (struct.isSetArgumentPackage()) {
        {
          oprot.writeI32(struct.ArgumentPackage.size());
          for (TDDIAbstractArgumentPackageRef _iter2914 : struct.ArgumentPackage)
          {
            _iter2914.write(oprot);
          }
        }
      }
      if (struct.isSetTerminologyPackage()) {
        {
          oprot.writeI32(struct.TerminologyPackage.size());
          for (TDDIAbstractTerminologyPackageRef _iter2915 : struct.TerminologyPackage)
          {
            _iter2915.write(oprot);
          }
        }
      }
      if (struct.isSetParticipantPackage()) {
        {
          oprot.writeI32(struct.ParticipantPackage.size());
          for (TDDIAbstractAssuranceCasePackageRef _iter2916 : struct.ParticipantPackage)
          {
            _iter2916.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAssuranceCasePackageBinding struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.Gid = iprot.readString();
        struct.setGidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.IsCitation = iprot.readBool();
        struct.setIsCitationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.IsAbstract = iprot.readBool();
        struct.setIsAbstractIsSet(true);
      }
      if (incoming.get(3)) {
        struct.CitedElement = new TDDIAbstractSACMElement();
        struct.CitedElement.read(iprot);
        struct.setCitedElementIsSet(true);
      }
      if (incoming.get(4)) {
        struct.AbstractForm = new TDDIAbstractSACMElement();
        struct.AbstractForm.read(iprot);
        struct.setAbstractFormIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Name = new TDDIAbstractLangString();
        struct.Name.read(iprot);
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.Description = new TDDIDescription();
        struct.Description.read(iprot);
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list2917 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ImplementationConstraint = new java.util.ArrayList<TDDIImplementationConstraintRef>(_list2917.size);
          TDDIImplementationConstraintRef _elem2918;
          for (int _i2919 = 0; _i2919 < _list2917.size; ++_i2919)
          {
            _elem2918 = new TDDIImplementationConstraintRef();
            _elem2918.read(iprot);
            struct.ImplementationConstraint.add(_elem2918);
          }
        }
        struct.setImplementationConstraintIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list2920 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Note = new java.util.ArrayList<TDDINoteRef>(_list2920.size);
          TDDINoteRef _elem2921;
          for (int _i2922 = 0; _i2922 < _list2920.size; ++_i2922)
          {
            _elem2921 = new TDDINoteRef();
            _elem2921.read(iprot);
            struct.Note.add(_elem2921);
          }
        }
        struct.setNoteIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list2923 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.TaggedValue = new java.util.ArrayList<TDDITaggedValueRef>(_list2923.size);
          TDDITaggedValueRef _elem2924;
          for (int _i2925 = 0; _i2925 < _list2923.size; ++_i2925)
          {
            _elem2924 = new TDDITaggedValueRef();
            _elem2924.read(iprot);
            struct.TaggedValue.add(_elem2924);
          }
        }
        struct.setTaggedValueIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list2926 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AssuranceCasePackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>(_list2926.size);
          TDDIAbstractAssuranceCasePackageRef _elem2927;
          for (int _i2928 = 0; _i2928 < _list2926.size; ++_i2928)
          {
            _elem2927 = new TDDIAbstractAssuranceCasePackageRef();
            _elem2927.read(iprot);
            struct.AssuranceCasePackage.add(_elem2927);
          }
        }
        struct.setAssuranceCasePackageIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list2929 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Interface = new java.util.ArrayList<TDDIAssuranceCasePackageInterfaceRef>(_list2929.size);
          TDDIAssuranceCasePackageInterfaceRef _elem2930;
          for (int _i2931 = 0; _i2931 < _list2929.size; ++_i2931)
          {
            _elem2930 = new TDDIAssuranceCasePackageInterfaceRef();
            _elem2930.read(iprot);
            struct.Interface.add(_elem2930);
          }
        }
        struct.setInterfaceIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list2932 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ArtifactPackage = new java.util.ArrayList<TDDIAbstractArtifactPackageRef>(_list2932.size);
          TDDIAbstractArtifactPackageRef _elem2933;
          for (int _i2934 = 0; _i2934 < _list2932.size; ++_i2934)
          {
            _elem2933 = new TDDIAbstractArtifactPackageRef();
            _elem2933.read(iprot);
            struct.ArtifactPackage.add(_elem2933);
          }
        }
        struct.setArtifactPackageIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list2935 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ArgumentPackage = new java.util.ArrayList<TDDIAbstractArgumentPackageRef>(_list2935.size);
          TDDIAbstractArgumentPackageRef _elem2936;
          for (int _i2937 = 0; _i2937 < _list2935.size; ++_i2937)
          {
            _elem2936 = new TDDIAbstractArgumentPackageRef();
            _elem2936.read(iprot);
            struct.ArgumentPackage.add(_elem2936);
          }
        }
        struct.setArgumentPackageIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list2938 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.TerminologyPackage = new java.util.ArrayList<TDDIAbstractTerminologyPackageRef>(_list2938.size);
          TDDIAbstractTerminologyPackageRef _elem2939;
          for (int _i2940 = 0; _i2940 < _list2938.size; ++_i2940)
          {
            _elem2939 = new TDDIAbstractTerminologyPackageRef();
            _elem2939.read(iprot);
            struct.TerminologyPackage.add(_elem2939);
          }
        }
        struct.setTerminologyPackageIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list2941 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ParticipantPackage = new java.util.ArrayList<TDDIAbstractAssuranceCasePackageRef>(_list2941.size);
          TDDIAbstractAssuranceCasePackageRef _elem2942;
          for (int _i2943 = 0; _i2943 < _list2941.size; ++_i2943)
          {
            _elem2942 = new TDDIAbstractAssuranceCasePackageRef();
            _elem2942.read(iprot);
            struct.ParticipantPackage.add(_elem2942);
          }
        }
        struct.setParticipantPackageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

