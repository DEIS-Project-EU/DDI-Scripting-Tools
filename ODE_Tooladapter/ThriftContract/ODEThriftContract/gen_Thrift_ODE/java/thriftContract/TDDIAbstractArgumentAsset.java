/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDIAbstractArgumentAsset implements org.apache.thrift.TBase<TDDIAbstractArgumentAsset, TDDIAbstractArgumentAsset._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractArgumentAsset> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractArgumentAsset");

  private static final org.apache.thrift.protocol.TField USED_ARGUMENT_ASSET_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedArgumentAsset", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_ARGUMENT_ASSET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedArgumentAssetType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractArgumentAssetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractArgumentAssetTupleSchemeFactory();

  public TDDIArgumentAssetUnion UsedArgumentAsset; // required
  /**
   * 
   * @see TDDIArgumentAssetUnionType
   */
  public TDDIArgumentAssetUnionType UsedArgumentAssetType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_ARGUMENT_ASSET((short)1, "UsedArgumentAsset"),
    /**
     * 
     * @see TDDIArgumentAssetUnionType
     */
    USED_ARGUMENT_ASSET_TYPE((short)2, "UsedArgumentAssetType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_ARGUMENT_ASSET
          return USED_ARGUMENT_ASSET;
        case 2: // USED_ARGUMENT_ASSET_TYPE
          return USED_ARGUMENT_ASSET_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_ARGUMENT_ASSET, new org.apache.thrift.meta_data.FieldMetaData("UsedArgumentAsset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIArgumentAssetUnion.class)));
    tmpMap.put(_Fields.USED_ARGUMENT_ASSET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedArgumentAssetType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIArgumentAssetUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractArgumentAsset.class, metaDataMap);
  }

  public TDDIAbstractArgumentAsset() {
  }

  public TDDIAbstractArgumentAsset(
    TDDIArgumentAssetUnion UsedArgumentAsset,
    TDDIArgumentAssetUnionType UsedArgumentAssetType)
  {
    this();
    this.UsedArgumentAsset = UsedArgumentAsset;
    this.UsedArgumentAssetType = UsedArgumentAssetType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractArgumentAsset(TDDIAbstractArgumentAsset other) {
    if (other.isSetUsedArgumentAsset()) {
      this.UsedArgumentAsset = new TDDIArgumentAssetUnion(other.UsedArgumentAsset);
    }
    if (other.isSetUsedArgumentAssetType()) {
      this.UsedArgumentAssetType = other.UsedArgumentAssetType;
    }
  }

  public TDDIAbstractArgumentAsset deepCopy() {
    return new TDDIAbstractArgumentAsset(this);
  }

  @Override
  public void clear() {
    this.UsedArgumentAsset = null;
    this.UsedArgumentAssetType = null;
  }

  public TDDIArgumentAssetUnion getUsedArgumentAsset() {
    return this.UsedArgumentAsset;
  }

  public TDDIAbstractArgumentAsset setUsedArgumentAsset(TDDIArgumentAssetUnion UsedArgumentAsset) {
    this.UsedArgumentAsset = UsedArgumentAsset;
    return this;
  }

  public void unsetUsedArgumentAsset() {
    this.UsedArgumentAsset = null;
  }

  /** Returns true if field UsedArgumentAsset is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedArgumentAsset() {
    return this.UsedArgumentAsset != null;
  }

  public void setUsedArgumentAssetIsSet(boolean value) {
    if (!value) {
      this.UsedArgumentAsset = null;
    }
  }

  /**
   * 
   * @see TDDIArgumentAssetUnionType
   */
  public TDDIArgumentAssetUnionType getUsedArgumentAssetType() {
    return this.UsedArgumentAssetType;
  }

  /**
   * 
   * @see TDDIArgumentAssetUnionType
   */
  public TDDIAbstractArgumentAsset setUsedArgumentAssetType(TDDIArgumentAssetUnionType UsedArgumentAssetType) {
    this.UsedArgumentAssetType = UsedArgumentAssetType;
    return this;
  }

  public void unsetUsedArgumentAssetType() {
    this.UsedArgumentAssetType = null;
  }

  /** Returns true if field UsedArgumentAssetType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedArgumentAssetType() {
    return this.UsedArgumentAssetType != null;
  }

  public void setUsedArgumentAssetTypeIsSet(boolean value) {
    if (!value) {
      this.UsedArgumentAssetType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_ARGUMENT_ASSET:
      if (value == null) {
        unsetUsedArgumentAsset();
      } else {
        setUsedArgumentAsset((TDDIArgumentAssetUnion)value);
      }
      break;

    case USED_ARGUMENT_ASSET_TYPE:
      if (value == null) {
        unsetUsedArgumentAssetType();
      } else {
        setUsedArgumentAssetType((TDDIArgumentAssetUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_ARGUMENT_ASSET:
      return getUsedArgumentAsset();

    case USED_ARGUMENT_ASSET_TYPE:
      return getUsedArgumentAssetType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_ARGUMENT_ASSET:
      return isSetUsedArgumentAsset();
    case USED_ARGUMENT_ASSET_TYPE:
      return isSetUsedArgumentAssetType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractArgumentAsset)
      return this.equals((TDDIAbstractArgumentAsset)that);
    return false;
  }

  public boolean equals(TDDIAbstractArgumentAsset that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedArgumentAsset = true && this.isSetUsedArgumentAsset();
    boolean that_present_UsedArgumentAsset = true && that.isSetUsedArgumentAsset();
    if (this_present_UsedArgumentAsset || that_present_UsedArgumentAsset) {
      if (!(this_present_UsedArgumentAsset && that_present_UsedArgumentAsset))
        return false;
      if (!this.UsedArgumentAsset.equals(that.UsedArgumentAsset))
        return false;
    }

    boolean this_present_UsedArgumentAssetType = true && this.isSetUsedArgumentAssetType();
    boolean that_present_UsedArgumentAssetType = true && that.isSetUsedArgumentAssetType();
    if (this_present_UsedArgumentAssetType || that_present_UsedArgumentAssetType) {
      if (!(this_present_UsedArgumentAssetType && that_present_UsedArgumentAssetType))
        return false;
      if (!this.UsedArgumentAssetType.equals(that.UsedArgumentAssetType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedArgumentAsset()) ? 131071 : 524287);
    if (isSetUsedArgumentAsset())
      hashCode = hashCode * 8191 + UsedArgumentAsset.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedArgumentAssetType()) ? 131071 : 524287);
    if (isSetUsedArgumentAssetType())
      hashCode = hashCode * 8191 + UsedArgumentAssetType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractArgumentAsset other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedArgumentAsset()).compareTo(other.isSetUsedArgumentAsset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedArgumentAsset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedArgumentAsset, other.UsedArgumentAsset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedArgumentAssetType()).compareTo(other.isSetUsedArgumentAssetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedArgumentAssetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedArgumentAssetType, other.UsedArgumentAssetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractArgumentAsset(");
    boolean first = true;

    sb.append("UsedArgumentAsset:");
    if (this.UsedArgumentAsset == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedArgumentAsset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedArgumentAssetType:");
    if (this.UsedArgumentAssetType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedArgumentAssetType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractArgumentAssetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractArgumentAssetStandardScheme getScheme() {
      return new TDDIAbstractArgumentAssetStandardScheme();
    }
  }

  private static class TDDIAbstractArgumentAssetStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractArgumentAsset> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractArgumentAsset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_ARGUMENT_ASSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedArgumentAsset = new TDDIArgumentAssetUnion();
              struct.UsedArgumentAsset.read(iprot);
              struct.setUsedArgumentAssetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_ARGUMENT_ASSET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedArgumentAssetType = thriftContract.TDDIArgumentAssetUnionType.findByValue(iprot.readI32());
              struct.setUsedArgumentAssetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractArgumentAsset struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedArgumentAsset != null) {
        oprot.writeFieldBegin(USED_ARGUMENT_ASSET_FIELD_DESC);
        struct.UsedArgumentAsset.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedArgumentAssetType != null) {
        oprot.writeFieldBegin(USED_ARGUMENT_ASSET_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedArgumentAssetType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractArgumentAssetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractArgumentAssetTupleScheme getScheme() {
      return new TDDIAbstractArgumentAssetTupleScheme();
    }
  }

  private static class TDDIAbstractArgumentAssetTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractArgumentAsset> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractArgumentAsset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedArgumentAsset()) {
        optionals.set(0);
      }
      if (struct.isSetUsedArgumentAssetType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedArgumentAsset()) {
        struct.UsedArgumentAsset.write(oprot);
      }
      if (struct.isSetUsedArgumentAssetType()) {
        oprot.writeI32(struct.UsedArgumentAssetType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractArgumentAsset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedArgumentAsset = new TDDIArgumentAssetUnion();
        struct.UsedArgumentAsset.read(iprot);
        struct.setUsedArgumentAssetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedArgumentAssetType = thriftContract.TDDIArgumentAssetUnionType.findByValue(iprot.readI32());
        struct.setUsedArgumentAssetTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

