/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDIAbstractRequirementPackage implements org.apache.thrift.TBase<TDDIAbstractRequirementPackage, TDDIAbstractRequirementPackage._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractRequirementPackage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractRequirementPackage");

  private static final org.apache.thrift.protocol.TField USED_REQUIREMENT_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedRequirementPackage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_REQUIREMENT_PACKAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedRequirementPackageType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractRequirementPackageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractRequirementPackageTupleSchemeFactory();

  public TDDIRequirementPackageUnion UsedRequirementPackage; // required
  /**
   * 
   * @see TDDIRequirementPackageUnionType
   */
  public TDDIRequirementPackageUnionType UsedRequirementPackageType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_REQUIREMENT_PACKAGE((short)1, "UsedRequirementPackage"),
    /**
     * 
     * @see TDDIRequirementPackageUnionType
     */
    USED_REQUIREMENT_PACKAGE_TYPE((short)2, "UsedRequirementPackageType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_REQUIREMENT_PACKAGE
          return USED_REQUIREMENT_PACKAGE;
        case 2: // USED_REQUIREMENT_PACKAGE_TYPE
          return USED_REQUIREMENT_PACKAGE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_REQUIREMENT_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("UsedRequirementPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIRequirementPackageUnion.class)));
    tmpMap.put(_Fields.USED_REQUIREMENT_PACKAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedRequirementPackageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIRequirementPackageUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractRequirementPackage.class, metaDataMap);
  }

  public TDDIAbstractRequirementPackage() {
  }

  public TDDIAbstractRequirementPackage(
    TDDIRequirementPackageUnion UsedRequirementPackage,
    TDDIRequirementPackageUnionType UsedRequirementPackageType)
  {
    this();
    this.UsedRequirementPackage = UsedRequirementPackage;
    this.UsedRequirementPackageType = UsedRequirementPackageType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractRequirementPackage(TDDIAbstractRequirementPackage other) {
    if (other.isSetUsedRequirementPackage()) {
      this.UsedRequirementPackage = new TDDIRequirementPackageUnion(other.UsedRequirementPackage);
    }
    if (other.isSetUsedRequirementPackageType()) {
      this.UsedRequirementPackageType = other.UsedRequirementPackageType;
    }
  }

  public TDDIAbstractRequirementPackage deepCopy() {
    return new TDDIAbstractRequirementPackage(this);
  }

  @Override
  public void clear() {
    this.UsedRequirementPackage = null;
    this.UsedRequirementPackageType = null;
  }

  public TDDIRequirementPackageUnion getUsedRequirementPackage() {
    return this.UsedRequirementPackage;
  }

  public TDDIAbstractRequirementPackage setUsedRequirementPackage(TDDIRequirementPackageUnion UsedRequirementPackage) {
    this.UsedRequirementPackage = UsedRequirementPackage;
    return this;
  }

  public void unsetUsedRequirementPackage() {
    this.UsedRequirementPackage = null;
  }

  /** Returns true if field UsedRequirementPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedRequirementPackage() {
    return this.UsedRequirementPackage != null;
  }

  public void setUsedRequirementPackageIsSet(boolean value) {
    if (!value) {
      this.UsedRequirementPackage = null;
    }
  }

  /**
   * 
   * @see TDDIRequirementPackageUnionType
   */
  public TDDIRequirementPackageUnionType getUsedRequirementPackageType() {
    return this.UsedRequirementPackageType;
  }

  /**
   * 
   * @see TDDIRequirementPackageUnionType
   */
  public TDDIAbstractRequirementPackage setUsedRequirementPackageType(TDDIRequirementPackageUnionType UsedRequirementPackageType) {
    this.UsedRequirementPackageType = UsedRequirementPackageType;
    return this;
  }

  public void unsetUsedRequirementPackageType() {
    this.UsedRequirementPackageType = null;
  }

  /** Returns true if field UsedRequirementPackageType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedRequirementPackageType() {
    return this.UsedRequirementPackageType != null;
  }

  public void setUsedRequirementPackageTypeIsSet(boolean value) {
    if (!value) {
      this.UsedRequirementPackageType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_REQUIREMENT_PACKAGE:
      if (value == null) {
        unsetUsedRequirementPackage();
      } else {
        setUsedRequirementPackage((TDDIRequirementPackageUnion)value);
      }
      break;

    case USED_REQUIREMENT_PACKAGE_TYPE:
      if (value == null) {
        unsetUsedRequirementPackageType();
      } else {
        setUsedRequirementPackageType((TDDIRequirementPackageUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_REQUIREMENT_PACKAGE:
      return getUsedRequirementPackage();

    case USED_REQUIREMENT_PACKAGE_TYPE:
      return getUsedRequirementPackageType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_REQUIREMENT_PACKAGE:
      return isSetUsedRequirementPackage();
    case USED_REQUIREMENT_PACKAGE_TYPE:
      return isSetUsedRequirementPackageType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractRequirementPackage)
      return this.equals((TDDIAbstractRequirementPackage)that);
    return false;
  }

  public boolean equals(TDDIAbstractRequirementPackage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedRequirementPackage = true && this.isSetUsedRequirementPackage();
    boolean that_present_UsedRequirementPackage = true && that.isSetUsedRequirementPackage();
    if (this_present_UsedRequirementPackage || that_present_UsedRequirementPackage) {
      if (!(this_present_UsedRequirementPackage && that_present_UsedRequirementPackage))
        return false;
      if (!this.UsedRequirementPackage.equals(that.UsedRequirementPackage))
        return false;
    }

    boolean this_present_UsedRequirementPackageType = true && this.isSetUsedRequirementPackageType();
    boolean that_present_UsedRequirementPackageType = true && that.isSetUsedRequirementPackageType();
    if (this_present_UsedRequirementPackageType || that_present_UsedRequirementPackageType) {
      if (!(this_present_UsedRequirementPackageType && that_present_UsedRequirementPackageType))
        return false;
      if (!this.UsedRequirementPackageType.equals(that.UsedRequirementPackageType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedRequirementPackage()) ? 131071 : 524287);
    if (isSetUsedRequirementPackage())
      hashCode = hashCode * 8191 + UsedRequirementPackage.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedRequirementPackageType()) ? 131071 : 524287);
    if (isSetUsedRequirementPackageType())
      hashCode = hashCode * 8191 + UsedRequirementPackageType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractRequirementPackage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedRequirementPackage()).compareTo(other.isSetUsedRequirementPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedRequirementPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedRequirementPackage, other.UsedRequirementPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedRequirementPackageType()).compareTo(other.isSetUsedRequirementPackageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedRequirementPackageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedRequirementPackageType, other.UsedRequirementPackageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractRequirementPackage(");
    boolean first = true;

    sb.append("UsedRequirementPackage:");
    if (this.UsedRequirementPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedRequirementPackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedRequirementPackageType:");
    if (this.UsedRequirementPackageType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedRequirementPackageType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractRequirementPackageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractRequirementPackageStandardScheme getScheme() {
      return new TDDIAbstractRequirementPackageStandardScheme();
    }
  }

  private static class TDDIAbstractRequirementPackageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractRequirementPackage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractRequirementPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_REQUIREMENT_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedRequirementPackage = new TDDIRequirementPackageUnion();
              struct.UsedRequirementPackage.read(iprot);
              struct.setUsedRequirementPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_REQUIREMENT_PACKAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedRequirementPackageType = thriftContract.TDDIRequirementPackageUnionType.findByValue(iprot.readI32());
              struct.setUsedRequirementPackageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractRequirementPackage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedRequirementPackage != null) {
        oprot.writeFieldBegin(USED_REQUIREMENT_PACKAGE_FIELD_DESC);
        struct.UsedRequirementPackage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedRequirementPackageType != null) {
        oprot.writeFieldBegin(USED_REQUIREMENT_PACKAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedRequirementPackageType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractRequirementPackageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractRequirementPackageTupleScheme getScheme() {
      return new TDDIAbstractRequirementPackageTupleScheme();
    }
  }

  private static class TDDIAbstractRequirementPackageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractRequirementPackage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractRequirementPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedRequirementPackage()) {
        optionals.set(0);
      }
      if (struct.isSetUsedRequirementPackageType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedRequirementPackage()) {
        struct.UsedRequirementPackage.write(oprot);
      }
      if (struct.isSetUsedRequirementPackageType()) {
        oprot.writeI32(struct.UsedRequirementPackageType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractRequirementPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedRequirementPackage = new TDDIRequirementPackageUnion();
        struct.UsedRequirementPackage.read(iprot);
        struct.setUsedRequirementPackageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedRequirementPackageType = thriftContract.TDDIRequirementPackageUnionType.findByValue(iprot.readI32());
        struct.setUsedRequirementPackageTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

