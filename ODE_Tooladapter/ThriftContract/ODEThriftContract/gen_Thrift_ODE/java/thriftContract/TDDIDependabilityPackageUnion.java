/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIDependabilityPackageUnion extends org.apache.thrift.TUnion<TDDIDependabilityPackageUnion, TDDIDependabilityPackageUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIDependabilityPackageUnion");
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityPackage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_PACKAGE_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityPackageInterface", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_PACKAGE_BINDING_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityPackageBinding", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEPENDABILITY_PACKAGE((short)1, "DependabilityPackage"),
    DEPENDABILITY_PACKAGE_INTERFACE((short)2, "DependabilityPackageInterface"),
    DEPENDABILITY_PACKAGE_BINDING((short)3, "DependabilityPackageBinding");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEPENDABILITY_PACKAGE
          return DEPENDABILITY_PACKAGE;
        case 2: // DEPENDABILITY_PACKAGE_INTERFACE
          return DEPENDABILITY_PACKAGE_INTERFACE;
        case 3: // DEPENDABILITY_PACKAGE_BINDING
          return DEPENDABILITY_PACKAGE_BINDING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEPENDABILITY_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("DependabilityPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIDependabilityPackage")));
    tmpMap.put(_Fields.DEPENDABILITY_PACKAGE_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("DependabilityPackageInterface", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIDependabilityPackageInterface")));
    tmpMap.put(_Fields.DEPENDABILITY_PACKAGE_BINDING, new org.apache.thrift.meta_data.FieldMetaData("DependabilityPackageBinding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIDependabilityPackageBinding")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIDependabilityPackageUnion.class, metaDataMap);
  }

  public TDDIDependabilityPackageUnion() {
    super();
  }

  public TDDIDependabilityPackageUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIDependabilityPackageUnion(TDDIDependabilityPackageUnion other) {
    super(other);
  }
  public TDDIDependabilityPackageUnion deepCopy() {
    return new TDDIDependabilityPackageUnion(this);
  }

  public static TDDIDependabilityPackageUnion DependabilityPackage(TDDIDependabilityPackage value) {
    TDDIDependabilityPackageUnion x = new TDDIDependabilityPackageUnion();
    x.setDependabilityPackage(value);
    return x;
  }

  public static TDDIDependabilityPackageUnion DependabilityPackageInterface(TDDIDependabilityPackageInterface value) {
    TDDIDependabilityPackageUnion x = new TDDIDependabilityPackageUnion();
    x.setDependabilityPackageInterface(value);
    return x;
  }

  public static TDDIDependabilityPackageUnion DependabilityPackageBinding(TDDIDependabilityPackageBinding value) {
    TDDIDependabilityPackageUnion x = new TDDIDependabilityPackageUnion();
    x.setDependabilityPackageBinding(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case DEPENDABILITY_PACKAGE:
        if (value instanceof TDDIDependabilityPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIDependabilityPackage for field 'DependabilityPackage', but got " + value.getClass().getSimpleName());
      case DEPENDABILITY_PACKAGE_INTERFACE:
        if (value instanceof TDDIDependabilityPackageInterface) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIDependabilityPackageInterface for field 'DependabilityPackageInterface', but got " + value.getClass().getSimpleName());
      case DEPENDABILITY_PACKAGE_BINDING:
        if (value instanceof TDDIDependabilityPackageBinding) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIDependabilityPackageBinding for field 'DependabilityPackageBinding', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case DEPENDABILITY_PACKAGE:
          if (field.type == DEPENDABILITY_PACKAGE_FIELD_DESC.type) {
            TDDIDependabilityPackage DependabilityPackage;
            DependabilityPackage = new TDDIDependabilityPackage();
            DependabilityPackage.read(iprot);
            return DependabilityPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEPENDABILITY_PACKAGE_INTERFACE:
          if (field.type == DEPENDABILITY_PACKAGE_INTERFACE_FIELD_DESC.type) {
            TDDIDependabilityPackageInterface DependabilityPackageInterface;
            DependabilityPackageInterface = new TDDIDependabilityPackageInterface();
            DependabilityPackageInterface.read(iprot);
            return DependabilityPackageInterface;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEPENDABILITY_PACKAGE_BINDING:
          if (field.type == DEPENDABILITY_PACKAGE_BINDING_FIELD_DESC.type) {
            TDDIDependabilityPackageBinding DependabilityPackageBinding;
            DependabilityPackageBinding = new TDDIDependabilityPackageBinding();
            DependabilityPackageBinding.read(iprot);
            return DependabilityPackageBinding;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DEPENDABILITY_PACKAGE:
        TDDIDependabilityPackage DependabilityPackage = (TDDIDependabilityPackage)value_;
        DependabilityPackage.write(oprot);
        return;
      case DEPENDABILITY_PACKAGE_INTERFACE:
        TDDIDependabilityPackageInterface DependabilityPackageInterface = (TDDIDependabilityPackageInterface)value_;
        DependabilityPackageInterface.write(oprot);
        return;
      case DEPENDABILITY_PACKAGE_BINDING:
        TDDIDependabilityPackageBinding DependabilityPackageBinding = (TDDIDependabilityPackageBinding)value_;
        DependabilityPackageBinding.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case DEPENDABILITY_PACKAGE:
          TDDIDependabilityPackage DependabilityPackage;
          DependabilityPackage = new TDDIDependabilityPackage();
          DependabilityPackage.read(iprot);
          return DependabilityPackage;
        case DEPENDABILITY_PACKAGE_INTERFACE:
          TDDIDependabilityPackageInterface DependabilityPackageInterface;
          DependabilityPackageInterface = new TDDIDependabilityPackageInterface();
          DependabilityPackageInterface.read(iprot);
          return DependabilityPackageInterface;
        case DEPENDABILITY_PACKAGE_BINDING:
          TDDIDependabilityPackageBinding DependabilityPackageBinding;
          DependabilityPackageBinding = new TDDIDependabilityPackageBinding();
          DependabilityPackageBinding.read(iprot);
          return DependabilityPackageBinding;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case DEPENDABILITY_PACKAGE:
        TDDIDependabilityPackage DependabilityPackage = (TDDIDependabilityPackage)value_;
        DependabilityPackage.write(oprot);
        return;
      case DEPENDABILITY_PACKAGE_INTERFACE:
        TDDIDependabilityPackageInterface DependabilityPackageInterface = (TDDIDependabilityPackageInterface)value_;
        DependabilityPackageInterface.write(oprot);
        return;
      case DEPENDABILITY_PACKAGE_BINDING:
        TDDIDependabilityPackageBinding DependabilityPackageBinding = (TDDIDependabilityPackageBinding)value_;
        DependabilityPackageBinding.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case DEPENDABILITY_PACKAGE:
        return DEPENDABILITY_PACKAGE_FIELD_DESC;
      case DEPENDABILITY_PACKAGE_INTERFACE:
        return DEPENDABILITY_PACKAGE_INTERFACE_FIELD_DESC;
      case DEPENDABILITY_PACKAGE_BINDING:
        return DEPENDABILITY_PACKAGE_BINDING_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIDependabilityPackage getDependabilityPackage() {
    if (getSetField() == _Fields.DEPENDABILITY_PACKAGE) {
      return (TDDIDependabilityPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DependabilityPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDependabilityPackage(TDDIDependabilityPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DEPENDABILITY_PACKAGE;
    value_ = value;
  }

  public TDDIDependabilityPackageInterface getDependabilityPackageInterface() {
    if (getSetField() == _Fields.DEPENDABILITY_PACKAGE_INTERFACE) {
      return (TDDIDependabilityPackageInterface)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DependabilityPackageInterface' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDependabilityPackageInterface(TDDIDependabilityPackageInterface value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DEPENDABILITY_PACKAGE_INTERFACE;
    value_ = value;
  }

  public TDDIDependabilityPackageBinding getDependabilityPackageBinding() {
    if (getSetField() == _Fields.DEPENDABILITY_PACKAGE_BINDING) {
      return (TDDIDependabilityPackageBinding)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DependabilityPackageBinding' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDependabilityPackageBinding(TDDIDependabilityPackageBinding value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DEPENDABILITY_PACKAGE_BINDING;
    value_ = value;
  }

  public boolean isSetDependabilityPackage() {
    return setField_ == _Fields.DEPENDABILITY_PACKAGE;
  }


  public boolean isSetDependabilityPackageInterface() {
    return setField_ == _Fields.DEPENDABILITY_PACKAGE_INTERFACE;
  }


  public boolean isSetDependabilityPackageBinding() {
    return setField_ == _Fields.DEPENDABILITY_PACKAGE_BINDING;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIDependabilityPackageUnion) {
      return equals((TDDIDependabilityPackageUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIDependabilityPackageUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIDependabilityPackageUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
