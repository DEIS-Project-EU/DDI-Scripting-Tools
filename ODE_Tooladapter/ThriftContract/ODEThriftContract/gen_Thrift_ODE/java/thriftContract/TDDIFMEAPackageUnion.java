/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIFMEAPackageUnion extends org.apache.thrift.TUnion<TDDIFMEAPackageUnion, TDDIFMEAPackageUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIFMEAPackageUnion");
  private static final org.apache.thrift.protocol.TField FMEAPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("FMEAPackage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FMEAPACKAGE_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("FMEAPackageInterface", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FMEAPACKAGE_BINDING_FIELD_DESC = new org.apache.thrift.protocol.TField("FMEAPackageBinding", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BASIC_FMEAPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("BasicFMEAPackage", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField FMEDAPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("FMEDAPackage", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FMEAPACKAGE((short)1, "FMEAPackage"),
    FMEAPACKAGE_INTERFACE((short)2, "FMEAPackageInterface"),
    FMEAPACKAGE_BINDING((short)3, "FMEAPackageBinding"),
    BASIC_FMEAPACKAGE((short)4, "BasicFMEAPackage"),
    FMEDAPACKAGE((short)5, "FMEDAPackage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FMEAPACKAGE
          return FMEAPACKAGE;
        case 2: // FMEAPACKAGE_INTERFACE
          return FMEAPACKAGE_INTERFACE;
        case 3: // FMEAPACKAGE_BINDING
          return FMEAPACKAGE_BINDING;
        case 4: // BASIC_FMEAPACKAGE
          return BASIC_FMEAPACKAGE;
        case 5: // FMEDAPACKAGE
          return FMEDAPACKAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FMEAPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("FMEAPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIFMEAPackage.class)));
    tmpMap.put(_Fields.FMEAPACKAGE_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("FMEAPackageInterface", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIFMEAPackageInterface.class)));
    tmpMap.put(_Fields.FMEAPACKAGE_BINDING, new org.apache.thrift.meta_data.FieldMetaData("FMEAPackageBinding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIFMEAPackageBinding.class)));
    tmpMap.put(_Fields.BASIC_FMEAPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("BasicFMEAPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIBasicFMEAPackage.class)));
    tmpMap.put(_Fields.FMEDAPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("FMEDAPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIFMEDAPackage.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIFMEAPackageUnion.class, metaDataMap);
  }

  public TDDIFMEAPackageUnion() {
    super();
  }

  public TDDIFMEAPackageUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIFMEAPackageUnion(TDDIFMEAPackageUnion other) {
    super(other);
  }
  public TDDIFMEAPackageUnion deepCopy() {
    return new TDDIFMEAPackageUnion(this);
  }

  public static TDDIFMEAPackageUnion FMEAPackage(TDDIFMEAPackage value) {
    TDDIFMEAPackageUnion x = new TDDIFMEAPackageUnion();
    x.setFMEAPackage(value);
    return x;
  }

  public static TDDIFMEAPackageUnion FMEAPackageInterface(TDDIFMEAPackageInterface value) {
    TDDIFMEAPackageUnion x = new TDDIFMEAPackageUnion();
    x.setFMEAPackageInterface(value);
    return x;
  }

  public static TDDIFMEAPackageUnion FMEAPackageBinding(TDDIFMEAPackageBinding value) {
    TDDIFMEAPackageUnion x = new TDDIFMEAPackageUnion();
    x.setFMEAPackageBinding(value);
    return x;
  }

  public static TDDIFMEAPackageUnion BasicFMEAPackage(TDDIBasicFMEAPackage value) {
    TDDIFMEAPackageUnion x = new TDDIFMEAPackageUnion();
    x.setBasicFMEAPackage(value);
    return x;
  }

  public static TDDIFMEAPackageUnion FMEDAPackage(TDDIFMEDAPackage value) {
    TDDIFMEAPackageUnion x = new TDDIFMEAPackageUnion();
    x.setFMEDAPackage(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case FMEAPACKAGE:
        if (value instanceof TDDIFMEAPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIFMEAPackage for field 'FMEAPackage', but got " + value.getClass().getSimpleName());
      case FMEAPACKAGE_INTERFACE:
        if (value instanceof TDDIFMEAPackageInterface) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIFMEAPackageInterface for field 'FMEAPackageInterface', but got " + value.getClass().getSimpleName());
      case FMEAPACKAGE_BINDING:
        if (value instanceof TDDIFMEAPackageBinding) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIFMEAPackageBinding for field 'FMEAPackageBinding', but got " + value.getClass().getSimpleName());
      case BASIC_FMEAPACKAGE:
        if (value instanceof TDDIBasicFMEAPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIBasicFMEAPackage for field 'BasicFMEAPackage', but got " + value.getClass().getSimpleName());
      case FMEDAPACKAGE:
        if (value instanceof TDDIFMEDAPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIFMEDAPackage for field 'FMEDAPackage', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case FMEAPACKAGE:
          if (field.type == FMEAPACKAGE_FIELD_DESC.type) {
            TDDIFMEAPackage FMEAPackage;
            FMEAPackage = new TDDIFMEAPackage();
            FMEAPackage.read(iprot);
            return FMEAPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FMEAPACKAGE_INTERFACE:
          if (field.type == FMEAPACKAGE_INTERFACE_FIELD_DESC.type) {
            TDDIFMEAPackageInterface FMEAPackageInterface;
            FMEAPackageInterface = new TDDIFMEAPackageInterface();
            FMEAPackageInterface.read(iprot);
            return FMEAPackageInterface;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FMEAPACKAGE_BINDING:
          if (field.type == FMEAPACKAGE_BINDING_FIELD_DESC.type) {
            TDDIFMEAPackageBinding FMEAPackageBinding;
            FMEAPackageBinding = new TDDIFMEAPackageBinding();
            FMEAPackageBinding.read(iprot);
            return FMEAPackageBinding;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BASIC_FMEAPACKAGE:
          if (field.type == BASIC_FMEAPACKAGE_FIELD_DESC.type) {
            TDDIBasicFMEAPackage BasicFMEAPackage;
            BasicFMEAPackage = new TDDIBasicFMEAPackage();
            BasicFMEAPackage.read(iprot);
            return BasicFMEAPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FMEDAPACKAGE:
          if (field.type == FMEDAPACKAGE_FIELD_DESC.type) {
            TDDIFMEDAPackage FMEDAPackage;
            FMEDAPackage = new TDDIFMEDAPackage();
            FMEDAPackage.read(iprot);
            return FMEDAPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case FMEAPACKAGE:
        TDDIFMEAPackage FMEAPackage = (TDDIFMEAPackage)value_;
        FMEAPackage.write(oprot);
        return;
      case FMEAPACKAGE_INTERFACE:
        TDDIFMEAPackageInterface FMEAPackageInterface = (TDDIFMEAPackageInterface)value_;
        FMEAPackageInterface.write(oprot);
        return;
      case FMEAPACKAGE_BINDING:
        TDDIFMEAPackageBinding FMEAPackageBinding = (TDDIFMEAPackageBinding)value_;
        FMEAPackageBinding.write(oprot);
        return;
      case BASIC_FMEAPACKAGE:
        TDDIBasicFMEAPackage BasicFMEAPackage = (TDDIBasicFMEAPackage)value_;
        BasicFMEAPackage.write(oprot);
        return;
      case FMEDAPACKAGE:
        TDDIFMEDAPackage FMEDAPackage = (TDDIFMEDAPackage)value_;
        FMEDAPackage.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case FMEAPACKAGE:
          TDDIFMEAPackage FMEAPackage;
          FMEAPackage = new TDDIFMEAPackage();
          FMEAPackage.read(iprot);
          return FMEAPackage;
        case FMEAPACKAGE_INTERFACE:
          TDDIFMEAPackageInterface FMEAPackageInterface;
          FMEAPackageInterface = new TDDIFMEAPackageInterface();
          FMEAPackageInterface.read(iprot);
          return FMEAPackageInterface;
        case FMEAPACKAGE_BINDING:
          TDDIFMEAPackageBinding FMEAPackageBinding;
          FMEAPackageBinding = new TDDIFMEAPackageBinding();
          FMEAPackageBinding.read(iprot);
          return FMEAPackageBinding;
        case BASIC_FMEAPACKAGE:
          TDDIBasicFMEAPackage BasicFMEAPackage;
          BasicFMEAPackage = new TDDIBasicFMEAPackage();
          BasicFMEAPackage.read(iprot);
          return BasicFMEAPackage;
        case FMEDAPACKAGE:
          TDDIFMEDAPackage FMEDAPackage;
          FMEDAPackage = new TDDIFMEDAPackage();
          FMEDAPackage.read(iprot);
          return FMEDAPackage;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case FMEAPACKAGE:
        TDDIFMEAPackage FMEAPackage = (TDDIFMEAPackage)value_;
        FMEAPackage.write(oprot);
        return;
      case FMEAPACKAGE_INTERFACE:
        TDDIFMEAPackageInterface FMEAPackageInterface = (TDDIFMEAPackageInterface)value_;
        FMEAPackageInterface.write(oprot);
        return;
      case FMEAPACKAGE_BINDING:
        TDDIFMEAPackageBinding FMEAPackageBinding = (TDDIFMEAPackageBinding)value_;
        FMEAPackageBinding.write(oprot);
        return;
      case BASIC_FMEAPACKAGE:
        TDDIBasicFMEAPackage BasicFMEAPackage = (TDDIBasicFMEAPackage)value_;
        BasicFMEAPackage.write(oprot);
        return;
      case FMEDAPACKAGE:
        TDDIFMEDAPackage FMEDAPackage = (TDDIFMEDAPackage)value_;
        FMEDAPackage.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case FMEAPACKAGE:
        return FMEAPACKAGE_FIELD_DESC;
      case FMEAPACKAGE_INTERFACE:
        return FMEAPACKAGE_INTERFACE_FIELD_DESC;
      case FMEAPACKAGE_BINDING:
        return FMEAPACKAGE_BINDING_FIELD_DESC;
      case BASIC_FMEAPACKAGE:
        return BASIC_FMEAPACKAGE_FIELD_DESC;
      case FMEDAPACKAGE:
        return FMEDAPACKAGE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIFMEAPackage getFMEAPackage() {
    if (getSetField() == _Fields.FMEAPACKAGE) {
      return (TDDIFMEAPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'FMEAPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFMEAPackage(TDDIFMEAPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FMEAPACKAGE;
    value_ = value;
  }

  public TDDIFMEAPackageInterface getFMEAPackageInterface() {
    if (getSetField() == _Fields.FMEAPACKAGE_INTERFACE) {
      return (TDDIFMEAPackageInterface)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'FMEAPackageInterface' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFMEAPackageInterface(TDDIFMEAPackageInterface value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FMEAPACKAGE_INTERFACE;
    value_ = value;
  }

  public TDDIFMEAPackageBinding getFMEAPackageBinding() {
    if (getSetField() == _Fields.FMEAPACKAGE_BINDING) {
      return (TDDIFMEAPackageBinding)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'FMEAPackageBinding' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFMEAPackageBinding(TDDIFMEAPackageBinding value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FMEAPACKAGE_BINDING;
    value_ = value;
  }

  public TDDIBasicFMEAPackage getBasicFMEAPackage() {
    if (getSetField() == _Fields.BASIC_FMEAPACKAGE) {
      return (TDDIBasicFMEAPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'BasicFMEAPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBasicFMEAPackage(TDDIBasicFMEAPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.BASIC_FMEAPACKAGE;
    value_ = value;
  }

  public TDDIFMEDAPackage getFMEDAPackage() {
    if (getSetField() == _Fields.FMEDAPACKAGE) {
      return (TDDIFMEDAPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'FMEDAPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFMEDAPackage(TDDIFMEDAPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FMEDAPACKAGE;
    value_ = value;
  }

  public boolean isSetFMEAPackage() {
    return setField_ == _Fields.FMEAPACKAGE;
  }


  public boolean isSetFMEAPackageInterface() {
    return setField_ == _Fields.FMEAPACKAGE_INTERFACE;
  }


  public boolean isSetFMEAPackageBinding() {
    return setField_ == _Fields.FMEAPACKAGE_BINDING;
  }


  public boolean isSetBasicFMEAPackage() {
    return setField_ == _Fields.BASIC_FMEAPACKAGE;
  }


  public boolean isSetFMEDAPackage() {
    return setField_ == _Fields.FMEDAPACKAGE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIFMEAPackageUnion) {
      return equals((TDDIFMEAPackageUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIFMEAPackageUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIFMEAPackageUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
