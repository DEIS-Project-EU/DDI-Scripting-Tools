/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDISafetyRelatedSystem implements org.apache.thrift.TBase<TDDISafetyRelatedSystem, TDDISafetyRelatedSystem._Fields>, java.io.Serializable, Cloneable, Comparable<TDDISafetyRelatedSystem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDISafetyRelatedSystem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_CITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCitation", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("IsAbstract", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CITED_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("CitedElement", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_REQUIREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityRequirements", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField ASSURANCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceLevel", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SUB_SYSTEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("SubSystems", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField OVERALL_LIFETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("OverallLifetime", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField OVERALL_LIFETIME_TIME_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("OverallLifetimeTimeUnit", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REALISED_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("RealisedFunctions", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField CONFIGURATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Configurations", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField CONTEXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Contexts", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SYSTEM_BOUNDARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("SystemBoundaries", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField APPLIED_STANDARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("AppliedStandards", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField FAILURE_MODELS_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureModels", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ports", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField SAFE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("SafeState", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDISafetyRelatedSystemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDISafetyRelatedSystemTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public boolean IsCitation; // required
  public boolean IsAbstract; // required
  public java.util.List<TDDIKeyValueMapRef> KeyValueMaps; // required
  public TDDIAbstractBaseElement CitedElement; // required
  public java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements; // required
  public TDDIAssuranceLevel AssuranceLevel; // required
  public java.util.List<TDDIAbstractSystemRef> SubSystems; // required
  public double OverallLifetime; // required
  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDITimeUnit OverallLifetimeTimeUnit; // required
  public java.util.List<TDDIAbstractFunctionRef> RealisedFunctions; // required
  public java.util.List<TDDIConfiguration> Configurations; // required
  public java.util.List<TDDIContext> Contexts; // required
  public java.util.List<TDDISystemBoundary> SystemBoundaries; // required
  public java.util.List<TDDIAbstractStandardRef> AppliedStandards; // required
  public java.util.List<TDDIAbstractFailureLogicPackageRef> FailureModels; // required
  public java.util.List<TDDIPortRef> Ports; // required
  public java.lang.String SafeState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    IS_CITATION((short)4, "IsCitation"),
    IS_ABSTRACT((short)5, "IsAbstract"),
    KEY_VALUE_MAPS((short)6, "KeyValueMaps"),
    CITED_ELEMENT((short)7, "CitedElement"),
    DEPENDABILITY_REQUIREMENTS((short)8, "DependabilityRequirements"),
    ASSURANCE_LEVEL((short)9, "AssuranceLevel"),
    SUB_SYSTEMS((short)10, "SubSystems"),
    OVERALL_LIFETIME((short)11, "OverallLifetime"),
    /**
     * 
     * @see TDDITimeUnit
     */
    OVERALL_LIFETIME_TIME_UNIT((short)12, "OverallLifetimeTimeUnit"),
    REALISED_FUNCTIONS((short)13, "RealisedFunctions"),
    CONFIGURATIONS((short)14, "Configurations"),
    CONTEXTS((short)15, "Contexts"),
    SYSTEM_BOUNDARIES((short)16, "SystemBoundaries"),
    APPLIED_STANDARDS((short)17, "AppliedStandards"),
    FAILURE_MODELS((short)18, "FailureModels"),
    PORTS((short)19, "Ports"),
    SAFE_STATE((short)20, "SafeState");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // IS_CITATION
          return IS_CITATION;
        case 5: // IS_ABSTRACT
          return IS_ABSTRACT;
        case 6: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 7: // CITED_ELEMENT
          return CITED_ELEMENT;
        case 8: // DEPENDABILITY_REQUIREMENTS
          return DEPENDABILITY_REQUIREMENTS;
        case 9: // ASSURANCE_LEVEL
          return ASSURANCE_LEVEL;
        case 10: // SUB_SYSTEMS
          return SUB_SYSTEMS;
        case 11: // OVERALL_LIFETIME
          return OVERALL_LIFETIME;
        case 12: // OVERALL_LIFETIME_TIME_UNIT
          return OVERALL_LIFETIME_TIME_UNIT;
        case 13: // REALISED_FUNCTIONS
          return REALISED_FUNCTIONS;
        case 14: // CONFIGURATIONS
          return CONFIGURATIONS;
        case 15: // CONTEXTS
          return CONTEXTS;
        case 16: // SYSTEM_BOUNDARIES
          return SYSTEM_BOUNDARIES;
        case 17: // APPLIED_STANDARDS
          return APPLIED_STANDARDS;
        case 18: // FAILURE_MODELS
          return FAILURE_MODELS;
        case 19: // PORTS
          return PORTS;
        case 20: // SAFE_STATE
          return SAFE_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISCITATION_ISSET_ID = 1;
  private static final int __ISABSTRACT_ISSET_ID = 2;
  private static final int __OVERALLLIFETIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CITATION, new org.apache.thrift.meta_data.FieldMetaData("IsCitation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ABSTRACT, new org.apache.thrift.meta_data.FieldMetaData("IsAbstract", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMapRef.class))));
    tmpMap.put(_Fields.CITED_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("CitedElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractBaseElement")));
    tmpMap.put(_Fields.DEPENDABILITY_REQUIREMENTS, new org.apache.thrift.meta_data.FieldMetaData("DependabilityRequirements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractDependabilityRequirementRef.class))));
    tmpMap.put(_Fields.ASSURANCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("AssuranceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAssuranceLevel")));
    tmpMap.put(_Fields.SUB_SYSTEMS, new org.apache.thrift.meta_data.FieldMetaData("SubSystems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractSystemRef.class))));
    tmpMap.put(_Fields.OVERALL_LIFETIME, new org.apache.thrift.meta_data.FieldMetaData("OverallLifetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERALL_LIFETIME_TIME_UNIT, new org.apache.thrift.meta_data.FieldMetaData("OverallLifetimeTimeUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDITimeUnit.class)));
    tmpMap.put(_Fields.REALISED_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("RealisedFunctions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFunctionRef.class))));
    tmpMap.put(_Fields.CONFIGURATIONS, new org.apache.thrift.meta_data.FieldMetaData("Configurations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIConfiguration.class))));
    tmpMap.put(_Fields.CONTEXTS, new org.apache.thrift.meta_data.FieldMetaData("Contexts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIContext.class))));
    tmpMap.put(_Fields.SYSTEM_BOUNDARIES, new org.apache.thrift.meta_data.FieldMetaData("SystemBoundaries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISystemBoundary.class))));
    tmpMap.put(_Fields.APPLIED_STANDARDS, new org.apache.thrift.meta_data.FieldMetaData("AppliedStandards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractStandardRef.class))));
    tmpMap.put(_Fields.FAILURE_MODELS, new org.apache.thrift.meta_data.FieldMetaData("FailureModels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureLogicPackageRef.class))));
    tmpMap.put(_Fields.PORTS, new org.apache.thrift.meta_data.FieldMetaData("Ports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPortRef.class))));
    tmpMap.put(_Fields.SAFE_STATE, new org.apache.thrift.meta_data.FieldMetaData("SafeState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDISafetyRelatedSystem.class, metaDataMap);
  }

  public TDDISafetyRelatedSystem() {
    this.Name = "";

    this.Description = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();

    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>();

    this.OverallLifetime = 0;

    this.OverallLifetimeTimeUnit = thriftContract.TDDITimeUnit.TUHour;

    this.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();

    this.Configurations = new java.util.ArrayList<TDDIConfiguration>();

    this.Contexts = new java.util.ArrayList<TDDIContext>();

    this.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>();

    this.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>();

    this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>();

    this.Ports = new java.util.ArrayList<TDDIPortRef>();

    this.SafeState = "";

  }

  public TDDISafetyRelatedSystem(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    boolean IsCitation,
    boolean IsAbstract,
    java.util.List<TDDIKeyValueMapRef> KeyValueMaps,
    TDDIAbstractBaseElement CitedElement,
    java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements,
    TDDIAssuranceLevel AssuranceLevel,
    java.util.List<TDDIAbstractSystemRef> SubSystems,
    double OverallLifetime,
    TDDITimeUnit OverallLifetimeTimeUnit,
    java.util.List<TDDIAbstractFunctionRef> RealisedFunctions,
    java.util.List<TDDIConfiguration> Configurations,
    java.util.List<TDDIContext> Contexts,
    java.util.List<TDDISystemBoundary> SystemBoundaries,
    java.util.List<TDDIAbstractStandardRef> AppliedStandards,
    java.util.List<TDDIAbstractFailureLogicPackageRef> FailureModels,
    java.util.List<TDDIPortRef> Ports,
    java.lang.String SafeState)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    this.KeyValueMaps = KeyValueMaps;
    this.CitedElement = CitedElement;
    this.DependabilityRequirements = DependabilityRequirements;
    this.AssuranceLevel = AssuranceLevel;
    this.SubSystems = SubSystems;
    this.OverallLifetime = OverallLifetime;
    setOverallLifetimeIsSet(true);
    this.OverallLifetimeTimeUnit = OverallLifetimeTimeUnit;
    this.RealisedFunctions = RealisedFunctions;
    this.Configurations = Configurations;
    this.Contexts = Contexts;
    this.SystemBoundaries = SystemBoundaries;
    this.AppliedStandards = AppliedStandards;
    this.FailureModels = FailureModels;
    this.Ports = Ports;
    this.SafeState = SafeState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDISafetyRelatedSystem(TDDISafetyRelatedSystem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    this.IsCitation = other.IsCitation;
    this.IsAbstract = other.IsAbstract;
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMapRef> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(other.KeyValueMaps.size());
      for (TDDIKeyValueMapRef other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMapRef(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetCitedElement()) {
      this.CitedElement = new TDDIAbstractBaseElement(other.CitedElement);
    }
    if (other.isSetDependabilityRequirements()) {
      java.util.List<TDDIAbstractDependabilityRequirementRef> __this__DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(other.DependabilityRequirements.size());
      for (TDDIAbstractDependabilityRequirementRef other_element : other.DependabilityRequirements) {
        __this__DependabilityRequirements.add(new TDDIAbstractDependabilityRequirementRef(other_element));
      }
      this.DependabilityRequirements = __this__DependabilityRequirements;
    }
    if (other.isSetAssuranceLevel()) {
      this.AssuranceLevel = new TDDIAssuranceLevel(other.AssuranceLevel);
    }
    if (other.isSetSubSystems()) {
      java.util.List<TDDIAbstractSystemRef> __this__SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>(other.SubSystems.size());
      for (TDDIAbstractSystemRef other_element : other.SubSystems) {
        __this__SubSystems.add(new TDDIAbstractSystemRef(other_element));
      }
      this.SubSystems = __this__SubSystems;
    }
    this.OverallLifetime = other.OverallLifetime;
    if (other.isSetOverallLifetimeTimeUnit()) {
      this.OverallLifetimeTimeUnit = other.OverallLifetimeTimeUnit;
    }
    if (other.isSetRealisedFunctions()) {
      java.util.List<TDDIAbstractFunctionRef> __this__RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(other.RealisedFunctions.size());
      for (TDDIAbstractFunctionRef other_element : other.RealisedFunctions) {
        __this__RealisedFunctions.add(new TDDIAbstractFunctionRef(other_element));
      }
      this.RealisedFunctions = __this__RealisedFunctions;
    }
    if (other.isSetConfigurations()) {
      java.util.List<TDDIConfiguration> __this__Configurations = new java.util.ArrayList<TDDIConfiguration>(other.Configurations.size());
      for (TDDIConfiguration other_element : other.Configurations) {
        __this__Configurations.add(new TDDIConfiguration(other_element));
      }
      this.Configurations = __this__Configurations;
    }
    if (other.isSetContexts()) {
      java.util.List<TDDIContext> __this__Contexts = new java.util.ArrayList<TDDIContext>(other.Contexts.size());
      for (TDDIContext other_element : other.Contexts) {
        __this__Contexts.add(new TDDIContext(other_element));
      }
      this.Contexts = __this__Contexts;
    }
    if (other.isSetSystemBoundaries()) {
      java.util.List<TDDISystemBoundary> __this__SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>(other.SystemBoundaries.size());
      for (TDDISystemBoundary other_element : other.SystemBoundaries) {
        __this__SystemBoundaries.add(new TDDISystemBoundary(other_element));
      }
      this.SystemBoundaries = __this__SystemBoundaries;
    }
    if (other.isSetAppliedStandards()) {
      java.util.List<TDDIAbstractStandardRef> __this__AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>(other.AppliedStandards.size());
      for (TDDIAbstractStandardRef other_element : other.AppliedStandards) {
        __this__AppliedStandards.add(new TDDIAbstractStandardRef(other_element));
      }
      this.AppliedStandards = __this__AppliedStandards;
    }
    if (other.isSetFailureModels()) {
      java.util.List<TDDIAbstractFailureLogicPackageRef> __this__FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>(other.FailureModels.size());
      for (TDDIAbstractFailureLogicPackageRef other_element : other.FailureModels) {
        __this__FailureModels.add(new TDDIAbstractFailureLogicPackageRef(other_element));
      }
      this.FailureModels = __this__FailureModels;
    }
    if (other.isSetPorts()) {
      java.util.List<TDDIPortRef> __this__Ports = new java.util.ArrayList<TDDIPortRef>(other.Ports.size());
      for (TDDIPortRef other_element : other.Ports) {
        __this__Ports.add(new TDDIPortRef(other_element));
      }
      this.Ports = __this__Ports;
    }
    if (other.isSetSafeState()) {
      this.SafeState = other.SafeState;
    }
  }

  public TDDISafetyRelatedSystem deepCopy() {
    return new TDDISafetyRelatedSystem(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();

    this.CitedElement = null;
    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.AssuranceLevel = null;
    this.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>();

    this.OverallLifetime = 0;

    this.OverallLifetimeTimeUnit = thriftContract.TDDITimeUnit.TUHour;

    this.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();

    this.Configurations = new java.util.ArrayList<TDDIConfiguration>();

    this.Contexts = new java.util.ArrayList<TDDIContext>();

    this.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>();

    this.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>();

    this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>();

    this.Ports = new java.util.ArrayList<TDDIPortRef>();

    this.SafeState = "";

  }

  public long getId() {
    return this.Id;
  }

  public TDDISafetyRelatedSystem setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDISafetyRelatedSystem setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDISafetyRelatedSystem setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public boolean isIsCitation() {
    return this.IsCitation;
  }

  public TDDISafetyRelatedSystem setIsCitation(boolean IsCitation) {
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    return this;
  }

  public void unsetIsCitation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  /** Returns true if field IsCitation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCitation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  public void setIsCitationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCITATION_ISSET_ID, value);
  }

  public boolean isIsAbstract() {
    return this.IsAbstract;
  }

  public TDDISafetyRelatedSystem setIsAbstract(boolean IsAbstract) {
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    return this;
  }

  public void unsetIsAbstract() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  /** Returns true if field IsAbstract is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAbstract() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  public void setIsAbstractIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISABSTRACT_ISSET_ID, value);
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMapRef> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMapRef elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMapRef> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDISafetyRelatedSystem setKeyValueMaps(java.util.List<TDDIKeyValueMapRef> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public TDDIAbstractBaseElement getCitedElement() {
    return this.CitedElement;
  }

  public TDDISafetyRelatedSystem setCitedElement(TDDIAbstractBaseElement CitedElement) {
    this.CitedElement = CitedElement;
    return this;
  }

  public void unsetCitedElement() {
    this.CitedElement = null;
  }

  /** Returns true if field CitedElement is set (has been assigned a value) and false otherwise */
  public boolean isSetCitedElement() {
    return this.CitedElement != null;
  }

  public void setCitedElementIsSet(boolean value) {
    if (!value) {
      this.CitedElement = null;
    }
  }

  public int getDependabilityRequirementsSize() {
    return (this.DependabilityRequirements == null) ? 0 : this.DependabilityRequirements.size();
  }

  public java.util.Iterator<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirementsIterator() {
    return (this.DependabilityRequirements == null) ? null : this.DependabilityRequirements.iterator();
  }

  public void addToDependabilityRequirements(TDDIAbstractDependabilityRequirementRef elem) {
    if (this.DependabilityRequirements == null) {
      this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();
    }
    this.DependabilityRequirements.add(elem);
  }

  public java.util.List<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirements() {
    return this.DependabilityRequirements;
  }

  public TDDISafetyRelatedSystem setDependabilityRequirements(java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements) {
    this.DependabilityRequirements = DependabilityRequirements;
    return this;
  }

  public void unsetDependabilityRequirements() {
    this.DependabilityRequirements = null;
  }

  /** Returns true if field DependabilityRequirements is set (has been assigned a value) and false otherwise */
  public boolean isSetDependabilityRequirements() {
    return this.DependabilityRequirements != null;
  }

  public void setDependabilityRequirementsIsSet(boolean value) {
    if (!value) {
      this.DependabilityRequirements = null;
    }
  }

  public TDDIAssuranceLevel getAssuranceLevel() {
    return this.AssuranceLevel;
  }

  public TDDISafetyRelatedSystem setAssuranceLevel(TDDIAssuranceLevel AssuranceLevel) {
    this.AssuranceLevel = AssuranceLevel;
    return this;
  }

  public void unsetAssuranceLevel() {
    this.AssuranceLevel = null;
  }

  /** Returns true if field AssuranceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceLevel() {
    return this.AssuranceLevel != null;
  }

  public void setAssuranceLevelIsSet(boolean value) {
    if (!value) {
      this.AssuranceLevel = null;
    }
  }

  public int getSubSystemsSize() {
    return (this.SubSystems == null) ? 0 : this.SubSystems.size();
  }

  public java.util.Iterator<TDDIAbstractSystemRef> getSubSystemsIterator() {
    return (this.SubSystems == null) ? null : this.SubSystems.iterator();
  }

  public void addToSubSystems(TDDIAbstractSystemRef elem) {
    if (this.SubSystems == null) {
      this.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>();
    }
    this.SubSystems.add(elem);
  }

  public java.util.List<TDDIAbstractSystemRef> getSubSystems() {
    return this.SubSystems;
  }

  public TDDISafetyRelatedSystem setSubSystems(java.util.List<TDDIAbstractSystemRef> SubSystems) {
    this.SubSystems = SubSystems;
    return this;
  }

  public void unsetSubSystems() {
    this.SubSystems = null;
  }

  /** Returns true if field SubSystems is set (has been assigned a value) and false otherwise */
  public boolean isSetSubSystems() {
    return this.SubSystems != null;
  }

  public void setSubSystemsIsSet(boolean value) {
    if (!value) {
      this.SubSystems = null;
    }
  }

  public double getOverallLifetime() {
    return this.OverallLifetime;
  }

  public TDDISafetyRelatedSystem setOverallLifetime(double OverallLifetime) {
    this.OverallLifetime = OverallLifetime;
    setOverallLifetimeIsSet(true);
    return this;
  }

  public void unsetOverallLifetime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERALLLIFETIME_ISSET_ID);
  }

  /** Returns true if field OverallLifetime is set (has been assigned a value) and false otherwise */
  public boolean isSetOverallLifetime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERALLLIFETIME_ISSET_ID);
  }

  public void setOverallLifetimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERALLLIFETIME_ISSET_ID, value);
  }

  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDITimeUnit getOverallLifetimeTimeUnit() {
    return this.OverallLifetimeTimeUnit;
  }

  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDISafetyRelatedSystem setOverallLifetimeTimeUnit(TDDITimeUnit OverallLifetimeTimeUnit) {
    this.OverallLifetimeTimeUnit = OverallLifetimeTimeUnit;
    return this;
  }

  public void unsetOverallLifetimeTimeUnit() {
    this.OverallLifetimeTimeUnit = null;
  }

  /** Returns true if field OverallLifetimeTimeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetOverallLifetimeTimeUnit() {
    return this.OverallLifetimeTimeUnit != null;
  }

  public void setOverallLifetimeTimeUnitIsSet(boolean value) {
    if (!value) {
      this.OverallLifetimeTimeUnit = null;
    }
  }

  public int getRealisedFunctionsSize() {
    return (this.RealisedFunctions == null) ? 0 : this.RealisedFunctions.size();
  }

  public java.util.Iterator<TDDIAbstractFunctionRef> getRealisedFunctionsIterator() {
    return (this.RealisedFunctions == null) ? null : this.RealisedFunctions.iterator();
  }

  public void addToRealisedFunctions(TDDIAbstractFunctionRef elem) {
    if (this.RealisedFunctions == null) {
      this.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();
    }
    this.RealisedFunctions.add(elem);
  }

  public java.util.List<TDDIAbstractFunctionRef> getRealisedFunctions() {
    return this.RealisedFunctions;
  }

  public TDDISafetyRelatedSystem setRealisedFunctions(java.util.List<TDDIAbstractFunctionRef> RealisedFunctions) {
    this.RealisedFunctions = RealisedFunctions;
    return this;
  }

  public void unsetRealisedFunctions() {
    this.RealisedFunctions = null;
  }

  /** Returns true if field RealisedFunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetRealisedFunctions() {
    return this.RealisedFunctions != null;
  }

  public void setRealisedFunctionsIsSet(boolean value) {
    if (!value) {
      this.RealisedFunctions = null;
    }
  }

  public int getConfigurationsSize() {
    return (this.Configurations == null) ? 0 : this.Configurations.size();
  }

  public java.util.Iterator<TDDIConfiguration> getConfigurationsIterator() {
    return (this.Configurations == null) ? null : this.Configurations.iterator();
  }

  public void addToConfigurations(TDDIConfiguration elem) {
    if (this.Configurations == null) {
      this.Configurations = new java.util.ArrayList<TDDIConfiguration>();
    }
    this.Configurations.add(elem);
  }

  public java.util.List<TDDIConfiguration> getConfigurations() {
    return this.Configurations;
  }

  public TDDISafetyRelatedSystem setConfigurations(java.util.List<TDDIConfiguration> Configurations) {
    this.Configurations = Configurations;
    return this;
  }

  public void unsetConfigurations() {
    this.Configurations = null;
  }

  /** Returns true if field Configurations is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigurations() {
    return this.Configurations != null;
  }

  public void setConfigurationsIsSet(boolean value) {
    if (!value) {
      this.Configurations = null;
    }
  }

  public int getContextsSize() {
    return (this.Contexts == null) ? 0 : this.Contexts.size();
  }

  public java.util.Iterator<TDDIContext> getContextsIterator() {
    return (this.Contexts == null) ? null : this.Contexts.iterator();
  }

  public void addToContexts(TDDIContext elem) {
    if (this.Contexts == null) {
      this.Contexts = new java.util.ArrayList<TDDIContext>();
    }
    this.Contexts.add(elem);
  }

  public java.util.List<TDDIContext> getContexts() {
    return this.Contexts;
  }

  public TDDISafetyRelatedSystem setContexts(java.util.List<TDDIContext> Contexts) {
    this.Contexts = Contexts;
    return this;
  }

  public void unsetContexts() {
    this.Contexts = null;
  }

  /** Returns true if field Contexts is set (has been assigned a value) and false otherwise */
  public boolean isSetContexts() {
    return this.Contexts != null;
  }

  public void setContextsIsSet(boolean value) {
    if (!value) {
      this.Contexts = null;
    }
  }

  public int getSystemBoundariesSize() {
    return (this.SystemBoundaries == null) ? 0 : this.SystemBoundaries.size();
  }

  public java.util.Iterator<TDDISystemBoundary> getSystemBoundariesIterator() {
    return (this.SystemBoundaries == null) ? null : this.SystemBoundaries.iterator();
  }

  public void addToSystemBoundaries(TDDISystemBoundary elem) {
    if (this.SystemBoundaries == null) {
      this.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>();
    }
    this.SystemBoundaries.add(elem);
  }

  public java.util.List<TDDISystemBoundary> getSystemBoundaries() {
    return this.SystemBoundaries;
  }

  public TDDISafetyRelatedSystem setSystemBoundaries(java.util.List<TDDISystemBoundary> SystemBoundaries) {
    this.SystemBoundaries = SystemBoundaries;
    return this;
  }

  public void unsetSystemBoundaries() {
    this.SystemBoundaries = null;
  }

  /** Returns true if field SystemBoundaries is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemBoundaries() {
    return this.SystemBoundaries != null;
  }

  public void setSystemBoundariesIsSet(boolean value) {
    if (!value) {
      this.SystemBoundaries = null;
    }
  }

  public int getAppliedStandardsSize() {
    return (this.AppliedStandards == null) ? 0 : this.AppliedStandards.size();
  }

  public java.util.Iterator<TDDIAbstractStandardRef> getAppliedStandardsIterator() {
    return (this.AppliedStandards == null) ? null : this.AppliedStandards.iterator();
  }

  public void addToAppliedStandards(TDDIAbstractStandardRef elem) {
    if (this.AppliedStandards == null) {
      this.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>();
    }
    this.AppliedStandards.add(elem);
  }

  public java.util.List<TDDIAbstractStandardRef> getAppliedStandards() {
    return this.AppliedStandards;
  }

  public TDDISafetyRelatedSystem setAppliedStandards(java.util.List<TDDIAbstractStandardRef> AppliedStandards) {
    this.AppliedStandards = AppliedStandards;
    return this;
  }

  public void unsetAppliedStandards() {
    this.AppliedStandards = null;
  }

  /** Returns true if field AppliedStandards is set (has been assigned a value) and false otherwise */
  public boolean isSetAppliedStandards() {
    return this.AppliedStandards != null;
  }

  public void setAppliedStandardsIsSet(boolean value) {
    if (!value) {
      this.AppliedStandards = null;
    }
  }

  public int getFailureModelsSize() {
    return (this.FailureModels == null) ? 0 : this.FailureModels.size();
  }

  public java.util.Iterator<TDDIAbstractFailureLogicPackageRef> getFailureModelsIterator() {
    return (this.FailureModels == null) ? null : this.FailureModels.iterator();
  }

  public void addToFailureModels(TDDIAbstractFailureLogicPackageRef elem) {
    if (this.FailureModels == null) {
      this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>();
    }
    this.FailureModels.add(elem);
  }

  public java.util.List<TDDIAbstractFailureLogicPackageRef> getFailureModels() {
    return this.FailureModels;
  }

  public TDDISafetyRelatedSystem setFailureModels(java.util.List<TDDIAbstractFailureLogicPackageRef> FailureModels) {
    this.FailureModels = FailureModels;
    return this;
  }

  public void unsetFailureModels() {
    this.FailureModels = null;
  }

  /** Returns true if field FailureModels is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureModels() {
    return this.FailureModels != null;
  }

  public void setFailureModelsIsSet(boolean value) {
    if (!value) {
      this.FailureModels = null;
    }
  }

  public int getPortsSize() {
    return (this.Ports == null) ? 0 : this.Ports.size();
  }

  public java.util.Iterator<TDDIPortRef> getPortsIterator() {
    return (this.Ports == null) ? null : this.Ports.iterator();
  }

  public void addToPorts(TDDIPortRef elem) {
    if (this.Ports == null) {
      this.Ports = new java.util.ArrayList<TDDIPortRef>();
    }
    this.Ports.add(elem);
  }

  public java.util.List<TDDIPortRef> getPorts() {
    return this.Ports;
  }

  public TDDISafetyRelatedSystem setPorts(java.util.List<TDDIPortRef> Ports) {
    this.Ports = Ports;
    return this;
  }

  public void unsetPorts() {
    this.Ports = null;
  }

  /** Returns true if field Ports is set (has been assigned a value) and false otherwise */
  public boolean isSetPorts() {
    return this.Ports != null;
  }

  public void setPortsIsSet(boolean value) {
    if (!value) {
      this.Ports = null;
    }
  }

  public java.lang.String getSafeState() {
    return this.SafeState;
  }

  public TDDISafetyRelatedSystem setSafeState(java.lang.String SafeState) {
    this.SafeState = SafeState;
    return this;
  }

  public void unsetSafeState() {
    this.SafeState = null;
  }

  /** Returns true if field SafeState is set (has been assigned a value) and false otherwise */
  public boolean isSetSafeState() {
    return this.SafeState != null;
  }

  public void setSafeStateIsSet(boolean value) {
    if (!value) {
      this.SafeState = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case IS_CITATION:
      if (value == null) {
        unsetIsCitation();
      } else {
        setIsCitation((java.lang.Boolean)value);
      }
      break;

    case IS_ABSTRACT:
      if (value == null) {
        unsetIsAbstract();
      } else {
        setIsAbstract((java.lang.Boolean)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMapRef>)value);
      }
      break;

    case CITED_ELEMENT:
      if (value == null) {
        unsetCitedElement();
      } else {
        setCitedElement((TDDIAbstractBaseElement)value);
      }
      break;

    case DEPENDABILITY_REQUIREMENTS:
      if (value == null) {
        unsetDependabilityRequirements();
      } else {
        setDependabilityRequirements((java.util.List<TDDIAbstractDependabilityRequirementRef>)value);
      }
      break;

    case ASSURANCE_LEVEL:
      if (value == null) {
        unsetAssuranceLevel();
      } else {
        setAssuranceLevel((TDDIAssuranceLevel)value);
      }
      break;

    case SUB_SYSTEMS:
      if (value == null) {
        unsetSubSystems();
      } else {
        setSubSystems((java.util.List<TDDIAbstractSystemRef>)value);
      }
      break;

    case OVERALL_LIFETIME:
      if (value == null) {
        unsetOverallLifetime();
      } else {
        setOverallLifetime((java.lang.Double)value);
      }
      break;

    case OVERALL_LIFETIME_TIME_UNIT:
      if (value == null) {
        unsetOverallLifetimeTimeUnit();
      } else {
        setOverallLifetimeTimeUnit((TDDITimeUnit)value);
      }
      break;

    case REALISED_FUNCTIONS:
      if (value == null) {
        unsetRealisedFunctions();
      } else {
        setRealisedFunctions((java.util.List<TDDIAbstractFunctionRef>)value);
      }
      break;

    case CONFIGURATIONS:
      if (value == null) {
        unsetConfigurations();
      } else {
        setConfigurations((java.util.List<TDDIConfiguration>)value);
      }
      break;

    case CONTEXTS:
      if (value == null) {
        unsetContexts();
      } else {
        setContexts((java.util.List<TDDIContext>)value);
      }
      break;

    case SYSTEM_BOUNDARIES:
      if (value == null) {
        unsetSystemBoundaries();
      } else {
        setSystemBoundaries((java.util.List<TDDISystemBoundary>)value);
      }
      break;

    case APPLIED_STANDARDS:
      if (value == null) {
        unsetAppliedStandards();
      } else {
        setAppliedStandards((java.util.List<TDDIAbstractStandardRef>)value);
      }
      break;

    case FAILURE_MODELS:
      if (value == null) {
        unsetFailureModels();
      } else {
        setFailureModels((java.util.List<TDDIAbstractFailureLogicPackageRef>)value);
      }
      break;

    case PORTS:
      if (value == null) {
        unsetPorts();
      } else {
        setPorts((java.util.List<TDDIPortRef>)value);
      }
      break;

    case SAFE_STATE:
      if (value == null) {
        unsetSafeState();
      } else {
        setSafeState((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case IS_CITATION:
      return isIsCitation();

    case IS_ABSTRACT:
      return isIsAbstract();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case CITED_ELEMENT:
      return getCitedElement();

    case DEPENDABILITY_REQUIREMENTS:
      return getDependabilityRequirements();

    case ASSURANCE_LEVEL:
      return getAssuranceLevel();

    case SUB_SYSTEMS:
      return getSubSystems();

    case OVERALL_LIFETIME:
      return getOverallLifetime();

    case OVERALL_LIFETIME_TIME_UNIT:
      return getOverallLifetimeTimeUnit();

    case REALISED_FUNCTIONS:
      return getRealisedFunctions();

    case CONFIGURATIONS:
      return getConfigurations();

    case CONTEXTS:
      return getContexts();

    case SYSTEM_BOUNDARIES:
      return getSystemBoundaries();

    case APPLIED_STANDARDS:
      return getAppliedStandards();

    case FAILURE_MODELS:
      return getFailureModels();

    case PORTS:
      return getPorts();

    case SAFE_STATE:
      return getSafeState();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case IS_CITATION:
      return isSetIsCitation();
    case IS_ABSTRACT:
      return isSetIsAbstract();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case CITED_ELEMENT:
      return isSetCitedElement();
    case DEPENDABILITY_REQUIREMENTS:
      return isSetDependabilityRequirements();
    case ASSURANCE_LEVEL:
      return isSetAssuranceLevel();
    case SUB_SYSTEMS:
      return isSetSubSystems();
    case OVERALL_LIFETIME:
      return isSetOverallLifetime();
    case OVERALL_LIFETIME_TIME_UNIT:
      return isSetOverallLifetimeTimeUnit();
    case REALISED_FUNCTIONS:
      return isSetRealisedFunctions();
    case CONFIGURATIONS:
      return isSetConfigurations();
    case CONTEXTS:
      return isSetContexts();
    case SYSTEM_BOUNDARIES:
      return isSetSystemBoundaries();
    case APPLIED_STANDARDS:
      return isSetAppliedStandards();
    case FAILURE_MODELS:
      return isSetFailureModels();
    case PORTS:
      return isSetPorts();
    case SAFE_STATE:
      return isSetSafeState();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDISafetyRelatedSystem)
      return this.equals((TDDISafetyRelatedSystem)that);
    return false;
  }

  public boolean equals(TDDISafetyRelatedSystem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_IsCitation = true;
    boolean that_present_IsCitation = true;
    if (this_present_IsCitation || that_present_IsCitation) {
      if (!(this_present_IsCitation && that_present_IsCitation))
        return false;
      if (this.IsCitation != that.IsCitation)
        return false;
    }

    boolean this_present_IsAbstract = true;
    boolean that_present_IsAbstract = true;
    if (this_present_IsAbstract || that_present_IsAbstract) {
      if (!(this_present_IsAbstract && that_present_IsAbstract))
        return false;
      if (this.IsAbstract != that.IsAbstract)
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_CitedElement = true && this.isSetCitedElement();
    boolean that_present_CitedElement = true && that.isSetCitedElement();
    if (this_present_CitedElement || that_present_CitedElement) {
      if (!(this_present_CitedElement && that_present_CitedElement))
        return false;
      if (!this.CitedElement.equals(that.CitedElement))
        return false;
    }

    boolean this_present_DependabilityRequirements = true && this.isSetDependabilityRequirements();
    boolean that_present_DependabilityRequirements = true && that.isSetDependabilityRequirements();
    if (this_present_DependabilityRequirements || that_present_DependabilityRequirements) {
      if (!(this_present_DependabilityRequirements && that_present_DependabilityRequirements))
        return false;
      if (!this.DependabilityRequirements.equals(that.DependabilityRequirements))
        return false;
    }

    boolean this_present_AssuranceLevel = true && this.isSetAssuranceLevel();
    boolean that_present_AssuranceLevel = true && that.isSetAssuranceLevel();
    if (this_present_AssuranceLevel || that_present_AssuranceLevel) {
      if (!(this_present_AssuranceLevel && that_present_AssuranceLevel))
        return false;
      if (!this.AssuranceLevel.equals(that.AssuranceLevel))
        return false;
    }

    boolean this_present_SubSystems = true && this.isSetSubSystems();
    boolean that_present_SubSystems = true && that.isSetSubSystems();
    if (this_present_SubSystems || that_present_SubSystems) {
      if (!(this_present_SubSystems && that_present_SubSystems))
        return false;
      if (!this.SubSystems.equals(that.SubSystems))
        return false;
    }

    boolean this_present_OverallLifetime = true;
    boolean that_present_OverallLifetime = true;
    if (this_present_OverallLifetime || that_present_OverallLifetime) {
      if (!(this_present_OverallLifetime && that_present_OverallLifetime))
        return false;
      if (this.OverallLifetime != that.OverallLifetime)
        return false;
    }

    boolean this_present_OverallLifetimeTimeUnit = true && this.isSetOverallLifetimeTimeUnit();
    boolean that_present_OverallLifetimeTimeUnit = true && that.isSetOverallLifetimeTimeUnit();
    if (this_present_OverallLifetimeTimeUnit || that_present_OverallLifetimeTimeUnit) {
      if (!(this_present_OverallLifetimeTimeUnit && that_present_OverallLifetimeTimeUnit))
        return false;
      if (!this.OverallLifetimeTimeUnit.equals(that.OverallLifetimeTimeUnit))
        return false;
    }

    boolean this_present_RealisedFunctions = true && this.isSetRealisedFunctions();
    boolean that_present_RealisedFunctions = true && that.isSetRealisedFunctions();
    if (this_present_RealisedFunctions || that_present_RealisedFunctions) {
      if (!(this_present_RealisedFunctions && that_present_RealisedFunctions))
        return false;
      if (!this.RealisedFunctions.equals(that.RealisedFunctions))
        return false;
    }

    boolean this_present_Configurations = true && this.isSetConfigurations();
    boolean that_present_Configurations = true && that.isSetConfigurations();
    if (this_present_Configurations || that_present_Configurations) {
      if (!(this_present_Configurations && that_present_Configurations))
        return false;
      if (!this.Configurations.equals(that.Configurations))
        return false;
    }

    boolean this_present_Contexts = true && this.isSetContexts();
    boolean that_present_Contexts = true && that.isSetContexts();
    if (this_present_Contexts || that_present_Contexts) {
      if (!(this_present_Contexts && that_present_Contexts))
        return false;
      if (!this.Contexts.equals(that.Contexts))
        return false;
    }

    boolean this_present_SystemBoundaries = true && this.isSetSystemBoundaries();
    boolean that_present_SystemBoundaries = true && that.isSetSystemBoundaries();
    if (this_present_SystemBoundaries || that_present_SystemBoundaries) {
      if (!(this_present_SystemBoundaries && that_present_SystemBoundaries))
        return false;
      if (!this.SystemBoundaries.equals(that.SystemBoundaries))
        return false;
    }

    boolean this_present_AppliedStandards = true && this.isSetAppliedStandards();
    boolean that_present_AppliedStandards = true && that.isSetAppliedStandards();
    if (this_present_AppliedStandards || that_present_AppliedStandards) {
      if (!(this_present_AppliedStandards && that_present_AppliedStandards))
        return false;
      if (!this.AppliedStandards.equals(that.AppliedStandards))
        return false;
    }

    boolean this_present_FailureModels = true && this.isSetFailureModels();
    boolean that_present_FailureModels = true && that.isSetFailureModels();
    if (this_present_FailureModels || that_present_FailureModels) {
      if (!(this_present_FailureModels && that_present_FailureModels))
        return false;
      if (!this.FailureModels.equals(that.FailureModels))
        return false;
    }

    boolean this_present_Ports = true && this.isSetPorts();
    boolean that_present_Ports = true && that.isSetPorts();
    if (this_present_Ports || that_present_Ports) {
      if (!(this_present_Ports && that_present_Ports))
        return false;
      if (!this.Ports.equals(that.Ports))
        return false;
    }

    boolean this_present_SafeState = true && this.isSetSafeState();
    boolean that_present_SafeState = true && that.isSetSafeState();
    if (this_present_SafeState || that_present_SafeState) {
      if (!(this_present_SafeState && that_present_SafeState))
        return false;
      if (!this.SafeState.equals(that.SafeState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((IsCitation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((IsAbstract) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetCitedElement()) ? 131071 : 524287);
    if (isSetCitedElement())
      hashCode = hashCode * 8191 + CitedElement.hashCode();

    hashCode = hashCode * 8191 + ((isSetDependabilityRequirements()) ? 131071 : 524287);
    if (isSetDependabilityRequirements())
      hashCode = hashCode * 8191 + DependabilityRequirements.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssuranceLevel()) ? 131071 : 524287);
    if (isSetAssuranceLevel())
      hashCode = hashCode * 8191 + AssuranceLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubSystems()) ? 131071 : 524287);
    if (isSetSubSystems())
      hashCode = hashCode * 8191 + SubSystems.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(OverallLifetime);

    hashCode = hashCode * 8191 + ((isSetOverallLifetimeTimeUnit()) ? 131071 : 524287);
    if (isSetOverallLifetimeTimeUnit())
      hashCode = hashCode * 8191 + OverallLifetimeTimeUnit.getValue();

    hashCode = hashCode * 8191 + ((isSetRealisedFunctions()) ? 131071 : 524287);
    if (isSetRealisedFunctions())
      hashCode = hashCode * 8191 + RealisedFunctions.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfigurations()) ? 131071 : 524287);
    if (isSetConfigurations())
      hashCode = hashCode * 8191 + Configurations.hashCode();

    hashCode = hashCode * 8191 + ((isSetContexts()) ? 131071 : 524287);
    if (isSetContexts())
      hashCode = hashCode * 8191 + Contexts.hashCode();

    hashCode = hashCode * 8191 + ((isSetSystemBoundaries()) ? 131071 : 524287);
    if (isSetSystemBoundaries())
      hashCode = hashCode * 8191 + SystemBoundaries.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppliedStandards()) ? 131071 : 524287);
    if (isSetAppliedStandards())
      hashCode = hashCode * 8191 + AppliedStandards.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailureModels()) ? 131071 : 524287);
    if (isSetFailureModels())
      hashCode = hashCode * 8191 + FailureModels.hashCode();

    hashCode = hashCode * 8191 + ((isSetPorts()) ? 131071 : 524287);
    if (isSetPorts())
      hashCode = hashCode * 8191 + Ports.hashCode();

    hashCode = hashCode * 8191 + ((isSetSafeState()) ? 131071 : 524287);
    if (isSetSafeState())
      hashCode = hashCode * 8191 + SafeState.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDISafetyRelatedSystem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsCitation()).compareTo(other.isSetIsCitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCitation, other.IsCitation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsAbstract()).compareTo(other.isSetIsAbstract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAbstract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsAbstract, other.IsAbstract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCitedElement()).compareTo(other.isSetCitedElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCitedElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CitedElement, other.CitedElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDependabilityRequirements()).compareTo(other.isSetDependabilityRequirements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependabilityRequirements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DependabilityRequirements, other.DependabilityRequirements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssuranceLevel()).compareTo(other.isSetAssuranceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssuranceLevel, other.AssuranceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubSystems()).compareTo(other.isSetSubSystems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubSystems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SubSystems, other.SubSystems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOverallLifetime()).compareTo(other.isSetOverallLifetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverallLifetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OverallLifetime, other.OverallLifetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOverallLifetimeTimeUnit()).compareTo(other.isSetOverallLifetimeTimeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverallLifetimeTimeUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OverallLifetimeTimeUnit, other.OverallLifetimeTimeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRealisedFunctions()).compareTo(other.isSetRealisedFunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealisedFunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RealisedFunctions, other.RealisedFunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfigurations()).compareTo(other.isSetConfigurations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigurations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Configurations, other.Configurations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContexts()).compareTo(other.isSetContexts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContexts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Contexts, other.Contexts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSystemBoundaries()).compareTo(other.isSetSystemBoundaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemBoundaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SystemBoundaries, other.SystemBoundaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppliedStandards()).compareTo(other.isSetAppliedStandards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppliedStandards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AppliedStandards, other.AppliedStandards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureModels()).compareTo(other.isSetFailureModels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureModels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureModels, other.FailureModels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPorts()).compareTo(other.isSetPorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ports, other.Ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSafeState()).compareTo(other.isSetSafeState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSafeState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SafeState, other.SafeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDISafetyRelatedSystem(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCitation:");
    sb.append(this.IsCitation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsAbstract:");
    sb.append(this.IsAbstract);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CitedElement:");
    if (this.CitedElement == null) {
      sb.append("null");
    } else {
      sb.append(this.CitedElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DependabilityRequirements:");
    if (this.DependabilityRequirements == null) {
      sb.append("null");
    } else {
      sb.append(this.DependabilityRequirements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssuranceLevel:");
    if (this.AssuranceLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.AssuranceLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SubSystems:");
    if (this.SubSystems == null) {
      sb.append("null");
    } else {
      sb.append(this.SubSystems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OverallLifetime:");
    sb.append(this.OverallLifetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("OverallLifetimeTimeUnit:");
    if (this.OverallLifetimeTimeUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.OverallLifetimeTimeUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RealisedFunctions:");
    if (this.RealisedFunctions == null) {
      sb.append("null");
    } else {
      sb.append(this.RealisedFunctions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Configurations:");
    if (this.Configurations == null) {
      sb.append("null");
    } else {
      sb.append(this.Configurations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Contexts:");
    if (this.Contexts == null) {
      sb.append("null");
    } else {
      sb.append(this.Contexts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SystemBoundaries:");
    if (this.SystemBoundaries == null) {
      sb.append("null");
    } else {
      sb.append(this.SystemBoundaries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AppliedStandards:");
    if (this.AppliedStandards == null) {
      sb.append("null");
    } else {
      sb.append(this.AppliedStandards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureModels:");
    if (this.FailureModels == null) {
      sb.append("null");
    } else {
      sb.append(this.FailureModels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Ports:");
    if (this.Ports == null) {
      sb.append("null");
    } else {
      sb.append(this.Ports);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SafeState:");
    if (this.SafeState == null) {
      sb.append("null");
    } else {
      sb.append(this.SafeState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDISafetyRelatedSystemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDISafetyRelatedSystemStandardScheme getScheme() {
      return new TDDISafetyRelatedSystemStandardScheme();
    }
  }

  private static class TDDISafetyRelatedSystemStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDISafetyRelatedSystem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDISafetyRelatedSystem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_CITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsCitation = iprot.readBool();
              struct.setIsCitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ABSTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsAbstract = iprot.readBool();
              struct.setIsAbstractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list368 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(_list368.size);
                TDDIKeyValueMapRef _elem369;
                for (int _i370 = 0; _i370 < _list368.size; ++_i370)
                {
                  _elem369 = new TDDIKeyValueMapRef();
                  _elem369.read(iprot);
                  struct.KeyValueMaps.add(_elem369);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CITED_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.CitedElement = new TDDIAbstractBaseElement();
              struct.CitedElement.read(iprot);
              struct.setCitedElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEPENDABILITY_REQUIREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list371 = iprot.readListBegin();
                struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list371.size);
                TDDIAbstractDependabilityRequirementRef _elem372;
                for (int _i373 = 0; _i373 < _list371.size; ++_i373)
                {
                  _elem372 = new TDDIAbstractDependabilityRequirementRef();
                  _elem372.read(iprot);
                  struct.DependabilityRequirements.add(_elem372);
                }
                iprot.readListEnd();
              }
              struct.setDependabilityRequirementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ASSURANCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AssuranceLevel = new TDDIAssuranceLevel();
              struct.AssuranceLevel.read(iprot);
              struct.setAssuranceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUB_SYSTEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list374 = iprot.readListBegin();
                struct.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>(_list374.size);
                TDDIAbstractSystemRef _elem375;
                for (int _i376 = 0; _i376 < _list374.size; ++_i376)
                {
                  _elem375 = new TDDIAbstractSystemRef();
                  _elem375.read(iprot);
                  struct.SubSystems.add(_elem375);
                }
                iprot.readListEnd();
              }
              struct.setSubSystemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OVERALL_LIFETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.OverallLifetime = iprot.readDouble();
              struct.setOverallLifetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OVERALL_LIFETIME_TIME_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.OverallLifetimeTimeUnit = thriftContract.TDDITimeUnit.findByValue(iprot.readI32());
              struct.setOverallLifetimeTimeUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REALISED_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list377 = iprot.readListBegin();
                struct.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(_list377.size);
                TDDIAbstractFunctionRef _elem378;
                for (int _i379 = 0; _i379 < _list377.size; ++_i379)
                {
                  _elem378 = new TDDIAbstractFunctionRef();
                  _elem378.read(iprot);
                  struct.RealisedFunctions.add(_elem378);
                }
                iprot.readListEnd();
              }
              struct.setRealisedFunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CONFIGURATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list380 = iprot.readListBegin();
                struct.Configurations = new java.util.ArrayList<TDDIConfiguration>(_list380.size);
                TDDIConfiguration _elem381;
                for (int _i382 = 0; _i382 < _list380.size; ++_i382)
                {
                  _elem381 = new TDDIConfiguration();
                  _elem381.read(iprot);
                  struct.Configurations.add(_elem381);
                }
                iprot.readListEnd();
              }
              struct.setConfigurationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CONTEXTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list383 = iprot.readListBegin();
                struct.Contexts = new java.util.ArrayList<TDDIContext>(_list383.size);
                TDDIContext _elem384;
                for (int _i385 = 0; _i385 < _list383.size; ++_i385)
                {
                  _elem384 = new TDDIContext();
                  _elem384.read(iprot);
                  struct.Contexts.add(_elem384);
                }
                iprot.readListEnd();
              }
              struct.setContextsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SYSTEM_BOUNDARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list386 = iprot.readListBegin();
                struct.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>(_list386.size);
                TDDISystemBoundary _elem387;
                for (int _i388 = 0; _i388 < _list386.size; ++_i388)
                {
                  _elem387 = new TDDISystemBoundary();
                  _elem387.read(iprot);
                  struct.SystemBoundaries.add(_elem387);
                }
                iprot.readListEnd();
              }
              struct.setSystemBoundariesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // APPLIED_STANDARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list389 = iprot.readListBegin();
                struct.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>(_list389.size);
                TDDIAbstractStandardRef _elem390;
                for (int _i391 = 0; _i391 < _list389.size; ++_i391)
                {
                  _elem390 = new TDDIAbstractStandardRef();
                  _elem390.read(iprot);
                  struct.AppliedStandards.add(_elem390);
                }
                iprot.readListEnd();
              }
              struct.setAppliedStandardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FAILURE_MODELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list392 = iprot.readListBegin();
                struct.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>(_list392.size);
                TDDIAbstractFailureLogicPackageRef _elem393;
                for (int _i394 = 0; _i394 < _list392.size; ++_i394)
                {
                  _elem393 = new TDDIAbstractFailureLogicPackageRef();
                  _elem393.read(iprot);
                  struct.FailureModels.add(_elem393);
                }
                iprot.readListEnd();
              }
              struct.setFailureModelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list395 = iprot.readListBegin();
                struct.Ports = new java.util.ArrayList<TDDIPortRef>(_list395.size);
                TDDIPortRef _elem396;
                for (int _i397 = 0; _i397 < _list395.size; ++_i397)
                {
                  _elem396 = new TDDIPortRef();
                  _elem396.read(iprot);
                  struct.Ports.add(_elem396);
                }
                iprot.readListEnd();
              }
              struct.setPortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SAFE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SafeState = iprot.readString();
              struct.setSafeStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDISafetyRelatedSystem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CITATION_FIELD_DESC);
      oprot.writeBool(struct.IsCitation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ABSTRACT_FIELD_DESC);
      oprot.writeBool(struct.IsAbstract);
      oprot.writeFieldEnd();
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMapRef _iter398 : struct.KeyValueMaps)
          {
            _iter398.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CitedElement != null) {
        oprot.writeFieldBegin(CITED_ELEMENT_FIELD_DESC);
        struct.CitedElement.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.DependabilityRequirements != null) {
        oprot.writeFieldBegin(DEPENDABILITY_REQUIREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DependabilityRequirements.size()));
          for (TDDIAbstractDependabilityRequirementRef _iter399 : struct.DependabilityRequirements)
          {
            _iter399.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AssuranceLevel != null) {
        oprot.writeFieldBegin(ASSURANCE_LEVEL_FIELD_DESC);
        struct.AssuranceLevel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.SubSystems != null) {
        oprot.writeFieldBegin(SUB_SYSTEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SubSystems.size()));
          for (TDDIAbstractSystemRef _iter400 : struct.SubSystems)
          {
            _iter400.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERALL_LIFETIME_FIELD_DESC);
      oprot.writeDouble(struct.OverallLifetime);
      oprot.writeFieldEnd();
      if (struct.OverallLifetimeTimeUnit != null) {
        oprot.writeFieldBegin(OVERALL_LIFETIME_TIME_UNIT_FIELD_DESC);
        oprot.writeI32(struct.OverallLifetimeTimeUnit.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.RealisedFunctions != null) {
        oprot.writeFieldBegin(REALISED_FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.RealisedFunctions.size()));
          for (TDDIAbstractFunctionRef _iter401 : struct.RealisedFunctions)
          {
            _iter401.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Configurations != null) {
        oprot.writeFieldBegin(CONFIGURATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Configurations.size()));
          for (TDDIConfiguration _iter402 : struct.Configurations)
          {
            _iter402.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Contexts != null) {
        oprot.writeFieldBegin(CONTEXTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Contexts.size()));
          for (TDDIContext _iter403 : struct.Contexts)
          {
            _iter403.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SystemBoundaries != null) {
        oprot.writeFieldBegin(SYSTEM_BOUNDARIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SystemBoundaries.size()));
          for (TDDISystemBoundary _iter404 : struct.SystemBoundaries)
          {
            _iter404.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AppliedStandards != null) {
        oprot.writeFieldBegin(APPLIED_STANDARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AppliedStandards.size()));
          for (TDDIAbstractStandardRef _iter405 : struct.AppliedStandards)
          {
            _iter405.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.FailureModels != null) {
        oprot.writeFieldBegin(FAILURE_MODELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FailureModels.size()));
          for (TDDIAbstractFailureLogicPackageRef _iter406 : struct.FailureModels)
          {
            _iter406.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Ports != null) {
        oprot.writeFieldBegin(PORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Ports.size()));
          for (TDDIPortRef _iter407 : struct.Ports)
          {
            _iter407.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SafeState != null) {
        oprot.writeFieldBegin(SAFE_STATE_FIELD_DESC);
        oprot.writeString(struct.SafeState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDISafetyRelatedSystemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDISafetyRelatedSystemTupleScheme getScheme() {
      return new TDDISafetyRelatedSystemTupleScheme();
    }
  }

  private static class TDDISafetyRelatedSystemTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDISafetyRelatedSystem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDISafetyRelatedSystem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetIsCitation()) {
        optionals.set(3);
      }
      if (struct.isSetIsAbstract()) {
        optionals.set(4);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(5);
      }
      if (struct.isSetCitedElement()) {
        optionals.set(6);
      }
      if (struct.isSetDependabilityRequirements()) {
        optionals.set(7);
      }
      if (struct.isSetAssuranceLevel()) {
        optionals.set(8);
      }
      if (struct.isSetSubSystems()) {
        optionals.set(9);
      }
      if (struct.isSetOverallLifetime()) {
        optionals.set(10);
      }
      if (struct.isSetOverallLifetimeTimeUnit()) {
        optionals.set(11);
      }
      if (struct.isSetRealisedFunctions()) {
        optionals.set(12);
      }
      if (struct.isSetConfigurations()) {
        optionals.set(13);
      }
      if (struct.isSetContexts()) {
        optionals.set(14);
      }
      if (struct.isSetSystemBoundaries()) {
        optionals.set(15);
      }
      if (struct.isSetAppliedStandards()) {
        optionals.set(16);
      }
      if (struct.isSetFailureModels()) {
        optionals.set(17);
      }
      if (struct.isSetPorts()) {
        optionals.set(18);
      }
      if (struct.isSetSafeState()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetIsCitation()) {
        oprot.writeBool(struct.IsCitation);
      }
      if (struct.isSetIsAbstract()) {
        oprot.writeBool(struct.IsAbstract);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMapRef _iter408 : struct.KeyValueMaps)
          {
            _iter408.write(oprot);
          }
        }
      }
      if (struct.isSetCitedElement()) {
        struct.CitedElement.write(oprot);
      }
      if (struct.isSetDependabilityRequirements()) {
        {
          oprot.writeI32(struct.DependabilityRequirements.size());
          for (TDDIAbstractDependabilityRequirementRef _iter409 : struct.DependabilityRequirements)
          {
            _iter409.write(oprot);
          }
        }
      }
      if (struct.isSetAssuranceLevel()) {
        struct.AssuranceLevel.write(oprot);
      }
      if (struct.isSetSubSystems()) {
        {
          oprot.writeI32(struct.SubSystems.size());
          for (TDDIAbstractSystemRef _iter410 : struct.SubSystems)
          {
            _iter410.write(oprot);
          }
        }
      }
      if (struct.isSetOverallLifetime()) {
        oprot.writeDouble(struct.OverallLifetime);
      }
      if (struct.isSetOverallLifetimeTimeUnit()) {
        oprot.writeI32(struct.OverallLifetimeTimeUnit.getValue());
      }
      if (struct.isSetRealisedFunctions()) {
        {
          oprot.writeI32(struct.RealisedFunctions.size());
          for (TDDIAbstractFunctionRef _iter411 : struct.RealisedFunctions)
          {
            _iter411.write(oprot);
          }
        }
      }
      if (struct.isSetConfigurations()) {
        {
          oprot.writeI32(struct.Configurations.size());
          for (TDDIConfiguration _iter412 : struct.Configurations)
          {
            _iter412.write(oprot);
          }
        }
      }
      if (struct.isSetContexts()) {
        {
          oprot.writeI32(struct.Contexts.size());
          for (TDDIContext _iter413 : struct.Contexts)
          {
            _iter413.write(oprot);
          }
        }
      }
      if (struct.isSetSystemBoundaries()) {
        {
          oprot.writeI32(struct.SystemBoundaries.size());
          for (TDDISystemBoundary _iter414 : struct.SystemBoundaries)
          {
            _iter414.write(oprot);
          }
        }
      }
      if (struct.isSetAppliedStandards()) {
        {
          oprot.writeI32(struct.AppliedStandards.size());
          for (TDDIAbstractStandardRef _iter415 : struct.AppliedStandards)
          {
            _iter415.write(oprot);
          }
        }
      }
      if (struct.isSetFailureModels()) {
        {
          oprot.writeI32(struct.FailureModels.size());
          for (TDDIAbstractFailureLogicPackageRef _iter416 : struct.FailureModels)
          {
            _iter416.write(oprot);
          }
        }
      }
      if (struct.isSetPorts()) {
        {
          oprot.writeI32(struct.Ports.size());
          for (TDDIPortRef _iter417 : struct.Ports)
          {
            _iter417.write(oprot);
          }
        }
      }
      if (struct.isSetSafeState()) {
        oprot.writeString(struct.SafeState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDISafetyRelatedSystem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.IsCitation = iprot.readBool();
        struct.setIsCitationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.IsAbstract = iprot.readBool();
        struct.setIsAbstractIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list418 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(_list418.size);
          TDDIKeyValueMapRef _elem419;
          for (int _i420 = 0; _i420 < _list418.size; ++_i420)
          {
            _elem419 = new TDDIKeyValueMapRef();
            _elem419.read(iprot);
            struct.KeyValueMaps.add(_elem419);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.CitedElement = new TDDIAbstractBaseElement();
        struct.CitedElement.read(iprot);
        struct.setCitedElementIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list421 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list421.size);
          TDDIAbstractDependabilityRequirementRef _elem422;
          for (int _i423 = 0; _i423 < _list421.size; ++_i423)
          {
            _elem422 = new TDDIAbstractDependabilityRequirementRef();
            _elem422.read(iprot);
            struct.DependabilityRequirements.add(_elem422);
          }
        }
        struct.setDependabilityRequirementsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.AssuranceLevel = new TDDIAssuranceLevel();
        struct.AssuranceLevel.read(iprot);
        struct.setAssuranceLevelIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list424 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SubSystems = new java.util.ArrayList<TDDIAbstractSystemRef>(_list424.size);
          TDDIAbstractSystemRef _elem425;
          for (int _i426 = 0; _i426 < _list424.size; ++_i426)
          {
            _elem425 = new TDDIAbstractSystemRef();
            _elem425.read(iprot);
            struct.SubSystems.add(_elem425);
          }
        }
        struct.setSubSystemsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.OverallLifetime = iprot.readDouble();
        struct.setOverallLifetimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.OverallLifetimeTimeUnit = thriftContract.TDDITimeUnit.findByValue(iprot.readI32());
        struct.setOverallLifetimeTimeUnitIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list427 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.RealisedFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(_list427.size);
          TDDIAbstractFunctionRef _elem428;
          for (int _i429 = 0; _i429 < _list427.size; ++_i429)
          {
            _elem428 = new TDDIAbstractFunctionRef();
            _elem428.read(iprot);
            struct.RealisedFunctions.add(_elem428);
          }
        }
        struct.setRealisedFunctionsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list430 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Configurations = new java.util.ArrayList<TDDIConfiguration>(_list430.size);
          TDDIConfiguration _elem431;
          for (int _i432 = 0; _i432 < _list430.size; ++_i432)
          {
            _elem431 = new TDDIConfiguration();
            _elem431.read(iprot);
            struct.Configurations.add(_elem431);
          }
        }
        struct.setConfigurationsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list433 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Contexts = new java.util.ArrayList<TDDIContext>(_list433.size);
          TDDIContext _elem434;
          for (int _i435 = 0; _i435 < _list433.size; ++_i435)
          {
            _elem434 = new TDDIContext();
            _elem434.read(iprot);
            struct.Contexts.add(_elem434);
          }
        }
        struct.setContextsIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list436 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SystemBoundaries = new java.util.ArrayList<TDDISystemBoundary>(_list436.size);
          TDDISystemBoundary _elem437;
          for (int _i438 = 0; _i438 < _list436.size; ++_i438)
          {
            _elem437 = new TDDISystemBoundary();
            _elem437.read(iprot);
            struct.SystemBoundaries.add(_elem437);
          }
        }
        struct.setSystemBoundariesIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list439 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AppliedStandards = new java.util.ArrayList<TDDIAbstractStandardRef>(_list439.size);
          TDDIAbstractStandardRef _elem440;
          for (int _i441 = 0; _i441 < _list439.size; ++_i441)
          {
            _elem440 = new TDDIAbstractStandardRef();
            _elem440.read(iprot);
            struct.AppliedStandards.add(_elem440);
          }
        }
        struct.setAppliedStandardsIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list442 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>(_list442.size);
          TDDIAbstractFailureLogicPackageRef _elem443;
          for (int _i444 = 0; _i444 < _list442.size; ++_i444)
          {
            _elem443 = new TDDIAbstractFailureLogicPackageRef();
            _elem443.read(iprot);
            struct.FailureModels.add(_elem443);
          }
        }
        struct.setFailureModelsIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list445 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Ports = new java.util.ArrayList<TDDIPortRef>(_list445.size);
          TDDIPortRef _elem446;
          for (int _i447 = 0; _i447 < _list445.size; ++_i447)
          {
            _elem446 = new TDDIPortRef();
            _elem446.read(iprot);
            struct.Ports.add(_elem446);
          }
        }
        struct.setPortsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.SafeState = iprot.readString();
        struct.setSafeStateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

