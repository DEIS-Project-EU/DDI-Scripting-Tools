/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIHARAArtifactUnion extends org.apache.thrift.TUnion<TDDIHARAArtifactUnion, TDDIHARAArtifactUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIHARAArtifactUnion");
  private static final org.apache.thrift.protocol.TField HARAPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("HARAPackage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HAZARD_TYPE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("HazardTypeSystem", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RISK_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("RiskParameter", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RISK_ASSESSMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("RiskAssessment", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField HAZARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("HazardType", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MAL_FUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("MalFunction", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField HAZARD_FIELD_DESC = new org.apache.thrift.protocol.TField("Hazard", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HARAPACKAGE((short)1, "HARAPackage"),
    HAZARD_TYPE_SYSTEM((short)2, "HazardTypeSystem"),
    RISK_PARAMETER((short)3, "RiskParameter"),
    RISK_ASSESSMENT((short)4, "RiskAssessment"),
    HAZARD_TYPE((short)5, "HazardType"),
    MAL_FUNCTION((short)6, "MalFunction"),
    HAZARD((short)7, "Hazard");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HARAPACKAGE
          return HARAPACKAGE;
        case 2: // HAZARD_TYPE_SYSTEM
          return HAZARD_TYPE_SYSTEM;
        case 3: // RISK_PARAMETER
          return RISK_PARAMETER;
        case 4: // RISK_ASSESSMENT
          return RISK_ASSESSMENT;
        case 5: // HAZARD_TYPE
          return HAZARD_TYPE;
        case 6: // MAL_FUNCTION
          return MAL_FUNCTION;
        case 7: // HAZARD
          return HAZARD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HARAPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("HARAPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractHARAPackage")));
    tmpMap.put(_Fields.HAZARD_TYPE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("HazardTypeSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIHazardTypeSystem.class)));
    tmpMap.put(_Fields.RISK_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("RiskParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractRiskParameter.class)));
    tmpMap.put(_Fields.RISK_ASSESSMENT, new org.apache.thrift.meta_data.FieldMetaData("RiskAssessment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIRiskAssessment.class)));
    tmpMap.put(_Fields.HAZARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("HazardType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIHazardType.class)));
    tmpMap.put(_Fields.MAL_FUNCTION, new org.apache.thrift.meta_data.FieldMetaData("MalFunction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMalFunction.class)));
    tmpMap.put(_Fields.HAZARD, new org.apache.thrift.meta_data.FieldMetaData("Hazard", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIHazard.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIHARAArtifactUnion.class, metaDataMap);
  }

  public TDDIHARAArtifactUnion() {
    super();
  }

  public TDDIHARAArtifactUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIHARAArtifactUnion(TDDIHARAArtifactUnion other) {
    super(other);
  }
  public TDDIHARAArtifactUnion deepCopy() {
    return new TDDIHARAArtifactUnion(this);
  }

  public static TDDIHARAArtifactUnion HARAPackage(TDDIAbstractHARAPackage value) {
    TDDIHARAArtifactUnion x = new TDDIHARAArtifactUnion();
    x.setHARAPackage(value);
    return x;
  }

  public static TDDIHARAArtifactUnion HazardTypeSystem(TDDIHazardTypeSystem value) {
    TDDIHARAArtifactUnion x = new TDDIHARAArtifactUnion();
    x.setHazardTypeSystem(value);
    return x;
  }

  public static TDDIHARAArtifactUnion RiskParameter(TDDIAbstractRiskParameter value) {
    TDDIHARAArtifactUnion x = new TDDIHARAArtifactUnion();
    x.setRiskParameter(value);
    return x;
  }

  public static TDDIHARAArtifactUnion RiskAssessment(TDDIRiskAssessment value) {
    TDDIHARAArtifactUnion x = new TDDIHARAArtifactUnion();
    x.setRiskAssessment(value);
    return x;
  }

  public static TDDIHARAArtifactUnion HazardType(TDDIHazardType value) {
    TDDIHARAArtifactUnion x = new TDDIHARAArtifactUnion();
    x.setHazardType(value);
    return x;
  }

  public static TDDIHARAArtifactUnion MalFunction(TDDIMalFunction value) {
    TDDIHARAArtifactUnion x = new TDDIHARAArtifactUnion();
    x.setMalFunction(value);
    return x;
  }

  public static TDDIHARAArtifactUnion Hazard(TDDIHazard value) {
    TDDIHARAArtifactUnion x = new TDDIHARAArtifactUnion();
    x.setHazard(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case HARAPACKAGE:
        if (value instanceof TDDIAbstractHARAPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractHARAPackage for field 'HARAPackage', but got " + value.getClass().getSimpleName());
      case HAZARD_TYPE_SYSTEM:
        if (value instanceof TDDIHazardTypeSystem) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIHazardTypeSystem for field 'HazardTypeSystem', but got " + value.getClass().getSimpleName());
      case RISK_PARAMETER:
        if (value instanceof TDDIAbstractRiskParameter) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractRiskParameter for field 'RiskParameter', but got " + value.getClass().getSimpleName());
      case RISK_ASSESSMENT:
        if (value instanceof TDDIRiskAssessment) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIRiskAssessment for field 'RiskAssessment', but got " + value.getClass().getSimpleName());
      case HAZARD_TYPE:
        if (value instanceof TDDIHazardType) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIHazardType for field 'HazardType', but got " + value.getClass().getSimpleName());
      case MAL_FUNCTION:
        if (value instanceof TDDIMalFunction) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIMalFunction for field 'MalFunction', but got " + value.getClass().getSimpleName());
      case HAZARD:
        if (value instanceof TDDIHazard) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIHazard for field 'Hazard', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case HARAPACKAGE:
          if (field.type == HARAPACKAGE_FIELD_DESC.type) {
            TDDIAbstractHARAPackage HARAPackage;
            HARAPackage = new TDDIAbstractHARAPackage();
            HARAPackage.read(iprot);
            return HARAPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HAZARD_TYPE_SYSTEM:
          if (field.type == HAZARD_TYPE_SYSTEM_FIELD_DESC.type) {
            TDDIHazardTypeSystem HazardTypeSystem;
            HazardTypeSystem = new TDDIHazardTypeSystem();
            HazardTypeSystem.read(iprot);
            return HazardTypeSystem;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RISK_PARAMETER:
          if (field.type == RISK_PARAMETER_FIELD_DESC.type) {
            TDDIAbstractRiskParameter RiskParameter;
            RiskParameter = new TDDIAbstractRiskParameter();
            RiskParameter.read(iprot);
            return RiskParameter;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RISK_ASSESSMENT:
          if (field.type == RISK_ASSESSMENT_FIELD_DESC.type) {
            TDDIRiskAssessment RiskAssessment;
            RiskAssessment = new TDDIRiskAssessment();
            RiskAssessment.read(iprot);
            return RiskAssessment;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HAZARD_TYPE:
          if (field.type == HAZARD_TYPE_FIELD_DESC.type) {
            TDDIHazardType HazardType;
            HazardType = new TDDIHazardType();
            HazardType.read(iprot);
            return HazardType;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MAL_FUNCTION:
          if (field.type == MAL_FUNCTION_FIELD_DESC.type) {
            TDDIMalFunction MalFunction;
            MalFunction = new TDDIMalFunction();
            MalFunction.read(iprot);
            return MalFunction;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HAZARD:
          if (field.type == HAZARD_FIELD_DESC.type) {
            TDDIHazard Hazard;
            Hazard = new TDDIHazard();
            Hazard.read(iprot);
            return Hazard;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case HARAPACKAGE:
        TDDIAbstractHARAPackage HARAPackage = (TDDIAbstractHARAPackage)value_;
        HARAPackage.write(oprot);
        return;
      case HAZARD_TYPE_SYSTEM:
        TDDIHazardTypeSystem HazardTypeSystem = (TDDIHazardTypeSystem)value_;
        HazardTypeSystem.write(oprot);
        return;
      case RISK_PARAMETER:
        TDDIAbstractRiskParameter RiskParameter = (TDDIAbstractRiskParameter)value_;
        RiskParameter.write(oprot);
        return;
      case RISK_ASSESSMENT:
        TDDIRiskAssessment RiskAssessment = (TDDIRiskAssessment)value_;
        RiskAssessment.write(oprot);
        return;
      case HAZARD_TYPE:
        TDDIHazardType HazardType = (TDDIHazardType)value_;
        HazardType.write(oprot);
        return;
      case MAL_FUNCTION:
        TDDIMalFunction MalFunction = (TDDIMalFunction)value_;
        MalFunction.write(oprot);
        return;
      case HAZARD:
        TDDIHazard Hazard = (TDDIHazard)value_;
        Hazard.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case HARAPACKAGE:
          TDDIAbstractHARAPackage HARAPackage;
          HARAPackage = new TDDIAbstractHARAPackage();
          HARAPackage.read(iprot);
          return HARAPackage;
        case HAZARD_TYPE_SYSTEM:
          TDDIHazardTypeSystem HazardTypeSystem;
          HazardTypeSystem = new TDDIHazardTypeSystem();
          HazardTypeSystem.read(iprot);
          return HazardTypeSystem;
        case RISK_PARAMETER:
          TDDIAbstractRiskParameter RiskParameter;
          RiskParameter = new TDDIAbstractRiskParameter();
          RiskParameter.read(iprot);
          return RiskParameter;
        case RISK_ASSESSMENT:
          TDDIRiskAssessment RiskAssessment;
          RiskAssessment = new TDDIRiskAssessment();
          RiskAssessment.read(iprot);
          return RiskAssessment;
        case HAZARD_TYPE:
          TDDIHazardType HazardType;
          HazardType = new TDDIHazardType();
          HazardType.read(iprot);
          return HazardType;
        case MAL_FUNCTION:
          TDDIMalFunction MalFunction;
          MalFunction = new TDDIMalFunction();
          MalFunction.read(iprot);
          return MalFunction;
        case HAZARD:
          TDDIHazard Hazard;
          Hazard = new TDDIHazard();
          Hazard.read(iprot);
          return Hazard;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case HARAPACKAGE:
        TDDIAbstractHARAPackage HARAPackage = (TDDIAbstractHARAPackage)value_;
        HARAPackage.write(oprot);
        return;
      case HAZARD_TYPE_SYSTEM:
        TDDIHazardTypeSystem HazardTypeSystem = (TDDIHazardTypeSystem)value_;
        HazardTypeSystem.write(oprot);
        return;
      case RISK_PARAMETER:
        TDDIAbstractRiskParameter RiskParameter = (TDDIAbstractRiskParameter)value_;
        RiskParameter.write(oprot);
        return;
      case RISK_ASSESSMENT:
        TDDIRiskAssessment RiskAssessment = (TDDIRiskAssessment)value_;
        RiskAssessment.write(oprot);
        return;
      case HAZARD_TYPE:
        TDDIHazardType HazardType = (TDDIHazardType)value_;
        HazardType.write(oprot);
        return;
      case MAL_FUNCTION:
        TDDIMalFunction MalFunction = (TDDIMalFunction)value_;
        MalFunction.write(oprot);
        return;
      case HAZARD:
        TDDIHazard Hazard = (TDDIHazard)value_;
        Hazard.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case HARAPACKAGE:
        return HARAPACKAGE_FIELD_DESC;
      case HAZARD_TYPE_SYSTEM:
        return HAZARD_TYPE_SYSTEM_FIELD_DESC;
      case RISK_PARAMETER:
        return RISK_PARAMETER_FIELD_DESC;
      case RISK_ASSESSMENT:
        return RISK_ASSESSMENT_FIELD_DESC;
      case HAZARD_TYPE:
        return HAZARD_TYPE_FIELD_DESC;
      case MAL_FUNCTION:
        return MAL_FUNCTION_FIELD_DESC;
      case HAZARD:
        return HAZARD_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIAbstractHARAPackage getHARAPackage() {
    if (getSetField() == _Fields.HARAPACKAGE) {
      return (TDDIAbstractHARAPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'HARAPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHARAPackage(TDDIAbstractHARAPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HARAPACKAGE;
    value_ = value;
  }

  public TDDIHazardTypeSystem getHazardTypeSystem() {
    if (getSetField() == _Fields.HAZARD_TYPE_SYSTEM) {
      return (TDDIHazardTypeSystem)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'HazardTypeSystem' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHazardTypeSystem(TDDIHazardTypeSystem value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HAZARD_TYPE_SYSTEM;
    value_ = value;
  }

  public TDDIAbstractRiskParameter getRiskParameter() {
    if (getSetField() == _Fields.RISK_PARAMETER) {
      return (TDDIAbstractRiskParameter)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'RiskParameter' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRiskParameter(TDDIAbstractRiskParameter value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.RISK_PARAMETER;
    value_ = value;
  }

  public TDDIRiskAssessment getRiskAssessment() {
    if (getSetField() == _Fields.RISK_ASSESSMENT) {
      return (TDDIRiskAssessment)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'RiskAssessment' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRiskAssessment(TDDIRiskAssessment value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.RISK_ASSESSMENT;
    value_ = value;
  }

  public TDDIHazardType getHazardType() {
    if (getSetField() == _Fields.HAZARD_TYPE) {
      return (TDDIHazardType)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'HazardType' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHazardType(TDDIHazardType value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HAZARD_TYPE;
    value_ = value;
  }

  public TDDIMalFunction getMalFunction() {
    if (getSetField() == _Fields.MAL_FUNCTION) {
      return (TDDIMalFunction)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'MalFunction' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMalFunction(TDDIMalFunction value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.MAL_FUNCTION;
    value_ = value;
  }

  public TDDIHazard getHazard() {
    if (getSetField() == _Fields.HAZARD) {
      return (TDDIHazard)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Hazard' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHazard(TDDIHazard value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HAZARD;
    value_ = value;
  }

  public boolean isSetHARAPackage() {
    return setField_ == _Fields.HARAPACKAGE;
  }


  public boolean isSetHazardTypeSystem() {
    return setField_ == _Fields.HAZARD_TYPE_SYSTEM;
  }


  public boolean isSetRiskParameter() {
    return setField_ == _Fields.RISK_PARAMETER;
  }


  public boolean isSetRiskAssessment() {
    return setField_ == _Fields.RISK_ASSESSMENT;
  }


  public boolean isSetHazardType() {
    return setField_ == _Fields.HAZARD_TYPE;
  }


  public boolean isSetMalFunction() {
    return setField_ == _Fields.MAL_FUNCTION;
  }


  public boolean isSetHazard() {
    return setField_ == _Fields.HAZARD;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIHARAArtifactUnion) {
      return equals((TDDIHARAArtifactUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIHARAArtifactUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIHARAArtifactUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
