/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDISafetyFunction implements org.apache.thrift.TBase<TDDISafetyFunction, TDDISafetyFunction._Fields>, java.io.Serializable, Cloneable, Comparable<TDDISafetyFunction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDISafetyFunction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_CITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCitation", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("IsAbstract", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CITED_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("CitedElement", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_REQUIREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityRequirements", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField ASSURANCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceLevel", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SUB_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("SubFunctions", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ports", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField PERF_CHARS_FIELD_DESC = new org.apache.thrift.protocol.TField("PerfChars", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField FAILURE_MODELS_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureModels", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField MALFUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Malfunctions", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("Object", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField BEHAVIOR_FIELD_DESC = new org.apache.thrift.protocol.TField("Behavior", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField SAFE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("SafeState", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDISafetyFunctionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDISafetyFunctionTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public boolean IsCitation; // required
  public boolean IsAbstract; // required
  public java.util.List<TDDIKeyValueMapRef> KeyValueMaps; // required
  public TDDIAbstractBaseElement CitedElement; // required
  public java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements; // required
  public TDDIAssuranceLevel AssuranceLevel; // required
  public java.util.List<TDDIAbstractFunctionRef> SubFunctions; // required
  public java.util.List<TDDIPortRef> Ports; // required
  public TDDIPerfChars PerfChars; // required
  public java.util.List<TDDIAbstractFailureLogicPackageRef> FailureModels; // required
  public java.util.List<TDDIMalFunctionRef> Malfunctions; // required
  public java.lang.String Object; // required
  public java.lang.String Behavior; // required
  public java.lang.String SafeState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    IS_CITATION((short)4, "IsCitation"),
    IS_ABSTRACT((short)5, "IsAbstract"),
    KEY_VALUE_MAPS((short)6, "KeyValueMaps"),
    CITED_ELEMENT((short)7, "CitedElement"),
    DEPENDABILITY_REQUIREMENTS((short)8, "DependabilityRequirements"),
    ASSURANCE_LEVEL((short)9, "AssuranceLevel"),
    SUB_FUNCTIONS((short)10, "SubFunctions"),
    PORTS((short)11, "Ports"),
    PERF_CHARS((short)12, "PerfChars"),
    FAILURE_MODELS((short)13, "FailureModels"),
    MALFUNCTIONS((short)14, "Malfunctions"),
    OBJECT((short)15, "Object"),
    BEHAVIOR((short)16, "Behavior"),
    SAFE_STATE((short)17, "SafeState");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // IS_CITATION
          return IS_CITATION;
        case 5: // IS_ABSTRACT
          return IS_ABSTRACT;
        case 6: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 7: // CITED_ELEMENT
          return CITED_ELEMENT;
        case 8: // DEPENDABILITY_REQUIREMENTS
          return DEPENDABILITY_REQUIREMENTS;
        case 9: // ASSURANCE_LEVEL
          return ASSURANCE_LEVEL;
        case 10: // SUB_FUNCTIONS
          return SUB_FUNCTIONS;
        case 11: // PORTS
          return PORTS;
        case 12: // PERF_CHARS
          return PERF_CHARS;
        case 13: // FAILURE_MODELS
          return FAILURE_MODELS;
        case 14: // MALFUNCTIONS
          return MALFUNCTIONS;
        case 15: // OBJECT
          return OBJECT;
        case 16: // BEHAVIOR
          return BEHAVIOR;
        case 17: // SAFE_STATE
          return SAFE_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISCITATION_ISSET_ID = 1;
  private static final int __ISABSTRACT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CITATION, new org.apache.thrift.meta_data.FieldMetaData("IsCitation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ABSTRACT, new org.apache.thrift.meta_data.FieldMetaData("IsAbstract", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMapRef.class))));
    tmpMap.put(_Fields.CITED_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("CitedElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractBaseElement")));
    tmpMap.put(_Fields.DEPENDABILITY_REQUIREMENTS, new org.apache.thrift.meta_data.FieldMetaData("DependabilityRequirements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractDependabilityRequirementRef.class))));
    tmpMap.put(_Fields.ASSURANCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("AssuranceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAssuranceLevel")));
    tmpMap.put(_Fields.SUB_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("SubFunctions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFunctionRef.class))));
    tmpMap.put(_Fields.PORTS, new org.apache.thrift.meta_data.FieldMetaData("Ports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPortRef.class))));
    tmpMap.put(_Fields.PERF_CHARS, new org.apache.thrift.meta_data.FieldMetaData("PerfChars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPerfChars.class)));
    tmpMap.put(_Fields.FAILURE_MODELS, new org.apache.thrift.meta_data.FieldMetaData("FailureModels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureLogicPackageRef.class))));
    tmpMap.put(_Fields.MALFUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("Malfunctions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMalFunctionRef.class))));
    tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("Object", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEHAVIOR, new org.apache.thrift.meta_data.FieldMetaData("Behavior", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAFE_STATE, new org.apache.thrift.meta_data.FieldMetaData("SafeState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDISafetyFunction.class, metaDataMap);
  }

  public TDDISafetyFunction() {
    this.Name = "";

    this.Description = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();

    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();

    this.Ports = new java.util.ArrayList<TDDIPortRef>();

    this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>();

    this.Malfunctions = new java.util.ArrayList<TDDIMalFunctionRef>();

    this.Object = "";

    this.Behavior = "";

    this.SafeState = "";

  }

  public TDDISafetyFunction(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    boolean IsCitation,
    boolean IsAbstract,
    java.util.List<TDDIKeyValueMapRef> KeyValueMaps,
    TDDIAbstractBaseElement CitedElement,
    java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements,
    TDDIAssuranceLevel AssuranceLevel,
    java.util.List<TDDIAbstractFunctionRef> SubFunctions,
    java.util.List<TDDIPortRef> Ports,
    TDDIPerfChars PerfChars,
    java.util.List<TDDIAbstractFailureLogicPackageRef> FailureModels,
    java.util.List<TDDIMalFunctionRef> Malfunctions,
    java.lang.String Object,
    java.lang.String Behavior,
    java.lang.String SafeState)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    this.KeyValueMaps = KeyValueMaps;
    this.CitedElement = CitedElement;
    this.DependabilityRequirements = DependabilityRequirements;
    this.AssuranceLevel = AssuranceLevel;
    this.SubFunctions = SubFunctions;
    this.Ports = Ports;
    this.PerfChars = PerfChars;
    this.FailureModels = FailureModels;
    this.Malfunctions = Malfunctions;
    this.Object = Object;
    this.Behavior = Behavior;
    this.SafeState = SafeState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDISafetyFunction(TDDISafetyFunction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    this.IsCitation = other.IsCitation;
    this.IsAbstract = other.IsAbstract;
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMapRef> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(other.KeyValueMaps.size());
      for (TDDIKeyValueMapRef other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMapRef(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetCitedElement()) {
      this.CitedElement = new TDDIAbstractBaseElement(other.CitedElement);
    }
    if (other.isSetDependabilityRequirements()) {
      java.util.List<TDDIAbstractDependabilityRequirementRef> __this__DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(other.DependabilityRequirements.size());
      for (TDDIAbstractDependabilityRequirementRef other_element : other.DependabilityRequirements) {
        __this__DependabilityRequirements.add(new TDDIAbstractDependabilityRequirementRef(other_element));
      }
      this.DependabilityRequirements = __this__DependabilityRequirements;
    }
    if (other.isSetAssuranceLevel()) {
      this.AssuranceLevel = new TDDIAssuranceLevel(other.AssuranceLevel);
    }
    if (other.isSetSubFunctions()) {
      java.util.List<TDDIAbstractFunctionRef> __this__SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(other.SubFunctions.size());
      for (TDDIAbstractFunctionRef other_element : other.SubFunctions) {
        __this__SubFunctions.add(new TDDIAbstractFunctionRef(other_element));
      }
      this.SubFunctions = __this__SubFunctions;
    }
    if (other.isSetPorts()) {
      java.util.List<TDDIPortRef> __this__Ports = new java.util.ArrayList<TDDIPortRef>(other.Ports.size());
      for (TDDIPortRef other_element : other.Ports) {
        __this__Ports.add(new TDDIPortRef(other_element));
      }
      this.Ports = __this__Ports;
    }
    if (other.isSetPerfChars()) {
      this.PerfChars = new TDDIPerfChars(other.PerfChars);
    }
    if (other.isSetFailureModels()) {
      java.util.List<TDDIAbstractFailureLogicPackageRef> __this__FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>(other.FailureModels.size());
      for (TDDIAbstractFailureLogicPackageRef other_element : other.FailureModels) {
        __this__FailureModels.add(new TDDIAbstractFailureLogicPackageRef(other_element));
      }
      this.FailureModels = __this__FailureModels;
    }
    if (other.isSetMalfunctions()) {
      java.util.List<TDDIMalFunctionRef> __this__Malfunctions = new java.util.ArrayList<TDDIMalFunctionRef>(other.Malfunctions.size());
      for (TDDIMalFunctionRef other_element : other.Malfunctions) {
        __this__Malfunctions.add(new TDDIMalFunctionRef(other_element));
      }
      this.Malfunctions = __this__Malfunctions;
    }
    if (other.isSetObject()) {
      this.Object = other.Object;
    }
    if (other.isSetBehavior()) {
      this.Behavior = other.Behavior;
    }
    if (other.isSetSafeState()) {
      this.SafeState = other.SafeState;
    }
  }

  public TDDISafetyFunction deepCopy() {
    return new TDDISafetyFunction(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.IsCitation = false;

    this.IsAbstract = false;

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();

    this.CitedElement = null;
    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.AssuranceLevel = null;
    this.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();

    this.Ports = new java.util.ArrayList<TDDIPortRef>();

    this.PerfChars = null;
    this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>();

    this.Malfunctions = new java.util.ArrayList<TDDIMalFunctionRef>();

    this.Object = "";

    this.Behavior = "";

    this.SafeState = "";

  }

  public long getId() {
    return this.Id;
  }

  public TDDISafetyFunction setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDISafetyFunction setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDISafetyFunction setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public boolean isIsCitation() {
    return this.IsCitation;
  }

  public TDDISafetyFunction setIsCitation(boolean IsCitation) {
    this.IsCitation = IsCitation;
    setIsCitationIsSet(true);
    return this;
  }

  public void unsetIsCitation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  /** Returns true if field IsCitation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCitation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCITATION_ISSET_ID);
  }

  public void setIsCitationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCITATION_ISSET_ID, value);
  }

  public boolean isIsAbstract() {
    return this.IsAbstract;
  }

  public TDDISafetyFunction setIsAbstract(boolean IsAbstract) {
    this.IsAbstract = IsAbstract;
    setIsAbstractIsSet(true);
    return this;
  }

  public void unsetIsAbstract() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  /** Returns true if field IsAbstract is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAbstract() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
  }

  public void setIsAbstractIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISABSTRACT_ISSET_ID, value);
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMapRef> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMapRef elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMapRef> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDISafetyFunction setKeyValueMaps(java.util.List<TDDIKeyValueMapRef> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public TDDIAbstractBaseElement getCitedElement() {
    return this.CitedElement;
  }

  public TDDISafetyFunction setCitedElement(TDDIAbstractBaseElement CitedElement) {
    this.CitedElement = CitedElement;
    return this;
  }

  public void unsetCitedElement() {
    this.CitedElement = null;
  }

  /** Returns true if field CitedElement is set (has been assigned a value) and false otherwise */
  public boolean isSetCitedElement() {
    return this.CitedElement != null;
  }

  public void setCitedElementIsSet(boolean value) {
    if (!value) {
      this.CitedElement = null;
    }
  }

  public int getDependabilityRequirementsSize() {
    return (this.DependabilityRequirements == null) ? 0 : this.DependabilityRequirements.size();
  }

  public java.util.Iterator<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirementsIterator() {
    return (this.DependabilityRequirements == null) ? null : this.DependabilityRequirements.iterator();
  }

  public void addToDependabilityRequirements(TDDIAbstractDependabilityRequirementRef elem) {
    if (this.DependabilityRequirements == null) {
      this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();
    }
    this.DependabilityRequirements.add(elem);
  }

  public java.util.List<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirements() {
    return this.DependabilityRequirements;
  }

  public TDDISafetyFunction setDependabilityRequirements(java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements) {
    this.DependabilityRequirements = DependabilityRequirements;
    return this;
  }

  public void unsetDependabilityRequirements() {
    this.DependabilityRequirements = null;
  }

  /** Returns true if field DependabilityRequirements is set (has been assigned a value) and false otherwise */
  public boolean isSetDependabilityRequirements() {
    return this.DependabilityRequirements != null;
  }

  public void setDependabilityRequirementsIsSet(boolean value) {
    if (!value) {
      this.DependabilityRequirements = null;
    }
  }

  public TDDIAssuranceLevel getAssuranceLevel() {
    return this.AssuranceLevel;
  }

  public TDDISafetyFunction setAssuranceLevel(TDDIAssuranceLevel AssuranceLevel) {
    this.AssuranceLevel = AssuranceLevel;
    return this;
  }

  public void unsetAssuranceLevel() {
    this.AssuranceLevel = null;
  }

  /** Returns true if field AssuranceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceLevel() {
    return this.AssuranceLevel != null;
  }

  public void setAssuranceLevelIsSet(boolean value) {
    if (!value) {
      this.AssuranceLevel = null;
    }
  }

  public int getSubFunctionsSize() {
    return (this.SubFunctions == null) ? 0 : this.SubFunctions.size();
  }

  public java.util.Iterator<TDDIAbstractFunctionRef> getSubFunctionsIterator() {
    return (this.SubFunctions == null) ? null : this.SubFunctions.iterator();
  }

  public void addToSubFunctions(TDDIAbstractFunctionRef elem) {
    if (this.SubFunctions == null) {
      this.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();
    }
    this.SubFunctions.add(elem);
  }

  public java.util.List<TDDIAbstractFunctionRef> getSubFunctions() {
    return this.SubFunctions;
  }

  public TDDISafetyFunction setSubFunctions(java.util.List<TDDIAbstractFunctionRef> SubFunctions) {
    this.SubFunctions = SubFunctions;
    return this;
  }

  public void unsetSubFunctions() {
    this.SubFunctions = null;
  }

  /** Returns true if field SubFunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetSubFunctions() {
    return this.SubFunctions != null;
  }

  public void setSubFunctionsIsSet(boolean value) {
    if (!value) {
      this.SubFunctions = null;
    }
  }

  public int getPortsSize() {
    return (this.Ports == null) ? 0 : this.Ports.size();
  }

  public java.util.Iterator<TDDIPortRef> getPortsIterator() {
    return (this.Ports == null) ? null : this.Ports.iterator();
  }

  public void addToPorts(TDDIPortRef elem) {
    if (this.Ports == null) {
      this.Ports = new java.util.ArrayList<TDDIPortRef>();
    }
    this.Ports.add(elem);
  }

  public java.util.List<TDDIPortRef> getPorts() {
    return this.Ports;
  }

  public TDDISafetyFunction setPorts(java.util.List<TDDIPortRef> Ports) {
    this.Ports = Ports;
    return this;
  }

  public void unsetPorts() {
    this.Ports = null;
  }

  /** Returns true if field Ports is set (has been assigned a value) and false otherwise */
  public boolean isSetPorts() {
    return this.Ports != null;
  }

  public void setPortsIsSet(boolean value) {
    if (!value) {
      this.Ports = null;
    }
  }

  public TDDIPerfChars getPerfChars() {
    return this.PerfChars;
  }

  public TDDISafetyFunction setPerfChars(TDDIPerfChars PerfChars) {
    this.PerfChars = PerfChars;
    return this;
  }

  public void unsetPerfChars() {
    this.PerfChars = null;
  }

  /** Returns true if field PerfChars is set (has been assigned a value) and false otherwise */
  public boolean isSetPerfChars() {
    return this.PerfChars != null;
  }

  public void setPerfCharsIsSet(boolean value) {
    if (!value) {
      this.PerfChars = null;
    }
  }

  public int getFailureModelsSize() {
    return (this.FailureModels == null) ? 0 : this.FailureModels.size();
  }

  public java.util.Iterator<TDDIAbstractFailureLogicPackageRef> getFailureModelsIterator() {
    return (this.FailureModels == null) ? null : this.FailureModels.iterator();
  }

  public void addToFailureModels(TDDIAbstractFailureLogicPackageRef elem) {
    if (this.FailureModels == null) {
      this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>();
    }
    this.FailureModels.add(elem);
  }

  public java.util.List<TDDIAbstractFailureLogicPackageRef> getFailureModels() {
    return this.FailureModels;
  }

  public TDDISafetyFunction setFailureModels(java.util.List<TDDIAbstractFailureLogicPackageRef> FailureModels) {
    this.FailureModels = FailureModels;
    return this;
  }

  public void unsetFailureModels() {
    this.FailureModels = null;
  }

  /** Returns true if field FailureModels is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureModels() {
    return this.FailureModels != null;
  }

  public void setFailureModelsIsSet(boolean value) {
    if (!value) {
      this.FailureModels = null;
    }
  }

  public int getMalfunctionsSize() {
    return (this.Malfunctions == null) ? 0 : this.Malfunctions.size();
  }

  public java.util.Iterator<TDDIMalFunctionRef> getMalfunctionsIterator() {
    return (this.Malfunctions == null) ? null : this.Malfunctions.iterator();
  }

  public void addToMalfunctions(TDDIMalFunctionRef elem) {
    if (this.Malfunctions == null) {
      this.Malfunctions = new java.util.ArrayList<TDDIMalFunctionRef>();
    }
    this.Malfunctions.add(elem);
  }

  public java.util.List<TDDIMalFunctionRef> getMalfunctions() {
    return this.Malfunctions;
  }

  public TDDISafetyFunction setMalfunctions(java.util.List<TDDIMalFunctionRef> Malfunctions) {
    this.Malfunctions = Malfunctions;
    return this;
  }

  public void unsetMalfunctions() {
    this.Malfunctions = null;
  }

  /** Returns true if field Malfunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetMalfunctions() {
    return this.Malfunctions != null;
  }

  public void setMalfunctionsIsSet(boolean value) {
    if (!value) {
      this.Malfunctions = null;
    }
  }

  public java.lang.String getObject() {
    return this.Object;
  }

  public TDDISafetyFunction setObject(java.lang.String Object) {
    this.Object = Object;
    return this;
  }

  public void unsetObject() {
    this.Object = null;
  }

  /** Returns true if field Object is set (has been assigned a value) and false otherwise */
  public boolean isSetObject() {
    return this.Object != null;
  }

  public void setObjectIsSet(boolean value) {
    if (!value) {
      this.Object = null;
    }
  }

  public java.lang.String getBehavior() {
    return this.Behavior;
  }

  public TDDISafetyFunction setBehavior(java.lang.String Behavior) {
    this.Behavior = Behavior;
    return this;
  }

  public void unsetBehavior() {
    this.Behavior = null;
  }

  /** Returns true if field Behavior is set (has been assigned a value) and false otherwise */
  public boolean isSetBehavior() {
    return this.Behavior != null;
  }

  public void setBehaviorIsSet(boolean value) {
    if (!value) {
      this.Behavior = null;
    }
  }

  public java.lang.String getSafeState() {
    return this.SafeState;
  }

  public TDDISafetyFunction setSafeState(java.lang.String SafeState) {
    this.SafeState = SafeState;
    return this;
  }

  public void unsetSafeState() {
    this.SafeState = null;
  }

  /** Returns true if field SafeState is set (has been assigned a value) and false otherwise */
  public boolean isSetSafeState() {
    return this.SafeState != null;
  }

  public void setSafeStateIsSet(boolean value) {
    if (!value) {
      this.SafeState = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case IS_CITATION:
      if (value == null) {
        unsetIsCitation();
      } else {
        setIsCitation((java.lang.Boolean)value);
      }
      break;

    case IS_ABSTRACT:
      if (value == null) {
        unsetIsAbstract();
      } else {
        setIsAbstract((java.lang.Boolean)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMapRef>)value);
      }
      break;

    case CITED_ELEMENT:
      if (value == null) {
        unsetCitedElement();
      } else {
        setCitedElement((TDDIAbstractBaseElement)value);
      }
      break;

    case DEPENDABILITY_REQUIREMENTS:
      if (value == null) {
        unsetDependabilityRequirements();
      } else {
        setDependabilityRequirements((java.util.List<TDDIAbstractDependabilityRequirementRef>)value);
      }
      break;

    case ASSURANCE_LEVEL:
      if (value == null) {
        unsetAssuranceLevel();
      } else {
        setAssuranceLevel((TDDIAssuranceLevel)value);
      }
      break;

    case SUB_FUNCTIONS:
      if (value == null) {
        unsetSubFunctions();
      } else {
        setSubFunctions((java.util.List<TDDIAbstractFunctionRef>)value);
      }
      break;

    case PORTS:
      if (value == null) {
        unsetPorts();
      } else {
        setPorts((java.util.List<TDDIPortRef>)value);
      }
      break;

    case PERF_CHARS:
      if (value == null) {
        unsetPerfChars();
      } else {
        setPerfChars((TDDIPerfChars)value);
      }
      break;

    case FAILURE_MODELS:
      if (value == null) {
        unsetFailureModels();
      } else {
        setFailureModels((java.util.List<TDDIAbstractFailureLogicPackageRef>)value);
      }
      break;

    case MALFUNCTIONS:
      if (value == null) {
        unsetMalfunctions();
      } else {
        setMalfunctions((java.util.List<TDDIMalFunctionRef>)value);
      }
      break;

    case OBJECT:
      if (value == null) {
        unsetObject();
      } else {
        setObject((java.lang.String)value);
      }
      break;

    case BEHAVIOR:
      if (value == null) {
        unsetBehavior();
      } else {
        setBehavior((java.lang.String)value);
      }
      break;

    case SAFE_STATE:
      if (value == null) {
        unsetSafeState();
      } else {
        setSafeState((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case IS_CITATION:
      return isIsCitation();

    case IS_ABSTRACT:
      return isIsAbstract();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case CITED_ELEMENT:
      return getCitedElement();

    case DEPENDABILITY_REQUIREMENTS:
      return getDependabilityRequirements();

    case ASSURANCE_LEVEL:
      return getAssuranceLevel();

    case SUB_FUNCTIONS:
      return getSubFunctions();

    case PORTS:
      return getPorts();

    case PERF_CHARS:
      return getPerfChars();

    case FAILURE_MODELS:
      return getFailureModels();

    case MALFUNCTIONS:
      return getMalfunctions();

    case OBJECT:
      return getObject();

    case BEHAVIOR:
      return getBehavior();

    case SAFE_STATE:
      return getSafeState();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case IS_CITATION:
      return isSetIsCitation();
    case IS_ABSTRACT:
      return isSetIsAbstract();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case CITED_ELEMENT:
      return isSetCitedElement();
    case DEPENDABILITY_REQUIREMENTS:
      return isSetDependabilityRequirements();
    case ASSURANCE_LEVEL:
      return isSetAssuranceLevel();
    case SUB_FUNCTIONS:
      return isSetSubFunctions();
    case PORTS:
      return isSetPorts();
    case PERF_CHARS:
      return isSetPerfChars();
    case FAILURE_MODELS:
      return isSetFailureModels();
    case MALFUNCTIONS:
      return isSetMalfunctions();
    case OBJECT:
      return isSetObject();
    case BEHAVIOR:
      return isSetBehavior();
    case SAFE_STATE:
      return isSetSafeState();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDISafetyFunction)
      return this.equals((TDDISafetyFunction)that);
    return false;
  }

  public boolean equals(TDDISafetyFunction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_IsCitation = true;
    boolean that_present_IsCitation = true;
    if (this_present_IsCitation || that_present_IsCitation) {
      if (!(this_present_IsCitation && that_present_IsCitation))
        return false;
      if (this.IsCitation != that.IsCitation)
        return false;
    }

    boolean this_present_IsAbstract = true;
    boolean that_present_IsAbstract = true;
    if (this_present_IsAbstract || that_present_IsAbstract) {
      if (!(this_present_IsAbstract && that_present_IsAbstract))
        return false;
      if (this.IsAbstract != that.IsAbstract)
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_CitedElement = true && this.isSetCitedElement();
    boolean that_present_CitedElement = true && that.isSetCitedElement();
    if (this_present_CitedElement || that_present_CitedElement) {
      if (!(this_present_CitedElement && that_present_CitedElement))
        return false;
      if (!this.CitedElement.equals(that.CitedElement))
        return false;
    }

    boolean this_present_DependabilityRequirements = true && this.isSetDependabilityRequirements();
    boolean that_present_DependabilityRequirements = true && that.isSetDependabilityRequirements();
    if (this_present_DependabilityRequirements || that_present_DependabilityRequirements) {
      if (!(this_present_DependabilityRequirements && that_present_DependabilityRequirements))
        return false;
      if (!this.DependabilityRequirements.equals(that.DependabilityRequirements))
        return false;
    }

    boolean this_present_AssuranceLevel = true && this.isSetAssuranceLevel();
    boolean that_present_AssuranceLevel = true && that.isSetAssuranceLevel();
    if (this_present_AssuranceLevel || that_present_AssuranceLevel) {
      if (!(this_present_AssuranceLevel && that_present_AssuranceLevel))
        return false;
      if (!this.AssuranceLevel.equals(that.AssuranceLevel))
        return false;
    }

    boolean this_present_SubFunctions = true && this.isSetSubFunctions();
    boolean that_present_SubFunctions = true && that.isSetSubFunctions();
    if (this_present_SubFunctions || that_present_SubFunctions) {
      if (!(this_present_SubFunctions && that_present_SubFunctions))
        return false;
      if (!this.SubFunctions.equals(that.SubFunctions))
        return false;
    }

    boolean this_present_Ports = true && this.isSetPorts();
    boolean that_present_Ports = true && that.isSetPorts();
    if (this_present_Ports || that_present_Ports) {
      if (!(this_present_Ports && that_present_Ports))
        return false;
      if (!this.Ports.equals(that.Ports))
        return false;
    }

    boolean this_present_PerfChars = true && this.isSetPerfChars();
    boolean that_present_PerfChars = true && that.isSetPerfChars();
    if (this_present_PerfChars || that_present_PerfChars) {
      if (!(this_present_PerfChars && that_present_PerfChars))
        return false;
      if (!this.PerfChars.equals(that.PerfChars))
        return false;
    }

    boolean this_present_FailureModels = true && this.isSetFailureModels();
    boolean that_present_FailureModels = true && that.isSetFailureModels();
    if (this_present_FailureModels || that_present_FailureModels) {
      if (!(this_present_FailureModels && that_present_FailureModels))
        return false;
      if (!this.FailureModels.equals(that.FailureModels))
        return false;
    }

    boolean this_present_Malfunctions = true && this.isSetMalfunctions();
    boolean that_present_Malfunctions = true && that.isSetMalfunctions();
    if (this_present_Malfunctions || that_present_Malfunctions) {
      if (!(this_present_Malfunctions && that_present_Malfunctions))
        return false;
      if (!this.Malfunctions.equals(that.Malfunctions))
        return false;
    }

    boolean this_present_Object = true && this.isSetObject();
    boolean that_present_Object = true && that.isSetObject();
    if (this_present_Object || that_present_Object) {
      if (!(this_present_Object && that_present_Object))
        return false;
      if (!this.Object.equals(that.Object))
        return false;
    }

    boolean this_present_Behavior = true && this.isSetBehavior();
    boolean that_present_Behavior = true && that.isSetBehavior();
    if (this_present_Behavior || that_present_Behavior) {
      if (!(this_present_Behavior && that_present_Behavior))
        return false;
      if (!this.Behavior.equals(that.Behavior))
        return false;
    }

    boolean this_present_SafeState = true && this.isSetSafeState();
    boolean that_present_SafeState = true && that.isSetSafeState();
    if (this_present_SafeState || that_present_SafeState) {
      if (!(this_present_SafeState && that_present_SafeState))
        return false;
      if (!this.SafeState.equals(that.SafeState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((IsCitation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((IsAbstract) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetCitedElement()) ? 131071 : 524287);
    if (isSetCitedElement())
      hashCode = hashCode * 8191 + CitedElement.hashCode();

    hashCode = hashCode * 8191 + ((isSetDependabilityRequirements()) ? 131071 : 524287);
    if (isSetDependabilityRequirements())
      hashCode = hashCode * 8191 + DependabilityRequirements.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssuranceLevel()) ? 131071 : 524287);
    if (isSetAssuranceLevel())
      hashCode = hashCode * 8191 + AssuranceLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubFunctions()) ? 131071 : 524287);
    if (isSetSubFunctions())
      hashCode = hashCode * 8191 + SubFunctions.hashCode();

    hashCode = hashCode * 8191 + ((isSetPorts()) ? 131071 : 524287);
    if (isSetPorts())
      hashCode = hashCode * 8191 + Ports.hashCode();

    hashCode = hashCode * 8191 + ((isSetPerfChars()) ? 131071 : 524287);
    if (isSetPerfChars())
      hashCode = hashCode * 8191 + PerfChars.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailureModels()) ? 131071 : 524287);
    if (isSetFailureModels())
      hashCode = hashCode * 8191 + FailureModels.hashCode();

    hashCode = hashCode * 8191 + ((isSetMalfunctions()) ? 131071 : 524287);
    if (isSetMalfunctions())
      hashCode = hashCode * 8191 + Malfunctions.hashCode();

    hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
    if (isSetObject())
      hashCode = hashCode * 8191 + Object.hashCode();

    hashCode = hashCode * 8191 + ((isSetBehavior()) ? 131071 : 524287);
    if (isSetBehavior())
      hashCode = hashCode * 8191 + Behavior.hashCode();

    hashCode = hashCode * 8191 + ((isSetSafeState()) ? 131071 : 524287);
    if (isSetSafeState())
      hashCode = hashCode * 8191 + SafeState.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDISafetyFunction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsCitation()).compareTo(other.isSetIsCitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCitation, other.IsCitation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsAbstract()).compareTo(other.isSetIsAbstract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAbstract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsAbstract, other.IsAbstract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCitedElement()).compareTo(other.isSetCitedElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCitedElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CitedElement, other.CitedElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDependabilityRequirements()).compareTo(other.isSetDependabilityRequirements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependabilityRequirements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DependabilityRequirements, other.DependabilityRequirements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssuranceLevel()).compareTo(other.isSetAssuranceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssuranceLevel, other.AssuranceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubFunctions()).compareTo(other.isSetSubFunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubFunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SubFunctions, other.SubFunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPorts()).compareTo(other.isSetPorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ports, other.Ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPerfChars()).compareTo(other.isSetPerfChars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerfChars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PerfChars, other.PerfChars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureModels()).compareTo(other.isSetFailureModels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureModels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureModels, other.FailureModels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMalfunctions()).compareTo(other.isSetMalfunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMalfunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Malfunctions, other.Malfunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObject()).compareTo(other.isSetObject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Object, other.Object);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBehavior()).compareTo(other.isSetBehavior());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBehavior()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Behavior, other.Behavior);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSafeState()).compareTo(other.isSetSafeState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSafeState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SafeState, other.SafeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDISafetyFunction(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCitation:");
    sb.append(this.IsCitation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsAbstract:");
    sb.append(this.IsAbstract);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CitedElement:");
    if (this.CitedElement == null) {
      sb.append("null");
    } else {
      sb.append(this.CitedElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DependabilityRequirements:");
    if (this.DependabilityRequirements == null) {
      sb.append("null");
    } else {
      sb.append(this.DependabilityRequirements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssuranceLevel:");
    if (this.AssuranceLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.AssuranceLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SubFunctions:");
    if (this.SubFunctions == null) {
      sb.append("null");
    } else {
      sb.append(this.SubFunctions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Ports:");
    if (this.Ports == null) {
      sb.append("null");
    } else {
      sb.append(this.Ports);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PerfChars:");
    if (this.PerfChars == null) {
      sb.append("null");
    } else {
      sb.append(this.PerfChars);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureModels:");
    if (this.FailureModels == null) {
      sb.append("null");
    } else {
      sb.append(this.FailureModels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Malfunctions:");
    if (this.Malfunctions == null) {
      sb.append("null");
    } else {
      sb.append(this.Malfunctions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Object:");
    if (this.Object == null) {
      sb.append("null");
    } else {
      sb.append(this.Object);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Behavior:");
    if (this.Behavior == null) {
      sb.append("null");
    } else {
      sb.append(this.Behavior);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SafeState:");
    if (this.SafeState == null) {
      sb.append("null");
    } else {
      sb.append(this.SafeState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (PerfChars != null) {
      PerfChars.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDISafetyFunctionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDISafetyFunctionStandardScheme getScheme() {
      return new TDDISafetyFunctionStandardScheme();
    }
  }

  private static class TDDISafetyFunctionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDISafetyFunction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDISafetyFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_CITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsCitation = iprot.readBool();
              struct.setIsCitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ABSTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsAbstract = iprot.readBool();
              struct.setIsAbstractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list616 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(_list616.size);
                TDDIKeyValueMapRef _elem617;
                for (int _i618 = 0; _i618 < _list616.size; ++_i618)
                {
                  _elem617 = new TDDIKeyValueMapRef();
                  _elem617.read(iprot);
                  struct.KeyValueMaps.add(_elem617);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CITED_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.CitedElement = new TDDIAbstractBaseElement();
              struct.CitedElement.read(iprot);
              struct.setCitedElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEPENDABILITY_REQUIREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list619 = iprot.readListBegin();
                struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list619.size);
                TDDIAbstractDependabilityRequirementRef _elem620;
                for (int _i621 = 0; _i621 < _list619.size; ++_i621)
                {
                  _elem620 = new TDDIAbstractDependabilityRequirementRef();
                  _elem620.read(iprot);
                  struct.DependabilityRequirements.add(_elem620);
                }
                iprot.readListEnd();
              }
              struct.setDependabilityRequirementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ASSURANCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AssuranceLevel = new TDDIAssuranceLevel();
              struct.AssuranceLevel.read(iprot);
              struct.setAssuranceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUB_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list622 = iprot.readListBegin();
                struct.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(_list622.size);
                TDDIAbstractFunctionRef _elem623;
                for (int _i624 = 0; _i624 < _list622.size; ++_i624)
                {
                  _elem623 = new TDDIAbstractFunctionRef();
                  _elem623.read(iprot);
                  struct.SubFunctions.add(_elem623);
                }
                iprot.readListEnd();
              }
              struct.setSubFunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list625 = iprot.readListBegin();
                struct.Ports = new java.util.ArrayList<TDDIPortRef>(_list625.size);
                TDDIPortRef _elem626;
                for (int _i627 = 0; _i627 < _list625.size; ++_i627)
                {
                  _elem626 = new TDDIPortRef();
                  _elem626.read(iprot);
                  struct.Ports.add(_elem626);
                }
                iprot.readListEnd();
              }
              struct.setPortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PERF_CHARS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.PerfChars = new TDDIPerfChars();
              struct.PerfChars.read(iprot);
              struct.setPerfCharsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FAILURE_MODELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list628 = iprot.readListBegin();
                struct.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>(_list628.size);
                TDDIAbstractFailureLogicPackageRef _elem629;
                for (int _i630 = 0; _i630 < _list628.size; ++_i630)
                {
                  _elem629 = new TDDIAbstractFailureLogicPackageRef();
                  _elem629.read(iprot);
                  struct.FailureModels.add(_elem629);
                }
                iprot.readListEnd();
              }
              struct.setFailureModelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MALFUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list631 = iprot.readListBegin();
                struct.Malfunctions = new java.util.ArrayList<TDDIMalFunctionRef>(_list631.size);
                TDDIMalFunctionRef _elem632;
                for (int _i633 = 0; _i633 < _list631.size; ++_i633)
                {
                  _elem632 = new TDDIMalFunctionRef();
                  _elem632.read(iprot);
                  struct.Malfunctions.add(_elem632);
                }
                iprot.readListEnd();
              }
              struct.setMalfunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Object = iprot.readString();
              struct.setObjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BEHAVIOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Behavior = iprot.readString();
              struct.setBehaviorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SAFE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SafeState = iprot.readString();
              struct.setSafeStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDISafetyFunction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CITATION_FIELD_DESC);
      oprot.writeBool(struct.IsCitation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ABSTRACT_FIELD_DESC);
      oprot.writeBool(struct.IsAbstract);
      oprot.writeFieldEnd();
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMapRef _iter634 : struct.KeyValueMaps)
          {
            _iter634.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CitedElement != null) {
        oprot.writeFieldBegin(CITED_ELEMENT_FIELD_DESC);
        struct.CitedElement.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.DependabilityRequirements != null) {
        oprot.writeFieldBegin(DEPENDABILITY_REQUIREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DependabilityRequirements.size()));
          for (TDDIAbstractDependabilityRequirementRef _iter635 : struct.DependabilityRequirements)
          {
            _iter635.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AssuranceLevel != null) {
        oprot.writeFieldBegin(ASSURANCE_LEVEL_FIELD_DESC);
        struct.AssuranceLevel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.SubFunctions != null) {
        oprot.writeFieldBegin(SUB_FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SubFunctions.size()));
          for (TDDIAbstractFunctionRef _iter636 : struct.SubFunctions)
          {
            _iter636.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Ports != null) {
        oprot.writeFieldBegin(PORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Ports.size()));
          for (TDDIPortRef _iter637 : struct.Ports)
          {
            _iter637.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.PerfChars != null) {
        oprot.writeFieldBegin(PERF_CHARS_FIELD_DESC);
        struct.PerfChars.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.FailureModels != null) {
        oprot.writeFieldBegin(FAILURE_MODELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FailureModels.size()));
          for (TDDIAbstractFailureLogicPackageRef _iter638 : struct.FailureModels)
          {
            _iter638.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Malfunctions != null) {
        oprot.writeFieldBegin(MALFUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Malfunctions.size()));
          for (TDDIMalFunctionRef _iter639 : struct.Malfunctions)
          {
            _iter639.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Object != null) {
        oprot.writeFieldBegin(OBJECT_FIELD_DESC);
        oprot.writeString(struct.Object);
        oprot.writeFieldEnd();
      }
      if (struct.Behavior != null) {
        oprot.writeFieldBegin(BEHAVIOR_FIELD_DESC);
        oprot.writeString(struct.Behavior);
        oprot.writeFieldEnd();
      }
      if (struct.SafeState != null) {
        oprot.writeFieldBegin(SAFE_STATE_FIELD_DESC);
        oprot.writeString(struct.SafeState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDISafetyFunctionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDISafetyFunctionTupleScheme getScheme() {
      return new TDDISafetyFunctionTupleScheme();
    }
  }

  private static class TDDISafetyFunctionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDISafetyFunction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDISafetyFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetIsCitation()) {
        optionals.set(3);
      }
      if (struct.isSetIsAbstract()) {
        optionals.set(4);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(5);
      }
      if (struct.isSetCitedElement()) {
        optionals.set(6);
      }
      if (struct.isSetDependabilityRequirements()) {
        optionals.set(7);
      }
      if (struct.isSetAssuranceLevel()) {
        optionals.set(8);
      }
      if (struct.isSetSubFunctions()) {
        optionals.set(9);
      }
      if (struct.isSetPorts()) {
        optionals.set(10);
      }
      if (struct.isSetPerfChars()) {
        optionals.set(11);
      }
      if (struct.isSetFailureModels()) {
        optionals.set(12);
      }
      if (struct.isSetMalfunctions()) {
        optionals.set(13);
      }
      if (struct.isSetObject()) {
        optionals.set(14);
      }
      if (struct.isSetBehavior()) {
        optionals.set(15);
      }
      if (struct.isSetSafeState()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetIsCitation()) {
        oprot.writeBool(struct.IsCitation);
      }
      if (struct.isSetIsAbstract()) {
        oprot.writeBool(struct.IsAbstract);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMapRef _iter640 : struct.KeyValueMaps)
          {
            _iter640.write(oprot);
          }
        }
      }
      if (struct.isSetCitedElement()) {
        struct.CitedElement.write(oprot);
      }
      if (struct.isSetDependabilityRequirements()) {
        {
          oprot.writeI32(struct.DependabilityRequirements.size());
          for (TDDIAbstractDependabilityRequirementRef _iter641 : struct.DependabilityRequirements)
          {
            _iter641.write(oprot);
          }
        }
      }
      if (struct.isSetAssuranceLevel()) {
        struct.AssuranceLevel.write(oprot);
      }
      if (struct.isSetSubFunctions()) {
        {
          oprot.writeI32(struct.SubFunctions.size());
          for (TDDIAbstractFunctionRef _iter642 : struct.SubFunctions)
          {
            _iter642.write(oprot);
          }
        }
      }
      if (struct.isSetPorts()) {
        {
          oprot.writeI32(struct.Ports.size());
          for (TDDIPortRef _iter643 : struct.Ports)
          {
            _iter643.write(oprot);
          }
        }
      }
      if (struct.isSetPerfChars()) {
        struct.PerfChars.write(oprot);
      }
      if (struct.isSetFailureModels()) {
        {
          oprot.writeI32(struct.FailureModels.size());
          for (TDDIAbstractFailureLogicPackageRef _iter644 : struct.FailureModels)
          {
            _iter644.write(oprot);
          }
        }
      }
      if (struct.isSetMalfunctions()) {
        {
          oprot.writeI32(struct.Malfunctions.size());
          for (TDDIMalFunctionRef _iter645 : struct.Malfunctions)
          {
            _iter645.write(oprot);
          }
        }
      }
      if (struct.isSetObject()) {
        oprot.writeString(struct.Object);
      }
      if (struct.isSetBehavior()) {
        oprot.writeString(struct.Behavior);
      }
      if (struct.isSetSafeState()) {
        oprot.writeString(struct.SafeState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDISafetyFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.IsCitation = iprot.readBool();
        struct.setIsCitationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.IsAbstract = iprot.readBool();
        struct.setIsAbstractIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list646 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMapRef>(_list646.size);
          TDDIKeyValueMapRef _elem647;
          for (int _i648 = 0; _i648 < _list646.size; ++_i648)
          {
            _elem647 = new TDDIKeyValueMapRef();
            _elem647.read(iprot);
            struct.KeyValueMaps.add(_elem647);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.CitedElement = new TDDIAbstractBaseElement();
        struct.CitedElement.read(iprot);
        struct.setCitedElementIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list649 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list649.size);
          TDDIAbstractDependabilityRequirementRef _elem650;
          for (int _i651 = 0; _i651 < _list649.size; ++_i651)
          {
            _elem650 = new TDDIAbstractDependabilityRequirementRef();
            _elem650.read(iprot);
            struct.DependabilityRequirements.add(_elem650);
          }
        }
        struct.setDependabilityRequirementsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.AssuranceLevel = new TDDIAssuranceLevel();
        struct.AssuranceLevel.read(iprot);
        struct.setAssuranceLevelIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list652 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(_list652.size);
          TDDIAbstractFunctionRef _elem653;
          for (int _i654 = 0; _i654 < _list652.size; ++_i654)
          {
            _elem653 = new TDDIAbstractFunctionRef();
            _elem653.read(iprot);
            struct.SubFunctions.add(_elem653);
          }
        }
        struct.setSubFunctionsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list655 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Ports = new java.util.ArrayList<TDDIPortRef>(_list655.size);
          TDDIPortRef _elem656;
          for (int _i657 = 0; _i657 < _list655.size; ++_i657)
          {
            _elem656 = new TDDIPortRef();
            _elem656.read(iprot);
            struct.Ports.add(_elem656);
          }
        }
        struct.setPortsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.PerfChars = new TDDIPerfChars();
        struct.PerfChars.read(iprot);
        struct.setPerfCharsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list658 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FailureModels = new java.util.ArrayList<TDDIAbstractFailureLogicPackageRef>(_list658.size);
          TDDIAbstractFailureLogicPackageRef _elem659;
          for (int _i660 = 0; _i660 < _list658.size; ++_i660)
          {
            _elem659 = new TDDIAbstractFailureLogicPackageRef();
            _elem659.read(iprot);
            struct.FailureModels.add(_elem659);
          }
        }
        struct.setFailureModelsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list661 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Malfunctions = new java.util.ArrayList<TDDIMalFunctionRef>(_list661.size);
          TDDIMalFunctionRef _elem662;
          for (int _i663 = 0; _i663 < _list661.size; ++_i663)
          {
            _elem662 = new TDDIMalFunctionRef();
            _elem662.read(iprot);
            struct.Malfunctions.add(_elem662);
          }
        }
        struct.setMalfunctionsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.Object = iprot.readString();
        struct.setObjectIsSet(true);
      }
      if (incoming.get(15)) {
        struct.Behavior = iprot.readString();
        struct.setBehaviorIsSet(true);
      }
      if (incoming.get(16)) {
        struct.SafeState = iprot.readString();
        struct.setSafeStateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

