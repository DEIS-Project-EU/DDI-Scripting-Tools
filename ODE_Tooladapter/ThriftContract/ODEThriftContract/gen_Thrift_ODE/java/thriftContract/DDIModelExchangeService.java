/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class DDIModelExchangeService {

  public interface Iface {

    public void ExportModelToDDIFile(java.lang.String Path, TDDIAbstractODEPackage ODEPackage) throws TDDIValidationFailedException, org.apache.thrift.TException;

    public TDDIAbstractODEPackage ImportDDIModel(java.lang.String Path) throws TDDIValidationFailedException, org.apache.thrift.TException;

    public TDDIValidationResult ValidateDdi(java.lang.String DdiPath, java.lang.String EvlFilePath) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ExportModelToDDIFile(java.lang.String Path, TDDIAbstractODEPackage ODEPackage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void ImportDDIModel(java.lang.String Path, org.apache.thrift.async.AsyncMethodCallback<TDDIAbstractODEPackage> resultHandler) throws org.apache.thrift.TException;

    public void ValidateDdi(java.lang.String DdiPath, java.lang.String EvlFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ExportModelToDDIFile(java.lang.String Path, TDDIAbstractODEPackage ODEPackage) throws TDDIValidationFailedException, org.apache.thrift.TException
    {
      send_ExportModelToDDIFile(Path, ODEPackage);
      recv_ExportModelToDDIFile();
    }

    public void send_ExportModelToDDIFile(java.lang.String Path, TDDIAbstractODEPackage ODEPackage) throws org.apache.thrift.TException
    {
      ExportModelToDDIFile_args args = new ExportModelToDDIFile_args();
      args.setPath(Path);
      args.setODEPackage(ODEPackage);
      sendBase("ExportModelToDDIFile", args);
    }

    public void recv_ExportModelToDDIFile() throws TDDIValidationFailedException, org.apache.thrift.TException
    {
      ExportModelToDDIFile_result result = new ExportModelToDDIFile_result();
      receiveBase(result, "ExportModelToDDIFile");
      if (result.ValidationFailedException != null) {
        throw result.ValidationFailedException;
      }
      return;
    }

    public TDDIAbstractODEPackage ImportDDIModel(java.lang.String Path) throws TDDIValidationFailedException, org.apache.thrift.TException
    {
      send_ImportDDIModel(Path);
      return recv_ImportDDIModel();
    }

    public void send_ImportDDIModel(java.lang.String Path) throws org.apache.thrift.TException
    {
      ImportDDIModel_args args = new ImportDDIModel_args();
      args.setPath(Path);
      sendBase("ImportDDIModel", args);
    }

    public TDDIAbstractODEPackage recv_ImportDDIModel() throws TDDIValidationFailedException, org.apache.thrift.TException
    {
      ImportDDIModel_result result = new ImportDDIModel_result();
      receiveBase(result, "ImportDDIModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ValidationFailedException != null) {
        throw result.ValidationFailedException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ImportDDIModel failed: unknown result");
    }

    public TDDIValidationResult ValidateDdi(java.lang.String DdiPath, java.lang.String EvlFilePath) throws org.apache.thrift.TException
    {
      send_ValidateDdi(DdiPath, EvlFilePath);
      return recv_ValidateDdi();
    }

    public void send_ValidateDdi(java.lang.String DdiPath, java.lang.String EvlFilePath) throws org.apache.thrift.TException
    {
      ValidateDdi_args args = new ValidateDdi_args();
      args.setDdiPath(DdiPath);
      args.setEvlFilePath(EvlFilePath);
      sendBase("ValidateDdi", args);
    }

    public TDDIValidationResult recv_ValidateDdi() throws org.apache.thrift.TException
    {
      ValidateDdi_result result = new ValidateDdi_result();
      receiveBase(result, "ValidateDdi");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ValidateDdi failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ExportModelToDDIFile(java.lang.String Path, TDDIAbstractODEPackage ODEPackage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ExportModelToDDIFile_call method_call = new ExportModelToDDIFile_call(Path, ODEPackage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ExportModelToDDIFile_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String Path;
      private TDDIAbstractODEPackage ODEPackage;
      public ExportModelToDDIFile_call(java.lang.String Path, TDDIAbstractODEPackage ODEPackage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Path = Path;
        this.ODEPackage = ODEPackage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ExportModelToDDIFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ExportModelToDDIFile_args args = new ExportModelToDDIFile_args();
        args.setPath(Path);
        args.setODEPackage(ODEPackage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TDDIValidationFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void ImportDDIModel(java.lang.String Path, org.apache.thrift.async.AsyncMethodCallback<TDDIAbstractODEPackage> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ImportDDIModel_call method_call = new ImportDDIModel_call(Path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ImportDDIModel_call extends org.apache.thrift.async.TAsyncMethodCall<TDDIAbstractODEPackage> {
      private java.lang.String Path;
      public ImportDDIModel_call(java.lang.String Path, org.apache.thrift.async.AsyncMethodCallback<TDDIAbstractODEPackage> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Path = Path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ImportDDIModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ImportDDIModel_args args = new ImportDDIModel_args();
        args.setPath(Path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDDIAbstractODEPackage getResult() throws TDDIValidationFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ImportDDIModel();
      }
    }

    public void ValidateDdi(java.lang.String DdiPath, java.lang.String EvlFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ValidateDdi_call method_call = new ValidateDdi_call(DdiPath, EvlFilePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ValidateDdi_call extends org.apache.thrift.async.TAsyncMethodCall<TDDIValidationResult> {
      private java.lang.String DdiPath;
      private java.lang.String EvlFilePath;
      public ValidateDdi_call(java.lang.String DdiPath, java.lang.String EvlFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DdiPath = DdiPath;
        this.EvlFilePath = EvlFilePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ValidateDdi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ValidateDdi_args args = new ValidateDdi_args();
        args.setDdiPath(DdiPath);
        args.setEvlFilePath(EvlFilePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDDIValidationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ValidateDdi();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ExportModelToDDIFile", new ExportModelToDDIFile());
      processMap.put("ImportDDIModel", new ImportDDIModel());
      processMap.put("ValidateDdi", new ValidateDdi());
      return processMap;
    }

    public static class ExportModelToDDIFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ExportModelToDDIFile_args> {
      public ExportModelToDDIFile() {
        super("ExportModelToDDIFile");
      }

      public ExportModelToDDIFile_args getEmptyArgsInstance() {
        return new ExportModelToDDIFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ExportModelToDDIFile_result getResult(I iface, ExportModelToDDIFile_args args) throws org.apache.thrift.TException {
        ExportModelToDDIFile_result result = new ExportModelToDDIFile_result();
        try {
          iface.ExportModelToDDIFile(args.Path, args.ODEPackage);
        } catch (TDDIValidationFailedException ValidationFailedException) {
          result.ValidationFailedException = ValidationFailedException;
        }
        return result;
      }
    }

    public static class ImportDDIModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ImportDDIModel_args> {
      public ImportDDIModel() {
        super("ImportDDIModel");
      }

      public ImportDDIModel_args getEmptyArgsInstance() {
        return new ImportDDIModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ImportDDIModel_result getResult(I iface, ImportDDIModel_args args) throws org.apache.thrift.TException {
        ImportDDIModel_result result = new ImportDDIModel_result();
        try {
          result.success = iface.ImportDDIModel(args.Path);
        } catch (TDDIValidationFailedException ValidationFailedException) {
          result.ValidationFailedException = ValidationFailedException;
        }
        return result;
      }
    }

    public static class ValidateDdi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ValidateDdi_args> {
      public ValidateDdi() {
        super("ValidateDdi");
      }

      public ValidateDdi_args getEmptyArgsInstance() {
        return new ValidateDdi_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ValidateDdi_result getResult(I iface, ValidateDdi_args args) throws org.apache.thrift.TException {
        ValidateDdi_result result = new ValidateDdi_result();
        result.success = iface.ValidateDdi(args.DdiPath, args.EvlFilePath);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ExportModelToDDIFile", new ExportModelToDDIFile());
      processMap.put("ImportDDIModel", new ImportDDIModel());
      processMap.put("ValidateDdi", new ValidateDdi());
      return processMap;
    }

    public static class ExportModelToDDIFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ExportModelToDDIFile_args, Void> {
      public ExportModelToDDIFile() {
        super("ExportModelToDDIFile");
      }

      public ExportModelToDDIFile_args getEmptyArgsInstance() {
        return new ExportModelToDDIFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ExportModelToDDIFile_result result = new ExportModelToDDIFile_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ExportModelToDDIFile_result result = new ExportModelToDDIFile_result();
            if (e instanceof TDDIValidationFailedException) {
              result.ValidationFailedException = (TDDIValidationFailedException) e;
              result.setValidationFailedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ExportModelToDDIFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ExportModelToDDIFile(args.Path, args.ODEPackage,resultHandler);
      }
    }

    public static class ImportDDIModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ImportDDIModel_args, TDDIAbstractODEPackage> {
      public ImportDDIModel() {
        super("ImportDDIModel");
      }

      public ImportDDIModel_args getEmptyArgsInstance() {
        return new ImportDDIModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TDDIAbstractODEPackage> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TDDIAbstractODEPackage>() { 
          public void onComplete(TDDIAbstractODEPackage o) {
            ImportDDIModel_result result = new ImportDDIModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ImportDDIModel_result result = new ImportDDIModel_result();
            if (e instanceof TDDIValidationFailedException) {
              result.ValidationFailedException = (TDDIValidationFailedException) e;
              result.setValidationFailedExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ImportDDIModel_args args, org.apache.thrift.async.AsyncMethodCallback<TDDIAbstractODEPackage> resultHandler) throws org.apache.thrift.TException {
        iface.ImportDDIModel(args.Path,resultHandler);
      }
    }

    public static class ValidateDdi<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ValidateDdi_args, TDDIValidationResult> {
      public ValidateDdi() {
        super("ValidateDdi");
      }

      public ValidateDdi_args getEmptyArgsInstance() {
        return new ValidateDdi_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult>() { 
          public void onComplete(TDDIValidationResult o) {
            ValidateDdi_result result = new ValidateDdi_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ValidateDdi_result result = new ValidateDdi_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ValidateDdi_args args, org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> resultHandler) throws org.apache.thrift.TException {
        iface.ValidateDdi(args.DdiPath, args.EvlFilePath,resultHandler);
      }
    }

  }

  public static class ExportModelToDDIFile_args implements org.apache.thrift.TBase<ExportModelToDDIFile_args, ExportModelToDDIFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<ExportModelToDDIFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExportModelToDDIFile_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("Path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ODEPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ODEPackage", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExportModelToDDIFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExportModelToDDIFile_argsTupleSchemeFactory();

    public java.lang.String Path; // required
    public TDDIAbstractODEPackage ODEPackage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "Path"),
      ODEPACKAGE((short)2, "ODEPackage");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          case 2: // ODEPACKAGE
            return ODEPACKAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ODEPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ODEPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractODEPackage.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExportModelToDDIFile_args.class, metaDataMap);
    }

    public ExportModelToDDIFile_args() {
    }

    public ExportModelToDDIFile_args(
      java.lang.String Path,
      TDDIAbstractODEPackage ODEPackage)
    {
      this();
      this.Path = Path;
      this.ODEPackage = ODEPackage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExportModelToDDIFile_args(ExportModelToDDIFile_args other) {
      if (other.isSetPath()) {
        this.Path = other.Path;
      }
      if (other.isSetODEPackage()) {
        this.ODEPackage = new TDDIAbstractODEPackage(other.ODEPackage);
      }
    }

    public ExportModelToDDIFile_args deepCopy() {
      return new ExportModelToDDIFile_args(this);
    }

    @Override
    public void clear() {
      this.Path = null;
      this.ODEPackage = null;
    }

    public java.lang.String getPath() {
      return this.Path;
    }

    public ExportModelToDDIFile_args setPath(java.lang.String Path) {
      this.Path = Path;
      return this;
    }

    public void unsetPath() {
      this.Path = null;
    }

    /** Returns true if field Path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.Path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.Path = null;
      }
    }

    public TDDIAbstractODEPackage getODEPackage() {
      return this.ODEPackage;
    }

    public ExportModelToDDIFile_args setODEPackage(TDDIAbstractODEPackage ODEPackage) {
      this.ODEPackage = ODEPackage;
      return this;
    }

    public void unsetODEPackage() {
      this.ODEPackage = null;
    }

    /** Returns true if field ODEPackage is set (has been assigned a value) and false otherwise */
    public boolean isSetODEPackage() {
      return this.ODEPackage != null;
    }

    public void setODEPackageIsSet(boolean value) {
      if (!value) {
        this.ODEPackage = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      case ODEPACKAGE:
        if (value == null) {
          unsetODEPackage();
        } else {
          setODEPackage((TDDIAbstractODEPackage)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      case ODEPACKAGE:
        return getODEPackage();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      case ODEPACKAGE:
        return isSetODEPackage();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExportModelToDDIFile_args)
        return this.equals((ExportModelToDDIFile_args)that);
      return false;
    }

    public boolean equals(ExportModelToDDIFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_Path = true && this.isSetPath();
      boolean that_present_Path = true && that.isSetPath();
      if (this_present_Path || that_present_Path) {
        if (!(this_present_Path && that_present_Path))
          return false;
        if (!this.Path.equals(that.Path))
          return false;
      }

      boolean this_present_ODEPackage = true && this.isSetODEPackage();
      boolean that_present_ODEPackage = true && that.isSetODEPackage();
      if (this_present_ODEPackage || that_present_ODEPackage) {
        if (!(this_present_ODEPackage && that_present_ODEPackage))
          return false;
        if (!this.ODEPackage.equals(that.ODEPackage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetODEPackage()) ? 131071 : 524287);
      if (isSetODEPackage())
        hashCode = hashCode * 8191 + ODEPackage.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExportModelToDDIFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Path, other.Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetODEPackage()).compareTo(other.isSetODEPackage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetODEPackage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ODEPackage, other.ODEPackage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExportModelToDDIFile_args(");
      boolean first = true;

      sb.append("Path:");
      if (this.Path == null) {
        sb.append("null");
      } else {
        sb.append(this.Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ODEPackage:");
      if (this.ODEPackage == null) {
        sb.append("null");
      } else {
        sb.append(this.ODEPackage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ODEPackage != null) {
        ODEPackage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExportModelToDDIFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExportModelToDDIFile_argsStandardScheme getScheme() {
        return new ExportModelToDDIFile_argsStandardScheme();
      }
    }

    private static class ExportModelToDDIFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExportModelToDDIFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExportModelToDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ODEPACKAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ODEPackage = new TDDIAbstractODEPackage();
                struct.ODEPackage.read(iprot);
                struct.setODEPackageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExportModelToDDIFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.Path);
          oprot.writeFieldEnd();
        }
        if (struct.ODEPackage != null) {
          oprot.writeFieldBegin(ODEPACKAGE_FIELD_DESC);
          struct.ODEPackage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExportModelToDDIFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExportModelToDDIFile_argsTupleScheme getScheme() {
        return new ExportModelToDDIFile_argsTupleScheme();
      }
    }

    private static class ExportModelToDDIFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExportModelToDDIFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExportModelToDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        if (struct.isSetODEPackage()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPath()) {
          oprot.writeString(struct.Path);
        }
        if (struct.isSetODEPackage()) {
          struct.ODEPackage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExportModelToDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.Path = iprot.readString();
          struct.setPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ODEPackage = new TDDIAbstractODEPackage();
          struct.ODEPackage.read(iprot);
          struct.setODEPackageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ExportModelToDDIFile_result implements org.apache.thrift.TBase<ExportModelToDDIFile_result, ExportModelToDDIFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<ExportModelToDDIFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExportModelToDDIFile_result");

    private static final org.apache.thrift.protocol.TField VALIDATION_FAILED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ValidationFailedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExportModelToDDIFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExportModelToDDIFile_resultTupleSchemeFactory();

    public TDDIValidationFailedException ValidationFailedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDATION_FAILED_EXCEPTION((short)1, "ValidationFailedException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDATION_FAILED_EXCEPTION
            return VALIDATION_FAILED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDATION_FAILED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ValidationFailedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIValidationFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExportModelToDDIFile_result.class, metaDataMap);
    }

    public ExportModelToDDIFile_result() {
    }

    public ExportModelToDDIFile_result(
      TDDIValidationFailedException ValidationFailedException)
    {
      this();
      this.ValidationFailedException = ValidationFailedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExportModelToDDIFile_result(ExportModelToDDIFile_result other) {
      if (other.isSetValidationFailedException()) {
        this.ValidationFailedException = new TDDIValidationFailedException(other.ValidationFailedException);
      }
    }

    public ExportModelToDDIFile_result deepCopy() {
      return new ExportModelToDDIFile_result(this);
    }

    @Override
    public void clear() {
      this.ValidationFailedException = null;
    }

    public TDDIValidationFailedException getValidationFailedException() {
      return this.ValidationFailedException;
    }

    public ExportModelToDDIFile_result setValidationFailedException(TDDIValidationFailedException ValidationFailedException) {
      this.ValidationFailedException = ValidationFailedException;
      return this;
    }

    public void unsetValidationFailedException() {
      this.ValidationFailedException = null;
    }

    /** Returns true if field ValidationFailedException is set (has been assigned a value) and false otherwise */
    public boolean isSetValidationFailedException() {
      return this.ValidationFailedException != null;
    }

    public void setValidationFailedExceptionIsSet(boolean value) {
      if (!value) {
        this.ValidationFailedException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case VALIDATION_FAILED_EXCEPTION:
        if (value == null) {
          unsetValidationFailedException();
        } else {
          setValidationFailedException((TDDIValidationFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDATION_FAILED_EXCEPTION:
        return getValidationFailedException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VALIDATION_FAILED_EXCEPTION:
        return isSetValidationFailedException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExportModelToDDIFile_result)
        return this.equals((ExportModelToDDIFile_result)that);
      return false;
    }

    public boolean equals(ExportModelToDDIFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ValidationFailedException = true && this.isSetValidationFailedException();
      boolean that_present_ValidationFailedException = true && that.isSetValidationFailedException();
      if (this_present_ValidationFailedException || that_present_ValidationFailedException) {
        if (!(this_present_ValidationFailedException && that_present_ValidationFailedException))
          return false;
        if (!this.ValidationFailedException.equals(that.ValidationFailedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetValidationFailedException()) ? 131071 : 524287);
      if (isSetValidationFailedException())
        hashCode = hashCode * 8191 + ValidationFailedException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExportModelToDDIFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetValidationFailedException()).compareTo(other.isSetValidationFailedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidationFailedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ValidationFailedException, other.ValidationFailedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExportModelToDDIFile_result(");
      boolean first = true;

      sb.append("ValidationFailedException:");
      if (this.ValidationFailedException == null) {
        sb.append("null");
      } else {
        sb.append(this.ValidationFailedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExportModelToDDIFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExportModelToDDIFile_resultStandardScheme getScheme() {
        return new ExportModelToDDIFile_resultStandardScheme();
      }
    }

    private static class ExportModelToDDIFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExportModelToDDIFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExportModelToDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDATION_FAILED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ValidationFailedException = new TDDIValidationFailedException();
                struct.ValidationFailedException.read(iprot);
                struct.setValidationFailedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExportModelToDDIFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ValidationFailedException != null) {
          oprot.writeFieldBegin(VALIDATION_FAILED_EXCEPTION_FIELD_DESC);
          struct.ValidationFailedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExportModelToDDIFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExportModelToDDIFile_resultTupleScheme getScheme() {
        return new ExportModelToDDIFile_resultTupleScheme();
      }
    }

    private static class ExportModelToDDIFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExportModelToDDIFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExportModelToDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetValidationFailedException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValidationFailedException()) {
          struct.ValidationFailedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExportModelToDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ValidationFailedException = new TDDIValidationFailedException();
          struct.ValidationFailedException.read(iprot);
          struct.setValidationFailedExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ImportDDIModel_args implements org.apache.thrift.TBase<ImportDDIModel_args, ImportDDIModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<ImportDDIModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImportDDIModel_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("Path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImportDDIModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImportDDIModel_argsTupleSchemeFactory();

    public java.lang.String Path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "Path");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImportDDIModel_args.class, metaDataMap);
    }

    public ImportDDIModel_args() {
    }

    public ImportDDIModel_args(
      java.lang.String Path)
    {
      this();
      this.Path = Path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ImportDDIModel_args(ImportDDIModel_args other) {
      if (other.isSetPath()) {
        this.Path = other.Path;
      }
    }

    public ImportDDIModel_args deepCopy() {
      return new ImportDDIModel_args(this);
    }

    @Override
    public void clear() {
      this.Path = null;
    }

    public java.lang.String getPath() {
      return this.Path;
    }

    public ImportDDIModel_args setPath(java.lang.String Path) {
      this.Path = Path;
      return this;
    }

    public void unsetPath() {
      this.Path = null;
    }

    /** Returns true if field Path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.Path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.Path = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ImportDDIModel_args)
        return this.equals((ImportDDIModel_args)that);
      return false;
    }

    public boolean equals(ImportDDIModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_Path = true && this.isSetPath();
      boolean that_present_Path = true && that.isSetPath();
      if (this_present_Path || that_present_Path) {
        if (!(this_present_Path && that_present_Path))
          return false;
        if (!this.Path.equals(that.Path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
      if (isSetPath())
        hashCode = hashCode * 8191 + Path.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ImportDDIModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Path, other.Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ImportDDIModel_args(");
      boolean first = true;

      sb.append("Path:");
      if (this.Path == null) {
        sb.append("null");
      } else {
        sb.append(this.Path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ImportDDIModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ImportDDIModel_argsStandardScheme getScheme() {
        return new ImportDDIModel_argsStandardScheme();
      }
    }

    private static class ImportDDIModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImportDDIModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ImportDDIModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ImportDDIModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.Path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ImportDDIModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ImportDDIModel_argsTupleScheme getScheme() {
        return new ImportDDIModel_argsTupleScheme();
      }
    }

    private static class ImportDDIModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImportDDIModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ImportDDIModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.Path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ImportDDIModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.Path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ImportDDIModel_result implements org.apache.thrift.TBase<ImportDDIModel_result, ImportDDIModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<ImportDDIModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImportDDIModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField VALIDATION_FAILED_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ValidationFailedException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImportDDIModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImportDDIModel_resultTupleSchemeFactory();

    public TDDIAbstractODEPackage success; // required
    public TDDIValidationFailedException ValidationFailedException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VALIDATION_FAILED_EXCEPTION((short)1, "ValidationFailedException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VALIDATION_FAILED_EXCEPTION
            return VALIDATION_FAILED_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractODEPackage.class)));
      tmpMap.put(_Fields.VALIDATION_FAILED_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ValidationFailedException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIValidationFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImportDDIModel_result.class, metaDataMap);
    }

    public ImportDDIModel_result() {
    }

    public ImportDDIModel_result(
      TDDIAbstractODEPackage success,
      TDDIValidationFailedException ValidationFailedException)
    {
      this();
      this.success = success;
      this.ValidationFailedException = ValidationFailedException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ImportDDIModel_result(ImportDDIModel_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDDIAbstractODEPackage(other.success);
      }
      if (other.isSetValidationFailedException()) {
        this.ValidationFailedException = new TDDIValidationFailedException(other.ValidationFailedException);
      }
    }

    public ImportDDIModel_result deepCopy() {
      return new ImportDDIModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ValidationFailedException = null;
    }

    public TDDIAbstractODEPackage getSuccess() {
      return this.success;
    }

    public ImportDDIModel_result setSuccess(TDDIAbstractODEPackage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDDIValidationFailedException getValidationFailedException() {
      return this.ValidationFailedException;
    }

    public ImportDDIModel_result setValidationFailedException(TDDIValidationFailedException ValidationFailedException) {
      this.ValidationFailedException = ValidationFailedException;
      return this;
    }

    public void unsetValidationFailedException() {
      this.ValidationFailedException = null;
    }

    /** Returns true if field ValidationFailedException is set (has been assigned a value) and false otherwise */
    public boolean isSetValidationFailedException() {
      return this.ValidationFailedException != null;
    }

    public void setValidationFailedExceptionIsSet(boolean value) {
      if (!value) {
        this.ValidationFailedException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDDIAbstractODEPackage)value);
        }
        break;

      case VALIDATION_FAILED_EXCEPTION:
        if (value == null) {
          unsetValidationFailedException();
        } else {
          setValidationFailedException((TDDIValidationFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VALIDATION_FAILED_EXCEPTION:
        return getValidationFailedException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VALIDATION_FAILED_EXCEPTION:
        return isSetValidationFailedException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ImportDDIModel_result)
        return this.equals((ImportDDIModel_result)that);
      return false;
    }

    public boolean equals(ImportDDIModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ValidationFailedException = true && this.isSetValidationFailedException();
      boolean that_present_ValidationFailedException = true && that.isSetValidationFailedException();
      if (this_present_ValidationFailedException || that_present_ValidationFailedException) {
        if (!(this_present_ValidationFailedException && that_present_ValidationFailedException))
          return false;
        if (!this.ValidationFailedException.equals(that.ValidationFailedException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetValidationFailedException()) ? 131071 : 524287);
      if (isSetValidationFailedException())
        hashCode = hashCode * 8191 + ValidationFailedException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ImportDDIModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetValidationFailedException()).compareTo(other.isSetValidationFailedException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidationFailedException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ValidationFailedException, other.ValidationFailedException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ImportDDIModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ValidationFailedException:");
      if (this.ValidationFailedException == null) {
        sb.append("null");
      } else {
        sb.append(this.ValidationFailedException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ImportDDIModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ImportDDIModel_resultStandardScheme getScheme() {
        return new ImportDDIModel_resultStandardScheme();
      }
    }

    private static class ImportDDIModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImportDDIModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ImportDDIModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDDIAbstractODEPackage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VALIDATION_FAILED_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ValidationFailedException = new TDDIValidationFailedException();
                struct.ValidationFailedException.read(iprot);
                struct.setValidationFailedExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ImportDDIModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ValidationFailedException != null) {
          oprot.writeFieldBegin(VALIDATION_FAILED_EXCEPTION_FIELD_DESC);
          struct.ValidationFailedException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ImportDDIModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ImportDDIModel_resultTupleScheme getScheme() {
        return new ImportDDIModel_resultTupleScheme();
      }
    }

    private static class ImportDDIModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImportDDIModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ImportDDIModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetValidationFailedException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetValidationFailedException()) {
          struct.ValidationFailedException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ImportDDIModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TDDIAbstractODEPackage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ValidationFailedException = new TDDIValidationFailedException();
          struct.ValidationFailedException.read(iprot);
          struct.setValidationFailedExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ValidateDdi_args implements org.apache.thrift.TBase<ValidateDdi_args, ValidateDdi_args._Fields>, java.io.Serializable, Cloneable, Comparable<ValidateDdi_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ValidateDdi_args");

    private static final org.apache.thrift.protocol.TField DDI_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("DdiPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EVL_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("EvlFilePath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ValidateDdi_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ValidateDdi_argsTupleSchemeFactory();

    public java.lang.String DdiPath; // required
    public java.lang.String EvlFilePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DDI_PATH((short)1, "DdiPath"),
      EVL_FILE_PATH((short)2, "EvlFilePath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DDI_PATH
            return DDI_PATH;
          case 2: // EVL_FILE_PATH
            return EVL_FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DDI_PATH, new org.apache.thrift.meta_data.FieldMetaData("DdiPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EVL_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("EvlFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ValidateDdi_args.class, metaDataMap);
    }

    public ValidateDdi_args() {
    }

    public ValidateDdi_args(
      java.lang.String DdiPath,
      java.lang.String EvlFilePath)
    {
      this();
      this.DdiPath = DdiPath;
      this.EvlFilePath = EvlFilePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ValidateDdi_args(ValidateDdi_args other) {
      if (other.isSetDdiPath()) {
        this.DdiPath = other.DdiPath;
      }
      if (other.isSetEvlFilePath()) {
        this.EvlFilePath = other.EvlFilePath;
      }
    }

    public ValidateDdi_args deepCopy() {
      return new ValidateDdi_args(this);
    }

    @Override
    public void clear() {
      this.DdiPath = null;
      this.EvlFilePath = null;
    }

    public java.lang.String getDdiPath() {
      return this.DdiPath;
    }

    public ValidateDdi_args setDdiPath(java.lang.String DdiPath) {
      this.DdiPath = DdiPath;
      return this;
    }

    public void unsetDdiPath() {
      this.DdiPath = null;
    }

    /** Returns true if field DdiPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDdiPath() {
      return this.DdiPath != null;
    }

    public void setDdiPathIsSet(boolean value) {
      if (!value) {
        this.DdiPath = null;
      }
    }

    public java.lang.String getEvlFilePath() {
      return this.EvlFilePath;
    }

    public ValidateDdi_args setEvlFilePath(java.lang.String EvlFilePath) {
      this.EvlFilePath = EvlFilePath;
      return this;
    }

    public void unsetEvlFilePath() {
      this.EvlFilePath = null;
    }

    /** Returns true if field EvlFilePath is set (has been assigned a value) and false otherwise */
    public boolean isSetEvlFilePath() {
      return this.EvlFilePath != null;
    }

    public void setEvlFilePathIsSet(boolean value) {
      if (!value) {
        this.EvlFilePath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DDI_PATH:
        if (value == null) {
          unsetDdiPath();
        } else {
          setDdiPath((java.lang.String)value);
        }
        break;

      case EVL_FILE_PATH:
        if (value == null) {
          unsetEvlFilePath();
        } else {
          setEvlFilePath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DDI_PATH:
        return getDdiPath();

      case EVL_FILE_PATH:
        return getEvlFilePath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DDI_PATH:
        return isSetDdiPath();
      case EVL_FILE_PATH:
        return isSetEvlFilePath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ValidateDdi_args)
        return this.equals((ValidateDdi_args)that);
      return false;
    }

    public boolean equals(ValidateDdi_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DdiPath = true && this.isSetDdiPath();
      boolean that_present_DdiPath = true && that.isSetDdiPath();
      if (this_present_DdiPath || that_present_DdiPath) {
        if (!(this_present_DdiPath && that_present_DdiPath))
          return false;
        if (!this.DdiPath.equals(that.DdiPath))
          return false;
      }

      boolean this_present_EvlFilePath = true && this.isSetEvlFilePath();
      boolean that_present_EvlFilePath = true && that.isSetEvlFilePath();
      if (this_present_EvlFilePath || that_present_EvlFilePath) {
        if (!(this_present_EvlFilePath && that_present_EvlFilePath))
          return false;
        if (!this.EvlFilePath.equals(that.EvlFilePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDdiPath()) ? 131071 : 524287);
      if (isSetDdiPath())
        hashCode = hashCode * 8191 + DdiPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetEvlFilePath()) ? 131071 : 524287);
      if (isSetEvlFilePath())
        hashCode = hashCode * 8191 + EvlFilePath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ValidateDdi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDdiPath()).compareTo(other.isSetDdiPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDdiPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DdiPath, other.DdiPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEvlFilePath()).compareTo(other.isSetEvlFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvlFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EvlFilePath, other.EvlFilePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ValidateDdi_args(");
      boolean first = true;

      sb.append("DdiPath:");
      if (this.DdiPath == null) {
        sb.append("null");
      } else {
        sb.append(this.DdiPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EvlFilePath:");
      if (this.EvlFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.EvlFilePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ValidateDdi_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ValidateDdi_argsStandardScheme getScheme() {
        return new ValidateDdi_argsStandardScheme();
      }
    }

    private static class ValidateDdi_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ValidateDdi_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ValidateDdi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DDI_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.DdiPath = iprot.readString();
                struct.setDdiPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVL_FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.EvlFilePath = iprot.readString();
                struct.setEvlFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ValidateDdi_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.DdiPath != null) {
          oprot.writeFieldBegin(DDI_PATH_FIELD_DESC);
          oprot.writeString(struct.DdiPath);
          oprot.writeFieldEnd();
        }
        if (struct.EvlFilePath != null) {
          oprot.writeFieldBegin(EVL_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.EvlFilePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ValidateDdi_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ValidateDdi_argsTupleScheme getScheme() {
        return new ValidateDdi_argsTupleScheme();
      }
    }

    private static class ValidateDdi_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ValidateDdi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ValidateDdi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDdiPath()) {
          optionals.set(0);
        }
        if (struct.isSetEvlFilePath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDdiPath()) {
          oprot.writeString(struct.DdiPath);
        }
        if (struct.isSetEvlFilePath()) {
          oprot.writeString(struct.EvlFilePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ValidateDdi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.DdiPath = iprot.readString();
          struct.setDdiPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EvlFilePath = iprot.readString();
          struct.setEvlFilePathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ValidateDdi_result implements org.apache.thrift.TBase<ValidateDdi_result, ValidateDdi_result._Fields>, java.io.Serializable, Cloneable, Comparable<ValidateDdi_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ValidateDdi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ValidateDdi_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ValidateDdi_resultTupleSchemeFactory();

    public TDDIValidationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIValidationResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ValidateDdi_result.class, metaDataMap);
    }

    public ValidateDdi_result() {
    }

    public ValidateDdi_result(
      TDDIValidationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ValidateDdi_result(ValidateDdi_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDDIValidationResult(other.success);
      }
    }

    public ValidateDdi_result deepCopy() {
      return new ValidateDdi_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TDDIValidationResult getSuccess() {
      return this.success;
    }

    public ValidateDdi_result setSuccess(TDDIValidationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDDIValidationResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ValidateDdi_result)
        return this.equals((ValidateDdi_result)that);
      return false;
    }

    public boolean equals(ValidateDdi_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ValidateDdi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ValidateDdi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ValidateDdi_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ValidateDdi_resultStandardScheme getScheme() {
        return new ValidateDdi_resultStandardScheme();
      }
    }

    private static class ValidateDdi_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ValidateDdi_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ValidateDdi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDDIValidationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ValidateDdi_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ValidateDdi_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ValidateDdi_resultTupleScheme getScheme() {
        return new ValidateDdi_resultTupleScheme();
      }
    }

    private static class ValidateDdi_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ValidateDdi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ValidateDdi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ValidateDdi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TDDIValidationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
