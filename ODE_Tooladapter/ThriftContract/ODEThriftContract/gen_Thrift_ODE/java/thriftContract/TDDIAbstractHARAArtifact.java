/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-13")
public class TDDIAbstractHARAArtifact implements org.apache.thrift.TBase<TDDIAbstractHARAArtifact, TDDIAbstractHARAArtifact._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractHARAArtifact> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractHARAArtifact");

  private static final org.apache.thrift.protocol.TField USED_HARAARTIFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedHARAArtifact", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_HARAARTIFACT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedHARAArtifactType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractHARAArtifactStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractHARAArtifactTupleSchemeFactory();

  public TDDIHARAArtifactUnion UsedHARAArtifact; // required
  /**
   * 
   * @see TDDIHARAArtifactUnionType
   */
  public TDDIHARAArtifactUnionType UsedHARAArtifactType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_HARAARTIFACT((short)1, "UsedHARAArtifact"),
    /**
     * 
     * @see TDDIHARAArtifactUnionType
     */
    USED_HARAARTIFACT_TYPE((short)2, "UsedHARAArtifactType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_HARAARTIFACT
          return USED_HARAARTIFACT;
        case 2: // USED_HARAARTIFACT_TYPE
          return USED_HARAARTIFACT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_HARAARTIFACT, new org.apache.thrift.meta_data.FieldMetaData("UsedHARAArtifact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIHARAArtifactUnion.class)));
    tmpMap.put(_Fields.USED_HARAARTIFACT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedHARAArtifactType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIHARAArtifactUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractHARAArtifact.class, metaDataMap);
  }

  public TDDIAbstractHARAArtifact() {
  }

  public TDDIAbstractHARAArtifact(
    TDDIHARAArtifactUnion UsedHARAArtifact,
    TDDIHARAArtifactUnionType UsedHARAArtifactType)
  {
    this();
    this.UsedHARAArtifact = UsedHARAArtifact;
    this.UsedHARAArtifactType = UsedHARAArtifactType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractHARAArtifact(TDDIAbstractHARAArtifact other) {
    if (other.isSetUsedHARAArtifact()) {
      this.UsedHARAArtifact = new TDDIHARAArtifactUnion(other.UsedHARAArtifact);
    }
    if (other.isSetUsedHARAArtifactType()) {
      this.UsedHARAArtifactType = other.UsedHARAArtifactType;
    }
  }

  public TDDIAbstractHARAArtifact deepCopy() {
    return new TDDIAbstractHARAArtifact(this);
  }

  @Override
  public void clear() {
    this.UsedHARAArtifact = null;
    this.UsedHARAArtifactType = null;
  }

  public TDDIHARAArtifactUnion getUsedHARAArtifact() {
    return this.UsedHARAArtifact;
  }

  public TDDIAbstractHARAArtifact setUsedHARAArtifact(TDDIHARAArtifactUnion UsedHARAArtifact) {
    this.UsedHARAArtifact = UsedHARAArtifact;
    return this;
  }

  public void unsetUsedHARAArtifact() {
    this.UsedHARAArtifact = null;
  }

  /** Returns true if field UsedHARAArtifact is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedHARAArtifact() {
    return this.UsedHARAArtifact != null;
  }

  public void setUsedHARAArtifactIsSet(boolean value) {
    if (!value) {
      this.UsedHARAArtifact = null;
    }
  }

  /**
   * 
   * @see TDDIHARAArtifactUnionType
   */
  public TDDIHARAArtifactUnionType getUsedHARAArtifactType() {
    return this.UsedHARAArtifactType;
  }

  /**
   * 
   * @see TDDIHARAArtifactUnionType
   */
  public TDDIAbstractHARAArtifact setUsedHARAArtifactType(TDDIHARAArtifactUnionType UsedHARAArtifactType) {
    this.UsedHARAArtifactType = UsedHARAArtifactType;
    return this;
  }

  public void unsetUsedHARAArtifactType() {
    this.UsedHARAArtifactType = null;
  }

  /** Returns true if field UsedHARAArtifactType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedHARAArtifactType() {
    return this.UsedHARAArtifactType != null;
  }

  public void setUsedHARAArtifactTypeIsSet(boolean value) {
    if (!value) {
      this.UsedHARAArtifactType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_HARAARTIFACT:
      if (value == null) {
        unsetUsedHARAArtifact();
      } else {
        setUsedHARAArtifact((TDDIHARAArtifactUnion)value);
      }
      break;

    case USED_HARAARTIFACT_TYPE:
      if (value == null) {
        unsetUsedHARAArtifactType();
      } else {
        setUsedHARAArtifactType((TDDIHARAArtifactUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_HARAARTIFACT:
      return getUsedHARAArtifact();

    case USED_HARAARTIFACT_TYPE:
      return getUsedHARAArtifactType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_HARAARTIFACT:
      return isSetUsedHARAArtifact();
    case USED_HARAARTIFACT_TYPE:
      return isSetUsedHARAArtifactType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractHARAArtifact)
      return this.equals((TDDIAbstractHARAArtifact)that);
    return false;
  }

  public boolean equals(TDDIAbstractHARAArtifact that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedHARAArtifact = true && this.isSetUsedHARAArtifact();
    boolean that_present_UsedHARAArtifact = true && that.isSetUsedHARAArtifact();
    if (this_present_UsedHARAArtifact || that_present_UsedHARAArtifact) {
      if (!(this_present_UsedHARAArtifact && that_present_UsedHARAArtifact))
        return false;
      if (!this.UsedHARAArtifact.equals(that.UsedHARAArtifact))
        return false;
    }

    boolean this_present_UsedHARAArtifactType = true && this.isSetUsedHARAArtifactType();
    boolean that_present_UsedHARAArtifactType = true && that.isSetUsedHARAArtifactType();
    if (this_present_UsedHARAArtifactType || that_present_UsedHARAArtifactType) {
      if (!(this_present_UsedHARAArtifactType && that_present_UsedHARAArtifactType))
        return false;
      if (!this.UsedHARAArtifactType.equals(that.UsedHARAArtifactType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedHARAArtifact()) ? 131071 : 524287);
    if (isSetUsedHARAArtifact())
      hashCode = hashCode * 8191 + UsedHARAArtifact.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedHARAArtifactType()) ? 131071 : 524287);
    if (isSetUsedHARAArtifactType())
      hashCode = hashCode * 8191 + UsedHARAArtifactType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractHARAArtifact other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedHARAArtifact()).compareTo(other.isSetUsedHARAArtifact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedHARAArtifact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedHARAArtifact, other.UsedHARAArtifact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedHARAArtifactType()).compareTo(other.isSetUsedHARAArtifactType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedHARAArtifactType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedHARAArtifactType, other.UsedHARAArtifactType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractHARAArtifact(");
    boolean first = true;

    sb.append("UsedHARAArtifact:");
    if (this.UsedHARAArtifact == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedHARAArtifact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedHARAArtifactType:");
    if (this.UsedHARAArtifactType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedHARAArtifactType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractHARAArtifactStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractHARAArtifactStandardScheme getScheme() {
      return new TDDIAbstractHARAArtifactStandardScheme();
    }
  }

  private static class TDDIAbstractHARAArtifactStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractHARAArtifact> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractHARAArtifact struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_HARAARTIFACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedHARAArtifact = new TDDIHARAArtifactUnion();
              struct.UsedHARAArtifact.read(iprot);
              struct.setUsedHARAArtifactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_HARAARTIFACT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedHARAArtifactType = thriftContract.TDDIHARAArtifactUnionType.findByValue(iprot.readI32());
              struct.setUsedHARAArtifactTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractHARAArtifact struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedHARAArtifact != null) {
        oprot.writeFieldBegin(USED_HARAARTIFACT_FIELD_DESC);
        struct.UsedHARAArtifact.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedHARAArtifactType != null) {
        oprot.writeFieldBegin(USED_HARAARTIFACT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedHARAArtifactType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractHARAArtifactTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractHARAArtifactTupleScheme getScheme() {
      return new TDDIAbstractHARAArtifactTupleScheme();
    }
  }

  private static class TDDIAbstractHARAArtifactTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractHARAArtifact> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractHARAArtifact struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedHARAArtifact()) {
        optionals.set(0);
      }
      if (struct.isSetUsedHARAArtifactType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedHARAArtifact()) {
        struct.UsedHARAArtifact.write(oprot);
      }
      if (struct.isSetUsedHARAArtifactType()) {
        oprot.writeI32(struct.UsedHARAArtifactType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractHARAArtifact struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedHARAArtifact = new TDDIHARAArtifactUnion();
        struct.UsedHARAArtifact.read(iprot);
        struct.setUsedHARAArtifactIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedHARAArtifactType = thriftContract.TDDIHARAArtifactUnionType.findByValue(iprot.readI32());
        struct.setUsedHARAArtifactTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

