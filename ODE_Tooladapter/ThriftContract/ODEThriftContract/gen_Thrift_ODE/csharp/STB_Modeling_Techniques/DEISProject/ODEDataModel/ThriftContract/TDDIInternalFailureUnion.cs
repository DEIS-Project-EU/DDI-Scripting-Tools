/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIInternalFailureUnion : TBase
  {
    private TDDIInternalFailure _InternalFailure;
    private TDDIBasicEvent _BasicEvent;
    private TDDIFMEAFailure _FMEAFailure;
    private TDDIFailState _FailState;

    public TDDIInternalFailure InternalFailure
    {
      get
      {
        return _InternalFailure;
      }
      set
      {
        __isset.InternalFailure = true;
        this._InternalFailure = value;
      }
    }

    public TDDIBasicEvent BasicEvent
    {
      get
      {
        return _BasicEvent;
      }
      set
      {
        __isset.BasicEvent = true;
        this._BasicEvent = value;
      }
    }

    public TDDIFMEAFailure FMEAFailure
    {
      get
      {
        return _FMEAFailure;
      }
      set
      {
        __isset.FMEAFailure = true;
        this._FMEAFailure = value;
      }
    }

    public TDDIFailState FailState
    {
      get
      {
        return _FailState;
      }
      set
      {
        __isset.FailState = true;
        this._FailState = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool InternalFailure;
      public bool BasicEvent;
      public bool FMEAFailure;
      public bool FailState;
    }

    public TDDIInternalFailureUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                InternalFailure = new TDDIInternalFailure();
                InternalFailure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                BasicEvent = new TDDIBasicEvent();
                BasicEvent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                FMEAFailure = new TDDIFMEAFailure();
                FMEAFailure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                FailState = new TDDIFailState();
                FailState.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIInternalFailureUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InternalFailure != null && __isset.InternalFailure) {
          field.Name = "InternalFailure";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          InternalFailure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (BasicEvent != null && __isset.BasicEvent) {
          field.Name = "BasicEvent";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          BasicEvent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FMEAFailure != null && __isset.FMEAFailure) {
          field.Name = "FMEAFailure";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          FMEAFailure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FailState != null && __isset.FailState) {
          field.Name = "FailState";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          FailState.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIInternalFailureUnion(");
      bool __first = true;
      if (InternalFailure != null && __isset.InternalFailure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InternalFailure: ");
        __sb.Append(InternalFailure== null ? "<null>" : InternalFailure.ToString());
      }
      if (BasicEvent != null && __isset.BasicEvent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BasicEvent: ");
        __sb.Append(BasicEvent);
      }
      if (FMEAFailure != null && __isset.FMEAFailure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FMEAFailure: ");
        __sb.Append(FMEAFailure);
      }
      if (FailState != null && __isset.FailState) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailState: ");
        __sb.Append(FailState);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
