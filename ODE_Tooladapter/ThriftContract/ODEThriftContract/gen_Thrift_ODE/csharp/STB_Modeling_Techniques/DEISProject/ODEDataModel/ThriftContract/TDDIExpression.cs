/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIExpression : TBase
  {
    private string _Gid;
    private bool _IsCitation;
    private bool _IsAbstract;
    private TDDIAbstractSACMElement _CitedElement;
    private TDDIAbstractSACMElement _AbstractForm;
    private TDDIAbstractLangString _Name;
    private TDDIDescription _Description;
    private List<TDDIImplementationConstraintRef> _ImplementationConstraint;
    private List<TDDINoteRef> _Note;
    private List<TDDITaggedValueRef> _TaggedValue;
    private string _Value;
    private TDDICategory _Category;
    private List<TDDIAbstractExpressionElementRef> _Element;

    public string Gid
    {
      get
      {
        return _Gid;
      }
      set
      {
        __isset.Gid = true;
        this._Gid = value;
      }
    }

    public bool IsCitation
    {
      get
      {
        return _IsCitation;
      }
      set
      {
        __isset.IsCitation = true;
        this._IsCitation = value;
      }
    }

    public bool IsAbstract
    {
      get
      {
        return _IsAbstract;
      }
      set
      {
        __isset.IsAbstract = true;
        this._IsAbstract = value;
      }
    }

    public TDDIAbstractSACMElement CitedElement
    {
      get
      {
        return _CitedElement;
      }
      set
      {
        __isset.CitedElement = true;
        this._CitedElement = value;
      }
    }

    public TDDIAbstractSACMElement AbstractForm
    {
      get
      {
        return _AbstractForm;
      }
      set
      {
        __isset.AbstractForm = true;
        this._AbstractForm = value;
      }
    }

    public TDDIAbstractLangString Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public TDDIDescription Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIImplementationConstraintRef> ImplementationConstraint
    {
      get
      {
        return _ImplementationConstraint;
      }
      set
      {
        __isset.ImplementationConstraint = true;
        this._ImplementationConstraint = value;
      }
    }

    public List<TDDINoteRef> Note
    {
      get
      {
        return _Note;
      }
      set
      {
        __isset.Note = true;
        this._Note = value;
      }
    }

    public List<TDDITaggedValueRef> TaggedValue
    {
      get
      {
        return _TaggedValue;
      }
      set
      {
        __isset.TaggedValue = true;
        this._TaggedValue = value;
      }
    }

    public string Value
    {
      get
      {
        return _Value;
      }
      set
      {
        __isset.@Value = true;
        this._Value = value;
      }
    }

    public TDDICategory Category
    {
      get
      {
        return _Category;
      }
      set
      {
        __isset.Category = true;
        this._Category = value;
      }
    }

    public List<TDDIAbstractExpressionElementRef> Element
    {
      get
      {
        return _Element;
      }
      set
      {
        __isset.Element = true;
        this._Element = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Gid;
      public bool IsCitation;
      public bool IsAbstract;
      public bool CitedElement;
      public bool AbstractForm;
      public bool Name;
      public bool Description;
      public bool ImplementationConstraint;
      public bool Note;
      public bool TaggedValue;
      public bool @Value;
      public bool Category;
      public bool Element;
    }

    public TDDIExpression() {
      this._Gid = "";
      this.__isset.Gid = true;
      this._IsCitation = false;
      this.__isset.IsCitation = true;
      this._IsAbstract = false;
      this.__isset.IsAbstract = true;
      this._ImplementationConstraint = new List<TDDIImplementationConstraintRef>();
      this.__isset.ImplementationConstraint = true;
      this._Note = new List<TDDINoteRef>();
      this.__isset.Note = true;
      this._TaggedValue = new List<TDDITaggedValueRef>();
      this.__isset.TaggedValue = true;
      this._Value = "";
      this.__isset.@Value = true;
      this._Element = new List<TDDIAbstractExpressionElementRef>();
      this.__isset.Element = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Gid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IsCitation = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IsAbstract = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                CitedElement = new TDDIAbstractSACMElement();
                CitedElement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                AbstractForm = new TDDIAbstractSACMElement();
                AbstractForm.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Name = new TDDIAbstractLangString();
                Name.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Description = new TDDIDescription();
                Description.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  ImplementationConstraint = new List<TDDIImplementationConstraintRef>();
                  TList _list1556 = iprot.ReadListBegin();
                  for( int _i1557 = 0; _i1557 < _list1556.Count; ++_i1557)
                  {
                    TDDIImplementationConstraintRef _elem1558;
                    _elem1558 = new TDDIImplementationConstraintRef();
                    _elem1558.Read(iprot);
                    ImplementationConstraint.Add(_elem1558);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Note = new List<TDDINoteRef>();
                  TList _list1559 = iprot.ReadListBegin();
                  for( int _i1560 = 0; _i1560 < _list1559.Count; ++_i1560)
                  {
                    TDDINoteRef _elem1561;
                    _elem1561 = new TDDINoteRef();
                    _elem1561.Read(iprot);
                    Note.Add(_elem1561);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  TaggedValue = new List<TDDITaggedValueRef>();
                  TList _list1562 = iprot.ReadListBegin();
                  for( int _i1563 = 0; _i1563 < _list1562.Count; ++_i1563)
                  {
                    TDDITaggedValueRef _elem1564;
                    _elem1564 = new TDDITaggedValueRef();
                    _elem1564.Read(iprot);
                    TaggedValue.Add(_elem1564);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                Category = new TDDICategory();
                Category.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.List) {
                {
                  Element = new List<TDDIAbstractExpressionElementRef>();
                  TList _list1565 = iprot.ReadListBegin();
                  for( int _i1566 = 0; _i1566 < _list1565.Count; ++_i1566)
                  {
                    TDDIAbstractExpressionElementRef _elem1567;
                    _elem1567 = new TDDIAbstractExpressionElementRef();
                    _elem1567.Read(iprot);
                    Element.Add(_elem1567);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIExpression");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Gid != null && __isset.Gid) {
          field.Name = "Gid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gid);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsCitation) {
          field.Name = "IsCitation";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsCitation);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsAbstract) {
          field.Name = "IsAbstract";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsAbstract);
          oprot.WriteFieldEnd();
        }
        if (CitedElement != null && __isset.CitedElement) {
          field.Name = "CitedElement";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          CitedElement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AbstractForm != null && __isset.AbstractForm) {
          field.Name = "AbstractForm";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          AbstractForm.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Name.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Description.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ImplementationConstraint != null && __isset.ImplementationConstraint) {
          field.Name = "ImplementationConstraint";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ImplementationConstraint.Count));
            foreach (TDDIImplementationConstraintRef _iter1568 in ImplementationConstraint)
            {
              _iter1568.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Note != null && __isset.Note) {
          field.Name = "Note";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Note.Count));
            foreach (TDDINoteRef _iter1569 in Note)
            {
              _iter1569.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (TaggedValue != null && __isset.TaggedValue) {
          field.Name = "TaggedValue";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, TaggedValue.Count));
            foreach (TDDITaggedValueRef _iter1570 in TaggedValue)
            {
              _iter1570.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@Value) {
          field.Name = "Value";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        if (Category != null && __isset.Category) {
          field.Name = "Category";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          Category.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Element != null && __isset.Element) {
          field.Name = "Element";
          field.Type = TType.List;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Element.Count));
            foreach (TDDIAbstractExpressionElementRef _iter1571 in Element)
            {
              _iter1571.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIExpression(");
      bool __first = true;
      if (Gid != null && __isset.Gid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gid: ");
        __sb.Append(Gid);
      }
      if (__isset.IsCitation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsCitation: ");
        __sb.Append(IsCitation);
      }
      if (__isset.IsAbstract) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsAbstract: ");
        __sb.Append(IsAbstract);
      }
      if (CitedElement != null && __isset.CitedElement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CitedElement: ");
        __sb.Append(CitedElement== null ? "<null>" : CitedElement.ToString());
      }
      if (AbstractForm != null && __isset.AbstractForm) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AbstractForm: ");
        __sb.Append(AbstractForm== null ? "<null>" : AbstractForm.ToString());
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name== null ? "<null>" : Name.ToString());
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description== null ? "<null>" : Description.ToString());
      }
      if (ImplementationConstraint != null && __isset.ImplementationConstraint) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImplementationConstraint: ");
        __sb.Append(ImplementationConstraint);
      }
      if (Note != null && __isset.Note) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Note: ");
        __sb.Append(Note);
      }
      if (TaggedValue != null && __isset.TaggedValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TaggedValue: ");
        __sb.Append(TaggedValue);
      }
      if (Value != null && __isset.@Value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (Category != null && __isset.Category) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Category: ");
        __sb.Append(Category== null ? "<null>" : Category.ToString());
      }
      if (Element != null && __isset.Element) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Element: ");
        __sb.Append(Element);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
