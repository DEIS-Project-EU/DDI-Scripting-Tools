/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIMarkovChainPackageBinding : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private bool _IsCitation;
    private bool _IsAbstract;
    private List<TDDIKeyValueMapRef> _KeyValueMaps;
    private TDDIAbstractBaseElement _CitedElement;
    private List<TDDIAbstractFailureAnalysisArtifactRef> _FailureAnalysisArtifacts;
    private List<TDDIAbstractMarkovArtifact> _MarkovArtifacts;
    private List<TDDIFailState> _FailStates;
    private List<TDDIAbstractMarkovChainPackageRef> _ParticipantPackages;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public bool IsCitation
    {
      get
      {
        return _IsCitation;
      }
      set
      {
        __isset.IsCitation = true;
        this._IsCitation = value;
      }
    }

    public bool IsAbstract
    {
      get
      {
        return _IsAbstract;
      }
      set
      {
        __isset.IsAbstract = true;
        this._IsAbstract = value;
      }
    }

    public List<TDDIKeyValueMapRef> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public TDDIAbstractBaseElement CitedElement
    {
      get
      {
        return _CitedElement;
      }
      set
      {
        __isset.CitedElement = true;
        this._CitedElement = value;
      }
    }

    public List<TDDIAbstractFailureAnalysisArtifactRef> FailureAnalysisArtifacts
    {
      get
      {
        return _FailureAnalysisArtifacts;
      }
      set
      {
        __isset.FailureAnalysisArtifacts = true;
        this._FailureAnalysisArtifacts = value;
      }
    }

    public List<TDDIAbstractMarkovArtifact> MarkovArtifacts
    {
      get
      {
        return _MarkovArtifacts;
      }
      set
      {
        __isset.MarkovArtifacts = true;
        this._MarkovArtifacts = value;
      }
    }

    public List<TDDIFailState> FailStates
    {
      get
      {
        return _FailStates;
      }
      set
      {
        __isset.FailStates = true;
        this._FailStates = value;
      }
    }

    public List<TDDIAbstractMarkovChainPackageRef> ParticipantPackages
    {
      get
      {
        return _ParticipantPackages;
      }
      set
      {
        __isset.ParticipantPackages = true;
        this._ParticipantPackages = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool IsCitation;
      public bool IsAbstract;
      public bool KeyValueMaps;
      public bool CitedElement;
      public bool FailureAnalysisArtifacts;
      public bool MarkovArtifacts;
      public bool FailStates;
      public bool ParticipantPackages;
    }

    public TDDIMarkovChainPackageBinding() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._IsCitation = false;
      this.__isset.IsCitation = true;
      this._IsAbstract = false;
      this.__isset.IsAbstract = true;
      this._KeyValueMaps = new List<TDDIKeyValueMapRef>();
      this.__isset.KeyValueMaps = true;
      this._FailureAnalysisArtifacts = new List<TDDIAbstractFailureAnalysisArtifactRef>();
      this.__isset.FailureAnalysisArtifacts = true;
      this._MarkovArtifacts = new List<TDDIAbstractMarkovArtifact>();
      this.__isset.MarkovArtifacts = true;
      this._FailStates = new List<TDDIFailState>();
      this.__isset.FailStates = true;
      this._ParticipantPackages = new List<TDDIAbstractMarkovChainPackageRef>();
      this.__isset.ParticipantPackages = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IsCitation = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IsAbstract = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMapRef>();
                  TList _list860 = iprot.ReadListBegin();
                  for( int _i861 = 0; _i861 < _list860.Count; ++_i861)
                  {
                    TDDIKeyValueMapRef _elem862;
                    _elem862 = new TDDIKeyValueMapRef();
                    _elem862.Read(iprot);
                    KeyValueMaps.Add(_elem862);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                CitedElement = new TDDIAbstractBaseElement();
                CitedElement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  FailureAnalysisArtifacts = new List<TDDIAbstractFailureAnalysisArtifactRef>();
                  TList _list863 = iprot.ReadListBegin();
                  for( int _i864 = 0; _i864 < _list863.Count; ++_i864)
                  {
                    TDDIAbstractFailureAnalysisArtifactRef _elem865;
                    _elem865 = new TDDIAbstractFailureAnalysisArtifactRef();
                    _elem865.Read(iprot);
                    FailureAnalysisArtifacts.Add(_elem865);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  MarkovArtifacts = new List<TDDIAbstractMarkovArtifact>();
                  TList _list866 = iprot.ReadListBegin();
                  for( int _i867 = 0; _i867 < _list866.Count; ++_i867)
                  {
                    TDDIAbstractMarkovArtifact _elem868;
                    _elem868 = new TDDIAbstractMarkovArtifact();
                    _elem868.Read(iprot);
                    MarkovArtifacts.Add(_elem868);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  FailStates = new List<TDDIFailState>();
                  TList _list869 = iprot.ReadListBegin();
                  for( int _i870 = 0; _i870 < _list869.Count; ++_i870)
                  {
                    TDDIFailState _elem871;
                    _elem871 = new TDDIFailState();
                    _elem871.Read(iprot);
                    FailStates.Add(_elem871);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  ParticipantPackages = new List<TDDIAbstractMarkovChainPackageRef>();
                  TList _list872 = iprot.ReadListBegin();
                  for( int _i873 = 0; _i873 < _list872.Count; ++_i873)
                  {
                    TDDIAbstractMarkovChainPackageRef _elem874;
                    _elem874 = new TDDIAbstractMarkovChainPackageRef();
                    _elem874.Read(iprot);
                    ParticipantPackages.Add(_elem874);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIMarkovChainPackageBinding");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsCitation) {
          field.Name = "IsCitation";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsCitation);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsAbstract) {
          field.Name = "IsAbstract";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsAbstract);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMapRef _iter875 in KeyValueMaps)
            {
              _iter875.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (CitedElement != null && __isset.CitedElement) {
          field.Name = "CitedElement";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          CitedElement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FailureAnalysisArtifacts != null && __isset.FailureAnalysisArtifacts) {
          field.Name = "FailureAnalysisArtifacts";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, FailureAnalysisArtifacts.Count));
            foreach (TDDIAbstractFailureAnalysisArtifactRef _iter876 in FailureAnalysisArtifacts)
            {
              _iter876.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (MarkovArtifacts != null && __isset.MarkovArtifacts) {
          field.Name = "MarkovArtifacts";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, MarkovArtifacts.Count));
            foreach (TDDIAbstractMarkovArtifact _iter877 in MarkovArtifacts)
            {
              _iter877.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (FailStates != null && __isset.FailStates) {
          field.Name = "FailStates";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, FailStates.Count));
            foreach (TDDIFailState _iter878 in FailStates)
            {
              _iter878.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ParticipantPackages != null && __isset.ParticipantPackages) {
          field.Name = "ParticipantPackages";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ParticipantPackages.Count));
            foreach (TDDIAbstractMarkovChainPackageRef _iter879 in ParticipantPackages)
            {
              _iter879.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIMarkovChainPackageBinding(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (__isset.IsCitation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsCitation: ");
        __sb.Append(IsCitation);
      }
      if (__isset.IsAbstract) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsAbstract: ");
        __sb.Append(IsAbstract);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (CitedElement != null && __isset.CitedElement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CitedElement: ");
        __sb.Append(CitedElement== null ? "<null>" : CitedElement.ToString());
      }
      if (FailureAnalysisArtifacts != null && __isset.FailureAnalysisArtifacts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureAnalysisArtifacts: ");
        __sb.Append(FailureAnalysisArtifacts);
      }
      if (MarkovArtifacts != null && __isset.MarkovArtifacts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MarkovArtifacts: ");
        __sb.Append(MarkovArtifacts);
      }
      if (FailStates != null && __isset.FailStates) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailStates: ");
        __sb.Append(FailStates);
      }
      if (ParticipantPackages != null && __isset.ParticipantPackages) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParticipantPackages: ");
        __sb.Append(ParticipantPackages);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
