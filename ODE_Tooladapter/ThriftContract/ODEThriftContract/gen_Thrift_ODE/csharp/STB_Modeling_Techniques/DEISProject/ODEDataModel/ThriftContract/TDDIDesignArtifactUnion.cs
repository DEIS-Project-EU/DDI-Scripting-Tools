/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIDesignArtifactUnion : TBase
  {
    private TDDIAbstractSystem _System;
    private TDDIAbstractFunction _Function;
    private TDDIConfiguration _Configuration;
    private TDDISignal _Signal;
    private TDDISystemBoundary _SystemBoundary;
    private TDDIContext _Context;
    private TDDILifecycleCondition _LifecycleCondition;
    private TDDIPort _Port;
    private TDDIPerfChars _PerfChars;
    private TDDIAbstractArchitecturePackage _ArchitecturePackage;

    public TDDIAbstractSystem System
    {
      get
      {
        return _System;
      }
      set
      {
        __isset.System = true;
        this._System = value;
      }
    }

    public TDDIAbstractFunction Function
    {
      get
      {
        return _Function;
      }
      set
      {
        __isset.Function = true;
        this._Function = value;
      }
    }

    public TDDIConfiguration Configuration
    {
      get
      {
        return _Configuration;
      }
      set
      {
        __isset.Configuration = true;
        this._Configuration = value;
      }
    }

    public TDDISignal Signal
    {
      get
      {
        return _Signal;
      }
      set
      {
        __isset.Signal = true;
        this._Signal = value;
      }
    }

    public TDDISystemBoundary SystemBoundary
    {
      get
      {
        return _SystemBoundary;
      }
      set
      {
        __isset.SystemBoundary = true;
        this._SystemBoundary = value;
      }
    }

    public TDDIContext Context
    {
      get
      {
        return _Context;
      }
      set
      {
        __isset.Context = true;
        this._Context = value;
      }
    }

    public TDDILifecycleCondition LifecycleCondition
    {
      get
      {
        return _LifecycleCondition;
      }
      set
      {
        __isset.LifecycleCondition = true;
        this._LifecycleCondition = value;
      }
    }

    public TDDIPort Port
    {
      get
      {
        return _Port;
      }
      set
      {
        __isset.Port = true;
        this._Port = value;
      }
    }

    public TDDIPerfChars PerfChars
    {
      get
      {
        return _PerfChars;
      }
      set
      {
        __isset.PerfChars = true;
        this._PerfChars = value;
      }
    }

    public TDDIAbstractArchitecturePackage ArchitecturePackage
    {
      get
      {
        return _ArchitecturePackage;
      }
      set
      {
        __isset.ArchitecturePackage = true;
        this._ArchitecturePackage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool System;
      public bool Function;
      public bool Configuration;
      public bool Signal;
      public bool SystemBoundary;
      public bool Context;
      public bool LifecycleCondition;
      public bool Port;
      public bool PerfChars;
      public bool ArchitecturePackage;
    }

    public TDDIDesignArtifactUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                System = new TDDIAbstractSystem();
                System.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Function = new TDDIAbstractFunction();
                Function.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Configuration = new TDDIConfiguration();
                Configuration.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Signal = new TDDISignal();
                Signal.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                SystemBoundary = new TDDISystemBoundary();
                SystemBoundary.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Context = new TDDIContext();
                Context.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                LifecycleCondition = new TDDILifecycleCondition();
                LifecycleCondition.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                Port = new TDDIPort();
                Port.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                PerfChars = new TDDIPerfChars();
                PerfChars.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                ArchitecturePackage = new TDDIAbstractArchitecturePackage();
                ArchitecturePackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIDesignArtifactUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (System != null && __isset.System) {
          field.Name = "System";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          System.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Function != null && __isset.Function) {
          field.Name = "Function";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Function.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Configuration != null && __isset.Configuration) {
          field.Name = "Configuration";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Configuration.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Signal != null && __isset.Signal) {
          field.Name = "Signal";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Signal.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SystemBoundary != null && __isset.SystemBoundary) {
          field.Name = "SystemBoundary";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          SystemBoundary.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Context != null && __isset.Context) {
          field.Name = "Context";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Context.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LifecycleCondition != null && __isset.LifecycleCondition) {
          field.Name = "LifecycleCondition";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          LifecycleCondition.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Port != null && __isset.Port) {
          field.Name = "Port";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          Port.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PerfChars != null && __isset.PerfChars) {
          field.Name = "PerfChars";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          PerfChars.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ArchitecturePackage != null && __isset.ArchitecturePackage) {
          field.Name = "ArchitecturePackage";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          ArchitecturePackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIDesignArtifactUnion(");
      bool __first = true;
      if (System != null && __isset.System) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("System: ");
        __sb.Append(System== null ? "<null>" : System.ToString());
      }
      if (Function != null && __isset.Function) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Function: ");
        __sb.Append(Function== null ? "<null>" : Function.ToString());
      }
      if (Configuration != null && __isset.Configuration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Configuration: ");
        __sb.Append(Configuration== null ? "<null>" : Configuration.ToString());
      }
      if (Signal != null && __isset.Signal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal: ");
        __sb.Append(Signal== null ? "<null>" : Signal.ToString());
      }
      if (SystemBoundary != null && __isset.SystemBoundary) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SystemBoundary: ");
        __sb.Append(SystemBoundary== null ? "<null>" : SystemBoundary.ToString());
      }
      if (Context != null && __isset.Context) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Context: ");
        __sb.Append(Context== null ? "<null>" : Context.ToString());
      }
      if (LifecycleCondition != null && __isset.LifecycleCondition) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LifecycleCondition: ");
        __sb.Append(LifecycleCondition== null ? "<null>" : LifecycleCondition.ToString());
      }
      if (Port != null && __isset.Port) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Port: ");
        __sb.Append(Port== null ? "<null>" : Port.ToString());
      }
      if (PerfChars != null && __isset.PerfChars) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PerfChars: ");
        __sb.Append(PerfChars== null ? "<null>" : PerfChars.ToString());
      }
      if (ArchitecturePackage != null && __isset.ArchitecturePackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ArchitecturePackage: ");
        __sb.Append(ArchitecturePackage== null ? "<null>" : ArchitecturePackage.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
