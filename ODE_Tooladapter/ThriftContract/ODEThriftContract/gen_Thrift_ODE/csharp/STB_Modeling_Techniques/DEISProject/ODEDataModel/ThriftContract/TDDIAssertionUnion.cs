/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIAssertionUnion : TBase
  {
    private TDDIClaim _Claim;
    private TDDIAbstractAssertedRelationship _AssertedRelationship;

    public TDDIClaim Claim
    {
      get
      {
        return _Claim;
      }
      set
      {
        __isset.Claim = true;
        this._Claim = value;
      }
    }

    public TDDIAbstractAssertedRelationship AssertedRelationship
    {
      get
      {
        return _AssertedRelationship;
      }
      set
      {
        __isset.AssertedRelationship = true;
        this._AssertedRelationship = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Claim;
      public bool AssertedRelationship;
    }

    public TDDIAssertionUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Claim = new TDDIClaim();
                Claim.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AssertedRelationship = new TDDIAbstractAssertedRelationship();
                AssertedRelationship.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIAssertionUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Claim != null && __isset.Claim) {
          field.Name = "Claim";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Claim.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssertedRelationship != null && __isset.AssertedRelationship) {
          field.Name = "AssertedRelationship";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AssertedRelationship.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIAssertionUnion(");
      bool __first = true;
      if (Claim != null && __isset.Claim) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Claim: ");
        __sb.Append(Claim== null ? "<null>" : Claim.ToString());
      }
      if (AssertedRelationship != null && __isset.AssertedRelationship) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssertedRelationship: ");
        __sb.Append(AssertedRelationship);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
