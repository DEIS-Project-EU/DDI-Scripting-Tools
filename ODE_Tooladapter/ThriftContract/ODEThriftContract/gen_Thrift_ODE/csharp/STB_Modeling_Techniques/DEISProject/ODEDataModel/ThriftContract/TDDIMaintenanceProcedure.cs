/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIMaintenanceProcedure : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private bool _IsCitation;
    private bool _IsAbstract;
    private List<TDDIKeyValueMapRef> _KeyValueMaps;
    private TDDIAbstractBaseElement _CitedElement;
    private string _ActivityDescription;
    private string _TechnicalDescription;
    private string _ToolSpecification;
    private int _StaffNumber;
    private string _StaffSkillLevel;
    private string _StafftrainingDescription;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public bool IsCitation
    {
      get
      {
        return _IsCitation;
      }
      set
      {
        __isset.IsCitation = true;
        this._IsCitation = value;
      }
    }

    public bool IsAbstract
    {
      get
      {
        return _IsAbstract;
      }
      set
      {
        __isset.IsAbstract = true;
        this._IsAbstract = value;
      }
    }

    public List<TDDIKeyValueMapRef> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public TDDIAbstractBaseElement CitedElement
    {
      get
      {
        return _CitedElement;
      }
      set
      {
        __isset.CitedElement = true;
        this._CitedElement = value;
      }
    }

    public string ActivityDescription
    {
      get
      {
        return _ActivityDescription;
      }
      set
      {
        __isset.ActivityDescription = true;
        this._ActivityDescription = value;
      }
    }

    public string TechnicalDescription
    {
      get
      {
        return _TechnicalDescription;
      }
      set
      {
        __isset.TechnicalDescription = true;
        this._TechnicalDescription = value;
      }
    }

    public string ToolSpecification
    {
      get
      {
        return _ToolSpecification;
      }
      set
      {
        __isset.ToolSpecification = true;
        this._ToolSpecification = value;
      }
    }

    public int StaffNumber
    {
      get
      {
        return _StaffNumber;
      }
      set
      {
        __isset.StaffNumber = true;
        this._StaffNumber = value;
      }
    }

    public string StaffSkillLevel
    {
      get
      {
        return _StaffSkillLevel;
      }
      set
      {
        __isset.StaffSkillLevel = true;
        this._StaffSkillLevel = value;
      }
    }

    public string StafftrainingDescription
    {
      get
      {
        return _StafftrainingDescription;
      }
      set
      {
        __isset.StafftrainingDescription = true;
        this._StafftrainingDescription = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool IsCitation;
      public bool IsAbstract;
      public bool KeyValueMaps;
      public bool CitedElement;
      public bool ActivityDescription;
      public bool TechnicalDescription;
      public bool ToolSpecification;
      public bool StaffNumber;
      public bool StaffSkillLevel;
      public bool StafftrainingDescription;
    }

    public TDDIMaintenanceProcedure() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._IsCitation = false;
      this.__isset.IsCitation = true;
      this._IsAbstract = false;
      this.__isset.IsAbstract = true;
      this._KeyValueMaps = new List<TDDIKeyValueMapRef>();
      this.__isset.KeyValueMaps = true;
      this._ActivityDescription = "";
      this.__isset.ActivityDescription = true;
      this._TechnicalDescription = "";
      this.__isset.TechnicalDescription = true;
      this._ToolSpecification = "";
      this.__isset.ToolSpecification = true;
      this._StaffSkillLevel = "";
      this.__isset.StaffSkillLevel = true;
      this._StafftrainingDescription = "";
      this.__isset.StafftrainingDescription = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IsCitation = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IsAbstract = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMapRef>();
                  TList _list376 = iprot.ReadListBegin();
                  for( int _i377 = 0; _i377 < _list376.Count; ++_i377)
                  {
                    TDDIKeyValueMapRef _elem378;
                    _elem378 = new TDDIKeyValueMapRef();
                    _elem378.Read(iprot);
                    KeyValueMaps.Add(_elem378);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                CitedElement = new TDDIAbstractBaseElement();
                CitedElement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                ActivityDescription = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                TechnicalDescription = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                ToolSpecification = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                StaffNumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                StaffSkillLevel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                StafftrainingDescription = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIMaintenanceProcedure");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsCitation) {
          field.Name = "IsCitation";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsCitation);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsAbstract) {
          field.Name = "IsAbstract";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsAbstract);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMapRef _iter379 in KeyValueMaps)
            {
              _iter379.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (CitedElement != null && __isset.CitedElement) {
          field.Name = "CitedElement";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          CitedElement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ActivityDescription != null && __isset.ActivityDescription) {
          field.Name = "ActivityDescription";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ActivityDescription);
          oprot.WriteFieldEnd();
        }
        if (TechnicalDescription != null && __isset.TechnicalDescription) {
          field.Name = "TechnicalDescription";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TechnicalDescription);
          oprot.WriteFieldEnd();
        }
        if (ToolSpecification != null && __isset.ToolSpecification) {
          field.Name = "ToolSpecification";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ToolSpecification);
          oprot.WriteFieldEnd();
        }
        if (__isset.StaffNumber) {
          field.Name = "StaffNumber";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(StaffNumber);
          oprot.WriteFieldEnd();
        }
        if (StaffSkillLevel != null && __isset.StaffSkillLevel) {
          field.Name = "StaffSkillLevel";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StaffSkillLevel);
          oprot.WriteFieldEnd();
        }
        if (StafftrainingDescription != null && __isset.StafftrainingDescription) {
          field.Name = "StafftrainingDescription";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StafftrainingDescription);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIMaintenanceProcedure(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (__isset.IsCitation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsCitation: ");
        __sb.Append(IsCitation);
      }
      if (__isset.IsAbstract) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsAbstract: ");
        __sb.Append(IsAbstract);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (CitedElement != null && __isset.CitedElement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CitedElement: ");
        __sb.Append(CitedElement== null ? "<null>" : CitedElement.ToString());
      }
      if (ActivityDescription != null && __isset.ActivityDescription) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActivityDescription: ");
        __sb.Append(ActivityDescription);
      }
      if (TechnicalDescription != null && __isset.TechnicalDescription) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TechnicalDescription: ");
        __sb.Append(TechnicalDescription);
      }
      if (ToolSpecification != null && __isset.ToolSpecification) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ToolSpecification: ");
        __sb.Append(ToolSpecification);
      }
      if (__isset.StaffNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StaffNumber: ");
        __sb.Append(StaffNumber);
      }
      if (StaffSkillLevel != null && __isset.StaffSkillLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StaffSkillLevel: ");
        __sb.Append(StaffSkillLevel);
      }
      if (StafftrainingDescription != null && __isset.StafftrainingDescription) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StafftrainingDescription: ");
        __sb.Append(StafftrainingDescription);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
