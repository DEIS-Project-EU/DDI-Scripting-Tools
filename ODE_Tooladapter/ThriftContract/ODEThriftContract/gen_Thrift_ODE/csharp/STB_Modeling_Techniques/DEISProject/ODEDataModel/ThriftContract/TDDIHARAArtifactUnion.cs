/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIHARAArtifactUnion : TBase
  {
    private TDDIAbstractHARAPackage _HARAPackage;
    private TDDIHazardTypeSystem _HazardTypeSystem;
    private TDDIAbstractRiskParameter _RiskParameter;
    private TDDIRiskAssessment _RiskAssessment;
    private TDDIHazardType _HazardType;
    private TDDIMalFunction _MalFunction;
    private TDDIHazard _Hazard;

    public TDDIAbstractHARAPackage HARAPackage
    {
      get
      {
        return _HARAPackage;
      }
      set
      {
        __isset.HARAPackage = true;
        this._HARAPackage = value;
      }
    }

    public TDDIHazardTypeSystem HazardTypeSystem
    {
      get
      {
        return _HazardTypeSystem;
      }
      set
      {
        __isset.HazardTypeSystem = true;
        this._HazardTypeSystem = value;
      }
    }

    public TDDIAbstractRiskParameter RiskParameter
    {
      get
      {
        return _RiskParameter;
      }
      set
      {
        __isset.RiskParameter = true;
        this._RiskParameter = value;
      }
    }

    public TDDIRiskAssessment RiskAssessment
    {
      get
      {
        return _RiskAssessment;
      }
      set
      {
        __isset.RiskAssessment = true;
        this._RiskAssessment = value;
      }
    }

    public TDDIHazardType HazardType
    {
      get
      {
        return _HazardType;
      }
      set
      {
        __isset.HazardType = true;
        this._HazardType = value;
      }
    }

    public TDDIMalFunction MalFunction
    {
      get
      {
        return _MalFunction;
      }
      set
      {
        __isset.MalFunction = true;
        this._MalFunction = value;
      }
    }

    public TDDIHazard Hazard
    {
      get
      {
        return _Hazard;
      }
      set
      {
        __isset.Hazard = true;
        this._Hazard = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool HARAPackage;
      public bool HazardTypeSystem;
      public bool RiskParameter;
      public bool RiskAssessment;
      public bool HazardType;
      public bool MalFunction;
      public bool Hazard;
    }

    public TDDIHARAArtifactUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                HARAPackage = new TDDIAbstractHARAPackage();
                HARAPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                HazardTypeSystem = new TDDIHazardTypeSystem();
                HazardTypeSystem.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                RiskParameter = new TDDIAbstractRiskParameter();
                RiskParameter.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                RiskAssessment = new TDDIRiskAssessment();
                RiskAssessment.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                HazardType = new TDDIHazardType();
                HazardType.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                MalFunction = new TDDIMalFunction();
                MalFunction.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Hazard = new TDDIHazard();
                Hazard.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIHARAArtifactUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (HARAPackage != null && __isset.HARAPackage) {
          field.Name = "HARAPackage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          HARAPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HazardTypeSystem != null && __isset.HazardTypeSystem) {
          field.Name = "HazardTypeSystem";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          HazardTypeSystem.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RiskParameter != null && __isset.RiskParameter) {
          field.Name = "RiskParameter";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          RiskParameter.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RiskAssessment != null && __isset.RiskAssessment) {
          field.Name = "RiskAssessment";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          RiskAssessment.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HazardType != null && __isset.HazardType) {
          field.Name = "HazardType";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          HazardType.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MalFunction != null && __isset.MalFunction) {
          field.Name = "MalFunction";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          MalFunction.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Hazard != null && __isset.Hazard) {
          field.Name = "Hazard";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Hazard.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIHARAArtifactUnion(");
      bool __first = true;
      if (HARAPackage != null && __isset.HARAPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HARAPackage: ");
        __sb.Append(HARAPackage);
      }
      if (HazardTypeSystem != null && __isset.HazardTypeSystem) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HazardTypeSystem: ");
        __sb.Append(HazardTypeSystem== null ? "<null>" : HazardTypeSystem.ToString());
      }
      if (RiskParameter != null && __isset.RiskParameter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RiskParameter: ");
        __sb.Append(RiskParameter== null ? "<null>" : RiskParameter.ToString());
      }
      if (RiskAssessment != null && __isset.RiskAssessment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RiskAssessment: ");
        __sb.Append(RiskAssessment== null ? "<null>" : RiskAssessment.ToString());
      }
      if (HazardType != null && __isset.HazardType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HazardType: ");
        __sb.Append(HazardType== null ? "<null>" : HazardType.ToString());
      }
      if (MalFunction != null && __isset.MalFunction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MalFunction: ");
        __sb.Append(MalFunction== null ? "<null>" : MalFunction.ToString());
      }
      if (Hazard != null && __isset.Hazard) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hazard: ");
        __sb.Append(Hazard== null ? "<null>" : Hazard.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
