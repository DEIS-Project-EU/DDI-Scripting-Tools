/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDISafetyRelatedSystem : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private bool _IsCitation;
    private bool _IsAbstract;
    private List<TDDIKeyValueMapRef> _KeyValueMaps;
    private TDDIAbstractBaseElement _CitedElement;
    private List<TDDIAbstractDependabilityRequirementRef> _DependabilityRequirements;
    private TDDIAssuranceLevel _AssuranceLevel;
    private List<TDDIAbstractSystemRef> _SubSystems;
    private double _OverallLifetime;
    private TDDITimeUnit _OverallLifetimeTimeUnit;
    private List<TDDIAbstractFunctionRef> _RealisedFunctions;
    private List<TDDIConfiguration> _Configurations;
    private List<TDDIContext> _Contexts;
    private List<TDDISystemBoundary> _SystemBoundaries;
    private List<TDDIAbstractStandardRef> _AppliedStandards;
    private List<TDDIAbstractFailureLogicPackageRef> _FailureModels;
    private List<TDDIPortRef> _Ports;
    private string _SafeState;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public bool IsCitation
    {
      get
      {
        return _IsCitation;
      }
      set
      {
        __isset.IsCitation = true;
        this._IsCitation = value;
      }
    }

    public bool IsAbstract
    {
      get
      {
        return _IsAbstract;
      }
      set
      {
        __isset.IsAbstract = true;
        this._IsAbstract = value;
      }
    }

    public List<TDDIKeyValueMapRef> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public TDDIAbstractBaseElement CitedElement
    {
      get
      {
        return _CitedElement;
      }
      set
      {
        __isset.CitedElement = true;
        this._CitedElement = value;
      }
    }

    public List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements
    {
      get
      {
        return _DependabilityRequirements;
      }
      set
      {
        __isset.DependabilityRequirements = true;
        this._DependabilityRequirements = value;
      }
    }

    public TDDIAssuranceLevel AssuranceLevel
    {
      get
      {
        return _AssuranceLevel;
      }
      set
      {
        __isset.AssuranceLevel = true;
        this._AssuranceLevel = value;
      }
    }

    public List<TDDIAbstractSystemRef> SubSystems
    {
      get
      {
        return _SubSystems;
      }
      set
      {
        __isset.SubSystems = true;
        this._SubSystems = value;
      }
    }

    public double OverallLifetime
    {
      get
      {
        return _OverallLifetime;
      }
      set
      {
        __isset.OverallLifetime = true;
        this._OverallLifetime = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TDDITimeUnit"/>
    /// </summary>
    public TDDITimeUnit OverallLifetimeTimeUnit
    {
      get
      {
        return _OverallLifetimeTimeUnit;
      }
      set
      {
        __isset.OverallLifetimeTimeUnit = true;
        this._OverallLifetimeTimeUnit = value;
      }
    }

    public List<TDDIAbstractFunctionRef> RealisedFunctions
    {
      get
      {
        return _RealisedFunctions;
      }
      set
      {
        __isset.RealisedFunctions = true;
        this._RealisedFunctions = value;
      }
    }

    public List<TDDIConfiguration> Configurations
    {
      get
      {
        return _Configurations;
      }
      set
      {
        __isset.Configurations = true;
        this._Configurations = value;
      }
    }

    public List<TDDIContext> Contexts
    {
      get
      {
        return _Contexts;
      }
      set
      {
        __isset.Contexts = true;
        this._Contexts = value;
      }
    }

    public List<TDDISystemBoundary> SystemBoundaries
    {
      get
      {
        return _SystemBoundaries;
      }
      set
      {
        __isset.SystemBoundaries = true;
        this._SystemBoundaries = value;
      }
    }

    public List<TDDIAbstractStandardRef> AppliedStandards
    {
      get
      {
        return _AppliedStandards;
      }
      set
      {
        __isset.AppliedStandards = true;
        this._AppliedStandards = value;
      }
    }

    public List<TDDIAbstractFailureLogicPackageRef> FailureModels
    {
      get
      {
        return _FailureModels;
      }
      set
      {
        __isset.FailureModels = true;
        this._FailureModels = value;
      }
    }

    public List<TDDIPortRef> Ports
    {
      get
      {
        return _Ports;
      }
      set
      {
        __isset.Ports = true;
        this._Ports = value;
      }
    }

    public string SafeState
    {
      get
      {
        return _SafeState;
      }
      set
      {
        __isset.SafeState = true;
        this._SafeState = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool IsCitation;
      public bool IsAbstract;
      public bool KeyValueMaps;
      public bool CitedElement;
      public bool DependabilityRequirements;
      public bool AssuranceLevel;
      public bool SubSystems;
      public bool OverallLifetime;
      public bool OverallLifetimeTimeUnit;
      public bool RealisedFunctions;
      public bool Configurations;
      public bool Contexts;
      public bool SystemBoundaries;
      public bool AppliedStandards;
      public bool FailureModels;
      public bool Ports;
      public bool SafeState;
    }

    public TDDISafetyRelatedSystem() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._IsCitation = false;
      this.__isset.IsCitation = true;
      this._IsAbstract = false;
      this.__isset.IsAbstract = true;
      this._KeyValueMaps = new List<TDDIKeyValueMapRef>();
      this.__isset.KeyValueMaps = true;
      this._DependabilityRequirements = new List<TDDIAbstractDependabilityRequirementRef>();
      this.__isset.DependabilityRequirements = true;
      this._SubSystems = new List<TDDIAbstractSystemRef>();
      this.__isset.SubSystems = true;
      this._OverallLifetime = 0;
      this.__isset.OverallLifetime = true;
      this._OverallLifetimeTimeUnit = TDDITimeUnit.TUHour;
      this.__isset.OverallLifetimeTimeUnit = true;
      this._RealisedFunctions = new List<TDDIAbstractFunctionRef>();
      this.__isset.RealisedFunctions = true;
      this._Configurations = new List<TDDIConfiguration>();
      this.__isset.Configurations = true;
      this._Contexts = new List<TDDIContext>();
      this.__isset.Contexts = true;
      this._SystemBoundaries = new List<TDDISystemBoundary>();
      this.__isset.SystemBoundaries = true;
      this._AppliedStandards = new List<TDDIAbstractStandardRef>();
      this.__isset.AppliedStandards = true;
      this._FailureModels = new List<TDDIAbstractFailureLogicPackageRef>();
      this.__isset.FailureModels = true;
      this._Ports = new List<TDDIPortRef>();
      this.__isset.Ports = true;
      this._SafeState = "";
      this.__isset.SafeState = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IsCitation = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IsAbstract = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMapRef>();
                  TList _list184 = iprot.ReadListBegin();
                  for( int _i185 = 0; _i185 < _list184.Count; ++_i185)
                  {
                    TDDIKeyValueMapRef _elem186;
                    _elem186 = new TDDIKeyValueMapRef();
                    _elem186.Read(iprot);
                    KeyValueMaps.Add(_elem186);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                CitedElement = new TDDIAbstractBaseElement();
                CitedElement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  DependabilityRequirements = new List<TDDIAbstractDependabilityRequirementRef>();
                  TList _list187 = iprot.ReadListBegin();
                  for( int _i188 = 0; _i188 < _list187.Count; ++_i188)
                  {
                    TDDIAbstractDependabilityRequirementRef _elem189;
                    _elem189 = new TDDIAbstractDependabilityRequirementRef();
                    _elem189.Read(iprot);
                    DependabilityRequirements.Add(_elem189);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                AssuranceLevel = new TDDIAssuranceLevel();
                AssuranceLevel.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  SubSystems = new List<TDDIAbstractSystemRef>();
                  TList _list190 = iprot.ReadListBegin();
                  for( int _i191 = 0; _i191 < _list190.Count; ++_i191)
                  {
                    TDDIAbstractSystemRef _elem192;
                    _elem192 = new TDDIAbstractSystemRef();
                    _elem192.Read(iprot);
                    SubSystems.Add(_elem192);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Double) {
                OverallLifetime = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                OverallLifetimeTimeUnit = (TDDITimeUnit)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.List) {
                {
                  RealisedFunctions = new List<TDDIAbstractFunctionRef>();
                  TList _list193 = iprot.ReadListBegin();
                  for( int _i194 = 0; _i194 < _list193.Count; ++_i194)
                  {
                    TDDIAbstractFunctionRef _elem195;
                    _elem195 = new TDDIAbstractFunctionRef();
                    _elem195.Read(iprot);
                    RealisedFunctions.Add(_elem195);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.List) {
                {
                  Configurations = new List<TDDIConfiguration>();
                  TList _list196 = iprot.ReadListBegin();
                  for( int _i197 = 0; _i197 < _list196.Count; ++_i197)
                  {
                    TDDIConfiguration _elem198;
                    _elem198 = new TDDIConfiguration();
                    _elem198.Read(iprot);
                    Configurations.Add(_elem198);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.List) {
                {
                  Contexts = new List<TDDIContext>();
                  TList _list199 = iprot.ReadListBegin();
                  for( int _i200 = 0; _i200 < _list199.Count; ++_i200)
                  {
                    TDDIContext _elem201;
                    _elem201 = new TDDIContext();
                    _elem201.Read(iprot);
                    Contexts.Add(_elem201);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.List) {
                {
                  SystemBoundaries = new List<TDDISystemBoundary>();
                  TList _list202 = iprot.ReadListBegin();
                  for( int _i203 = 0; _i203 < _list202.Count; ++_i203)
                  {
                    TDDISystemBoundary _elem204;
                    _elem204 = new TDDISystemBoundary();
                    _elem204.Read(iprot);
                    SystemBoundaries.Add(_elem204);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.List) {
                {
                  AppliedStandards = new List<TDDIAbstractStandardRef>();
                  TList _list205 = iprot.ReadListBegin();
                  for( int _i206 = 0; _i206 < _list205.Count; ++_i206)
                  {
                    TDDIAbstractStandardRef _elem207;
                    _elem207 = new TDDIAbstractStandardRef();
                    _elem207.Read(iprot);
                    AppliedStandards.Add(_elem207);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.List) {
                {
                  FailureModels = new List<TDDIAbstractFailureLogicPackageRef>();
                  TList _list208 = iprot.ReadListBegin();
                  for( int _i209 = 0; _i209 < _list208.Count; ++_i209)
                  {
                    TDDIAbstractFailureLogicPackageRef _elem210;
                    _elem210 = new TDDIAbstractFailureLogicPackageRef();
                    _elem210.Read(iprot);
                    FailureModels.Add(_elem210);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.List) {
                {
                  Ports = new List<TDDIPortRef>();
                  TList _list211 = iprot.ReadListBegin();
                  for( int _i212 = 0; _i212 < _list211.Count; ++_i212)
                  {
                    TDDIPortRef _elem213;
                    _elem213 = new TDDIPortRef();
                    _elem213.Read(iprot);
                    Ports.Add(_elem213);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                SafeState = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDISafetyRelatedSystem");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsCitation) {
          field.Name = "IsCitation";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsCitation);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsAbstract) {
          field.Name = "IsAbstract";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsAbstract);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMapRef _iter214 in KeyValueMaps)
            {
              _iter214.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (CitedElement != null && __isset.CitedElement) {
          field.Name = "CitedElement";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          CitedElement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DependabilityRequirements != null && __isset.DependabilityRequirements) {
          field.Name = "DependabilityRequirements";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, DependabilityRequirements.Count));
            foreach (TDDIAbstractDependabilityRequirementRef _iter215 in DependabilityRequirements)
            {
              _iter215.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AssuranceLevel != null && __isset.AssuranceLevel) {
          field.Name = "AssuranceLevel";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          AssuranceLevel.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SubSystems != null && __isset.SubSystems) {
          field.Name = "SubSystems";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SubSystems.Count));
            foreach (TDDIAbstractSystemRef _iter216 in SubSystems)
            {
              _iter216.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.OverallLifetime) {
          field.Name = "OverallLifetime";
          field.Type = TType.Double;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(OverallLifetime);
          oprot.WriteFieldEnd();
        }
        if (__isset.OverallLifetimeTimeUnit) {
          field.Name = "OverallLifetimeTimeUnit";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)OverallLifetimeTimeUnit);
          oprot.WriteFieldEnd();
        }
        if (RealisedFunctions != null && __isset.RealisedFunctions) {
          field.Name = "RealisedFunctions";
          field.Type = TType.List;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RealisedFunctions.Count));
            foreach (TDDIAbstractFunctionRef _iter217 in RealisedFunctions)
            {
              _iter217.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Configurations != null && __isset.Configurations) {
          field.Name = "Configurations";
          field.Type = TType.List;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Configurations.Count));
            foreach (TDDIConfiguration _iter218 in Configurations)
            {
              _iter218.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Contexts != null && __isset.Contexts) {
          field.Name = "Contexts";
          field.Type = TType.List;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Contexts.Count));
            foreach (TDDIContext _iter219 in Contexts)
            {
              _iter219.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SystemBoundaries != null && __isset.SystemBoundaries) {
          field.Name = "SystemBoundaries";
          field.Type = TType.List;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SystemBoundaries.Count));
            foreach (TDDISystemBoundary _iter220 in SystemBoundaries)
            {
              _iter220.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AppliedStandards != null && __isset.AppliedStandards) {
          field.Name = "AppliedStandards";
          field.Type = TType.List;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, AppliedStandards.Count));
            foreach (TDDIAbstractStandardRef _iter221 in AppliedStandards)
            {
              _iter221.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (FailureModels != null && __isset.FailureModels) {
          field.Name = "FailureModels";
          field.Type = TType.List;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, FailureModels.Count));
            foreach (TDDIAbstractFailureLogicPackageRef _iter222 in FailureModels)
            {
              _iter222.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Ports != null && __isset.Ports) {
          field.Name = "Ports";
          field.Type = TType.List;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Ports.Count));
            foreach (TDDIPortRef _iter223 in Ports)
            {
              _iter223.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SafeState != null && __isset.SafeState) {
          field.Name = "SafeState";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SafeState);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDISafetyRelatedSystem(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (__isset.IsCitation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsCitation: ");
        __sb.Append(IsCitation);
      }
      if (__isset.IsAbstract) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsAbstract: ");
        __sb.Append(IsAbstract);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (CitedElement != null && __isset.CitedElement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CitedElement: ");
        __sb.Append(CitedElement);
      }
      if (DependabilityRequirements != null && __isset.DependabilityRequirements) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityRequirements: ");
        __sb.Append(DependabilityRequirements);
      }
      if (AssuranceLevel != null && __isset.AssuranceLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssuranceLevel: ");
        __sb.Append(AssuranceLevel);
      }
      if (SubSystems != null && __isset.SubSystems) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SubSystems: ");
        __sb.Append(SubSystems);
      }
      if (__isset.OverallLifetime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OverallLifetime: ");
        __sb.Append(OverallLifetime);
      }
      if (__isset.OverallLifetimeTimeUnit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OverallLifetimeTimeUnit: ");
        __sb.Append(OverallLifetimeTimeUnit);
      }
      if (RealisedFunctions != null && __isset.RealisedFunctions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RealisedFunctions: ");
        __sb.Append(RealisedFunctions);
      }
      if (Configurations != null && __isset.Configurations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Configurations: ");
        __sb.Append(Configurations);
      }
      if (Contexts != null && __isset.Contexts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Contexts: ");
        __sb.Append(Contexts);
      }
      if (SystemBoundaries != null && __isset.SystemBoundaries) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SystemBoundaries: ");
        __sb.Append(SystemBoundaries);
      }
      if (AppliedStandards != null && __isset.AppliedStandards) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppliedStandards: ");
        __sb.Append(AppliedStandards);
      }
      if (FailureModels != null && __isset.FailureModels) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureModels: ");
        __sb.Append(FailureModels);
      }
      if (Ports != null && __isset.Ports) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ports: ");
        __sb.Append(Ports);
      }
      if (SafeState != null && __isset.SafeState) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SafeState: ");
        __sb.Append(SafeState);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
