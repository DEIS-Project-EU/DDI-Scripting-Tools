/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIFailureAnalysisArtifactUnion : TBase
  {
    private TDDIAbstractFailureLogicPackage _FailureLogicPackage;
    private TDDIMinimalCutset _MinimalCutset;
    private TDDIInterfaceFailurePropagation _InterfaceFailurePropagation;
    private TDDIAbstractFailure _Failure;
    private TDDIFailureMode _FailureMode;
    private TDDIProbabilityDistribution _ProbabilityDistribution;
    private TDDIProbDistParam _ProbDistParam;
    private TDDIAbstractFTAArtifact _FTAArtifact;
    private TDDIAbstractFMEAArtifact _FMEAArtifact;
    private TDDIAbstractMarkovArtifact _MarkovArtifact;

    public TDDIAbstractFailureLogicPackage FailureLogicPackage
    {
      get
      {
        return _FailureLogicPackage;
      }
      set
      {
        __isset.FailureLogicPackage = true;
        this._FailureLogicPackage = value;
      }
    }

    public TDDIMinimalCutset MinimalCutset
    {
      get
      {
        return _MinimalCutset;
      }
      set
      {
        __isset.MinimalCutset = true;
        this._MinimalCutset = value;
      }
    }

    public TDDIInterfaceFailurePropagation InterfaceFailurePropagation
    {
      get
      {
        return _InterfaceFailurePropagation;
      }
      set
      {
        __isset.InterfaceFailurePropagation = true;
        this._InterfaceFailurePropagation = value;
      }
    }

    public TDDIAbstractFailure Failure
    {
      get
      {
        return _Failure;
      }
      set
      {
        __isset.Failure = true;
        this._Failure = value;
      }
    }

    public TDDIFailureMode FailureMode
    {
      get
      {
        return _FailureMode;
      }
      set
      {
        __isset.FailureMode = true;
        this._FailureMode = value;
      }
    }

    public TDDIProbabilityDistribution ProbabilityDistribution
    {
      get
      {
        return _ProbabilityDistribution;
      }
      set
      {
        __isset.ProbabilityDistribution = true;
        this._ProbabilityDistribution = value;
      }
    }

    public TDDIProbDistParam ProbDistParam
    {
      get
      {
        return _ProbDistParam;
      }
      set
      {
        __isset.ProbDistParam = true;
        this._ProbDistParam = value;
      }
    }

    public TDDIAbstractFTAArtifact FTAArtifact
    {
      get
      {
        return _FTAArtifact;
      }
      set
      {
        __isset.FTAArtifact = true;
        this._FTAArtifact = value;
      }
    }

    public TDDIAbstractFMEAArtifact FMEAArtifact
    {
      get
      {
        return _FMEAArtifact;
      }
      set
      {
        __isset.FMEAArtifact = true;
        this._FMEAArtifact = value;
      }
    }

    public TDDIAbstractMarkovArtifact MarkovArtifact
    {
      get
      {
        return _MarkovArtifact;
      }
      set
      {
        __isset.MarkovArtifact = true;
        this._MarkovArtifact = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool FailureLogicPackage;
      public bool MinimalCutset;
      public bool InterfaceFailurePropagation;
      public bool Failure;
      public bool FailureMode;
      public bool ProbabilityDistribution;
      public bool ProbDistParam;
      public bool FTAArtifact;
      public bool FMEAArtifact;
      public bool MarkovArtifact;
    }

    public TDDIFailureAnalysisArtifactUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                FailureLogicPackage = new TDDIAbstractFailureLogicPackage();
                FailureLogicPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                MinimalCutset = new TDDIMinimalCutset();
                MinimalCutset.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                InterfaceFailurePropagation = new TDDIInterfaceFailurePropagation();
                InterfaceFailurePropagation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Failure = new TDDIAbstractFailure();
                Failure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                FailureMode = new TDDIFailureMode();
                FailureMode.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                ProbabilityDistribution = new TDDIProbabilityDistribution();
                ProbabilityDistribution.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                ProbDistParam = new TDDIProbDistParam();
                ProbDistParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                FTAArtifact = new TDDIAbstractFTAArtifact();
                FTAArtifact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                FMEAArtifact = new TDDIAbstractFMEAArtifact();
                FMEAArtifact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                MarkovArtifact = new TDDIAbstractMarkovArtifact();
                MarkovArtifact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIFailureAnalysisArtifactUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FailureLogicPackage != null && __isset.FailureLogicPackage) {
          field.Name = "FailureLogicPackage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          FailureLogicPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MinimalCutset != null && __isset.MinimalCutset) {
          field.Name = "MinimalCutset";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          MinimalCutset.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (InterfaceFailurePropagation != null && __isset.InterfaceFailurePropagation) {
          field.Name = "InterfaceFailurePropagation";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          InterfaceFailurePropagation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Failure != null && __isset.Failure) {
          field.Name = "Failure";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Failure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FailureMode != null && __isset.FailureMode) {
          field.Name = "FailureMode";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          FailureMode.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ProbabilityDistribution != null && __isset.ProbabilityDistribution) {
          field.Name = "ProbabilityDistribution";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          ProbabilityDistribution.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ProbDistParam != null && __isset.ProbDistParam) {
          field.Name = "ProbDistParam";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          ProbDistParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FTAArtifact != null && __isset.FTAArtifact) {
          field.Name = "FTAArtifact";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          FTAArtifact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FMEAArtifact != null && __isset.FMEAArtifact) {
          field.Name = "FMEAArtifact";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          FMEAArtifact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MarkovArtifact != null && __isset.MarkovArtifact) {
          field.Name = "MarkovArtifact";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          MarkovArtifact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIFailureAnalysisArtifactUnion(");
      bool __first = true;
      if (FailureLogicPackage != null && __isset.FailureLogicPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureLogicPackage: ");
        __sb.Append(FailureLogicPackage);
      }
      if (MinimalCutset != null && __isset.MinimalCutset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MinimalCutset: ");
        __sb.Append(MinimalCutset== null ? "<null>" : MinimalCutset.ToString());
      }
      if (InterfaceFailurePropagation != null && __isset.InterfaceFailurePropagation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InterfaceFailurePropagation: ");
        __sb.Append(InterfaceFailurePropagation== null ? "<null>" : InterfaceFailurePropagation.ToString());
      }
      if (Failure != null && __isset.Failure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Failure: ");
        __sb.Append(Failure== null ? "<null>" : Failure.ToString());
      }
      if (FailureMode != null && __isset.FailureMode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureMode: ");
        __sb.Append(FailureMode== null ? "<null>" : FailureMode.ToString());
      }
      if (ProbabilityDistribution != null && __isset.ProbabilityDistribution) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProbabilityDistribution: ");
        __sb.Append(ProbabilityDistribution== null ? "<null>" : ProbabilityDistribution.ToString());
      }
      if (ProbDistParam != null && __isset.ProbDistParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProbDistParam: ");
        __sb.Append(ProbDistParam== null ? "<null>" : ProbDistParam.ToString());
      }
      if (FTAArtifact != null && __isset.FTAArtifact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FTAArtifact: ");
        __sb.Append(FTAArtifact);
      }
      if (FMEAArtifact != null && __isset.FMEAArtifact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FMEAArtifact: ");
        __sb.Append(FMEAArtifact);
      }
      if (MarkovArtifact != null && __isset.MarkovArtifact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MarkovArtifact: ");
        __sb.Append(MarkovArtifact);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
