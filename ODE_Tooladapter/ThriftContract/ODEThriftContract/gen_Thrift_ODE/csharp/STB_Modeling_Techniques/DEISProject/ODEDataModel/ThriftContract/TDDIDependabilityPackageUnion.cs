/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIDependabilityPackageUnion : TBase
  {
    private TDDIDependabilityPackage _DependabilityPackage;
    private TDDIDependabilityPackageInterface _DependabilityPackageInterface;
    private TDDIDependabilityPackageBinding _DependabilityPackageBinding;

    public TDDIDependabilityPackage DependabilityPackage
    {
      get
      {
        return _DependabilityPackage;
      }
      set
      {
        __isset.DependabilityPackage = true;
        this._DependabilityPackage = value;
      }
    }

    public TDDIDependabilityPackageInterface DependabilityPackageInterface
    {
      get
      {
        return _DependabilityPackageInterface;
      }
      set
      {
        __isset.DependabilityPackageInterface = true;
        this._DependabilityPackageInterface = value;
      }
    }

    public TDDIDependabilityPackageBinding DependabilityPackageBinding
    {
      get
      {
        return _DependabilityPackageBinding;
      }
      set
      {
        __isset.DependabilityPackageBinding = true;
        this._DependabilityPackageBinding = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool DependabilityPackage;
      public bool DependabilityPackageInterface;
      public bool DependabilityPackageBinding;
    }

    public TDDIDependabilityPackageUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DependabilityPackage = new TDDIDependabilityPackage();
                DependabilityPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                DependabilityPackageInterface = new TDDIDependabilityPackageInterface();
                DependabilityPackageInterface.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                DependabilityPackageBinding = new TDDIDependabilityPackageBinding();
                DependabilityPackageBinding.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIDependabilityPackageUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DependabilityPackage != null && __isset.DependabilityPackage) {
          field.Name = "DependabilityPackage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DependabilityPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DependabilityPackageInterface != null && __isset.DependabilityPackageInterface) {
          field.Name = "DependabilityPackageInterface";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          DependabilityPackageInterface.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DependabilityPackageBinding != null && __isset.DependabilityPackageBinding) {
          field.Name = "DependabilityPackageBinding";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          DependabilityPackageBinding.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIDependabilityPackageUnion(");
      bool __first = true;
      if (DependabilityPackage != null && __isset.DependabilityPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityPackage: ");
        __sb.Append(DependabilityPackage);
      }
      if (DependabilityPackageInterface != null && __isset.DependabilityPackageInterface) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityPackageInterface: ");
        __sb.Append(DependabilityPackageInterface);
      }
      if (DependabilityPackageBinding != null && __isset.DependabilityPackageBinding) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityPackageBinding: ");
        __sb.Append(DependabilityPackageBinding);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
