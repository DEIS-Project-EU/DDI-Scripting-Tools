/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIFailureLogicPackageUnion : TBase
  {
    private TDDIFailureLogicPackage _FailureLogicPackage;
    private TDDIFailureLogicPackageInterface _FailureLogicPackageInterface;
    private TDDIFailureLogicPackageBinding _FailureLogicPackageBinding;
    private TDDIAbstractFTAPackage _FTAPackage;
    private TDDIAbstractFMEAPackage _FMEAPackage;
    private TDDIAbstractMarkovChainPackage _MarkovChainPackage;

    public TDDIFailureLogicPackage FailureLogicPackage
    {
      get
      {
        return _FailureLogicPackage;
      }
      set
      {
        __isset.FailureLogicPackage = true;
        this._FailureLogicPackage = value;
      }
    }

    public TDDIFailureLogicPackageInterface FailureLogicPackageInterface
    {
      get
      {
        return _FailureLogicPackageInterface;
      }
      set
      {
        __isset.FailureLogicPackageInterface = true;
        this._FailureLogicPackageInterface = value;
      }
    }

    public TDDIFailureLogicPackageBinding FailureLogicPackageBinding
    {
      get
      {
        return _FailureLogicPackageBinding;
      }
      set
      {
        __isset.FailureLogicPackageBinding = true;
        this._FailureLogicPackageBinding = value;
      }
    }

    public TDDIAbstractFTAPackage FTAPackage
    {
      get
      {
        return _FTAPackage;
      }
      set
      {
        __isset.FTAPackage = true;
        this._FTAPackage = value;
      }
    }

    public TDDIAbstractFMEAPackage FMEAPackage
    {
      get
      {
        return _FMEAPackage;
      }
      set
      {
        __isset.FMEAPackage = true;
        this._FMEAPackage = value;
      }
    }

    public TDDIAbstractMarkovChainPackage MarkovChainPackage
    {
      get
      {
        return _MarkovChainPackage;
      }
      set
      {
        __isset.MarkovChainPackage = true;
        this._MarkovChainPackage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool FailureLogicPackage;
      public bool FailureLogicPackageInterface;
      public bool FailureLogicPackageBinding;
      public bool FTAPackage;
      public bool FMEAPackage;
      public bool MarkovChainPackage;
    }

    public TDDIFailureLogicPackageUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                FailureLogicPackage = new TDDIFailureLogicPackage();
                FailureLogicPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                FailureLogicPackageInterface = new TDDIFailureLogicPackageInterface();
                FailureLogicPackageInterface.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                FailureLogicPackageBinding = new TDDIFailureLogicPackageBinding();
                FailureLogicPackageBinding.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                FTAPackage = new TDDIAbstractFTAPackage();
                FTAPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                FMEAPackage = new TDDIAbstractFMEAPackage();
                FMEAPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                MarkovChainPackage = new TDDIAbstractMarkovChainPackage();
                MarkovChainPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIFailureLogicPackageUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FailureLogicPackage != null && __isset.FailureLogicPackage) {
          field.Name = "FailureLogicPackage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          FailureLogicPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FailureLogicPackageInterface != null && __isset.FailureLogicPackageInterface) {
          field.Name = "FailureLogicPackageInterface";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          FailureLogicPackageInterface.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FailureLogicPackageBinding != null && __isset.FailureLogicPackageBinding) {
          field.Name = "FailureLogicPackageBinding";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          FailureLogicPackageBinding.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FTAPackage != null && __isset.FTAPackage) {
          field.Name = "FTAPackage";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          FTAPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FMEAPackage != null && __isset.FMEAPackage) {
          field.Name = "FMEAPackage";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          FMEAPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MarkovChainPackage != null && __isset.MarkovChainPackage) {
          field.Name = "MarkovChainPackage";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          MarkovChainPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIFailureLogicPackageUnion(");
      bool __first = true;
      if (FailureLogicPackage != null && __isset.FailureLogicPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureLogicPackage: ");
        __sb.Append(FailureLogicPackage== null ? "<null>" : FailureLogicPackage.ToString());
      }
      if (FailureLogicPackageInterface != null && __isset.FailureLogicPackageInterface) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureLogicPackageInterface: ");
        __sb.Append(FailureLogicPackageInterface== null ? "<null>" : FailureLogicPackageInterface.ToString());
      }
      if (FailureLogicPackageBinding != null && __isset.FailureLogicPackageBinding) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureLogicPackageBinding: ");
        __sb.Append(FailureLogicPackageBinding== null ? "<null>" : FailureLogicPackageBinding.ToString());
      }
      if (FTAPackage != null && __isset.FTAPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FTAPackage: ");
        __sb.Append(FTAPackage);
      }
      if (FMEAPackage != null && __isset.FMEAPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FMEAPackage: ");
        __sb.Append(FMEAPackage);
      }
      if (MarkovChainPackage != null && __isset.MarkovChainPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MarkovChainPackage: ");
        __sb.Append(MarkovChainPackage);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
