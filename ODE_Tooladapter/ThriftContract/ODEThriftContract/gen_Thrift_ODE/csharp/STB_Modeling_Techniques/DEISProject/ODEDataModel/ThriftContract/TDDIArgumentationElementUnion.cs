/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIArgumentationElementUnion : TBase
  {
    private TDDIArgumentGroup _ArgumentGroup;
    private TDDIAbstractArgumentPackage _ArgumentPackage;
    private TDDIAbstractArgumentAsset _ArgumentAsset;

    public TDDIArgumentGroup ArgumentGroup
    {
      get
      {
        return _ArgumentGroup;
      }
      set
      {
        __isset.ArgumentGroup = true;
        this._ArgumentGroup = value;
      }
    }

    public TDDIAbstractArgumentPackage ArgumentPackage
    {
      get
      {
        return _ArgumentPackage;
      }
      set
      {
        __isset.ArgumentPackage = true;
        this._ArgumentPackage = value;
      }
    }

    public TDDIAbstractArgumentAsset ArgumentAsset
    {
      get
      {
        return _ArgumentAsset;
      }
      set
      {
        __isset.ArgumentAsset = true;
        this._ArgumentAsset = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ArgumentGroup;
      public bool ArgumentPackage;
      public bool ArgumentAsset;
    }

    public TDDIArgumentationElementUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ArgumentGroup = new TDDIArgumentGroup();
                ArgumentGroup.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                ArgumentPackage = new TDDIAbstractArgumentPackage();
                ArgumentPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                ArgumentAsset = new TDDIAbstractArgumentAsset();
                ArgumentAsset.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIArgumentationElementUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ArgumentGroup != null && __isset.ArgumentGroup) {
          field.Name = "ArgumentGroup";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ArgumentGroup.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ArgumentPackage != null && __isset.ArgumentPackage) {
          field.Name = "ArgumentPackage";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          ArgumentPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ArgumentAsset != null && __isset.ArgumentAsset) {
          field.Name = "ArgumentAsset";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          ArgumentAsset.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIArgumentationElementUnion(");
      bool __first = true;
      if (ArgumentGroup != null && __isset.ArgumentGroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ArgumentGroup: ");
        __sb.Append(ArgumentGroup);
      }
      if (ArgumentPackage != null && __isset.ArgumentPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ArgumentPackage: ");
        __sb.Append(ArgumentPackage);
      }
      if (ArgumentAsset != null && __isset.ArgumentAsset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ArgumentAsset: ");
        __sb.Append(ArgumentAsset);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
