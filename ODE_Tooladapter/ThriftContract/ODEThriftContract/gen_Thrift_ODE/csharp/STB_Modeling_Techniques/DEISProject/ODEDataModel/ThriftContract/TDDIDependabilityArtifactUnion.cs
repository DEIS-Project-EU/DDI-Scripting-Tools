/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIDependabilityArtifactUnion : TBase
  {
    private TDDIAbstractDependabilityPackage _DependabilityPackage;
    private TDDIAbstractMeasure _Measure;
    private TDDIMeasureType _MeasureType;
    private TDDIMaintenanceProcedure _MaintenanceProcedure;
    private TDDIAbstractDomainElement _DomainElement;
    private TDDIAbstractRequirementArtifact _RequirementArtifact;
    private TDDIAbstractHARAArtifact _HARAArtifact;

    public TDDIAbstractDependabilityPackage DependabilityPackage
    {
      get
      {
        return _DependabilityPackage;
      }
      set
      {
        __isset.DependabilityPackage = true;
        this._DependabilityPackage = value;
      }
    }

    public TDDIAbstractMeasure Measure
    {
      get
      {
        return _Measure;
      }
      set
      {
        __isset.Measure = true;
        this._Measure = value;
      }
    }

    public TDDIMeasureType MeasureType
    {
      get
      {
        return _MeasureType;
      }
      set
      {
        __isset.MeasureType = true;
        this._MeasureType = value;
      }
    }

    public TDDIMaintenanceProcedure MaintenanceProcedure
    {
      get
      {
        return _MaintenanceProcedure;
      }
      set
      {
        __isset.MaintenanceProcedure = true;
        this._MaintenanceProcedure = value;
      }
    }

    public TDDIAbstractDomainElement DomainElement
    {
      get
      {
        return _DomainElement;
      }
      set
      {
        __isset.DomainElement = true;
        this._DomainElement = value;
      }
    }

    public TDDIAbstractRequirementArtifact RequirementArtifact
    {
      get
      {
        return _RequirementArtifact;
      }
      set
      {
        __isset.RequirementArtifact = true;
        this._RequirementArtifact = value;
      }
    }

    public TDDIAbstractHARAArtifact HARAArtifact
    {
      get
      {
        return _HARAArtifact;
      }
      set
      {
        __isset.HARAArtifact = true;
        this._HARAArtifact = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool DependabilityPackage;
      public bool Measure;
      public bool MeasureType;
      public bool MaintenanceProcedure;
      public bool DomainElement;
      public bool RequirementArtifact;
      public bool HARAArtifact;
    }

    public TDDIDependabilityArtifactUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DependabilityPackage = new TDDIAbstractDependabilityPackage();
                DependabilityPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Measure = new TDDIAbstractMeasure();
                Measure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                MeasureType = new TDDIMeasureType();
                MeasureType.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                MaintenanceProcedure = new TDDIMaintenanceProcedure();
                MaintenanceProcedure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DomainElement = new TDDIAbstractDomainElement();
                DomainElement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                RequirementArtifact = new TDDIAbstractRequirementArtifact();
                RequirementArtifact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                HARAArtifact = new TDDIAbstractHARAArtifact();
                HARAArtifact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIDependabilityArtifactUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DependabilityPackage != null && __isset.DependabilityPackage) {
          field.Name = "DependabilityPackage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DependabilityPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Measure != null && __isset.Measure) {
          field.Name = "Measure";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Measure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MeasureType != null && __isset.MeasureType) {
          field.Name = "MeasureType";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          MeasureType.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MaintenanceProcedure != null && __isset.MaintenanceProcedure) {
          field.Name = "MaintenanceProcedure";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          MaintenanceProcedure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DomainElement != null && __isset.DomainElement) {
          field.Name = "DomainElement";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DomainElement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RequirementArtifact != null && __isset.RequirementArtifact) {
          field.Name = "RequirementArtifact";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          RequirementArtifact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HARAArtifact != null && __isset.HARAArtifact) {
          field.Name = "HARAArtifact";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          HARAArtifact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIDependabilityArtifactUnion(");
      bool __first = true;
      if (DependabilityPackage != null && __isset.DependabilityPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityPackage: ");
        __sb.Append(DependabilityPackage== null ? "<null>" : DependabilityPackage.ToString());
      }
      if (Measure != null && __isset.Measure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Measure: ");
        __sb.Append(Measure== null ? "<null>" : Measure.ToString());
      }
      if (MeasureType != null && __isset.MeasureType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MeasureType: ");
        __sb.Append(MeasureType== null ? "<null>" : MeasureType.ToString());
      }
      if (MaintenanceProcedure != null && __isset.MaintenanceProcedure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaintenanceProcedure: ");
        __sb.Append(MaintenanceProcedure== null ? "<null>" : MaintenanceProcedure.ToString());
      }
      if (DomainElement != null && __isset.DomainElement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DomainElement: ");
        __sb.Append(DomainElement);
      }
      if (RequirementArtifact != null && __isset.RequirementArtifact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementArtifact: ");
        __sb.Append(RequirementArtifact);
      }
      if (HARAArtifact != null && __isset.HARAArtifact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HARAArtifact: ");
        __sb.Append(HARAArtifact);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
