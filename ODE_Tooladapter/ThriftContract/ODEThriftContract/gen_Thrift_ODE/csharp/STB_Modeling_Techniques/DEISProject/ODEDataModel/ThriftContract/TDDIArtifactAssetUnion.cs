/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIArtifactAssetUnion : TBase
  {
    private TDDIProperty _Property;
    private TDDITechnique _Technique;
    private TDDIParticipant _Participant;
    private TDDIActivity _Activity;
    private TDDIEvent _Event;
    private TDDIResource _Resource;
    private TDDIArtifact _Artifact;
    private TDDIArtifactAssetRelationship _ArtifactAssetRelationship;

    public TDDIProperty Property
    {
      get
      {
        return _Property;
      }
      set
      {
        __isset.Property = true;
        this._Property = value;
      }
    }

    public TDDITechnique Technique
    {
      get
      {
        return _Technique;
      }
      set
      {
        __isset.Technique = true;
        this._Technique = value;
      }
    }

    public TDDIParticipant Participant
    {
      get
      {
        return _Participant;
      }
      set
      {
        __isset.Participant = true;
        this._Participant = value;
      }
    }

    public TDDIActivity Activity
    {
      get
      {
        return _Activity;
      }
      set
      {
        __isset.Activity = true;
        this._Activity = value;
      }
    }

    public TDDIEvent Event
    {
      get
      {
        return _Event;
      }
      set
      {
        __isset.@Event = true;
        this._Event = value;
      }
    }

    public TDDIResource Resource
    {
      get
      {
        return _Resource;
      }
      set
      {
        __isset.Resource = true;
        this._Resource = value;
      }
    }

    public TDDIArtifact Artifact
    {
      get
      {
        return _Artifact;
      }
      set
      {
        __isset.Artifact = true;
        this._Artifact = value;
      }
    }

    public TDDIArtifactAssetRelationship ArtifactAssetRelationship
    {
      get
      {
        return _ArtifactAssetRelationship;
      }
      set
      {
        __isset.ArtifactAssetRelationship = true;
        this._ArtifactAssetRelationship = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Property;
      public bool Technique;
      public bool Participant;
      public bool Activity;
      public bool @Event;
      public bool Resource;
      public bool Artifact;
      public bool ArtifactAssetRelationship;
    }

    public TDDIArtifactAssetUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Property = new TDDIProperty();
                Property.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Technique = new TDDITechnique();
                Technique.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Participant = new TDDIParticipant();
                Participant.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Activity = new TDDIActivity();
                Activity.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Event = new TDDIEvent();
                Event.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Resource = new TDDIResource();
                Resource.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Artifact = new TDDIArtifact();
                Artifact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                ArtifactAssetRelationship = new TDDIArtifactAssetRelationship();
                ArtifactAssetRelationship.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIArtifactAssetUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Property != null && __isset.Property) {
          field.Name = "Property";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Property.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Technique != null && __isset.Technique) {
          field.Name = "Technique";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Technique.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Participant != null && __isset.Participant) {
          field.Name = "Participant";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Participant.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Activity != null && __isset.Activity) {
          field.Name = "Activity";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Activity.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Event != null && __isset.@Event) {
          field.Name = "Event";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Event.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Resource != null && __isset.Resource) {
          field.Name = "Resource";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Resource.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Artifact != null && __isset.Artifact) {
          field.Name = "Artifact";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Artifact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ArtifactAssetRelationship != null && __isset.ArtifactAssetRelationship) {
          field.Name = "ArtifactAssetRelationship";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          ArtifactAssetRelationship.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIArtifactAssetUnion(");
      bool __first = true;
      if (Property != null && __isset.Property) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Property: ");
        __sb.Append(Property== null ? "<null>" : Property.ToString());
      }
      if (Technique != null && __isset.Technique) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Technique: ");
        __sb.Append(Technique== null ? "<null>" : Technique.ToString());
      }
      if (Participant != null && __isset.Participant) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Participant: ");
        __sb.Append(Participant== null ? "<null>" : Participant.ToString());
      }
      if (Activity != null && __isset.Activity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Activity: ");
        __sb.Append(Activity== null ? "<null>" : Activity.ToString());
      }
      if (Event != null && __isset.@Event) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Event: ");
        __sb.Append(Event== null ? "<null>" : Event.ToString());
      }
      if (Resource != null && __isset.Resource) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Resource: ");
        __sb.Append(Resource== null ? "<null>" : Resource.ToString());
      }
      if (Artifact != null && __isset.Artifact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Artifact: ");
        __sb.Append(Artifact== null ? "<null>" : Artifact.ToString());
      }
      if (ArtifactAssetRelationship != null && __isset.ArtifactAssetRelationship) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ArtifactAssetRelationship: ");
        __sb.Append(ArtifactAssetRelationship== null ? "<null>" : ArtifactAssetRelationship.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
