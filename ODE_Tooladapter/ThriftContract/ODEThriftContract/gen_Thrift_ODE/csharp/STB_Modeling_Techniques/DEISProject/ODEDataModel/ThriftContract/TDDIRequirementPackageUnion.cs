/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIRequirementPackageUnion : TBase
  {
    private TDDIRequirementPackage _RequirementPackage;
    private TDDIRequirementPackageInterface _RequirementPackageInterface;
    private TDDIRequirementPackageBinding _RequirementPackageBinding;

    public TDDIRequirementPackage RequirementPackage
    {
      get
      {
        return _RequirementPackage;
      }
      set
      {
        __isset.RequirementPackage = true;
        this._RequirementPackage = value;
      }
    }

    public TDDIRequirementPackageInterface RequirementPackageInterface
    {
      get
      {
        return _RequirementPackageInterface;
      }
      set
      {
        __isset.RequirementPackageInterface = true;
        this._RequirementPackageInterface = value;
      }
    }

    public TDDIRequirementPackageBinding RequirementPackageBinding
    {
      get
      {
        return _RequirementPackageBinding;
      }
      set
      {
        __isset.RequirementPackageBinding = true;
        this._RequirementPackageBinding = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool RequirementPackage;
      public bool RequirementPackageInterface;
      public bool RequirementPackageBinding;
    }

    public TDDIRequirementPackageUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RequirementPackage = new TDDIRequirementPackage();
                RequirementPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                RequirementPackageInterface = new TDDIRequirementPackageInterface();
                RequirementPackageInterface.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                RequirementPackageBinding = new TDDIRequirementPackageBinding();
                RequirementPackageBinding.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIRequirementPackageUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RequirementPackage != null && __isset.RequirementPackage) {
          field.Name = "RequirementPackage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RequirementPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RequirementPackageInterface != null && __isset.RequirementPackageInterface) {
          field.Name = "RequirementPackageInterface";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          RequirementPackageInterface.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RequirementPackageBinding != null && __isset.RequirementPackageBinding) {
          field.Name = "RequirementPackageBinding";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          RequirementPackageBinding.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIRequirementPackageUnion(");
      bool __first = true;
      if (RequirementPackage != null && __isset.RequirementPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementPackage: ");
        __sb.Append(RequirementPackage);
      }
      if (RequirementPackageInterface != null && __isset.RequirementPackageInterface) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementPackageInterface: ");
        __sb.Append(RequirementPackageInterface);
      }
      if (RequirementPackageBinding != null && __isset.RequirementPackageBinding) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementPackageBinding: ");
        __sb.Append(RequirementPackageBinding);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
