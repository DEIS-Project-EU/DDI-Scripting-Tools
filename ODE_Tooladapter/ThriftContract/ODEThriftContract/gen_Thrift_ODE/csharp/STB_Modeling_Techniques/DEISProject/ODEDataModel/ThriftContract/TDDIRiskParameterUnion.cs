/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIRiskParameterUnion : TBase
  {
    private TDDIRiskParameter _RiskParameter;
    private TDDISituation _Situation;
    private TDDIAccident _Accident;
    private TDDIOperationMeasure _OperationMeasure;

    public TDDIRiskParameter RiskParameter
    {
      get
      {
        return _RiskParameter;
      }
      set
      {
        __isset.RiskParameter = true;
        this._RiskParameter = value;
      }
    }

    public TDDISituation Situation
    {
      get
      {
        return _Situation;
      }
      set
      {
        __isset.Situation = true;
        this._Situation = value;
      }
    }

    public TDDIAccident Accident
    {
      get
      {
        return _Accident;
      }
      set
      {
        __isset.Accident = true;
        this._Accident = value;
      }
    }

    public TDDIOperationMeasure OperationMeasure
    {
      get
      {
        return _OperationMeasure;
      }
      set
      {
        __isset.OperationMeasure = true;
        this._OperationMeasure = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool RiskParameter;
      public bool Situation;
      public bool Accident;
      public bool OperationMeasure;
    }

    public TDDIRiskParameterUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                RiskParameter = new TDDIRiskParameter();
                RiskParameter.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Situation = new TDDISituation();
                Situation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Accident = new TDDIAccident();
                Accident.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                OperationMeasure = new TDDIOperationMeasure();
                OperationMeasure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIRiskParameterUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RiskParameter != null && __isset.RiskParameter) {
          field.Name = "RiskParameter";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          RiskParameter.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Situation != null && __isset.Situation) {
          field.Name = "Situation";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Situation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Accident != null && __isset.Accident) {
          field.Name = "Accident";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Accident.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OperationMeasure != null && __isset.OperationMeasure) {
          field.Name = "OperationMeasure";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          OperationMeasure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIRiskParameterUnion(");
      bool __first = true;
      if (RiskParameter != null && __isset.RiskParameter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RiskParameter: ");
        __sb.Append(RiskParameter== null ? "<null>" : RiskParameter.ToString());
      }
      if (Situation != null && __isset.Situation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Situation: ");
        __sb.Append(Situation== null ? "<null>" : Situation.ToString());
      }
      if (Accident != null && __isset.Accident) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Accident: ");
        __sb.Append(Accident== null ? "<null>" : Accident.ToString());
      }
      if (OperationMeasure != null && __isset.OperationMeasure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OperationMeasure: ");
        __sb.Append(OperationMeasure== null ? "<null>" : OperationMeasure.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
