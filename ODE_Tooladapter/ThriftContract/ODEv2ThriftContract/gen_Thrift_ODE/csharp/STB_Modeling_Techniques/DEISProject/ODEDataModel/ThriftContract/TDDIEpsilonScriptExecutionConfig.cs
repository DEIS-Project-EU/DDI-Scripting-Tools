/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIEpsilonScriptExecutionConfig : TBase
  {
    private string _ScriptFilePath;
    private string _ScriptContent;
    private bool _ExecuteWithScriptFile;
    private TDDIEpsilonLanguage _EpsilonLanguage;
    private List<TDDIEpsilonScriptModelConfig> _ModelConfigs;
    private List<TDDIEpsilonParameter> _ExportParameters;
    private List<TDDIEpsilonParameter> _ImportParameters;
    private string _VariableNameOfReturnValue;

    public string ScriptFilePath
    {
      get
      {
        return _ScriptFilePath;
      }
      set
      {
        __isset.ScriptFilePath = true;
        this._ScriptFilePath = value;
      }
    }

    public string ScriptContent
    {
      get
      {
        return _ScriptContent;
      }
      set
      {
        __isset.ScriptContent = true;
        this._ScriptContent = value;
      }
    }

    public bool ExecuteWithScriptFile
    {
      get
      {
        return _ExecuteWithScriptFile;
      }
      set
      {
        __isset.ExecuteWithScriptFile = true;
        this._ExecuteWithScriptFile = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TDDIEpsilonLanguage"/>
    /// </summary>
    public TDDIEpsilonLanguage EpsilonLanguage
    {
      get
      {
        return _EpsilonLanguage;
      }
      set
      {
        __isset.EpsilonLanguage = true;
        this._EpsilonLanguage = value;
      }
    }

    public List<TDDIEpsilonScriptModelConfig> ModelConfigs
    {
      get
      {
        return _ModelConfigs;
      }
      set
      {
        __isset.ModelConfigs = true;
        this._ModelConfigs = value;
      }
    }

    public List<TDDIEpsilonParameter> ExportParameters
    {
      get
      {
        return _ExportParameters;
      }
      set
      {
        __isset.ExportParameters = true;
        this._ExportParameters = value;
      }
    }

    public List<TDDIEpsilonParameter> ImportParameters
    {
      get
      {
        return _ImportParameters;
      }
      set
      {
        __isset.ImportParameters = true;
        this._ImportParameters = value;
      }
    }

    public string VariableNameOfReturnValue
    {
      get
      {
        return _VariableNameOfReturnValue;
      }
      set
      {
        __isset.VariableNameOfReturnValue = true;
        this._VariableNameOfReturnValue = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ScriptFilePath;
      public bool ScriptContent;
      public bool ExecuteWithScriptFile;
      public bool EpsilonLanguage;
      public bool ModelConfigs;
      public bool ExportParameters;
      public bool ImportParameters;
      public bool VariableNameOfReturnValue;
    }

    public TDDIEpsilonScriptExecutionConfig() {
      this._ScriptFilePath = "";
      this.__isset.ScriptFilePath = true;
      this._ScriptContent = "";
      this.__isset.ScriptContent = true;
      this._ModelConfigs = new List<TDDIEpsilonScriptModelConfig>();
      this.__isset.ModelConfigs = true;
      this._ExportParameters = new List<TDDIEpsilonParameter>();
      this.__isset.ExportParameters = true;
      this._ImportParameters = new List<TDDIEpsilonParameter>();
      this.__isset.ImportParameters = true;
      this._VariableNameOfReturnValue = "";
      this.__isset.VariableNameOfReturnValue = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ScriptFilePath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ScriptContent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                ExecuteWithScriptFile = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                EpsilonLanguage = (TDDIEpsilonLanguage)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  ModelConfigs = new List<TDDIEpsilonScriptModelConfig>();
                  TList _list1376 = iprot.ReadListBegin();
                  for( int _i1377 = 0; _i1377 < _list1376.Count; ++_i1377)
                  {
                    TDDIEpsilonScriptModelConfig _elem1378;
                    _elem1378 = new TDDIEpsilonScriptModelConfig();
                    _elem1378.Read(iprot);
                    ModelConfigs.Add(_elem1378);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  ExportParameters = new List<TDDIEpsilonParameter>();
                  TList _list1379 = iprot.ReadListBegin();
                  for( int _i1380 = 0; _i1380 < _list1379.Count; ++_i1380)
                  {
                    TDDIEpsilonParameter _elem1381;
                    _elem1381 = new TDDIEpsilonParameter();
                    _elem1381.Read(iprot);
                    ExportParameters.Add(_elem1381);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  ImportParameters = new List<TDDIEpsilonParameter>();
                  TList _list1382 = iprot.ReadListBegin();
                  for( int _i1383 = 0; _i1383 < _list1382.Count; ++_i1383)
                  {
                    TDDIEpsilonParameter _elem1384;
                    _elem1384 = new TDDIEpsilonParameter();
                    _elem1384.Read(iprot);
                    ImportParameters.Add(_elem1384);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                VariableNameOfReturnValue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIEpsilonScriptExecutionConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ScriptFilePath != null && __isset.ScriptFilePath) {
          field.Name = "ScriptFilePath";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ScriptFilePath);
          oprot.WriteFieldEnd();
        }
        if (ScriptContent != null && __isset.ScriptContent) {
          field.Name = "ScriptContent";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ScriptContent);
          oprot.WriteFieldEnd();
        }
        if (__isset.ExecuteWithScriptFile) {
          field.Name = "ExecuteWithScriptFile";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ExecuteWithScriptFile);
          oprot.WriteFieldEnd();
        }
        if (__isset.EpsilonLanguage) {
          field.Name = "EpsilonLanguage";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)EpsilonLanguage);
          oprot.WriteFieldEnd();
        }
        if (ModelConfigs != null && __isset.ModelConfigs) {
          field.Name = "ModelConfigs";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ModelConfigs.Count));
            foreach (TDDIEpsilonScriptModelConfig _iter1385 in ModelConfigs)
            {
              _iter1385.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ExportParameters != null && __isset.ExportParameters) {
          field.Name = "ExportParameters";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ExportParameters.Count));
            foreach (TDDIEpsilonParameter _iter1386 in ExportParameters)
            {
              _iter1386.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ImportParameters != null && __isset.ImportParameters) {
          field.Name = "ImportParameters";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ImportParameters.Count));
            foreach (TDDIEpsilonParameter _iter1387 in ImportParameters)
            {
              _iter1387.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (VariableNameOfReturnValue != null && __isset.VariableNameOfReturnValue) {
          field.Name = "VariableNameOfReturnValue";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VariableNameOfReturnValue);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIEpsilonScriptExecutionConfig(");
      bool __first = true;
      if (ScriptFilePath != null && __isset.ScriptFilePath) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ScriptFilePath: ");
        __sb.Append(ScriptFilePath);
      }
      if (ScriptContent != null && __isset.ScriptContent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ScriptContent: ");
        __sb.Append(ScriptContent);
      }
      if (__isset.ExecuteWithScriptFile) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExecuteWithScriptFile: ");
        __sb.Append(ExecuteWithScriptFile);
      }
      if (__isset.EpsilonLanguage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EpsilonLanguage: ");
        __sb.Append(EpsilonLanguage);
      }
      if (ModelConfigs != null && __isset.ModelConfigs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ModelConfigs: ");
        __sb.Append(ModelConfigs);
      }
      if (ExportParameters != null && __isset.ExportParameters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExportParameters: ");
        __sb.Append(ExportParameters);
      }
      if (ImportParameters != null && __isset.ImportParameters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImportParameters: ");
        __sb.Append(ImportParameters);
      }
      if (VariableNameOfReturnValue != null && __isset.VariableNameOfReturnValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VariableNameOfReturnValue: ");
        __sb.Append(VariableNameOfReturnValue);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
