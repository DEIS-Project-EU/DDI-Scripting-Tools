/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDISecurityRequirement : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private List<TDDIKeyValueMap> _KeyValueMaps;
    private string _DecompositionArgument;
    private List<TDDIAbstractDependabilityRequirementRef> _RefinedRequirements;
    private TDDIAbstractRequirementSource _RequirementSource;
    private List<TDDIAbstractMeasureRef> _Measures;
    private List<TDDIAbstractFailureRef> _Failures;
    private TDDIAssuranceLevel _AssuranceLevel;
    private List<TDDIMaintenanceProcedureRef> _MaintenanceProcedures;
    private List<TDDISecurityCapabilityRef> _SecurityCapabilities;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIKeyValueMap> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public string DecompositionArgument
    {
      get
      {
        return _DecompositionArgument;
      }
      set
      {
        __isset.DecompositionArgument = true;
        this._DecompositionArgument = value;
      }
    }

    public List<TDDIAbstractDependabilityRequirementRef> RefinedRequirements
    {
      get
      {
        return _RefinedRequirements;
      }
      set
      {
        __isset.RefinedRequirements = true;
        this._RefinedRequirements = value;
      }
    }

    public TDDIAbstractRequirementSource RequirementSource
    {
      get
      {
        return _RequirementSource;
      }
      set
      {
        __isset.RequirementSource = true;
        this._RequirementSource = value;
      }
    }

    public List<TDDIAbstractMeasureRef> Measures
    {
      get
      {
        return _Measures;
      }
      set
      {
        __isset.Measures = true;
        this._Measures = value;
      }
    }

    public List<TDDIAbstractFailureRef> Failures
    {
      get
      {
        return _Failures;
      }
      set
      {
        __isset.Failures = true;
        this._Failures = value;
      }
    }

    public TDDIAssuranceLevel AssuranceLevel
    {
      get
      {
        return _AssuranceLevel;
      }
      set
      {
        __isset.AssuranceLevel = true;
        this._AssuranceLevel = value;
      }
    }

    public List<TDDIMaintenanceProcedureRef> MaintenanceProcedures
    {
      get
      {
        return _MaintenanceProcedures;
      }
      set
      {
        __isset.MaintenanceProcedures = true;
        this._MaintenanceProcedures = value;
      }
    }

    public List<TDDISecurityCapabilityRef> SecurityCapabilities
    {
      get
      {
        return _SecurityCapabilities;
      }
      set
      {
        __isset.SecurityCapabilities = true;
        this._SecurityCapabilities = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool KeyValueMaps;
      public bool DecompositionArgument;
      public bool RefinedRequirements;
      public bool RequirementSource;
      public bool Measures;
      public bool Failures;
      public bool AssuranceLevel;
      public bool MaintenanceProcedures;
      public bool SecurityCapabilities;
    }

    public TDDISecurityRequirement() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._KeyValueMaps = new List<TDDIKeyValueMap>();
      this.__isset.KeyValueMaps = true;
      this._DecompositionArgument = "";
      this.__isset.DecompositionArgument = true;
      this._RefinedRequirements = new List<TDDIAbstractDependabilityRequirementRef>();
      this.__isset.RefinedRequirements = true;
      this._Measures = new List<TDDIAbstractMeasureRef>();
      this.__isset.Measures = true;
      this._Failures = new List<TDDIAbstractFailureRef>();
      this.__isset.Failures = true;
      this._MaintenanceProcedures = new List<TDDIMaintenanceProcedureRef>();
      this.__isset.MaintenanceProcedures = true;
      this._SecurityCapabilities = new List<TDDISecurityCapabilityRef>();
      this.__isset.SecurityCapabilities = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMap>();
                  TList _list680 = iprot.ReadListBegin();
                  for( int _i681 = 0; _i681 < _list680.Count; ++_i681)
                  {
                    TDDIKeyValueMap _elem682;
                    _elem682 = new TDDIKeyValueMap();
                    _elem682.Read(iprot);
                    KeyValueMaps.Add(_elem682);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                DecompositionArgument = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  RefinedRequirements = new List<TDDIAbstractDependabilityRequirementRef>();
                  TList _list683 = iprot.ReadListBegin();
                  for( int _i684 = 0; _i684 < _list683.Count; ++_i684)
                  {
                    TDDIAbstractDependabilityRequirementRef _elem685;
                    _elem685 = new TDDIAbstractDependabilityRequirementRef();
                    _elem685.Read(iprot);
                    RefinedRequirements.Add(_elem685);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                RequirementSource = new TDDIAbstractRequirementSource();
                RequirementSource.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  Measures = new List<TDDIAbstractMeasureRef>();
                  TList _list686 = iprot.ReadListBegin();
                  for( int _i687 = 0; _i687 < _list686.Count; ++_i687)
                  {
                    TDDIAbstractMeasureRef _elem688;
                    _elem688 = new TDDIAbstractMeasureRef();
                    _elem688.Read(iprot);
                    Measures.Add(_elem688);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Failures = new List<TDDIAbstractFailureRef>();
                  TList _list689 = iprot.ReadListBegin();
                  for( int _i690 = 0; _i690 < _list689.Count; ++_i690)
                  {
                    TDDIAbstractFailureRef _elem691;
                    _elem691 = new TDDIAbstractFailureRef();
                    _elem691.Read(iprot);
                    Failures.Add(_elem691);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                AssuranceLevel = new TDDIAssuranceLevel();
                AssuranceLevel.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  MaintenanceProcedures = new List<TDDIMaintenanceProcedureRef>();
                  TList _list692 = iprot.ReadListBegin();
                  for( int _i693 = 0; _i693 < _list692.Count; ++_i693)
                  {
                    TDDIMaintenanceProcedureRef _elem694;
                    _elem694 = new TDDIMaintenanceProcedureRef();
                    _elem694.Read(iprot);
                    MaintenanceProcedures.Add(_elem694);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.List) {
                {
                  SecurityCapabilities = new List<TDDISecurityCapabilityRef>();
                  TList _list695 = iprot.ReadListBegin();
                  for( int _i696 = 0; _i696 < _list695.Count; ++_i696)
                  {
                    TDDISecurityCapabilityRef _elem697;
                    _elem697 = new TDDISecurityCapabilityRef();
                    _elem697.Read(iprot);
                    SecurityCapabilities.Add(_elem697);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDISecurityRequirement");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMap _iter698 in KeyValueMaps)
            {
              _iter698.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DecompositionArgument != null && __isset.DecompositionArgument) {
          field.Name = "DecompositionArgument";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DecompositionArgument);
          oprot.WriteFieldEnd();
        }
        if (RefinedRequirements != null && __isset.RefinedRequirements) {
          field.Name = "RefinedRequirements";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RefinedRequirements.Count));
            foreach (TDDIAbstractDependabilityRequirementRef _iter699 in RefinedRequirements)
            {
              _iter699.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RequirementSource != null && __isset.RequirementSource) {
          field.Name = "RequirementSource";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          RequirementSource.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Measures != null && __isset.Measures) {
          field.Name = "Measures";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Measures.Count));
            foreach (TDDIAbstractMeasureRef _iter700 in Measures)
            {
              _iter700.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Failures != null && __isset.Failures) {
          field.Name = "Failures";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Failures.Count));
            foreach (TDDIAbstractFailureRef _iter701 in Failures)
            {
              _iter701.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AssuranceLevel != null && __isset.AssuranceLevel) {
          field.Name = "AssuranceLevel";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          AssuranceLevel.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MaintenanceProcedures != null && __isset.MaintenanceProcedures) {
          field.Name = "MaintenanceProcedures";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, MaintenanceProcedures.Count));
            foreach (TDDIMaintenanceProcedureRef _iter702 in MaintenanceProcedures)
            {
              _iter702.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SecurityCapabilities != null && __isset.SecurityCapabilities) {
          field.Name = "SecurityCapabilities";
          field.Type = TType.List;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SecurityCapabilities.Count));
            foreach (TDDISecurityCapabilityRef _iter703 in SecurityCapabilities)
            {
              _iter703.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDISecurityRequirement(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (DecompositionArgument != null && __isset.DecompositionArgument) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DecompositionArgument: ");
        __sb.Append(DecompositionArgument);
      }
      if (RefinedRequirements != null && __isset.RefinedRequirements) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RefinedRequirements: ");
        __sb.Append(RefinedRequirements);
      }
      if (RequirementSource != null && __isset.RequirementSource) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementSource: ");
        __sb.Append(RequirementSource== null ? "<null>" : RequirementSource.ToString());
      }
      if (Measures != null && __isset.Measures) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Measures: ");
        __sb.Append(Measures);
      }
      if (Failures != null && __isset.Failures) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Failures: ");
        __sb.Append(Failures);
      }
      if (AssuranceLevel != null && __isset.AssuranceLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssuranceLevel: ");
        __sb.Append(AssuranceLevel== null ? "<null>" : AssuranceLevel.ToString());
      }
      if (MaintenanceProcedures != null && __isset.MaintenanceProcedures) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaintenanceProcedures: ");
        __sb.Append(MaintenanceProcedures);
      }
      if (SecurityCapabilities != null && __isset.SecurityCapabilities) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SecurityCapabilities: ");
        __sb.Append(SecurityCapabilities);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
