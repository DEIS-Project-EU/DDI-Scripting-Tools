/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIPayload : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private List<TDDIKeyValueMap> _KeyValueMaps;
    private string _Category;
    private double _FinancialCost;
    private TDDIFinancialCostType _FinancialCostType;
    private double _TimeRequired;
    private TDDITimeUnit _TimeUnit;
    private string _Difficulty;
    private string _Detectability;
    private List<TDDIVulnerabilityRef> _ExploitedVulnerabilities;
    private List<TDDISecurityViolationRef> _Violations;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIKeyValueMap> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public string Category
    {
      get
      {
        return _Category;
      }
      set
      {
        __isset.Category = true;
        this._Category = value;
      }
    }

    public double FinancialCost
    {
      get
      {
        return _FinancialCost;
      }
      set
      {
        __isset.FinancialCost = true;
        this._FinancialCost = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TDDIFinancialCostType"/>
    /// </summary>
    public TDDIFinancialCostType FinancialCostType
    {
      get
      {
        return _FinancialCostType;
      }
      set
      {
        __isset.FinancialCostType = true;
        this._FinancialCostType = value;
      }
    }

    public double TimeRequired
    {
      get
      {
        return _TimeRequired;
      }
      set
      {
        __isset.TimeRequired = true;
        this._TimeRequired = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TDDITimeUnit"/>
    /// </summary>
    public TDDITimeUnit TimeUnit
    {
      get
      {
        return _TimeUnit;
      }
      set
      {
        __isset.TimeUnit = true;
        this._TimeUnit = value;
      }
    }

    public string Difficulty
    {
      get
      {
        return _Difficulty;
      }
      set
      {
        __isset.Difficulty = true;
        this._Difficulty = value;
      }
    }

    public string Detectability
    {
      get
      {
        return _Detectability;
      }
      set
      {
        __isset.Detectability = true;
        this._Detectability = value;
      }
    }

    public List<TDDIVulnerabilityRef> ExploitedVulnerabilities
    {
      get
      {
        return _ExploitedVulnerabilities;
      }
      set
      {
        __isset.ExploitedVulnerabilities = true;
        this._ExploitedVulnerabilities = value;
      }
    }

    public List<TDDISecurityViolationRef> Violations
    {
      get
      {
        return _Violations;
      }
      set
      {
        __isset.Violations = true;
        this._Violations = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool KeyValueMaps;
      public bool Category;
      public bool FinancialCost;
      public bool FinancialCostType;
      public bool TimeRequired;
      public bool TimeUnit;
      public bool Difficulty;
      public bool Detectability;
      public bool ExploitedVulnerabilities;
      public bool Violations;
    }

    public TDDIPayload() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._KeyValueMaps = new List<TDDIKeyValueMap>();
      this.__isset.KeyValueMaps = true;
      this._Category = "";
      this.__isset.Category = true;
      this._FinancialCost = 0;
      this.__isset.FinancialCost = true;
      this._FinancialCostType = TDDIFinancialCostType.FCTEUR;
      this.__isset.FinancialCostType = true;
      this._TimeRequired = 0;
      this.__isset.TimeRequired = true;
      this._TimeUnit = TDDITimeUnit.TUMinute;
      this.__isset.TimeUnit = true;
      this._Difficulty = "";
      this.__isset.Difficulty = true;
      this._Detectability = "";
      this.__isset.Detectability = true;
      this._ExploitedVulnerabilities = new List<TDDIVulnerabilityRef>();
      this.__isset.ExploitedVulnerabilities = true;
      this._Violations = new List<TDDISecurityViolationRef>();
      this.__isset.Violations = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMap>();
                  TList _list1456 = iprot.ReadListBegin();
                  for( int _i1457 = 0; _i1457 < _list1456.Count; ++_i1457)
                  {
                    TDDIKeyValueMap _elem1458;
                    _elem1458 = new TDDIKeyValueMap();
                    _elem1458.Read(iprot);
                    KeyValueMaps.Add(_elem1458);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Category = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                FinancialCost = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                FinancialCostType = (TDDIFinancialCostType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                TimeRequired = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                TimeUnit = (TDDITimeUnit)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                Difficulty = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                Detectability = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.List) {
                {
                  ExploitedVulnerabilities = new List<TDDIVulnerabilityRef>();
                  TList _list1459 = iprot.ReadListBegin();
                  for( int _i1460 = 0; _i1460 < _list1459.Count; ++_i1460)
                  {
                    TDDIVulnerabilityRef _elem1461;
                    _elem1461 = new TDDIVulnerabilityRef();
                    _elem1461.Read(iprot);
                    ExploitedVulnerabilities.Add(_elem1461);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.List) {
                {
                  Violations = new List<TDDISecurityViolationRef>();
                  TList _list1462 = iprot.ReadListBegin();
                  for( int _i1463 = 0; _i1463 < _list1462.Count; ++_i1463)
                  {
                    TDDISecurityViolationRef _elem1464;
                    _elem1464 = new TDDISecurityViolationRef();
                    _elem1464.Read(iprot);
                    Violations.Add(_elem1464);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIPayload");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMap _iter1465 in KeyValueMaps)
            {
              _iter1465.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Category != null && __isset.Category) {
          field.Name = "Category";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Category);
          oprot.WriteFieldEnd();
        }
        if (__isset.FinancialCost) {
          field.Name = "FinancialCost";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(FinancialCost);
          oprot.WriteFieldEnd();
        }
        if (__isset.FinancialCostType) {
          field.Name = "FinancialCostType";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FinancialCostType);
          oprot.WriteFieldEnd();
        }
        if (__isset.TimeRequired) {
          field.Name = "TimeRequired";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(TimeRequired);
          oprot.WriteFieldEnd();
        }
        if (__isset.TimeUnit) {
          field.Name = "TimeUnit";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)TimeUnit);
          oprot.WriteFieldEnd();
        }
        if (Difficulty != null && __isset.Difficulty) {
          field.Name = "Difficulty";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Difficulty);
          oprot.WriteFieldEnd();
        }
        if (Detectability != null && __isset.Detectability) {
          field.Name = "Detectability";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Detectability);
          oprot.WriteFieldEnd();
        }
        if (ExploitedVulnerabilities != null && __isset.ExploitedVulnerabilities) {
          field.Name = "ExploitedVulnerabilities";
          field.Type = TType.List;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ExploitedVulnerabilities.Count));
            foreach (TDDIVulnerabilityRef _iter1466 in ExploitedVulnerabilities)
            {
              _iter1466.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Violations != null && __isset.Violations) {
          field.Name = "Violations";
          field.Type = TType.List;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Violations.Count));
            foreach (TDDISecurityViolationRef _iter1467 in Violations)
            {
              _iter1467.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIPayload(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (Category != null && __isset.Category) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Category: ");
        __sb.Append(Category);
      }
      if (__isset.FinancialCost) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FinancialCost: ");
        __sb.Append(FinancialCost);
      }
      if (__isset.FinancialCostType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FinancialCostType: ");
        __sb.Append(FinancialCostType);
      }
      if (__isset.TimeRequired) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeRequired: ");
        __sb.Append(TimeRequired);
      }
      if (__isset.TimeUnit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeUnit: ");
        __sb.Append(TimeUnit);
      }
      if (Difficulty != null && __isset.Difficulty) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Difficulty: ");
        __sb.Append(Difficulty);
      }
      if (Detectability != null && __isset.Detectability) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Detectability: ");
        __sb.Append(Detectability);
      }
      if (ExploitedVulnerabilities != null && __isset.ExploitedVulnerabilities) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExploitedVulnerabilities: ");
        __sb.Append(ExploitedVulnerabilities);
      }
      if (Violations != null && __isset.Violations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Violations: ");
        __sb.Append(Violations);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
