/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDISecurityViolation : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private List<TDDIKeyValueMap> _KeyValueMaps;
    private TDDIFailureOriginType _OriginType;
    private string _FailureClass;
    private double _FailureRate;
    private bool _IsCCF;
    private List<TDDIAbstractFailureRef> _CCFFailures;
    private TDDIProbDist _FailureProbDistribution;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIKeyValueMap> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TDDIFailureOriginType"/>
    /// </summary>
    public TDDIFailureOriginType OriginType
    {
      get
      {
        return _OriginType;
      }
      set
      {
        __isset.OriginType = true;
        this._OriginType = value;
      }
    }

    public string FailureClass
    {
      get
      {
        return _FailureClass;
      }
      set
      {
        __isset.FailureClass = true;
        this._FailureClass = value;
      }
    }

    public double FailureRate
    {
      get
      {
        return _FailureRate;
      }
      set
      {
        __isset.FailureRate = true;
        this._FailureRate = value;
      }
    }

    public bool IsCCF
    {
      get
      {
        return _IsCCF;
      }
      set
      {
        __isset.IsCCF = true;
        this._IsCCF = value;
      }
    }

    public List<TDDIAbstractFailureRef> CCFFailures
    {
      get
      {
        return _CCFFailures;
      }
      set
      {
        __isset.CCFFailures = true;
        this._CCFFailures = value;
      }
    }

    public TDDIProbDist FailureProbDistribution
    {
      get
      {
        return _FailureProbDistribution;
      }
      set
      {
        __isset.FailureProbDistribution = true;
        this._FailureProbDistribution = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool KeyValueMaps;
      public bool OriginType;
      public bool FailureClass;
      public bool FailureRate;
      public bool IsCCF;
      public bool CCFFailures;
      public bool FailureProbDistribution;
    }

    public TDDISecurityViolation() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._KeyValueMaps = new List<TDDIKeyValueMap>();
      this.__isset.KeyValueMaps = true;
      this._CCFFailures = new List<TDDIAbstractFailureRef>();
      this.__isset.CCFFailures = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMap>();
                  TList _list404 = iprot.ReadListBegin();
                  for( int _i405 = 0; _i405 < _list404.Count; ++_i405)
                  {
                    TDDIKeyValueMap _elem406;
                    _elem406 = new TDDIKeyValueMap();
                    _elem406.Read(iprot);
                    KeyValueMaps.Add(_elem406);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                OriginType = (TDDIFailureOriginType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                FailureClass = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                FailureRate = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                IsCCF = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  CCFFailures = new List<TDDIAbstractFailureRef>();
                  TList _list407 = iprot.ReadListBegin();
                  for( int _i408 = 0; _i408 < _list407.Count; ++_i408)
                  {
                    TDDIAbstractFailureRef _elem409;
                    _elem409 = new TDDIAbstractFailureRef();
                    _elem409.Read(iprot);
                    CCFFailures.Add(_elem409);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                FailureProbDistribution = new TDDIProbDist();
                FailureProbDistribution.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDISecurityViolation");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMap _iter410 in KeyValueMaps)
            {
              _iter410.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.OriginType) {
          field.Name = "OriginType";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)OriginType);
          oprot.WriteFieldEnd();
        }
        if (FailureClass != null && __isset.FailureClass) {
          field.Name = "FailureClass";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FailureClass);
          oprot.WriteFieldEnd();
        }
        if (__isset.FailureRate) {
          field.Name = "FailureRate";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(FailureRate);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsCCF) {
          field.Name = "IsCCF";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsCCF);
          oprot.WriteFieldEnd();
        }
        if (CCFFailures != null && __isset.CCFFailures) {
          field.Name = "CCFFailures";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, CCFFailures.Count));
            foreach (TDDIAbstractFailureRef _iter411 in CCFFailures)
            {
              _iter411.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (FailureProbDistribution != null && __isset.FailureProbDistribution) {
          field.Name = "FailureProbDistribution";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          FailureProbDistribution.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDISecurityViolation(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (__isset.OriginType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OriginType: ");
        __sb.Append(OriginType);
      }
      if (FailureClass != null && __isset.FailureClass) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureClass: ");
        __sb.Append(FailureClass);
      }
      if (__isset.FailureRate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureRate: ");
        __sb.Append(FailureRate);
      }
      if (__isset.IsCCF) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsCCF: ");
        __sb.Append(IsCCF);
      }
      if (CCFFailures != null && __isset.CCFFailures) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CCFFailures: ");
        __sb.Append(CCFFailures);
      }
      if (FailureProbDistribution != null && __isset.FailureProbDistribution) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureProbDistribution: ");
        __sb.Append(FailureProbDistribution== null ? "<null>" : FailureProbDistribution.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
