/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDISystemUnion : TBase
  {
    private TDDISystem _System;
    private TDDIPhysicalComponent _PhysicalComponent;
    private TDDILogicalComponent _LogicalComponent;
    private TDDISafetyRelatedSystem _SafetyRelatedSystem;

    public TDDISystem System
    {
      get
      {
        return _System;
      }
      set
      {
        __isset.System = true;
        this._System = value;
      }
    }

    public TDDIPhysicalComponent PhysicalComponent
    {
      get
      {
        return _PhysicalComponent;
      }
      set
      {
        __isset.PhysicalComponent = true;
        this._PhysicalComponent = value;
      }
    }

    public TDDILogicalComponent LogicalComponent
    {
      get
      {
        return _LogicalComponent;
      }
      set
      {
        __isset.LogicalComponent = true;
        this._LogicalComponent = value;
      }
    }

    public TDDISafetyRelatedSystem SafetyRelatedSystem
    {
      get
      {
        return _SafetyRelatedSystem;
      }
      set
      {
        __isset.SafetyRelatedSystem = true;
        this._SafetyRelatedSystem = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool System;
      public bool PhysicalComponent;
      public bool LogicalComponent;
      public bool SafetyRelatedSystem;
    }

    public TDDISystemUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                System = new TDDISystem();
                System.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                PhysicalComponent = new TDDIPhysicalComponent();
                PhysicalComponent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                LogicalComponent = new TDDILogicalComponent();
                LogicalComponent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                SafetyRelatedSystem = new TDDISafetyRelatedSystem();
                SafetyRelatedSystem.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDISystemUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (System != null && __isset.System) {
          field.Name = "System";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          System.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PhysicalComponent != null && __isset.PhysicalComponent) {
          field.Name = "PhysicalComponent";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PhysicalComponent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LogicalComponent != null && __isset.LogicalComponent) {
          field.Name = "LogicalComponent";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          LogicalComponent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SafetyRelatedSystem != null && __isset.SafetyRelatedSystem) {
          field.Name = "SafetyRelatedSystem";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          SafetyRelatedSystem.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDISystemUnion(");
      bool __first = true;
      if (System != null && __isset.System) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("System: ");
        __sb.Append(System== null ? "<null>" : System.ToString());
      }
      if (PhysicalComponent != null && __isset.PhysicalComponent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PhysicalComponent: ");
        __sb.Append(PhysicalComponent== null ? "<null>" : PhysicalComponent.ToString());
      }
      if (LogicalComponent != null && __isset.LogicalComponent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LogicalComponent: ");
        __sb.Append(LogicalComponent== null ? "<null>" : LogicalComponent.ToString());
      }
      if (SafetyRelatedSystem != null && __isset.SafetyRelatedSystem) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SafetyRelatedSystem: ");
        __sb.Append(SafetyRelatedSystem== null ? "<null>" : SafetyRelatedSystem.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
