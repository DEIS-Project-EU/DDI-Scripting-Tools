/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIAssertedRelationshipUnion : TBase
  {
    private TDDIAssertedArtifactSupport _AssertedArtifactSupport;
    private TDDIAssertedArtifactContext _AssertedArtifactContext;
    private TDDIAssertedInference _AssertedInference;
    private TDDIAssertedEvidence _AssertedEvidence;
    private TDDIAssertedContext _AssertedContext;

    public TDDIAssertedArtifactSupport AssertedArtifactSupport
    {
      get
      {
        return _AssertedArtifactSupport;
      }
      set
      {
        __isset.AssertedArtifactSupport = true;
        this._AssertedArtifactSupport = value;
      }
    }

    public TDDIAssertedArtifactContext AssertedArtifactContext
    {
      get
      {
        return _AssertedArtifactContext;
      }
      set
      {
        __isset.AssertedArtifactContext = true;
        this._AssertedArtifactContext = value;
      }
    }

    public TDDIAssertedInference AssertedInference
    {
      get
      {
        return _AssertedInference;
      }
      set
      {
        __isset.AssertedInference = true;
        this._AssertedInference = value;
      }
    }

    public TDDIAssertedEvidence AssertedEvidence
    {
      get
      {
        return _AssertedEvidence;
      }
      set
      {
        __isset.AssertedEvidence = true;
        this._AssertedEvidence = value;
      }
    }

    public TDDIAssertedContext AssertedContext
    {
      get
      {
        return _AssertedContext;
      }
      set
      {
        __isset.AssertedContext = true;
        this._AssertedContext = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool AssertedArtifactSupport;
      public bool AssertedArtifactContext;
      public bool AssertedInference;
      public bool AssertedEvidence;
      public bool AssertedContext;
    }

    public TDDIAssertedRelationshipUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                AssertedArtifactSupport = new TDDIAssertedArtifactSupport();
                AssertedArtifactSupport.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                AssertedArtifactContext = new TDDIAssertedArtifactContext();
                AssertedArtifactContext.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                AssertedInference = new TDDIAssertedInference();
                AssertedInference.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                AssertedEvidence = new TDDIAssertedEvidence();
                AssertedEvidence.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                AssertedContext = new TDDIAssertedContext();
                AssertedContext.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIAssertedRelationshipUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AssertedArtifactSupport != null && __isset.AssertedArtifactSupport) {
          field.Name = "AssertedArtifactSupport";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          AssertedArtifactSupport.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssertedArtifactContext != null && __isset.AssertedArtifactContext) {
          field.Name = "AssertedArtifactContext";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          AssertedArtifactContext.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssertedInference != null && __isset.AssertedInference) {
          field.Name = "AssertedInference";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          AssertedInference.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssertedEvidence != null && __isset.AssertedEvidence) {
          field.Name = "AssertedEvidence";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          AssertedEvidence.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssertedContext != null && __isset.AssertedContext) {
          field.Name = "AssertedContext";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          AssertedContext.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIAssertedRelationshipUnion(");
      bool __first = true;
      if (AssertedArtifactSupport != null && __isset.AssertedArtifactSupport) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssertedArtifactSupport: ");
        __sb.Append(AssertedArtifactSupport== null ? "<null>" : AssertedArtifactSupport.ToString());
      }
      if (AssertedArtifactContext != null && __isset.AssertedArtifactContext) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssertedArtifactContext: ");
        __sb.Append(AssertedArtifactContext== null ? "<null>" : AssertedArtifactContext.ToString());
      }
      if (AssertedInference != null && __isset.AssertedInference) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssertedInference: ");
        __sb.Append(AssertedInference== null ? "<null>" : AssertedInference.ToString());
      }
      if (AssertedEvidence != null && __isset.AssertedEvidence) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssertedEvidence: ");
        __sb.Append(AssertedEvidence== null ? "<null>" : AssertedEvidence.ToString());
      }
      if (AssertedContext != null && __isset.AssertedContext) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssertedContext: ");
        __sb.Append(AssertedContext== null ? "<null>" : AssertedContext.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
