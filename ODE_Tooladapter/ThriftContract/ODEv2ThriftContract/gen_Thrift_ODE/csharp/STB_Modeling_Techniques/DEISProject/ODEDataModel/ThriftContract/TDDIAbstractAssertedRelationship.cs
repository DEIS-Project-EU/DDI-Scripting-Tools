/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIAbstractAssertedRelationship : TBase
  {
    private TDDIAssertedRelationshipUnion _UsedAssertedRelationship;
    private TDDIAssertedRelationshipUnionType _UsedAssertedRelationshipType;

    public TDDIAssertedRelationshipUnion UsedAssertedRelationship
    {
      get
      {
        return _UsedAssertedRelationship;
      }
      set
      {
        __isset.UsedAssertedRelationship = true;
        this._UsedAssertedRelationship = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TDDIAssertedRelationshipUnionType"/>
    /// </summary>
    public TDDIAssertedRelationshipUnionType UsedAssertedRelationshipType
    {
      get
      {
        return _UsedAssertedRelationshipType;
      }
      set
      {
        __isset.UsedAssertedRelationshipType = true;
        this._UsedAssertedRelationshipType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool UsedAssertedRelationship;
      public bool UsedAssertedRelationshipType;
    }

    public TDDIAbstractAssertedRelationship() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                UsedAssertedRelationship = new TDDIAssertedRelationshipUnion();
                UsedAssertedRelationship.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                UsedAssertedRelationshipType = (TDDIAssertedRelationshipUnionType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIAbstractAssertedRelationship");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UsedAssertedRelationship != null && __isset.UsedAssertedRelationship) {
          field.Name = "UsedAssertedRelationship";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          UsedAssertedRelationship.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.UsedAssertedRelationshipType) {
          field.Name = "UsedAssertedRelationshipType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)UsedAssertedRelationshipType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIAbstractAssertedRelationship(");
      bool __first = true;
      if (UsedAssertedRelationship != null && __isset.UsedAssertedRelationship) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UsedAssertedRelationship: ");
        __sb.Append(UsedAssertedRelationship== null ? "<null>" : UsedAssertedRelationship.ToString());
      }
      if (__isset.UsedAssertedRelationshipType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UsedAssertedRelationshipType: ");
        __sb.Append(UsedAssertedRelationshipType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
