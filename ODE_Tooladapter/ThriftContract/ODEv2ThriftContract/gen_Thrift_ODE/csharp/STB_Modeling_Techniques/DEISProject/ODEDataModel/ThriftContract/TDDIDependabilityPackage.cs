/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIDependabilityPackage : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private List<TDDIKeyValueMap> _KeyValueMaps;
    private List<TDDIAbstractMeasure> _Measures;
    private List<TDDIMeasureType> _MeasureTypes;
    private List<TDDIMaintenanceProcedure> _MaintenanceProcedures;
    private List<TDDIDomainPackage> _DomainPackages;
    private List<TDDITARAPackage> _TARAPackages;
    private List<TDDIHARAPackage> _HARAPackages;
    private List<TDDIRequirementPackage> _RequirementPackages;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIKeyValueMap> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public List<TDDIAbstractMeasure> Measures
    {
      get
      {
        return _Measures;
      }
      set
      {
        __isset.Measures = true;
        this._Measures = value;
      }
    }

    public List<TDDIMeasureType> MeasureTypes
    {
      get
      {
        return _MeasureTypes;
      }
      set
      {
        __isset.MeasureTypes = true;
        this._MeasureTypes = value;
      }
    }

    public List<TDDIMaintenanceProcedure> MaintenanceProcedures
    {
      get
      {
        return _MaintenanceProcedures;
      }
      set
      {
        __isset.MaintenanceProcedures = true;
        this._MaintenanceProcedures = value;
      }
    }

    public List<TDDIDomainPackage> DomainPackages
    {
      get
      {
        return _DomainPackages;
      }
      set
      {
        __isset.DomainPackages = true;
        this._DomainPackages = value;
      }
    }

    public List<TDDITARAPackage> TARAPackages
    {
      get
      {
        return _TARAPackages;
      }
      set
      {
        __isset.TARAPackages = true;
        this._TARAPackages = value;
      }
    }

    public List<TDDIHARAPackage> HARAPackages
    {
      get
      {
        return _HARAPackages;
      }
      set
      {
        __isset.HARAPackages = true;
        this._HARAPackages = value;
      }
    }

    public List<TDDIRequirementPackage> RequirementPackages
    {
      get
      {
        return _RequirementPackages;
      }
      set
      {
        __isset.RequirementPackages = true;
        this._RequirementPackages = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool KeyValueMaps;
      public bool Measures;
      public bool MeasureTypes;
      public bool MaintenanceProcedures;
      public bool DomainPackages;
      public bool TARAPackages;
      public bool HARAPackages;
      public bool RequirementPackages;
    }

    public TDDIDependabilityPackage() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._KeyValueMaps = new List<TDDIKeyValueMap>();
      this.__isset.KeyValueMaps = true;
      this._Measures = new List<TDDIAbstractMeasure>();
      this.__isset.Measures = true;
      this._MeasureTypes = new List<TDDIMeasureType>();
      this.__isset.MeasureTypes = true;
      this._MaintenanceProcedures = new List<TDDIMaintenanceProcedure>();
      this.__isset.MaintenanceProcedures = true;
      this._DomainPackages = new List<TDDIDomainPackage>();
      this.__isset.DomainPackages = true;
      this._TARAPackages = new List<TDDITARAPackage>();
      this.__isset.TARAPackages = true;
      this._HARAPackages = new List<TDDIHARAPackage>();
      this.__isset.HARAPackages = true;
      this._RequirementPackages = new List<TDDIRequirementPackage>();
      this.__isset.RequirementPackages = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMap>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    TDDIKeyValueMap _elem22;
                    _elem22 = new TDDIKeyValueMap();
                    _elem22.Read(iprot);
                    KeyValueMaps.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Measures = new List<TDDIAbstractMeasure>();
                  TList _list23 = iprot.ReadListBegin();
                  for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                  {
                    TDDIAbstractMeasure _elem25;
                    _elem25 = new TDDIAbstractMeasure();
                    _elem25.Read(iprot);
                    Measures.Add(_elem25);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  MeasureTypes = new List<TDDIMeasureType>();
                  TList _list26 = iprot.ReadListBegin();
                  for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                  {
                    TDDIMeasureType _elem28;
                    _elem28 = new TDDIMeasureType();
                    _elem28.Read(iprot);
                    MeasureTypes.Add(_elem28);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  MaintenanceProcedures = new List<TDDIMaintenanceProcedure>();
                  TList _list29 = iprot.ReadListBegin();
                  for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                  {
                    TDDIMaintenanceProcedure _elem31;
                    _elem31 = new TDDIMaintenanceProcedure();
                    _elem31.Read(iprot);
                    MaintenanceProcedures.Add(_elem31);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  DomainPackages = new List<TDDIDomainPackage>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    TDDIDomainPackage _elem34;
                    _elem34 = new TDDIDomainPackage();
                    _elem34.Read(iprot);
                    DomainPackages.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  TARAPackages = new List<TDDITARAPackage>();
                  TList _list35 = iprot.ReadListBegin();
                  for( int _i36 = 0; _i36 < _list35.Count; ++_i36)
                  {
                    TDDITARAPackage _elem37;
                    _elem37 = new TDDITARAPackage();
                    _elem37.Read(iprot);
                    TARAPackages.Add(_elem37);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  HARAPackages = new List<TDDIHARAPackage>();
                  TList _list38 = iprot.ReadListBegin();
                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                  {
                    TDDIHARAPackage _elem40;
                    _elem40 = new TDDIHARAPackage();
                    _elem40.Read(iprot);
                    HARAPackages.Add(_elem40);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  RequirementPackages = new List<TDDIRequirementPackage>();
                  TList _list41 = iprot.ReadListBegin();
                  for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    TDDIRequirementPackage _elem43;
                    _elem43 = new TDDIRequirementPackage();
                    _elem43.Read(iprot);
                    RequirementPackages.Add(_elem43);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIDependabilityPackage");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMap _iter44 in KeyValueMaps)
            {
              _iter44.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Measures != null && __isset.Measures) {
          field.Name = "Measures";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Measures.Count));
            foreach (TDDIAbstractMeasure _iter45 in Measures)
            {
              _iter45.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (MeasureTypes != null && __isset.MeasureTypes) {
          field.Name = "MeasureTypes";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, MeasureTypes.Count));
            foreach (TDDIMeasureType _iter46 in MeasureTypes)
            {
              _iter46.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (MaintenanceProcedures != null && __isset.MaintenanceProcedures) {
          field.Name = "MaintenanceProcedures";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, MaintenanceProcedures.Count));
            foreach (TDDIMaintenanceProcedure _iter47 in MaintenanceProcedures)
            {
              _iter47.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DomainPackages != null && __isset.DomainPackages) {
          field.Name = "DomainPackages";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, DomainPackages.Count));
            foreach (TDDIDomainPackage _iter48 in DomainPackages)
            {
              _iter48.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (TARAPackages != null && __isset.TARAPackages) {
          field.Name = "TARAPackages";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, TARAPackages.Count));
            foreach (TDDITARAPackage _iter49 in TARAPackages)
            {
              _iter49.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (HARAPackages != null && __isset.HARAPackages) {
          field.Name = "HARAPackages";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, HARAPackages.Count));
            foreach (TDDIHARAPackage _iter50 in HARAPackages)
            {
              _iter50.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RequirementPackages != null && __isset.RequirementPackages) {
          field.Name = "RequirementPackages";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RequirementPackages.Count));
            foreach (TDDIRequirementPackage _iter51 in RequirementPackages)
            {
              _iter51.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIDependabilityPackage(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (Measures != null && __isset.Measures) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Measures: ");
        __sb.Append(Measures);
      }
      if (MeasureTypes != null && __isset.MeasureTypes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MeasureTypes: ");
        __sb.Append(MeasureTypes);
      }
      if (MaintenanceProcedures != null && __isset.MaintenanceProcedures) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaintenanceProcedures: ");
        __sb.Append(MaintenanceProcedures);
      }
      if (DomainPackages != null && __isset.DomainPackages) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DomainPackages: ");
        __sb.Append(DomainPackages);
      }
      if (TARAPackages != null && __isset.TARAPackages) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TARAPackages: ");
        __sb.Append(TARAPackages);
      }
      if (HARAPackages != null && __isset.HARAPackages) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HARAPackages: ");
        __sb.Append(HARAPackages);
      }
      if (RequirementPackages != null && __isset.RequirementPackages) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementPackages: ");
        __sb.Append(RequirementPackages);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
