/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{
  public partial class ExternalService {
    public interface ISync {
      TDDIDDIPackage InvokeExternalService(TDDIDDIPackage DDIPackage, string ServiceId, List<TDDIExternalServiceParameter> ServiceParameter);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_InvokeExternalService(AsyncCallback callback, object state, TDDIDDIPackage DDIPackage, string ServiceId, List<TDDIExternalServiceParameter> ServiceParameter);
      TDDIDDIPackage End_InvokeExternalService(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_InvokeExternalService(AsyncCallback callback, object state, TDDIDDIPackage DDIPackage, string ServiceId, List<TDDIExternalServiceParameter> ServiceParameter)
      {
        return send_InvokeExternalService(callback, state, DDIPackage, ServiceId, ServiceParameter);
      }

      public TDDIDDIPackage End_InvokeExternalService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_InvokeExternalService();
      }

      #endif

      public TDDIDDIPackage InvokeExternalService(TDDIDDIPackage DDIPackage, string ServiceId, List<TDDIExternalServiceParameter> ServiceParameter)
      {
        #if !SILVERLIGHT
        send_InvokeExternalService(DDIPackage, ServiceId, ServiceParameter);
        return recv_InvokeExternalService();

        #else
        var asyncResult = Begin_InvokeExternalService(null, null, DDIPackage, ServiceId, ServiceParameter);
        return End_InvokeExternalService(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_InvokeExternalService(AsyncCallback callback, object state, TDDIDDIPackage DDIPackage, string ServiceId, List<TDDIExternalServiceParameter> ServiceParameter)
      #else
      public void send_InvokeExternalService(TDDIDDIPackage DDIPackage, string ServiceId, List<TDDIExternalServiceParameter> ServiceParameter)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("InvokeExternalService", TMessageType.Call, seqid_));
        InvokeExternalService_args args = new InvokeExternalService_args();
        args.DDIPackage = DDIPackage;
        args.ServiceId = ServiceId;
        args.ServiceParameter = ServiceParameter;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TDDIDDIPackage recv_InvokeExternalService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        InvokeExternalService_result result = new InvokeExternalService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InvokeExternalService failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["InvokeExternalService"] = InvokeExternalService_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void InvokeExternalService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        InvokeExternalService_args args = new InvokeExternalService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        InvokeExternalService_result result = new InvokeExternalService_result();
        try
        {
          result.Success = iface_.InvokeExternalService(args.DDIPackage, args.ServiceId, args.ServiceParameter);
          oprot.WriteMessageBegin(new TMessage("InvokeExternalService", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("InvokeExternalService", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InvokeExternalService_args : TBase
    {
      private TDDIDDIPackage _DDIPackage;
      private string _ServiceId;
      private List<TDDIExternalServiceParameter> _ServiceParameter;

      public TDDIDDIPackage DDIPackage
      {
        get
        {
          return _DDIPackage;
        }
        set
        {
          __isset.DDIPackage = true;
          this._DDIPackage = value;
        }
      }

      public string ServiceId
      {
        get
        {
          return _ServiceId;
        }
        set
        {
          __isset.ServiceId = true;
          this._ServiceId = value;
        }
      }

      public List<TDDIExternalServiceParameter> ServiceParameter
      {
        get
        {
          return _ServiceParameter;
        }
        set
        {
          __isset.ServiceParameter = true;
          this._ServiceParameter = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool DDIPackage;
        public bool ServiceId;
        public bool ServiceParameter;
      }

      public InvokeExternalService_args() {
        this._ServiceParameter = new List<TDDIExternalServiceParameter>();
        this.__isset.ServiceParameter = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  DDIPackage = new TDDIDDIPackage();
                  DDIPackage.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ServiceId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    ServiceParameter = new List<TDDIExternalServiceParameter>();
                    TList _list1536 = iprot.ReadListBegin();
                    for( int _i1537 = 0; _i1537 < _list1536.Count; ++_i1537)
                    {
                      TDDIExternalServiceParameter _elem1538;
                      _elem1538 = new TDDIExternalServiceParameter();
                      _elem1538.Read(iprot);
                      ServiceParameter.Add(_elem1538);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InvokeExternalService_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (DDIPackage != null && __isset.DDIPackage) {
            field.Name = "DDIPackage";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            DDIPackage.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (ServiceId != null && __isset.ServiceId) {
            field.Name = "ServiceId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ServiceId);
            oprot.WriteFieldEnd();
          }
          if (ServiceParameter != null && __isset.ServiceParameter) {
            field.Name = "ServiceParameter";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, ServiceParameter.Count));
              foreach (TDDIExternalServiceParameter _iter1539 in ServiceParameter)
              {
                _iter1539.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InvokeExternalService_args(");
        bool __first = true;
        if (DDIPackage != null && __isset.DDIPackage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DDIPackage: ");
          __sb.Append(DDIPackage== null ? "<null>" : DDIPackage.ToString());
        }
        if (ServiceId != null && __isset.ServiceId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServiceId: ");
          __sb.Append(ServiceId);
        }
        if (ServiceParameter != null && __isset.ServiceParameter) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServiceParameter: ");
          __sb.Append(ServiceParameter);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InvokeExternalService_result : TBase
    {
      private TDDIDDIPackage _success;

      public TDDIDDIPackage Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public InvokeExternalService_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TDDIDDIPackage();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InvokeExternalService_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InvokeExternalService_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
