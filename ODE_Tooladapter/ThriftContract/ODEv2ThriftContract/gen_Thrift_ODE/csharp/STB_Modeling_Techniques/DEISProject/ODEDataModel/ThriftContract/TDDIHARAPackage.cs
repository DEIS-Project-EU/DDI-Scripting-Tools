/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIHARAPackage : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private List<TDDIKeyValueMap> _KeyValueMaps;
    private List<TDDIHazard> _Hazards;
    private List<TDDIHazardType> _HazardTypes;
    private List<TDDIHazardTypeSystem> _HazardTypeSystems;
    private List<TDDIMalfunction> _Malfunctions;
    private List<TDDIRiskAssessment> _RiskAssessments;
    private List<TDDIAbstractRiskParameter> _RiskParameters;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIKeyValueMap> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public List<TDDIHazard> Hazards
    {
      get
      {
        return _Hazards;
      }
      set
      {
        __isset.Hazards = true;
        this._Hazards = value;
      }
    }

    public List<TDDIHazardType> HazardTypes
    {
      get
      {
        return _HazardTypes;
      }
      set
      {
        __isset.HazardTypes = true;
        this._HazardTypes = value;
      }
    }

    public List<TDDIHazardTypeSystem> HazardTypeSystems
    {
      get
      {
        return _HazardTypeSystems;
      }
      set
      {
        __isset.HazardTypeSystems = true;
        this._HazardTypeSystems = value;
      }
    }

    public List<TDDIMalfunction> Malfunctions
    {
      get
      {
        return _Malfunctions;
      }
      set
      {
        __isset.Malfunctions = true;
        this._Malfunctions = value;
      }
    }

    public List<TDDIRiskAssessment> RiskAssessments
    {
      get
      {
        return _RiskAssessments;
      }
      set
      {
        __isset.RiskAssessments = true;
        this._RiskAssessments = value;
      }
    }

    public List<TDDIAbstractRiskParameter> RiskParameters
    {
      get
      {
        return _RiskParameters;
      }
      set
      {
        __isset.RiskParameters = true;
        this._RiskParameters = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool KeyValueMaps;
      public bool Hazards;
      public bool HazardTypes;
      public bool HazardTypeSystems;
      public bool Malfunctions;
      public bool RiskAssessments;
      public bool RiskParameters;
    }

    public TDDIHARAPackage() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._KeyValueMaps = new List<TDDIKeyValueMap>();
      this.__isset.KeyValueMaps = true;
      this._Hazards = new List<TDDIHazard>();
      this.__isset.Hazards = true;
      this._HazardTypes = new List<TDDIHazardType>();
      this.__isset.HazardTypes = true;
      this._HazardTypeSystems = new List<TDDIHazardTypeSystem>();
      this.__isset.HazardTypeSystems = true;
      this._Malfunctions = new List<TDDIMalfunction>();
      this.__isset.Malfunctions = true;
      this._RiskAssessments = new List<TDDIRiskAssessment>();
      this.__isset.RiskAssessments = true;
      this._RiskParameters = new List<TDDIAbstractRiskParameter>();
      this.__isset.RiskParameters = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMap>();
                  TList _list572 = iprot.ReadListBegin();
                  for( int _i573 = 0; _i573 < _list572.Count; ++_i573)
                  {
                    TDDIKeyValueMap _elem574;
                    _elem574 = new TDDIKeyValueMap();
                    _elem574.Read(iprot);
                    KeyValueMaps.Add(_elem574);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Hazards = new List<TDDIHazard>();
                  TList _list575 = iprot.ReadListBegin();
                  for( int _i576 = 0; _i576 < _list575.Count; ++_i576)
                  {
                    TDDIHazard _elem577;
                    _elem577 = new TDDIHazard();
                    _elem577.Read(iprot);
                    Hazards.Add(_elem577);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  HazardTypes = new List<TDDIHazardType>();
                  TList _list578 = iprot.ReadListBegin();
                  for( int _i579 = 0; _i579 < _list578.Count; ++_i579)
                  {
                    TDDIHazardType _elem580;
                    _elem580 = new TDDIHazardType();
                    _elem580.Read(iprot);
                    HazardTypes.Add(_elem580);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  HazardTypeSystems = new List<TDDIHazardTypeSystem>();
                  TList _list581 = iprot.ReadListBegin();
                  for( int _i582 = 0; _i582 < _list581.Count; ++_i582)
                  {
                    TDDIHazardTypeSystem _elem583;
                    _elem583 = new TDDIHazardTypeSystem();
                    _elem583.Read(iprot);
                    HazardTypeSystems.Add(_elem583);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  Malfunctions = new List<TDDIMalfunction>();
                  TList _list584 = iprot.ReadListBegin();
                  for( int _i585 = 0; _i585 < _list584.Count; ++_i585)
                  {
                    TDDIMalfunction _elem586;
                    _elem586 = new TDDIMalfunction();
                    _elem586.Read(iprot);
                    Malfunctions.Add(_elem586);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  RiskAssessments = new List<TDDIRiskAssessment>();
                  TList _list587 = iprot.ReadListBegin();
                  for( int _i588 = 0; _i588 < _list587.Count; ++_i588)
                  {
                    TDDIRiskAssessment _elem589;
                    _elem589 = new TDDIRiskAssessment();
                    _elem589.Read(iprot);
                    RiskAssessments.Add(_elem589);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  RiskParameters = new List<TDDIAbstractRiskParameter>();
                  TList _list590 = iprot.ReadListBegin();
                  for( int _i591 = 0; _i591 < _list590.Count; ++_i591)
                  {
                    TDDIAbstractRiskParameter _elem592;
                    _elem592 = new TDDIAbstractRiskParameter();
                    _elem592.Read(iprot);
                    RiskParameters.Add(_elem592);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIHARAPackage");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMap _iter593 in KeyValueMaps)
            {
              _iter593.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Hazards != null && __isset.Hazards) {
          field.Name = "Hazards";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Hazards.Count));
            foreach (TDDIHazard _iter594 in Hazards)
            {
              _iter594.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (HazardTypes != null && __isset.HazardTypes) {
          field.Name = "HazardTypes";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, HazardTypes.Count));
            foreach (TDDIHazardType _iter595 in HazardTypes)
            {
              _iter595.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (HazardTypeSystems != null && __isset.HazardTypeSystems) {
          field.Name = "HazardTypeSystems";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, HazardTypeSystems.Count));
            foreach (TDDIHazardTypeSystem _iter596 in HazardTypeSystems)
            {
              _iter596.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Malfunctions != null && __isset.Malfunctions) {
          field.Name = "Malfunctions";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Malfunctions.Count));
            foreach (TDDIMalfunction _iter597 in Malfunctions)
            {
              _iter597.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RiskAssessments != null && __isset.RiskAssessments) {
          field.Name = "RiskAssessments";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RiskAssessments.Count));
            foreach (TDDIRiskAssessment _iter598 in RiskAssessments)
            {
              _iter598.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RiskParameters != null && __isset.RiskParameters) {
          field.Name = "RiskParameters";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RiskParameters.Count));
            foreach (TDDIAbstractRiskParameter _iter599 in RiskParameters)
            {
              _iter599.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIHARAPackage(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (Hazards != null && __isset.Hazards) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hazards: ");
        __sb.Append(Hazards);
      }
      if (HazardTypes != null && __isset.HazardTypes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HazardTypes: ");
        __sb.Append(HazardTypes);
      }
      if (HazardTypeSystems != null && __isset.HazardTypeSystems) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HazardTypeSystems: ");
        __sb.Append(HazardTypeSystems);
      }
      if (Malfunctions != null && __isset.Malfunctions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Malfunctions: ");
        __sb.Append(Malfunctions);
      }
      if (RiskAssessments != null && __isset.RiskAssessments) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RiskAssessments: ");
        __sb.Append(RiskAssessments);
      }
      if (RiskParameters != null && __isset.RiskParameters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RiskParameters: ");
        __sb.Append(RiskParameters);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
