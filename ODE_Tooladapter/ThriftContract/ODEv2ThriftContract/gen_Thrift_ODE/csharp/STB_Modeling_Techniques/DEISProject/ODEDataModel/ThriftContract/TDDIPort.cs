/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIPort : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private List<TDDIKeyValueMap> _KeyValueMaps;
    private List<TDDIAbstractDependabilityRequirementRef> _DependabilityRequirements;
    private TDDIAssuranceLevel _AssuranceLevel;
    private string _FlowType;
    private TDDIPortDirection _Direction;
    private List<TDDIPortRef> _RefinedPorts;
    private List<TDDIAbstractFailureRef> _InterfaceFailures;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIKeyValueMap> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements
    {
      get
      {
        return _DependabilityRequirements;
      }
      set
      {
        __isset.DependabilityRequirements = true;
        this._DependabilityRequirements = value;
      }
    }

    public TDDIAssuranceLevel AssuranceLevel
    {
      get
      {
        return _AssuranceLevel;
      }
      set
      {
        __isset.AssuranceLevel = true;
        this._AssuranceLevel = value;
      }
    }

    public string FlowType
    {
      get
      {
        return _FlowType;
      }
      set
      {
        __isset.FlowType = true;
        this._FlowType = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TDDIPortDirection"/>
    /// </summary>
    public TDDIPortDirection Direction
    {
      get
      {
        return _Direction;
      }
      set
      {
        __isset.Direction = true;
        this._Direction = value;
      }
    }

    public List<TDDIPortRef> RefinedPorts
    {
      get
      {
        return _RefinedPorts;
      }
      set
      {
        __isset.RefinedPorts = true;
        this._RefinedPorts = value;
      }
    }

    public List<TDDIAbstractFailureRef> InterfaceFailures
    {
      get
      {
        return _InterfaceFailures;
      }
      set
      {
        __isset.InterfaceFailures = true;
        this._InterfaceFailures = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool KeyValueMaps;
      public bool DependabilityRequirements;
      public bool AssuranceLevel;
      public bool FlowType;
      public bool Direction;
      public bool RefinedPorts;
      public bool InterfaceFailures;
    }

    public TDDIPort() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._KeyValueMaps = new List<TDDIKeyValueMap>();
      this.__isset.KeyValueMaps = true;
      this._DependabilityRequirements = new List<TDDIAbstractDependabilityRequirementRef>();
      this.__isset.DependabilityRequirements = true;
      this._FlowType = "";
      this.__isset.FlowType = true;
      this._Direction = TDDIPortDirection.PDIN;
      this.__isset.Direction = true;
      this._RefinedPorts = new List<TDDIPortRef>();
      this.__isset.RefinedPorts = true;
      this._InterfaceFailures = new List<TDDIAbstractFailureRef>();
      this.__isset.InterfaceFailures = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMap>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    TDDIKeyValueMap _elem54;
                    _elem54 = new TDDIKeyValueMap();
                    _elem54.Read(iprot);
                    KeyValueMaps.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  DependabilityRequirements = new List<TDDIAbstractDependabilityRequirementRef>();
                  TList _list55 = iprot.ReadListBegin();
                  for( int _i56 = 0; _i56 < _list55.Count; ++_i56)
                  {
                    TDDIAbstractDependabilityRequirementRef _elem57;
                    _elem57 = new TDDIAbstractDependabilityRequirementRef();
                    _elem57.Read(iprot);
                    DependabilityRequirements.Add(_elem57);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                AssuranceLevel = new TDDIAssuranceLevel();
                AssuranceLevel.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                FlowType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                Direction = (TDDIPortDirection)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  RefinedPorts = new List<TDDIPortRef>();
                  TList _list58 = iprot.ReadListBegin();
                  for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                  {
                    TDDIPortRef _elem60;
                    _elem60 = new TDDIPortRef();
                    _elem60.Read(iprot);
                    RefinedPorts.Add(_elem60);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  InterfaceFailures = new List<TDDIAbstractFailureRef>();
                  TList _list61 = iprot.ReadListBegin();
                  for( int _i62 = 0; _i62 < _list61.Count; ++_i62)
                  {
                    TDDIAbstractFailureRef _elem63;
                    _elem63 = new TDDIAbstractFailureRef();
                    _elem63.Read(iprot);
                    InterfaceFailures.Add(_elem63);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIPort");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMap _iter64 in KeyValueMaps)
            {
              _iter64.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DependabilityRequirements != null && __isset.DependabilityRequirements) {
          field.Name = "DependabilityRequirements";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, DependabilityRequirements.Count));
            foreach (TDDIAbstractDependabilityRequirementRef _iter65 in DependabilityRequirements)
            {
              _iter65.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AssuranceLevel != null && __isset.AssuranceLevel) {
          field.Name = "AssuranceLevel";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          AssuranceLevel.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FlowType != null && __isset.FlowType) {
          field.Name = "FlowType";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FlowType);
          oprot.WriteFieldEnd();
        }
        if (__isset.Direction) {
          field.Name = "Direction";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Direction);
          oprot.WriteFieldEnd();
        }
        if (RefinedPorts != null && __isset.RefinedPorts) {
          field.Name = "RefinedPorts";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RefinedPorts.Count));
            foreach (TDDIPortRef _iter66 in RefinedPorts)
            {
              _iter66.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InterfaceFailures != null && __isset.InterfaceFailures) {
          field.Name = "InterfaceFailures";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, InterfaceFailures.Count));
            foreach (TDDIAbstractFailureRef _iter67 in InterfaceFailures)
            {
              _iter67.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIPort(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (DependabilityRequirements != null && __isset.DependabilityRequirements) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityRequirements: ");
        __sb.Append(DependabilityRequirements);
      }
      if (AssuranceLevel != null && __isset.AssuranceLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssuranceLevel: ");
        __sb.Append(AssuranceLevel);
      }
      if (FlowType != null && __isset.FlowType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FlowType: ");
        __sb.Append(FlowType);
      }
      if (__isset.Direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      if (RefinedPorts != null && __isset.RefinedPorts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RefinedPorts: ");
        __sb.Append(RefinedPorts);
      }
      if (InterfaceFailures != null && __isset.InterfaceFailures) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InterfaceFailures: ");
        __sb.Append(InterfaceFailures);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
