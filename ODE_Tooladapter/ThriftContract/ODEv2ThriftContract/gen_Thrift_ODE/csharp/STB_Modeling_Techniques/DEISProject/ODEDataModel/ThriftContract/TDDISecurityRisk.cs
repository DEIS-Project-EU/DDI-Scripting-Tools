/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDISecurityRisk : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private List<TDDIKeyValueMap> _KeyValueMaps;
    private double _Likelihood;
    private string _ImpactAsset;
    private string _ImpactIndividuals;
    private string _ImpactBusiness;
    private List<TDDIAttackerGoalRef> _AttackerGoals;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIKeyValueMap> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public double Likelihood
    {
      get
      {
        return _Likelihood;
      }
      set
      {
        __isset.Likelihood = true;
        this._Likelihood = value;
      }
    }

    public string ImpactAsset
    {
      get
      {
        return _ImpactAsset;
      }
      set
      {
        __isset.ImpactAsset = true;
        this._ImpactAsset = value;
      }
    }

    public string ImpactIndividuals
    {
      get
      {
        return _ImpactIndividuals;
      }
      set
      {
        __isset.ImpactIndividuals = true;
        this._ImpactIndividuals = value;
      }
    }

    public string ImpactBusiness
    {
      get
      {
        return _ImpactBusiness;
      }
      set
      {
        __isset.ImpactBusiness = true;
        this._ImpactBusiness = value;
      }
    }

    public List<TDDIAttackerGoalRef> AttackerGoals
    {
      get
      {
        return _AttackerGoals;
      }
      set
      {
        __isset.AttackerGoals = true;
        this._AttackerGoals = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool KeyValueMaps;
      public bool Likelihood;
      public bool ImpactAsset;
      public bool ImpactIndividuals;
      public bool ImpactBusiness;
      public bool AttackerGoals;
    }

    public TDDISecurityRisk() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._KeyValueMaps = new List<TDDIKeyValueMap>();
      this.__isset.KeyValueMaps = true;
      this._Likelihood = 0;
      this.__isset.Likelihood = true;
      this._ImpactAsset = "";
      this.__isset.ImpactAsset = true;
      this._ImpactIndividuals = "";
      this.__isset.ImpactIndividuals = true;
      this._ImpactBusiness = "";
      this.__isset.ImpactBusiness = true;
      this._AttackerGoals = new List<TDDIAttackerGoalRef>();
      this.__isset.AttackerGoals = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMap>();
                  TList _list1420 = iprot.ReadListBegin();
                  for( int _i1421 = 0; _i1421 < _list1420.Count; ++_i1421)
                  {
                    TDDIKeyValueMap _elem1422;
                    _elem1422 = new TDDIKeyValueMap();
                    _elem1422.Read(iprot);
                    KeyValueMaps.Add(_elem1422);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                Likelihood = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                ImpactAsset = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                ImpactIndividuals = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                ImpactBusiness = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  AttackerGoals = new List<TDDIAttackerGoalRef>();
                  TList _list1423 = iprot.ReadListBegin();
                  for( int _i1424 = 0; _i1424 < _list1423.Count; ++_i1424)
                  {
                    TDDIAttackerGoalRef _elem1425;
                    _elem1425 = new TDDIAttackerGoalRef();
                    _elem1425.Read(iprot);
                    AttackerGoals.Add(_elem1425);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDISecurityRisk");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMap _iter1426 in KeyValueMaps)
            {
              _iter1426.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.Likelihood) {
          field.Name = "Likelihood";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Likelihood);
          oprot.WriteFieldEnd();
        }
        if (ImpactAsset != null && __isset.ImpactAsset) {
          field.Name = "ImpactAsset";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ImpactAsset);
          oprot.WriteFieldEnd();
        }
        if (ImpactIndividuals != null && __isset.ImpactIndividuals) {
          field.Name = "ImpactIndividuals";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ImpactIndividuals);
          oprot.WriteFieldEnd();
        }
        if (ImpactBusiness != null && __isset.ImpactBusiness) {
          field.Name = "ImpactBusiness";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ImpactBusiness);
          oprot.WriteFieldEnd();
        }
        if (AttackerGoals != null && __isset.AttackerGoals) {
          field.Name = "AttackerGoals";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, AttackerGoals.Count));
            foreach (TDDIAttackerGoalRef _iter1427 in AttackerGoals)
            {
              _iter1427.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDISecurityRisk(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (__isset.Likelihood) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Likelihood: ");
        __sb.Append(Likelihood);
      }
      if (ImpactAsset != null && __isset.ImpactAsset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImpactAsset: ");
        __sb.Append(ImpactAsset);
      }
      if (ImpactIndividuals != null && __isset.ImpactIndividuals) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImpactIndividuals: ");
        __sb.Append(ImpactIndividuals);
      }
      if (ImpactBusiness != null && __isset.ImpactBusiness) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImpactBusiness: ");
        __sb.Append(ImpactBusiness);
      }
      if (AttackerGoals != null && __isset.AttackerGoals) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttackerGoals: ");
        __sb.Append(AttackerGoals);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
