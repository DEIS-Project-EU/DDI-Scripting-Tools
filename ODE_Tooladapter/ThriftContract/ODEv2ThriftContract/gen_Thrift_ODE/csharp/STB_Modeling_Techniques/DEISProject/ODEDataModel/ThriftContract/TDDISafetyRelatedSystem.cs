/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDISafetyRelatedSystem : TBase
  {
    private long _Id;
    private string _Name;
    private string _Description;
    private List<TDDIKeyValueMap> _KeyValueMaps;
    private double _OverallLifetime;
    private TDDITimeUnit _OverallLifetimeTimeUnit;
    private List<TDDIContext> _Contexts;
    private List<TDDIConfiguration> _Configurations;
    private List<TDDIPort> _Ports;
    private List<TDDISignal> _Signals;
    private List<TDDISystemBoundary> _SystemBoundaries;
    private List<TDDIAbstractStandardRef> _AppliedStandards;
    private List<TDDIAbstractFunctionRef> _RealisedFunctions;
    private TDDIAbstractAsset _AsAsset;
    private List<TDDIAbstractDependabilityRequirementRef> _DependabilityRequirements;
    private TDDIAssuranceLevel _AssuranceLevel;
    private List<TDDIAbstractFailureModelRef> _FailureModels;
    private List<TDDIAbstractSystemRef> _SubSystems;
    private string _SafeState;

    public long Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public List<TDDIKeyValueMap> KeyValueMaps
    {
      get
      {
        return _KeyValueMaps;
      }
      set
      {
        __isset.KeyValueMaps = true;
        this._KeyValueMaps = value;
      }
    }

    public double OverallLifetime
    {
      get
      {
        return _OverallLifetime;
      }
      set
      {
        __isset.OverallLifetime = true;
        this._OverallLifetime = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TDDITimeUnit"/>
    /// </summary>
    public TDDITimeUnit OverallLifetimeTimeUnit
    {
      get
      {
        return _OverallLifetimeTimeUnit;
      }
      set
      {
        __isset.OverallLifetimeTimeUnit = true;
        this._OverallLifetimeTimeUnit = value;
      }
    }

    public List<TDDIContext> Contexts
    {
      get
      {
        return _Contexts;
      }
      set
      {
        __isset.Contexts = true;
        this._Contexts = value;
      }
    }

    public List<TDDIConfiguration> Configurations
    {
      get
      {
        return _Configurations;
      }
      set
      {
        __isset.Configurations = true;
        this._Configurations = value;
      }
    }

    public List<TDDIPort> Ports
    {
      get
      {
        return _Ports;
      }
      set
      {
        __isset.Ports = true;
        this._Ports = value;
      }
    }

    public List<TDDISignal> Signals
    {
      get
      {
        return _Signals;
      }
      set
      {
        __isset.Signals = true;
        this._Signals = value;
      }
    }

    public List<TDDISystemBoundary> SystemBoundaries
    {
      get
      {
        return _SystemBoundaries;
      }
      set
      {
        __isset.SystemBoundaries = true;
        this._SystemBoundaries = value;
      }
    }

    public List<TDDIAbstractStandardRef> AppliedStandards
    {
      get
      {
        return _AppliedStandards;
      }
      set
      {
        __isset.AppliedStandards = true;
        this._AppliedStandards = value;
      }
    }

    public List<TDDIAbstractFunctionRef> RealisedFunctions
    {
      get
      {
        return _RealisedFunctions;
      }
      set
      {
        __isset.RealisedFunctions = true;
        this._RealisedFunctions = value;
      }
    }

    public TDDIAbstractAsset AsAsset
    {
      get
      {
        return _AsAsset;
      }
      set
      {
        __isset.AsAsset = true;
        this._AsAsset = value;
      }
    }

    public List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements
    {
      get
      {
        return _DependabilityRequirements;
      }
      set
      {
        __isset.DependabilityRequirements = true;
        this._DependabilityRequirements = value;
      }
    }

    public TDDIAssuranceLevel AssuranceLevel
    {
      get
      {
        return _AssuranceLevel;
      }
      set
      {
        __isset.AssuranceLevel = true;
        this._AssuranceLevel = value;
      }
    }

    public List<TDDIAbstractFailureModelRef> FailureModels
    {
      get
      {
        return _FailureModels;
      }
      set
      {
        __isset.FailureModels = true;
        this._FailureModels = value;
      }
    }

    public List<TDDIAbstractSystemRef> SubSystems
    {
      get
      {
        return _SubSystems;
      }
      set
      {
        __isset.SubSystems = true;
        this._SubSystems = value;
      }
    }

    public string SafeState
    {
      get
      {
        return _SafeState;
      }
      set
      {
        __isset.SafeState = true;
        this._SafeState = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Description;
      public bool KeyValueMaps;
      public bool OverallLifetime;
      public bool OverallLifetimeTimeUnit;
      public bool Contexts;
      public bool Configurations;
      public bool Ports;
      public bool Signals;
      public bool SystemBoundaries;
      public bool AppliedStandards;
      public bool RealisedFunctions;
      public bool AsAsset;
      public bool DependabilityRequirements;
      public bool AssuranceLevel;
      public bool FailureModels;
      public bool SubSystems;
      public bool SafeState;
    }

    public TDDISafetyRelatedSystem() {
      this._Name = "";
      this.__isset.Name = true;
      this._Description = "";
      this.__isset.Description = true;
      this._KeyValueMaps = new List<TDDIKeyValueMap>();
      this.__isset.KeyValueMaps = true;
      this._OverallLifetime = 0;
      this.__isset.OverallLifetime = true;
      this._OverallLifetimeTimeUnit = TDDITimeUnit.TUHour;
      this.__isset.OverallLifetimeTimeUnit = true;
      this._Contexts = new List<TDDIContext>();
      this.__isset.Contexts = true;
      this._Configurations = new List<TDDIConfiguration>();
      this.__isset.Configurations = true;
      this._Ports = new List<TDDIPort>();
      this.__isset.Ports = true;
      this._Signals = new List<TDDISignal>();
      this.__isset.Signals = true;
      this._SystemBoundaries = new List<TDDISystemBoundary>();
      this.__isset.SystemBoundaries = true;
      this._AppliedStandards = new List<TDDIAbstractStandardRef>();
      this.__isset.AppliedStandards = true;
      this._RealisedFunctions = new List<TDDIAbstractFunctionRef>();
      this.__isset.RealisedFunctions = true;
      this._DependabilityRequirements = new List<TDDIAbstractDependabilityRequirementRef>();
      this.__isset.DependabilityRequirements = true;
      this._FailureModels = new List<TDDIAbstractFailureModelRef>();
      this.__isset.FailureModels = true;
      this._SubSystems = new List<TDDIAbstractSystemRef>();
      this.__isset.SubSystems = true;
      this._SafeState = "";
      this.__isset.SafeState = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  KeyValueMaps = new List<TDDIKeyValueMap>();
                  TList _list240 = iprot.ReadListBegin();
                  for( int _i241 = 0; _i241 < _list240.Count; ++_i241)
                  {
                    TDDIKeyValueMap _elem242;
                    _elem242 = new TDDIKeyValueMap();
                    _elem242.Read(iprot);
                    KeyValueMaps.Add(_elem242);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                OverallLifetime = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                OverallLifetimeTimeUnit = (TDDITimeUnit)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Contexts = new List<TDDIContext>();
                  TList _list243 = iprot.ReadListBegin();
                  for( int _i244 = 0; _i244 < _list243.Count; ++_i244)
                  {
                    TDDIContext _elem245;
                    _elem245 = new TDDIContext();
                    _elem245.Read(iprot);
                    Contexts.Add(_elem245);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  Configurations = new List<TDDIConfiguration>();
                  TList _list246 = iprot.ReadListBegin();
                  for( int _i247 = 0; _i247 < _list246.Count; ++_i247)
                  {
                    TDDIConfiguration _elem248;
                    _elem248 = new TDDIConfiguration();
                    _elem248.Read(iprot);
                    Configurations.Add(_elem248);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Ports = new List<TDDIPort>();
                  TList _list249 = iprot.ReadListBegin();
                  for( int _i250 = 0; _i250 < _list249.Count; ++_i250)
                  {
                    TDDIPort _elem251;
                    _elem251 = new TDDIPort();
                    _elem251.Read(iprot);
                    Ports.Add(_elem251);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  Signals = new List<TDDISignal>();
                  TList _list252 = iprot.ReadListBegin();
                  for( int _i253 = 0; _i253 < _list252.Count; ++_i253)
                  {
                    TDDISignal _elem254;
                    _elem254 = new TDDISignal();
                    _elem254.Read(iprot);
                    Signals.Add(_elem254);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  SystemBoundaries = new List<TDDISystemBoundary>();
                  TList _list255 = iprot.ReadListBegin();
                  for( int _i256 = 0; _i256 < _list255.Count; ++_i256)
                  {
                    TDDISystemBoundary _elem257;
                    _elem257 = new TDDISystemBoundary();
                    _elem257.Read(iprot);
                    SystemBoundaries.Add(_elem257);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.List) {
                {
                  AppliedStandards = new List<TDDIAbstractStandardRef>();
                  TList _list258 = iprot.ReadListBegin();
                  for( int _i259 = 0; _i259 < _list258.Count; ++_i259)
                  {
                    TDDIAbstractStandardRef _elem260;
                    _elem260 = new TDDIAbstractStandardRef();
                    _elem260.Read(iprot);
                    AppliedStandards.Add(_elem260);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.List) {
                {
                  RealisedFunctions = new List<TDDIAbstractFunctionRef>();
                  TList _list261 = iprot.ReadListBegin();
                  for( int _i262 = 0; _i262 < _list261.Count; ++_i262)
                  {
                    TDDIAbstractFunctionRef _elem263;
                    _elem263 = new TDDIAbstractFunctionRef();
                    _elem263.Read(iprot);
                    RealisedFunctions.Add(_elem263);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Struct) {
                AsAsset = new TDDIAbstractAsset();
                AsAsset.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.List) {
                {
                  DependabilityRequirements = new List<TDDIAbstractDependabilityRequirementRef>();
                  TList _list264 = iprot.ReadListBegin();
                  for( int _i265 = 0; _i265 < _list264.Count; ++_i265)
                  {
                    TDDIAbstractDependabilityRequirementRef _elem266;
                    _elem266 = new TDDIAbstractDependabilityRequirementRef();
                    _elem266.Read(iprot);
                    DependabilityRequirements.Add(_elem266);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Struct) {
                AssuranceLevel = new TDDIAssuranceLevel();
                AssuranceLevel.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.List) {
                {
                  FailureModels = new List<TDDIAbstractFailureModelRef>();
                  TList _list267 = iprot.ReadListBegin();
                  for( int _i268 = 0; _i268 < _list267.Count; ++_i268)
                  {
                    TDDIAbstractFailureModelRef _elem269;
                    _elem269 = new TDDIAbstractFailureModelRef();
                    _elem269.Read(iprot);
                    FailureModels.Add(_elem269);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.List) {
                {
                  SubSystems = new List<TDDIAbstractSystemRef>();
                  TList _list270 = iprot.ReadListBegin();
                  for( int _i271 = 0; _i271 < _list270.Count; ++_i271)
                  {
                    TDDIAbstractSystemRef _elem272;
                    _elem272 = new TDDIAbstractSystemRef();
                    _elem272.Read(iprot);
                    SubSystems.Add(_elem272);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                SafeState = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDISafetyRelatedSystem");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (KeyValueMaps != null && __isset.KeyValueMaps) {
          field.Name = "KeyValueMaps";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, KeyValueMaps.Count));
            foreach (TDDIKeyValueMap _iter273 in KeyValueMaps)
            {
              _iter273.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.OverallLifetime) {
          field.Name = "OverallLifetime";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(OverallLifetime);
          oprot.WriteFieldEnd();
        }
        if (__isset.OverallLifetimeTimeUnit) {
          field.Name = "OverallLifetimeTimeUnit";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)OverallLifetimeTimeUnit);
          oprot.WriteFieldEnd();
        }
        if (Contexts != null && __isset.Contexts) {
          field.Name = "Contexts";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Contexts.Count));
            foreach (TDDIContext _iter274 in Contexts)
            {
              _iter274.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Configurations != null && __isset.Configurations) {
          field.Name = "Configurations";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Configurations.Count));
            foreach (TDDIConfiguration _iter275 in Configurations)
            {
              _iter275.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Ports != null && __isset.Ports) {
          field.Name = "Ports";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Ports.Count));
            foreach (TDDIPort _iter276 in Ports)
            {
              _iter276.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Signals != null && __isset.Signals) {
          field.Name = "Signals";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Signals.Count));
            foreach (TDDISignal _iter277 in Signals)
            {
              _iter277.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SystemBoundaries != null && __isset.SystemBoundaries) {
          field.Name = "SystemBoundaries";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SystemBoundaries.Count));
            foreach (TDDISystemBoundary _iter278 in SystemBoundaries)
            {
              _iter278.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AppliedStandards != null && __isset.AppliedStandards) {
          field.Name = "AppliedStandards";
          field.Type = TType.List;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, AppliedStandards.Count));
            foreach (TDDIAbstractStandardRef _iter279 in AppliedStandards)
            {
              _iter279.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RealisedFunctions != null && __isset.RealisedFunctions) {
          field.Name = "RealisedFunctions";
          field.Type = TType.List;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RealisedFunctions.Count));
            foreach (TDDIAbstractFunctionRef _iter280 in RealisedFunctions)
            {
              _iter280.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AsAsset != null && __isset.AsAsset) {
          field.Name = "AsAsset";
          field.Type = TType.Struct;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          AsAsset.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DependabilityRequirements != null && __isset.DependabilityRequirements) {
          field.Name = "DependabilityRequirements";
          field.Type = TType.List;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, DependabilityRequirements.Count));
            foreach (TDDIAbstractDependabilityRequirementRef _iter281 in DependabilityRequirements)
            {
              _iter281.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AssuranceLevel != null && __isset.AssuranceLevel) {
          field.Name = "AssuranceLevel";
          field.Type = TType.Struct;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          AssuranceLevel.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FailureModels != null && __isset.FailureModels) {
          field.Name = "FailureModels";
          field.Type = TType.List;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, FailureModels.Count));
            foreach (TDDIAbstractFailureModelRef _iter282 in FailureModels)
            {
              _iter282.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SubSystems != null && __isset.SubSystems) {
          field.Name = "SubSystems";
          field.Type = TType.List;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SubSystems.Count));
            foreach (TDDIAbstractSystemRef _iter283 in SubSystems)
            {
              _iter283.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SafeState != null && __isset.SafeState) {
          field.Name = "SafeState";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SafeState);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDISafetyRelatedSystem(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (KeyValueMaps != null && __isset.KeyValueMaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValueMaps: ");
        __sb.Append(KeyValueMaps);
      }
      if (__isset.OverallLifetime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OverallLifetime: ");
        __sb.Append(OverallLifetime);
      }
      if (__isset.OverallLifetimeTimeUnit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OverallLifetimeTimeUnit: ");
        __sb.Append(OverallLifetimeTimeUnit);
      }
      if (Contexts != null && __isset.Contexts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Contexts: ");
        __sb.Append(Contexts);
      }
      if (Configurations != null && __isset.Configurations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Configurations: ");
        __sb.Append(Configurations);
      }
      if (Ports != null && __isset.Ports) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ports: ");
        __sb.Append(Ports);
      }
      if (Signals != null && __isset.Signals) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signals: ");
        __sb.Append(Signals);
      }
      if (SystemBoundaries != null && __isset.SystemBoundaries) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SystemBoundaries: ");
        __sb.Append(SystemBoundaries);
      }
      if (AppliedStandards != null && __isset.AppliedStandards) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppliedStandards: ");
        __sb.Append(AppliedStandards);
      }
      if (RealisedFunctions != null && __isset.RealisedFunctions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RealisedFunctions: ");
        __sb.Append(RealisedFunctions);
      }
      if (AsAsset != null && __isset.AsAsset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AsAsset: ");
        __sb.Append(AsAsset);
      }
      if (DependabilityRequirements != null && __isset.DependabilityRequirements) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityRequirements: ");
        __sb.Append(DependabilityRequirements);
      }
      if (AssuranceLevel != null && __isset.AssuranceLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssuranceLevel: ");
        __sb.Append(AssuranceLevel);
      }
      if (FailureModels != null && __isset.FailureModels) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureModels: ");
        __sb.Append(FailureModels);
      }
      if (SubSystems != null && __isset.SubSystems) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SubSystems: ");
        __sb.Append(SubSystems);
      }
      if (SafeState != null && __isset.SafeState) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SafeState: ");
        __sb.Append(SafeState);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
