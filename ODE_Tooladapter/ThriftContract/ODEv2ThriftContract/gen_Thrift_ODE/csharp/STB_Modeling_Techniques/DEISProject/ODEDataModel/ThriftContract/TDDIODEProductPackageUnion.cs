/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIODEProductPackageUnion : TBase
  {
    private TDDIDesignPackage _DesignPackage;
    private TDDIFailureLogicPackage _FailureLogicPackage;
    private TDDIRequirementPackage _RequirementPackage;
    private TDDIHARAPackage _HARAPackage;
    private TDDIDependabilityPackage _DependabilityPackage;
    private TDDITARAPackage _TARAPackage;
    private TDDIDomainPackage _DomainPackage;

    public TDDIDesignPackage DesignPackage
    {
      get
      {
        return _DesignPackage;
      }
      set
      {
        __isset.DesignPackage = true;
        this._DesignPackage = value;
      }
    }

    public TDDIFailureLogicPackage FailureLogicPackage
    {
      get
      {
        return _FailureLogicPackage;
      }
      set
      {
        __isset.FailureLogicPackage = true;
        this._FailureLogicPackage = value;
      }
    }

    public TDDIRequirementPackage RequirementPackage
    {
      get
      {
        return _RequirementPackage;
      }
      set
      {
        __isset.RequirementPackage = true;
        this._RequirementPackage = value;
      }
    }

    public TDDIHARAPackage HARAPackage
    {
      get
      {
        return _HARAPackage;
      }
      set
      {
        __isset.HARAPackage = true;
        this._HARAPackage = value;
      }
    }

    public TDDIDependabilityPackage DependabilityPackage
    {
      get
      {
        return _DependabilityPackage;
      }
      set
      {
        __isset.DependabilityPackage = true;
        this._DependabilityPackage = value;
      }
    }

    public TDDITARAPackage TARAPackage
    {
      get
      {
        return _TARAPackage;
      }
      set
      {
        __isset.TARAPackage = true;
        this._TARAPackage = value;
      }
    }

    public TDDIDomainPackage DomainPackage
    {
      get
      {
        return _DomainPackage;
      }
      set
      {
        __isset.DomainPackage = true;
        this._DomainPackage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool DesignPackage;
      public bool FailureLogicPackage;
      public bool RequirementPackage;
      public bool HARAPackage;
      public bool DependabilityPackage;
      public bool TARAPackage;
      public bool DomainPackage;
    }

    public TDDIODEProductPackageUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                DesignPackage = new TDDIDesignPackage();
                DesignPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                FailureLogicPackage = new TDDIFailureLogicPackage();
                FailureLogicPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                RequirementPackage = new TDDIRequirementPackage();
                RequirementPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                HARAPackage = new TDDIHARAPackage();
                HARAPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DependabilityPackage = new TDDIDependabilityPackage();
                DependabilityPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                TARAPackage = new TDDITARAPackage();
                TARAPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                DomainPackage = new TDDIDomainPackage();
                DomainPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIODEProductPackageUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DesignPackage != null && __isset.DesignPackage) {
          field.Name = "DesignPackage";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          DesignPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FailureLogicPackage != null && __isset.FailureLogicPackage) {
          field.Name = "FailureLogicPackage";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          FailureLogicPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RequirementPackage != null && __isset.RequirementPackage) {
          field.Name = "RequirementPackage";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          RequirementPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HARAPackage != null && __isset.HARAPackage) {
          field.Name = "HARAPackage";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          HARAPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DependabilityPackage != null && __isset.DependabilityPackage) {
          field.Name = "DependabilityPackage";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DependabilityPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TARAPackage != null && __isset.TARAPackage) {
          field.Name = "TARAPackage";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          TARAPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DomainPackage != null && __isset.DomainPackage) {
          field.Name = "DomainPackage";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          DomainPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIODEProductPackageUnion(");
      bool __first = true;
      if (DesignPackage != null && __isset.DesignPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DesignPackage: ");
        __sb.Append(DesignPackage== null ? "<null>" : DesignPackage.ToString());
      }
      if (FailureLogicPackage != null && __isset.FailureLogicPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureLogicPackage: ");
        __sb.Append(FailureLogicPackage== null ? "<null>" : FailureLogicPackage.ToString());
      }
      if (RequirementPackage != null && __isset.RequirementPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementPackage: ");
        __sb.Append(RequirementPackage);
      }
      if (HARAPackage != null && __isset.HARAPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HARAPackage: ");
        __sb.Append(HARAPackage== null ? "<null>" : HARAPackage.ToString());
      }
      if (DependabilityPackage != null && __isset.DependabilityPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityPackage: ");
        __sb.Append(DependabilityPackage== null ? "<null>" : DependabilityPackage.ToString());
      }
      if (TARAPackage != null && __isset.TARAPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TARAPackage: ");
        __sb.Append(TARAPackage);
      }
      if (DomainPackage != null && __isset.DomainPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DomainPackage: ");
        __sb.Append(DomainPackage== null ? "<null>" : DomainPackage.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
