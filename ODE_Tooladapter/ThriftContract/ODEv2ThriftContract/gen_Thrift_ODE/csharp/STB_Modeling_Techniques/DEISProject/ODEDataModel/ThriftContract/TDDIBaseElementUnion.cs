/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDIBaseElementUnion : TBase
  {
    private TDDIFailureModel _FailureModel;
    private TDDIMinimalCutSets _MinimalCutSets;
    private TDDIMinimalCutSet _MinimalCutSet;
    private TDDIAbstractFailure _Failure;
    private TDDIProbDist _ProbDist;
    private TDDIProbDistParam _ProbDistParam;
    private TDDIAbstractFMEAEntry _FMEAEntry;
    private TDDITransition _Transition;
    private TDDIState _State;
    private TDDIAbstractCause _Cause;
    private TDDIAbstractMeasure _Measure;
    private TDDIMeasureType _MeasureType;
    private TDDIMaintenanceProcedure _MaintenanceProcedure;
    private TDDIAbstractStandard _Standard;
    private TDDIAssuranceLevel _AssuranceLevel;
    private TDDIHazardType _HazardType;
    private TDDIHazardTypeSystem _HazardTypeSystem;
    private TDDIAbstractRiskParameter _RiskParameter;
    private TDDIHazard _Hazard;
    private TDDIRiskAssessment _RiskAssessment;
    private TDDIMalfunction _Malfunction;
    private TDDIAbstractThreatAgent _ThreatAgent;
    private TDDIAttackerGoal _AttackerGoal;
    private TDDISecurityRisk _SecurityRisk;
    private TDDIAbstractAttack _Attack;
    private TDDISecurityCapability _SecurityCapability;
    private TDDIAbstractAsset _Asset;
    private TDDIVulnerability _Vulnerability;
    private TDDIAbstractRequirementSource _RequirementSource;
    private TDDIAbstractDependabilityRequirement _DependabilityRequirement;
    private TDDIConfiguration _Configuration;
    private TDDIAbstractSystem _System;
    private TDDIAbstractFunction _Function;
    private TDDIPerfChars _PerfChars;
    private TDDISignal _Signal;
    private TDDIContext _Context;
    private TDDISystemBoundary _SystemBoundary;
    private TDDIPort _Port;
    private TDDILifecycleCondition _LifecycleCondition;
    private TDDIDesignPackage _DesignPackage;
    private TDDIFailureLogicPackage _FailureLogicPackage;
    private TDDIDependabilityPackage _DependabilityPackage;
    private TDDIRequirementPackage _RequirementPackage;
    private TDDIDomainPackage _DomainPackage;
    private TDDIHARAPackage _HARAPackage;
    private TDDITARAPackage _TARAPackage;
    private TDDIDDIPackage _DDIPackage;

    public TDDIFailureModel FailureModel
    {
      get
      {
        return _FailureModel;
      }
      set
      {
        __isset.FailureModel = true;
        this._FailureModel = value;
      }
    }

    public TDDIMinimalCutSets MinimalCutSets
    {
      get
      {
        return _MinimalCutSets;
      }
      set
      {
        __isset.MinimalCutSets = true;
        this._MinimalCutSets = value;
      }
    }

    public TDDIMinimalCutSet MinimalCutSet
    {
      get
      {
        return _MinimalCutSet;
      }
      set
      {
        __isset.MinimalCutSet = true;
        this._MinimalCutSet = value;
      }
    }

    public TDDIAbstractFailure Failure
    {
      get
      {
        return _Failure;
      }
      set
      {
        __isset.Failure = true;
        this._Failure = value;
      }
    }

    public TDDIProbDist ProbDist
    {
      get
      {
        return _ProbDist;
      }
      set
      {
        __isset.ProbDist = true;
        this._ProbDist = value;
      }
    }

    public TDDIProbDistParam ProbDistParam
    {
      get
      {
        return _ProbDistParam;
      }
      set
      {
        __isset.ProbDistParam = true;
        this._ProbDistParam = value;
      }
    }

    public TDDIAbstractFMEAEntry FMEAEntry
    {
      get
      {
        return _FMEAEntry;
      }
      set
      {
        __isset.FMEAEntry = true;
        this._FMEAEntry = value;
      }
    }

    public TDDITransition Transition
    {
      get
      {
        return _Transition;
      }
      set
      {
        __isset.Transition = true;
        this._Transition = value;
      }
    }

    public TDDIState State
    {
      get
      {
        return _State;
      }
      set
      {
        __isset.State = true;
        this._State = value;
      }
    }

    public TDDIAbstractCause Cause
    {
      get
      {
        return _Cause;
      }
      set
      {
        __isset.Cause = true;
        this._Cause = value;
      }
    }

    public TDDIAbstractMeasure Measure
    {
      get
      {
        return _Measure;
      }
      set
      {
        __isset.Measure = true;
        this._Measure = value;
      }
    }

    public TDDIMeasureType MeasureType
    {
      get
      {
        return _MeasureType;
      }
      set
      {
        __isset.MeasureType = true;
        this._MeasureType = value;
      }
    }

    public TDDIMaintenanceProcedure MaintenanceProcedure
    {
      get
      {
        return _MaintenanceProcedure;
      }
      set
      {
        __isset.MaintenanceProcedure = true;
        this._MaintenanceProcedure = value;
      }
    }

    public TDDIAbstractStandard Standard
    {
      get
      {
        return _Standard;
      }
      set
      {
        __isset.Standard = true;
        this._Standard = value;
      }
    }

    public TDDIAssuranceLevel AssuranceLevel
    {
      get
      {
        return _AssuranceLevel;
      }
      set
      {
        __isset.AssuranceLevel = true;
        this._AssuranceLevel = value;
      }
    }

    public TDDIHazardType HazardType
    {
      get
      {
        return _HazardType;
      }
      set
      {
        __isset.HazardType = true;
        this._HazardType = value;
      }
    }

    public TDDIHazardTypeSystem HazardTypeSystem
    {
      get
      {
        return _HazardTypeSystem;
      }
      set
      {
        __isset.HazardTypeSystem = true;
        this._HazardTypeSystem = value;
      }
    }

    public TDDIAbstractRiskParameter RiskParameter
    {
      get
      {
        return _RiskParameter;
      }
      set
      {
        __isset.RiskParameter = true;
        this._RiskParameter = value;
      }
    }

    public TDDIHazard Hazard
    {
      get
      {
        return _Hazard;
      }
      set
      {
        __isset.Hazard = true;
        this._Hazard = value;
      }
    }

    public TDDIRiskAssessment RiskAssessment
    {
      get
      {
        return _RiskAssessment;
      }
      set
      {
        __isset.RiskAssessment = true;
        this._RiskAssessment = value;
      }
    }

    public TDDIMalfunction Malfunction
    {
      get
      {
        return _Malfunction;
      }
      set
      {
        __isset.Malfunction = true;
        this._Malfunction = value;
      }
    }

    public TDDIAbstractThreatAgent ThreatAgent
    {
      get
      {
        return _ThreatAgent;
      }
      set
      {
        __isset.ThreatAgent = true;
        this._ThreatAgent = value;
      }
    }

    public TDDIAttackerGoal AttackerGoal
    {
      get
      {
        return _AttackerGoal;
      }
      set
      {
        __isset.AttackerGoal = true;
        this._AttackerGoal = value;
      }
    }

    public TDDISecurityRisk SecurityRisk
    {
      get
      {
        return _SecurityRisk;
      }
      set
      {
        __isset.SecurityRisk = true;
        this._SecurityRisk = value;
      }
    }

    public TDDIAbstractAttack Attack
    {
      get
      {
        return _Attack;
      }
      set
      {
        __isset.Attack = true;
        this._Attack = value;
      }
    }

    public TDDISecurityCapability SecurityCapability
    {
      get
      {
        return _SecurityCapability;
      }
      set
      {
        __isset.SecurityCapability = true;
        this._SecurityCapability = value;
      }
    }

    public TDDIAbstractAsset Asset
    {
      get
      {
        return _Asset;
      }
      set
      {
        __isset.Asset = true;
        this._Asset = value;
      }
    }

    public TDDIVulnerability Vulnerability
    {
      get
      {
        return _Vulnerability;
      }
      set
      {
        __isset.Vulnerability = true;
        this._Vulnerability = value;
      }
    }

    public TDDIAbstractRequirementSource RequirementSource
    {
      get
      {
        return _RequirementSource;
      }
      set
      {
        __isset.RequirementSource = true;
        this._RequirementSource = value;
      }
    }

    public TDDIAbstractDependabilityRequirement DependabilityRequirement
    {
      get
      {
        return _DependabilityRequirement;
      }
      set
      {
        __isset.DependabilityRequirement = true;
        this._DependabilityRequirement = value;
      }
    }

    public TDDIConfiguration Configuration
    {
      get
      {
        return _Configuration;
      }
      set
      {
        __isset.Configuration = true;
        this._Configuration = value;
      }
    }

    public TDDIAbstractSystem System
    {
      get
      {
        return _System;
      }
      set
      {
        __isset.System = true;
        this._System = value;
      }
    }

    public TDDIAbstractFunction Function
    {
      get
      {
        return _Function;
      }
      set
      {
        __isset.Function = true;
        this._Function = value;
      }
    }

    public TDDIPerfChars PerfChars
    {
      get
      {
        return _PerfChars;
      }
      set
      {
        __isset.PerfChars = true;
        this._PerfChars = value;
      }
    }

    public TDDISignal Signal
    {
      get
      {
        return _Signal;
      }
      set
      {
        __isset.Signal = true;
        this._Signal = value;
      }
    }

    public TDDIContext Context
    {
      get
      {
        return _Context;
      }
      set
      {
        __isset.Context = true;
        this._Context = value;
      }
    }

    public TDDISystemBoundary SystemBoundary
    {
      get
      {
        return _SystemBoundary;
      }
      set
      {
        __isset.SystemBoundary = true;
        this._SystemBoundary = value;
      }
    }

    public TDDIPort Port
    {
      get
      {
        return _Port;
      }
      set
      {
        __isset.Port = true;
        this._Port = value;
      }
    }

    public TDDILifecycleCondition LifecycleCondition
    {
      get
      {
        return _LifecycleCondition;
      }
      set
      {
        __isset.LifecycleCondition = true;
        this._LifecycleCondition = value;
      }
    }

    public TDDIDesignPackage DesignPackage
    {
      get
      {
        return _DesignPackage;
      }
      set
      {
        __isset.DesignPackage = true;
        this._DesignPackage = value;
      }
    }

    public TDDIFailureLogicPackage FailureLogicPackage
    {
      get
      {
        return _FailureLogicPackage;
      }
      set
      {
        __isset.FailureLogicPackage = true;
        this._FailureLogicPackage = value;
      }
    }

    public TDDIDependabilityPackage DependabilityPackage
    {
      get
      {
        return _DependabilityPackage;
      }
      set
      {
        __isset.DependabilityPackage = true;
        this._DependabilityPackage = value;
      }
    }

    public TDDIRequirementPackage RequirementPackage
    {
      get
      {
        return _RequirementPackage;
      }
      set
      {
        __isset.RequirementPackage = true;
        this._RequirementPackage = value;
      }
    }

    public TDDIDomainPackage DomainPackage
    {
      get
      {
        return _DomainPackage;
      }
      set
      {
        __isset.DomainPackage = true;
        this._DomainPackage = value;
      }
    }

    public TDDIHARAPackage HARAPackage
    {
      get
      {
        return _HARAPackage;
      }
      set
      {
        __isset.HARAPackage = true;
        this._HARAPackage = value;
      }
    }

    public TDDITARAPackage TARAPackage
    {
      get
      {
        return _TARAPackage;
      }
      set
      {
        __isset.TARAPackage = true;
        this._TARAPackage = value;
      }
    }

    public TDDIDDIPackage DDIPackage
    {
      get
      {
        return _DDIPackage;
      }
      set
      {
        __isset.DDIPackage = true;
        this._DDIPackage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool FailureModel;
      public bool MinimalCutSets;
      public bool MinimalCutSet;
      public bool Failure;
      public bool ProbDist;
      public bool ProbDistParam;
      public bool FMEAEntry;
      public bool Transition;
      public bool State;
      public bool Cause;
      public bool Measure;
      public bool MeasureType;
      public bool MaintenanceProcedure;
      public bool Standard;
      public bool AssuranceLevel;
      public bool HazardType;
      public bool HazardTypeSystem;
      public bool RiskParameter;
      public bool Hazard;
      public bool RiskAssessment;
      public bool Malfunction;
      public bool ThreatAgent;
      public bool AttackerGoal;
      public bool SecurityRisk;
      public bool Attack;
      public bool SecurityCapability;
      public bool Asset;
      public bool Vulnerability;
      public bool RequirementSource;
      public bool DependabilityRequirement;
      public bool Configuration;
      public bool System;
      public bool Function;
      public bool PerfChars;
      public bool Signal;
      public bool Context;
      public bool SystemBoundary;
      public bool Port;
      public bool LifecycleCondition;
      public bool DesignPackage;
      public bool FailureLogicPackage;
      public bool DependabilityPackage;
      public bool RequirementPackage;
      public bool DomainPackage;
      public bool HARAPackage;
      public bool TARAPackage;
      public bool DDIPackage;
    }

    public TDDIBaseElementUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                FailureModel = new TDDIFailureModel();
                FailureModel.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                MinimalCutSets = new TDDIMinimalCutSets();
                MinimalCutSets.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                MinimalCutSet = new TDDIMinimalCutSet();
                MinimalCutSet.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Failure = new TDDIAbstractFailure();
                Failure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                ProbDist = new TDDIProbDist();
                ProbDist.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                ProbDistParam = new TDDIProbDistParam();
                ProbDistParam.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                FMEAEntry = new TDDIAbstractFMEAEntry();
                FMEAEntry.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Struct) {
                Transition = new TDDITransition();
                Transition.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                State = new TDDIState();
                State.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                Cause = new TDDIAbstractCause();
                Cause.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                Measure = new TDDIAbstractMeasure();
                Measure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                MeasureType = new TDDIMeasureType();
                MeasureType.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                MaintenanceProcedure = new TDDIMaintenanceProcedure();
                MaintenanceProcedure.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Struct) {
                Standard = new TDDIAbstractStandard();
                Standard.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Struct) {
                AssuranceLevel = new TDDIAssuranceLevel();
                AssuranceLevel.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Struct) {
                HazardType = new TDDIHazardType();
                HazardType.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Struct) {
                HazardTypeSystem = new TDDIHazardTypeSystem();
                HazardTypeSystem.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Struct) {
                RiskParameter = new TDDIAbstractRiskParameter();
                RiskParameter.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.Struct) {
                Hazard = new TDDIHazard();
                Hazard.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Struct) {
                RiskAssessment = new TDDIRiskAssessment();
                RiskAssessment.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.Struct) {
                Malfunction = new TDDIMalfunction();
                Malfunction.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.Struct) {
                ThreatAgent = new TDDIAbstractThreatAgent();
                ThreatAgent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.Struct) {
                AttackerGoal = new TDDIAttackerGoal();
                AttackerGoal.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.Struct) {
                SecurityRisk = new TDDISecurityRisk();
                SecurityRisk.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.Struct) {
                Attack = new TDDIAbstractAttack();
                Attack.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 26:
              if (field.Type == TType.Struct) {
                SecurityCapability = new TDDISecurityCapability();
                SecurityCapability.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 27:
              if (field.Type == TType.Struct) {
                Asset = new TDDIAbstractAsset();
                Asset.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 28:
              if (field.Type == TType.Struct) {
                Vulnerability = new TDDIVulnerability();
                Vulnerability.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 29:
              if (field.Type == TType.Struct) {
                RequirementSource = new TDDIAbstractRequirementSource();
                RequirementSource.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.Struct) {
                DependabilityRequirement = new TDDIAbstractDependabilityRequirement();
                DependabilityRequirement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 31:
              if (field.Type == TType.Struct) {
                Configuration = new TDDIConfiguration();
                Configuration.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 32:
              if (field.Type == TType.Struct) {
                System = new TDDIAbstractSystem();
                System.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 33:
              if (field.Type == TType.Struct) {
                Function = new TDDIAbstractFunction();
                Function.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 34:
              if (field.Type == TType.Struct) {
                PerfChars = new TDDIPerfChars();
                PerfChars.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 35:
              if (field.Type == TType.Struct) {
                Signal = new TDDISignal();
                Signal.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 36:
              if (field.Type == TType.Struct) {
                Context = new TDDIContext();
                Context.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 37:
              if (field.Type == TType.Struct) {
                SystemBoundary = new TDDISystemBoundary();
                SystemBoundary.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 38:
              if (field.Type == TType.Struct) {
                Port = new TDDIPort();
                Port.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 39:
              if (field.Type == TType.Struct) {
                LifecycleCondition = new TDDILifecycleCondition();
                LifecycleCondition.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.Struct) {
                DesignPackage = new TDDIDesignPackage();
                DesignPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 41:
              if (field.Type == TType.Struct) {
                FailureLogicPackage = new TDDIFailureLogicPackage();
                FailureLogicPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 42:
              if (field.Type == TType.Struct) {
                DependabilityPackage = new TDDIDependabilityPackage();
                DependabilityPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 43:
              if (field.Type == TType.Struct) {
                RequirementPackage = new TDDIRequirementPackage();
                RequirementPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 44:
              if (field.Type == TType.Struct) {
                DomainPackage = new TDDIDomainPackage();
                DomainPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 45:
              if (field.Type == TType.Struct) {
                HARAPackage = new TDDIHARAPackage();
                HARAPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 46:
              if (field.Type == TType.Struct) {
                TARAPackage = new TDDITARAPackage();
                TARAPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 47:
              if (field.Type == TType.Struct) {
                DDIPackage = new TDDIDDIPackage();
                DDIPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDIBaseElementUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FailureModel != null && __isset.FailureModel) {
          field.Name = "FailureModel";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          FailureModel.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MinimalCutSets != null && __isset.MinimalCutSets) {
          field.Name = "MinimalCutSets";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          MinimalCutSets.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MinimalCutSet != null && __isset.MinimalCutSet) {
          field.Name = "MinimalCutSet";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          MinimalCutSet.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Failure != null && __isset.Failure) {
          field.Name = "Failure";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Failure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ProbDist != null && __isset.ProbDist) {
          field.Name = "ProbDist";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          ProbDist.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ProbDistParam != null && __isset.ProbDistParam) {
          field.Name = "ProbDistParam";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          ProbDistParam.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FMEAEntry != null && __isset.FMEAEntry) {
          field.Name = "FMEAEntry";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          FMEAEntry.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Transition != null && __isset.Transition) {
          field.Name = "Transition";
          field.Type = TType.Struct;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          Transition.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (State != null && __isset.State) {
          field.Name = "State";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          State.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Cause != null && __isset.Cause) {
          field.Name = "Cause";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          Cause.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Measure != null && __isset.Measure) {
          field.Name = "Measure";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          Measure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MeasureType != null && __isset.MeasureType) {
          field.Name = "MeasureType";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          MeasureType.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (MaintenanceProcedure != null && __isset.MaintenanceProcedure) {
          field.Name = "MaintenanceProcedure";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          MaintenanceProcedure.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Standard != null && __isset.Standard) {
          field.Name = "Standard";
          field.Type = TType.Struct;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          Standard.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AssuranceLevel != null && __isset.AssuranceLevel) {
          field.Name = "AssuranceLevel";
          field.Type = TType.Struct;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          AssuranceLevel.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HazardType != null && __isset.HazardType) {
          field.Name = "HazardType";
          field.Type = TType.Struct;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          HazardType.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HazardTypeSystem != null && __isset.HazardTypeSystem) {
          field.Name = "HazardTypeSystem";
          field.Type = TType.Struct;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          HazardTypeSystem.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RiskParameter != null && __isset.RiskParameter) {
          field.Name = "RiskParameter";
          field.Type = TType.Struct;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          RiskParameter.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Hazard != null && __isset.Hazard) {
          field.Name = "Hazard";
          field.Type = TType.Struct;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          Hazard.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RiskAssessment != null && __isset.RiskAssessment) {
          field.Name = "RiskAssessment";
          field.Type = TType.Struct;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          RiskAssessment.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Malfunction != null && __isset.Malfunction) {
          field.Name = "Malfunction";
          field.Type = TType.Struct;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          Malfunction.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ThreatAgent != null && __isset.ThreatAgent) {
          field.Name = "ThreatAgent";
          field.Type = TType.Struct;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          ThreatAgent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AttackerGoal != null && __isset.AttackerGoal) {
          field.Name = "AttackerGoal";
          field.Type = TType.Struct;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          AttackerGoal.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SecurityRisk != null && __isset.SecurityRisk) {
          field.Name = "SecurityRisk";
          field.Type = TType.Struct;
          field.ID = 24;
          oprot.WriteFieldBegin(field);
          SecurityRisk.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Attack != null && __isset.Attack) {
          field.Name = "Attack";
          field.Type = TType.Struct;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          Attack.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SecurityCapability != null && __isset.SecurityCapability) {
          field.Name = "SecurityCapability";
          field.Type = TType.Struct;
          field.ID = 26;
          oprot.WriteFieldBegin(field);
          SecurityCapability.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Asset != null && __isset.Asset) {
          field.Name = "Asset";
          field.Type = TType.Struct;
          field.ID = 27;
          oprot.WriteFieldBegin(field);
          Asset.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Vulnerability != null && __isset.Vulnerability) {
          field.Name = "Vulnerability";
          field.Type = TType.Struct;
          field.ID = 28;
          oprot.WriteFieldBegin(field);
          Vulnerability.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RequirementSource != null && __isset.RequirementSource) {
          field.Name = "RequirementSource";
          field.Type = TType.Struct;
          field.ID = 29;
          oprot.WriteFieldBegin(field);
          RequirementSource.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DependabilityRequirement != null && __isset.DependabilityRequirement) {
          field.Name = "DependabilityRequirement";
          field.Type = TType.Struct;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          DependabilityRequirement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Configuration != null && __isset.Configuration) {
          field.Name = "Configuration";
          field.Type = TType.Struct;
          field.ID = 31;
          oprot.WriteFieldBegin(field);
          Configuration.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (System != null && __isset.System) {
          field.Name = "System";
          field.Type = TType.Struct;
          field.ID = 32;
          oprot.WriteFieldBegin(field);
          System.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Function != null && __isset.Function) {
          field.Name = "Function";
          field.Type = TType.Struct;
          field.ID = 33;
          oprot.WriteFieldBegin(field);
          Function.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PerfChars != null && __isset.PerfChars) {
          field.Name = "PerfChars";
          field.Type = TType.Struct;
          field.ID = 34;
          oprot.WriteFieldBegin(field);
          PerfChars.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Signal != null && __isset.Signal) {
          field.Name = "Signal";
          field.Type = TType.Struct;
          field.ID = 35;
          oprot.WriteFieldBegin(field);
          Signal.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Context != null && __isset.Context) {
          field.Name = "Context";
          field.Type = TType.Struct;
          field.ID = 36;
          oprot.WriteFieldBegin(field);
          Context.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SystemBoundary != null && __isset.SystemBoundary) {
          field.Name = "SystemBoundary";
          field.Type = TType.Struct;
          field.ID = 37;
          oprot.WriteFieldBegin(field);
          SystemBoundary.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Port != null && __isset.Port) {
          field.Name = "Port";
          field.Type = TType.Struct;
          field.ID = 38;
          oprot.WriteFieldBegin(field);
          Port.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LifecycleCondition != null && __isset.LifecycleCondition) {
          field.Name = "LifecycleCondition";
          field.Type = TType.Struct;
          field.ID = 39;
          oprot.WriteFieldBegin(field);
          LifecycleCondition.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DesignPackage != null && __isset.DesignPackage) {
          field.Name = "DesignPackage";
          field.Type = TType.Struct;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          DesignPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (FailureLogicPackage != null && __isset.FailureLogicPackage) {
          field.Name = "FailureLogicPackage";
          field.Type = TType.Struct;
          field.ID = 41;
          oprot.WriteFieldBegin(field);
          FailureLogicPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DependabilityPackage != null && __isset.DependabilityPackage) {
          field.Name = "DependabilityPackage";
          field.Type = TType.Struct;
          field.ID = 42;
          oprot.WriteFieldBegin(field);
          DependabilityPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RequirementPackage != null && __isset.RequirementPackage) {
          field.Name = "RequirementPackage";
          field.Type = TType.Struct;
          field.ID = 43;
          oprot.WriteFieldBegin(field);
          RequirementPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DomainPackage != null && __isset.DomainPackage) {
          field.Name = "DomainPackage";
          field.Type = TType.Struct;
          field.ID = 44;
          oprot.WriteFieldBegin(field);
          DomainPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (HARAPackage != null && __isset.HARAPackage) {
          field.Name = "HARAPackage";
          field.Type = TType.Struct;
          field.ID = 45;
          oprot.WriteFieldBegin(field);
          HARAPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TARAPackage != null && __isset.TARAPackage) {
          field.Name = "TARAPackage";
          field.Type = TType.Struct;
          field.ID = 46;
          oprot.WriteFieldBegin(field);
          TARAPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (DDIPackage != null && __isset.DDIPackage) {
          field.Name = "DDIPackage";
          field.Type = TType.Struct;
          field.ID = 47;
          oprot.WriteFieldBegin(field);
          DDIPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDIBaseElementUnion(");
      bool __first = true;
      if (FailureModel != null && __isset.FailureModel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureModel: ");
        __sb.Append(FailureModel);
      }
      if (MinimalCutSets != null && __isset.MinimalCutSets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MinimalCutSets: ");
        __sb.Append(MinimalCutSets);
      }
      if (MinimalCutSet != null && __isset.MinimalCutSet) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MinimalCutSet: ");
        __sb.Append(MinimalCutSet);
      }
      if (Failure != null && __isset.Failure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Failure: ");
        __sb.Append(Failure);
      }
      if (ProbDist != null && __isset.ProbDist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProbDist: ");
        __sb.Append(ProbDist);
      }
      if (ProbDistParam != null && __isset.ProbDistParam) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProbDistParam: ");
        __sb.Append(ProbDistParam);
      }
      if (FMEAEntry != null && __isset.FMEAEntry) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FMEAEntry: ");
        __sb.Append(FMEAEntry);
      }
      if (Transition != null && __isset.Transition) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Transition: ");
        __sb.Append(Transition);
      }
      if (State != null && __isset.State) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("State: ");
        __sb.Append(State);
      }
      if (Cause != null && __isset.Cause) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cause: ");
        __sb.Append(Cause);
      }
      if (Measure != null && __isset.Measure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Measure: ");
        __sb.Append(Measure);
      }
      if (MeasureType != null && __isset.MeasureType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MeasureType: ");
        __sb.Append(MeasureType);
      }
      if (MaintenanceProcedure != null && __isset.MaintenanceProcedure) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaintenanceProcedure: ");
        __sb.Append(MaintenanceProcedure);
      }
      if (Standard != null && __isset.Standard) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Standard: ");
        __sb.Append(Standard);
      }
      if (AssuranceLevel != null && __isset.AssuranceLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AssuranceLevel: ");
        __sb.Append(AssuranceLevel);
      }
      if (HazardType != null && __isset.HazardType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HazardType: ");
        __sb.Append(HazardType);
      }
      if (HazardTypeSystem != null && __isset.HazardTypeSystem) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HazardTypeSystem: ");
        __sb.Append(HazardTypeSystem);
      }
      if (RiskParameter != null && __isset.RiskParameter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RiskParameter: ");
        __sb.Append(RiskParameter);
      }
      if (Hazard != null && __isset.Hazard) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hazard: ");
        __sb.Append(Hazard);
      }
      if (RiskAssessment != null && __isset.RiskAssessment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RiskAssessment: ");
        __sb.Append(RiskAssessment);
      }
      if (Malfunction != null && __isset.Malfunction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Malfunction: ");
        __sb.Append(Malfunction);
      }
      if (ThreatAgent != null && __isset.ThreatAgent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThreatAgent: ");
        __sb.Append(ThreatAgent);
      }
      if (AttackerGoal != null && __isset.AttackerGoal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttackerGoal: ");
        __sb.Append(AttackerGoal);
      }
      if (SecurityRisk != null && __isset.SecurityRisk) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SecurityRisk: ");
        __sb.Append(SecurityRisk);
      }
      if (Attack != null && __isset.Attack) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attack: ");
        __sb.Append(Attack);
      }
      if (SecurityCapability != null && __isset.SecurityCapability) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SecurityCapability: ");
        __sb.Append(SecurityCapability);
      }
      if (Asset != null && __isset.Asset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Asset: ");
        __sb.Append(Asset);
      }
      if (Vulnerability != null && __isset.Vulnerability) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vulnerability: ");
        __sb.Append(Vulnerability);
      }
      if (RequirementSource != null && __isset.RequirementSource) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementSource: ");
        __sb.Append(RequirementSource);
      }
      if (DependabilityRequirement != null && __isset.DependabilityRequirement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityRequirement: ");
        __sb.Append(DependabilityRequirement);
      }
      if (Configuration != null && __isset.Configuration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Configuration: ");
        __sb.Append(Configuration);
      }
      if (System != null && __isset.System) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("System: ");
        __sb.Append(System);
      }
      if (Function != null && __isset.Function) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Function: ");
        __sb.Append(Function);
      }
      if (PerfChars != null && __isset.PerfChars) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PerfChars: ");
        __sb.Append(PerfChars);
      }
      if (Signal != null && __isset.Signal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signal: ");
        __sb.Append(Signal);
      }
      if (Context != null && __isset.Context) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Context: ");
        __sb.Append(Context);
      }
      if (SystemBoundary != null && __isset.SystemBoundary) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SystemBoundary: ");
        __sb.Append(SystemBoundary);
      }
      if (Port != null && __isset.Port) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Port: ");
        __sb.Append(Port);
      }
      if (LifecycleCondition != null && __isset.LifecycleCondition) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LifecycleCondition: ");
        __sb.Append(LifecycleCondition);
      }
      if (DesignPackage != null && __isset.DesignPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DesignPackage: ");
        __sb.Append(DesignPackage);
      }
      if (FailureLogicPackage != null && __isset.FailureLogicPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FailureLogicPackage: ");
        __sb.Append(FailureLogicPackage);
      }
      if (DependabilityPackage != null && __isset.DependabilityPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DependabilityPackage: ");
        __sb.Append(DependabilityPackage);
      }
      if (RequirementPackage != null && __isset.RequirementPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequirementPackage: ");
        __sb.Append(RequirementPackage);
      }
      if (DomainPackage != null && __isset.DomainPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DomainPackage: ");
        __sb.Append(DomainPackage);
      }
      if (HARAPackage != null && __isset.HARAPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HARAPackage: ");
        __sb.Append(HARAPackage);
      }
      if (TARAPackage != null && __isset.TARAPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TARAPackage: ");
        __sb.Append(TARAPackage);
      }
      if (DDIPackage != null && __isset.DDIPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DDIPackage: ");
        __sb.Append(DDIPackage);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
