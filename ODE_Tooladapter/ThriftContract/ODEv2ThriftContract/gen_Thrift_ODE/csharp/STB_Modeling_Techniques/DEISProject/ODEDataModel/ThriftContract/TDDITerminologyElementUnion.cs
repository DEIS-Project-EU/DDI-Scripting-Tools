/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace STB_Modeling_Techniques.DEISProject.ODEDataModel.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDDITerminologyElementUnion : TBase
  {
    private TDDITerminologyGroup _TerminologyGroup;
    private TDDIAbstractTerminologyPackage _TerminologyPackage;
    private TDDIAbstractTerminologyAsset _TerminologyAsset;

    public TDDITerminologyGroup TerminologyGroup
    {
      get
      {
        return _TerminologyGroup;
      }
      set
      {
        __isset.TerminologyGroup = true;
        this._TerminologyGroup = value;
      }
    }

    public TDDIAbstractTerminologyPackage TerminologyPackage
    {
      get
      {
        return _TerminologyPackage;
      }
      set
      {
        __isset.TerminologyPackage = true;
        this._TerminologyPackage = value;
      }
    }

    public TDDIAbstractTerminologyAsset TerminologyAsset
    {
      get
      {
        return _TerminologyAsset;
      }
      set
      {
        __isset.TerminologyAsset = true;
        this._TerminologyAsset = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool TerminologyGroup;
      public bool TerminologyPackage;
      public bool TerminologyAsset;
    }

    public TDDITerminologyElementUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TerminologyGroup = new TDDITerminologyGroup();
                TerminologyGroup.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                TerminologyPackage = new TDDIAbstractTerminologyPackage();
                TerminologyPackage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                TerminologyAsset = new TDDIAbstractTerminologyAsset();
                TerminologyAsset.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDDITerminologyElementUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TerminologyGroup != null && __isset.TerminologyGroup) {
          field.Name = "TerminologyGroup";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TerminologyGroup.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TerminologyPackage != null && __isset.TerminologyPackage) {
          field.Name = "TerminologyPackage";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          TerminologyPackage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TerminologyAsset != null && __isset.TerminologyAsset) {
          field.Name = "TerminologyAsset";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          TerminologyAsset.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDDITerminologyElementUnion(");
      bool __first = true;
      if (TerminologyGroup != null && __isset.TerminologyGroup) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TerminologyGroup: ");
        __sb.Append(TerminologyGroup);
      }
      if (TerminologyPackage != null && __isset.TerminologyPackage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TerminologyPackage: ");
        __sb.Append(TerminologyPackage);
      }
      if (TerminologyAsset != null && __isset.TerminologyAsset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TerminologyAsset: ");
        __sb.Append(TerminologyAsset);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
