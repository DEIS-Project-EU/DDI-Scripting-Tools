/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mergedDDIThriftContract_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thriftContract {

int _kTDDITimeUnitValues[] = {
  TUMillisecond,
  TUSecond,
  TUMinute,
  TUHour,
  TUDay,
  TUWeek,
  TUMonth,
  TUYear
};
const char* _kTDDITimeUnitNames[] = {
  "TUMillisecond",
  "TUSecond",
  "TUMinute",
  "TUHour",
  "TUDay",
  "TUWeek",
  "TUMonth",
  "TUYear"
};
const std::map<int, const char*> _TDDITimeUnit_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTDDITimeUnitValues, _kTDDITimeUnitNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDITimeUnit val) {
  std::map<int, const char*>::const_iterator it = _TDDITimeUnit_VALUES_TO_NAMES.find(val);
  if (it != _TDDITimeUnit_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIBaseElementUnionTypeValues[] = {
  BEUTConfiguration,
  BEUTSystem,
  BEUTFunction,
  BEUTPerfChars,
  BEUTSignal,
  BEUTContext,
  BEUTSystemBoundary,
  BEUTPort,
  BEUTLifecycleCondition,
  BEUTDesignPackage,
  BEUTMinimalCutSet,
  BEUTMinimalCutSets,
  BEUTFailureModel,
  BEUTFailure,
  BEUTProbDist,
  BEUTProbDistParam,
  BEUTFailureLogicPackage,
  BEUTTransition,
  BEUTState,
  BEUTCause,
  BEUTFMEAEntry,
  BEUTMeasure,
  BEUTMeasureType,
  BEUTMaintenanceProcedure,
  BEUTDependabilityPackage,
  BEUTAbstractRequirementSource,
  BEUTAbstractDependabilityRequirement,
  BEUTRequirementPackage,
  BEUTHazard,
  BEUTMalfunction,
  BEUTHazardType,
  BEUTHazardTypeSystem,
  BEUTRiskAssessment,
  BEUTRiskParameter,
  BEUTHARAPackage,
  BEUTThreatAgent,
  BEUTAttackerGoal,
  BEUTSecurityRisk,
  BEUTAttack,
  BEUTSecurityCapability,
  BEUTAsset,
  BEUTVulnerability,
  BEUTTARAPackage,
  BEUTStandard,
  BEUTAssuranceLevel,
  BEUTDomainPackage
};
const char* _kTDDIBaseElementUnionTypeNames[] = {
  "BEUTConfiguration",
  "BEUTSystem",
  "BEUTFunction",
  "BEUTPerfChars",
  "BEUTSignal",
  "BEUTContext",
  "BEUTSystemBoundary",
  "BEUTPort",
  "BEUTLifecycleCondition",
  "BEUTDesignPackage",
  "BEUTMinimalCutSet",
  "BEUTMinimalCutSets",
  "BEUTFailureModel",
  "BEUTFailure",
  "BEUTProbDist",
  "BEUTProbDistParam",
  "BEUTFailureLogicPackage",
  "BEUTTransition",
  "BEUTState",
  "BEUTCause",
  "BEUTFMEAEntry",
  "BEUTMeasure",
  "BEUTMeasureType",
  "BEUTMaintenanceProcedure",
  "BEUTDependabilityPackage",
  "BEUTAbstractRequirementSource",
  "BEUTAbstractDependabilityRequirement",
  "BEUTRequirementPackage",
  "BEUTHazard",
  "BEUTMalfunction",
  "BEUTHazardType",
  "BEUTHazardTypeSystem",
  "BEUTRiskAssessment",
  "BEUTRiskParameter",
  "BEUTHARAPackage",
  "BEUTThreatAgent",
  "BEUTAttackerGoal",
  "BEUTSecurityRisk",
  "BEUTAttack",
  "BEUTSecurityCapability",
  "BEUTAsset",
  "BEUTVulnerability",
  "BEUTTARAPackage",
  "BEUTStandard",
  "BEUTAssuranceLevel",
  "BEUTDomainPackage"
};
const std::map<int, const char*> _TDDIBaseElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(46, _kTDDIBaseElementUnionTypeValues, _kTDDIBaseElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIBaseElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIBaseElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIBaseElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIODEProductPackageUnionTypeValues[] = {
  OPPUTDesignPackage,
  OPPUTFailureLogicPackage,
  OPPUTRequirementPackage,
  OPPUTHARAPackage,
  OPPUTDependabilityPackage,
  OPPUTTARAPackage,
  OPPUTDomainPackage
};
const char* _kTDDIODEProductPackageUnionTypeNames[] = {
  "OPPUTDesignPackage",
  "OPPUTFailureLogicPackage",
  "OPPUTRequirementPackage",
  "OPPUTHARAPackage",
  "OPPUTDependabilityPackage",
  "OPPUTTARAPackage",
  "OPPUTDomainPackage"
};
const std::map<int, const char*> _TDDIODEProductPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTDDIODEProductPackageUnionTypeValues, _kTDDIODEProductPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIODEProductPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIODEProductPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIODEProductPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIPortDirectionValues[] = {
  PDIN,
  PDOUT,
  PDINOUT
};
const char* _kTDDIPortDirectionNames[] = {
  "PDIN",
  "PDOUT",
  "PDINOUT"
};
const std::map<int, const char*> _TDDIPortDirection_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIPortDirectionValues, _kTDDIPortDirectionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIPortDirection val) {
  std::map<int, const char*>::const_iterator it = _TDDIPortDirection_VALUES_TO_NAMES.find(val);
  if (it != _TDDIPortDirection_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDISystemUnionTypeValues[] = {
  SUTSystem,
  SUTPhysicalComponent,
  SUTLogicalComponent,
  SUTSafetyRelatedSystem
};
const char* _kTDDISystemUnionTypeNames[] = {
  "SUTSystem",
  "SUTPhysicalComponent",
  "SUTLogicalComponent",
  "SUTSafetyRelatedSystem"
};
const std::map<int, const char*> _TDDISystemUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDISystemUnionTypeValues, _kTDDISystemUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDISystemUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDISystemUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDISystemUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFunctionUnionTypeValues[] = {
  FUTFunction,
  FUTSafetyFunction
};
const char* _kTDDIFunctionUnionTypeNames[] = {
  "FUTFunction",
  "FUTSafetyFunction"
};
const std::map<int, const char*> _TDDIFunctionUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIFunctionUnionTypeValues, _kTDDIFunctionUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFunctionUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFunctionUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFunctionUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFailureOriginTypeValues[] = {
  FOTInput,
  FOTOutput,
  FOTInternal
};
const char* _kTDDIFailureOriginTypeNames[] = {
  "FOTInput",
  "FOTOutput",
  "FOTInternal"
};
const std::map<int, const char*> _TDDIFailureOriginType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIFailureOriginTypeValues, _kTDDIFailureOriginTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFailureOriginType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFailureOriginType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFailureOriginType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFailureUnionTypeValues[] = {
  FAILUTFailure,
  FAILUTSecurityViolation
};
const char* _kTDDIFailureUnionTypeNames[] = {
  "FAILUTFailure",
  "FAILUTSecurityViolation"
};
const std::map<int, const char*> _TDDIFailureUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIFailureUnionTypeValues, _kTDDIFailureUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFailureUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFailureUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFailureUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFailureModelUnionTypeValues[] = {
  FAMUTFailureModel,
  FAMUTMarkovChain,
  FAMUTFaultTree,
  FAMUTFMEA
};
const char* _kTDDIFailureModelUnionTypeNames[] = {
  "FAMUTFailureModel",
  "FAMUTMarkovChain",
  "FAMUTFaultTree",
  "FAMUTFMEA"
};
const std::map<int, const char*> _TDDIFailureModelUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDIFailureModelUnionTypeValues, _kTDDIFailureModelUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFailureModelUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFailureModelUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFailureModelUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIGateTypeValues[] = {
  GTOR,
  GTAND,
  GTNOT,
  GTXOR,
  GTVOTE,
  GTPAND,
  GTPOR,
  GTSAND,
  InputEvent,
  OutputEvent
};
const char* _kTDDIGateTypeNames[] = {
  "GTOR",
  "GTAND",
  "GTNOT",
  "GTXOR",
  "GTVOTE",
  "GTPAND",
  "GTPOR",
  "GTSAND",
  "InputEvent",
  "OutputEvent"
};
const std::map<int, const char*> _TDDIGateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kTDDIGateTypeValues, _kTDDIGateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIGateType val) {
  std::map<int, const char*>::const_iterator it = _TDDIGateType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIGateType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDICauseTypeValues[] = {
  CTInputEvent,
  CTOutputEvent,
  CTBasicEvent,
  CTGate
};
const char* _kTDDICauseTypeNames[] = {
  "CTInputEvent",
  "CTOutputEvent",
  "CTBasicEvent",
  "CTGate"
};
const std::map<int, const char*> _TDDICauseType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDICauseTypeValues, _kTDDICauseTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDICauseType val) {
  std::map<int, const char*>::const_iterator it = _TDDICauseType_VALUES_TO_NAMES.find(val);
  if (it != _TDDICauseType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDICauseUnionTypeValues[] = {
  CUTCause,
  CutGate
};
const char* _kTDDICauseUnionTypeNames[] = {
  "CUTCause",
  "CutGate"
};
const std::map<int, const char*> _TDDICauseUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDICauseUnionTypeValues, _kTDDICauseUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDICauseUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDICauseUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDICauseUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFMEAEntryUnionTypeValues[] = {
  FMEAEUTFMEAEntry,
  FMEAEUTFMEDAEntry
};
const char* _kTDDIFMEAEntryUnionTypeNames[] = {
  "FMEAEUTFMEAEntry",
  "FMEAEUTFMEDAEntry"
};
const std::map<int, const char*> _TDDIFMEAEntryUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIFMEAEntryUnionTypeValues, _kTDDIFMEAEntryUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFMEAEntryUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFMEAEntryUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFMEAEntryUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFMEATypeValues[] = {
  FMEA,
  FMEDA
};
const char* _kTDDIFMEATypeNames[] = {
  "FMEA",
  "FMEDA"
};
const std::map<int, const char*> _TDDIFMEAType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIFMEATypeValues, _kTDDIFMEATypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFMEAType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFMEAType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFMEAType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIMeasureUnionTypeValues[] = {
  MUTMeasure,
  MUTFaultToleranceMeasure,
  MUTSecurityControl
};
const char* _kTDDIMeasureUnionTypeNames[] = {
  "MUTMeasure",
  "MUTFaultToleranceMeasure",
  "MUTSecurityControl"
};
const std::map<int, const char*> _TDDIMeasureUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIMeasureUnionTypeValues, _kTDDIMeasureUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIMeasureUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIMeasureUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIMeasureUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIStandardUnionTypeValues[] = {
  SUTStandard,
  SUTSafetyStandard
};
const char* _kTDDIStandardUnionTypeNames[] = {
  "SUTStandard",
  "SUTSafetyStandard"
};
const std::map<int, const char*> _TDDIStandardUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIStandardUnionTypeValues, _kTDDIStandardUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIStandardUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIStandardUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIStandardUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIRiskParameterUnionTypeValues[] = {
  RPUTRiskParameter,
  RPUTSituation,
  RPUTAccident,
  RPUTOperatorMeasure
};
const char* _kTDDIRiskParameterUnionTypeNames[] = {
  "RPUTRiskParameter",
  "RPUTSituation",
  "RPUTAccident",
  "RPUTOperatorMeasure"
};
const std::map<int, const char*> _TDDIRiskParameterUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDIRiskParameterUnionTypeValues, _kTDDIRiskParameterUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIRiskParameterUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIRiskParameterUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIRiskParameterUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIRequirementSourceUnionTypeValues[] = {
  RSUTLegalContract
};
const char* _kTDDIRequirementSourceUnionTypeNames[] = {
  "RSUTLegalContract"
};
const std::map<int, const char*> _TDDIRequirementSourceUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTDDIRequirementSourceUnionTypeValues, _kTDDIRequirementSourceUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIRequirementSourceUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIRequirementSourceUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIRequirementSourceUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIDependabilityRequirementUnionTypeValues[] = {
  DRUTSafetyRequirement,
  DRUTSecurityRequirement
};
const char* _kTDDIDependabilityRequirementUnionTypeNames[] = {
  "DRUTSafetyRequirement",
  "DRUTSecurityRequirement"
};
const std::map<int, const char*> _TDDIDependabilityRequirementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIDependabilityRequirementUnionTypeValues, _kTDDIDependabilityRequirementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityRequirementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIDependabilityRequirementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIDependabilityRequirementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIFinancialCostTypeValues[] = {
  FCTUSD,
  FCTEUR,
  FCTGBP
};
const char* _kTDDIFinancialCostTypeNames[] = {
  "FCTUSD",
  "FCTEUR",
  "FCTGBP"
};
const std::map<int, const char*> _TDDIFinancialCostType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIFinancialCostTypeValues, _kTDDIFinancialCostTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIFinancialCostType val) {
  std::map<int, const char*>::const_iterator it = _TDDIFinancialCostType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIFinancialCostType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDISecurityApplicationTypeValues[] = {
  SATPreventive,
  SATActive,
  SATPassive
};
const char* _kTDDISecurityApplicationTypeNames[] = {
  "SATPreventive",
  "SATActive",
  "SATPassive"
};
const std::map<int, const char*> _TDDISecurityApplicationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDISecurityApplicationTypeValues, _kTDDISecurityApplicationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDISecurityApplicationType val) {
  std::map<int, const char*>::const_iterator it = _TDDISecurityApplicationType_VALUES_TO_NAMES.find(val);
  if (it != _TDDISecurityApplicationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIOperationalCostTypeValues[] = {
  OCTWorkhours,
  OCTWorkdays,
  OCTWorkmonths
};
const char* _kTDDIOperationalCostTypeNames[] = {
  "OCTWorkhours",
  "OCTWorkdays",
  "OCTWorkmonths"
};
const std::map<int, const char*> _TDDIOperationalCostType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIOperationalCostTypeValues, _kTDDIOperationalCostTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIOperationalCostType val) {
  std::map<int, const char*>::const_iterator it = _TDDIOperationalCostType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIOperationalCostType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAbstractAssetUnionTypeValues[] = {
  AAUTAsset,
  AAUTVulnerableItem
};
const char* _kTDDIAbstractAssetUnionTypeNames[] = {
  "AAUTAsset",
  "AAUTVulnerableItem"
};
const std::map<int, const char*> _TDDIAbstractAssetUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIAbstractAssetUnionTypeValues, _kTDDIAbstractAssetUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssetUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAbstractAssetUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAbstractAssetUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAbstractThreatAgentUnionTypeValues[] = {
  ATAUTThreatAgent,
  ATAUTHuman,
  ATAUTNonHuman
};
const char* _kTDDIAbstractThreatAgentUnionTypeNames[] = {
  "ATAUTThreatAgent",
  "ATAUTHuman",
  "ATAUTNonHuman"
};
const std::map<int, const char*> _TDDIAbstractThreatAgentUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIAbstractThreatAgentUnionTypeValues, _kTDDIAbstractThreatAgentUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAbstractThreatAgentUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAbstractThreatAgentUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAbstractThreatAgentUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAbstractAttackUnionTypeValues[] = {
  AAUTAttack,
  AAUTAction,
  AAUTPayload
};
const char* _kTDDIAbstractAttackUnionTypeNames[] = {
  "AAUTAttack",
  "AAUTAction",
  "AAUTPayload"
};
const std::map<int, const char*> _TDDIAbstractAttackUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIAbstractAttackUnionTypeValues, _kTDDIAbstractAttackUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAttackUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAbstractAttackUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAbstractAttackUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAssertionDeclarationValues[] = {
  ADAsserted,
  ADNeedsSupport,
  ADAssumed,
  ADAxiomatic,
  ADDefeated,
  ADAsCited
};
const char* _kTDDIAssertionDeclarationNames[] = {
  "ADAsserted",
  "ADNeedsSupport",
  "ADAssumed",
  "ADAxiomatic",
  "ADDefeated",
  "ADAsCited"
};
const std::map<int, const char*> _TDDIAssertionDeclaration_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTDDIAssertionDeclarationValues, _kTDDIAssertionDeclarationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAssertionDeclaration val) {
  std::map<int, const char*>::const_iterator it = _TDDIAssertionDeclaration_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAssertionDeclaration_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArgumentationElementUnionTypeValues[] = {
  AEUTArgumentGroup,
  AEUTAbstractArgumentPackage,
  AEUTAbstractArgumentAsset
};
const char* _kTDDIArgumentationElementUnionTypeNames[] = {
  "AEUTArgumentGroup",
  "AEUTAbstractArgumentPackage",
  "AEUTAbstractArgumentAsset"
};
const std::map<int, const char*> _TDDIArgumentationElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArgumentationElementUnionTypeValues, _kTDDIArgumentationElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArgumentationElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArgumentationElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArgumentationElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArgumentPackageUnionTypeValues[] = {
  APUTArgumentPackage,
  APUTArgumentPackageInterface,
  APUTArgumentPackageBinding
};
const char* _kTDDIArgumentPackageUnionTypeNames[] = {
  "APUTArgumentPackage",
  "APUTArgumentPackageInterface",
  "APUTArgumentPackageBinding"
};
const std::map<int, const char*> _TDDIArgumentPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArgumentPackageUnionTypeValues, _kTDDIArgumentPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArgumentPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArgumentPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArgumentAssetUnionTypeValues[] = {
  AAUTAbstractAssertion,
  AAUTArgumentReasoning,
  AAUTArtifactReference
};
const char* _kTDDIArgumentAssetUnionTypeNames[] = {
  "AAUTAbstractAssertion",
  "AAUTArgumentReasoning",
  "AAUTArtifactReference"
};
const std::map<int, const char*> _TDDIArgumentAssetUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArgumentAssetUnionTypeValues, _kTDDIArgumentAssetUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArgumentAssetUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArgumentAssetUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArgumentAssetUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAssertionUnionTypeValues[] = {
  AUTClaim,
  AUTAbstractAssertedRelationship
};
const char* _kTDDIAssertionUnionTypeNames[] = {
  "AUTClaim",
  "AUTAbstractAssertedRelationship"
};
const std::map<int, const char*> _TDDIAssertionUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIAssertionUnionTypeValues, _kTDDIAssertionUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAssertionUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAssertionUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAssertionUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAssertedRelationshipUnionTypeValues[] = {
  ARUTAssertedArtifactSupport,
  ARUTAssertedArtifactContext,
  ARUTAssertedInference,
  ARUTAssertedEvidence,
  ARUTAssertedContext
};
const char* _kTDDIAssertedRelationshipUnionTypeNames[] = {
  "ARUTAssertedArtifactSupport",
  "ARUTAssertedArtifactContext",
  "ARUTAssertedInference",
  "ARUTAssertedEvidence",
  "ARUTAssertedContext"
};
const std::map<int, const char*> _TDDIAssertedRelationshipUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTDDIAssertedRelationshipUnionTypeValues, _kTDDIAssertedRelationshipUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAssertedRelationshipUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAssertedRelationshipUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAssertedRelationshipUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArtifactPackageUnionTypeValues[] = {
  APUTArtifactPackage,
  APUTArtifactPackageInterface,
  APUTArtifactPackageBinding
};
const char* _kTDDIArtifactPackageUnionTypeNames[] = {
  "APUTArtifactPackage",
  "APUTArtifactPackageInterface",
  "APUTArtifactPackageBinding"
};
const std::map<int, const char*> _TDDIArtifactPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIArtifactPackageUnionTypeValues, _kTDDIArtifactPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArtifactPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArtifactPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArtifactAssetUnionTypeValues[] = {
  AAUTProperty,
  AAUTTechnique,
  AAUTParticipant,
  AAUTActivity,
  AAUTEvent,
  AAUTResource,
  AAUTArtifact,
  AAUTArtifactAssetRelationship
};
const char* _kTDDIArtifactAssetUnionTypeNames[] = {
  "AAUTProperty",
  "AAUTTechnique",
  "AAUTParticipant",
  "AAUTActivity",
  "AAUTEvent",
  "AAUTResource",
  "AAUTArtifact",
  "AAUTArtifactAssetRelationship"
};
const std::map<int, const char*> _TDDIArtifactAssetUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTDDIArtifactAssetUnionTypeValues, _kTDDIArtifactAssetUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArtifactAssetUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArtifactAssetUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIAssuranceCasePackageUnionTypeValues[] = {
  ACPUTAssuranceCasePackage,
  ACPUTAssuranceCasePackageInterface,
  ACPUTAssuranceCasePackageBinding
};
const char* _kTDDIAssuranceCasePackageUnionTypeNames[] = {
  "ACPUTAssuranceCasePackage",
  "ACPUTAssuranceCasePackageInterface",
  "ACPUTAssuranceCasePackageBinding"
};
const std::map<int, const char*> _TDDIAssuranceCasePackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIAssuranceCasePackageUnionTypeValues, _kTDDIAssuranceCasePackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIAssuranceCasePackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIAssuranceCasePackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDILangStringUnionTypeValues[] = {
  LSUTLangString,
  LSUTExpressionLangString
};
const char* _kTDDILangStringUnionTypeNames[] = {
  "LSUTLangString",
  "LSUTExpressionLangString"
};
const std::map<int, const char*> _TDDILangStringUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDILangStringUnionTypeValues, _kTDDILangStringUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDILangStringUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDILangStringUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDILangStringUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIUtilityElementUnionTypeValues[] = {
  UEUTDescription,
  UEUTImplementationConstraint,
  UEUTNote,
  UEUTTaggedValue
};
const char* _kTDDIUtilityElementUnionTypeNames[] = {
  "UEUTDescription",
  "UEUTImplementationConstraint",
  "UEUTNote",
  "UEUTTaggedValue"
};
const std::map<int, const char*> _TDDIUtilityElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTDDIUtilityElementUnionTypeValues, _kTDDIUtilityElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIUtilityElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIUtilityElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIUtilityElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIArtifactElementUnionTypeValues[] = {
  AEUTAbstractTerminologyElement,
  AEUTAbstractAssuranceCasePackage,
  AEUTAbstractArtifactPackage,
  AEUTArtifactGroup,
  AEUTAbstractArtifactAsset,
  AEUTAbstractArgumentationElement
};
const char* _kTDDIArtifactElementUnionTypeNames[] = {
  "AEUTAbstractTerminologyElement",
  "AEUTAbstractAssuranceCasePackage",
  "AEUTAbstractArtifactPackage",
  "AEUTArtifactGroup",
  "AEUTAbstractArtifactAsset",
  "AEUTAbstractArgumentationElement"
};
const std::map<int, const char*> _TDDIArtifactElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTDDIArtifactElementUnionTypeValues, _kTDDIArtifactElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIArtifactElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIArtifactElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIArtifactElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIModelElementUnionTypeValues[] = {
  MEUTAbstractArtifactElement
};
const char* _kTDDIModelElementUnionTypeNames[] = {
  "MEUTAbstractArtifactElement"
};
const std::map<int, const char*> _TDDIModelElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTDDIModelElementUnionTypeValues, _kTDDIModelElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIModelElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIModelElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIModelElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDISACMElementUnionTypeValues[] = {
  EUTAbstractUtilityElement,
  EUTAbstractModelElement
};
const char* _kTDDISACMElementUnionTypeNames[] = {
  "EUTAbstractUtilityElement",
  "EUTAbstractModelElement"
};
const std::map<int, const char*> _TDDISACMElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDISACMElementUnionTypeValues, _kTDDISACMElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDISACMElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDISACMElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDISACMElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIElementUnionTypeValues[] = {
  EUTAbstractLangString,
  EUTMultiLangString,
  EUTAbstractSACMElement
};
const char* _kTDDIElementUnionTypeNames[] = {
  "EUTAbstractLangString",
  "EUTMultiLangString",
  "EUTAbstractSACMElement"
};
const std::map<int, const char*> _TDDIElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDIElementUnionTypeValues, _kTDDIElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDITerminologyElementUnionTypeValues[] = {
  TEUTTerminologyGroup,
  TEUTAbstractTerminologyPackage,
  TEUTAbstractTerminologyAsset
};
const char* _kTDDITerminologyElementUnionTypeNames[] = {
  "TEUTTerminologyGroup",
  "TEUTAbstractTerminologyPackage",
  "TEUTAbstractTerminologyAsset"
};
const std::map<int, const char*> _TDDITerminologyElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDITerminologyElementUnionTypeValues, _kTDDITerminologyElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDITerminologyElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDITerminologyElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDITerminologyElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDITerminologyPackageUnionTypeValues[] = {
  TPUTTerminologyPackage,
  TPUTTerminologyPackageBinding,
  TPUTTerminologyPackageInterface
};
const char* _kTDDITerminologyPackageUnionTypeNames[] = {
  "TPUTTerminologyPackage",
  "TPUTTerminologyPackageBinding",
  "TPUTTerminologyPackageInterface"
};
const std::map<int, const char*> _TDDITerminologyPackageUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDDITerminologyPackageUnionTypeValues, _kTDDITerminologyPackageUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDITerminologyPackageUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDITerminologyPackageUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIExpressionElementUnionTypeValues[] = {
  EEUTExpression,
  EEUTTerm
};
const char* _kTDDIExpressionElementUnionTypeNames[] = {
  "EEUTExpression",
  "EEUTTerm"
};
const std::map<int, const char*> _TDDIExpressionElementUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIExpressionElementUnionTypeValues, _kTDDIExpressionElementUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIExpressionElementUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIExpressionElementUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIExpressionElementUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDITerminologyAssetUnionTypeValues[] = {
  TAUTCategory,
  TAUTAbstractExpressionElement
};
const char* _kTDDITerminologyAssetUnionTypeNames[] = {
  "TAUTCategory",
  "TAUTAbstractExpressionElement"
};
const std::map<int, const char*> _TDDITerminologyAssetUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDITerminologyAssetUnionTypeValues, _kTDDITerminologyAssetUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDITerminologyAssetUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDITerminologyAssetUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDITerminologyAssetUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIEpsilonScriptExecutionExceptionUnionTypeValues[] = {
  ESEEUTEpsilonScriptExecutionException,
  ESEEUTValidationFailedException
};
const char* _kTDDIEpsilonScriptExecutionExceptionUnionTypeNames[] = {
  "ESEEUTEpsilonScriptExecutionException",
  "ESEEUTValidationFailedException"
};
const std::map<int, const char*> _TDDIEpsilonScriptExecutionExceptionUnionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDDIEpsilonScriptExecutionExceptionUnionTypeValues, _kTDDIEpsilonScriptExecutionExceptionUnionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptExecutionExceptionUnionType val) {
  std::map<int, const char*>::const_iterator it = _TDDIEpsilonScriptExecutionExceptionUnionType_VALUES_TO_NAMES.find(val);
  if (it != _TDDIEpsilonScriptExecutionExceptionUnionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTDDIEpsilonLanguageValues[] = {
  ELEOL,
  ELEVL,
  ELETL,
  ELEWL,
  ELEGL,
  ELECL,
  ELEML,
  ELEPL
};
const char* _kTDDIEpsilonLanguageNames[] = {
  "ELEOL",
  "ELEVL",
  "ELETL",
  "ELEWL",
  "ELEGL",
  "ELECL",
  "ELEML",
  "ELEPL"
};
const std::map<int, const char*> _TDDIEpsilonLanguage_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTDDIEpsilonLanguageValues, _kTDDIEpsilonLanguageNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonLanguage val) {
  std::map<int, const char*>::const_iterator it = _TDDIEpsilonLanguage_VALUES_TO_NAMES.find(val);
  if (it != _TDDIEpsilonLanguage_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TDDIAbstractDependabilityRequirementRef::~TDDIAbstractDependabilityRequirementRef() throw() {
}


void TDDIAbstractDependabilityRequirementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityRequirementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDependabilityRequirementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement>(new TDDIAbstractDependabilityRequirement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedDependabilityRequirement) { wasSet = true; }
          if (this->ref->__isset.UsedDependabilityRequirementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDependabilityRequirementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDependabilityRequirementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractDependabilityRequirement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDependabilityRequirementRef &a, TDDIAbstractDependabilityRequirementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDependabilityRequirementRef::TDDIAbstractDependabilityRequirementRef(const TDDIAbstractDependabilityRequirementRef& other0) {
  ref = other0.ref;
  __isset = other0.__isset;
}
TDDIAbstractDependabilityRequirementRef& TDDIAbstractDependabilityRequirementRef::operator=(const TDDIAbstractDependabilityRequirementRef& other1) {
  ref = other1.ref;
  __isset = other1.__isset;
  return *this;
}
void TDDIAbstractDependabilityRequirementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDependabilityRequirementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractSystemRef::~TDDIAbstractSystemRef() throw() {
}


void TDDIAbstractSystemRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractSystemRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractSystemRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem>(new TDDIAbstractSystem);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedSystem) { wasSet = true; }
          if (this->ref->__isset.UsedSystemType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractSystemRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractSystemRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSystem"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractSystemRef &a, TDDIAbstractSystemRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractSystemRef::TDDIAbstractSystemRef(const TDDIAbstractSystemRef& other2) {
  ref = other2.ref;
  __isset = other2.__isset;
}
TDDIAbstractSystemRef& TDDIAbstractSystemRef::operator=(const TDDIAbstractSystemRef& other3) {
  ref = other3.ref;
  __isset = other3.__isset;
  return *this;
}
void TDDIAbstractSystemRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractSystemRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFunctionRef::~TDDIAbstractFunctionRef() throw() {
}


void TDDIAbstractFunctionRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFunctionRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFunctionRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction>(new TDDIAbstractFunction);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFunction) { wasSet = true; }
          if (this->ref->__isset.UsedFunctionType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFunctionRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFunctionRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFunction"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFunctionRef &a, TDDIAbstractFunctionRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFunctionRef::TDDIAbstractFunctionRef(const TDDIAbstractFunctionRef& other4) {
  ref = other4.ref;
  __isset = other4.__isset;
}
TDDIAbstractFunctionRef& TDDIAbstractFunctionRef::operator=(const TDDIAbstractFunctionRef& other5) {
  ref = other5.ref;
  __isset = other5.__isset;
  return *this;
}
void TDDIAbstractFunctionRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFunctionRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIPortRef::~TDDIPortRef() throw() {
}


void TDDIPortRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPortRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPortRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIPort>(new TDDIPort);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->ref->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ref->__isset.FlowType) { wasSet = true; }
          if (this->ref->__isset.Direction) { wasSet = true; }
          if (this->ref->__isset.RefinedPorts) { wasSet = true; }
          if (this->ref->__isset.InterfaceFailures) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPortRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPortRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIPort"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPortRef &a, TDDIPortRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIPortRef::TDDIPortRef(const TDDIPortRef& other6) {
  ref = other6.ref;
  __isset = other6.__isset;
}
TDDIPortRef& TDDIPortRef::operator=(const TDDIPortRef& other7) {
  ref = other7.ref;
  __isset = other7.__isset;
  return *this;
}
void TDDIPortRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPortRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractStandardRef::~TDDIAbstractStandardRef() throw() {
}


void TDDIAbstractStandardRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractStandardRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractStandardRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard>(new TDDIAbstractStandard);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedStandard) { wasSet = true; }
          if (this->ref->__isset.UsedStandardType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractStandardRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractStandardRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractStandard"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractStandardRef &a, TDDIAbstractStandardRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractStandardRef::TDDIAbstractStandardRef(const TDDIAbstractStandardRef& other8) {
  ref = other8.ref;
  __isset = other8.__isset;
}
TDDIAbstractStandardRef& TDDIAbstractStandardRef::operator=(const TDDIAbstractStandardRef& other9) {
  ref = other9.ref;
  __isset = other9.__isset;
  return *this;
}
void TDDIAbstractStandardRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractStandardRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIMalfunctionRef::~TDDIMalfunctionRef() throw() {
}


void TDDIMalfunctionRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMalfunction> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMalfunctionRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMalfunctionRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIMalfunction>(new TDDIMalfunction);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.Hazards) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMalfunctionRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMalfunctionRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMalfunction"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMalfunctionRef &a, TDDIMalfunctionRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIMalfunctionRef::TDDIMalfunctionRef(const TDDIMalfunctionRef& other10) {
  ref = other10.ref;
  __isset = other10.__isset;
}
TDDIMalfunctionRef& TDDIMalfunctionRef::operator=(const TDDIMalfunctionRef& other11) {
  ref = other11.ref;
  __isset = other11.__isset;
  return *this;
}
void TDDIMalfunctionRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMalfunctionRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDILogicalComponentRef::~TDDILogicalComponentRef() throw() {
}


void TDDILogicalComponentRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDILogicalComponent> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILogicalComponentRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILogicalComponentRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDILogicalComponent>(new TDDILogicalComponent);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.OverallLifetime) { wasSet = true; }
          if (this->ref->__isset.OverallLifetimeTimeUnit) { wasSet = true; }
          if (this->ref->__isset.Contexts) { wasSet = true; }
          if (this->ref->__isset.Configurations) { wasSet = true; }
          if (this->ref->__isset.Ports) { wasSet = true; }
          if (this->ref->__isset.Signals) { wasSet = true; }
          if (this->ref->__isset.SystemBoundaries) { wasSet = true; }
          if (this->ref->__isset.AppliedStandards) { wasSet = true; }
          if (this->ref->__isset.RealisedFunctions) { wasSet = true; }
          if (this->ref->__isset.AsAsset) { wasSet = true; }
          if (this->ref->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->ref->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ref->__isset.FailureModels) { wasSet = true; }
          if (this->ref->__isset.SubSystems) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILogicalComponentRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILogicalComponentRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDILogicalComponent"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILogicalComponentRef &a, TDDILogicalComponentRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDILogicalComponentRef::TDDILogicalComponentRef(const TDDILogicalComponentRef& other12) {
  ref = other12.ref;
  __isset = other12.__isset;
}
TDDILogicalComponentRef& TDDILogicalComponentRef::operator=(const TDDILogicalComponentRef& other13) {
  ref = other13.ref;
  __isset = other13.__isset;
  return *this;
}
void TDDILogicalComponentRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILogicalComponentRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAssuranceLevelRef::~TDDIAssuranceLevelRef() throw() {
}


void TDDIAssuranceLevelRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceLevelRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceLevelRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceLevelRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceLevelRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceLevelRef &a, TDDIAssuranceLevelRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceLevelRef::TDDIAssuranceLevelRef(const TDDIAssuranceLevelRef& other14) {
  ref = other14.ref;
  __isset = other14.__isset;
}
TDDIAssuranceLevelRef& TDDIAssuranceLevelRef::operator=(const TDDIAssuranceLevelRef& other15) {
  ref = other15.ref;
  __isset = other15.__isset;
  return *this;
}
void TDDIAssuranceLevelRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceLevelRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFailureRef::~TDDIAbstractFailureRef() throw() {
}


void TDDIAbstractFailureRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailureRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFailure) { wasSet = true; }
          if (this->ref->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailureRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailureRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailureRef &a, TDDIAbstractFailureRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailureRef::TDDIAbstractFailureRef(const TDDIAbstractFailureRef& other16) {
  ref = other16.ref;
  __isset = other16.__isset;
}
TDDIAbstractFailureRef& TDDIAbstractFailureRef::operator=(const TDDIAbstractFailureRef& other17) {
  ref = other17.ref;
  __isset = other17.__isset;
  return *this;
}
void TDDIAbstractFailureRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailureRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractFailureModelRef::~TDDIAbstractFailureModelRef() throw() {
}


void TDDIAbstractFailureModelRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureModel> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureModelRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailureModelRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureModel>(new TDDIAbstractFailureModel);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedFailureModel) { wasSet = true; }
          if (this->ref->__isset.UsedFailureModelType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailureModelRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailureModelRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailureModel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailureModelRef &a, TDDIAbstractFailureModelRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailureModelRef::TDDIAbstractFailureModelRef(const TDDIAbstractFailureModelRef& other18) {
  ref = other18.ref;
  __isset = other18.__isset;
}
TDDIAbstractFailureModelRef& TDDIAbstractFailureModelRef::operator=(const TDDIAbstractFailureModelRef& other19) {
  ref = other19.ref;
  __isset = other19.__isset;
  return *this;
}
void TDDIAbstractFailureModelRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailureModelRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDISecurityViolationRef::~TDDISecurityViolationRef() throw() {
}


void TDDISecurityViolationRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDISecurityViolation> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISecurityViolationRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISecurityViolationRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDISecurityViolation>(new TDDISecurityViolation);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.OriginType) { wasSet = true; }
          if (this->ref->__isset.FailureClass) { wasSet = true; }
          if (this->ref->__isset.FailureRate) { wasSet = true; }
          if (this->ref->__isset.IsCCF) { wasSet = true; }
          if (this->ref->__isset.CCFFailures) { wasSet = true; }
          if (this->ref->__isset.FailureProbDistribution) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISecurityViolationRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISecurityViolationRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDISecurityViolation"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISecurityViolationRef &a, TDDISecurityViolationRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDISecurityViolationRef::TDDISecurityViolationRef(const TDDISecurityViolationRef& other20) {
  ref = other20.ref;
  __isset = other20.__isset;
}
TDDISecurityViolationRef& TDDISecurityViolationRef::operator=(const TDDISecurityViolationRef& other21) {
  ref = other21.ref;
  __isset = other21.__isset;
  return *this;
}
void TDDISecurityViolationRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISecurityViolationRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractCauseRef::~TDDIAbstractCauseRef() throw() {
}


void TDDIAbstractCauseRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractCause> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractCauseRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractCauseRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractCause>(new TDDIAbstractCause);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedCause) { wasSet = true; }
          if (this->ref->__isset.UsedCauseType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractCauseRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractCauseRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractCause"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractCauseRef &a, TDDIAbstractCauseRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractCauseRef::TDDIAbstractCauseRef(const TDDIAbstractCauseRef& other22) {
  ref = other22.ref;
  __isset = other22.__isset;
}
TDDIAbstractCauseRef& TDDIAbstractCauseRef::operator=(const TDDIAbstractCauseRef& other23) {
  ref = other23.ref;
  __isset = other23.__isset;
  return *this;
}
void TDDIAbstractCauseRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractCauseRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractMeasureRef::~TDDIAbstractMeasureRef() throw() {
}


void TDDIAbstractMeasureRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractMeasureRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractMeasureRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure>(new TDDIAbstractMeasure);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedMeasure) { wasSet = true; }
          if (this->ref->__isset.UsedMeasureType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractMeasureRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractMeasureRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractMeasure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractMeasureRef &a, TDDIAbstractMeasureRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractMeasureRef::TDDIAbstractMeasureRef(const TDDIAbstractMeasureRef& other24) {
  ref = other24.ref;
  __isset = other24.__isset;
}
TDDIAbstractMeasureRef& TDDIAbstractMeasureRef::operator=(const TDDIAbstractMeasureRef& other25) {
  ref = other25.ref;
  __isset = other25.__isset;
  return *this;
}
void TDDIAbstractMeasureRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractMeasureRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractRiskParameterRef::~TDDIAbstractRiskParameterRef() throw() {
}


void TDDIAbstractRiskParameterRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRiskParameterRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRiskParameterRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter>(new TDDIAbstractRiskParameter);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedRiskParameter) { wasSet = true; }
          if (this->ref->__isset.UsedRiskParameterType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRiskParameterRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRiskParameterRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractRiskParameter"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRiskParameterRef &a, TDDIAbstractRiskParameterRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRiskParameterRef::TDDIAbstractRiskParameterRef(const TDDIAbstractRiskParameterRef& other26) {
  ref = other26.ref;
  __isset = other26.__isset;
}
TDDIAbstractRiskParameterRef& TDDIAbstractRiskParameterRef::operator=(const TDDIAbstractRiskParameterRef& other27) {
  ref = other27.ref;
  __isset = other27.__isset;
  return *this;
}
void TDDIAbstractRiskParameterRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRiskParameterRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIHazardTypeRef::~TDDIHazardTypeRef() throw() {
}


void TDDIHazardTypeRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazardTypeRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazardTypeRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIHazardType>(new TDDIHazardType);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazardTypeRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazardTypeRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIHazardType"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazardTypeRef &a, TDDIHazardTypeRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIHazardTypeRef::TDDIHazardTypeRef(const TDDIHazardTypeRef& other28) {
  ref = other28.ref;
  __isset = other28.__isset;
}
TDDIHazardTypeRef& TDDIHazardTypeRef::operator=(const TDDIHazardTypeRef& other29) {
  ref = other29.ref;
  __isset = other29.__isset;
  return *this;
}
void TDDIHazardTypeRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazardTypeRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIHazardRef::~TDDIHazardRef() throw() {
}


void TDDIHazardRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIHazard> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazardRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazardRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIHazard>(new TDDIHazard);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.Condition) { wasSet = true; }
          if (this->ref->__isset.HazardType) { wasSet = true; }
          if (this->ref->__isset.Measures) { wasSet = true; }
          if (this->ref->__isset.Failures) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazardRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazardRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIHazard"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazardRef &a, TDDIHazardRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIHazardRef::TDDIHazardRef(const TDDIHazardRef& other30) {
  ref = other30.ref;
  __isset = other30.__isset;
}
TDDIHazardRef& TDDIHazardRef::operator=(const TDDIHazardRef& other31) {
  ref = other31.ref;
  __isset = other31.__isset;
  return *this;
}
void TDDIHazardRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazardRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIStateRef::~TDDIStateRef() throw() {
}


void TDDIStateRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIState> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIStateRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIStateRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIState>(new TDDIState);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.IsInitialState) { wasSet = true; }
          if (this->ref->__isset.IsFailState) { wasSet = true; }
          if (this->ref->__isset.FailState) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIStateRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIStateRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIState"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIStateRef &a, TDDIStateRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIStateRef::TDDIStateRef(const TDDIStateRef& other32) {
  ref = other32.ref;
  __isset = other32.__isset;
}
TDDIStateRef& TDDIStateRef::operator=(const TDDIStateRef& other33) {
  ref = other33.ref;
  __isset = other33.__isset;
  return *this;
}
void TDDIStateRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIStateRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIMaintenanceProcedureRef::~TDDIMaintenanceProcedureRef() throw() {
}


void TDDIMaintenanceProcedureRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMaintenanceProcedureRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMaintenanceProcedureRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure>(new TDDIMaintenanceProcedure);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.ActivityDescription) { wasSet = true; }
          if (this->ref->__isset.TechnicalDescription) { wasSet = true; }
          if (this->ref->__isset.ToolSpecification) { wasSet = true; }
          if (this->ref->__isset.StaffNumber) { wasSet = true; }
          if (this->ref->__isset.StaffSkillLevel) { wasSet = true; }
          if (this->ref->__isset.StaffTrainingDescription) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMaintenanceProcedureRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMaintenanceProcedureRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMaintenanceProcedure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMaintenanceProcedureRef &a, TDDIMaintenanceProcedureRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIMaintenanceProcedureRef::TDDIMaintenanceProcedureRef(const TDDIMaintenanceProcedureRef& other34) {
  ref = other34.ref;
  __isset = other34.__isset;
}
TDDIMaintenanceProcedureRef& TDDIMaintenanceProcedureRef::operator=(const TDDIMaintenanceProcedureRef& other35) {
  ref = other35.ref;
  __isset = other35.__isset;
  return *this;
}
void TDDIMaintenanceProcedureRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMaintenanceProcedureRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIVulnerabilityRef::~TDDIVulnerabilityRef() throw() {
}


void TDDIVulnerabilityRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIVulnerability> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIVulnerabilityRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIVulnerabilityRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIVulnerability>(new TDDIVulnerability);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.Category) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIVulnerabilityRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIVulnerabilityRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIVulnerability"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIVulnerabilityRef &a, TDDIVulnerabilityRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIVulnerabilityRef::TDDIVulnerabilityRef(const TDDIVulnerabilityRef& other36) {
  ref = other36.ref;
  __isset = other36.__isset;
}
TDDIVulnerabilityRef& TDDIVulnerabilityRef::operator=(const TDDIVulnerabilityRef& other37) {
  ref = other37.ref;
  __isset = other37.__isset;
  return *this;
}
void TDDIVulnerabilityRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIVulnerabilityRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIVulnerableItemRef::~TDDIVulnerableItemRef() throw() {
}


void TDDIVulnerableItemRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIVulnerableItem> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIVulnerableItemRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIVulnerableItemRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIVulnerableItem>(new TDDIVulnerableItem);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.FinancialValue) { wasSet = true; }
          if (this->ref->__isset.FinancialCostType) { wasSet = true; }
          if (this->ref->__isset.OperationalCost) { wasSet = true; }
          if (this->ref->__isset.OperationalCostType) { wasSet = true; }
          if (this->ref->__isset.Vulnerabilities) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIVulnerableItemRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIVulnerableItemRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIVulnerableItem"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIVulnerableItemRef &a, TDDIVulnerableItemRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIVulnerableItemRef::TDDIVulnerableItemRef(const TDDIVulnerableItemRef& other38) {
  ref = other38.ref;
  __isset = other38.__isset;
}
TDDIVulnerableItemRef& TDDIVulnerableItemRef::operator=(const TDDIVulnerableItemRef& other39) {
  ref = other39.ref;
  __isset = other39.__isset;
  return *this;
}
void TDDIVulnerableItemRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIVulnerableItemRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDISecurityControlRef::~TDDISecurityControlRef() throw() {
}


void TDDISecurityControlRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDISecurityControl> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISecurityControlRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISecurityControlRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDISecurityControl>(new TDDISecurityControl);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.IntrinsicSafety) { wasSet = true; }
          if (this->ref->__isset.SafeGuard) { wasSet = true; }
          if (this->ref->__isset.ApplierInformation) { wasSet = true; }
          if (this->ref->__isset.RiskAcceptability) { wasSet = true; }
          if (this->ref->__isset.FurtherAction) { wasSet = true; }
          if (this->ref->__isset.Source) { wasSet = true; }
          if (this->ref->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ref->__isset.MeasureType) { wasSet = true; }
          if (this->ref->__isset.Category) { wasSet = true; }
          if (this->ref->__isset.Type) { wasSet = true; }
          if (this->ref->__isset.Vulnerabilities) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISecurityControlRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISecurityControlRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDISecurityControl"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISecurityControlRef &a, TDDISecurityControlRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDISecurityControlRef::TDDISecurityControlRef(const TDDISecurityControlRef& other40) {
  ref = other40.ref;
  __isset = other40.__isset;
}
TDDISecurityControlRef& TDDISecurityControlRef::operator=(const TDDISecurityControlRef& other41) {
  ref = other41.ref;
  __isset = other41.__isset;
  return *this;
}
void TDDISecurityControlRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISecurityControlRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAttackerGoalRef::~TDDIAttackerGoalRef() throw() {
}


void TDDIAttackerGoalRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAttackerGoal> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAttackerGoalRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAttackerGoalRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAttackerGoal>(new TDDIAttackerGoal);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.Category) { wasSet = true; }
          if (this->ref->__isset.Attacks) { wasSet = true; }
          if (this->ref->__isset.AddressedBy) { wasSet = true; }
          if (this->ref->__isset.AttackedItems) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAttackerGoalRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAttackerGoalRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAttackerGoal"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAttackerGoalRef &a, TDDIAttackerGoalRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAttackerGoalRef::TDDIAttackerGoalRef(const TDDIAttackerGoalRef& other42) {
  ref = other42.ref;
  __isset = other42.__isset;
}
TDDIAttackerGoalRef& TDDIAttackerGoalRef::operator=(const TDDIAttackerGoalRef& other43) {
  ref = other43.ref;
  __isset = other43.__isset;
  return *this;
}
void TDDIAttackerGoalRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAttackerGoalRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIActionRef::~TDDIActionRef() throw() {
}


void TDDIActionRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAction> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIActionRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIActionRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAction>(new TDDIAction);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.Category) { wasSet = true; }
          if (this->ref->__isset.FinancialCost) { wasSet = true; }
          if (this->ref->__isset.FinancialCostType) { wasSet = true; }
          if (this->ref->__isset.TimeRequired) { wasSet = true; }
          if (this->ref->__isset.TimeUnit) { wasSet = true; }
          if (this->ref->__isset.Difficulty) { wasSet = true; }
          if (this->ref->__isset.Detectability) { wasSet = true; }
          if (this->ref->__isset.ExploitedVulnerabilities) { wasSet = true; }
          if (this->ref->__isset.Violations) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIActionRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIActionRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAction"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIActionRef &a, TDDIActionRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIActionRef::TDDIActionRef(const TDDIActionRef& other44) {
  ref = other44.ref;
  __isset = other44.__isset;
}
TDDIActionRef& TDDIActionRef::operator=(const TDDIActionRef& other45) {
  ref = other45.ref;
  __isset = other45.__isset;
  return *this;
}
void TDDIActionRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIActionRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIPayloadRef::~TDDIPayloadRef() throw() {
}


void TDDIPayloadRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIPayload> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPayloadRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPayloadRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIPayload>(new TDDIPayload);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.Category) { wasSet = true; }
          if (this->ref->__isset.FinancialCost) { wasSet = true; }
          if (this->ref->__isset.FinancialCostType) { wasSet = true; }
          if (this->ref->__isset.TimeRequired) { wasSet = true; }
          if (this->ref->__isset.TimeUnit) { wasSet = true; }
          if (this->ref->__isset.Difficulty) { wasSet = true; }
          if (this->ref->__isset.Detectability) { wasSet = true; }
          if (this->ref->__isset.ExploitedVulnerabilities) { wasSet = true; }
          if (this->ref->__isset.Violations) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPayloadRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPayloadRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIPayload"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPayloadRef &a, TDDIPayloadRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIPayloadRef::TDDIPayloadRef(const TDDIPayloadRef& other46) {
  ref = other46.ref;
  __isset = other46.__isset;
}
TDDIPayloadRef& TDDIPayloadRef::operator=(const TDDIPayloadRef& other47) {
  ref = other47.ref;
  __isset = other47.__isset;
  return *this;
}
void TDDIPayloadRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPayloadRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDISecurityCapabilityRef::~TDDISecurityCapabilityRef() throw() {
}


void TDDISecurityCapabilityRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDISecurityCapability> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISecurityCapabilityRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISecurityCapabilityRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDISecurityCapability>(new TDDISecurityCapability);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Id) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ref->__isset.Category) { wasSet = true; }
          if (this->ref->__isset.Type) { wasSet = true; }
          if (this->ref->__isset.ImplementedBy) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISecurityCapabilityRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISecurityCapabilityRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDISecurityCapability"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISecurityCapabilityRef &a, TDDISecurityCapabilityRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDISecurityCapabilityRef::TDDISecurityCapabilityRef(const TDDISecurityCapabilityRef& other48) {
  ref = other48.ref;
  __isset = other48.__isset;
}
TDDISecurityCapabilityRef& TDDISecurityCapabilityRef::operator=(const TDDISecurityCapabilityRef& other49) {
  ref = other49.ref;
  __isset = other49.__isset;
  return *this;
}
void TDDISecurityCapabilityRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISecurityCapabilityRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIImplementationConstraintRef::~TDDIImplementationConstraintRef() throw() {
}


void TDDIImplementationConstraintRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIImplementationConstraintRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIImplementationConstraintRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint>(new TDDIImplementationConstraint);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIImplementationConstraintRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIImplementationConstraintRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIImplementationConstraint"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIImplementationConstraintRef &a, TDDIImplementationConstraintRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIImplementationConstraintRef::TDDIImplementationConstraintRef(const TDDIImplementationConstraintRef& other50) {
  ref = other50.ref;
  __isset = other50.__isset;
}
TDDIImplementationConstraintRef& TDDIImplementationConstraintRef::operator=(const TDDIImplementationConstraintRef& other51) {
  ref = other51.ref;
  __isset = other51.__isset;
  return *this;
}
void TDDIImplementationConstraintRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIImplementationConstraintRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDINoteRef::~TDDINoteRef() throw() {
}


void TDDINoteRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDINote> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDINoteRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDINoteRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDINote>(new TDDINote);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDINoteRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDINoteRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDINote"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDINoteRef &a, TDDINoteRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDINoteRef::TDDINoteRef(const TDDINoteRef& other52) {
  ref = other52.ref;
  __isset = other52.__isset;
}
TDDINoteRef& TDDINoteRef::operator=(const TDDINoteRef& other53) {
  ref = other53.ref;
  __isset = other53.__isset;
  return *this;
}
void TDDINoteRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDINoteRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDITaggedValueRef::~TDDITaggedValueRef() throw() {
}


void TDDITaggedValueRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITaggedValueRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITaggedValueRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue>(new TDDITaggedValue);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Content) { wasSet = true; }
          if (this->ref->__isset.Key) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITaggedValueRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITaggedValueRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDITaggedValue"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITaggedValueRef &a, TDDITaggedValueRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDITaggedValueRef::TDDITaggedValueRef(const TDDITaggedValueRef& other54) {
  ref = other54.ref;
  __isset = other54.__isset;
}
TDDITaggedValueRef& TDDITaggedValueRef::operator=(const TDDITaggedValueRef& other55) {
  ref = other55.ref;
  __isset = other55.__isset;
  return *this;
}
void TDDITaggedValueRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITaggedValueRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArtifactElementRef::~TDDIAbstractArtifactElementRef() throw() {
}


void TDDIAbstractArtifactElementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactElementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactElementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement>(new TDDIAbstractArtifactElement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArtifactElement) { wasSet = true; }
          if (this->ref->__isset.UsedArtifactElementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactElementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactElementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArtifactElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactElementRef &a, TDDIAbstractArtifactElementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactElementRef::TDDIAbstractArtifactElementRef(const TDDIAbstractArtifactElementRef& other56) {
  ref = other56.ref;
  __isset = other56.__isset;
}
TDDIAbstractArtifactElementRef& TDDIAbstractArtifactElementRef::operator=(const TDDIAbstractArtifactElementRef& other57) {
  ref = other57.ref;
  __isset = other57.__isset;
  return *this;
}
void TDDIAbstractArtifactElementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactElementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIClaimRef::~TDDIClaimRef() throw() {
}


void TDDIClaimRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIClaim> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIClaimRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIClaimRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIClaim>(new TDDIClaim);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ref->__isset.Note) { wasSet = true; }
          if (this->ref->__isset.TaggedValue) { wasSet = true; }
          if (this->ref->__isset.AssertionDeclaration) { wasSet = true; }
          if (this->ref->__isset.MetaClaim) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIClaimRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIClaimRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIClaim"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIClaimRef &a, TDDIClaimRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIClaimRef::TDDIClaimRef(const TDDIClaimRef& other58) {
  ref = other58.ref;
  __isset = other58.__isset;
}
TDDIClaimRef& TDDIClaimRef::operator=(const TDDIClaimRef& other59) {
  ref = other59.ref;
  __isset = other59.__isset;
  return *this;
}
void TDDIClaimRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIClaimRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArgumentPackageRef::~TDDIAbstractArgumentPackageRef() throw() {
}


void TDDIAbstractArgumentPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage>(new TDDIAbstractArgumentPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArgumentPackage) { wasSet = true; }
          if (this->ref->__isset.UsedArgumentPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArgumentPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentPackageRef &a, TDDIAbstractArgumentPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentPackageRef::TDDIAbstractArgumentPackageRef(const TDDIAbstractArgumentPackageRef& other60) {
  ref = other60.ref;
  __isset = other60.__isset;
}
TDDIAbstractArgumentPackageRef& TDDIAbstractArgumentPackageRef::operator=(const TDDIAbstractArgumentPackageRef& other61) {
  ref = other61.ref;
  __isset = other61.__isset;
  return *this;
}
void TDDIAbstractArgumentPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArgumentationElementRef::~TDDIAbstractArgumentationElementRef() throw() {
}


void TDDIAbstractArgumentationElementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentationElementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentationElementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement>(new TDDIAbstractArgumentationElement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArgumentationElement) { wasSet = true; }
          if (this->ref->__isset.UsedArgumentationElementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentationElementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentationElementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArgumentationElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentationElementRef &a, TDDIAbstractArgumentationElementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentationElementRef::TDDIAbstractArgumentationElementRef(const TDDIAbstractArgumentationElementRef& other62) {
  ref = other62.ref;
  __isset = other62.__isset;
}
TDDIAbstractArgumentationElementRef& TDDIAbstractArgumentationElementRef::operator=(const TDDIAbstractArgumentationElementRef& other63) {
  ref = other63.ref;
  __isset = other63.__isset;
  return *this;
}
void TDDIAbstractArgumentationElementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentationElementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArgumentAssetRef::~TDDIAbstractArgumentAssetRef() throw() {
}


void TDDIAbstractArgumentAssetRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentAssetRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentAssetRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset>(new TDDIAbstractArgumentAsset);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArgumentAsset) { wasSet = true; }
          if (this->ref->__isset.UsedArgumentAssetType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentAssetRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentAssetRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArgumentAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentAssetRef &a, TDDIAbstractArgumentAssetRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentAssetRef::TDDIAbstractArgumentAssetRef(const TDDIAbstractArgumentAssetRef& other64) {
  ref = other64.ref;
  __isset = other64.__isset;
}
TDDIAbstractArgumentAssetRef& TDDIAbstractArgumentAssetRef::operator=(const TDDIAbstractArgumentAssetRef& other65) {
  ref = other65.ref;
  __isset = other65.__isset;
  return *this;
}
void TDDIAbstractArgumentAssetRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentAssetRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIPropertyRef::~TDDIPropertyRef() throw() {
}


void TDDIPropertyRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIProperty> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPropertyRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPropertyRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIProperty>(new TDDIProperty);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ref->__isset.Note) { wasSet = true; }
          if (this->ref->__isset.TaggedValue) { wasSet = true; }
          if (this->ref->__isset.Property) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPropertyRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPropertyRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIProperty"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPropertyRef &a, TDDIPropertyRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIPropertyRef::TDDIPropertyRef(const TDDIPropertyRef& other66) {
  ref = other66.ref;
  __isset = other66.__isset;
}
TDDIPropertyRef& TDDIPropertyRef::operator=(const TDDIPropertyRef& other67) {
  ref = other67.ref;
  __isset = other67.__isset;
  return *this;
}
void TDDIPropertyRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPropertyRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArtifactAssetRef::~TDDIAbstractArtifactAssetRef() throw() {
}


void TDDIAbstractArtifactAssetRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactAssetRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactAssetRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset>(new TDDIAbstractArtifactAsset);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArtifactAsset) { wasSet = true; }
          if (this->ref->__isset.UsedArtifactAssetType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactAssetRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactAssetRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArtifactAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactAssetRef &a, TDDIAbstractArtifactAssetRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactAssetRef::TDDIAbstractArtifactAssetRef(const TDDIAbstractArtifactAssetRef& other68) {
  ref = other68.ref;
  __isset = other68.__isset;
}
TDDIAbstractArtifactAssetRef& TDDIAbstractArtifactAssetRef::operator=(const TDDIAbstractArtifactAssetRef& other69) {
  ref = other69.ref;
  __isset = other69.__isset;
  return *this;
}
void TDDIAbstractArtifactAssetRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactAssetRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractAssuranceCasePackageRef::~TDDIAbstractAssuranceCasePackageRef() throw() {
}


void TDDIAbstractAssuranceCasePackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssuranceCasePackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssuranceCasePackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage>(new TDDIAbstractAssuranceCasePackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedAssuranceCasePackage) { wasSet = true; }
          if (this->ref->__isset.UsedAssuranceCasePackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssuranceCasePackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssuranceCasePackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractAssuranceCasePackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssuranceCasePackageRef &a, TDDIAbstractAssuranceCasePackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssuranceCasePackageRef::TDDIAbstractAssuranceCasePackageRef(const TDDIAbstractAssuranceCasePackageRef& other70) {
  ref = other70.ref;
  __isset = other70.__isset;
}
TDDIAbstractAssuranceCasePackageRef& TDDIAbstractAssuranceCasePackageRef::operator=(const TDDIAbstractAssuranceCasePackageRef& other71) {
  ref = other71.ref;
  __isset = other71.__isset;
  return *this;
}
void TDDIAbstractAssuranceCasePackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssuranceCasePackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAssuranceCasePackageInterfaceRef::~TDDIAssuranceCasePackageInterfaceRef() throw() {
}


void TDDIAssuranceCasePackageInterfaceRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageInterfaceRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackageInterfaceRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface>(new TDDIAssuranceCasePackageInterface);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ref->__isset.Note) { wasSet = true; }
          if (this->ref->__isset.TaggedValue) { wasSet = true; }
          if (this->ref->__isset.AssuranceCasePackage) { wasSet = true; }
          if (this->ref->__isset.Interface) { wasSet = true; }
          if (this->ref->__isset.ArtifactPackage) { wasSet = true; }
          if (this->ref->__isset.ArgumentPackage) { wasSet = true; }
          if (this->ref->__isset.TerminologyPackage) { wasSet = true; }
          if (this->ref->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackageInterfaceRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackageInterfaceRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceCasePackageInterface"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackageInterfaceRef &a, TDDIAssuranceCasePackageInterfaceRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackageInterfaceRef::TDDIAssuranceCasePackageInterfaceRef(const TDDIAssuranceCasePackageInterfaceRef& other72) {
  ref = other72.ref;
  __isset = other72.__isset;
}
TDDIAssuranceCasePackageInterfaceRef& TDDIAssuranceCasePackageInterfaceRef::operator=(const TDDIAssuranceCasePackageInterfaceRef& other73) {
  ref = other73.ref;
  __isset = other73.__isset;
  return *this;
}
void TDDIAssuranceCasePackageInterfaceRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackageInterfaceRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractArtifactPackageRef::~TDDIAbstractArtifactPackageRef() throw() {
}


void TDDIAbstractArtifactPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage>(new TDDIAbstractArtifactPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedArtifactPackage) { wasSet = true; }
          if (this->ref->__isset.UsedArtifactPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArtifactPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactPackageRef &a, TDDIAbstractArtifactPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactPackageRef::TDDIAbstractArtifactPackageRef(const TDDIAbstractArtifactPackageRef& other74) {
  ref = other74.ref;
  __isset = other74.__isset;
}
TDDIAbstractArtifactPackageRef& TDDIAbstractArtifactPackageRef::operator=(const TDDIAbstractArtifactPackageRef& other75) {
  ref = other75.ref;
  __isset = other75.__isset;
  return *this;
}
void TDDIAbstractArtifactPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractTerminologyPackageRef::~TDDIAbstractTerminologyPackageRef() throw() {
}


void TDDIAbstractTerminologyPackageRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyPackageRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractTerminologyPackageRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage>(new TDDIAbstractTerminologyPackage);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedTerminologyPackage) { wasSet = true; }
          if (this->ref->__isset.UsedTerminologyPackageType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractTerminologyPackageRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractTerminologyPackageRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractTerminologyPackage"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractTerminologyPackageRef &a, TDDIAbstractTerminologyPackageRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractTerminologyPackageRef::TDDIAbstractTerminologyPackageRef(const TDDIAbstractTerminologyPackageRef& other76) {
  ref = other76.ref;
  __isset = other76.__isset;
}
TDDIAbstractTerminologyPackageRef& TDDIAbstractTerminologyPackageRef::operator=(const TDDIAbstractTerminologyPackageRef& other77) {
  ref = other77.ref;
  __isset = other77.__isset;
  return *this;
}
void TDDIAbstractTerminologyPackageRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractTerminologyPackageRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIAbstractExpressionElementRef::~TDDIAbstractExpressionElementRef() throw() {
}


void TDDIAbstractExpressionElementRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractExpressionElementRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractExpressionElementRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement>(new TDDIAbstractExpressionElement);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.UsedExpressionElement) { wasSet = true; }
          if (this->ref->__isset.UsedExpressionElementType) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractExpressionElementRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractExpressionElementRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractExpressionElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractExpressionElementRef &a, TDDIAbstractExpressionElementRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDIAbstractExpressionElementRef::TDDIAbstractExpressionElementRef(const TDDIAbstractExpressionElementRef& other78) {
  ref = other78.ref;
  __isset = other78.__isset;
}
TDDIAbstractExpressionElementRef& TDDIAbstractExpressionElementRef::operator=(const TDDIAbstractExpressionElementRef& other79) {
  ref = other79.ref;
  __isset = other79.__isset;
  return *this;
}
void TDDIAbstractExpressionElementRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractExpressionElementRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDICategoryRef::~TDDICategoryRef() throw() {
}


void TDDICategoryRef::__set_ref(::apache::thrift::stdcxx::shared_ptr<TDDICategory> val) {
  this->ref = val;
}
std::ostream& operator<<(std::ostream& out, const TDDICategoryRef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDICategoryRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ref) { 
            this->ref = ::apache::thrift::stdcxx::shared_ptr<TDDICategory>(new TDDICategory);
          }
          xfer += this->ref->read(iprot);
          bool wasSet = false;
          if (this->ref->__isset.Gid) { wasSet = true; }
          if (this->ref->__isset.IsCitation) { wasSet = true; }
          if (this->ref->__isset.IsAbstract) { wasSet = true; }
          if (this->ref->__isset.CitedElement) { wasSet = true; }
          if (this->ref->__isset.AbstractForm) { wasSet = true; }
          if (this->ref->__isset.Name) { wasSet = true; }
          if (this->ref->__isset.Description) { wasSet = true; }
          if (this->ref->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ref->__isset.Note) { wasSet = true; }
          if (this->ref->__isset.TaggedValue) { wasSet = true; }
          if (!wasSet) { this->ref.reset(); }
          this->__isset.ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDICategoryRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDICategoryRef");

  xfer += oprot->writeFieldBegin("ref", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->ref) {
    xfer += this->ref->write(oprot); 
  } else {oprot->writeStructBegin("TDDICategory"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDICategoryRef &a, TDDICategoryRef &b) {
  using ::std::swap;
  swap(a.ref, b.ref);
  swap(a.__isset, b.__isset);
}

TDDICategoryRef::TDDICategoryRef(const TDDICategoryRef& other80) {
  ref = other80.ref;
  __isset = other80.__isset;
}
TDDICategoryRef& TDDICategoryRef::operator=(const TDDICategoryRef& other81) {
  ref = other81.ref;
  __isset = other81.__isset;
  return *this;
}
void TDDICategoryRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDICategoryRef(";
  out << "ref=" << to_string(ref);
  out << ")";
}


TDDIBaseElementUnion::~TDDIBaseElementUnion() throw() {
}


void TDDIBaseElementUnion::__set_FailureModel(::apache::thrift::stdcxx::shared_ptr<TDDIFailureModel> val) {
  this->FailureModel = val;
__isset.FailureModel = true;
}

void TDDIBaseElementUnion::__set_MinimalCutSets(::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutSets> val) {
  this->MinimalCutSets = val;
__isset.MinimalCutSets = true;
}

void TDDIBaseElementUnion::__set_MinimalCutSet(::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutSet> val) {
  this->MinimalCutSet = val;
__isset.MinimalCutSet = true;
}

void TDDIBaseElementUnion::__set_Failure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->Failure = val;
__isset.Failure = true;
}

void TDDIBaseElementUnion::__set_ProbDist(::apache::thrift::stdcxx::shared_ptr<TDDIProbDist> val) {
  this->ProbDist = val;
__isset.ProbDist = true;
}

void TDDIBaseElementUnion::__set_ProbDistParam(::apache::thrift::stdcxx::shared_ptr<TDDIProbDistParam> val) {
  this->ProbDistParam = val;
__isset.ProbDistParam = true;
}

void TDDIBaseElementUnion::__set_FMEAEntry(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAEntry> val) {
  this->FMEAEntry = val;
__isset.FMEAEntry = true;
}

void TDDIBaseElementUnion::__set_Transition(::apache::thrift::stdcxx::shared_ptr<TDDITransition> val) {
  this->Transition = val;
__isset.Transition = true;
}

void TDDIBaseElementUnion::__set_State(::apache::thrift::stdcxx::shared_ptr<TDDIState> val) {
  this->State = val;
__isset.State = true;
}

void TDDIBaseElementUnion::__set_Cause(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractCause> val) {
  this->Cause = val;
__isset.Cause = true;
}

void TDDIBaseElementUnion::__set_Measure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> val) {
  this->Measure = val;
__isset.Measure = true;
}

void TDDIBaseElementUnion::__set_MeasureType(::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> val) {
  this->MeasureType = val;
__isset.MeasureType = true;
}

void TDDIBaseElementUnion::__set_MaintenanceProcedure(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val) {
  this->MaintenanceProcedure = val;
__isset.MaintenanceProcedure = true;
}

void TDDIBaseElementUnion::__set_Standard(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> val) {
  this->Standard = val;
__isset.Standard = true;
}

void TDDIBaseElementUnion::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
__isset.AssuranceLevel = true;
}

void TDDIBaseElementUnion::__set_HazardType(::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> val) {
  this->HazardType = val;
__isset.HazardType = true;
}

void TDDIBaseElementUnion::__set_HazardTypeSystem(::apache::thrift::stdcxx::shared_ptr<TDDIHazardTypeSystem> val) {
  this->HazardTypeSystem = val;
__isset.HazardTypeSystem = true;
}

void TDDIBaseElementUnion::__set_RiskParameter(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> val) {
  this->RiskParameter = val;
__isset.RiskParameter = true;
}

void TDDIBaseElementUnion::__set_Hazard(::apache::thrift::stdcxx::shared_ptr<TDDIHazard> val) {
  this->Hazard = val;
__isset.Hazard = true;
}

void TDDIBaseElementUnion::__set_RiskAssessment(::apache::thrift::stdcxx::shared_ptr<TDDIRiskAssessment> val) {
  this->RiskAssessment = val;
__isset.RiskAssessment = true;
}

void TDDIBaseElementUnion::__set_Malfunction(::apache::thrift::stdcxx::shared_ptr<TDDIMalfunction> val) {
  this->Malfunction = val;
__isset.Malfunction = true;
}

void TDDIBaseElementUnion::__set_ThreatAgent(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractThreatAgent> val) {
  this->ThreatAgent = val;
__isset.ThreatAgent = true;
}

void TDDIBaseElementUnion::__set_AttackerGoal(::apache::thrift::stdcxx::shared_ptr<TDDIAttackerGoal> val) {
  this->AttackerGoal = val;
__isset.AttackerGoal = true;
}

void TDDIBaseElementUnion::__set_SecurityRisk(::apache::thrift::stdcxx::shared_ptr<TDDISecurityRisk> val) {
  this->SecurityRisk = val;
__isset.SecurityRisk = true;
}

void TDDIBaseElementUnion::__set_Attack(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAttack> val) {
  this->Attack = val;
__isset.Attack = true;
}

void TDDIBaseElementUnion::__set_SecurityCapability(::apache::thrift::stdcxx::shared_ptr<TDDISecurityCapability> val) {
  this->SecurityCapability = val;
__isset.SecurityCapability = true;
}

void TDDIBaseElementUnion::__set_Asset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val) {
  this->Asset = val;
__isset.Asset = true;
}

void TDDIBaseElementUnion::__set_Vulnerability(::apache::thrift::stdcxx::shared_ptr<TDDIVulnerability> val) {
  this->Vulnerability = val;
__isset.Vulnerability = true;
}

void TDDIBaseElementUnion::__set_RequirementSource(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> val) {
  this->RequirementSource = val;
__isset.RequirementSource = true;
}

void TDDIBaseElementUnion::__set_DependabilityRequirement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> val) {
  this->DependabilityRequirement = val;
__isset.DependabilityRequirement = true;
}

void TDDIBaseElementUnion::__set_Configuration(::apache::thrift::stdcxx::shared_ptr<TDDIConfiguration> val) {
  this->Configuration = val;
__isset.Configuration = true;
}

void TDDIBaseElementUnion::__set_System(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> val) {
  this->System = val;
__isset.System = true;
}

void TDDIBaseElementUnion::__set_Function(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> val) {
  this->Function = val;
__isset.Function = true;
}

void TDDIBaseElementUnion::__set_PerfChars(::apache::thrift::stdcxx::shared_ptr<TDDIPerfChars> val) {
  this->PerfChars = val;
__isset.PerfChars = true;
}

void TDDIBaseElementUnion::__set_Signal(::apache::thrift::stdcxx::shared_ptr<TDDISignal> val) {
  this->Signal = val;
__isset.Signal = true;
}

void TDDIBaseElementUnion::__set_Context(::apache::thrift::stdcxx::shared_ptr<TDDIContext> val) {
  this->Context = val;
__isset.Context = true;
}

void TDDIBaseElementUnion::__set_SystemBoundary(::apache::thrift::stdcxx::shared_ptr<TDDISystemBoundary> val) {
  this->SystemBoundary = val;
__isset.SystemBoundary = true;
}

void TDDIBaseElementUnion::__set_Port(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val) {
  this->Port = val;
__isset.Port = true;
}

void TDDIBaseElementUnion::__set_LifecycleCondition(::apache::thrift::stdcxx::shared_ptr<TDDILifecycleCondition> val) {
  this->LifecycleCondition = val;
__isset.LifecycleCondition = true;
}

void TDDIBaseElementUnion::__set_DesignPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDesignPackage> val) {
  this->DesignPackage = val;
__isset.DesignPackage = true;
}

void TDDIBaseElementUnion::__set_FailureLogicPackage(::apache::thrift::stdcxx::shared_ptr<TDDIFailureLogicPackage> val) {
  this->FailureLogicPackage = val;
__isset.FailureLogicPackage = true;
}

void TDDIBaseElementUnion::__set_DependabilityPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> val) {
  this->DependabilityPackage = val;
__isset.DependabilityPackage = true;
}

void TDDIBaseElementUnion::__set_RequirementPackage(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> val) {
  this->RequirementPackage = val;
__isset.RequirementPackage = true;
}

void TDDIBaseElementUnion::__set_DomainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> val) {
  this->DomainPackage = val;
__isset.DomainPackage = true;
}

void TDDIBaseElementUnion::__set_HARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIHARAPackage> val) {
  this->HARAPackage = val;
__isset.HARAPackage = true;
}

void TDDIBaseElementUnion::__set_TARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDITARAPackage> val) {
  this->TARAPackage = val;
__isset.TARAPackage = true;
}

void TDDIBaseElementUnion::__set_DDIPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDDIPackage> val) {
  this->DDIPackage = val;
__isset.DDIPackage = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIBaseElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIBaseElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureModel) { 
            this->FailureModel = ::apache::thrift::stdcxx::shared_ptr<TDDIFailureModel>(new TDDIFailureModel);
          }
          xfer += this->FailureModel->read(iprot);
          bool wasSet = false;
          if (this->FailureModel->__isset.Id) { wasSet = true; }
          if (this->FailureModel->__isset.Name) { wasSet = true; }
          if (this->FailureModel->__isset.Description) { wasSet = true; }
          if (this->FailureModel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FailureModel->__isset.MinimalCutSets) { wasSet = true; }
          if (this->FailureModel->__isset.Failures) { wasSet = true; }
          if (this->FailureModel->__isset.SubModels) { wasSet = true; }
          if (!wasSet) { this->FailureModel.reset(); }
          this->__isset.FailureModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MinimalCutSets) { 
            this->MinimalCutSets = ::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutSets>(new TDDIMinimalCutSets);
          }
          xfer += this->MinimalCutSets->read(iprot);
          bool wasSet = false;
          if (this->MinimalCutSets->__isset.Id) { wasSet = true; }
          if (this->MinimalCutSets->__isset.Name) { wasSet = true; }
          if (this->MinimalCutSets->__isset.Description) { wasSet = true; }
          if (this->MinimalCutSets->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MinimalCutSets->__isset.Cutsets) { wasSet = true; }
          if (this->MinimalCutSets->__isset.Failures) { wasSet = true; }
          if (!wasSet) { this->MinimalCutSets.reset(); }
          this->__isset.MinimalCutSets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MinimalCutSet) { 
            this->MinimalCutSet = ::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutSet>(new TDDIMinimalCutSet);
          }
          xfer += this->MinimalCutSet->read(iprot);
          bool wasSet = false;
          if (this->MinimalCutSet->__isset.Id) { wasSet = true; }
          if (this->MinimalCutSet->__isset.Name) { wasSet = true; }
          if (this->MinimalCutSet->__isset.Description) { wasSet = true; }
          if (this->MinimalCutSet->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MinimalCutSet->__isset.Failures) { wasSet = true; }
          if (!wasSet) { this->MinimalCutSet.reset(); }
          this->__isset.MinimalCutSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Failure) { 
            this->Failure = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->Failure->read(iprot);
          bool wasSet = false;
          if (this->Failure->__isset.UsedFailure) { wasSet = true; }
          if (this->Failure->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->Failure.reset(); }
          this->__isset.Failure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ProbDist) { 
            this->ProbDist = ::apache::thrift::stdcxx::shared_ptr<TDDIProbDist>(new TDDIProbDist);
          }
          xfer += this->ProbDist->read(iprot);
          bool wasSet = false;
          if (this->ProbDist->__isset.Id) { wasSet = true; }
          if (this->ProbDist->__isset.Name) { wasSet = true; }
          if (this->ProbDist->__isset.Description) { wasSet = true; }
          if (this->ProbDist->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ProbDist->__isset.Type) { wasSet = true; }
          if (this->ProbDist->__isset.Parameters) { wasSet = true; }
          if (!wasSet) { this->ProbDist.reset(); }
          this->__isset.ProbDist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ProbDistParam) { 
            this->ProbDistParam = ::apache::thrift::stdcxx::shared_ptr<TDDIProbDistParam>(new TDDIProbDistParam);
          }
          xfer += this->ProbDistParam->read(iprot);
          bool wasSet = false;
          if (this->ProbDistParam->__isset.Id) { wasSet = true; }
          if (this->ProbDistParam->__isset.Name) { wasSet = true; }
          if (this->ProbDistParam->__isset.Description) { wasSet = true; }
          if (this->ProbDistParam->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ProbDistParam->__isset.Value) { wasSet = true; }
          if (!wasSet) { this->ProbDistParam.reset(); }
          this->__isset.ProbDistParam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FMEAEntry) { 
            this->FMEAEntry = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAEntry>(new TDDIAbstractFMEAEntry);
          }
          xfer += this->FMEAEntry->read(iprot);
          bool wasSet = false;
          if (this->FMEAEntry->__isset.UsedFMEAEntry) { wasSet = true; }
          if (this->FMEAEntry->__isset.UsedFMEAEntryType) { wasSet = true; }
          if (!wasSet) { this->FMEAEntry.reset(); }
          this->__isset.FMEAEntry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Transition) { 
            this->Transition = ::apache::thrift::stdcxx::shared_ptr<TDDITransition>(new TDDITransition);
          }
          xfer += this->Transition->read(iprot);
          bool wasSet = false;
          if (this->Transition->__isset.Id) { wasSet = true; }
          if (this->Transition->__isset.Name) { wasSet = true; }
          if (this->Transition->__isset.Description) { wasSet = true; }
          if (this->Transition->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Transition->__isset.Transition) { wasSet = true; }
          if (this->Transition->__isset.TransitionProbDistribution) { wasSet = true; }
          if (this->Transition->__isset.FromStates) { wasSet = true; }
          if (this->Transition->__isset.ToStates) { wasSet = true; }
          if (!wasSet) { this->Transition.reset(); }
          this->__isset.Transition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->State) { 
            this->State = ::apache::thrift::stdcxx::shared_ptr<TDDIState>(new TDDIState);
          }
          xfer += this->State->read(iprot);
          bool wasSet = false;
          if (this->State->__isset.Id) { wasSet = true; }
          if (this->State->__isset.Name) { wasSet = true; }
          if (this->State->__isset.Description) { wasSet = true; }
          if (this->State->__isset.KeyValueMaps) { wasSet = true; }
          if (this->State->__isset.IsInitialState) { wasSet = true; }
          if (this->State->__isset.IsFailState) { wasSet = true; }
          if (this->State->__isset.FailState) { wasSet = true; }
          if (!wasSet) { this->State.reset(); }
          this->__isset.State = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Cause) { 
            this->Cause = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractCause>(new TDDIAbstractCause);
          }
          xfer += this->Cause->read(iprot);
          bool wasSet = false;
          if (this->Cause->__isset.UsedCause) { wasSet = true; }
          if (this->Cause->__isset.UsedCauseType) { wasSet = true; }
          if (!wasSet) { this->Cause.reset(); }
          this->__isset.Cause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Measure) { 
            this->Measure = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure>(new TDDIAbstractMeasure);
          }
          xfer += this->Measure->read(iprot);
          bool wasSet = false;
          if (this->Measure->__isset.UsedMeasure) { wasSet = true; }
          if (this->Measure->__isset.UsedMeasureType) { wasSet = true; }
          if (!wasSet) { this->Measure.reset(); }
          this->__isset.Measure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MeasureType) { 
            this->MeasureType = ::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType>(new TDDIMeasureType);
          }
          xfer += this->MeasureType->read(iprot);
          bool wasSet = false;
          if (this->MeasureType->__isset.Id) { wasSet = true; }
          if (this->MeasureType->__isset.Name) { wasSet = true; }
          if (this->MeasureType->__isset.Description) { wasSet = true; }
          if (this->MeasureType->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->MeasureType.reset(); }
          this->__isset.MeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MaintenanceProcedure) { 
            this->MaintenanceProcedure = ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure>(new TDDIMaintenanceProcedure);
          }
          xfer += this->MaintenanceProcedure->read(iprot);
          bool wasSet = false;
          if (this->MaintenanceProcedure->__isset.Id) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.Name) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.Description) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.ActivityDescription) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.TechnicalDescription) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.ToolSpecification) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StaffNumber) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StaffSkillLevel) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StaffTrainingDescription) { wasSet = true; }
          if (!wasSet) { this->MaintenanceProcedure.reset(); }
          this->__isset.MaintenanceProcedure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Standard) { 
            this->Standard = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard>(new TDDIAbstractStandard);
          }
          xfer += this->Standard->read(iprot);
          bool wasSet = false;
          if (this->Standard->__isset.UsedStandard) { wasSet = true; }
          if (this->Standard->__isset.UsedStandardType) { wasSet = true; }
          if (!wasSet) { this->Standard.reset(); }
          this->__isset.Standard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->HazardType) { 
            this->HazardType = ::apache::thrift::stdcxx::shared_ptr<TDDIHazardType>(new TDDIHazardType);
          }
          xfer += this->HazardType->read(iprot);
          bool wasSet = false;
          if (this->HazardType->__isset.Id) { wasSet = true; }
          if (this->HazardType->__isset.Name) { wasSet = true; }
          if (this->HazardType->__isset.Description) { wasSet = true; }
          if (this->HazardType->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->HazardType.reset(); }
          this->__isset.HazardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->HazardTypeSystem) { 
            this->HazardTypeSystem = ::apache::thrift::stdcxx::shared_ptr<TDDIHazardTypeSystem>(new TDDIHazardTypeSystem);
          }
          xfer += this->HazardTypeSystem->read(iprot);
          bool wasSet = false;
          if (this->HazardTypeSystem->__isset.Id) { wasSet = true; }
          if (this->HazardTypeSystem->__isset.Name) { wasSet = true; }
          if (this->HazardTypeSystem->__isset.Description) { wasSet = true; }
          if (this->HazardTypeSystem->__isset.KeyValueMaps) { wasSet = true; }
          if (this->HazardTypeSystem->__isset.HazardTypes) { wasSet = true; }
          if (!wasSet) { this->HazardTypeSystem.reset(); }
          this->__isset.HazardTypeSystem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RiskParameter) { 
            this->RiskParameter = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter>(new TDDIAbstractRiskParameter);
          }
          xfer += this->RiskParameter->read(iprot);
          bool wasSet = false;
          if (this->RiskParameter->__isset.UsedRiskParameter) { wasSet = true; }
          if (this->RiskParameter->__isset.UsedRiskParameterType) { wasSet = true; }
          if (!wasSet) { this->RiskParameter.reset(); }
          this->__isset.RiskParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Hazard) { 
            this->Hazard = ::apache::thrift::stdcxx::shared_ptr<TDDIHazard>(new TDDIHazard);
          }
          xfer += this->Hazard->read(iprot);
          bool wasSet = false;
          if (this->Hazard->__isset.Id) { wasSet = true; }
          if (this->Hazard->__isset.Name) { wasSet = true; }
          if (this->Hazard->__isset.Description) { wasSet = true; }
          if (this->Hazard->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Hazard->__isset.Condition) { wasSet = true; }
          if (this->Hazard->__isset.HazardType) { wasSet = true; }
          if (this->Hazard->__isset.Measures) { wasSet = true; }
          if (this->Hazard->__isset.Failures) { wasSet = true; }
          if (!wasSet) { this->Hazard.reset(); }
          this->__isset.Hazard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RiskAssessment) { 
            this->RiskAssessment = ::apache::thrift::stdcxx::shared_ptr<TDDIRiskAssessment>(new TDDIRiskAssessment);
          }
          xfer += this->RiskAssessment->read(iprot);
          bool wasSet = false;
          if (this->RiskAssessment->__isset.Id) { wasSet = true; }
          if (this->RiskAssessment->__isset.Name) { wasSet = true; }
          if (this->RiskAssessment->__isset.Description) { wasSet = true; }
          if (this->RiskAssessment->__isset.KeyValueMaps) { wasSet = true; }
          if (this->RiskAssessment->__isset.RelatedStandard) { wasSet = true; }
          if (this->RiskAssessment->__isset.RiskParamaters) { wasSet = true; }
          if (this->RiskAssessment->__isset.Hazard) { wasSet = true; }
          if (!wasSet) { this->RiskAssessment.reset(); }
          this->__isset.RiskAssessment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Malfunction) { 
            this->Malfunction = ::apache::thrift::stdcxx::shared_ptr<TDDIMalfunction>(new TDDIMalfunction);
          }
          xfer += this->Malfunction->read(iprot);
          bool wasSet = false;
          if (this->Malfunction->__isset.Id) { wasSet = true; }
          if (this->Malfunction->__isset.Name) { wasSet = true; }
          if (this->Malfunction->__isset.Description) { wasSet = true; }
          if (this->Malfunction->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Malfunction->__isset.Hazards) { wasSet = true; }
          if (!wasSet) { this->Malfunction.reset(); }
          this->__isset.Malfunction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ThreatAgent) { 
            this->ThreatAgent = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractThreatAgent>(new TDDIAbstractThreatAgent);
          }
          xfer += this->ThreatAgent->read(iprot);
          bool wasSet = false;
          if (this->ThreatAgent->__isset.UsedThreatAgent) { wasSet = true; }
          if (this->ThreatAgent->__isset.UsedThreatAgentType) { wasSet = true; }
          if (!wasSet) { this->ThreatAgent.reset(); }
          this->__isset.ThreatAgent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AttackerGoal) { 
            this->AttackerGoal = ::apache::thrift::stdcxx::shared_ptr<TDDIAttackerGoal>(new TDDIAttackerGoal);
          }
          xfer += this->AttackerGoal->read(iprot);
          bool wasSet = false;
          if (this->AttackerGoal->__isset.Id) { wasSet = true; }
          if (this->AttackerGoal->__isset.Name) { wasSet = true; }
          if (this->AttackerGoal->__isset.Description) { wasSet = true; }
          if (this->AttackerGoal->__isset.KeyValueMaps) { wasSet = true; }
          if (this->AttackerGoal->__isset.Category) { wasSet = true; }
          if (this->AttackerGoal->__isset.Attacks) { wasSet = true; }
          if (this->AttackerGoal->__isset.AddressedBy) { wasSet = true; }
          if (this->AttackerGoal->__isset.AttackedItems) { wasSet = true; }
          if (!wasSet) { this->AttackerGoal.reset(); }
          this->__isset.AttackerGoal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SecurityRisk) { 
            this->SecurityRisk = ::apache::thrift::stdcxx::shared_ptr<TDDISecurityRisk>(new TDDISecurityRisk);
          }
          xfer += this->SecurityRisk->read(iprot);
          bool wasSet = false;
          if (this->SecurityRisk->__isset.Id) { wasSet = true; }
          if (this->SecurityRisk->__isset.Name) { wasSet = true; }
          if (this->SecurityRisk->__isset.Description) { wasSet = true; }
          if (this->SecurityRisk->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SecurityRisk->__isset.Likelihood) { wasSet = true; }
          if (this->SecurityRisk->__isset.ImpactAsset) { wasSet = true; }
          if (this->SecurityRisk->__isset.ImpactIndividuals) { wasSet = true; }
          if (this->SecurityRisk->__isset.ImpactBusiness) { wasSet = true; }
          if (this->SecurityRisk->__isset.AttackerGoals) { wasSet = true; }
          if (!wasSet) { this->SecurityRisk.reset(); }
          this->__isset.SecurityRisk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Attack) { 
            this->Attack = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAttack>(new TDDIAbstractAttack);
          }
          xfer += this->Attack->read(iprot);
          bool wasSet = false;
          if (this->Attack->__isset.UsedAttack) { wasSet = true; }
          if (this->Attack->__isset.UsedAttackType) { wasSet = true; }
          if (!wasSet) { this->Attack.reset(); }
          this->__isset.Attack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SecurityCapability) { 
            this->SecurityCapability = ::apache::thrift::stdcxx::shared_ptr<TDDISecurityCapability>(new TDDISecurityCapability);
          }
          xfer += this->SecurityCapability->read(iprot);
          bool wasSet = false;
          if (this->SecurityCapability->__isset.Id) { wasSet = true; }
          if (this->SecurityCapability->__isset.Name) { wasSet = true; }
          if (this->SecurityCapability->__isset.Description) { wasSet = true; }
          if (this->SecurityCapability->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SecurityCapability->__isset.Category) { wasSet = true; }
          if (this->SecurityCapability->__isset.Type) { wasSet = true; }
          if (this->SecurityCapability->__isset.ImplementedBy) { wasSet = true; }
          if (!wasSet) { this->SecurityCapability.reset(); }
          this->__isset.SecurityCapability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Asset) { 
            this->Asset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset>(new TDDIAbstractAsset);
          }
          xfer += this->Asset->read(iprot);
          bool wasSet = false;
          if (this->Asset->__isset.UsedAsset) { wasSet = true; }
          if (this->Asset->__isset.UsedAssetType) { wasSet = true; }
          if (!wasSet) { this->Asset.reset(); }
          this->__isset.Asset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Vulnerability) { 
            this->Vulnerability = ::apache::thrift::stdcxx::shared_ptr<TDDIVulnerability>(new TDDIVulnerability);
          }
          xfer += this->Vulnerability->read(iprot);
          bool wasSet = false;
          if (this->Vulnerability->__isset.Id) { wasSet = true; }
          if (this->Vulnerability->__isset.Name) { wasSet = true; }
          if (this->Vulnerability->__isset.Description) { wasSet = true; }
          if (this->Vulnerability->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Vulnerability->__isset.Category) { wasSet = true; }
          if (!wasSet) { this->Vulnerability.reset(); }
          this->__isset.Vulnerability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementSource) { 
            this->RequirementSource = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource>(new TDDIAbstractRequirementSource);
          }
          xfer += this->RequirementSource->read(iprot);
          bool wasSet = false;
          if (this->RequirementSource->__isset.UsedRequirementSource) { wasSet = true; }
          if (this->RequirementSource->__isset.UsedRequirementSourceType) { wasSet = true; }
          if (!wasSet) { this->RequirementSource.reset(); }
          this->__isset.RequirementSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DependabilityRequirement) { 
            this->DependabilityRequirement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement>(new TDDIAbstractDependabilityRequirement);
          }
          xfer += this->DependabilityRequirement->read(iprot);
          bool wasSet = false;
          if (this->DependabilityRequirement->__isset.UsedDependabilityRequirement) { wasSet = true; }
          if (this->DependabilityRequirement->__isset.UsedDependabilityRequirementType) { wasSet = true; }
          if (!wasSet) { this->DependabilityRequirement.reset(); }
          this->__isset.DependabilityRequirement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Configuration) { 
            this->Configuration = ::apache::thrift::stdcxx::shared_ptr<TDDIConfiguration>(new TDDIConfiguration);
          }
          xfer += this->Configuration->read(iprot);
          bool wasSet = false;
          if (this->Configuration->__isset.Id) { wasSet = true; }
          if (this->Configuration->__isset.Name) { wasSet = true; }
          if (this->Configuration->__isset.Description) { wasSet = true; }
          if (this->Configuration->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Configuration->__isset.SubSystems) { wasSet = true; }
          if (!wasSet) { this->Configuration.reset(); }
          this->__isset.Configuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->System) { 
            this->System = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem>(new TDDIAbstractSystem);
          }
          xfer += this->System->read(iprot);
          bool wasSet = false;
          if (this->System->__isset.UsedSystem) { wasSet = true; }
          if (this->System->__isset.UsedSystemType) { wasSet = true; }
          if (!wasSet) { this->System.reset(); }
          this->__isset.System = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Function) { 
            this->Function = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction>(new TDDIAbstractFunction);
          }
          xfer += this->Function->read(iprot);
          bool wasSet = false;
          if (this->Function->__isset.UsedFunction) { wasSet = true; }
          if (this->Function->__isset.UsedFunctionType) { wasSet = true; }
          if (!wasSet) { this->Function.reset(); }
          this->__isset.Function = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->PerfChars) { 
            this->PerfChars = ::apache::thrift::stdcxx::shared_ptr<TDDIPerfChars>(new TDDIPerfChars);
          }
          xfer += this->PerfChars->read(iprot);
          bool wasSet = false;
          if (this->PerfChars->__isset.Id) { wasSet = true; }
          if (this->PerfChars->__isset.Name) { wasSet = true; }
          if (this->PerfChars->__isset.Description) { wasSet = true; }
          if (this->PerfChars->__isset.KeyValueMaps) { wasSet = true; }
          if (this->PerfChars->__isset.ResponseTime) { wasSet = true; }
          if (!wasSet) { this->PerfChars.reset(); }
          this->__isset.PerfChars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Signal) { 
            this->Signal = ::apache::thrift::stdcxx::shared_ptr<TDDISignal>(new TDDISignal);
          }
          xfer += this->Signal->read(iprot);
          bool wasSet = false;
          if (this->Signal->__isset.Id) { wasSet = true; }
          if (this->Signal->__isset.Name) { wasSet = true; }
          if (this->Signal->__isset.Description) { wasSet = true; }
          if (this->Signal->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Signal->__isset.FromPort) { wasSet = true; }
          if (this->Signal->__isset.ToPort) { wasSet = true; }
          if (!wasSet) { this->Signal.reset(); }
          this->__isset.Signal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Context) { 
            this->Context = ::apache::thrift::stdcxx::shared_ptr<TDDIContext>(new TDDIContext);
          }
          xfer += this->Context->read(iprot);
          bool wasSet = false;
          if (this->Context->__isset.Id) { wasSet = true; }
          if (this->Context->__isset.Name) { wasSet = true; }
          if (this->Context->__isset.Description) { wasSet = true; }
          if (this->Context->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Context->__isset.UsageHistory) { wasSet = true; }
          if (this->Context->__isset.MissionTime) { wasSet = true; }
          if (this->Context->__isset.MissionTimeTimeUnit) { wasSet = true; }
          if (!wasSet) { this->Context.reset(); }
          this->__isset.Context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SystemBoundary) { 
            this->SystemBoundary = ::apache::thrift::stdcxx::shared_ptr<TDDISystemBoundary>(new TDDISystemBoundary);
          }
          xfer += this->SystemBoundary->read(iprot);
          bool wasSet = false;
          if (this->SystemBoundary->__isset.Id) { wasSet = true; }
          if (this->SystemBoundary->__isset.Name) { wasSet = true; }
          if (this->SystemBoundary->__isset.Description) { wasSet = true; }
          if (this->SystemBoundary->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SystemBoundary->__isset.Ports) { wasSet = true; }
          if (!wasSet) { this->SystemBoundary.reset(); }
          this->__isset.SystemBoundary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Port) { 
            this->Port = ::apache::thrift::stdcxx::shared_ptr<TDDIPort>(new TDDIPort);
          }
          xfer += this->Port->read(iprot);
          bool wasSet = false;
          if (this->Port->__isset.Id) { wasSet = true; }
          if (this->Port->__isset.Name) { wasSet = true; }
          if (this->Port->__isset.Description) { wasSet = true; }
          if (this->Port->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Port->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->Port->__isset.AssuranceLevel) { wasSet = true; }
          if (this->Port->__isset.FlowType) { wasSet = true; }
          if (this->Port->__isset.Direction) { wasSet = true; }
          if (this->Port->__isset.RefinedPorts) { wasSet = true; }
          if (this->Port->__isset.InterfaceFailures) { wasSet = true; }
          if (!wasSet) { this->Port.reset(); }
          this->__isset.Port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->LifecycleCondition) { 
            this->LifecycleCondition = ::apache::thrift::stdcxx::shared_ptr<TDDILifecycleCondition>(new TDDILifecycleCondition);
          }
          xfer += this->LifecycleCondition->read(iprot);
          bool wasSet = false;
          if (this->LifecycleCondition->__isset.Id) { wasSet = true; }
          if (this->LifecycleCondition->__isset.Name) { wasSet = true; }
          if (this->LifecycleCondition->__isset.Description) { wasSet = true; }
          if (this->LifecycleCondition->__isset.KeyValueMaps) { wasSet = true; }
          if (this->LifecycleCondition->__isset.Value) { wasSet = true; }
          if (this->LifecycleCondition->__isset.Conditions) { wasSet = true; }
          if (!wasSet) { this->LifecycleCondition.reset(); }
          this->__isset.LifecycleCondition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DesignPackage) { 
            this->DesignPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDesignPackage>(new TDDIDesignPackage);
          }
          xfer += this->DesignPackage->read(iprot);
          bool wasSet = false;
          if (this->DesignPackage->__isset.Id) { wasSet = true; }
          if (this->DesignPackage->__isset.Name) { wasSet = true; }
          if (this->DesignPackage->__isset.Description) { wasSet = true; }
          if (this->DesignPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DesignPackage->__isset.Systems) { wasSet = true; }
          if (this->DesignPackage->__isset.Functions) { wasSet = true; }
          if (!wasSet) { this->DesignPackage.reset(); }
          this->__isset.DesignPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureLogicPackage) { 
            this->FailureLogicPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIFailureLogicPackage>(new TDDIFailureLogicPackage);
          }
          xfer += this->FailureLogicPackage->read(iprot);
          bool wasSet = false;
          if (this->FailureLogicPackage->__isset.Id) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.Name) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.Description) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.FailureModels) { wasSet = true; }
          if (!wasSet) { this->FailureLogicPackage.reset(); }
          this->__isset.FailureLogicPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DependabilityPackage) { 
            this->DependabilityPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage>(new TDDIDependabilityPackage);
          }
          xfer += this->DependabilityPackage->read(iprot);
          bool wasSet = false;
          if (this->DependabilityPackage->__isset.Id) { wasSet = true; }
          if (this->DependabilityPackage->__isset.Name) { wasSet = true; }
          if (this->DependabilityPackage->__isset.Description) { wasSet = true; }
          if (this->DependabilityPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DependabilityPackage->__isset.Measures) { wasSet = true; }
          if (this->DependabilityPackage->__isset.MeasureTypes) { wasSet = true; }
          if (this->DependabilityPackage->__isset.MaintenanceProcedures) { wasSet = true; }
          if (this->DependabilityPackage->__isset.DomainPackages) { wasSet = true; }
          if (this->DependabilityPackage->__isset.TARAPackages) { wasSet = true; }
          if (this->DependabilityPackage->__isset.HARAPackages) { wasSet = true; }
          if (this->DependabilityPackage->__isset.RequirementPackages) { wasSet = true; }
          if (!wasSet) { this->DependabilityPackage.reset(); }
          this->__isset.DependabilityPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementPackage) { 
            this->RequirementPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage>(new TDDIRequirementPackage);
          }
          xfer += this->RequirementPackage->read(iprot);
          bool wasSet = false;
          if (this->RequirementPackage->__isset.Id) { wasSet = true; }
          if (this->RequirementPackage->__isset.Name) { wasSet = true; }
          if (this->RequirementPackage->__isset.Description) { wasSet = true; }
          if (this->RequirementPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->RequirementPackage->__isset.RequirementSources) { wasSet = true; }
          if (this->RequirementPackage->__isset.DependabilityRequirements) { wasSet = true; }
          if (!wasSet) { this->RequirementPackage.reset(); }
          this->__isset.RequirementPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DomainPackage) { 
            this->DomainPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage>(new TDDIDomainPackage);
          }
          xfer += this->DomainPackage->read(iprot);
          bool wasSet = false;
          if (this->DomainPackage->__isset.Id) { wasSet = true; }
          if (this->DomainPackage->__isset.Name) { wasSet = true; }
          if (this->DomainPackage->__isset.Description) { wasSet = true; }
          if (this->DomainPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DomainPackage->__isset.Standards) { wasSet = true; }
          if (this->DomainPackage->__isset.AssuranceLevels) { wasSet = true; }
          if (!wasSet) { this->DomainPackage.reset(); }
          this->__isset.DomainPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->HARAPackage) { 
            this->HARAPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIHARAPackage>(new TDDIHARAPackage);
          }
          xfer += this->HARAPackage->read(iprot);
          bool wasSet = false;
          if (this->HARAPackage->__isset.Id) { wasSet = true; }
          if (this->HARAPackage->__isset.Name) { wasSet = true; }
          if (this->HARAPackage->__isset.Description) { wasSet = true; }
          if (this->HARAPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->HARAPackage->__isset.Hazards) { wasSet = true; }
          if (this->HARAPackage->__isset.HazardTypes) { wasSet = true; }
          if (this->HARAPackage->__isset.HazardTypeSystems) { wasSet = true; }
          if (this->HARAPackage->__isset.Malfunctions) { wasSet = true; }
          if (this->HARAPackage->__isset.RiskAssessments) { wasSet = true; }
          if (this->HARAPackage->__isset.RiskParameters) { wasSet = true; }
          if (!wasSet) { this->HARAPackage.reset(); }
          this->__isset.HARAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TARAPackage) { 
            this->TARAPackage = ::apache::thrift::stdcxx::shared_ptr<TDDITARAPackage>(new TDDITARAPackage);
          }
          xfer += this->TARAPackage->read(iprot);
          bool wasSet = false;
          if (this->TARAPackage->__isset.Id) { wasSet = true; }
          if (this->TARAPackage->__isset.Name) { wasSet = true; }
          if (this->TARAPackage->__isset.Description) { wasSet = true; }
          if (this->TARAPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->TARAPackage->__isset.IdentifiedRisks) { wasSet = true; }
          if (this->TARAPackage->__isset.Controls) { wasSet = true; }
          if (this->TARAPackage->__isset.ConsideredAssets) { wasSet = true; }
          if (this->TARAPackage->__isset.ConsideredThreatAgents) { wasSet = true; }
          if (!wasSet) { this->TARAPackage.reset(); }
          this->__isset.TARAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DDIPackage) { 
            this->DDIPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDDIPackage>(new TDDIDDIPackage);
          }
          xfer += this->DDIPackage->read(iprot);
          bool wasSet = false;
          if (this->DDIPackage->__isset.Id) { wasSet = true; }
          if (this->DDIPackage->__isset.Name) { wasSet = true; }
          if (this->DDIPackage->__isset.Description) { wasSet = true; }
          if (this->DDIPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DDIPackage->__isset.ODEProductPackages) { wasSet = true; }
          if (this->DDIPackage->__isset.AssuranceCasePackages) { wasSet = true; }
          if (!wasSet) { this->DDIPackage.reset(); }
          this->__isset.DDIPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIBaseElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIBaseElementUnion");

  if (this->__isset.FailureModel) {
    xfer += oprot->writeFieldBegin("FailureModel", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->FailureModel) {
      xfer += this->FailureModel->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFailureModel"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MinimalCutSets) {
    xfer += oprot->writeFieldBegin("MinimalCutSets", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->MinimalCutSets) {
      xfer += this->MinimalCutSets->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMinimalCutSets"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MinimalCutSet) {
    xfer += oprot->writeFieldBegin("MinimalCutSet", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->MinimalCutSet) {
      xfer += this->MinimalCutSet->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMinimalCutSet"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Failure) {
    xfer += oprot->writeFieldBegin("Failure", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->Failure) {
      xfer += this->Failure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ProbDist) {
    xfer += oprot->writeFieldBegin("ProbDist", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->ProbDist) {
      xfer += this->ProbDist->write(oprot); 
    } else {oprot->writeStructBegin("TDDIProbDist"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ProbDistParam) {
    xfer += oprot->writeFieldBegin("ProbDistParam", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->ProbDistParam) {
      xfer += this->ProbDistParam->write(oprot); 
    } else {oprot->writeStructBegin("TDDIProbDistParam"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEAEntry) {
    xfer += oprot->writeFieldBegin("FMEAEntry", ::apache::thrift::protocol::T_STRUCT, 7);
    if (this->FMEAEntry) {
      xfer += this->FMEAEntry->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFMEAEntry"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Transition) {
    xfer += oprot->writeFieldBegin("Transition", ::apache::thrift::protocol::T_STRUCT, 8);
    if (this->Transition) {
      xfer += this->Transition->write(oprot); 
    } else {oprot->writeStructBegin("TDDITransition"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.State) {
    xfer += oprot->writeFieldBegin("State", ::apache::thrift::protocol::T_STRUCT, 9);
    if (this->State) {
      xfer += this->State->write(oprot); 
    } else {oprot->writeStructBegin("TDDIState"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Cause) {
    xfer += oprot->writeFieldBegin("Cause", ::apache::thrift::protocol::T_STRUCT, 10);
    if (this->Cause) {
      xfer += this->Cause->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractCause"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Measure) {
    xfer += oprot->writeFieldBegin("Measure", ::apache::thrift::protocol::T_STRUCT, 11);
    if (this->Measure) {
      xfer += this->Measure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractMeasure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MeasureType) {
    xfer += oprot->writeFieldBegin("MeasureType", ::apache::thrift::protocol::T_STRUCT, 12);
    if (this->MeasureType) {
      xfer += this->MeasureType->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMeasureType"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MaintenanceProcedure) {
    xfer += oprot->writeFieldBegin("MaintenanceProcedure", ::apache::thrift::protocol::T_STRUCT, 13);
    if (this->MaintenanceProcedure) {
      xfer += this->MaintenanceProcedure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMaintenanceProcedure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Standard) {
    xfer += oprot->writeFieldBegin("Standard", ::apache::thrift::protocol::T_STRUCT, 14);
    if (this->Standard) {
      xfer += this->Standard->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractStandard"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssuranceLevel) {
    xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 15);
    if (this->AssuranceLevel) {
      xfer += this->AssuranceLevel->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HazardType) {
    xfer += oprot->writeFieldBegin("HazardType", ::apache::thrift::protocol::T_STRUCT, 16);
    if (this->HazardType) {
      xfer += this->HazardType->write(oprot); 
    } else {oprot->writeStructBegin("TDDIHazardType"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HazardTypeSystem) {
    xfer += oprot->writeFieldBegin("HazardTypeSystem", ::apache::thrift::protocol::T_STRUCT, 17);
    if (this->HazardTypeSystem) {
      xfer += this->HazardTypeSystem->write(oprot); 
    } else {oprot->writeStructBegin("TDDIHazardTypeSystem"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RiskParameter) {
    xfer += oprot->writeFieldBegin("RiskParameter", ::apache::thrift::protocol::T_STRUCT, 18);
    if (this->RiskParameter) {
      xfer += this->RiskParameter->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractRiskParameter"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Hazard) {
    xfer += oprot->writeFieldBegin("Hazard", ::apache::thrift::protocol::T_STRUCT, 19);
    if (this->Hazard) {
      xfer += this->Hazard->write(oprot); 
    } else {oprot->writeStructBegin("TDDIHazard"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RiskAssessment) {
    xfer += oprot->writeFieldBegin("RiskAssessment", ::apache::thrift::protocol::T_STRUCT, 20);
    if (this->RiskAssessment) {
      xfer += this->RiskAssessment->write(oprot); 
    } else {oprot->writeStructBegin("TDDIRiskAssessment"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Malfunction) {
    xfer += oprot->writeFieldBegin("Malfunction", ::apache::thrift::protocol::T_STRUCT, 21);
    if (this->Malfunction) {
      xfer += this->Malfunction->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMalfunction"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ThreatAgent) {
    xfer += oprot->writeFieldBegin("ThreatAgent", ::apache::thrift::protocol::T_STRUCT, 22);
    if (this->ThreatAgent) {
      xfer += this->ThreatAgent->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractThreatAgent"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AttackerGoal) {
    xfer += oprot->writeFieldBegin("AttackerGoal", ::apache::thrift::protocol::T_STRUCT, 23);
    if (this->AttackerGoal) {
      xfer += this->AttackerGoal->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAttackerGoal"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SecurityRisk) {
    xfer += oprot->writeFieldBegin("SecurityRisk", ::apache::thrift::protocol::T_STRUCT, 24);
    if (this->SecurityRisk) {
      xfer += this->SecurityRisk->write(oprot); 
    } else {oprot->writeStructBegin("TDDISecurityRisk"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Attack) {
    xfer += oprot->writeFieldBegin("Attack", ::apache::thrift::protocol::T_STRUCT, 25);
    if (this->Attack) {
      xfer += this->Attack->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractAttack"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SecurityCapability) {
    xfer += oprot->writeFieldBegin("SecurityCapability", ::apache::thrift::protocol::T_STRUCT, 26);
    if (this->SecurityCapability) {
      xfer += this->SecurityCapability->write(oprot); 
    } else {oprot->writeStructBegin("TDDISecurityCapability"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Asset) {
    xfer += oprot->writeFieldBegin("Asset", ::apache::thrift::protocol::T_STRUCT, 27);
    if (this->Asset) {
      xfer += this->Asset->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractAsset"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Vulnerability) {
    xfer += oprot->writeFieldBegin("Vulnerability", ::apache::thrift::protocol::T_STRUCT, 28);
    if (this->Vulnerability) {
      xfer += this->Vulnerability->write(oprot); 
    } else {oprot->writeStructBegin("TDDIVulnerability"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RequirementSource) {
    xfer += oprot->writeFieldBegin("RequirementSource", ::apache::thrift::protocol::T_STRUCT, 29);
    if (this->RequirementSource) {
      xfer += this->RequirementSource->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractRequirementSource"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DependabilityRequirement) {
    xfer += oprot->writeFieldBegin("DependabilityRequirement", ::apache::thrift::protocol::T_STRUCT, 30);
    if (this->DependabilityRequirement) {
      xfer += this->DependabilityRequirement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractDependabilityRequirement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Configuration) {
    xfer += oprot->writeFieldBegin("Configuration", ::apache::thrift::protocol::T_STRUCT, 31);
    if (this->Configuration) {
      xfer += this->Configuration->write(oprot); 
    } else {oprot->writeStructBegin("TDDIConfiguration"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.System) {
    xfer += oprot->writeFieldBegin("System", ::apache::thrift::protocol::T_STRUCT, 32);
    if (this->System) {
      xfer += this->System->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractSystem"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Function) {
    xfer += oprot->writeFieldBegin("Function", ::apache::thrift::protocol::T_STRUCT, 33);
    if (this->Function) {
      xfer += this->Function->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractFunction"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.PerfChars) {
    xfer += oprot->writeFieldBegin("PerfChars", ::apache::thrift::protocol::T_STRUCT, 34);
    if (this->PerfChars) {
      xfer += this->PerfChars->write(oprot); 
    } else {oprot->writeStructBegin("TDDIPerfChars"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Signal) {
    xfer += oprot->writeFieldBegin("Signal", ::apache::thrift::protocol::T_STRUCT, 35);
    if (this->Signal) {
      xfer += this->Signal->write(oprot); 
    } else {oprot->writeStructBegin("TDDISignal"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Context) {
    xfer += oprot->writeFieldBegin("Context", ::apache::thrift::protocol::T_STRUCT, 36);
    if (this->Context) {
      xfer += this->Context->write(oprot); 
    } else {oprot->writeStructBegin("TDDIContext"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SystemBoundary) {
    xfer += oprot->writeFieldBegin("SystemBoundary", ::apache::thrift::protocol::T_STRUCT, 37);
    if (this->SystemBoundary) {
      xfer += this->SystemBoundary->write(oprot); 
    } else {oprot->writeStructBegin("TDDISystemBoundary"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Port) {
    xfer += oprot->writeFieldBegin("Port", ::apache::thrift::protocol::T_STRUCT, 38);
    if (this->Port) {
      xfer += this->Port->write(oprot); 
    } else {oprot->writeStructBegin("TDDIPort"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.LifecycleCondition) {
    xfer += oprot->writeFieldBegin("LifecycleCondition", ::apache::thrift::protocol::T_STRUCT, 39);
    if (this->LifecycleCondition) {
      xfer += this->LifecycleCondition->write(oprot); 
    } else {oprot->writeStructBegin("TDDILifecycleCondition"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DesignPackage) {
    xfer += oprot->writeFieldBegin("DesignPackage", ::apache::thrift::protocol::T_STRUCT, 40);
    if (this->DesignPackage) {
      xfer += this->DesignPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDesignPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FailureLogicPackage) {
    xfer += oprot->writeFieldBegin("FailureLogicPackage", ::apache::thrift::protocol::T_STRUCT, 41);
    if (this->FailureLogicPackage) {
      xfer += this->FailureLogicPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFailureLogicPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DependabilityPackage) {
    xfer += oprot->writeFieldBegin("DependabilityPackage", ::apache::thrift::protocol::T_STRUCT, 42);
    if (this->DependabilityPackage) {
      xfer += this->DependabilityPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDependabilityPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RequirementPackage) {
    xfer += oprot->writeFieldBegin("RequirementPackage", ::apache::thrift::protocol::T_STRUCT, 43);
    if (this->RequirementPackage) {
      xfer += this->RequirementPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIRequirementPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DomainPackage) {
    xfer += oprot->writeFieldBegin("DomainPackage", ::apache::thrift::protocol::T_STRUCT, 44);
    if (this->DomainPackage) {
      xfer += this->DomainPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDomainPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HARAPackage) {
    xfer += oprot->writeFieldBegin("HARAPackage", ::apache::thrift::protocol::T_STRUCT, 45);
    if (this->HARAPackage) {
      xfer += this->HARAPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIHARAPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TARAPackage) {
    xfer += oprot->writeFieldBegin("TARAPackage", ::apache::thrift::protocol::T_STRUCT, 46);
    if (this->TARAPackage) {
      xfer += this->TARAPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDITARAPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DDIPackage) {
    xfer += oprot->writeFieldBegin("DDIPackage", ::apache::thrift::protocol::T_STRUCT, 47);
    if (this->DDIPackage) {
      xfer += this->DDIPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDDIPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIBaseElementUnion &a, TDDIBaseElementUnion &b) {
  using ::std::swap;
  swap(a.FailureModel, b.FailureModel);
  swap(a.MinimalCutSets, b.MinimalCutSets);
  swap(a.MinimalCutSet, b.MinimalCutSet);
  swap(a.Failure, b.Failure);
  swap(a.ProbDist, b.ProbDist);
  swap(a.ProbDistParam, b.ProbDistParam);
  swap(a.FMEAEntry, b.FMEAEntry);
  swap(a.Transition, b.Transition);
  swap(a.State, b.State);
  swap(a.Cause, b.Cause);
  swap(a.Measure, b.Measure);
  swap(a.MeasureType, b.MeasureType);
  swap(a.MaintenanceProcedure, b.MaintenanceProcedure);
  swap(a.Standard, b.Standard);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.HazardType, b.HazardType);
  swap(a.HazardTypeSystem, b.HazardTypeSystem);
  swap(a.RiskParameter, b.RiskParameter);
  swap(a.Hazard, b.Hazard);
  swap(a.RiskAssessment, b.RiskAssessment);
  swap(a.Malfunction, b.Malfunction);
  swap(a.ThreatAgent, b.ThreatAgent);
  swap(a.AttackerGoal, b.AttackerGoal);
  swap(a.SecurityRisk, b.SecurityRisk);
  swap(a.Attack, b.Attack);
  swap(a.SecurityCapability, b.SecurityCapability);
  swap(a.Asset, b.Asset);
  swap(a.Vulnerability, b.Vulnerability);
  swap(a.RequirementSource, b.RequirementSource);
  swap(a.DependabilityRequirement, b.DependabilityRequirement);
  swap(a.Configuration, b.Configuration);
  swap(a.System, b.System);
  swap(a.Function, b.Function);
  swap(a.PerfChars, b.PerfChars);
  swap(a.Signal, b.Signal);
  swap(a.Context, b.Context);
  swap(a.SystemBoundary, b.SystemBoundary);
  swap(a.Port, b.Port);
  swap(a.LifecycleCondition, b.LifecycleCondition);
  swap(a.DesignPackage, b.DesignPackage);
  swap(a.FailureLogicPackage, b.FailureLogicPackage);
  swap(a.DependabilityPackage, b.DependabilityPackage);
  swap(a.RequirementPackage, b.RequirementPackage);
  swap(a.DomainPackage, b.DomainPackage);
  swap(a.HARAPackage, b.HARAPackage);
  swap(a.TARAPackage, b.TARAPackage);
  swap(a.DDIPackage, b.DDIPackage);
  swap(a.__isset, b.__isset);
}

TDDIBaseElementUnion::TDDIBaseElementUnion(const TDDIBaseElementUnion& other82) {
  FailureModel = other82.FailureModel;
  MinimalCutSets = other82.MinimalCutSets;
  MinimalCutSet = other82.MinimalCutSet;
  Failure = other82.Failure;
  ProbDist = other82.ProbDist;
  ProbDistParam = other82.ProbDistParam;
  FMEAEntry = other82.FMEAEntry;
  Transition = other82.Transition;
  State = other82.State;
  Cause = other82.Cause;
  Measure = other82.Measure;
  MeasureType = other82.MeasureType;
  MaintenanceProcedure = other82.MaintenanceProcedure;
  Standard = other82.Standard;
  AssuranceLevel = other82.AssuranceLevel;
  HazardType = other82.HazardType;
  HazardTypeSystem = other82.HazardTypeSystem;
  RiskParameter = other82.RiskParameter;
  Hazard = other82.Hazard;
  RiskAssessment = other82.RiskAssessment;
  Malfunction = other82.Malfunction;
  ThreatAgent = other82.ThreatAgent;
  AttackerGoal = other82.AttackerGoal;
  SecurityRisk = other82.SecurityRisk;
  Attack = other82.Attack;
  SecurityCapability = other82.SecurityCapability;
  Asset = other82.Asset;
  Vulnerability = other82.Vulnerability;
  RequirementSource = other82.RequirementSource;
  DependabilityRequirement = other82.DependabilityRequirement;
  Configuration = other82.Configuration;
  System = other82.System;
  Function = other82.Function;
  PerfChars = other82.PerfChars;
  Signal = other82.Signal;
  Context = other82.Context;
  SystemBoundary = other82.SystemBoundary;
  Port = other82.Port;
  LifecycleCondition = other82.LifecycleCondition;
  DesignPackage = other82.DesignPackage;
  FailureLogicPackage = other82.FailureLogicPackage;
  DependabilityPackage = other82.DependabilityPackage;
  RequirementPackage = other82.RequirementPackage;
  DomainPackage = other82.DomainPackage;
  HARAPackage = other82.HARAPackage;
  TARAPackage = other82.TARAPackage;
  DDIPackage = other82.DDIPackage;
  __isset = other82.__isset;
}
TDDIBaseElementUnion& TDDIBaseElementUnion::operator=(const TDDIBaseElementUnion& other83) {
  FailureModel = other83.FailureModel;
  MinimalCutSets = other83.MinimalCutSets;
  MinimalCutSet = other83.MinimalCutSet;
  Failure = other83.Failure;
  ProbDist = other83.ProbDist;
  ProbDistParam = other83.ProbDistParam;
  FMEAEntry = other83.FMEAEntry;
  Transition = other83.Transition;
  State = other83.State;
  Cause = other83.Cause;
  Measure = other83.Measure;
  MeasureType = other83.MeasureType;
  MaintenanceProcedure = other83.MaintenanceProcedure;
  Standard = other83.Standard;
  AssuranceLevel = other83.AssuranceLevel;
  HazardType = other83.HazardType;
  HazardTypeSystem = other83.HazardTypeSystem;
  RiskParameter = other83.RiskParameter;
  Hazard = other83.Hazard;
  RiskAssessment = other83.RiskAssessment;
  Malfunction = other83.Malfunction;
  ThreatAgent = other83.ThreatAgent;
  AttackerGoal = other83.AttackerGoal;
  SecurityRisk = other83.SecurityRisk;
  Attack = other83.Attack;
  SecurityCapability = other83.SecurityCapability;
  Asset = other83.Asset;
  Vulnerability = other83.Vulnerability;
  RequirementSource = other83.RequirementSource;
  DependabilityRequirement = other83.DependabilityRequirement;
  Configuration = other83.Configuration;
  System = other83.System;
  Function = other83.Function;
  PerfChars = other83.PerfChars;
  Signal = other83.Signal;
  Context = other83.Context;
  SystemBoundary = other83.SystemBoundary;
  Port = other83.Port;
  LifecycleCondition = other83.LifecycleCondition;
  DesignPackage = other83.DesignPackage;
  FailureLogicPackage = other83.FailureLogicPackage;
  DependabilityPackage = other83.DependabilityPackage;
  RequirementPackage = other83.RequirementPackage;
  DomainPackage = other83.DomainPackage;
  HARAPackage = other83.HARAPackage;
  TARAPackage = other83.TARAPackage;
  DDIPackage = other83.DDIPackage;
  __isset = other83.__isset;
  return *this;
}
void TDDIBaseElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIBaseElementUnion(";
  out << "FailureModel="; (__isset.FailureModel ? (out << to_string(FailureModel)) : (out << "<null>"));
  out << ", " << "MinimalCutSets="; (__isset.MinimalCutSets ? (out << to_string(MinimalCutSets)) : (out << "<null>"));
  out << ", " << "MinimalCutSet="; (__isset.MinimalCutSet ? (out << to_string(MinimalCutSet)) : (out << "<null>"));
  out << ", " << "Failure="; (__isset.Failure ? (out << to_string(Failure)) : (out << "<null>"));
  out << ", " << "ProbDist="; (__isset.ProbDist ? (out << to_string(ProbDist)) : (out << "<null>"));
  out << ", " << "ProbDistParam="; (__isset.ProbDistParam ? (out << to_string(ProbDistParam)) : (out << "<null>"));
  out << ", " << "FMEAEntry="; (__isset.FMEAEntry ? (out << to_string(FMEAEntry)) : (out << "<null>"));
  out << ", " << "Transition="; (__isset.Transition ? (out << to_string(Transition)) : (out << "<null>"));
  out << ", " << "State="; (__isset.State ? (out << to_string(State)) : (out << "<null>"));
  out << ", " << "Cause="; (__isset.Cause ? (out << to_string(Cause)) : (out << "<null>"));
  out << ", " << "Measure="; (__isset.Measure ? (out << to_string(Measure)) : (out << "<null>"));
  out << ", " << "MeasureType="; (__isset.MeasureType ? (out << to_string(MeasureType)) : (out << "<null>"));
  out << ", " << "MaintenanceProcedure="; (__isset.MaintenanceProcedure ? (out << to_string(MaintenanceProcedure)) : (out << "<null>"));
  out << ", " << "Standard="; (__isset.Standard ? (out << to_string(Standard)) : (out << "<null>"));
  out << ", " << "AssuranceLevel="; (__isset.AssuranceLevel ? (out << to_string(AssuranceLevel)) : (out << "<null>"));
  out << ", " << "HazardType="; (__isset.HazardType ? (out << to_string(HazardType)) : (out << "<null>"));
  out << ", " << "HazardTypeSystem="; (__isset.HazardTypeSystem ? (out << to_string(HazardTypeSystem)) : (out << "<null>"));
  out << ", " << "RiskParameter="; (__isset.RiskParameter ? (out << to_string(RiskParameter)) : (out << "<null>"));
  out << ", " << "Hazard="; (__isset.Hazard ? (out << to_string(Hazard)) : (out << "<null>"));
  out << ", " << "RiskAssessment="; (__isset.RiskAssessment ? (out << to_string(RiskAssessment)) : (out << "<null>"));
  out << ", " << "Malfunction="; (__isset.Malfunction ? (out << to_string(Malfunction)) : (out << "<null>"));
  out << ", " << "ThreatAgent="; (__isset.ThreatAgent ? (out << to_string(ThreatAgent)) : (out << "<null>"));
  out << ", " << "AttackerGoal="; (__isset.AttackerGoal ? (out << to_string(AttackerGoal)) : (out << "<null>"));
  out << ", " << "SecurityRisk="; (__isset.SecurityRisk ? (out << to_string(SecurityRisk)) : (out << "<null>"));
  out << ", " << "Attack="; (__isset.Attack ? (out << to_string(Attack)) : (out << "<null>"));
  out << ", " << "SecurityCapability="; (__isset.SecurityCapability ? (out << to_string(SecurityCapability)) : (out << "<null>"));
  out << ", " << "Asset="; (__isset.Asset ? (out << to_string(Asset)) : (out << "<null>"));
  out << ", " << "Vulnerability="; (__isset.Vulnerability ? (out << to_string(Vulnerability)) : (out << "<null>"));
  out << ", " << "RequirementSource="; (__isset.RequirementSource ? (out << to_string(RequirementSource)) : (out << "<null>"));
  out << ", " << "DependabilityRequirement="; (__isset.DependabilityRequirement ? (out << to_string(DependabilityRequirement)) : (out << "<null>"));
  out << ", " << "Configuration="; (__isset.Configuration ? (out << to_string(Configuration)) : (out << "<null>"));
  out << ", " << "System="; (__isset.System ? (out << to_string(System)) : (out << "<null>"));
  out << ", " << "Function="; (__isset.Function ? (out << to_string(Function)) : (out << "<null>"));
  out << ", " << "PerfChars="; (__isset.PerfChars ? (out << to_string(PerfChars)) : (out << "<null>"));
  out << ", " << "Signal="; (__isset.Signal ? (out << to_string(Signal)) : (out << "<null>"));
  out << ", " << "Context="; (__isset.Context ? (out << to_string(Context)) : (out << "<null>"));
  out << ", " << "SystemBoundary="; (__isset.SystemBoundary ? (out << to_string(SystemBoundary)) : (out << "<null>"));
  out << ", " << "Port="; (__isset.Port ? (out << to_string(Port)) : (out << "<null>"));
  out << ", " << "LifecycleCondition="; (__isset.LifecycleCondition ? (out << to_string(LifecycleCondition)) : (out << "<null>"));
  out << ", " << "DesignPackage="; (__isset.DesignPackage ? (out << to_string(DesignPackage)) : (out << "<null>"));
  out << ", " << "FailureLogicPackage="; (__isset.FailureLogicPackage ? (out << to_string(FailureLogicPackage)) : (out << "<null>"));
  out << ", " << "DependabilityPackage="; (__isset.DependabilityPackage ? (out << to_string(DependabilityPackage)) : (out << "<null>"));
  out << ", " << "RequirementPackage="; (__isset.RequirementPackage ? (out << to_string(RequirementPackage)) : (out << "<null>"));
  out << ", " << "DomainPackage="; (__isset.DomainPackage ? (out << to_string(DomainPackage)) : (out << "<null>"));
  out << ", " << "HARAPackage="; (__isset.HARAPackage ? (out << to_string(HARAPackage)) : (out << "<null>"));
  out << ", " << "TARAPackage="; (__isset.TARAPackage ? (out << to_string(TARAPackage)) : (out << "<null>"));
  out << ", " << "DDIPackage="; (__isset.DDIPackage ? (out << to_string(DDIPackage)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractBaseElement::~TDDIAbstractBaseElement() throw() {
}


void TDDIAbstractBaseElement::__set_UsedBaseElement(const TDDIBaseElementUnion& val) {
  this->UsedBaseElement = val;
}

void TDDIAbstractBaseElement::__set_UsedBaseElementType(const TDDIBaseElementUnionType val) {
  this->UsedBaseElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractBaseElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractBaseElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedBaseElement.read(iprot);
          this->__isset.UsedBaseElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast84;
          xfer += iprot->readI32(ecast84);
          this->UsedBaseElementType = (TDDIBaseElementUnionType)ecast84;
          this->__isset.UsedBaseElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractBaseElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractBaseElement");

  xfer += oprot->writeFieldBegin("UsedBaseElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedBaseElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedBaseElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedBaseElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractBaseElement &a, TDDIAbstractBaseElement &b) {
  using ::std::swap;
  swap(a.UsedBaseElement, b.UsedBaseElement);
  swap(a.UsedBaseElementType, b.UsedBaseElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractBaseElement::TDDIAbstractBaseElement(const TDDIAbstractBaseElement& other85) {
  UsedBaseElement = other85.UsedBaseElement;
  UsedBaseElementType = other85.UsedBaseElementType;
  __isset = other85.__isset;
}
TDDIAbstractBaseElement& TDDIAbstractBaseElement::operator=(const TDDIAbstractBaseElement& other86) {
  UsedBaseElement = other86.UsedBaseElement;
  UsedBaseElementType = other86.UsedBaseElementType;
  __isset = other86.__isset;
  return *this;
}
void TDDIAbstractBaseElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractBaseElement(";
  out << "UsedBaseElement=" << to_string(UsedBaseElement);
  out << ", " << "UsedBaseElementType=" << to_string(UsedBaseElementType);
  out << ")";
}


TDDIValue::~TDDIValue() throw() {
}


void TDDIValue::__set_Tag(const std::string& val) {
  this->Tag = val;
}

void TDDIValue::__set_Value(const std::string& val) {
  this->Value = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIValue& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Tag);
          this->__isset.Tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIValue");

  xfer += oprot->writeFieldBegin("Tag", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIValue &a, TDDIValue &b) {
  using ::std::swap;
  swap(a.Tag, b.Tag);
  swap(a.Value, b.Value);
  swap(a.__isset, b.__isset);
}

TDDIValue::TDDIValue(const TDDIValue& other87) {
  Tag = other87.Tag;
  Value = other87.Value;
  __isset = other87.__isset;
}
TDDIValue& TDDIValue::operator=(const TDDIValue& other88) {
  Tag = other88.Tag;
  Value = other88.Value;
  __isset = other88.__isset;
  return *this;
}
void TDDIValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIValue(";
  out << "Tag=" << to_string(Tag);
  out << ", " << "Value=" << to_string(Value);
  out << ")";
}


TDDIKeyValueMap::~TDDIKeyValueMap() throw() {
}


void TDDIKeyValueMap::__set_Key(const std::string& val) {
  this->Key = val;
}

void TDDIKeyValueMap::__set_Values(const std::vector<TDDIValue> & val) {
  this->Values = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIKeyValueMap& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIKeyValueMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Key);
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Values.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _etype92;
            xfer += iprot->readListBegin(_etype92, _size89);
            this->Values.resize(_size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              xfer += this->Values[_i93].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIKeyValueMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIKeyValueMap");

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Values", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Values.size()));
    std::vector<TDDIValue> ::const_iterator _iter94;
    for (_iter94 = this->Values.begin(); _iter94 != this->Values.end(); ++_iter94)
    {
      xfer += (*_iter94).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIKeyValueMap &a, TDDIKeyValueMap &b) {
  using ::std::swap;
  swap(a.Key, b.Key);
  swap(a.Values, b.Values);
  swap(a.__isset, b.__isset);
}

TDDIKeyValueMap::TDDIKeyValueMap(const TDDIKeyValueMap& other95) {
  Key = other95.Key;
  Values = other95.Values;
  __isset = other95.__isset;
}
TDDIKeyValueMap& TDDIKeyValueMap::operator=(const TDDIKeyValueMap& other96) {
  Key = other96.Key;
  Values = other96.Values;
  __isset = other96.__isset;
  return *this;
}
void TDDIKeyValueMap::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIKeyValueMap(";
  out << "Key=" << to_string(Key);
  out << ", " << "Values=" << to_string(Values);
  out << ")";
}


TDDIMeasureType::~TDDIMeasureType() throw() {
}


void TDDIMeasureType::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMeasureType::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMeasureType::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMeasureType::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMeasureType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMeasureType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size97;
            ::apache::thrift::protocol::TType _etype100;
            xfer += iprot->readListBegin(_etype100, _size97);
            this->KeyValueMaps.resize(_size97);
            uint32_t _i101;
            for (_i101 = 0; _i101 < _size97; ++_i101)
            {
              xfer += this->KeyValueMaps[_i101].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMeasureType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMeasureType");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter102;
    for (_iter102 = this->KeyValueMaps.begin(); _iter102 != this->KeyValueMaps.end(); ++_iter102)
    {
      xfer += (*_iter102).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMeasureType &a, TDDIMeasureType &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.__isset, b.__isset);
}

TDDIMeasureType::TDDIMeasureType(const TDDIMeasureType& other103) {
  Id = other103.Id;
  Name = other103.Name;
  Description = other103.Description;
  KeyValueMaps = other103.KeyValueMaps;
  __isset = other103.__isset;
}
TDDIMeasureType& TDDIMeasureType::operator=(const TDDIMeasureType& other104) {
  Id = other104.Id;
  Name = other104.Name;
  Description = other104.Description;
  KeyValueMaps = other104.KeyValueMaps;
  __isset = other104.__isset;
  return *this;
}
void TDDIMeasureType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMeasureType(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ")";
}


TDDIMeasure::~TDDIMeasure() throw() {
}


void TDDIMeasure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMeasure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMeasure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMeasure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIMeasure::__set_IntrinsicSafety(const std::string& val) {
  this->IntrinsicSafety = val;
}

void TDDIMeasure::__set_SafeGuard(const std::string& val) {
  this->SafeGuard = val;
}

void TDDIMeasure::__set_ApplierInformation(const std::string& val) {
  this->ApplierInformation = val;
}

void TDDIMeasure::__set_RiskAcceptability(const bool val) {
  this->RiskAcceptability = val;
}

void TDDIMeasure::__set_FurtherAction(const std::string& val) {
  this->FurtherAction = val;
}

void TDDIMeasure::__set_Source(const std::string& val) {
  this->Source = val;
}

void TDDIMeasure::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIMeasure::__set_MeasureType(::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> val) {
  this->MeasureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMeasure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMeasure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _etype108;
            xfer += iprot->readListBegin(_etype108, _size105);
            this->KeyValueMaps.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += this->KeyValueMaps[_i109].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IntrinsicSafety);
          this->__isset.IntrinsicSafety = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeGuard);
          this->__isset.SafeGuard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ApplierInformation);
          this->__isset.ApplierInformation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->RiskAcceptability);
          this->__isset.RiskAcceptability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FurtherAction);
          this->__isset.FurtherAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Source);
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MeasureType) { 
            this->MeasureType = ::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType>(new TDDIMeasureType);
          }
          xfer += this->MeasureType->read(iprot);
          bool wasSet = false;
          if (this->MeasureType->__isset.Id) { wasSet = true; }
          if (this->MeasureType->__isset.Name) { wasSet = true; }
          if (this->MeasureType->__isset.Description) { wasSet = true; }
          if (this->MeasureType->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->MeasureType.reset(); }
          this->__isset.MeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMeasure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMeasure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter110;
    for (_iter110 = this->KeyValueMaps.begin(); _iter110 != this->KeyValueMaps.end(); ++_iter110)
    {
      xfer += (*_iter110).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IntrinsicSafety", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->IntrinsicSafety);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeGuard", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->SafeGuard);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ApplierInformation", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ApplierInformation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskAcceptability", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->RiskAcceptability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FurtherAction", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->FurtherAction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->Source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MeasureType", ::apache::thrift::protocol::T_STRUCT, 15);
  if (this->MeasureType) {
    xfer += this->MeasureType->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMeasureType"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMeasure &a, TDDIMeasure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.IntrinsicSafety, b.IntrinsicSafety);
  swap(a.SafeGuard, b.SafeGuard);
  swap(a.ApplierInformation, b.ApplierInformation);
  swap(a.RiskAcceptability, b.RiskAcceptability);
  swap(a.FurtherAction, b.FurtherAction);
  swap(a.Source, b.Source);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.MeasureType, b.MeasureType);
  swap(a.__isset, b.__isset);
}

TDDIMeasure::TDDIMeasure(const TDDIMeasure& other111) {
  Id = other111.Id;
  Name = other111.Name;
  Description = other111.Description;
  KeyValueMaps = other111.KeyValueMaps;
  IntrinsicSafety = other111.IntrinsicSafety;
  SafeGuard = other111.SafeGuard;
  ApplierInformation = other111.ApplierInformation;
  RiskAcceptability = other111.RiskAcceptability;
  FurtherAction = other111.FurtherAction;
  Source = other111.Source;
  AssuranceLevel = other111.AssuranceLevel;
  MeasureType = other111.MeasureType;
  __isset = other111.__isset;
}
TDDIMeasure& TDDIMeasure::operator=(const TDDIMeasure& other112) {
  Id = other112.Id;
  Name = other112.Name;
  Description = other112.Description;
  KeyValueMaps = other112.KeyValueMaps;
  IntrinsicSafety = other112.IntrinsicSafety;
  SafeGuard = other112.SafeGuard;
  ApplierInformation = other112.ApplierInformation;
  RiskAcceptability = other112.RiskAcceptability;
  FurtherAction = other112.FurtherAction;
  Source = other112.Source;
  AssuranceLevel = other112.AssuranceLevel;
  MeasureType = other112.MeasureType;
  __isset = other112.__isset;
  return *this;
}
void TDDIMeasure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMeasure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "IntrinsicSafety=" << to_string(IntrinsicSafety);
  out << ", " << "SafeGuard=" << to_string(SafeGuard);
  out << ", " << "ApplierInformation=" << to_string(ApplierInformation);
  out << ", " << "RiskAcceptability=" << to_string(RiskAcceptability);
  out << ", " << "FurtherAction=" << to_string(FurtherAction);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "MeasureType=" << to_string(MeasureType);
  out << ")";
}


TDDIFaultToleranceMeasure::~TDDIFaultToleranceMeasure() throw() {
}


void TDDIFaultToleranceMeasure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFaultToleranceMeasure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFaultToleranceMeasure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFaultToleranceMeasure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFaultToleranceMeasure::__set_IntrinsicSafety(const std::string& val) {
  this->IntrinsicSafety = val;
}

void TDDIFaultToleranceMeasure::__set_SafeGuard(const std::string& val) {
  this->SafeGuard = val;
}

void TDDIFaultToleranceMeasure::__set_ApplierInformation(const std::string& val) {
  this->ApplierInformation = val;
}

void TDDIFaultToleranceMeasure::__set_RiskAcceptability(const bool val) {
  this->RiskAcceptability = val;
}

void TDDIFaultToleranceMeasure::__set_FurtherAction(const std::string& val) {
  this->FurtherAction = val;
}

void TDDIFaultToleranceMeasure::__set_Source(const std::string& val) {
  this->Source = val;
}

void TDDIFaultToleranceMeasure::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIFaultToleranceMeasure::__set_MeasureType(::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> val) {
  this->MeasureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFaultToleranceMeasure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFaultToleranceMeasure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readListBegin(_etype116, _size113);
            this->KeyValueMaps.resize(_size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              xfer += this->KeyValueMaps[_i117].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IntrinsicSafety);
          this->__isset.IntrinsicSafety = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeGuard);
          this->__isset.SafeGuard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ApplierInformation);
          this->__isset.ApplierInformation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->RiskAcceptability);
          this->__isset.RiskAcceptability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FurtherAction);
          this->__isset.FurtherAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Source);
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MeasureType) { 
            this->MeasureType = ::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType>(new TDDIMeasureType);
          }
          xfer += this->MeasureType->read(iprot);
          bool wasSet = false;
          if (this->MeasureType->__isset.Id) { wasSet = true; }
          if (this->MeasureType->__isset.Name) { wasSet = true; }
          if (this->MeasureType->__isset.Description) { wasSet = true; }
          if (this->MeasureType->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->MeasureType.reset(); }
          this->__isset.MeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFaultToleranceMeasure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFaultToleranceMeasure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter118;
    for (_iter118 = this->KeyValueMaps.begin(); _iter118 != this->KeyValueMaps.end(); ++_iter118)
    {
      xfer += (*_iter118).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IntrinsicSafety", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->IntrinsicSafety);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeGuard", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->SafeGuard);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ApplierInformation", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ApplierInformation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskAcceptability", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->RiskAcceptability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FurtherAction", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->FurtherAction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->Source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MeasureType", ::apache::thrift::protocol::T_STRUCT, 15);
  if (this->MeasureType) {
    xfer += this->MeasureType->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMeasureType"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFaultToleranceMeasure &a, TDDIFaultToleranceMeasure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.IntrinsicSafety, b.IntrinsicSafety);
  swap(a.SafeGuard, b.SafeGuard);
  swap(a.ApplierInformation, b.ApplierInformation);
  swap(a.RiskAcceptability, b.RiskAcceptability);
  swap(a.FurtherAction, b.FurtherAction);
  swap(a.Source, b.Source);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.MeasureType, b.MeasureType);
  swap(a.__isset, b.__isset);
}

TDDIFaultToleranceMeasure::TDDIFaultToleranceMeasure(const TDDIFaultToleranceMeasure& other119) {
  Id = other119.Id;
  Name = other119.Name;
  Description = other119.Description;
  KeyValueMaps = other119.KeyValueMaps;
  IntrinsicSafety = other119.IntrinsicSafety;
  SafeGuard = other119.SafeGuard;
  ApplierInformation = other119.ApplierInformation;
  RiskAcceptability = other119.RiskAcceptability;
  FurtherAction = other119.FurtherAction;
  Source = other119.Source;
  AssuranceLevel = other119.AssuranceLevel;
  MeasureType = other119.MeasureType;
  __isset = other119.__isset;
}
TDDIFaultToleranceMeasure& TDDIFaultToleranceMeasure::operator=(const TDDIFaultToleranceMeasure& other120) {
  Id = other120.Id;
  Name = other120.Name;
  Description = other120.Description;
  KeyValueMaps = other120.KeyValueMaps;
  IntrinsicSafety = other120.IntrinsicSafety;
  SafeGuard = other120.SafeGuard;
  ApplierInformation = other120.ApplierInformation;
  RiskAcceptability = other120.RiskAcceptability;
  FurtherAction = other120.FurtherAction;
  Source = other120.Source;
  AssuranceLevel = other120.AssuranceLevel;
  MeasureType = other120.MeasureType;
  __isset = other120.__isset;
  return *this;
}
void TDDIFaultToleranceMeasure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFaultToleranceMeasure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "IntrinsicSafety=" << to_string(IntrinsicSafety);
  out << ", " << "SafeGuard=" << to_string(SafeGuard);
  out << ", " << "ApplierInformation=" << to_string(ApplierInformation);
  out << ", " << "RiskAcceptability=" << to_string(RiskAcceptability);
  out << ", " << "FurtherAction=" << to_string(FurtherAction);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "MeasureType=" << to_string(MeasureType);
  out << ")";
}


TDDIMeasureUnion::~TDDIMeasureUnion() throw() {
}


void TDDIMeasureUnion::__set_Measure(::apache::thrift::stdcxx::shared_ptr<TDDIMeasure> val) {
  this->Measure = val;
__isset.Measure = true;
}

void TDDIMeasureUnion::__set_FaultToleranceMeasure(::apache::thrift::stdcxx::shared_ptr<TDDIFaultToleranceMeasure> val) {
  this->FaultToleranceMeasure = val;
__isset.FaultToleranceMeasure = true;
}

void TDDIMeasureUnion::__set_SecurityControl(::apache::thrift::stdcxx::shared_ptr<TDDISecurityControl> val) {
  this->SecurityControl = val;
__isset.SecurityControl = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIMeasureUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMeasureUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Measure) { 
            this->Measure = ::apache::thrift::stdcxx::shared_ptr<TDDIMeasure>(new TDDIMeasure);
          }
          xfer += this->Measure->read(iprot);
          bool wasSet = false;
          if (this->Measure->__isset.Id) { wasSet = true; }
          if (this->Measure->__isset.Name) { wasSet = true; }
          if (this->Measure->__isset.Description) { wasSet = true; }
          if (this->Measure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Measure->__isset.IntrinsicSafety) { wasSet = true; }
          if (this->Measure->__isset.SafeGuard) { wasSet = true; }
          if (this->Measure->__isset.ApplierInformation) { wasSet = true; }
          if (this->Measure->__isset.RiskAcceptability) { wasSet = true; }
          if (this->Measure->__isset.FurtherAction) { wasSet = true; }
          if (this->Measure->__isset.Source) { wasSet = true; }
          if (this->Measure->__isset.AssuranceLevel) { wasSet = true; }
          if (this->Measure->__isset.MeasureType) { wasSet = true; }
          if (!wasSet) { this->Measure.reset(); }
          this->__isset.Measure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FaultToleranceMeasure) { 
            this->FaultToleranceMeasure = ::apache::thrift::stdcxx::shared_ptr<TDDIFaultToleranceMeasure>(new TDDIFaultToleranceMeasure);
          }
          xfer += this->FaultToleranceMeasure->read(iprot);
          bool wasSet = false;
          if (this->FaultToleranceMeasure->__isset.Id) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.Name) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.Description) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.IntrinsicSafety) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.SafeGuard) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.ApplierInformation) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.RiskAcceptability) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.FurtherAction) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.Source) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.AssuranceLevel) { wasSet = true; }
          if (this->FaultToleranceMeasure->__isset.MeasureType) { wasSet = true; }
          if (!wasSet) { this->FaultToleranceMeasure.reset(); }
          this->__isset.FaultToleranceMeasure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SecurityControl) { 
            this->SecurityControl = ::apache::thrift::stdcxx::shared_ptr<TDDISecurityControl>(new TDDISecurityControl);
          }
          xfer += this->SecurityControl->read(iprot);
          bool wasSet = false;
          if (this->SecurityControl->__isset.Id) { wasSet = true; }
          if (this->SecurityControl->__isset.Name) { wasSet = true; }
          if (this->SecurityControl->__isset.Description) { wasSet = true; }
          if (this->SecurityControl->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SecurityControl->__isset.IntrinsicSafety) { wasSet = true; }
          if (this->SecurityControl->__isset.SafeGuard) { wasSet = true; }
          if (this->SecurityControl->__isset.ApplierInformation) { wasSet = true; }
          if (this->SecurityControl->__isset.RiskAcceptability) { wasSet = true; }
          if (this->SecurityControl->__isset.FurtherAction) { wasSet = true; }
          if (this->SecurityControl->__isset.Source) { wasSet = true; }
          if (this->SecurityControl->__isset.AssuranceLevel) { wasSet = true; }
          if (this->SecurityControl->__isset.MeasureType) { wasSet = true; }
          if (this->SecurityControl->__isset.Category) { wasSet = true; }
          if (this->SecurityControl->__isset.Type) { wasSet = true; }
          if (this->SecurityControl->__isset.Vulnerabilities) { wasSet = true; }
          if (!wasSet) { this->SecurityControl.reset(); }
          this->__isset.SecurityControl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMeasureUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMeasureUnion");

  if (this->__isset.Measure) {
    xfer += oprot->writeFieldBegin("Measure", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Measure) {
      xfer += this->Measure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMeasure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FaultToleranceMeasure) {
    xfer += oprot->writeFieldBegin("FaultToleranceMeasure", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->FaultToleranceMeasure) {
      xfer += this->FaultToleranceMeasure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFaultToleranceMeasure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SecurityControl) {
    xfer += oprot->writeFieldBegin("SecurityControl", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->SecurityControl) {
      xfer += this->SecurityControl->write(oprot); 
    } else {oprot->writeStructBegin("TDDISecurityControl"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMeasureUnion &a, TDDIMeasureUnion &b) {
  using ::std::swap;
  swap(a.Measure, b.Measure);
  swap(a.FaultToleranceMeasure, b.FaultToleranceMeasure);
  swap(a.SecurityControl, b.SecurityControl);
  swap(a.__isset, b.__isset);
}

TDDIMeasureUnion::TDDIMeasureUnion(const TDDIMeasureUnion& other121) {
  Measure = other121.Measure;
  FaultToleranceMeasure = other121.FaultToleranceMeasure;
  SecurityControl = other121.SecurityControl;
  __isset = other121.__isset;
}
TDDIMeasureUnion& TDDIMeasureUnion::operator=(const TDDIMeasureUnion& other122) {
  Measure = other122.Measure;
  FaultToleranceMeasure = other122.FaultToleranceMeasure;
  SecurityControl = other122.SecurityControl;
  __isset = other122.__isset;
  return *this;
}
void TDDIMeasureUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMeasureUnion(";
  out << "Measure="; (__isset.Measure ? (out << to_string(Measure)) : (out << "<null>"));
  out << ", " << "FaultToleranceMeasure="; (__isset.FaultToleranceMeasure ? (out << to_string(FaultToleranceMeasure)) : (out << "<null>"));
  out << ", " << "SecurityControl="; (__isset.SecurityControl ? (out << to_string(SecurityControl)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractMeasure::~TDDIAbstractMeasure() throw() {
}


void TDDIAbstractMeasure::__set_UsedMeasure(const TDDIMeasureUnion& val) {
  this->UsedMeasure = val;
}

void TDDIAbstractMeasure::__set_UsedMeasureType(const TDDIMeasureUnionType val) {
  this->UsedMeasureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractMeasure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractMeasure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedMeasure.read(iprot);
          this->__isset.UsedMeasure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast123;
          xfer += iprot->readI32(ecast123);
          this->UsedMeasureType = (TDDIMeasureUnionType)ecast123;
          this->__isset.UsedMeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractMeasure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractMeasure");

  xfer += oprot->writeFieldBegin("UsedMeasure", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedMeasure.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedMeasureType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedMeasureType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractMeasure &a, TDDIAbstractMeasure &b) {
  using ::std::swap;
  swap(a.UsedMeasure, b.UsedMeasure);
  swap(a.UsedMeasureType, b.UsedMeasureType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractMeasure::TDDIAbstractMeasure(const TDDIAbstractMeasure& other124) {
  UsedMeasure = other124.UsedMeasure;
  UsedMeasureType = other124.UsedMeasureType;
  __isset = other124.__isset;
}
TDDIAbstractMeasure& TDDIAbstractMeasure::operator=(const TDDIAbstractMeasure& other125) {
  UsedMeasure = other125.UsedMeasure;
  UsedMeasureType = other125.UsedMeasureType;
  __isset = other125.__isset;
  return *this;
}
void TDDIAbstractMeasure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractMeasure(";
  out << "UsedMeasure=" << to_string(UsedMeasure);
  out << ", " << "UsedMeasureType=" << to_string(UsedMeasureType);
  out << ")";
}


TDDIMaintenanceProcedure::~TDDIMaintenanceProcedure() throw() {
}


void TDDIMaintenanceProcedure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMaintenanceProcedure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMaintenanceProcedure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMaintenanceProcedure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIMaintenanceProcedure::__set_ActivityDescription(const std::string& val) {
  this->ActivityDescription = val;
}

void TDDIMaintenanceProcedure::__set_TechnicalDescription(const std::string& val) {
  this->TechnicalDescription = val;
}

void TDDIMaintenanceProcedure::__set_ToolSpecification(const std::string& val) {
  this->ToolSpecification = val;
}

void TDDIMaintenanceProcedure::__set_StaffNumber(const int32_t val) {
  this->StaffNumber = val;
}

void TDDIMaintenanceProcedure::__set_StaffSkillLevel(const std::string& val) {
  this->StaffSkillLevel = val;
}

void TDDIMaintenanceProcedure::__set_StaffTrainingDescription(const std::string& val) {
  this->StaffTrainingDescription = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMaintenanceProcedure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMaintenanceProcedure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size126;
            ::apache::thrift::protocol::TType _etype129;
            xfer += iprot->readListBegin(_etype129, _size126);
            this->KeyValueMaps.resize(_size126);
            uint32_t _i130;
            for (_i130 = 0; _i130 < _size126; ++_i130)
            {
              xfer += this->KeyValueMaps[_i130].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ActivityDescription);
          this->__isset.ActivityDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->TechnicalDescription);
          this->__isset.TechnicalDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ToolSpecification);
          this->__isset.ToolSpecification = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->StaffNumber);
          this->__isset.StaffNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->StaffSkillLevel);
          this->__isset.StaffSkillLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->StaffTrainingDescription);
          this->__isset.StaffTrainingDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMaintenanceProcedure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMaintenanceProcedure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter131;
    for (_iter131 = this->KeyValueMaps.begin(); _iter131 != this->KeyValueMaps.end(); ++_iter131)
    {
      xfer += (*_iter131).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ActivityDescription", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ActivityDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TechnicalDescription", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->TechnicalDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ToolSpecification", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ToolSpecification);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StaffNumber", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->StaffNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StaffSkillLevel", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->StaffSkillLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StaffTrainingDescription", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->StaffTrainingDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMaintenanceProcedure &a, TDDIMaintenanceProcedure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.ActivityDescription, b.ActivityDescription);
  swap(a.TechnicalDescription, b.TechnicalDescription);
  swap(a.ToolSpecification, b.ToolSpecification);
  swap(a.StaffNumber, b.StaffNumber);
  swap(a.StaffSkillLevel, b.StaffSkillLevel);
  swap(a.StaffTrainingDescription, b.StaffTrainingDescription);
  swap(a.__isset, b.__isset);
}

TDDIMaintenanceProcedure::TDDIMaintenanceProcedure(const TDDIMaintenanceProcedure& other132) {
  Id = other132.Id;
  Name = other132.Name;
  Description = other132.Description;
  KeyValueMaps = other132.KeyValueMaps;
  ActivityDescription = other132.ActivityDescription;
  TechnicalDescription = other132.TechnicalDescription;
  ToolSpecification = other132.ToolSpecification;
  StaffNumber = other132.StaffNumber;
  StaffSkillLevel = other132.StaffSkillLevel;
  StaffTrainingDescription = other132.StaffTrainingDescription;
  __isset = other132.__isset;
}
TDDIMaintenanceProcedure& TDDIMaintenanceProcedure::operator=(const TDDIMaintenanceProcedure& other133) {
  Id = other133.Id;
  Name = other133.Name;
  Description = other133.Description;
  KeyValueMaps = other133.KeyValueMaps;
  ActivityDescription = other133.ActivityDescription;
  TechnicalDescription = other133.TechnicalDescription;
  ToolSpecification = other133.ToolSpecification;
  StaffNumber = other133.StaffNumber;
  StaffSkillLevel = other133.StaffSkillLevel;
  StaffTrainingDescription = other133.StaffTrainingDescription;
  __isset = other133.__isset;
  return *this;
}
void TDDIMaintenanceProcedure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMaintenanceProcedure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "ActivityDescription=" << to_string(ActivityDescription);
  out << ", " << "TechnicalDescription=" << to_string(TechnicalDescription);
  out << ", " << "ToolSpecification=" << to_string(ToolSpecification);
  out << ", " << "StaffNumber=" << to_string(StaffNumber);
  out << ", " << "StaffSkillLevel=" << to_string(StaffSkillLevel);
  out << ", " << "StaffTrainingDescription=" << to_string(StaffTrainingDescription);
  out << ")";
}


TDDIDependabilityPackage::~TDDIDependabilityPackage() throw() {
}


void TDDIDependabilityPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDependabilityPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDependabilityPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDependabilityPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIDependabilityPackage::__set_Measures(const std::vector<TDDIAbstractMeasure> & val) {
  this->Measures = val;
}

void TDDIDependabilityPackage::__set_MeasureTypes(const std::vector<TDDIMeasureType> & val) {
  this->MeasureTypes = val;
}

void TDDIDependabilityPackage::__set_MaintenanceProcedures(const std::vector<TDDIMaintenanceProcedure> & val) {
  this->MaintenanceProcedures = val;
}

void TDDIDependabilityPackage::__set_DomainPackages(const std::vector<TDDIDomainPackage> & val) {
  this->DomainPackages = val;
}

void TDDIDependabilityPackage::__set_TARAPackages(const std::vector<TDDITARAPackage> & val) {
  this->TARAPackages = val;
}

void TDDIDependabilityPackage::__set_HARAPackages(const std::vector<TDDIHARAPackage> & val) {
  this->HARAPackages = val;
}

void TDDIDependabilityPackage::__set_RequirementPackages(const std::vector<TDDIRequirementPackage> & val) {
  this->RequirementPackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDependabilityPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size134;
            ::apache::thrift::protocol::TType _etype137;
            xfer += iprot->readListBegin(_etype137, _size134);
            this->KeyValueMaps.resize(_size134);
            uint32_t _i138;
            for (_i138 = 0; _i138 < _size134; ++_i138)
            {
              xfer += this->KeyValueMaps[_i138].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Measures.clear();
            uint32_t _size139;
            ::apache::thrift::protocol::TType _etype142;
            xfer += iprot->readListBegin(_etype142, _size139);
            this->Measures.resize(_size139);
            uint32_t _i143;
            for (_i143 = 0; _i143 < _size139; ++_i143)
            {
              xfer += this->Measures[_i143].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Measures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MeasureTypes.clear();
            uint32_t _size144;
            ::apache::thrift::protocol::TType _etype147;
            xfer += iprot->readListBegin(_etype147, _size144);
            this->MeasureTypes.resize(_size144);
            uint32_t _i148;
            for (_i148 = 0; _i148 < _size144; ++_i148)
            {
              xfer += this->MeasureTypes[_i148].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MeasureTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MaintenanceProcedures.clear();
            uint32_t _size149;
            ::apache::thrift::protocol::TType _etype152;
            xfer += iprot->readListBegin(_etype152, _size149);
            this->MaintenanceProcedures.resize(_size149);
            uint32_t _i153;
            for (_i153 = 0; _i153 < _size149; ++_i153)
            {
              xfer += this->MaintenanceProcedures[_i153].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MaintenanceProcedures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DomainPackages.clear();
            uint32_t _size154;
            ::apache::thrift::protocol::TType _etype157;
            xfer += iprot->readListBegin(_etype157, _size154);
            this->DomainPackages.resize(_size154);
            uint32_t _i158;
            for (_i158 = 0; _i158 < _size154; ++_i158)
            {
              xfer += this->DomainPackages[_i158].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DomainPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TARAPackages.clear();
            uint32_t _size159;
            ::apache::thrift::protocol::TType _etype162;
            xfer += iprot->readListBegin(_etype162, _size159);
            this->TARAPackages.resize(_size159);
            uint32_t _i163;
            for (_i163 = 0; _i163 < _size159; ++_i163)
            {
              xfer += this->TARAPackages[_i163].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TARAPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->HARAPackages.clear();
            uint32_t _size164;
            ::apache::thrift::protocol::TType _etype167;
            xfer += iprot->readListBegin(_etype167, _size164);
            this->HARAPackages.resize(_size164);
            uint32_t _i168;
            for (_i168 = 0; _i168 < _size164; ++_i168)
            {
              xfer += this->HARAPackages[_i168].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.HARAPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RequirementPackages.clear();
            uint32_t _size169;
            ::apache::thrift::protocol::TType _etype172;
            xfer += iprot->readListBegin(_etype172, _size169);
            this->RequirementPackages.resize(_size169);
            uint32_t _i173;
            for (_i173 = 0; _i173 < _size169; ++_i173)
            {
              xfer += this->RequirementPackages[_i173].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RequirementPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDependabilityPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDependabilityPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter174;
    for (_iter174 = this->KeyValueMaps.begin(); _iter174 != this->KeyValueMaps.end(); ++_iter174)
    {
      xfer += (*_iter174).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Measures", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Measures.size()));
    std::vector<TDDIAbstractMeasure> ::const_iterator _iter175;
    for (_iter175 = this->Measures.begin(); _iter175 != this->Measures.end(); ++_iter175)
    {
      xfer += (*_iter175).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MeasureTypes", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MeasureTypes.size()));
    std::vector<TDDIMeasureType> ::const_iterator _iter176;
    for (_iter176 = this->MeasureTypes.begin(); _iter176 != this->MeasureTypes.end(); ++_iter176)
    {
      xfer += (*_iter176).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaintenanceProcedures", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MaintenanceProcedures.size()));
    std::vector<TDDIMaintenanceProcedure> ::const_iterator _iter177;
    for (_iter177 = this->MaintenanceProcedures.begin(); _iter177 != this->MaintenanceProcedures.end(); ++_iter177)
    {
      xfer += (*_iter177).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DomainPackages", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DomainPackages.size()));
    std::vector<TDDIDomainPackage> ::const_iterator _iter178;
    for (_iter178 = this->DomainPackages.begin(); _iter178 != this->DomainPackages.end(); ++_iter178)
    {
      xfer += (*_iter178).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TARAPackages", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TARAPackages.size()));
    std::vector<TDDITARAPackage> ::const_iterator _iter179;
    for (_iter179 = this->TARAPackages.begin(); _iter179 != this->TARAPackages.end(); ++_iter179)
    {
      xfer += (*_iter179).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HARAPackages", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->HARAPackages.size()));
    std::vector<TDDIHARAPackage> ::const_iterator _iter180;
    for (_iter180 = this->HARAPackages.begin(); _iter180 != this->HARAPackages.end(); ++_iter180)
    {
      xfer += (*_iter180).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RequirementPackages", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RequirementPackages.size()));
    std::vector<TDDIRequirementPackage> ::const_iterator _iter181;
    for (_iter181 = this->RequirementPackages.begin(); _iter181 != this->RequirementPackages.end(); ++_iter181)
    {
      xfer += (*_iter181).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDependabilityPackage &a, TDDIDependabilityPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Measures, b.Measures);
  swap(a.MeasureTypes, b.MeasureTypes);
  swap(a.MaintenanceProcedures, b.MaintenanceProcedures);
  swap(a.DomainPackages, b.DomainPackages);
  swap(a.TARAPackages, b.TARAPackages);
  swap(a.HARAPackages, b.HARAPackages);
  swap(a.RequirementPackages, b.RequirementPackages);
  swap(a.__isset, b.__isset);
}

TDDIDependabilityPackage::TDDIDependabilityPackage(const TDDIDependabilityPackage& other182) {
  Id = other182.Id;
  Name = other182.Name;
  Description = other182.Description;
  KeyValueMaps = other182.KeyValueMaps;
  Measures = other182.Measures;
  MeasureTypes = other182.MeasureTypes;
  MaintenanceProcedures = other182.MaintenanceProcedures;
  DomainPackages = other182.DomainPackages;
  TARAPackages = other182.TARAPackages;
  HARAPackages = other182.HARAPackages;
  RequirementPackages = other182.RequirementPackages;
  __isset = other182.__isset;
}
TDDIDependabilityPackage& TDDIDependabilityPackage::operator=(const TDDIDependabilityPackage& other183) {
  Id = other183.Id;
  Name = other183.Name;
  Description = other183.Description;
  KeyValueMaps = other183.KeyValueMaps;
  Measures = other183.Measures;
  MeasureTypes = other183.MeasureTypes;
  MaintenanceProcedures = other183.MaintenanceProcedures;
  DomainPackages = other183.DomainPackages;
  TARAPackages = other183.TARAPackages;
  HARAPackages = other183.HARAPackages;
  RequirementPackages = other183.RequirementPackages;
  __isset = other183.__isset;
  return *this;
}
void TDDIDependabilityPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDependabilityPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Measures=" << to_string(Measures);
  out << ", " << "MeasureTypes=" << to_string(MeasureTypes);
  out << ", " << "MaintenanceProcedures=" << to_string(MaintenanceProcedures);
  out << ", " << "DomainPackages=" << to_string(DomainPackages);
  out << ", " << "TARAPackages=" << to_string(TARAPackages);
  out << ", " << "HARAPackages=" << to_string(HARAPackages);
  out << ", " << "RequirementPackages=" << to_string(RequirementPackages);
  out << ")";
}


TDDIPort::~TDDIPort() throw() {
}


void TDDIPort::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIPort::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIPort::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIPort::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIPort::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIPort::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIPort::__set_FlowType(const std::string& val) {
  this->FlowType = val;
}

void TDDIPort::__set_Direction(const TDDIPortDirection val) {
  this->Direction = val;
}

void TDDIPort::__set_RefinedPorts(const std::vector<TDDIPortRef> & val) {
  this->RefinedPorts = val;
}

void TDDIPort::__set_InterfaceFailures(const std::vector<TDDIAbstractFailureRef> & val) {
  this->InterfaceFailures = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPort& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPort::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size184;
            ::apache::thrift::protocol::TType _etype187;
            xfer += iprot->readListBegin(_etype187, _size184);
            this->KeyValueMaps.resize(_size184);
            uint32_t _i188;
            for (_i188 = 0; _i188 < _size184; ++_i188)
            {
              xfer += this->KeyValueMaps[_i188].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size189;
            ::apache::thrift::protocol::TType _etype192;
            xfer += iprot->readListBegin(_etype192, _size189);
            this->DependabilityRequirements.resize(_size189);
            uint32_t _i193;
            for (_i193 = 0; _i193 < _size189; ++_i193)
            {
              xfer += this->DependabilityRequirements[_i193].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FlowType);
          this->__isset.FlowType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast194;
          xfer += iprot->readI32(ecast194);
          this->Direction = (TDDIPortDirection)ecast194;
          this->__isset.Direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RefinedPorts.clear();
            uint32_t _size195;
            ::apache::thrift::protocol::TType _etype198;
            xfer += iprot->readListBegin(_etype198, _size195);
            this->RefinedPorts.resize(_size195);
            uint32_t _i199;
            for (_i199 = 0; _i199 < _size195; ++_i199)
            {
              xfer += this->RefinedPorts[_i199].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RefinedPorts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->InterfaceFailures.clear();
            uint32_t _size200;
            ::apache::thrift::protocol::TType _etype203;
            xfer += iprot->readListBegin(_etype203, _size200);
            this->InterfaceFailures.resize(_size200);
            uint32_t _i204;
            for (_i204 = 0; _i204 < _size200; ++_i204)
            {
              xfer += this->InterfaceFailures[_i204].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.InterfaceFailures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPort::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPort");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter205;
    for (_iter205 = this->KeyValueMaps.begin(); _iter205 != this->KeyValueMaps.end(); ++_iter205)
    {
      xfer += (*_iter205).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter206;
    for (_iter206 = this->DependabilityRequirements.begin(); _iter206 != this->DependabilityRequirements.end(); ++_iter206)
    {
      xfer += (*_iter206).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FlowType", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->FlowType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Direction", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->Direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RefinedPorts", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RefinedPorts.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter207;
    for (_iter207 = this->RefinedPorts.begin(); _iter207 != this->RefinedPorts.end(); ++_iter207)
    {
      xfer += (*_iter207).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("InterfaceFailures", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->InterfaceFailures.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter208;
    for (_iter208 = this->InterfaceFailures.begin(); _iter208 != this->InterfaceFailures.end(); ++_iter208)
    {
      xfer += (*_iter208).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPort &a, TDDIPort &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.FlowType, b.FlowType);
  swap(a.Direction, b.Direction);
  swap(a.RefinedPorts, b.RefinedPorts);
  swap(a.InterfaceFailures, b.InterfaceFailures);
  swap(a.__isset, b.__isset);
}

TDDIPort::TDDIPort(const TDDIPort& other209) {
  Id = other209.Id;
  Name = other209.Name;
  Description = other209.Description;
  KeyValueMaps = other209.KeyValueMaps;
  DependabilityRequirements = other209.DependabilityRequirements;
  AssuranceLevel = other209.AssuranceLevel;
  FlowType = other209.FlowType;
  Direction = other209.Direction;
  RefinedPorts = other209.RefinedPorts;
  InterfaceFailures = other209.InterfaceFailures;
  __isset = other209.__isset;
}
TDDIPort& TDDIPort::operator=(const TDDIPort& other210) {
  Id = other210.Id;
  Name = other210.Name;
  Description = other210.Description;
  KeyValueMaps = other210.KeyValueMaps;
  DependabilityRequirements = other210.DependabilityRequirements;
  AssuranceLevel = other210.AssuranceLevel;
  FlowType = other210.FlowType;
  Direction = other210.Direction;
  RefinedPorts = other210.RefinedPorts;
  InterfaceFailures = other210.InterfaceFailures;
  __isset = other210.__isset;
  return *this;
}
void TDDIPort::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPort(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "FlowType=" << to_string(FlowType);
  out << ", " << "Direction=" << to_string(Direction);
  out << ", " << "RefinedPorts=" << to_string(RefinedPorts);
  out << ", " << "InterfaceFailures=" << to_string(InterfaceFailures);
  out << ")";
}


TDDISystemBoundary::~TDDISystemBoundary() throw() {
}


void TDDISystemBoundary::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISystemBoundary::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISystemBoundary::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISystemBoundary::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISystemBoundary::__set_Ports(const std::vector<TDDIPortRef> & val) {
  this->Ports = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISystemBoundary& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISystemBoundary::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size211;
            ::apache::thrift::protocol::TType _etype214;
            xfer += iprot->readListBegin(_etype214, _size211);
            this->KeyValueMaps.resize(_size211);
            uint32_t _i215;
            for (_i215 = 0; _i215 < _size211; ++_i215)
            {
              xfer += this->KeyValueMaps[_i215].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size216;
            ::apache::thrift::protocol::TType _etype219;
            xfer += iprot->readListBegin(_etype219, _size216);
            this->Ports.resize(_size216);
            uint32_t _i220;
            for (_i220 = 0; _i220 < _size216; ++_i220)
            {
              xfer += this->Ports[_i220].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISystemBoundary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISystemBoundary");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter221;
    for (_iter221 = this->KeyValueMaps.begin(); _iter221 != this->KeyValueMaps.end(); ++_iter221)
    {
      xfer += (*_iter221).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPortRef> ::const_iterator _iter222;
    for (_iter222 = this->Ports.begin(); _iter222 != this->Ports.end(); ++_iter222)
    {
      xfer += (*_iter222).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISystemBoundary &a, TDDISystemBoundary &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Ports, b.Ports);
  swap(a.__isset, b.__isset);
}

TDDISystemBoundary::TDDISystemBoundary(const TDDISystemBoundary& other223) {
  Id = other223.Id;
  Name = other223.Name;
  Description = other223.Description;
  KeyValueMaps = other223.KeyValueMaps;
  Ports = other223.Ports;
  __isset = other223.__isset;
}
TDDISystemBoundary& TDDISystemBoundary::operator=(const TDDISystemBoundary& other224) {
  Id = other224.Id;
  Name = other224.Name;
  Description = other224.Description;
  KeyValueMaps = other224.KeyValueMaps;
  Ports = other224.Ports;
  __isset = other224.__isset;
  return *this;
}
void TDDISystemBoundary::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISystemBoundary(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Ports=" << to_string(Ports);
  out << ")";
}


TDDISignal::~TDDISignal() throw() {
}


void TDDISignal::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISignal::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISignal::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISignal::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISignal::__set_FromPort(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val) {
  this->FromPort = val;
}

void TDDISignal::__set_ToPort(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val) {
  this->ToPort = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISignal& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISignal::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_FromPort = false;
  bool isset_ToPort = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size225;
            ::apache::thrift::protocol::TType _etype228;
            xfer += iprot->readListBegin(_etype228, _size225);
            this->KeyValueMaps.resize(_size225);
            uint32_t _i229;
            for (_i229 = 0; _i229 < _size225; ++_i229)
            {
              xfer += this->KeyValueMaps[_i229].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FromPort) { 
            this->FromPort = ::apache::thrift::stdcxx::shared_ptr<TDDIPort>(new TDDIPort);
          }
          xfer += this->FromPort->read(iprot);
          bool wasSet = false;
          if (this->FromPort->__isset.Id) { wasSet = true; }
          if (this->FromPort->__isset.Name) { wasSet = true; }
          if (this->FromPort->__isset.Description) { wasSet = true; }
          if (this->FromPort->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FromPort->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->FromPort->__isset.AssuranceLevel) { wasSet = true; }
          if (this->FromPort->__isset.FlowType) { wasSet = true; }
          if (this->FromPort->__isset.Direction) { wasSet = true; }
          if (this->FromPort->__isset.RefinedPorts) { wasSet = true; }
          if (this->FromPort->__isset.InterfaceFailures) { wasSet = true; }
          if (!wasSet) { this->FromPort.reset(); }
          isset_FromPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ToPort) { 
            this->ToPort = ::apache::thrift::stdcxx::shared_ptr<TDDIPort>(new TDDIPort);
          }
          xfer += this->ToPort->read(iprot);
          bool wasSet = false;
          if (this->ToPort->__isset.Id) { wasSet = true; }
          if (this->ToPort->__isset.Name) { wasSet = true; }
          if (this->ToPort->__isset.Description) { wasSet = true; }
          if (this->ToPort->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ToPort->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->ToPort->__isset.AssuranceLevel) { wasSet = true; }
          if (this->ToPort->__isset.FlowType) { wasSet = true; }
          if (this->ToPort->__isset.Direction) { wasSet = true; }
          if (this->ToPort->__isset.RefinedPorts) { wasSet = true; }
          if (this->ToPort->__isset.InterfaceFailures) { wasSet = true; }
          if (!wasSet) { this->ToPort.reset(); }
          isset_ToPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_FromPort)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ToPort)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDDISignal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISignal");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter230;
    for (_iter230 = this->KeyValueMaps.begin(); _iter230 != this->KeyValueMaps.end(); ++_iter230)
    {
      xfer += (*_iter230).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FromPort", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->FromPort) {
    xfer += this->FromPort->write(oprot); 
  } else {oprot->writeStructBegin("TDDIPort"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ToPort", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->ToPort) {
    xfer += this->ToPort->write(oprot); 
  } else {oprot->writeStructBegin("TDDIPort"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISignal &a, TDDISignal &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.FromPort, b.FromPort);
  swap(a.ToPort, b.ToPort);
  swap(a.__isset, b.__isset);
}

TDDISignal::TDDISignal(const TDDISignal& other231) {
  Id = other231.Id;
  Name = other231.Name;
  Description = other231.Description;
  KeyValueMaps = other231.KeyValueMaps;
  FromPort = other231.FromPort;
  ToPort = other231.ToPort;
  __isset = other231.__isset;
}
TDDISignal& TDDISignal::operator=(const TDDISignal& other232) {
  Id = other232.Id;
  Name = other232.Name;
  Description = other232.Description;
  KeyValueMaps = other232.KeyValueMaps;
  FromPort = other232.FromPort;
  ToPort = other232.ToPort;
  __isset = other232.__isset;
  return *this;
}
void TDDISignal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISignal(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "FromPort=" << to_string(FromPort);
  out << ", " << "ToPort=" << to_string(ToPort);
  out << ")";
}


TDDIPerfChars::~TDDIPerfChars() throw() {
}


void TDDIPerfChars::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIPerfChars::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIPerfChars::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIPerfChars::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIPerfChars::__set_ResponseTime(const double val) {
  this->ResponseTime = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPerfChars& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPerfChars::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size233;
            ::apache::thrift::protocol::TType _etype236;
            xfer += iprot->readListBegin(_etype236, _size233);
            this->KeyValueMaps.resize(_size233);
            uint32_t _i237;
            for (_i237 = 0; _i237 < _size233; ++_i237)
            {
              xfer += this->KeyValueMaps[_i237].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ResponseTime);
          this->__isset.ResponseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPerfChars::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPerfChars");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter238;
    for (_iter238 = this->KeyValueMaps.begin(); _iter238 != this->KeyValueMaps.end(); ++_iter238)
    {
      xfer += (*_iter238).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ResponseTime", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->ResponseTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPerfChars &a, TDDIPerfChars &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.ResponseTime, b.ResponseTime);
  swap(a.__isset, b.__isset);
}

TDDIPerfChars::TDDIPerfChars(const TDDIPerfChars& other239) {
  Id = other239.Id;
  Name = other239.Name;
  Description = other239.Description;
  KeyValueMaps = other239.KeyValueMaps;
  ResponseTime = other239.ResponseTime;
  __isset = other239.__isset;
}
TDDIPerfChars& TDDIPerfChars::operator=(const TDDIPerfChars& other240) {
  Id = other240.Id;
  Name = other240.Name;
  Description = other240.Description;
  KeyValueMaps = other240.KeyValueMaps;
  ResponseTime = other240.ResponseTime;
  __isset = other240.__isset;
  return *this;
}
void TDDIPerfChars::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPerfChars(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "ResponseTime=" << to_string(ResponseTime);
  out << ")";
}


TDDIFunction::~TDDIFunction() throw() {
}


void TDDIFunction::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFunction::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFunction::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFunction::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFunction::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIFunction::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIFunction::__set_SubFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->SubFunctions = val;
}

void TDDIFunction::__set_Ports(const std::vector<TDDIPort> & val) {
  this->Ports = val;
}

void TDDIFunction::__set_Signals(const std::vector<TDDISignal> & val) {
  this->Signals = val;
}

void TDDIFunction::__set_PerfChars(const TDDIPerfChars& val) {
  this->PerfChars = val;
}

void TDDIFunction::__set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->FailureModels = val;
}

void TDDIFunction::__set_Malfunctions(const std::vector<TDDIMalfunctionRef> & val) {
  this->Malfunctions = val;
}

void TDDIFunction::__set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val) {
  this->AsAsset = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size241;
            ::apache::thrift::protocol::TType _etype244;
            xfer += iprot->readListBegin(_etype244, _size241);
            this->KeyValueMaps.resize(_size241);
            uint32_t _i245;
            for (_i245 = 0; _i245 < _size241; ++_i245)
            {
              xfer += this->KeyValueMaps[_i245].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size246;
            ::apache::thrift::protocol::TType _etype249;
            xfer += iprot->readListBegin(_etype249, _size246);
            this->DependabilityRequirements.resize(_size246);
            uint32_t _i250;
            for (_i250 = 0; _i250 < _size246; ++_i250)
            {
              xfer += this->DependabilityRequirements[_i250].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubFunctions.clear();
            uint32_t _size251;
            ::apache::thrift::protocol::TType _etype254;
            xfer += iprot->readListBegin(_etype254, _size251);
            this->SubFunctions.resize(_size251);
            uint32_t _i255;
            for (_i255 = 0; _i255 < _size251; ++_i255)
            {
              xfer += this->SubFunctions[_i255].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size256;
            ::apache::thrift::protocol::TType _etype259;
            xfer += iprot->readListBegin(_etype259, _size256);
            this->Ports.resize(_size256);
            uint32_t _i260;
            for (_i260 = 0; _i260 < _size256; ++_i260)
            {
              xfer += this->Ports[_i260].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Signals.clear();
            uint32_t _size261;
            ::apache::thrift::protocol::TType _etype264;
            xfer += iprot->readListBegin(_etype264, _size261);
            this->Signals.resize(_size261);
            uint32_t _i265;
            for (_i265 = 0; _i265 < _size261; ++_i265)
            {
              xfer += this->Signals[_i265].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Signals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->PerfChars.read(iprot);
          this->__isset.PerfChars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size266;
            ::apache::thrift::protocol::TType _etype269;
            xfer += iprot->readListBegin(_etype269, _size266);
            this->FailureModels.resize(_size266);
            uint32_t _i270;
            for (_i270 = 0; _i270 < _size266; ++_i270)
            {
              xfer += this->FailureModels[_i270].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Malfunctions.clear();
            uint32_t _size271;
            ::apache::thrift::protocol::TType _etype274;
            xfer += iprot->readListBegin(_etype274, _size271);
            this->Malfunctions.resize(_size271);
            uint32_t _i275;
            for (_i275 = 0; _i275 < _size271; ++_i275)
            {
              xfer += this->Malfunctions[_i275].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Malfunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AsAsset) { 
            this->AsAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset>(new TDDIAbstractAsset);
          }
          xfer += this->AsAsset->read(iprot);
          bool wasSet = false;
          if (this->AsAsset->__isset.UsedAsset) { wasSet = true; }
          if (this->AsAsset->__isset.UsedAssetType) { wasSet = true; }
          if (!wasSet) { this->AsAsset.reset(); }
          this->__isset.AsAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFunction");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter276;
    for (_iter276 = this->KeyValueMaps.begin(); _iter276 != this->KeyValueMaps.end(); ++_iter276)
    {
      xfer += (*_iter276).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter277;
    for (_iter277 = this->DependabilityRequirements.begin(); _iter277 != this->DependabilityRequirements.end(); ++_iter277)
    {
      xfer += (*_iter277).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubFunctions", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter278;
    for (_iter278 = this->SubFunctions.begin(); _iter278 != this->SubFunctions.end(); ++_iter278)
    {
      xfer += (*_iter278).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPort> ::const_iterator _iter279;
    for (_iter279 = this->Ports.begin(); _iter279 != this->Ports.end(); ++_iter279)
    {
      xfer += (*_iter279).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Signals", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Signals.size()));
    std::vector<TDDISignal> ::const_iterator _iter280;
    for (_iter280 = this->Signals.begin(); _iter280 != this->Signals.end(); ++_iter280)
    {
      xfer += (*_iter280).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PerfChars", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->PerfChars.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter281;
    for (_iter281 = this->FailureModels.begin(); _iter281 != this->FailureModels.end(); ++_iter281)
    {
      xfer += (*_iter281).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Malfunctions", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Malfunctions.size()));
    std::vector<TDDIMalfunctionRef> ::const_iterator _iter282;
    for (_iter282 = this->Malfunctions.begin(); _iter282 != this->Malfunctions.end(); ++_iter282)
    {
      xfer += (*_iter282).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AsAsset", ::apache::thrift::protocol::T_STRUCT, 13);
  if (this->AsAsset) {
    xfer += this->AsAsset->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFunction &a, TDDIFunction &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubFunctions, b.SubFunctions);
  swap(a.Ports, b.Ports);
  swap(a.Signals, b.Signals);
  swap(a.PerfChars, b.PerfChars);
  swap(a.FailureModels, b.FailureModels);
  swap(a.Malfunctions, b.Malfunctions);
  swap(a.AsAsset, b.AsAsset);
  swap(a.__isset, b.__isset);
}

TDDIFunction::TDDIFunction(const TDDIFunction& other283) {
  Id = other283.Id;
  Name = other283.Name;
  Description = other283.Description;
  KeyValueMaps = other283.KeyValueMaps;
  DependabilityRequirements = other283.DependabilityRequirements;
  AssuranceLevel = other283.AssuranceLevel;
  SubFunctions = other283.SubFunctions;
  Ports = other283.Ports;
  Signals = other283.Signals;
  PerfChars = other283.PerfChars;
  FailureModels = other283.FailureModels;
  Malfunctions = other283.Malfunctions;
  AsAsset = other283.AsAsset;
  __isset = other283.__isset;
}
TDDIFunction& TDDIFunction::operator=(const TDDIFunction& other284) {
  Id = other284.Id;
  Name = other284.Name;
  Description = other284.Description;
  KeyValueMaps = other284.KeyValueMaps;
  DependabilityRequirements = other284.DependabilityRequirements;
  AssuranceLevel = other284.AssuranceLevel;
  SubFunctions = other284.SubFunctions;
  Ports = other284.Ports;
  Signals = other284.Signals;
  PerfChars = other284.PerfChars;
  FailureModels = other284.FailureModels;
  Malfunctions = other284.Malfunctions;
  AsAsset = other284.AsAsset;
  __isset = other284.__isset;
  return *this;
}
void TDDIFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFunction(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubFunctions=" << to_string(SubFunctions);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "Signals=" << to_string(Signals);
  out << ", " << "PerfChars=" << to_string(PerfChars);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "Malfunctions=" << to_string(Malfunctions);
  out << ", " << "AsAsset=" << to_string(AsAsset);
  out << ")";
}


TDDISafetyFunction::~TDDISafetyFunction() throw() {
}


void TDDISafetyFunction::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISafetyFunction::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISafetyFunction::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISafetyFunction::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISafetyFunction::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDISafetyFunction::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISafetyFunction::__set_SubFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->SubFunctions = val;
}

void TDDISafetyFunction::__set_Ports(const std::vector<TDDIPort> & val) {
  this->Ports = val;
}

void TDDISafetyFunction::__set_Signals(const std::vector<TDDISignal> & val) {
  this->Signals = val;
}

void TDDISafetyFunction::__set_PerfChars(const TDDIPerfChars& val) {
  this->PerfChars = val;
}

void TDDISafetyFunction::__set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->FailureModels = val;
}

void TDDISafetyFunction::__set_Malfunctions(const std::vector<TDDIMalfunctionRef> & val) {
  this->Malfunctions = val;
}

void TDDISafetyFunction::__set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val) {
  this->AsAsset = val;
}

void TDDISafetyFunction::__set_Object(const std::string& val) {
  this->Object = val;
}

void TDDISafetyFunction::__set_Behavior(const std::string& val) {
  this->Behavior = val;
}

void TDDISafetyFunction::__set_SafeState(const std::string& val) {
  this->SafeState = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISafetyFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISafetyFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size285;
            ::apache::thrift::protocol::TType _etype288;
            xfer += iprot->readListBegin(_etype288, _size285);
            this->KeyValueMaps.resize(_size285);
            uint32_t _i289;
            for (_i289 = 0; _i289 < _size285; ++_i289)
            {
              xfer += this->KeyValueMaps[_i289].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size290;
            ::apache::thrift::protocol::TType _etype293;
            xfer += iprot->readListBegin(_etype293, _size290);
            this->DependabilityRequirements.resize(_size290);
            uint32_t _i294;
            for (_i294 = 0; _i294 < _size290; ++_i294)
            {
              xfer += this->DependabilityRequirements[_i294].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubFunctions.clear();
            uint32_t _size295;
            ::apache::thrift::protocol::TType _etype298;
            xfer += iprot->readListBegin(_etype298, _size295);
            this->SubFunctions.resize(_size295);
            uint32_t _i299;
            for (_i299 = 0; _i299 < _size295; ++_i299)
            {
              xfer += this->SubFunctions[_i299].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size300;
            ::apache::thrift::protocol::TType _etype303;
            xfer += iprot->readListBegin(_etype303, _size300);
            this->Ports.resize(_size300);
            uint32_t _i304;
            for (_i304 = 0; _i304 < _size300; ++_i304)
            {
              xfer += this->Ports[_i304].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Signals.clear();
            uint32_t _size305;
            ::apache::thrift::protocol::TType _etype308;
            xfer += iprot->readListBegin(_etype308, _size305);
            this->Signals.resize(_size305);
            uint32_t _i309;
            for (_i309 = 0; _i309 < _size305; ++_i309)
            {
              xfer += this->Signals[_i309].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Signals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->PerfChars.read(iprot);
          this->__isset.PerfChars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size310;
            ::apache::thrift::protocol::TType _etype313;
            xfer += iprot->readListBegin(_etype313, _size310);
            this->FailureModels.resize(_size310);
            uint32_t _i314;
            for (_i314 = 0; _i314 < _size310; ++_i314)
            {
              xfer += this->FailureModels[_i314].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Malfunctions.clear();
            uint32_t _size315;
            ::apache::thrift::protocol::TType _etype318;
            xfer += iprot->readListBegin(_etype318, _size315);
            this->Malfunctions.resize(_size315);
            uint32_t _i319;
            for (_i319 = 0; _i319 < _size315; ++_i319)
            {
              xfer += this->Malfunctions[_i319].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Malfunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AsAsset) { 
            this->AsAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset>(new TDDIAbstractAsset);
          }
          xfer += this->AsAsset->read(iprot);
          bool wasSet = false;
          if (this->AsAsset->__isset.UsedAsset) { wasSet = true; }
          if (this->AsAsset->__isset.UsedAssetType) { wasSet = true; }
          if (!wasSet) { this->AsAsset.reset(); }
          this->__isset.AsAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Object);
          this->__isset.Object = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Behavior);
          this->__isset.Behavior = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeState);
          this->__isset.SafeState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISafetyFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISafetyFunction");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter320;
    for (_iter320 = this->KeyValueMaps.begin(); _iter320 != this->KeyValueMaps.end(); ++_iter320)
    {
      xfer += (*_iter320).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter321;
    for (_iter321 = this->DependabilityRequirements.begin(); _iter321 != this->DependabilityRequirements.end(); ++_iter321)
    {
      xfer += (*_iter321).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubFunctions", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter322;
    for (_iter322 = this->SubFunctions.begin(); _iter322 != this->SubFunctions.end(); ++_iter322)
    {
      xfer += (*_iter322).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPort> ::const_iterator _iter323;
    for (_iter323 = this->Ports.begin(); _iter323 != this->Ports.end(); ++_iter323)
    {
      xfer += (*_iter323).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Signals", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Signals.size()));
    std::vector<TDDISignal> ::const_iterator _iter324;
    for (_iter324 = this->Signals.begin(); _iter324 != this->Signals.end(); ++_iter324)
    {
      xfer += (*_iter324).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PerfChars", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->PerfChars.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter325;
    for (_iter325 = this->FailureModels.begin(); _iter325 != this->FailureModels.end(); ++_iter325)
    {
      xfer += (*_iter325).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Malfunctions", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Malfunctions.size()));
    std::vector<TDDIMalfunctionRef> ::const_iterator _iter326;
    for (_iter326 = this->Malfunctions.begin(); _iter326 != this->Malfunctions.end(); ++_iter326)
    {
      xfer += (*_iter326).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AsAsset", ::apache::thrift::protocol::T_STRUCT, 13);
  if (this->AsAsset) {
    xfer += this->AsAsset->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Object", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->Object);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Behavior", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->Behavior);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeState", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->SafeState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISafetyFunction &a, TDDISafetyFunction &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.SubFunctions, b.SubFunctions);
  swap(a.Ports, b.Ports);
  swap(a.Signals, b.Signals);
  swap(a.PerfChars, b.PerfChars);
  swap(a.FailureModels, b.FailureModels);
  swap(a.Malfunctions, b.Malfunctions);
  swap(a.AsAsset, b.AsAsset);
  swap(a.Object, b.Object);
  swap(a.Behavior, b.Behavior);
  swap(a.SafeState, b.SafeState);
  swap(a.__isset, b.__isset);
}

TDDISafetyFunction::TDDISafetyFunction(const TDDISafetyFunction& other327) {
  Id = other327.Id;
  Name = other327.Name;
  Description = other327.Description;
  KeyValueMaps = other327.KeyValueMaps;
  DependabilityRequirements = other327.DependabilityRequirements;
  AssuranceLevel = other327.AssuranceLevel;
  SubFunctions = other327.SubFunctions;
  Ports = other327.Ports;
  Signals = other327.Signals;
  PerfChars = other327.PerfChars;
  FailureModels = other327.FailureModels;
  Malfunctions = other327.Malfunctions;
  AsAsset = other327.AsAsset;
  Object = other327.Object;
  Behavior = other327.Behavior;
  SafeState = other327.SafeState;
  __isset = other327.__isset;
}
TDDISafetyFunction& TDDISafetyFunction::operator=(const TDDISafetyFunction& other328) {
  Id = other328.Id;
  Name = other328.Name;
  Description = other328.Description;
  KeyValueMaps = other328.KeyValueMaps;
  DependabilityRequirements = other328.DependabilityRequirements;
  AssuranceLevel = other328.AssuranceLevel;
  SubFunctions = other328.SubFunctions;
  Ports = other328.Ports;
  Signals = other328.Signals;
  PerfChars = other328.PerfChars;
  FailureModels = other328.FailureModels;
  Malfunctions = other328.Malfunctions;
  AsAsset = other328.AsAsset;
  Object = other328.Object;
  Behavior = other328.Behavior;
  SafeState = other328.SafeState;
  __isset = other328.__isset;
  return *this;
}
void TDDISafetyFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISafetyFunction(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "SubFunctions=" << to_string(SubFunctions);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "Signals=" << to_string(Signals);
  out << ", " << "PerfChars=" << to_string(PerfChars);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "Malfunctions=" << to_string(Malfunctions);
  out << ", " << "AsAsset=" << to_string(AsAsset);
  out << ", " << "Object=" << to_string(Object);
  out << ", " << "Behavior=" << to_string(Behavior);
  out << ", " << "SafeState=" << to_string(SafeState);
  out << ")";
}


TDDIFunctionUnion::~TDDIFunctionUnion() throw() {
}


void TDDIFunctionUnion::__set_Function(::apache::thrift::stdcxx::shared_ptr<TDDIFunction> val) {
  this->Function = val;
__isset.Function = true;
}

void TDDIFunctionUnion::__set_SafetyFunction(::apache::thrift::stdcxx::shared_ptr<TDDISafetyFunction> val) {
  this->SafetyFunction = val;
__isset.SafetyFunction = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFunctionUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFunctionUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Function) { 
            this->Function = ::apache::thrift::stdcxx::shared_ptr<TDDIFunction>(new TDDIFunction);
          }
          xfer += this->Function->read(iprot);
          bool wasSet = false;
          if (this->Function->__isset.Id) { wasSet = true; }
          if (this->Function->__isset.Name) { wasSet = true; }
          if (this->Function->__isset.Description) { wasSet = true; }
          if (this->Function->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Function->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->Function->__isset.AssuranceLevel) { wasSet = true; }
          if (this->Function->__isset.SubFunctions) { wasSet = true; }
          if (this->Function->__isset.Ports) { wasSet = true; }
          if (this->Function->__isset.Signals) { wasSet = true; }
          if (this->Function->__isset.PerfChars) { wasSet = true; }
          if (this->Function->__isset.FailureModels) { wasSet = true; }
          if (this->Function->__isset.Malfunctions) { wasSet = true; }
          if (this->Function->__isset.AsAsset) { wasSet = true; }
          if (!wasSet) { this->Function.reset(); }
          this->__isset.Function = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SafetyFunction) { 
            this->SafetyFunction = ::apache::thrift::stdcxx::shared_ptr<TDDISafetyFunction>(new TDDISafetyFunction);
          }
          xfer += this->SafetyFunction->read(iprot);
          bool wasSet = false;
          if (this->SafetyFunction->__isset.Id) { wasSet = true; }
          if (this->SafetyFunction->__isset.Name) { wasSet = true; }
          if (this->SafetyFunction->__isset.Description) { wasSet = true; }
          if (this->SafetyFunction->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SafetyFunction->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->SafetyFunction->__isset.AssuranceLevel) { wasSet = true; }
          if (this->SafetyFunction->__isset.SubFunctions) { wasSet = true; }
          if (this->SafetyFunction->__isset.Ports) { wasSet = true; }
          if (this->SafetyFunction->__isset.Signals) { wasSet = true; }
          if (this->SafetyFunction->__isset.PerfChars) { wasSet = true; }
          if (this->SafetyFunction->__isset.FailureModels) { wasSet = true; }
          if (this->SafetyFunction->__isset.Malfunctions) { wasSet = true; }
          if (this->SafetyFunction->__isset.AsAsset) { wasSet = true; }
          if (this->SafetyFunction->__isset.Object) { wasSet = true; }
          if (this->SafetyFunction->__isset.Behavior) { wasSet = true; }
          if (this->SafetyFunction->__isset.SafeState) { wasSet = true; }
          if (!wasSet) { this->SafetyFunction.reset(); }
          this->__isset.SafetyFunction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFunctionUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFunctionUnion");

  if (this->__isset.Function) {
    xfer += oprot->writeFieldBegin("Function", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Function) {
      xfer += this->Function->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFunction"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SafetyFunction) {
    xfer += oprot->writeFieldBegin("SafetyFunction", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->SafetyFunction) {
      xfer += this->SafetyFunction->write(oprot); 
    } else {oprot->writeStructBegin("TDDISafetyFunction"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFunctionUnion &a, TDDIFunctionUnion &b) {
  using ::std::swap;
  swap(a.Function, b.Function);
  swap(a.SafetyFunction, b.SafetyFunction);
  swap(a.__isset, b.__isset);
}

TDDIFunctionUnion::TDDIFunctionUnion(const TDDIFunctionUnion& other329) {
  Function = other329.Function;
  SafetyFunction = other329.SafetyFunction;
  __isset = other329.__isset;
}
TDDIFunctionUnion& TDDIFunctionUnion::operator=(const TDDIFunctionUnion& other330) {
  Function = other330.Function;
  SafetyFunction = other330.SafetyFunction;
  __isset = other330.__isset;
  return *this;
}
void TDDIFunctionUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFunctionUnion(";
  out << "Function="; (__isset.Function ? (out << to_string(Function)) : (out << "<null>"));
  out << ", " << "SafetyFunction="; (__isset.SafetyFunction ? (out << to_string(SafetyFunction)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFunction::~TDDIAbstractFunction() throw() {
}


void TDDIAbstractFunction::__set_UsedFunction(const TDDIFunctionUnion& val) {
  this->UsedFunction = val;
}

void TDDIAbstractFunction::__set_UsedFunctionType(const TDDIFunctionUnionType val) {
  this->UsedFunctionType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFunction.read(iprot);
          this->__isset.UsedFunction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast331;
          xfer += iprot->readI32(ecast331);
          this->UsedFunctionType = (TDDIFunctionUnionType)ecast331;
          this->__isset.UsedFunctionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFunction");

  xfer += oprot->writeFieldBegin("UsedFunction", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFunction.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFunctionType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFunctionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFunction &a, TDDIAbstractFunction &b) {
  using ::std::swap;
  swap(a.UsedFunction, b.UsedFunction);
  swap(a.UsedFunctionType, b.UsedFunctionType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFunction::TDDIAbstractFunction(const TDDIAbstractFunction& other332) {
  UsedFunction = other332.UsedFunction;
  UsedFunctionType = other332.UsedFunctionType;
  __isset = other332.__isset;
}
TDDIAbstractFunction& TDDIAbstractFunction::operator=(const TDDIAbstractFunction& other333) {
  UsedFunction = other333.UsedFunction;
  UsedFunctionType = other333.UsedFunctionType;
  __isset = other333.__isset;
  return *this;
}
void TDDIAbstractFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFunction(";
  out << "UsedFunction=" << to_string(UsedFunction);
  out << ", " << "UsedFunctionType=" << to_string(UsedFunctionType);
  out << ")";
}


TDDIConfiguration::~TDDIConfiguration() throw() {
}


void TDDIConfiguration::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIConfiguration::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIConfiguration::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIConfiguration::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIConfiguration::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIConfiguration& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIConfiguration::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size334;
            ::apache::thrift::protocol::TType _etype337;
            xfer += iprot->readListBegin(_etype337, _size334);
            this->KeyValueMaps.resize(_size334);
            uint32_t _i338;
            for (_i338 = 0; _i338 < _size334; ++_i338)
            {
              xfer += this->KeyValueMaps[_i338].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size339;
            ::apache::thrift::protocol::TType _etype342;
            xfer += iprot->readListBegin(_etype342, _size339);
            this->SubSystems.resize(_size339);
            uint32_t _i343;
            for (_i343 = 0; _i343 < _size339; ++_i343)
            {
              xfer += this->SubSystems[_i343].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIConfiguration::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIConfiguration");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter344;
    for (_iter344 = this->KeyValueMaps.begin(); _iter344 != this->KeyValueMaps.end(); ++_iter344)
    {
      xfer += (*_iter344).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter345;
    for (_iter345 = this->SubSystems.begin(); _iter345 != this->SubSystems.end(); ++_iter345)
    {
      xfer += (*_iter345).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIConfiguration &a, TDDIConfiguration &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.SubSystems, b.SubSystems);
  swap(a.__isset, b.__isset);
}

TDDIConfiguration::TDDIConfiguration(const TDDIConfiguration& other346) {
  Id = other346.Id;
  Name = other346.Name;
  Description = other346.Description;
  KeyValueMaps = other346.KeyValueMaps;
  SubSystems = other346.SubSystems;
  __isset = other346.__isset;
}
TDDIConfiguration& TDDIConfiguration::operator=(const TDDIConfiguration& other347) {
  Id = other347.Id;
  Name = other347.Name;
  Description = other347.Description;
  KeyValueMaps = other347.KeyValueMaps;
  SubSystems = other347.SubSystems;
  __isset = other347.__isset;
  return *this;
}
void TDDIConfiguration::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIConfiguration(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ")";
}


TDDIContext::~TDDIContext() throw() {
}


void TDDIContext::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIContext::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIContext::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIContext::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIContext::__set_UsageHistory(const std::string& val) {
  this->UsageHistory = val;
}

void TDDIContext::__set_MissionTime(const double val) {
  this->MissionTime = val;
}

void TDDIContext::__set_MissionTimeTimeUnit(const TDDITimeUnit val) {
  this->MissionTimeTimeUnit = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIContext& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size348;
            ::apache::thrift::protocol::TType _etype351;
            xfer += iprot->readListBegin(_etype351, _size348);
            this->KeyValueMaps.resize(_size348);
            uint32_t _i352;
            for (_i352 = 0; _i352 < _size348; ++_i352)
            {
              xfer += this->KeyValueMaps[_i352].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UsageHistory);
          this->__isset.UsageHistory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->MissionTime);
          this->__isset.MissionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast353;
          xfer += iprot->readI32(ecast353);
          this->MissionTimeTimeUnit = (TDDITimeUnit)ecast353;
          this->__isset.MissionTimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIContext");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter354;
    for (_iter354 = this->KeyValueMaps.begin(); _iter354 != this->KeyValueMaps.end(); ++_iter354)
    {
      xfer += (*_iter354).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsageHistory", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->UsageHistory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MissionTime", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->MissionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MissionTimeTimeUnit", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->MissionTimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIContext &a, TDDIContext &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.UsageHistory, b.UsageHistory);
  swap(a.MissionTime, b.MissionTime);
  swap(a.MissionTimeTimeUnit, b.MissionTimeTimeUnit);
  swap(a.__isset, b.__isset);
}

TDDIContext::TDDIContext(const TDDIContext& other355) {
  Id = other355.Id;
  Name = other355.Name;
  Description = other355.Description;
  KeyValueMaps = other355.KeyValueMaps;
  UsageHistory = other355.UsageHistory;
  MissionTime = other355.MissionTime;
  MissionTimeTimeUnit = other355.MissionTimeTimeUnit;
  __isset = other355.__isset;
}
TDDIContext& TDDIContext::operator=(const TDDIContext& other356) {
  Id = other356.Id;
  Name = other356.Name;
  Description = other356.Description;
  KeyValueMaps = other356.KeyValueMaps;
  UsageHistory = other356.UsageHistory;
  MissionTime = other356.MissionTime;
  MissionTimeTimeUnit = other356.MissionTimeTimeUnit;
  __isset = other356.__isset;
  return *this;
}
void TDDIContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIContext(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "UsageHistory=" << to_string(UsageHistory);
  out << ", " << "MissionTime=" << to_string(MissionTime);
  out << ", " << "MissionTimeTimeUnit=" << to_string(MissionTimeTimeUnit);
  out << ")";
}


TDDISystem::~TDDISystem() throw() {
}


void TDDISystem::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISystem::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISystem::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISystem::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISystem::__set_OverallLifetime(const double val) {
  this->OverallLifetime = val;
}

void TDDISystem::__set_OverallLifetimeTimeUnit(const TDDITimeUnit val) {
  this->OverallLifetimeTimeUnit = val;
}

void TDDISystem::__set_Contexts(const std::vector<TDDIContext> & val) {
  this->Contexts = val;
}

void TDDISystem::__set_Configurations(const std::vector<TDDIConfiguration> & val) {
  this->Configurations = val;
}

void TDDISystem::__set_Ports(const std::vector<TDDIPort> & val) {
  this->Ports = val;
}

void TDDISystem::__set_Signals(const std::vector<TDDISignal> & val) {
  this->Signals = val;
}

void TDDISystem::__set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val) {
  this->SystemBoundaries = val;
}

void TDDISystem::__set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val) {
  this->AppliedStandards = val;
}

void TDDISystem::__set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->RealisedFunctions = val;
}

void TDDISystem::__set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val) {
  this->AsAsset = val;
}

void TDDISystem::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDISystem::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISystem::__set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->FailureModels = val;
}

void TDDISystem::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISystem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size357;
            ::apache::thrift::protocol::TType _etype360;
            xfer += iprot->readListBegin(_etype360, _size357);
            this->KeyValueMaps.resize(_size357);
            uint32_t _i361;
            for (_i361 = 0; _i361 < _size357; ++_i361)
            {
              xfer += this->KeyValueMaps[_i361].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OverallLifetime);
          this->__isset.OverallLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast362;
          xfer += iprot->readI32(ecast362);
          this->OverallLifetimeTimeUnit = (TDDITimeUnit)ecast362;
          this->__isset.OverallLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Contexts.clear();
            uint32_t _size363;
            ::apache::thrift::protocol::TType _etype366;
            xfer += iprot->readListBegin(_etype366, _size363);
            this->Contexts.resize(_size363);
            uint32_t _i367;
            for (_i367 = 0; _i367 < _size363; ++_i367)
            {
              xfer += this->Contexts[_i367].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Configurations.clear();
            uint32_t _size368;
            ::apache::thrift::protocol::TType _etype371;
            xfer += iprot->readListBegin(_etype371, _size368);
            this->Configurations.resize(_size368);
            uint32_t _i372;
            for (_i372 = 0; _i372 < _size368; ++_i372)
            {
              xfer += this->Configurations[_i372].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Configurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size373;
            ::apache::thrift::protocol::TType _etype376;
            xfer += iprot->readListBegin(_etype376, _size373);
            this->Ports.resize(_size373);
            uint32_t _i377;
            for (_i377 = 0; _i377 < _size373; ++_i377)
            {
              xfer += this->Ports[_i377].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Signals.clear();
            uint32_t _size378;
            ::apache::thrift::protocol::TType _etype381;
            xfer += iprot->readListBegin(_etype381, _size378);
            this->Signals.resize(_size378);
            uint32_t _i382;
            for (_i382 = 0; _i382 < _size378; ++_i382)
            {
              xfer += this->Signals[_i382].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Signals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SystemBoundaries.clear();
            uint32_t _size383;
            ::apache::thrift::protocol::TType _etype386;
            xfer += iprot->readListBegin(_etype386, _size383);
            this->SystemBoundaries.resize(_size383);
            uint32_t _i387;
            for (_i387 = 0; _i387 < _size383; ++_i387)
            {
              xfer += this->SystemBoundaries[_i387].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SystemBoundaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AppliedStandards.clear();
            uint32_t _size388;
            ::apache::thrift::protocol::TType _etype391;
            xfer += iprot->readListBegin(_etype391, _size388);
            this->AppliedStandards.resize(_size388);
            uint32_t _i392;
            for (_i392 = 0; _i392 < _size388; ++_i392)
            {
              xfer += this->AppliedStandards[_i392].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AppliedStandards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RealisedFunctions.clear();
            uint32_t _size393;
            ::apache::thrift::protocol::TType _etype396;
            xfer += iprot->readListBegin(_etype396, _size393);
            this->RealisedFunctions.resize(_size393);
            uint32_t _i397;
            for (_i397 = 0; _i397 < _size393; ++_i397)
            {
              xfer += this->RealisedFunctions[_i397].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RealisedFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AsAsset) { 
            this->AsAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset>(new TDDIAbstractAsset);
          }
          xfer += this->AsAsset->read(iprot);
          bool wasSet = false;
          if (this->AsAsset->__isset.UsedAsset) { wasSet = true; }
          if (this->AsAsset->__isset.UsedAssetType) { wasSet = true; }
          if (!wasSet) { this->AsAsset.reset(); }
          this->__isset.AsAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size398;
            ::apache::thrift::protocol::TType _etype401;
            xfer += iprot->readListBegin(_etype401, _size398);
            this->DependabilityRequirements.resize(_size398);
            uint32_t _i402;
            for (_i402 = 0; _i402 < _size398; ++_i402)
            {
              xfer += this->DependabilityRequirements[_i402].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size403;
            ::apache::thrift::protocol::TType _etype406;
            xfer += iprot->readListBegin(_etype406, _size403);
            this->FailureModels.resize(_size403);
            uint32_t _i407;
            for (_i407 = 0; _i407 < _size403; ++_i407)
            {
              xfer += this->FailureModels[_i407].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size408;
            ::apache::thrift::protocol::TType _etype411;
            xfer += iprot->readListBegin(_etype411, _size408);
            this->SubSystems.resize(_size408);
            uint32_t _i412;
            for (_i412 = 0; _i412 < _size408; ++_i412)
            {
              xfer += this->SubSystems[_i412].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISystem");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter413;
    for (_iter413 = this->KeyValueMaps.begin(); _iter413 != this->KeyValueMaps.end(); ++_iter413)
    {
      xfer += (*_iter413).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetime", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->OverallLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->OverallLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contexts", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Contexts.size()));
    std::vector<TDDIContext> ::const_iterator _iter414;
    for (_iter414 = this->Contexts.begin(); _iter414 != this->Contexts.end(); ++_iter414)
    {
      xfer += (*_iter414).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Configurations", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Configurations.size()));
    std::vector<TDDIConfiguration> ::const_iterator _iter415;
    for (_iter415 = this->Configurations.begin(); _iter415 != this->Configurations.end(); ++_iter415)
    {
      xfer += (*_iter415).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPort> ::const_iterator _iter416;
    for (_iter416 = this->Ports.begin(); _iter416 != this->Ports.end(); ++_iter416)
    {
      xfer += (*_iter416).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Signals", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Signals.size()));
    std::vector<TDDISignal> ::const_iterator _iter417;
    for (_iter417 = this->Signals.begin(); _iter417 != this->Signals.end(); ++_iter417)
    {
      xfer += (*_iter417).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SystemBoundaries", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SystemBoundaries.size()));
    std::vector<TDDISystemBoundary> ::const_iterator _iter418;
    for (_iter418 = this->SystemBoundaries.begin(); _iter418 != this->SystemBoundaries.end(); ++_iter418)
    {
      xfer += (*_iter418).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AppliedStandards", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AppliedStandards.size()));
    std::vector<TDDIAbstractStandardRef> ::const_iterator _iter419;
    for (_iter419 = this->AppliedStandards.begin(); _iter419 != this->AppliedStandards.end(); ++_iter419)
    {
      xfer += (*_iter419).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RealisedFunctions", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RealisedFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter420;
    for (_iter420 = this->RealisedFunctions.begin(); _iter420 != this->RealisedFunctions.end(); ++_iter420)
    {
      xfer += (*_iter420).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AsAsset", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->AsAsset) {
    xfer += this->AsAsset->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter421;
    for (_iter421 = this->DependabilityRequirements.begin(); _iter421 != this->DependabilityRequirements.end(); ++_iter421)
    {
      xfer += (*_iter421).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 16);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter422;
    for (_iter422 = this->FailureModels.begin(); _iter422 != this->FailureModels.end(); ++_iter422)
    {
      xfer += (*_iter422).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter423;
    for (_iter423 = this->SubSystems.begin(); _iter423 != this->SubSystems.end(); ++_iter423)
    {
      xfer += (*_iter423).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISystem &a, TDDISystem &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.OverallLifetime, b.OverallLifetime);
  swap(a.OverallLifetimeTimeUnit, b.OverallLifetimeTimeUnit);
  swap(a.Contexts, b.Contexts);
  swap(a.Configurations, b.Configurations);
  swap(a.Ports, b.Ports);
  swap(a.Signals, b.Signals);
  swap(a.SystemBoundaries, b.SystemBoundaries);
  swap(a.AppliedStandards, b.AppliedStandards);
  swap(a.RealisedFunctions, b.RealisedFunctions);
  swap(a.AsAsset, b.AsAsset);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.FailureModels, b.FailureModels);
  swap(a.SubSystems, b.SubSystems);
  swap(a.__isset, b.__isset);
}

TDDISystem::TDDISystem(const TDDISystem& other424) {
  Id = other424.Id;
  Name = other424.Name;
  Description = other424.Description;
  KeyValueMaps = other424.KeyValueMaps;
  OverallLifetime = other424.OverallLifetime;
  OverallLifetimeTimeUnit = other424.OverallLifetimeTimeUnit;
  Contexts = other424.Contexts;
  Configurations = other424.Configurations;
  Ports = other424.Ports;
  Signals = other424.Signals;
  SystemBoundaries = other424.SystemBoundaries;
  AppliedStandards = other424.AppliedStandards;
  RealisedFunctions = other424.RealisedFunctions;
  AsAsset = other424.AsAsset;
  DependabilityRequirements = other424.DependabilityRequirements;
  AssuranceLevel = other424.AssuranceLevel;
  FailureModels = other424.FailureModels;
  SubSystems = other424.SubSystems;
  __isset = other424.__isset;
}
TDDISystem& TDDISystem::operator=(const TDDISystem& other425) {
  Id = other425.Id;
  Name = other425.Name;
  Description = other425.Description;
  KeyValueMaps = other425.KeyValueMaps;
  OverallLifetime = other425.OverallLifetime;
  OverallLifetimeTimeUnit = other425.OverallLifetimeTimeUnit;
  Contexts = other425.Contexts;
  Configurations = other425.Configurations;
  Ports = other425.Ports;
  Signals = other425.Signals;
  SystemBoundaries = other425.SystemBoundaries;
  AppliedStandards = other425.AppliedStandards;
  RealisedFunctions = other425.RealisedFunctions;
  AsAsset = other425.AsAsset;
  DependabilityRequirements = other425.DependabilityRequirements;
  AssuranceLevel = other425.AssuranceLevel;
  FailureModels = other425.FailureModels;
  SubSystems = other425.SubSystems;
  __isset = other425.__isset;
  return *this;
}
void TDDISystem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISystem(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "OverallLifetime=" << to_string(OverallLifetime);
  out << ", " << "OverallLifetimeTimeUnit=" << to_string(OverallLifetimeTimeUnit);
  out << ", " << "Contexts=" << to_string(Contexts);
  out << ", " << "Configurations=" << to_string(Configurations);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "Signals=" << to_string(Signals);
  out << ", " << "SystemBoundaries=" << to_string(SystemBoundaries);
  out << ", " << "AppliedStandards=" << to_string(AppliedStandards);
  out << ", " << "RealisedFunctions=" << to_string(RealisedFunctions);
  out << ", " << "AsAsset=" << to_string(AsAsset);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ")";
}


TDDILogicalComponent::~TDDILogicalComponent() throw() {
}


void TDDILogicalComponent::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDILogicalComponent::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDILogicalComponent::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDILogicalComponent::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDILogicalComponent::__set_OverallLifetime(const double val) {
  this->OverallLifetime = val;
}

void TDDILogicalComponent::__set_OverallLifetimeTimeUnit(const TDDITimeUnit val) {
  this->OverallLifetimeTimeUnit = val;
}

void TDDILogicalComponent::__set_Contexts(const std::vector<TDDIContext> & val) {
  this->Contexts = val;
}

void TDDILogicalComponent::__set_Configurations(const std::vector<TDDIConfiguration> & val) {
  this->Configurations = val;
}

void TDDILogicalComponent::__set_Ports(const std::vector<TDDIPort> & val) {
  this->Ports = val;
}

void TDDILogicalComponent::__set_Signals(const std::vector<TDDISignal> & val) {
  this->Signals = val;
}

void TDDILogicalComponent::__set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val) {
  this->SystemBoundaries = val;
}

void TDDILogicalComponent::__set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val) {
  this->AppliedStandards = val;
}

void TDDILogicalComponent::__set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->RealisedFunctions = val;
}

void TDDILogicalComponent::__set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val) {
  this->AsAsset = val;
}

void TDDILogicalComponent::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDILogicalComponent::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDILogicalComponent::__set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->FailureModels = val;
}

void TDDILogicalComponent::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILogicalComponent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILogicalComponent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size426;
            ::apache::thrift::protocol::TType _etype429;
            xfer += iprot->readListBegin(_etype429, _size426);
            this->KeyValueMaps.resize(_size426);
            uint32_t _i430;
            for (_i430 = 0; _i430 < _size426; ++_i430)
            {
              xfer += this->KeyValueMaps[_i430].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OverallLifetime);
          this->__isset.OverallLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast431;
          xfer += iprot->readI32(ecast431);
          this->OverallLifetimeTimeUnit = (TDDITimeUnit)ecast431;
          this->__isset.OverallLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Contexts.clear();
            uint32_t _size432;
            ::apache::thrift::protocol::TType _etype435;
            xfer += iprot->readListBegin(_etype435, _size432);
            this->Contexts.resize(_size432);
            uint32_t _i436;
            for (_i436 = 0; _i436 < _size432; ++_i436)
            {
              xfer += this->Contexts[_i436].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Configurations.clear();
            uint32_t _size437;
            ::apache::thrift::protocol::TType _etype440;
            xfer += iprot->readListBegin(_etype440, _size437);
            this->Configurations.resize(_size437);
            uint32_t _i441;
            for (_i441 = 0; _i441 < _size437; ++_i441)
            {
              xfer += this->Configurations[_i441].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Configurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size442;
            ::apache::thrift::protocol::TType _etype445;
            xfer += iprot->readListBegin(_etype445, _size442);
            this->Ports.resize(_size442);
            uint32_t _i446;
            for (_i446 = 0; _i446 < _size442; ++_i446)
            {
              xfer += this->Ports[_i446].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Signals.clear();
            uint32_t _size447;
            ::apache::thrift::protocol::TType _etype450;
            xfer += iprot->readListBegin(_etype450, _size447);
            this->Signals.resize(_size447);
            uint32_t _i451;
            for (_i451 = 0; _i451 < _size447; ++_i451)
            {
              xfer += this->Signals[_i451].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Signals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SystemBoundaries.clear();
            uint32_t _size452;
            ::apache::thrift::protocol::TType _etype455;
            xfer += iprot->readListBegin(_etype455, _size452);
            this->SystemBoundaries.resize(_size452);
            uint32_t _i456;
            for (_i456 = 0; _i456 < _size452; ++_i456)
            {
              xfer += this->SystemBoundaries[_i456].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SystemBoundaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AppliedStandards.clear();
            uint32_t _size457;
            ::apache::thrift::protocol::TType _etype460;
            xfer += iprot->readListBegin(_etype460, _size457);
            this->AppliedStandards.resize(_size457);
            uint32_t _i461;
            for (_i461 = 0; _i461 < _size457; ++_i461)
            {
              xfer += this->AppliedStandards[_i461].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AppliedStandards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RealisedFunctions.clear();
            uint32_t _size462;
            ::apache::thrift::protocol::TType _etype465;
            xfer += iprot->readListBegin(_etype465, _size462);
            this->RealisedFunctions.resize(_size462);
            uint32_t _i466;
            for (_i466 = 0; _i466 < _size462; ++_i466)
            {
              xfer += this->RealisedFunctions[_i466].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RealisedFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AsAsset) { 
            this->AsAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset>(new TDDIAbstractAsset);
          }
          xfer += this->AsAsset->read(iprot);
          bool wasSet = false;
          if (this->AsAsset->__isset.UsedAsset) { wasSet = true; }
          if (this->AsAsset->__isset.UsedAssetType) { wasSet = true; }
          if (!wasSet) { this->AsAsset.reset(); }
          this->__isset.AsAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size467;
            ::apache::thrift::protocol::TType _etype470;
            xfer += iprot->readListBegin(_etype470, _size467);
            this->DependabilityRequirements.resize(_size467);
            uint32_t _i471;
            for (_i471 = 0; _i471 < _size467; ++_i471)
            {
              xfer += this->DependabilityRequirements[_i471].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size472;
            ::apache::thrift::protocol::TType _etype475;
            xfer += iprot->readListBegin(_etype475, _size472);
            this->FailureModels.resize(_size472);
            uint32_t _i476;
            for (_i476 = 0; _i476 < _size472; ++_i476)
            {
              xfer += this->FailureModels[_i476].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size477;
            ::apache::thrift::protocol::TType _etype480;
            xfer += iprot->readListBegin(_etype480, _size477);
            this->SubSystems.resize(_size477);
            uint32_t _i481;
            for (_i481 = 0; _i481 < _size477; ++_i481)
            {
              xfer += this->SubSystems[_i481].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILogicalComponent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILogicalComponent");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter482;
    for (_iter482 = this->KeyValueMaps.begin(); _iter482 != this->KeyValueMaps.end(); ++_iter482)
    {
      xfer += (*_iter482).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetime", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->OverallLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->OverallLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contexts", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Contexts.size()));
    std::vector<TDDIContext> ::const_iterator _iter483;
    for (_iter483 = this->Contexts.begin(); _iter483 != this->Contexts.end(); ++_iter483)
    {
      xfer += (*_iter483).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Configurations", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Configurations.size()));
    std::vector<TDDIConfiguration> ::const_iterator _iter484;
    for (_iter484 = this->Configurations.begin(); _iter484 != this->Configurations.end(); ++_iter484)
    {
      xfer += (*_iter484).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPort> ::const_iterator _iter485;
    for (_iter485 = this->Ports.begin(); _iter485 != this->Ports.end(); ++_iter485)
    {
      xfer += (*_iter485).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Signals", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Signals.size()));
    std::vector<TDDISignal> ::const_iterator _iter486;
    for (_iter486 = this->Signals.begin(); _iter486 != this->Signals.end(); ++_iter486)
    {
      xfer += (*_iter486).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SystemBoundaries", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SystemBoundaries.size()));
    std::vector<TDDISystemBoundary> ::const_iterator _iter487;
    for (_iter487 = this->SystemBoundaries.begin(); _iter487 != this->SystemBoundaries.end(); ++_iter487)
    {
      xfer += (*_iter487).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AppliedStandards", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AppliedStandards.size()));
    std::vector<TDDIAbstractStandardRef> ::const_iterator _iter488;
    for (_iter488 = this->AppliedStandards.begin(); _iter488 != this->AppliedStandards.end(); ++_iter488)
    {
      xfer += (*_iter488).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RealisedFunctions", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RealisedFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter489;
    for (_iter489 = this->RealisedFunctions.begin(); _iter489 != this->RealisedFunctions.end(); ++_iter489)
    {
      xfer += (*_iter489).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AsAsset", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->AsAsset) {
    xfer += this->AsAsset->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter490;
    for (_iter490 = this->DependabilityRequirements.begin(); _iter490 != this->DependabilityRequirements.end(); ++_iter490)
    {
      xfer += (*_iter490).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 16);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter491;
    for (_iter491 = this->FailureModels.begin(); _iter491 != this->FailureModels.end(); ++_iter491)
    {
      xfer += (*_iter491).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter492;
    for (_iter492 = this->SubSystems.begin(); _iter492 != this->SubSystems.end(); ++_iter492)
    {
      xfer += (*_iter492).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILogicalComponent &a, TDDILogicalComponent &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.OverallLifetime, b.OverallLifetime);
  swap(a.OverallLifetimeTimeUnit, b.OverallLifetimeTimeUnit);
  swap(a.Contexts, b.Contexts);
  swap(a.Configurations, b.Configurations);
  swap(a.Ports, b.Ports);
  swap(a.Signals, b.Signals);
  swap(a.SystemBoundaries, b.SystemBoundaries);
  swap(a.AppliedStandards, b.AppliedStandards);
  swap(a.RealisedFunctions, b.RealisedFunctions);
  swap(a.AsAsset, b.AsAsset);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.FailureModels, b.FailureModels);
  swap(a.SubSystems, b.SubSystems);
  swap(a.__isset, b.__isset);
}

TDDILogicalComponent::TDDILogicalComponent(const TDDILogicalComponent& other493) {
  Id = other493.Id;
  Name = other493.Name;
  Description = other493.Description;
  KeyValueMaps = other493.KeyValueMaps;
  OverallLifetime = other493.OverallLifetime;
  OverallLifetimeTimeUnit = other493.OverallLifetimeTimeUnit;
  Contexts = other493.Contexts;
  Configurations = other493.Configurations;
  Ports = other493.Ports;
  Signals = other493.Signals;
  SystemBoundaries = other493.SystemBoundaries;
  AppliedStandards = other493.AppliedStandards;
  RealisedFunctions = other493.RealisedFunctions;
  AsAsset = other493.AsAsset;
  DependabilityRequirements = other493.DependabilityRequirements;
  AssuranceLevel = other493.AssuranceLevel;
  FailureModels = other493.FailureModels;
  SubSystems = other493.SubSystems;
  __isset = other493.__isset;
}
TDDILogicalComponent& TDDILogicalComponent::operator=(const TDDILogicalComponent& other494) {
  Id = other494.Id;
  Name = other494.Name;
  Description = other494.Description;
  KeyValueMaps = other494.KeyValueMaps;
  OverallLifetime = other494.OverallLifetime;
  OverallLifetimeTimeUnit = other494.OverallLifetimeTimeUnit;
  Contexts = other494.Contexts;
  Configurations = other494.Configurations;
  Ports = other494.Ports;
  Signals = other494.Signals;
  SystemBoundaries = other494.SystemBoundaries;
  AppliedStandards = other494.AppliedStandards;
  RealisedFunctions = other494.RealisedFunctions;
  AsAsset = other494.AsAsset;
  DependabilityRequirements = other494.DependabilityRequirements;
  AssuranceLevel = other494.AssuranceLevel;
  FailureModels = other494.FailureModels;
  SubSystems = other494.SubSystems;
  __isset = other494.__isset;
  return *this;
}
void TDDILogicalComponent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILogicalComponent(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "OverallLifetime=" << to_string(OverallLifetime);
  out << ", " << "OverallLifetimeTimeUnit=" << to_string(OverallLifetimeTimeUnit);
  out << ", " << "Contexts=" << to_string(Contexts);
  out << ", " << "Configurations=" << to_string(Configurations);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "Signals=" << to_string(Signals);
  out << ", " << "SystemBoundaries=" << to_string(SystemBoundaries);
  out << ", " << "AppliedStandards=" << to_string(AppliedStandards);
  out << ", " << "RealisedFunctions=" << to_string(RealisedFunctions);
  out << ", " << "AsAsset=" << to_string(AsAsset);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ")";
}


TDDISafetyRelatedSystem::~TDDISafetyRelatedSystem() throw() {
}


void TDDISafetyRelatedSystem::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISafetyRelatedSystem::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISafetyRelatedSystem::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISafetyRelatedSystem::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISafetyRelatedSystem::__set_OverallLifetime(const double val) {
  this->OverallLifetime = val;
}

void TDDISafetyRelatedSystem::__set_OverallLifetimeTimeUnit(const TDDITimeUnit val) {
  this->OverallLifetimeTimeUnit = val;
}

void TDDISafetyRelatedSystem::__set_Contexts(const std::vector<TDDIContext> & val) {
  this->Contexts = val;
}

void TDDISafetyRelatedSystem::__set_Configurations(const std::vector<TDDIConfiguration> & val) {
  this->Configurations = val;
}

void TDDISafetyRelatedSystem::__set_Ports(const std::vector<TDDIPort> & val) {
  this->Ports = val;
}

void TDDISafetyRelatedSystem::__set_Signals(const std::vector<TDDISignal> & val) {
  this->Signals = val;
}

void TDDISafetyRelatedSystem::__set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val) {
  this->SystemBoundaries = val;
}

void TDDISafetyRelatedSystem::__set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val) {
  this->AppliedStandards = val;
}

void TDDISafetyRelatedSystem::__set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->RealisedFunctions = val;
}

void TDDISafetyRelatedSystem::__set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val) {
  this->AsAsset = val;
}

void TDDISafetyRelatedSystem::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDISafetyRelatedSystem::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISafetyRelatedSystem::__set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->FailureModels = val;
}

void TDDISafetyRelatedSystem::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}

void TDDISafetyRelatedSystem::__set_SafeState(const std::string& val) {
  this->SafeState = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISafetyRelatedSystem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISafetyRelatedSystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size495;
            ::apache::thrift::protocol::TType _etype498;
            xfer += iprot->readListBegin(_etype498, _size495);
            this->KeyValueMaps.resize(_size495);
            uint32_t _i499;
            for (_i499 = 0; _i499 < _size495; ++_i499)
            {
              xfer += this->KeyValueMaps[_i499].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OverallLifetime);
          this->__isset.OverallLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast500;
          xfer += iprot->readI32(ecast500);
          this->OverallLifetimeTimeUnit = (TDDITimeUnit)ecast500;
          this->__isset.OverallLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Contexts.clear();
            uint32_t _size501;
            ::apache::thrift::protocol::TType _etype504;
            xfer += iprot->readListBegin(_etype504, _size501);
            this->Contexts.resize(_size501);
            uint32_t _i505;
            for (_i505 = 0; _i505 < _size501; ++_i505)
            {
              xfer += this->Contexts[_i505].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Configurations.clear();
            uint32_t _size506;
            ::apache::thrift::protocol::TType _etype509;
            xfer += iprot->readListBegin(_etype509, _size506);
            this->Configurations.resize(_size506);
            uint32_t _i510;
            for (_i510 = 0; _i510 < _size506; ++_i510)
            {
              xfer += this->Configurations[_i510].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Configurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size511;
            ::apache::thrift::protocol::TType _etype514;
            xfer += iprot->readListBegin(_etype514, _size511);
            this->Ports.resize(_size511);
            uint32_t _i515;
            for (_i515 = 0; _i515 < _size511; ++_i515)
            {
              xfer += this->Ports[_i515].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Signals.clear();
            uint32_t _size516;
            ::apache::thrift::protocol::TType _etype519;
            xfer += iprot->readListBegin(_etype519, _size516);
            this->Signals.resize(_size516);
            uint32_t _i520;
            for (_i520 = 0; _i520 < _size516; ++_i520)
            {
              xfer += this->Signals[_i520].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Signals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SystemBoundaries.clear();
            uint32_t _size521;
            ::apache::thrift::protocol::TType _etype524;
            xfer += iprot->readListBegin(_etype524, _size521);
            this->SystemBoundaries.resize(_size521);
            uint32_t _i525;
            for (_i525 = 0; _i525 < _size521; ++_i525)
            {
              xfer += this->SystemBoundaries[_i525].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SystemBoundaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AppliedStandards.clear();
            uint32_t _size526;
            ::apache::thrift::protocol::TType _etype529;
            xfer += iprot->readListBegin(_etype529, _size526);
            this->AppliedStandards.resize(_size526);
            uint32_t _i530;
            for (_i530 = 0; _i530 < _size526; ++_i530)
            {
              xfer += this->AppliedStandards[_i530].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AppliedStandards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RealisedFunctions.clear();
            uint32_t _size531;
            ::apache::thrift::protocol::TType _etype534;
            xfer += iprot->readListBegin(_etype534, _size531);
            this->RealisedFunctions.resize(_size531);
            uint32_t _i535;
            for (_i535 = 0; _i535 < _size531; ++_i535)
            {
              xfer += this->RealisedFunctions[_i535].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RealisedFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AsAsset) { 
            this->AsAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset>(new TDDIAbstractAsset);
          }
          xfer += this->AsAsset->read(iprot);
          bool wasSet = false;
          if (this->AsAsset->__isset.UsedAsset) { wasSet = true; }
          if (this->AsAsset->__isset.UsedAssetType) { wasSet = true; }
          if (!wasSet) { this->AsAsset.reset(); }
          this->__isset.AsAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size536;
            ::apache::thrift::protocol::TType _etype539;
            xfer += iprot->readListBegin(_etype539, _size536);
            this->DependabilityRequirements.resize(_size536);
            uint32_t _i540;
            for (_i540 = 0; _i540 < _size536; ++_i540)
            {
              xfer += this->DependabilityRequirements[_i540].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size541;
            ::apache::thrift::protocol::TType _etype544;
            xfer += iprot->readListBegin(_etype544, _size541);
            this->FailureModels.resize(_size541);
            uint32_t _i545;
            for (_i545 = 0; _i545 < _size541; ++_i545)
            {
              xfer += this->FailureModels[_i545].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size546;
            ::apache::thrift::protocol::TType _etype549;
            xfer += iprot->readListBegin(_etype549, _size546);
            this->SubSystems.resize(_size546);
            uint32_t _i550;
            for (_i550 = 0; _i550 < _size546; ++_i550)
            {
              xfer += this->SubSystems[_i550].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeState);
          this->__isset.SafeState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISafetyRelatedSystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISafetyRelatedSystem");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter551;
    for (_iter551 = this->KeyValueMaps.begin(); _iter551 != this->KeyValueMaps.end(); ++_iter551)
    {
      xfer += (*_iter551).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetime", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->OverallLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->OverallLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contexts", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Contexts.size()));
    std::vector<TDDIContext> ::const_iterator _iter552;
    for (_iter552 = this->Contexts.begin(); _iter552 != this->Contexts.end(); ++_iter552)
    {
      xfer += (*_iter552).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Configurations", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Configurations.size()));
    std::vector<TDDIConfiguration> ::const_iterator _iter553;
    for (_iter553 = this->Configurations.begin(); _iter553 != this->Configurations.end(); ++_iter553)
    {
      xfer += (*_iter553).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPort> ::const_iterator _iter554;
    for (_iter554 = this->Ports.begin(); _iter554 != this->Ports.end(); ++_iter554)
    {
      xfer += (*_iter554).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Signals", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Signals.size()));
    std::vector<TDDISignal> ::const_iterator _iter555;
    for (_iter555 = this->Signals.begin(); _iter555 != this->Signals.end(); ++_iter555)
    {
      xfer += (*_iter555).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SystemBoundaries", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SystemBoundaries.size()));
    std::vector<TDDISystemBoundary> ::const_iterator _iter556;
    for (_iter556 = this->SystemBoundaries.begin(); _iter556 != this->SystemBoundaries.end(); ++_iter556)
    {
      xfer += (*_iter556).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AppliedStandards", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AppliedStandards.size()));
    std::vector<TDDIAbstractStandardRef> ::const_iterator _iter557;
    for (_iter557 = this->AppliedStandards.begin(); _iter557 != this->AppliedStandards.end(); ++_iter557)
    {
      xfer += (*_iter557).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RealisedFunctions", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RealisedFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter558;
    for (_iter558 = this->RealisedFunctions.begin(); _iter558 != this->RealisedFunctions.end(); ++_iter558)
    {
      xfer += (*_iter558).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AsAsset", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->AsAsset) {
    xfer += this->AsAsset->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter559;
    for (_iter559 = this->DependabilityRequirements.begin(); _iter559 != this->DependabilityRequirements.end(); ++_iter559)
    {
      xfer += (*_iter559).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 16);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter560;
    for (_iter560 = this->FailureModels.begin(); _iter560 != this->FailureModels.end(); ++_iter560)
    {
      xfer += (*_iter560).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter561;
    for (_iter561 = this->SubSystems.begin(); _iter561 != this->SubSystems.end(); ++_iter561)
    {
      xfer += (*_iter561).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeState", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->SafeState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISafetyRelatedSystem &a, TDDISafetyRelatedSystem &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.OverallLifetime, b.OverallLifetime);
  swap(a.OverallLifetimeTimeUnit, b.OverallLifetimeTimeUnit);
  swap(a.Contexts, b.Contexts);
  swap(a.Configurations, b.Configurations);
  swap(a.Ports, b.Ports);
  swap(a.Signals, b.Signals);
  swap(a.SystemBoundaries, b.SystemBoundaries);
  swap(a.AppliedStandards, b.AppliedStandards);
  swap(a.RealisedFunctions, b.RealisedFunctions);
  swap(a.AsAsset, b.AsAsset);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.FailureModels, b.FailureModels);
  swap(a.SubSystems, b.SubSystems);
  swap(a.SafeState, b.SafeState);
  swap(a.__isset, b.__isset);
}

TDDISafetyRelatedSystem::TDDISafetyRelatedSystem(const TDDISafetyRelatedSystem& other562) {
  Id = other562.Id;
  Name = other562.Name;
  Description = other562.Description;
  KeyValueMaps = other562.KeyValueMaps;
  OverallLifetime = other562.OverallLifetime;
  OverallLifetimeTimeUnit = other562.OverallLifetimeTimeUnit;
  Contexts = other562.Contexts;
  Configurations = other562.Configurations;
  Ports = other562.Ports;
  Signals = other562.Signals;
  SystemBoundaries = other562.SystemBoundaries;
  AppliedStandards = other562.AppliedStandards;
  RealisedFunctions = other562.RealisedFunctions;
  AsAsset = other562.AsAsset;
  DependabilityRequirements = other562.DependabilityRequirements;
  AssuranceLevel = other562.AssuranceLevel;
  FailureModels = other562.FailureModels;
  SubSystems = other562.SubSystems;
  SafeState = other562.SafeState;
  __isset = other562.__isset;
}
TDDISafetyRelatedSystem& TDDISafetyRelatedSystem::operator=(const TDDISafetyRelatedSystem& other563) {
  Id = other563.Id;
  Name = other563.Name;
  Description = other563.Description;
  KeyValueMaps = other563.KeyValueMaps;
  OverallLifetime = other563.OverallLifetime;
  OverallLifetimeTimeUnit = other563.OverallLifetimeTimeUnit;
  Contexts = other563.Contexts;
  Configurations = other563.Configurations;
  Ports = other563.Ports;
  Signals = other563.Signals;
  SystemBoundaries = other563.SystemBoundaries;
  AppliedStandards = other563.AppliedStandards;
  RealisedFunctions = other563.RealisedFunctions;
  AsAsset = other563.AsAsset;
  DependabilityRequirements = other563.DependabilityRequirements;
  AssuranceLevel = other563.AssuranceLevel;
  FailureModels = other563.FailureModels;
  SubSystems = other563.SubSystems;
  SafeState = other563.SafeState;
  __isset = other563.__isset;
  return *this;
}
void TDDISafetyRelatedSystem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISafetyRelatedSystem(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "OverallLifetime=" << to_string(OverallLifetime);
  out << ", " << "OverallLifetimeTimeUnit=" << to_string(OverallLifetimeTimeUnit);
  out << ", " << "Contexts=" << to_string(Contexts);
  out << ", " << "Configurations=" << to_string(Configurations);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "Signals=" << to_string(Signals);
  out << ", " << "SystemBoundaries=" << to_string(SystemBoundaries);
  out << ", " << "AppliedStandards=" << to_string(AppliedStandards);
  out << ", " << "RealisedFunctions=" << to_string(RealisedFunctions);
  out << ", " << "AsAsset=" << to_string(AsAsset);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ", " << "SafeState=" << to_string(SafeState);
  out << ")";
}


TDDILifecycleCondition::~TDDILifecycleCondition() throw() {
}


void TDDILifecycleCondition::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDILifecycleCondition::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDILifecycleCondition::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDILifecycleCondition::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDILifecycleCondition::__set_Value(const std::string& val) {
  this->Value = val;
}

void TDDILifecycleCondition::__set_Conditions(const std::vector<TDDILifecycleCondition> & val) {
  this->Conditions = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILifecycleCondition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILifecycleCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size564;
            ::apache::thrift::protocol::TType _etype567;
            xfer += iprot->readListBegin(_etype567, _size564);
            this->KeyValueMaps.resize(_size564);
            uint32_t _i568;
            for (_i568 = 0; _i568 < _size564; ++_i568)
            {
              xfer += this->KeyValueMaps[_i568].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Conditions.clear();
            uint32_t _size569;
            ::apache::thrift::protocol::TType _etype572;
            xfer += iprot->readListBegin(_etype572, _size569);
            this->Conditions.resize(_size569);
            uint32_t _i573;
            for (_i573 = 0; _i573 < _size569; ++_i573)
            {
              xfer += this->Conditions[_i573].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Conditions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILifecycleCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILifecycleCondition");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter574;
    for (_iter574 = this->KeyValueMaps.begin(); _iter574 != this->KeyValueMaps.end(); ++_iter574)
    {
      xfer += (*_iter574).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Conditions", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Conditions.size()));
    std::vector<TDDILifecycleCondition> ::const_iterator _iter575;
    for (_iter575 = this->Conditions.begin(); _iter575 != this->Conditions.end(); ++_iter575)
    {
      xfer += (*_iter575).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILifecycleCondition &a, TDDILifecycleCondition &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Value, b.Value);
  swap(a.Conditions, b.Conditions);
  swap(a.__isset, b.__isset);
}

TDDILifecycleCondition::TDDILifecycleCondition(const TDDILifecycleCondition& other576) {
  Id = other576.Id;
  Name = other576.Name;
  Description = other576.Description;
  KeyValueMaps = other576.KeyValueMaps;
  Value = other576.Value;
  Conditions = other576.Conditions;
  __isset = other576.__isset;
}
TDDILifecycleCondition& TDDILifecycleCondition::operator=(const TDDILifecycleCondition& other577) {
  Id = other577.Id;
  Name = other577.Name;
  Description = other577.Description;
  KeyValueMaps = other577.KeyValueMaps;
  Value = other577.Value;
  Conditions = other577.Conditions;
  __isset = other577.__isset;
  return *this;
}
void TDDILifecycleCondition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILifecycleCondition(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Conditions=" << to_string(Conditions);
  out << ")";
}


TDDIPhysicalComponent::~TDDIPhysicalComponent() throw() {
}


void TDDIPhysicalComponent::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIPhysicalComponent::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIPhysicalComponent::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIPhysicalComponent::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIPhysicalComponent::__set_OverallLifetime(const double val) {
  this->OverallLifetime = val;
}

void TDDIPhysicalComponent::__set_OverallLifetimeTimeUnit(const TDDITimeUnit val) {
  this->OverallLifetimeTimeUnit = val;
}

void TDDIPhysicalComponent::__set_Contexts(const std::vector<TDDIContext> & val) {
  this->Contexts = val;
}

void TDDIPhysicalComponent::__set_Configurations(const std::vector<TDDIConfiguration> & val) {
  this->Configurations = val;
}

void TDDIPhysicalComponent::__set_Ports(const std::vector<TDDIPort> & val) {
  this->Ports = val;
}

void TDDIPhysicalComponent::__set_Signals(const std::vector<TDDISignal> & val) {
  this->Signals = val;
}

void TDDIPhysicalComponent::__set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val) {
  this->SystemBoundaries = val;
}

void TDDIPhysicalComponent::__set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val) {
  this->AppliedStandards = val;
}

void TDDIPhysicalComponent::__set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val) {
  this->RealisedFunctions = val;
}

void TDDIPhysicalComponent::__set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val) {
  this->AsAsset = val;
}

void TDDIPhysicalComponent::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->DependabilityRequirements = val;
}

void TDDIPhysicalComponent::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDIPhysicalComponent::__set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->FailureModels = val;
}

void TDDIPhysicalComponent::__set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val) {
  this->SubSystems = val;
}

void TDDIPhysicalComponent::__set_Dimensions(const std::string& val) {
  this->Dimensions = val;
}

void TDDIPhysicalComponent::__set_PricePerUnit(const int32_t val) {
  this->PricePerUnit = val;
}

void TDDIPhysicalComponent::__set_Mass(const double val) {
  this->Mass = val;
}

void TDDIPhysicalComponent::__set_ProtectionCategory(const int32_t val) {
  this->ProtectionCategory = val;
}

void TDDIPhysicalComponent::__set_UsefulLifetime(const double val) {
  this->UsefulLifetime = val;
}

void TDDIPhysicalComponent::__set_UsefulLifetimeTimeUnit(const TDDITimeUnit val) {
  this->UsefulLifetimeTimeUnit = val;
}

void TDDIPhysicalComponent::__set_LogicalComponents(const std::vector<TDDILogicalComponentRef> & val) {
  this->LogicalComponents = val;
}

void TDDIPhysicalComponent::__set_LifecycleConditions(const std::vector<TDDILifecycleCondition> & val) {
  this->LifecycleConditions = val;
}

void TDDIPhysicalComponent::__set_MaintenanceProcedure(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val) {
  this->MaintenanceProcedure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPhysicalComponent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPhysicalComponent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size578;
            ::apache::thrift::protocol::TType _etype581;
            xfer += iprot->readListBegin(_etype581, _size578);
            this->KeyValueMaps.resize(_size578);
            uint32_t _i582;
            for (_i582 = 0; _i582 < _size578; ++_i582)
            {
              xfer += this->KeyValueMaps[_i582].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OverallLifetime);
          this->__isset.OverallLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast583;
          xfer += iprot->readI32(ecast583);
          this->OverallLifetimeTimeUnit = (TDDITimeUnit)ecast583;
          this->__isset.OverallLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Contexts.clear();
            uint32_t _size584;
            ::apache::thrift::protocol::TType _etype587;
            xfer += iprot->readListBegin(_etype587, _size584);
            this->Contexts.resize(_size584);
            uint32_t _i588;
            for (_i588 = 0; _i588 < _size584; ++_i588)
            {
              xfer += this->Contexts[_i588].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Configurations.clear();
            uint32_t _size589;
            ::apache::thrift::protocol::TType _etype592;
            xfer += iprot->readListBegin(_etype592, _size589);
            this->Configurations.resize(_size589);
            uint32_t _i593;
            for (_i593 = 0; _i593 < _size589; ++_i593)
            {
              xfer += this->Configurations[_i593].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Configurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Ports.clear();
            uint32_t _size594;
            ::apache::thrift::protocol::TType _etype597;
            xfer += iprot->readListBegin(_etype597, _size594);
            this->Ports.resize(_size594);
            uint32_t _i598;
            for (_i598 = 0; _i598 < _size594; ++_i598)
            {
              xfer += this->Ports[_i598].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Ports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Signals.clear();
            uint32_t _size599;
            ::apache::thrift::protocol::TType _etype602;
            xfer += iprot->readListBegin(_etype602, _size599);
            this->Signals.resize(_size599);
            uint32_t _i603;
            for (_i603 = 0; _i603 < _size599; ++_i603)
            {
              xfer += this->Signals[_i603].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Signals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SystemBoundaries.clear();
            uint32_t _size604;
            ::apache::thrift::protocol::TType _etype607;
            xfer += iprot->readListBegin(_etype607, _size604);
            this->SystemBoundaries.resize(_size604);
            uint32_t _i608;
            for (_i608 = 0; _i608 < _size604; ++_i608)
            {
              xfer += this->SystemBoundaries[_i608].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SystemBoundaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AppliedStandards.clear();
            uint32_t _size609;
            ::apache::thrift::protocol::TType _etype612;
            xfer += iprot->readListBegin(_etype612, _size609);
            this->AppliedStandards.resize(_size609);
            uint32_t _i613;
            for (_i613 = 0; _i613 < _size609; ++_i613)
            {
              xfer += this->AppliedStandards[_i613].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AppliedStandards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RealisedFunctions.clear();
            uint32_t _size614;
            ::apache::thrift::protocol::TType _etype617;
            xfer += iprot->readListBegin(_etype617, _size614);
            this->RealisedFunctions.resize(_size614);
            uint32_t _i618;
            for (_i618 = 0; _i618 < _size614; ++_i618)
            {
              xfer += this->RealisedFunctions[_i618].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RealisedFunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AsAsset) { 
            this->AsAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset>(new TDDIAbstractAsset);
          }
          xfer += this->AsAsset->read(iprot);
          bool wasSet = false;
          if (this->AsAsset->__isset.UsedAsset) { wasSet = true; }
          if (this->AsAsset->__isset.UsedAssetType) { wasSet = true; }
          if (!wasSet) { this->AsAsset.reset(); }
          this->__isset.AsAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size619;
            ::apache::thrift::protocol::TType _etype622;
            xfer += iprot->readListBegin(_etype622, _size619);
            this->DependabilityRequirements.resize(_size619);
            uint32_t _i623;
            for (_i623 = 0; _i623 < _size619; ++_i623)
            {
              xfer += this->DependabilityRequirements[_i623].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size624;
            ::apache::thrift::protocol::TType _etype627;
            xfer += iprot->readListBegin(_etype627, _size624);
            this->FailureModels.resize(_size624);
            uint32_t _i628;
            for (_i628 = 0; _i628 < _size624; ++_i628)
            {
              xfer += this->FailureModels[_i628].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubSystems.clear();
            uint32_t _size629;
            ::apache::thrift::protocol::TType _etype632;
            xfer += iprot->readListBegin(_etype632, _size629);
            this->SubSystems.resize(_size629);
            uint32_t _i633;
            for (_i633 = 0; _i633 < _size629; ++_i633)
            {
              xfer += this->SubSystems[_i633].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Dimensions);
          this->__isset.Dimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->PricePerUnit);
          this->__isset.PricePerUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Mass);
          this->__isset.Mass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ProtectionCategory);
          this->__isset.ProtectionCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->UsefulLifetime);
          this->__isset.UsefulLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast634;
          xfer += iprot->readI32(ecast634);
          this->UsefulLifetimeTimeUnit = (TDDITimeUnit)ecast634;
          this->__isset.UsefulLifetimeTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->LogicalComponents.clear();
            uint32_t _size635;
            ::apache::thrift::protocol::TType _etype638;
            xfer += iprot->readListBegin(_etype638, _size635);
            this->LogicalComponents.resize(_size635);
            uint32_t _i639;
            for (_i639 = 0; _i639 < _size635; ++_i639)
            {
              xfer += this->LogicalComponents[_i639].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.LogicalComponents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->LifecycleConditions.clear();
            uint32_t _size640;
            ::apache::thrift::protocol::TType _etype643;
            xfer += iprot->readListBegin(_etype643, _size640);
            this->LifecycleConditions.resize(_size640);
            uint32_t _i644;
            for (_i644 = 0; _i644 < _size640; ++_i644)
            {
              xfer += this->LifecycleConditions[_i644].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.LifecycleConditions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MaintenanceProcedure) { 
            this->MaintenanceProcedure = ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure>(new TDDIMaintenanceProcedure);
          }
          xfer += this->MaintenanceProcedure->read(iprot);
          bool wasSet = false;
          if (this->MaintenanceProcedure->__isset.Id) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.Name) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.Description) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.ActivityDescription) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.TechnicalDescription) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.ToolSpecification) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StaffNumber) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StaffSkillLevel) { wasSet = true; }
          if (this->MaintenanceProcedure->__isset.StaffTrainingDescription) { wasSet = true; }
          if (!wasSet) { this->MaintenanceProcedure.reset(); }
          this->__isset.MaintenanceProcedure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPhysicalComponent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPhysicalComponent");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter645;
    for (_iter645 = this->KeyValueMaps.begin(); _iter645 != this->KeyValueMaps.end(); ++_iter645)
    {
      xfer += (*_iter645).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetime", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->OverallLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OverallLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->OverallLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Contexts", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Contexts.size()));
    std::vector<TDDIContext> ::const_iterator _iter646;
    for (_iter646 = this->Contexts.begin(); _iter646 != this->Contexts.end(); ++_iter646)
    {
      xfer += (*_iter646).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Configurations", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Configurations.size()));
    std::vector<TDDIConfiguration> ::const_iterator _iter647;
    for (_iter647 = this->Configurations.begin(); _iter647 != this->Configurations.end(); ++_iter647)
    {
      xfer += (*_iter647).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Ports", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Ports.size()));
    std::vector<TDDIPort> ::const_iterator _iter648;
    for (_iter648 = this->Ports.begin(); _iter648 != this->Ports.end(); ++_iter648)
    {
      xfer += (*_iter648).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Signals", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Signals.size()));
    std::vector<TDDISignal> ::const_iterator _iter649;
    for (_iter649 = this->Signals.begin(); _iter649 != this->Signals.end(); ++_iter649)
    {
      xfer += (*_iter649).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SystemBoundaries", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SystemBoundaries.size()));
    std::vector<TDDISystemBoundary> ::const_iterator _iter650;
    for (_iter650 = this->SystemBoundaries.begin(); _iter650 != this->SystemBoundaries.end(); ++_iter650)
    {
      xfer += (*_iter650).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AppliedStandards", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AppliedStandards.size()));
    std::vector<TDDIAbstractStandardRef> ::const_iterator _iter651;
    for (_iter651 = this->AppliedStandards.begin(); _iter651 != this->AppliedStandards.end(); ++_iter651)
    {
      xfer += (*_iter651).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RealisedFunctions", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RealisedFunctions.size()));
    std::vector<TDDIAbstractFunctionRef> ::const_iterator _iter652;
    for (_iter652 = this->RealisedFunctions.begin(); _iter652 != this->RealisedFunctions.end(); ++_iter652)
    {
      xfer += (*_iter652).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AsAsset", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->AsAsset) {
    xfer += this->AsAsset->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractAsset"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter653;
    for (_iter653 = this->DependabilityRequirements.begin(); _iter653 != this->DependabilityRequirements.end(); ++_iter653)
    {
      xfer += (*_iter653).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 16);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter654;
    for (_iter654 = this->FailureModels.begin(); _iter654 != this->FailureModels.end(); ++_iter654)
    {
      xfer += (*_iter654).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubSystems", ::apache::thrift::protocol::T_LIST, 18);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubSystems.size()));
    std::vector<TDDIAbstractSystemRef> ::const_iterator _iter655;
    for (_iter655 = this->SubSystems.begin(); _iter655 != this->SubSystems.end(); ++_iter655)
    {
      xfer += (*_iter655).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Dimensions", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->Dimensions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PricePerUnit", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->PricePerUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Mass", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->Mass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ProtectionCategory", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->ProtectionCategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsefulLifetime", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->UsefulLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsefulLifetimeTimeUnit", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32((int32_t)this->UsefulLifetimeTimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LogicalComponents", ::apache::thrift::protocol::T_LIST, 25);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->LogicalComponents.size()));
    std::vector<TDDILogicalComponentRef> ::const_iterator _iter656;
    for (_iter656 = this->LogicalComponents.begin(); _iter656 != this->LogicalComponents.end(); ++_iter656)
    {
      xfer += (*_iter656).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LifecycleConditions", ::apache::thrift::protocol::T_LIST, 26);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->LifecycleConditions.size()));
    std::vector<TDDILifecycleCondition> ::const_iterator _iter657;
    for (_iter657 = this->LifecycleConditions.begin(); _iter657 != this->LifecycleConditions.end(); ++_iter657)
    {
      xfer += (*_iter657).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaintenanceProcedure", ::apache::thrift::protocol::T_STRUCT, 27);
  if (this->MaintenanceProcedure) {
    xfer += this->MaintenanceProcedure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMaintenanceProcedure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPhysicalComponent &a, TDDIPhysicalComponent &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.OverallLifetime, b.OverallLifetime);
  swap(a.OverallLifetimeTimeUnit, b.OverallLifetimeTimeUnit);
  swap(a.Contexts, b.Contexts);
  swap(a.Configurations, b.Configurations);
  swap(a.Ports, b.Ports);
  swap(a.Signals, b.Signals);
  swap(a.SystemBoundaries, b.SystemBoundaries);
  swap(a.AppliedStandards, b.AppliedStandards);
  swap(a.RealisedFunctions, b.RealisedFunctions);
  swap(a.AsAsset, b.AsAsset);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.FailureModels, b.FailureModels);
  swap(a.SubSystems, b.SubSystems);
  swap(a.Dimensions, b.Dimensions);
  swap(a.PricePerUnit, b.PricePerUnit);
  swap(a.Mass, b.Mass);
  swap(a.ProtectionCategory, b.ProtectionCategory);
  swap(a.UsefulLifetime, b.UsefulLifetime);
  swap(a.UsefulLifetimeTimeUnit, b.UsefulLifetimeTimeUnit);
  swap(a.LogicalComponents, b.LogicalComponents);
  swap(a.LifecycleConditions, b.LifecycleConditions);
  swap(a.MaintenanceProcedure, b.MaintenanceProcedure);
  swap(a.__isset, b.__isset);
}

TDDIPhysicalComponent::TDDIPhysicalComponent(const TDDIPhysicalComponent& other658) {
  Id = other658.Id;
  Name = other658.Name;
  Description = other658.Description;
  KeyValueMaps = other658.KeyValueMaps;
  OverallLifetime = other658.OverallLifetime;
  OverallLifetimeTimeUnit = other658.OverallLifetimeTimeUnit;
  Contexts = other658.Contexts;
  Configurations = other658.Configurations;
  Ports = other658.Ports;
  Signals = other658.Signals;
  SystemBoundaries = other658.SystemBoundaries;
  AppliedStandards = other658.AppliedStandards;
  RealisedFunctions = other658.RealisedFunctions;
  AsAsset = other658.AsAsset;
  DependabilityRequirements = other658.DependabilityRequirements;
  AssuranceLevel = other658.AssuranceLevel;
  FailureModels = other658.FailureModels;
  SubSystems = other658.SubSystems;
  Dimensions = other658.Dimensions;
  PricePerUnit = other658.PricePerUnit;
  Mass = other658.Mass;
  ProtectionCategory = other658.ProtectionCategory;
  UsefulLifetime = other658.UsefulLifetime;
  UsefulLifetimeTimeUnit = other658.UsefulLifetimeTimeUnit;
  LogicalComponents = other658.LogicalComponents;
  LifecycleConditions = other658.LifecycleConditions;
  MaintenanceProcedure = other658.MaintenanceProcedure;
  __isset = other658.__isset;
}
TDDIPhysicalComponent& TDDIPhysicalComponent::operator=(const TDDIPhysicalComponent& other659) {
  Id = other659.Id;
  Name = other659.Name;
  Description = other659.Description;
  KeyValueMaps = other659.KeyValueMaps;
  OverallLifetime = other659.OverallLifetime;
  OverallLifetimeTimeUnit = other659.OverallLifetimeTimeUnit;
  Contexts = other659.Contexts;
  Configurations = other659.Configurations;
  Ports = other659.Ports;
  Signals = other659.Signals;
  SystemBoundaries = other659.SystemBoundaries;
  AppliedStandards = other659.AppliedStandards;
  RealisedFunctions = other659.RealisedFunctions;
  AsAsset = other659.AsAsset;
  DependabilityRequirements = other659.DependabilityRequirements;
  AssuranceLevel = other659.AssuranceLevel;
  FailureModels = other659.FailureModels;
  SubSystems = other659.SubSystems;
  Dimensions = other659.Dimensions;
  PricePerUnit = other659.PricePerUnit;
  Mass = other659.Mass;
  ProtectionCategory = other659.ProtectionCategory;
  UsefulLifetime = other659.UsefulLifetime;
  UsefulLifetimeTimeUnit = other659.UsefulLifetimeTimeUnit;
  LogicalComponents = other659.LogicalComponents;
  LifecycleConditions = other659.LifecycleConditions;
  MaintenanceProcedure = other659.MaintenanceProcedure;
  __isset = other659.__isset;
  return *this;
}
void TDDIPhysicalComponent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPhysicalComponent(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "OverallLifetime=" << to_string(OverallLifetime);
  out << ", " << "OverallLifetimeTimeUnit=" << to_string(OverallLifetimeTimeUnit);
  out << ", " << "Contexts=" << to_string(Contexts);
  out << ", " << "Configurations=" << to_string(Configurations);
  out << ", " << "Ports=" << to_string(Ports);
  out << ", " << "Signals=" << to_string(Signals);
  out << ", " << "SystemBoundaries=" << to_string(SystemBoundaries);
  out << ", " << "AppliedStandards=" << to_string(AppliedStandards);
  out << ", " << "RealisedFunctions=" << to_string(RealisedFunctions);
  out << ", " << "AsAsset=" << to_string(AsAsset);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ", " << "SubSystems=" << to_string(SubSystems);
  out << ", " << "Dimensions=" << to_string(Dimensions);
  out << ", " << "PricePerUnit=" << to_string(PricePerUnit);
  out << ", " << "Mass=" << to_string(Mass);
  out << ", " << "ProtectionCategory=" << to_string(ProtectionCategory);
  out << ", " << "UsefulLifetime=" << to_string(UsefulLifetime);
  out << ", " << "UsefulLifetimeTimeUnit=" << to_string(UsefulLifetimeTimeUnit);
  out << ", " << "LogicalComponents=" << to_string(LogicalComponents);
  out << ", " << "LifecycleConditions=" << to_string(LifecycleConditions);
  out << ", " << "MaintenanceProcedure=" << to_string(MaintenanceProcedure);
  out << ")";
}


TDDISystemUnion::~TDDISystemUnion() throw() {
}


void TDDISystemUnion::__set_System(::apache::thrift::stdcxx::shared_ptr<TDDISystem> val) {
  this->System = val;
__isset.System = true;
}

void TDDISystemUnion::__set_PhysicalComponent(::apache::thrift::stdcxx::shared_ptr<TDDIPhysicalComponent> val) {
  this->PhysicalComponent = val;
__isset.PhysicalComponent = true;
}

void TDDISystemUnion::__set_LogicalComponent(::apache::thrift::stdcxx::shared_ptr<TDDILogicalComponent> val) {
  this->LogicalComponent = val;
__isset.LogicalComponent = true;
}

void TDDISystemUnion::__set_SafetyRelatedSystem(::apache::thrift::stdcxx::shared_ptr<TDDISafetyRelatedSystem> val) {
  this->SafetyRelatedSystem = val;
__isset.SafetyRelatedSystem = true;
}
std::ostream& operator<<(std::ostream& out, const TDDISystemUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISystemUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->System) { 
            this->System = ::apache::thrift::stdcxx::shared_ptr<TDDISystem>(new TDDISystem);
          }
          xfer += this->System->read(iprot);
          bool wasSet = false;
          if (this->System->__isset.Id) { wasSet = true; }
          if (this->System->__isset.Name) { wasSet = true; }
          if (this->System->__isset.Description) { wasSet = true; }
          if (this->System->__isset.KeyValueMaps) { wasSet = true; }
          if (this->System->__isset.OverallLifetime) { wasSet = true; }
          if (this->System->__isset.OverallLifetimeTimeUnit) { wasSet = true; }
          if (this->System->__isset.Contexts) { wasSet = true; }
          if (this->System->__isset.Configurations) { wasSet = true; }
          if (this->System->__isset.Ports) { wasSet = true; }
          if (this->System->__isset.Signals) { wasSet = true; }
          if (this->System->__isset.SystemBoundaries) { wasSet = true; }
          if (this->System->__isset.AppliedStandards) { wasSet = true; }
          if (this->System->__isset.RealisedFunctions) { wasSet = true; }
          if (this->System->__isset.AsAsset) { wasSet = true; }
          if (this->System->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->System->__isset.AssuranceLevel) { wasSet = true; }
          if (this->System->__isset.FailureModels) { wasSet = true; }
          if (this->System->__isset.SubSystems) { wasSet = true; }
          if (!wasSet) { this->System.reset(); }
          this->__isset.System = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->PhysicalComponent) { 
            this->PhysicalComponent = ::apache::thrift::stdcxx::shared_ptr<TDDIPhysicalComponent>(new TDDIPhysicalComponent);
          }
          xfer += this->PhysicalComponent->read(iprot);
          bool wasSet = false;
          if (this->PhysicalComponent->__isset.Id) { wasSet = true; }
          if (this->PhysicalComponent->__isset.Name) { wasSet = true; }
          if (this->PhysicalComponent->__isset.Description) { wasSet = true; }
          if (this->PhysicalComponent->__isset.KeyValueMaps) { wasSet = true; }
          if (this->PhysicalComponent->__isset.OverallLifetime) { wasSet = true; }
          if (this->PhysicalComponent->__isset.OverallLifetimeTimeUnit) { wasSet = true; }
          if (this->PhysicalComponent->__isset.Contexts) { wasSet = true; }
          if (this->PhysicalComponent->__isset.Configurations) { wasSet = true; }
          if (this->PhysicalComponent->__isset.Ports) { wasSet = true; }
          if (this->PhysicalComponent->__isset.Signals) { wasSet = true; }
          if (this->PhysicalComponent->__isset.SystemBoundaries) { wasSet = true; }
          if (this->PhysicalComponent->__isset.AppliedStandards) { wasSet = true; }
          if (this->PhysicalComponent->__isset.RealisedFunctions) { wasSet = true; }
          if (this->PhysicalComponent->__isset.AsAsset) { wasSet = true; }
          if (this->PhysicalComponent->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->PhysicalComponent->__isset.AssuranceLevel) { wasSet = true; }
          if (this->PhysicalComponent->__isset.FailureModels) { wasSet = true; }
          if (this->PhysicalComponent->__isset.SubSystems) { wasSet = true; }
          if (this->PhysicalComponent->__isset.Dimensions) { wasSet = true; }
          if (this->PhysicalComponent->__isset.PricePerUnit) { wasSet = true; }
          if (this->PhysicalComponent->__isset.Mass) { wasSet = true; }
          if (this->PhysicalComponent->__isset.ProtectionCategory) { wasSet = true; }
          if (this->PhysicalComponent->__isset.UsefulLifetime) { wasSet = true; }
          if (this->PhysicalComponent->__isset.UsefulLifetimeTimeUnit) { wasSet = true; }
          if (this->PhysicalComponent->__isset.LogicalComponents) { wasSet = true; }
          if (this->PhysicalComponent->__isset.LifecycleConditions) { wasSet = true; }
          if (this->PhysicalComponent->__isset.MaintenanceProcedure) { wasSet = true; }
          if (!wasSet) { this->PhysicalComponent.reset(); }
          this->__isset.PhysicalComponent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->LogicalComponent) { 
            this->LogicalComponent = ::apache::thrift::stdcxx::shared_ptr<TDDILogicalComponent>(new TDDILogicalComponent);
          }
          xfer += this->LogicalComponent->read(iprot);
          bool wasSet = false;
          if (this->LogicalComponent->__isset.Id) { wasSet = true; }
          if (this->LogicalComponent->__isset.Name) { wasSet = true; }
          if (this->LogicalComponent->__isset.Description) { wasSet = true; }
          if (this->LogicalComponent->__isset.KeyValueMaps) { wasSet = true; }
          if (this->LogicalComponent->__isset.OverallLifetime) { wasSet = true; }
          if (this->LogicalComponent->__isset.OverallLifetimeTimeUnit) { wasSet = true; }
          if (this->LogicalComponent->__isset.Contexts) { wasSet = true; }
          if (this->LogicalComponent->__isset.Configurations) { wasSet = true; }
          if (this->LogicalComponent->__isset.Ports) { wasSet = true; }
          if (this->LogicalComponent->__isset.Signals) { wasSet = true; }
          if (this->LogicalComponent->__isset.SystemBoundaries) { wasSet = true; }
          if (this->LogicalComponent->__isset.AppliedStandards) { wasSet = true; }
          if (this->LogicalComponent->__isset.RealisedFunctions) { wasSet = true; }
          if (this->LogicalComponent->__isset.AsAsset) { wasSet = true; }
          if (this->LogicalComponent->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->LogicalComponent->__isset.AssuranceLevel) { wasSet = true; }
          if (this->LogicalComponent->__isset.FailureModels) { wasSet = true; }
          if (this->LogicalComponent->__isset.SubSystems) { wasSet = true; }
          if (!wasSet) { this->LogicalComponent.reset(); }
          this->__isset.LogicalComponent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SafetyRelatedSystem) { 
            this->SafetyRelatedSystem = ::apache::thrift::stdcxx::shared_ptr<TDDISafetyRelatedSystem>(new TDDISafetyRelatedSystem);
          }
          xfer += this->SafetyRelatedSystem->read(iprot);
          bool wasSet = false;
          if (this->SafetyRelatedSystem->__isset.Id) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.Name) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.Description) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.OverallLifetime) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.OverallLifetimeTimeUnit) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.Contexts) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.Configurations) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.Ports) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.Signals) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.SystemBoundaries) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.AppliedStandards) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.RealisedFunctions) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.AsAsset) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.DependabilityRequirements) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.AssuranceLevel) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.FailureModels) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.SubSystems) { wasSet = true; }
          if (this->SafetyRelatedSystem->__isset.SafeState) { wasSet = true; }
          if (!wasSet) { this->SafetyRelatedSystem.reset(); }
          this->__isset.SafetyRelatedSystem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISystemUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISystemUnion");

  if (this->__isset.System) {
    xfer += oprot->writeFieldBegin("System", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->System) {
      xfer += this->System->write(oprot); 
    } else {oprot->writeStructBegin("TDDISystem"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.PhysicalComponent) {
    xfer += oprot->writeFieldBegin("PhysicalComponent", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->PhysicalComponent) {
      xfer += this->PhysicalComponent->write(oprot); 
    } else {oprot->writeStructBegin("TDDIPhysicalComponent"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.LogicalComponent) {
    xfer += oprot->writeFieldBegin("LogicalComponent", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->LogicalComponent) {
      xfer += this->LogicalComponent->write(oprot); 
    } else {oprot->writeStructBegin("TDDILogicalComponent"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SafetyRelatedSystem) {
    xfer += oprot->writeFieldBegin("SafetyRelatedSystem", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->SafetyRelatedSystem) {
      xfer += this->SafetyRelatedSystem->write(oprot); 
    } else {oprot->writeStructBegin("TDDISafetyRelatedSystem"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISystemUnion &a, TDDISystemUnion &b) {
  using ::std::swap;
  swap(a.System, b.System);
  swap(a.PhysicalComponent, b.PhysicalComponent);
  swap(a.LogicalComponent, b.LogicalComponent);
  swap(a.SafetyRelatedSystem, b.SafetyRelatedSystem);
  swap(a.__isset, b.__isset);
}

TDDISystemUnion::TDDISystemUnion(const TDDISystemUnion& other660) {
  System = other660.System;
  PhysicalComponent = other660.PhysicalComponent;
  LogicalComponent = other660.LogicalComponent;
  SafetyRelatedSystem = other660.SafetyRelatedSystem;
  __isset = other660.__isset;
}
TDDISystemUnion& TDDISystemUnion::operator=(const TDDISystemUnion& other661) {
  System = other661.System;
  PhysicalComponent = other661.PhysicalComponent;
  LogicalComponent = other661.LogicalComponent;
  SafetyRelatedSystem = other661.SafetyRelatedSystem;
  __isset = other661.__isset;
  return *this;
}
void TDDISystemUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISystemUnion(";
  out << "System="; (__isset.System ? (out << to_string(System)) : (out << "<null>"));
  out << ", " << "PhysicalComponent="; (__isset.PhysicalComponent ? (out << to_string(PhysicalComponent)) : (out << "<null>"));
  out << ", " << "LogicalComponent="; (__isset.LogicalComponent ? (out << to_string(LogicalComponent)) : (out << "<null>"));
  out << ", " << "SafetyRelatedSystem="; (__isset.SafetyRelatedSystem ? (out << to_string(SafetyRelatedSystem)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractSystem::~TDDIAbstractSystem() throw() {
}


void TDDIAbstractSystem::__set_UsedSystem(const TDDISystemUnion& val) {
  this->UsedSystem = val;
}

void TDDIAbstractSystem::__set_UsedSystemType(const TDDISystemUnionType val) {
  this->UsedSystemType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractSystem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractSystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedSystem.read(iprot);
          this->__isset.UsedSystem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast662;
          xfer += iprot->readI32(ecast662);
          this->UsedSystemType = (TDDISystemUnionType)ecast662;
          this->__isset.UsedSystemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractSystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractSystem");

  xfer += oprot->writeFieldBegin("UsedSystem", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedSystem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedSystemType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedSystemType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractSystem &a, TDDIAbstractSystem &b) {
  using ::std::swap;
  swap(a.UsedSystem, b.UsedSystem);
  swap(a.UsedSystemType, b.UsedSystemType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractSystem::TDDIAbstractSystem(const TDDIAbstractSystem& other663) {
  UsedSystem = other663.UsedSystem;
  UsedSystemType = other663.UsedSystemType;
  __isset = other663.__isset;
}
TDDIAbstractSystem& TDDIAbstractSystem::operator=(const TDDIAbstractSystem& other664) {
  UsedSystem = other664.UsedSystem;
  UsedSystemType = other664.UsedSystemType;
  __isset = other664.__isset;
  return *this;
}
void TDDIAbstractSystem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractSystem(";
  out << "UsedSystem=" << to_string(UsedSystem);
  out << ", " << "UsedSystemType=" << to_string(UsedSystemType);
  out << ")";
}


TDDIDesignPackage::~TDDIDesignPackage() throw() {
}


void TDDIDesignPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDesignPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDesignPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDesignPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIDesignPackage::__set_Systems(const std::vector<TDDIAbstractSystem> & val) {
  this->Systems = val;
}

void TDDIDesignPackage::__set_Functions(const std::vector<TDDIAbstractFunction> & val) {
  this->Functions = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDesignPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDesignPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size665;
            ::apache::thrift::protocol::TType _etype668;
            xfer += iprot->readListBegin(_etype668, _size665);
            this->KeyValueMaps.resize(_size665);
            uint32_t _i669;
            for (_i669 = 0; _i669 < _size665; ++_i669)
            {
              xfer += this->KeyValueMaps[_i669].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Systems.clear();
            uint32_t _size670;
            ::apache::thrift::protocol::TType _etype673;
            xfer += iprot->readListBegin(_etype673, _size670);
            this->Systems.resize(_size670);
            uint32_t _i674;
            for (_i674 = 0; _i674 < _size670; ++_i674)
            {
              xfer += this->Systems[_i674].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Systems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Functions.clear();
            uint32_t _size675;
            ::apache::thrift::protocol::TType _etype678;
            xfer += iprot->readListBegin(_etype678, _size675);
            this->Functions.resize(_size675);
            uint32_t _i679;
            for (_i679 = 0; _i679 < _size675; ++_i679)
            {
              xfer += this->Functions[_i679].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Functions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDesignPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDesignPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter680;
    for (_iter680 = this->KeyValueMaps.begin(); _iter680 != this->KeyValueMaps.end(); ++_iter680)
    {
      xfer += (*_iter680).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Systems", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Systems.size()));
    std::vector<TDDIAbstractSystem> ::const_iterator _iter681;
    for (_iter681 = this->Systems.begin(); _iter681 != this->Systems.end(); ++_iter681)
    {
      xfer += (*_iter681).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Functions", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Functions.size()));
    std::vector<TDDIAbstractFunction> ::const_iterator _iter682;
    for (_iter682 = this->Functions.begin(); _iter682 != this->Functions.end(); ++_iter682)
    {
      xfer += (*_iter682).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDesignPackage &a, TDDIDesignPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Systems, b.Systems);
  swap(a.Functions, b.Functions);
  swap(a.__isset, b.__isset);
}

TDDIDesignPackage::TDDIDesignPackage(const TDDIDesignPackage& other683) {
  Id = other683.Id;
  Name = other683.Name;
  Description = other683.Description;
  KeyValueMaps = other683.KeyValueMaps;
  Systems = other683.Systems;
  Functions = other683.Functions;
  __isset = other683.__isset;
}
TDDIDesignPackage& TDDIDesignPackage::operator=(const TDDIDesignPackage& other684) {
  Id = other684.Id;
  Name = other684.Name;
  Description = other684.Description;
  KeyValueMaps = other684.KeyValueMaps;
  Systems = other684.Systems;
  Functions = other684.Functions;
  __isset = other684.__isset;
  return *this;
}
void TDDIDesignPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDesignPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Systems=" << to_string(Systems);
  out << ", " << "Functions=" << to_string(Functions);
  out << ")";
}


TDDIDomainPackage::~TDDIDomainPackage() throw() {
}


void TDDIDomainPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDomainPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDomainPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDomainPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIDomainPackage::__set_Standards(const std::vector<TDDIAbstractStandard> & val) {
  this->Standards = val;
}

void TDDIDomainPackage::__set_AssuranceLevels(const std::vector<TDDIAssuranceLevel> & val) {
  this->AssuranceLevels = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDomainPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDomainPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size685;
            ::apache::thrift::protocol::TType _etype688;
            xfer += iprot->readListBegin(_etype688, _size685);
            this->KeyValueMaps.resize(_size685);
            uint32_t _i689;
            for (_i689 = 0; _i689 < _size685; ++_i689)
            {
              xfer += this->KeyValueMaps[_i689].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Standards.clear();
            uint32_t _size690;
            ::apache::thrift::protocol::TType _etype693;
            xfer += iprot->readListBegin(_etype693, _size690);
            this->Standards.resize(_size690);
            uint32_t _i694;
            for (_i694 = 0; _i694 < _size690; ++_i694)
            {
              xfer += this->Standards[_i694].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Standards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceLevels.clear();
            uint32_t _size695;
            ::apache::thrift::protocol::TType _etype698;
            xfer += iprot->readListBegin(_etype698, _size695);
            this->AssuranceLevels.resize(_size695);
            uint32_t _i699;
            for (_i699 = 0; _i699 < _size695; ++_i699)
            {
              xfer += this->AssuranceLevels[_i699].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceLevels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDomainPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDomainPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter700;
    for (_iter700 = this->KeyValueMaps.begin(); _iter700 != this->KeyValueMaps.end(); ++_iter700)
    {
      xfer += (*_iter700).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Standards", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Standards.size()));
    std::vector<TDDIAbstractStandard> ::const_iterator _iter701;
    for (_iter701 = this->Standards.begin(); _iter701 != this->Standards.end(); ++_iter701)
    {
      xfer += (*_iter701).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevels", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceLevels.size()));
    std::vector<TDDIAssuranceLevel> ::const_iterator _iter702;
    for (_iter702 = this->AssuranceLevels.begin(); _iter702 != this->AssuranceLevels.end(); ++_iter702)
    {
      xfer += (*_iter702).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDomainPackage &a, TDDIDomainPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Standards, b.Standards);
  swap(a.AssuranceLevels, b.AssuranceLevels);
  swap(a.__isset, b.__isset);
}

TDDIDomainPackage::TDDIDomainPackage(const TDDIDomainPackage& other703) {
  Id = other703.Id;
  Name = other703.Name;
  Description = other703.Description;
  KeyValueMaps = other703.KeyValueMaps;
  Standards = other703.Standards;
  AssuranceLevels = other703.AssuranceLevels;
  __isset = other703.__isset;
}
TDDIDomainPackage& TDDIDomainPackage::operator=(const TDDIDomainPackage& other704) {
  Id = other704.Id;
  Name = other704.Name;
  Description = other704.Description;
  KeyValueMaps = other704.KeyValueMaps;
  Standards = other704.Standards;
  AssuranceLevels = other704.AssuranceLevels;
  __isset = other704.__isset;
  return *this;
}
void TDDIDomainPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDomainPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Standards=" << to_string(Standards);
  out << ", " << "AssuranceLevels=" << to_string(AssuranceLevels);
  out << ")";
}


TDDIAssuranceLevel::~TDDIAssuranceLevel() throw() {
}


void TDDIAssuranceLevel::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIAssuranceLevel::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIAssuranceLevel::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIAssuranceLevel::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceLevel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceLevel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size705;
            ::apache::thrift::protocol::TType _etype708;
            xfer += iprot->readListBegin(_etype708, _size705);
            this->KeyValueMaps.resize(_size705);
            uint32_t _i709;
            for (_i709 = 0; _i709 < _size705; ++_i709)
            {
              xfer += this->KeyValueMaps[_i709].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceLevel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceLevel");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter710;
    for (_iter710 = this->KeyValueMaps.begin(); _iter710 != this->KeyValueMaps.end(); ++_iter710)
    {
      xfer += (*_iter710).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceLevel &a, TDDIAssuranceLevel &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceLevel::TDDIAssuranceLevel(const TDDIAssuranceLevel& other711) {
  Id = other711.Id;
  Name = other711.Name;
  Description = other711.Description;
  KeyValueMaps = other711.KeyValueMaps;
  __isset = other711.__isset;
}
TDDIAssuranceLevel& TDDIAssuranceLevel::operator=(const TDDIAssuranceLevel& other712) {
  Id = other712.Id;
  Name = other712.Name;
  Description = other712.Description;
  KeyValueMaps = other712.KeyValueMaps;
  __isset = other712.__isset;
  return *this;
}
void TDDIAssuranceLevel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceLevel(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ")";
}


TDDIStandard::~TDDIStandard() throw() {
}


void TDDIStandard::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIStandard::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIStandard::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIStandard::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIStandard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIStandard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size713;
            ::apache::thrift::protocol::TType _etype716;
            xfer += iprot->readListBegin(_etype716, _size713);
            this->KeyValueMaps.resize(_size713);
            uint32_t _i717;
            for (_i717 = 0; _i717 < _size713; ++_i717)
            {
              xfer += this->KeyValueMaps[_i717].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIStandard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIStandard");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter718;
    for (_iter718 = this->KeyValueMaps.begin(); _iter718 != this->KeyValueMaps.end(); ++_iter718)
    {
      xfer += (*_iter718).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIStandard &a, TDDIStandard &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.__isset, b.__isset);
}

TDDIStandard::TDDIStandard(const TDDIStandard& other719) {
  Id = other719.Id;
  Name = other719.Name;
  Description = other719.Description;
  KeyValueMaps = other719.KeyValueMaps;
  __isset = other719.__isset;
}
TDDIStandard& TDDIStandard::operator=(const TDDIStandard& other720) {
  Id = other720.Id;
  Name = other720.Name;
  Description = other720.Description;
  KeyValueMaps = other720.KeyValueMaps;
  __isset = other720.__isset;
  return *this;
}
void TDDIStandard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIStandard(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ")";
}


TDDISafetyStandard::~TDDISafetyStandard() throw() {
}


void TDDISafetyStandard::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISafetyStandard::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISafetyStandard::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISafetyStandard::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISafetyStandard::__set_AssuranceLevels(const std::vector<TDDIAssuranceLevelRef> & val) {
  this->AssuranceLevels = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISafetyStandard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISafetyStandard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size721;
            ::apache::thrift::protocol::TType _etype724;
            xfer += iprot->readListBegin(_etype724, _size721);
            this->KeyValueMaps.resize(_size721);
            uint32_t _i725;
            for (_i725 = 0; _i725 < _size721; ++_i725)
            {
              xfer += this->KeyValueMaps[_i725].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceLevels.clear();
            uint32_t _size726;
            ::apache::thrift::protocol::TType _etype729;
            xfer += iprot->readListBegin(_etype729, _size726);
            this->AssuranceLevels.resize(_size726);
            uint32_t _i730;
            for (_i730 = 0; _i730 < _size726; ++_i730)
            {
              xfer += this->AssuranceLevels[_i730].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceLevels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISafetyStandard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISafetyStandard");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter731;
    for (_iter731 = this->KeyValueMaps.begin(); _iter731 != this->KeyValueMaps.end(); ++_iter731)
    {
      xfer += (*_iter731).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevels", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceLevels.size()));
    std::vector<TDDIAssuranceLevelRef> ::const_iterator _iter732;
    for (_iter732 = this->AssuranceLevels.begin(); _iter732 != this->AssuranceLevels.end(); ++_iter732)
    {
      xfer += (*_iter732).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISafetyStandard &a, TDDISafetyStandard &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.AssuranceLevels, b.AssuranceLevels);
  swap(a.__isset, b.__isset);
}

TDDISafetyStandard::TDDISafetyStandard(const TDDISafetyStandard& other733) {
  Id = other733.Id;
  Name = other733.Name;
  Description = other733.Description;
  KeyValueMaps = other733.KeyValueMaps;
  AssuranceLevels = other733.AssuranceLevels;
  __isset = other733.__isset;
}
TDDISafetyStandard& TDDISafetyStandard::operator=(const TDDISafetyStandard& other734) {
  Id = other734.Id;
  Name = other734.Name;
  Description = other734.Description;
  KeyValueMaps = other734.KeyValueMaps;
  AssuranceLevels = other734.AssuranceLevels;
  __isset = other734.__isset;
  return *this;
}
void TDDISafetyStandard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISafetyStandard(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "AssuranceLevels=" << to_string(AssuranceLevels);
  out << ")";
}


TDDIStandardUnion::~TDDIStandardUnion() throw() {
}


void TDDIStandardUnion::__set_Standard(::apache::thrift::stdcxx::shared_ptr<TDDIStandard> val) {
  this->Standard = val;
__isset.Standard = true;
}

void TDDIStandardUnion::__set_SafetyStandard(::apache::thrift::stdcxx::shared_ptr<TDDISafetyStandard> val) {
  this->SafetyStandard = val;
__isset.SafetyStandard = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIStandardUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIStandardUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Standard) { 
            this->Standard = ::apache::thrift::stdcxx::shared_ptr<TDDIStandard>(new TDDIStandard);
          }
          xfer += this->Standard->read(iprot);
          bool wasSet = false;
          if (this->Standard->__isset.Id) { wasSet = true; }
          if (this->Standard->__isset.Name) { wasSet = true; }
          if (this->Standard->__isset.Description) { wasSet = true; }
          if (this->Standard->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->Standard.reset(); }
          this->__isset.Standard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SafetyStandard) { 
            this->SafetyStandard = ::apache::thrift::stdcxx::shared_ptr<TDDISafetyStandard>(new TDDISafetyStandard);
          }
          xfer += this->SafetyStandard->read(iprot);
          bool wasSet = false;
          if (this->SafetyStandard->__isset.Id) { wasSet = true; }
          if (this->SafetyStandard->__isset.Name) { wasSet = true; }
          if (this->SafetyStandard->__isset.Description) { wasSet = true; }
          if (this->SafetyStandard->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SafetyStandard->__isset.AssuranceLevels) { wasSet = true; }
          if (!wasSet) { this->SafetyStandard.reset(); }
          this->__isset.SafetyStandard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIStandardUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIStandardUnion");

  if (this->__isset.Standard) {
    xfer += oprot->writeFieldBegin("Standard", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Standard) {
      xfer += this->Standard->write(oprot); 
    } else {oprot->writeStructBegin("TDDIStandard"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SafetyStandard) {
    xfer += oprot->writeFieldBegin("SafetyStandard", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->SafetyStandard) {
      xfer += this->SafetyStandard->write(oprot); 
    } else {oprot->writeStructBegin("TDDISafetyStandard"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIStandardUnion &a, TDDIStandardUnion &b) {
  using ::std::swap;
  swap(a.Standard, b.Standard);
  swap(a.SafetyStandard, b.SafetyStandard);
  swap(a.__isset, b.__isset);
}

TDDIStandardUnion::TDDIStandardUnion(const TDDIStandardUnion& other735) {
  Standard = other735.Standard;
  SafetyStandard = other735.SafetyStandard;
  __isset = other735.__isset;
}
TDDIStandardUnion& TDDIStandardUnion::operator=(const TDDIStandardUnion& other736) {
  Standard = other736.Standard;
  SafetyStandard = other736.SafetyStandard;
  __isset = other736.__isset;
  return *this;
}
void TDDIStandardUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIStandardUnion(";
  out << "Standard="; (__isset.Standard ? (out << to_string(Standard)) : (out << "<null>"));
  out << ", " << "SafetyStandard="; (__isset.SafetyStandard ? (out << to_string(SafetyStandard)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractStandard::~TDDIAbstractStandard() throw() {
}


void TDDIAbstractStandard::__set_UsedStandard(const TDDIStandardUnion& val) {
  this->UsedStandard = val;
}

void TDDIAbstractStandard::__set_UsedStandardType(const TDDIStandardUnionType val) {
  this->UsedStandardType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractStandard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractStandard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedStandard.read(iprot);
          this->__isset.UsedStandard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast737;
          xfer += iprot->readI32(ecast737);
          this->UsedStandardType = (TDDIStandardUnionType)ecast737;
          this->__isset.UsedStandardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractStandard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractStandard");

  xfer += oprot->writeFieldBegin("UsedStandard", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedStandard.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedStandardType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedStandardType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractStandard &a, TDDIAbstractStandard &b) {
  using ::std::swap;
  swap(a.UsedStandard, b.UsedStandard);
  swap(a.UsedStandardType, b.UsedStandardType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractStandard::TDDIAbstractStandard(const TDDIAbstractStandard& other738) {
  UsedStandard = other738.UsedStandard;
  UsedStandardType = other738.UsedStandardType;
  __isset = other738.__isset;
}
TDDIAbstractStandard& TDDIAbstractStandard::operator=(const TDDIAbstractStandard& other739) {
  UsedStandard = other739.UsedStandard;
  UsedStandardType = other739.UsedStandardType;
  __isset = other739.__isset;
  return *this;
}
void TDDIAbstractStandard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractStandard(";
  out << "UsedStandard=" << to_string(UsedStandard);
  out << ", " << "UsedStandardType=" << to_string(UsedStandardType);
  out << ")";
}


TDDIProbDistParam::~TDDIProbDistParam() throw() {
}


void TDDIProbDistParam::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIProbDistParam::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIProbDistParam::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIProbDistParam::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIProbDistParam::__set_Value(const std::string& val) {
  this->Value = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIProbDistParam& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIProbDistParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size740;
            ::apache::thrift::protocol::TType _etype743;
            xfer += iprot->readListBegin(_etype743, _size740);
            this->KeyValueMaps.resize(_size740);
            uint32_t _i744;
            for (_i744 = 0; _i744 < _size740; ++_i744)
            {
              xfer += this->KeyValueMaps[_i744].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIProbDistParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIProbDistParam");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter745;
    for (_iter745 = this->KeyValueMaps.begin(); _iter745 != this->KeyValueMaps.end(); ++_iter745)
    {
      xfer += (*_iter745).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIProbDistParam &a, TDDIProbDistParam &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Value, b.Value);
  swap(a.__isset, b.__isset);
}

TDDIProbDistParam::TDDIProbDistParam(const TDDIProbDistParam& other746) {
  Id = other746.Id;
  Name = other746.Name;
  Description = other746.Description;
  KeyValueMaps = other746.KeyValueMaps;
  Value = other746.Value;
  __isset = other746.__isset;
}
TDDIProbDistParam& TDDIProbDistParam::operator=(const TDDIProbDistParam& other747) {
  Id = other747.Id;
  Name = other747.Name;
  Description = other747.Description;
  KeyValueMaps = other747.KeyValueMaps;
  Value = other747.Value;
  __isset = other747.__isset;
  return *this;
}
void TDDIProbDistParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIProbDistParam(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Value=" << to_string(Value);
  out << ")";
}


TDDIProbDist::~TDDIProbDist() throw() {
}


void TDDIProbDist::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIProbDist::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIProbDist::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIProbDist::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIProbDist::__set_Type(const std::string& val) {
  this->Type = val;
}

void TDDIProbDist::__set_Parameters(const std::vector<TDDIProbDistParam> & val) {
  this->Parameters = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIProbDist& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIProbDist::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size748;
            ::apache::thrift::protocol::TType _etype751;
            xfer += iprot->readListBegin(_etype751, _size748);
            this->KeyValueMaps.resize(_size748);
            uint32_t _i752;
            for (_i752 = 0; _i752 < _size748; ++_i752)
            {
              xfer += this->KeyValueMaps[_i752].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Type);
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Parameters.clear();
            uint32_t _size753;
            ::apache::thrift::protocol::TType _etype756;
            xfer += iprot->readListBegin(_etype756, _size753);
            this->Parameters.resize(_size753);
            uint32_t _i757;
            for (_i757 = 0; _i757 < _size753; ++_i757)
            {
              xfer += this->Parameters[_i757].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIProbDist::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIProbDist");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter758;
    for (_iter758 = this->KeyValueMaps.begin(); _iter758 != this->KeyValueMaps.end(); ++_iter758)
    {
      xfer += (*_iter758).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Parameters", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Parameters.size()));
    std::vector<TDDIProbDistParam> ::const_iterator _iter759;
    for (_iter759 = this->Parameters.begin(); _iter759 != this->Parameters.end(); ++_iter759)
    {
      xfer += (*_iter759).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIProbDist &a, TDDIProbDist &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Type, b.Type);
  swap(a.Parameters, b.Parameters);
  swap(a.__isset, b.__isset);
}

TDDIProbDist::TDDIProbDist(const TDDIProbDist& other760) {
  Id = other760.Id;
  Name = other760.Name;
  Description = other760.Description;
  KeyValueMaps = other760.KeyValueMaps;
  Type = other760.Type;
  Parameters = other760.Parameters;
  __isset = other760.__isset;
}
TDDIProbDist& TDDIProbDist::operator=(const TDDIProbDist& other761) {
  Id = other761.Id;
  Name = other761.Name;
  Description = other761.Description;
  KeyValueMaps = other761.KeyValueMaps;
  Type = other761.Type;
  Parameters = other761.Parameters;
  __isset = other761.__isset;
  return *this;
}
void TDDIProbDist::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIProbDist(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "Parameters=" << to_string(Parameters);
  out << ")";
}


TDDIFailure::~TDDIFailure() throw() {
}


void TDDIFailure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFailure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFailure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFailure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFailure::__set_OriginType(const TDDIFailureOriginType val) {
  this->OriginType = val;
}

void TDDIFailure::__set_FailureClass(const std::string& val) {
  this->FailureClass = val;
}

void TDDIFailure::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDIFailure::__set_IsCCF(const bool val) {
  this->IsCCF = val;
}

void TDDIFailure::__set_CCFFailures(const std::vector<TDDIAbstractFailureRef> & val) {
  this->CCFFailures = val;
}

void TDDIFailure::__set_FailureProbDistribution(const TDDIProbDist& val) {
  this->FailureProbDistribution = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size762;
            ::apache::thrift::protocol::TType _etype765;
            xfer += iprot->readListBegin(_etype765, _size762);
            this->KeyValueMaps.resize(_size762);
            uint32_t _i766;
            for (_i766 = 0; _i766 < _size762; ++_i766)
            {
              xfer += this->KeyValueMaps[_i766].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast767;
          xfer += iprot->readI32(ecast767);
          this->OriginType = (TDDIFailureOriginType)ecast767;
          this->__isset.OriginType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FailureClass);
          this->__isset.FailureClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCCF);
          this->__isset.IsCCF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->CCFFailures.clear();
            uint32_t _size768;
            ::apache::thrift::protocol::TType _etype771;
            xfer += iprot->readListBegin(_etype771, _size768);
            this->CCFFailures.resize(_size768);
            uint32_t _i772;
            for (_i772 = 0; _i772 < _size768; ++_i772)
            {
              xfer += this->CCFFailures[_i772].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.CCFFailures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureProbDistribution.read(iprot);
          this->__isset.FailureProbDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter773;
    for (_iter773 = this->KeyValueMaps.begin(); _iter773 != this->KeyValueMaps.end(); ++_iter773)
    {
      xfer += (*_iter773).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OriginType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->OriginType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureClass", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->FailureClass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCCF", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->IsCCF);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CCFFailures", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->CCFFailures.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter774;
    for (_iter774 = this->CCFFailures.begin(); _iter774 != this->CCFFailures.end(); ++_iter774)
    {
      xfer += (*_iter774).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureProbDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->FailureProbDistribution.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailure &a, TDDIFailure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.OriginType, b.OriginType);
  swap(a.FailureClass, b.FailureClass);
  swap(a.FailureRate, b.FailureRate);
  swap(a.IsCCF, b.IsCCF);
  swap(a.CCFFailures, b.CCFFailures);
  swap(a.FailureProbDistribution, b.FailureProbDistribution);
  swap(a.__isset, b.__isset);
}

TDDIFailure::TDDIFailure(const TDDIFailure& other775) {
  Id = other775.Id;
  Name = other775.Name;
  Description = other775.Description;
  KeyValueMaps = other775.KeyValueMaps;
  OriginType = other775.OriginType;
  FailureClass = other775.FailureClass;
  FailureRate = other775.FailureRate;
  IsCCF = other775.IsCCF;
  CCFFailures = other775.CCFFailures;
  FailureProbDistribution = other775.FailureProbDistribution;
  __isset = other775.__isset;
}
TDDIFailure& TDDIFailure::operator=(const TDDIFailure& other776) {
  Id = other776.Id;
  Name = other776.Name;
  Description = other776.Description;
  KeyValueMaps = other776.KeyValueMaps;
  OriginType = other776.OriginType;
  FailureClass = other776.FailureClass;
  FailureRate = other776.FailureRate;
  IsCCF = other776.IsCCF;
  CCFFailures = other776.CCFFailures;
  FailureProbDistribution = other776.FailureProbDistribution;
  __isset = other776.__isset;
  return *this;
}
void TDDIFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "OriginType=" << to_string(OriginType);
  out << ", " << "FailureClass=" << to_string(FailureClass);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "IsCCF=" << to_string(IsCCF);
  out << ", " << "CCFFailures=" << to_string(CCFFailures);
  out << ", " << "FailureProbDistribution=" << to_string(FailureProbDistribution);
  out << ")";
}


TDDISecurityViolation::~TDDISecurityViolation() throw() {
}


void TDDISecurityViolation::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISecurityViolation::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISecurityViolation::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISecurityViolation::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISecurityViolation::__set_OriginType(const TDDIFailureOriginType val) {
  this->OriginType = val;
}

void TDDISecurityViolation::__set_FailureClass(const std::string& val) {
  this->FailureClass = val;
}

void TDDISecurityViolation::__set_FailureRate(const double val) {
  this->FailureRate = val;
}

void TDDISecurityViolation::__set_IsCCF(const bool val) {
  this->IsCCF = val;
}

void TDDISecurityViolation::__set_CCFFailures(const std::vector<TDDIAbstractFailureRef> & val) {
  this->CCFFailures = val;
}

void TDDISecurityViolation::__set_FailureProbDistribution(const TDDIProbDist& val) {
  this->FailureProbDistribution = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISecurityViolation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISecurityViolation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size777;
            ::apache::thrift::protocol::TType _etype780;
            xfer += iprot->readListBegin(_etype780, _size777);
            this->KeyValueMaps.resize(_size777);
            uint32_t _i781;
            for (_i781 = 0; _i781 < _size777; ++_i781)
            {
              xfer += this->KeyValueMaps[_i781].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast782;
          xfer += iprot->readI32(ecast782);
          this->OriginType = (TDDIFailureOriginType)ecast782;
          this->__isset.OriginType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FailureClass);
          this->__isset.FailureClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureRate);
          this->__isset.FailureRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCCF);
          this->__isset.IsCCF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->CCFFailures.clear();
            uint32_t _size783;
            ::apache::thrift::protocol::TType _etype786;
            xfer += iprot->readListBegin(_etype786, _size783);
            this->CCFFailures.resize(_size783);
            uint32_t _i787;
            for (_i787 = 0; _i787 < _size783; ++_i787)
            {
              xfer += this->CCFFailures[_i787].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.CCFFailures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->FailureProbDistribution.read(iprot);
          this->__isset.FailureProbDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISecurityViolation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISecurityViolation");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter788;
    for (_iter788 = this->KeyValueMaps.begin(); _iter788 != this->KeyValueMaps.end(); ++_iter788)
    {
      xfer += (*_iter788).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OriginType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->OriginType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureClass", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->FailureClass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureRate", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->FailureRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCCF", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->IsCCF);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CCFFailures", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->CCFFailures.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter789;
    for (_iter789 = this->CCFFailures.begin(); _iter789 != this->CCFFailures.end(); ++_iter789)
    {
      xfer += (*_iter789).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureProbDistribution", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->FailureProbDistribution.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISecurityViolation &a, TDDISecurityViolation &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.OriginType, b.OriginType);
  swap(a.FailureClass, b.FailureClass);
  swap(a.FailureRate, b.FailureRate);
  swap(a.IsCCF, b.IsCCF);
  swap(a.CCFFailures, b.CCFFailures);
  swap(a.FailureProbDistribution, b.FailureProbDistribution);
  swap(a.__isset, b.__isset);
}

TDDISecurityViolation::TDDISecurityViolation(const TDDISecurityViolation& other790) {
  Id = other790.Id;
  Name = other790.Name;
  Description = other790.Description;
  KeyValueMaps = other790.KeyValueMaps;
  OriginType = other790.OriginType;
  FailureClass = other790.FailureClass;
  FailureRate = other790.FailureRate;
  IsCCF = other790.IsCCF;
  CCFFailures = other790.CCFFailures;
  FailureProbDistribution = other790.FailureProbDistribution;
  __isset = other790.__isset;
}
TDDISecurityViolation& TDDISecurityViolation::operator=(const TDDISecurityViolation& other791) {
  Id = other791.Id;
  Name = other791.Name;
  Description = other791.Description;
  KeyValueMaps = other791.KeyValueMaps;
  OriginType = other791.OriginType;
  FailureClass = other791.FailureClass;
  FailureRate = other791.FailureRate;
  IsCCF = other791.IsCCF;
  CCFFailures = other791.CCFFailures;
  FailureProbDistribution = other791.FailureProbDistribution;
  __isset = other791.__isset;
  return *this;
}
void TDDISecurityViolation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISecurityViolation(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "OriginType=" << to_string(OriginType);
  out << ", " << "FailureClass=" << to_string(FailureClass);
  out << ", " << "FailureRate=" << to_string(FailureRate);
  out << ", " << "IsCCF=" << to_string(IsCCF);
  out << ", " << "CCFFailures=" << to_string(CCFFailures);
  out << ", " << "FailureProbDistribution=" << to_string(FailureProbDistribution);
  out << ")";
}


TDDIFailureUnion::~TDDIFailureUnion() throw() {
}


void TDDIFailureUnion::__set_Failure(::apache::thrift::stdcxx::shared_ptr<TDDIFailure> val) {
  this->Failure = val;
__isset.Failure = true;
}

void TDDIFailureUnion::__set_SecurityViolation(::apache::thrift::stdcxx::shared_ptr<TDDISecurityViolation> val) {
  this->SecurityViolation = val;
__isset.SecurityViolation = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Failure) { 
            this->Failure = ::apache::thrift::stdcxx::shared_ptr<TDDIFailure>(new TDDIFailure);
          }
          xfer += this->Failure->read(iprot);
          bool wasSet = false;
          if (this->Failure->__isset.Id) { wasSet = true; }
          if (this->Failure->__isset.Name) { wasSet = true; }
          if (this->Failure->__isset.Description) { wasSet = true; }
          if (this->Failure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Failure->__isset.OriginType) { wasSet = true; }
          if (this->Failure->__isset.FailureClass) { wasSet = true; }
          if (this->Failure->__isset.FailureRate) { wasSet = true; }
          if (this->Failure->__isset.IsCCF) { wasSet = true; }
          if (this->Failure->__isset.CCFFailures) { wasSet = true; }
          if (this->Failure->__isset.FailureProbDistribution) { wasSet = true; }
          if (!wasSet) { this->Failure.reset(); }
          this->__isset.Failure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SecurityViolation) { 
            this->SecurityViolation = ::apache::thrift::stdcxx::shared_ptr<TDDISecurityViolation>(new TDDISecurityViolation);
          }
          xfer += this->SecurityViolation->read(iprot);
          bool wasSet = false;
          if (this->SecurityViolation->__isset.Id) { wasSet = true; }
          if (this->SecurityViolation->__isset.Name) { wasSet = true; }
          if (this->SecurityViolation->__isset.Description) { wasSet = true; }
          if (this->SecurityViolation->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SecurityViolation->__isset.OriginType) { wasSet = true; }
          if (this->SecurityViolation->__isset.FailureClass) { wasSet = true; }
          if (this->SecurityViolation->__isset.FailureRate) { wasSet = true; }
          if (this->SecurityViolation->__isset.IsCCF) { wasSet = true; }
          if (this->SecurityViolation->__isset.CCFFailures) { wasSet = true; }
          if (this->SecurityViolation->__isset.FailureProbDistribution) { wasSet = true; }
          if (!wasSet) { this->SecurityViolation.reset(); }
          this->__isset.SecurityViolation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureUnion");

  if (this->__isset.Failure) {
    xfer += oprot->writeFieldBegin("Failure", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Failure) {
      xfer += this->Failure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFailure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SecurityViolation) {
    xfer += oprot->writeFieldBegin("SecurityViolation", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->SecurityViolation) {
      xfer += this->SecurityViolation->write(oprot); 
    } else {oprot->writeStructBegin("TDDISecurityViolation"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureUnion &a, TDDIFailureUnion &b) {
  using ::std::swap;
  swap(a.Failure, b.Failure);
  swap(a.SecurityViolation, b.SecurityViolation);
  swap(a.__isset, b.__isset);
}

TDDIFailureUnion::TDDIFailureUnion(const TDDIFailureUnion& other792) {
  Failure = other792.Failure;
  SecurityViolation = other792.SecurityViolation;
  __isset = other792.__isset;
}
TDDIFailureUnion& TDDIFailureUnion::operator=(const TDDIFailureUnion& other793) {
  Failure = other793.Failure;
  SecurityViolation = other793.SecurityViolation;
  __isset = other793.__isset;
  return *this;
}
void TDDIFailureUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureUnion(";
  out << "Failure="; (__isset.Failure ? (out << to_string(Failure)) : (out << "<null>"));
  out << ", " << "SecurityViolation="; (__isset.SecurityViolation ? (out << to_string(SecurityViolation)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFailure::~TDDIAbstractFailure() throw() {
}


void TDDIAbstractFailure::__set_UsedFailure(const TDDIFailureUnion& val) {
  this->UsedFailure = val;
}

void TDDIAbstractFailure::__set_UsedFailureType(const TDDIFailureUnionType val) {
  this->UsedFailureType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFailure.read(iprot);
          this->__isset.UsedFailure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast794;
          xfer += iprot->readI32(ecast794);
          this->UsedFailureType = (TDDIFailureUnionType)ecast794;
          this->__isset.UsedFailureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailure");

  xfer += oprot->writeFieldBegin("UsedFailure", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFailure.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFailureType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFailureType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailure &a, TDDIAbstractFailure &b) {
  using ::std::swap;
  swap(a.UsedFailure, b.UsedFailure);
  swap(a.UsedFailureType, b.UsedFailureType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailure::TDDIAbstractFailure(const TDDIAbstractFailure& other795) {
  UsedFailure = other795.UsedFailure;
  UsedFailureType = other795.UsedFailureType;
  __isset = other795.__isset;
}
TDDIAbstractFailure& TDDIAbstractFailure::operator=(const TDDIAbstractFailure& other796) {
  UsedFailure = other796.UsedFailure;
  UsedFailureType = other796.UsedFailureType;
  __isset = other796.__isset;
  return *this;
}
void TDDIAbstractFailure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailure(";
  out << "UsedFailure=" << to_string(UsedFailure);
  out << ", " << "UsedFailureType=" << to_string(UsedFailureType);
  out << ")";
}


TDDIMinimalCutSet::~TDDIMinimalCutSet() throw() {
}


void TDDIMinimalCutSet::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMinimalCutSet::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMinimalCutSet::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMinimalCutSet::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIMinimalCutSet::__set_Failures(const std::vector<TDDIAbstractFailureRef> & val) {
  this->Failures = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMinimalCutSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMinimalCutSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size797;
            ::apache::thrift::protocol::TType _etype800;
            xfer += iprot->readListBegin(_etype800, _size797);
            this->KeyValueMaps.resize(_size797);
            uint32_t _i801;
            for (_i801 = 0; _i801 < _size797; ++_i801)
            {
              xfer += this->KeyValueMaps[_i801].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size802;
            ::apache::thrift::protocol::TType _etype805;
            xfer += iprot->readListBegin(_etype805, _size802);
            this->Failures.resize(_size802);
            uint32_t _i806;
            for (_i806 = 0; _i806 < _size802; ++_i806)
            {
              xfer += this->Failures[_i806].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMinimalCutSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMinimalCutSet");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter807;
    for (_iter807 = this->KeyValueMaps.begin(); _iter807 != this->KeyValueMaps.end(); ++_iter807)
    {
      xfer += (*_iter807).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter808;
    for (_iter808 = this->Failures.begin(); _iter808 != this->Failures.end(); ++_iter808)
    {
      xfer += (*_iter808).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMinimalCutSet &a, TDDIMinimalCutSet &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Failures, b.Failures);
  swap(a.__isset, b.__isset);
}

TDDIMinimalCutSet::TDDIMinimalCutSet(const TDDIMinimalCutSet& other809) {
  Id = other809.Id;
  Name = other809.Name;
  Description = other809.Description;
  KeyValueMaps = other809.KeyValueMaps;
  Failures = other809.Failures;
  __isset = other809.__isset;
}
TDDIMinimalCutSet& TDDIMinimalCutSet::operator=(const TDDIMinimalCutSet& other810) {
  Id = other810.Id;
  Name = other810.Name;
  Description = other810.Description;
  KeyValueMaps = other810.KeyValueMaps;
  Failures = other810.Failures;
  __isset = other810.__isset;
  return *this;
}
void TDDIMinimalCutSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMinimalCutSet(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Failures=" << to_string(Failures);
  out << ")";
}


TDDIMinimalCutSets::~TDDIMinimalCutSets() throw() {
}


void TDDIMinimalCutSets::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMinimalCutSets::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMinimalCutSets::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMinimalCutSets::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIMinimalCutSets::__set_Cutsets(const std::vector<TDDIMinimalCutSet> & val) {
  this->Cutsets = val;
}

void TDDIMinimalCutSets::__set_Failures(const std::vector<TDDIAbstractFailureRef> & val) {
  this->Failures = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMinimalCutSets& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMinimalCutSets::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size811;
            ::apache::thrift::protocol::TType _etype814;
            xfer += iprot->readListBegin(_etype814, _size811);
            this->KeyValueMaps.resize(_size811);
            uint32_t _i815;
            for (_i815 = 0; _i815 < _size811; ++_i815)
            {
              xfer += this->KeyValueMaps[_i815].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Cutsets.clear();
            uint32_t _size816;
            ::apache::thrift::protocol::TType _etype819;
            xfer += iprot->readListBegin(_etype819, _size816);
            this->Cutsets.resize(_size816);
            uint32_t _i820;
            for (_i820 = 0; _i820 < _size816; ++_i820)
            {
              xfer += this->Cutsets[_i820].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Cutsets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size821;
            ::apache::thrift::protocol::TType _etype824;
            xfer += iprot->readListBegin(_etype824, _size821);
            this->Failures.resize(_size821);
            uint32_t _i825;
            for (_i825 = 0; _i825 < _size821; ++_i825)
            {
              xfer += this->Failures[_i825].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMinimalCutSets::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMinimalCutSets");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter826;
    for (_iter826 = this->KeyValueMaps.begin(); _iter826 != this->KeyValueMaps.end(); ++_iter826)
    {
      xfer += (*_iter826).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Cutsets", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Cutsets.size()));
    std::vector<TDDIMinimalCutSet> ::const_iterator _iter827;
    for (_iter827 = this->Cutsets.begin(); _iter827 != this->Cutsets.end(); ++_iter827)
    {
      xfer += (*_iter827).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter828;
    for (_iter828 = this->Failures.begin(); _iter828 != this->Failures.end(); ++_iter828)
    {
      xfer += (*_iter828).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMinimalCutSets &a, TDDIMinimalCutSets &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Cutsets, b.Cutsets);
  swap(a.Failures, b.Failures);
  swap(a.__isset, b.__isset);
}

TDDIMinimalCutSets::TDDIMinimalCutSets(const TDDIMinimalCutSets& other829) {
  Id = other829.Id;
  Name = other829.Name;
  Description = other829.Description;
  KeyValueMaps = other829.KeyValueMaps;
  Cutsets = other829.Cutsets;
  Failures = other829.Failures;
  __isset = other829.__isset;
}
TDDIMinimalCutSets& TDDIMinimalCutSets::operator=(const TDDIMinimalCutSets& other830) {
  Id = other830.Id;
  Name = other830.Name;
  Description = other830.Description;
  KeyValueMaps = other830.KeyValueMaps;
  Cutsets = other830.Cutsets;
  Failures = other830.Failures;
  __isset = other830.__isset;
  return *this;
}
void TDDIMinimalCutSets::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMinimalCutSets(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Cutsets=" << to_string(Cutsets);
  out << ", " << "Failures=" << to_string(Failures);
  out << ")";
}


TDDIFailureModel::~TDDIFailureModel() throw() {
}


void TDDIFailureModel::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFailureModel::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFailureModel::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFailureModel::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFailureModel::__set_MinimalCutSets(const std::vector<TDDIMinimalCutSets> & val) {
  this->MinimalCutSets = val;
}

void TDDIFailureModel::__set_Failures(const std::vector<TDDIAbstractFailure> & val) {
  this->Failures = val;
}

void TDDIFailureModel::__set_SubModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->SubModels = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureModel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size831;
            ::apache::thrift::protocol::TType _etype834;
            xfer += iprot->readListBegin(_etype834, _size831);
            this->KeyValueMaps.resize(_size831);
            uint32_t _i835;
            for (_i835 = 0; _i835 < _size831; ++_i835)
            {
              xfer += this->KeyValueMaps[_i835].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MinimalCutSets.clear();
            uint32_t _size836;
            ::apache::thrift::protocol::TType _etype839;
            xfer += iprot->readListBegin(_etype839, _size836);
            this->MinimalCutSets.resize(_size836);
            uint32_t _i840;
            for (_i840 = 0; _i840 < _size836; ++_i840)
            {
              xfer += this->MinimalCutSets[_i840].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MinimalCutSets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size841;
            ::apache::thrift::protocol::TType _etype844;
            xfer += iprot->readListBegin(_etype844, _size841);
            this->Failures.resize(_size841);
            uint32_t _i845;
            for (_i845 = 0; _i845 < _size841; ++_i845)
            {
              xfer += this->Failures[_i845].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubModels.clear();
            uint32_t _size846;
            ::apache::thrift::protocol::TType _etype849;
            xfer += iprot->readListBegin(_etype849, _size846);
            this->SubModels.resize(_size846);
            uint32_t _i850;
            for (_i850 = 0; _i850 < _size846; ++_i850)
            {
              xfer += this->SubModels[_i850].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureModel");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter851;
    for (_iter851 = this->KeyValueMaps.begin(); _iter851 != this->KeyValueMaps.end(); ++_iter851)
    {
      xfer += (*_iter851).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MinimalCutSets", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MinimalCutSets.size()));
    std::vector<TDDIMinimalCutSets> ::const_iterator _iter852;
    for (_iter852 = this->MinimalCutSets.begin(); _iter852 != this->MinimalCutSets.end(); ++_iter852)
    {
      xfer += (*_iter852).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailure> ::const_iterator _iter853;
    for (_iter853 = this->Failures.begin(); _iter853 != this->Failures.end(); ++_iter853)
    {
      xfer += (*_iter853).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubModels", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter854;
    for (_iter854 = this->SubModels.begin(); _iter854 != this->SubModels.end(); ++_iter854)
    {
      xfer += (*_iter854).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureModel &a, TDDIFailureModel &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.MinimalCutSets, b.MinimalCutSets);
  swap(a.Failures, b.Failures);
  swap(a.SubModels, b.SubModels);
  swap(a.__isset, b.__isset);
}

TDDIFailureModel::TDDIFailureModel(const TDDIFailureModel& other855) {
  Id = other855.Id;
  Name = other855.Name;
  Description = other855.Description;
  KeyValueMaps = other855.KeyValueMaps;
  MinimalCutSets = other855.MinimalCutSets;
  Failures = other855.Failures;
  SubModels = other855.SubModels;
  __isset = other855.__isset;
}
TDDIFailureModel& TDDIFailureModel::operator=(const TDDIFailureModel& other856) {
  Id = other856.Id;
  Name = other856.Name;
  Description = other856.Description;
  KeyValueMaps = other856.KeyValueMaps;
  MinimalCutSets = other856.MinimalCutSets;
  Failures = other856.Failures;
  SubModels = other856.SubModels;
  __isset = other856.__isset;
  return *this;
}
void TDDIFailureModel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureModel(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "MinimalCutSets=" << to_string(MinimalCutSets);
  out << ", " << "Failures=" << to_string(Failures);
  out << ", " << "SubModels=" << to_string(SubModels);
  out << ")";
}


TDDIFailureModelUnion::~TDDIFailureModelUnion() throw() {
}


void TDDIFailureModelUnion::__set_FailureModel(::apache::thrift::stdcxx::shared_ptr<TDDIFailureModel> val) {
  this->FailureModel = val;
__isset.FailureModel = true;
}

void TDDIFailureModelUnion::__set_FMEA(::apache::thrift::stdcxx::shared_ptr<TDDIFMEA> val) {
  this->FMEA = val;
__isset.FMEA = true;
}

void TDDIFailureModelUnion::__set_MarkovChain(::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChain> val) {
  this->MarkovChain = val;
__isset.MarkovChain = true;
}

void TDDIFailureModelUnion::__set_FaultTree(::apache::thrift::stdcxx::shared_ptr<TDDIFaultTree> val) {
  this->FaultTree = val;
__isset.FaultTree = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureModelUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureModelUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureModel) { 
            this->FailureModel = ::apache::thrift::stdcxx::shared_ptr<TDDIFailureModel>(new TDDIFailureModel);
          }
          xfer += this->FailureModel->read(iprot);
          bool wasSet = false;
          if (this->FailureModel->__isset.Id) { wasSet = true; }
          if (this->FailureModel->__isset.Name) { wasSet = true; }
          if (this->FailureModel->__isset.Description) { wasSet = true; }
          if (this->FailureModel->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FailureModel->__isset.MinimalCutSets) { wasSet = true; }
          if (this->FailureModel->__isset.Failures) { wasSet = true; }
          if (this->FailureModel->__isset.SubModels) { wasSet = true; }
          if (!wasSet) { this->FailureModel.reset(); }
          this->__isset.FailureModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FMEA) { 
            this->FMEA = ::apache::thrift::stdcxx::shared_ptr<TDDIFMEA>(new TDDIFMEA);
          }
          xfer += this->FMEA->read(iprot);
          bool wasSet = false;
          if (this->FMEA->__isset.Id) { wasSet = true; }
          if (this->FMEA->__isset.Name) { wasSet = true; }
          if (this->FMEA->__isset.Description) { wasSet = true; }
          if (this->FMEA->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FMEA->__isset.MinimalCutSets) { wasSet = true; }
          if (this->FMEA->__isset.Failures) { wasSet = true; }
          if (this->FMEA->__isset.SubModels) { wasSet = true; }
          if (this->FMEA->__isset.Type) { wasSet = true; }
          if (this->FMEA->__isset.Entries) { wasSet = true; }
          if (!wasSet) { this->FMEA.reset(); }
          this->__isset.FMEA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MarkovChain) { 
            this->MarkovChain = ::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChain>(new TDDIMarkovChain);
          }
          xfer += this->MarkovChain->read(iprot);
          bool wasSet = false;
          if (this->MarkovChain->__isset.Id) { wasSet = true; }
          if (this->MarkovChain->__isset.Name) { wasSet = true; }
          if (this->MarkovChain->__isset.Description) { wasSet = true; }
          if (this->MarkovChain->__isset.KeyValueMaps) { wasSet = true; }
          if (this->MarkovChain->__isset.MinimalCutSets) { wasSet = true; }
          if (this->MarkovChain->__isset.Failures) { wasSet = true; }
          if (this->MarkovChain->__isset.SubModels) { wasSet = true; }
          if (this->MarkovChain->__isset.Transitions) { wasSet = true; }
          if (this->MarkovChain->__isset.States) { wasSet = true; }
          if (!wasSet) { this->MarkovChain.reset(); }
          this->__isset.MarkovChain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FaultTree) { 
            this->FaultTree = ::apache::thrift::stdcxx::shared_ptr<TDDIFaultTree>(new TDDIFaultTree);
          }
          xfer += this->FaultTree->read(iprot);
          bool wasSet = false;
          if (this->FaultTree->__isset.Id) { wasSet = true; }
          if (this->FaultTree->__isset.Name) { wasSet = true; }
          if (this->FaultTree->__isset.Description) { wasSet = true; }
          if (this->FaultTree->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FaultTree->__isset.MinimalCutSets) { wasSet = true; }
          if (this->FaultTree->__isset.Failures) { wasSet = true; }
          if (this->FaultTree->__isset.SubModels) { wasSet = true; }
          if (this->FaultTree->__isset.Causes) { wasSet = true; }
          if (!wasSet) { this->FaultTree.reset(); }
          this->__isset.FaultTree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureModelUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureModelUnion");

  if (this->__isset.FailureModel) {
    xfer += oprot->writeFieldBegin("FailureModel", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->FailureModel) {
      xfer += this->FailureModel->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFailureModel"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEA) {
    xfer += oprot->writeFieldBegin("FMEA", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->FMEA) {
      xfer += this->FMEA->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFMEA"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MarkovChain) {
    xfer += oprot->writeFieldBegin("MarkovChain", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->MarkovChain) {
      xfer += this->MarkovChain->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMarkovChain"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FaultTree) {
    xfer += oprot->writeFieldBegin("FaultTree", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->FaultTree) {
      xfer += this->FaultTree->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFaultTree"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureModelUnion &a, TDDIFailureModelUnion &b) {
  using ::std::swap;
  swap(a.FailureModel, b.FailureModel);
  swap(a.FMEA, b.FMEA);
  swap(a.MarkovChain, b.MarkovChain);
  swap(a.FaultTree, b.FaultTree);
  swap(a.__isset, b.__isset);
}

TDDIFailureModelUnion::TDDIFailureModelUnion(const TDDIFailureModelUnion& other857) {
  FailureModel = other857.FailureModel;
  FMEA = other857.FMEA;
  MarkovChain = other857.MarkovChain;
  FaultTree = other857.FaultTree;
  __isset = other857.__isset;
}
TDDIFailureModelUnion& TDDIFailureModelUnion::operator=(const TDDIFailureModelUnion& other858) {
  FailureModel = other858.FailureModel;
  FMEA = other858.FMEA;
  MarkovChain = other858.MarkovChain;
  FaultTree = other858.FaultTree;
  __isset = other858.__isset;
  return *this;
}
void TDDIFailureModelUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureModelUnion(";
  out << "FailureModel="; (__isset.FailureModel ? (out << to_string(FailureModel)) : (out << "<null>"));
  out << ", " << "FMEA="; (__isset.FMEA ? (out << to_string(FMEA)) : (out << "<null>"));
  out << ", " << "MarkovChain="; (__isset.MarkovChain ? (out << to_string(MarkovChain)) : (out << "<null>"));
  out << ", " << "FaultTree="; (__isset.FaultTree ? (out << to_string(FaultTree)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFailureModel::~TDDIAbstractFailureModel() throw() {
}


void TDDIAbstractFailureModel::__set_UsedFailureModel(const TDDIFailureModelUnion& val) {
  this->UsedFailureModel = val;
}

void TDDIAbstractFailureModel::__set_UsedFailureModelType(const TDDIFailureModelUnionType val) {
  this->UsedFailureModelType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureModel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFailureModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFailureModel.read(iprot);
          this->__isset.UsedFailureModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast859;
          xfer += iprot->readI32(ecast859);
          this->UsedFailureModelType = (TDDIFailureModelUnionType)ecast859;
          this->__isset.UsedFailureModelType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFailureModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFailureModel");

  xfer += oprot->writeFieldBegin("UsedFailureModel", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFailureModel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFailureModelType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFailureModelType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFailureModel &a, TDDIAbstractFailureModel &b) {
  using ::std::swap;
  swap(a.UsedFailureModel, b.UsedFailureModel);
  swap(a.UsedFailureModelType, b.UsedFailureModelType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFailureModel::TDDIAbstractFailureModel(const TDDIAbstractFailureModel& other860) {
  UsedFailureModel = other860.UsedFailureModel;
  UsedFailureModelType = other860.UsedFailureModelType;
  __isset = other860.__isset;
}
TDDIAbstractFailureModel& TDDIAbstractFailureModel::operator=(const TDDIAbstractFailureModel& other861) {
  UsedFailureModel = other861.UsedFailureModel;
  UsedFailureModelType = other861.UsedFailureModelType;
  __isset = other861.__isset;
  return *this;
}
void TDDIAbstractFailureModel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFailureModel(";
  out << "UsedFailureModel=" << to_string(UsedFailureModel);
  out << ", " << "UsedFailureModelType=" << to_string(UsedFailureModelType);
  out << ")";
}


TDDIFailureLogicPackage::~TDDIFailureLogicPackage() throw() {
}


void TDDIFailureLogicPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFailureLogicPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFailureLogicPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFailureLogicPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFailureLogicPackage::__set_FailureModels(const std::vector<TDDIAbstractFailureModel> & val) {
  this->FailureModels = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFailureLogicPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size862;
            ::apache::thrift::protocol::TType _etype865;
            xfer += iprot->readListBegin(_etype865, _size862);
            this->KeyValueMaps.resize(_size862);
            uint32_t _i866;
            for (_i866 = 0; _i866 < _size862; ++_i866)
            {
              xfer += this->KeyValueMaps[_i866].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FailureModels.clear();
            uint32_t _size867;
            ::apache::thrift::protocol::TType _etype870;
            xfer += iprot->readListBegin(_etype870, _size867);
            this->FailureModels.resize(_size867);
            uint32_t _i871;
            for (_i871 = 0; _i871 < _size867; ++_i871)
            {
              xfer += this->FailureModels[_i871].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FailureModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFailureLogicPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFailureLogicPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter872;
    for (_iter872 = this->KeyValueMaps.begin(); _iter872 != this->KeyValueMaps.end(); ++_iter872)
    {
      xfer += (*_iter872).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureModels", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FailureModels.size()));
    std::vector<TDDIAbstractFailureModel> ::const_iterator _iter873;
    for (_iter873 = this->FailureModels.begin(); _iter873 != this->FailureModels.end(); ++_iter873)
    {
      xfer += (*_iter873).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFailureLogicPackage &a, TDDIFailureLogicPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.FailureModels, b.FailureModels);
  swap(a.__isset, b.__isset);
}

TDDIFailureLogicPackage::TDDIFailureLogicPackage(const TDDIFailureLogicPackage& other874) {
  Id = other874.Id;
  Name = other874.Name;
  Description = other874.Description;
  KeyValueMaps = other874.KeyValueMaps;
  FailureModels = other874.FailureModels;
  __isset = other874.__isset;
}
TDDIFailureLogicPackage& TDDIFailureLogicPackage::operator=(const TDDIFailureLogicPackage& other875) {
  Id = other875.Id;
  Name = other875.Name;
  Description = other875.Description;
  KeyValueMaps = other875.KeyValueMaps;
  FailureModels = other875.FailureModels;
  __isset = other875.__isset;
  return *this;
}
void TDDIFailureLogicPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFailureLogicPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "FailureModels=" << to_string(FailureModels);
  out << ")";
}


TDDIFMEAEntry::~TDDIFMEAEntry() throw() {
}


void TDDIFMEAEntry::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEAEntry::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEAEntry::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEAEntry::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEAEntry::__set_Effect(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->Effect = val;
}

void TDDIFMEAEntry::__set_Mode(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->Mode = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAEntry& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size876;
            ::apache::thrift::protocol::TType _etype879;
            xfer += iprot->readListBegin(_etype879, _size876);
            this->KeyValueMaps.resize(_size876);
            uint32_t _i880;
            for (_i880 = 0; _i880 < _size876; ++_i880)
            {
              xfer += this->KeyValueMaps[_i880].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Effect) { 
            this->Effect = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->Effect->read(iprot);
          bool wasSet = false;
          if (this->Effect->__isset.UsedFailure) { wasSet = true; }
          if (this->Effect->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->Effect.reset(); }
          this->__isset.Effect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Mode) { 
            this->Mode = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->Mode->read(iprot);
          bool wasSet = false;
          if (this->Mode->__isset.UsedFailure) { wasSet = true; }
          if (this->Mode->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->Mode.reset(); }
          this->__isset.Mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAEntry");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter881;
    for (_iter881 = this->KeyValueMaps.begin(); _iter881 != this->KeyValueMaps.end(); ++_iter881)
    {
      xfer += (*_iter881).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Effect", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->Effect) {
    xfer += this->Effect->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Mode", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Mode) {
    xfer += this->Mode->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAEntry &a, TDDIFMEAEntry &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Effect, b.Effect);
  swap(a.Mode, b.Mode);
  swap(a.__isset, b.__isset);
}

TDDIFMEAEntry::TDDIFMEAEntry(const TDDIFMEAEntry& other882) {
  Id = other882.Id;
  Name = other882.Name;
  Description = other882.Description;
  KeyValueMaps = other882.KeyValueMaps;
  Effect = other882.Effect;
  Mode = other882.Mode;
  __isset = other882.__isset;
}
TDDIFMEAEntry& TDDIFMEAEntry::operator=(const TDDIFMEAEntry& other883) {
  Id = other883.Id;
  Name = other883.Name;
  Description = other883.Description;
  KeyValueMaps = other883.KeyValueMaps;
  Effect = other883.Effect;
  Mode = other883.Mode;
  __isset = other883.__isset;
  return *this;
}
void TDDIFMEAEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAEntry(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Effect=" << to_string(Effect);
  out << ", " << "Mode=" << to_string(Mode);
  out << ")";
}


TDDIFMEDAEntry::~TDDIFMEDAEntry() throw() {
}


void TDDIFMEDAEntry::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEDAEntry::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEDAEntry::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEDAEntry::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEDAEntry::__set_Effect(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->Effect = val;
}

void TDDIFMEDAEntry::__set_Mode(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->Mode = val;
}

void TDDIFMEDAEntry::__set_DiagnosisRate(const double val) {
  this->DiagnosisRate = val;
}

void TDDIFMEDAEntry::__set_DiagnosisProbDistribution(const TDDIProbDist& val) {
  this->DiagnosisProbDistribution = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEDAEntry& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEDAEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size884;
            ::apache::thrift::protocol::TType _etype887;
            xfer += iprot->readListBegin(_etype887, _size884);
            this->KeyValueMaps.resize(_size884);
            uint32_t _i888;
            for (_i888 = 0; _i888 < _size884; ++_i888)
            {
              xfer += this->KeyValueMaps[_i888].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Effect) { 
            this->Effect = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->Effect->read(iprot);
          bool wasSet = false;
          if (this->Effect->__isset.UsedFailure) { wasSet = true; }
          if (this->Effect->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->Effect.reset(); }
          this->__isset.Effect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Mode) { 
            this->Mode = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->Mode->read(iprot);
          bool wasSet = false;
          if (this->Mode->__isset.UsedFailure) { wasSet = true; }
          if (this->Mode->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->Mode.reset(); }
          this->__isset.Mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->DiagnosisRate);
          this->__isset.DiagnosisRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DiagnosisProbDistribution.read(iprot);
          this->__isset.DiagnosisProbDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEDAEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEDAEntry");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter889;
    for (_iter889 = this->KeyValueMaps.begin(); _iter889 != this->KeyValueMaps.end(); ++_iter889)
    {
      xfer += (*_iter889).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Effect", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->Effect) {
    xfer += this->Effect->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Mode", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Mode) {
    xfer += this->Mode->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DiagnosisRate", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->DiagnosisRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DiagnosisProbDistribution", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->DiagnosisProbDistribution.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEDAEntry &a, TDDIFMEDAEntry &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Effect, b.Effect);
  swap(a.Mode, b.Mode);
  swap(a.DiagnosisRate, b.DiagnosisRate);
  swap(a.DiagnosisProbDistribution, b.DiagnosisProbDistribution);
  swap(a.__isset, b.__isset);
}

TDDIFMEDAEntry::TDDIFMEDAEntry(const TDDIFMEDAEntry& other890) {
  Id = other890.Id;
  Name = other890.Name;
  Description = other890.Description;
  KeyValueMaps = other890.KeyValueMaps;
  Effect = other890.Effect;
  Mode = other890.Mode;
  DiagnosisRate = other890.DiagnosisRate;
  DiagnosisProbDistribution = other890.DiagnosisProbDistribution;
  __isset = other890.__isset;
}
TDDIFMEDAEntry& TDDIFMEDAEntry::operator=(const TDDIFMEDAEntry& other891) {
  Id = other891.Id;
  Name = other891.Name;
  Description = other891.Description;
  KeyValueMaps = other891.KeyValueMaps;
  Effect = other891.Effect;
  Mode = other891.Mode;
  DiagnosisRate = other891.DiagnosisRate;
  DiagnosisProbDistribution = other891.DiagnosisProbDistribution;
  __isset = other891.__isset;
  return *this;
}
void TDDIFMEDAEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEDAEntry(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Effect=" << to_string(Effect);
  out << ", " << "Mode=" << to_string(Mode);
  out << ", " << "DiagnosisRate=" << to_string(DiagnosisRate);
  out << ", " << "DiagnosisProbDistribution=" << to_string(DiagnosisProbDistribution);
  out << ")";
}


TDDIFMEAEntryUnion::~TDDIFMEAEntryUnion() throw() {
}


void TDDIFMEAEntryUnion::__set_FMEAEntry(::apache::thrift::stdcxx::shared_ptr<TDDIFMEAEntry> val) {
  this->FMEAEntry = val;
__isset.FMEAEntry = true;
}

void TDDIFMEAEntryUnion::__set_FMEDAEntry(::apache::thrift::stdcxx::shared_ptr<TDDIFMEDAEntry> val) {
  this->FMEDAEntry = val;
__isset.FMEDAEntry = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEAEntryUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEAEntryUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FMEAEntry) { 
            this->FMEAEntry = ::apache::thrift::stdcxx::shared_ptr<TDDIFMEAEntry>(new TDDIFMEAEntry);
          }
          xfer += this->FMEAEntry->read(iprot);
          bool wasSet = false;
          if (this->FMEAEntry->__isset.Id) { wasSet = true; }
          if (this->FMEAEntry->__isset.Name) { wasSet = true; }
          if (this->FMEAEntry->__isset.Description) { wasSet = true; }
          if (this->FMEAEntry->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FMEAEntry->__isset.Effect) { wasSet = true; }
          if (this->FMEAEntry->__isset.Mode) { wasSet = true; }
          if (!wasSet) { this->FMEAEntry.reset(); }
          this->__isset.FMEAEntry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FMEDAEntry) { 
            this->FMEDAEntry = ::apache::thrift::stdcxx::shared_ptr<TDDIFMEDAEntry>(new TDDIFMEDAEntry);
          }
          xfer += this->FMEDAEntry->read(iprot);
          bool wasSet = false;
          if (this->FMEDAEntry->__isset.Id) { wasSet = true; }
          if (this->FMEDAEntry->__isset.Name) { wasSet = true; }
          if (this->FMEDAEntry->__isset.Description) { wasSet = true; }
          if (this->FMEDAEntry->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FMEDAEntry->__isset.Effect) { wasSet = true; }
          if (this->FMEDAEntry->__isset.Mode) { wasSet = true; }
          if (this->FMEDAEntry->__isset.DiagnosisRate) { wasSet = true; }
          if (this->FMEDAEntry->__isset.DiagnosisProbDistribution) { wasSet = true; }
          if (!wasSet) { this->FMEDAEntry.reset(); }
          this->__isset.FMEDAEntry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEAEntryUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEAEntryUnion");

  if (this->__isset.FMEAEntry) {
    xfer += oprot->writeFieldBegin("FMEAEntry", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->FMEAEntry) {
      xfer += this->FMEAEntry->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFMEAEntry"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FMEDAEntry) {
    xfer += oprot->writeFieldBegin("FMEDAEntry", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->FMEDAEntry) {
      xfer += this->FMEDAEntry->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFMEDAEntry"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEAEntryUnion &a, TDDIFMEAEntryUnion &b) {
  using ::std::swap;
  swap(a.FMEAEntry, b.FMEAEntry);
  swap(a.FMEDAEntry, b.FMEDAEntry);
  swap(a.__isset, b.__isset);
}

TDDIFMEAEntryUnion::TDDIFMEAEntryUnion(const TDDIFMEAEntryUnion& other892) {
  FMEAEntry = other892.FMEAEntry;
  FMEDAEntry = other892.FMEDAEntry;
  __isset = other892.__isset;
}
TDDIFMEAEntryUnion& TDDIFMEAEntryUnion::operator=(const TDDIFMEAEntryUnion& other893) {
  FMEAEntry = other893.FMEAEntry;
  FMEDAEntry = other893.FMEDAEntry;
  __isset = other893.__isset;
  return *this;
}
void TDDIFMEAEntryUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEAEntryUnion(";
  out << "FMEAEntry="; (__isset.FMEAEntry ? (out << to_string(FMEAEntry)) : (out << "<null>"));
  out << ", " << "FMEDAEntry="; (__isset.FMEDAEntry ? (out << to_string(FMEDAEntry)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractFMEAEntry::~TDDIAbstractFMEAEntry() throw() {
}


void TDDIAbstractFMEAEntry::__set_UsedFMEAEntry(const TDDIFMEAEntryUnion& val) {
  this->UsedFMEAEntry = val;
}

void TDDIAbstractFMEAEntry::__set_UsedFMEAEntryType(const TDDIFMEAEntryUnionType val) {
  this->UsedFMEAEntryType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAEntry& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractFMEAEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedFMEAEntry.read(iprot);
          this->__isset.UsedFMEAEntry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast894;
          xfer += iprot->readI32(ecast894);
          this->UsedFMEAEntryType = (TDDIFMEAEntryUnionType)ecast894;
          this->__isset.UsedFMEAEntryType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractFMEAEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractFMEAEntry");

  xfer += oprot->writeFieldBegin("UsedFMEAEntry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedFMEAEntry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedFMEAEntryType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedFMEAEntryType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractFMEAEntry &a, TDDIAbstractFMEAEntry &b) {
  using ::std::swap;
  swap(a.UsedFMEAEntry, b.UsedFMEAEntry);
  swap(a.UsedFMEAEntryType, b.UsedFMEAEntryType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractFMEAEntry::TDDIAbstractFMEAEntry(const TDDIAbstractFMEAEntry& other895) {
  UsedFMEAEntry = other895.UsedFMEAEntry;
  UsedFMEAEntryType = other895.UsedFMEAEntryType;
  __isset = other895.__isset;
}
TDDIAbstractFMEAEntry& TDDIAbstractFMEAEntry::operator=(const TDDIAbstractFMEAEntry& other896) {
  UsedFMEAEntry = other896.UsedFMEAEntry;
  UsedFMEAEntryType = other896.UsedFMEAEntryType;
  __isset = other896.__isset;
  return *this;
}
void TDDIAbstractFMEAEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractFMEAEntry(";
  out << "UsedFMEAEntry=" << to_string(UsedFMEAEntry);
  out << ", " << "UsedFMEAEntryType=" << to_string(UsedFMEAEntryType);
  out << ")";
}


TDDIFMEA::~TDDIFMEA() throw() {
}


void TDDIFMEA::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFMEA::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFMEA::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFMEA::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFMEA::__set_MinimalCutSets(const std::vector<TDDIMinimalCutSets> & val) {
  this->MinimalCutSets = val;
}

void TDDIFMEA::__set_Failures(const std::vector<TDDIAbstractFailure> & val) {
  this->Failures = val;
}

void TDDIFMEA::__set_SubModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->SubModels = val;
}

void TDDIFMEA::__set_Type(const TDDIFMEAType val) {
  this->Type = val;
}

void TDDIFMEA::__set_Entries(const std::vector<TDDIAbstractFMEAEntry> & val) {
  this->Entries = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFMEA& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFMEA::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size897;
            ::apache::thrift::protocol::TType _etype900;
            xfer += iprot->readListBegin(_etype900, _size897);
            this->KeyValueMaps.resize(_size897);
            uint32_t _i901;
            for (_i901 = 0; _i901 < _size897; ++_i901)
            {
              xfer += this->KeyValueMaps[_i901].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MinimalCutSets.clear();
            uint32_t _size902;
            ::apache::thrift::protocol::TType _etype905;
            xfer += iprot->readListBegin(_etype905, _size902);
            this->MinimalCutSets.resize(_size902);
            uint32_t _i906;
            for (_i906 = 0; _i906 < _size902; ++_i906)
            {
              xfer += this->MinimalCutSets[_i906].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MinimalCutSets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size907;
            ::apache::thrift::protocol::TType _etype910;
            xfer += iprot->readListBegin(_etype910, _size907);
            this->Failures.resize(_size907);
            uint32_t _i911;
            for (_i911 = 0; _i911 < _size907; ++_i911)
            {
              xfer += this->Failures[_i911].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubModels.clear();
            uint32_t _size912;
            ::apache::thrift::protocol::TType _etype915;
            xfer += iprot->readListBegin(_etype915, _size912);
            this->SubModels.resize(_size912);
            uint32_t _i916;
            for (_i916 = 0; _i916 < _size912; ++_i916)
            {
              xfer += this->SubModels[_i916].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast917;
          xfer += iprot->readI32(ecast917);
          this->Type = (TDDIFMEAType)ecast917;
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Entries.clear();
            uint32_t _size918;
            ::apache::thrift::protocol::TType _etype921;
            xfer += iprot->readListBegin(_etype921, _size918);
            this->Entries.resize(_size918);
            uint32_t _i922;
            for (_i922 = 0; _i922 < _size918; ++_i922)
            {
              xfer += this->Entries[_i922].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFMEA::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFMEA");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter923;
    for (_iter923 = this->KeyValueMaps.begin(); _iter923 != this->KeyValueMaps.end(); ++_iter923)
    {
      xfer += (*_iter923).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MinimalCutSets", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MinimalCutSets.size()));
    std::vector<TDDIMinimalCutSets> ::const_iterator _iter924;
    for (_iter924 = this->MinimalCutSets.begin(); _iter924 != this->MinimalCutSets.end(); ++_iter924)
    {
      xfer += (*_iter924).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailure> ::const_iterator _iter925;
    for (_iter925 = this->Failures.begin(); _iter925 != this->Failures.end(); ++_iter925)
    {
      xfer += (*_iter925).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubModels", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter926;
    for (_iter926 = this->SubModels.begin(); _iter926 != this->SubModels.end(); ++_iter926)
    {
      xfer += (*_iter926).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Entries", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Entries.size()));
    std::vector<TDDIAbstractFMEAEntry> ::const_iterator _iter927;
    for (_iter927 = this->Entries.begin(); _iter927 != this->Entries.end(); ++_iter927)
    {
      xfer += (*_iter927).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFMEA &a, TDDIFMEA &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.MinimalCutSets, b.MinimalCutSets);
  swap(a.Failures, b.Failures);
  swap(a.SubModels, b.SubModels);
  swap(a.Type, b.Type);
  swap(a.Entries, b.Entries);
  swap(a.__isset, b.__isset);
}

TDDIFMEA::TDDIFMEA(const TDDIFMEA& other928) {
  Id = other928.Id;
  Name = other928.Name;
  Description = other928.Description;
  KeyValueMaps = other928.KeyValueMaps;
  MinimalCutSets = other928.MinimalCutSets;
  Failures = other928.Failures;
  SubModels = other928.SubModels;
  Type = other928.Type;
  Entries = other928.Entries;
  __isset = other928.__isset;
}
TDDIFMEA& TDDIFMEA::operator=(const TDDIFMEA& other929) {
  Id = other929.Id;
  Name = other929.Name;
  Description = other929.Description;
  KeyValueMaps = other929.KeyValueMaps;
  MinimalCutSets = other929.MinimalCutSets;
  Failures = other929.Failures;
  SubModels = other929.SubModels;
  Type = other929.Type;
  Entries = other929.Entries;
  __isset = other929.__isset;
  return *this;
}
void TDDIFMEA::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFMEA(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "MinimalCutSets=" << to_string(MinimalCutSets);
  out << ", " << "Failures=" << to_string(Failures);
  out << ", " << "SubModels=" << to_string(SubModels);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "Entries=" << to_string(Entries);
  out << ")";
}


TDDICause::~TDDICause() throw() {
}


void TDDICause::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDICause::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDICause::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDICause::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDICause::__set_Type(const TDDICauseType val) {
  this->Type = val;
}

void TDDICause::__set_Failure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->Failure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDICause& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDICause::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size930;
            ::apache::thrift::protocol::TType _etype933;
            xfer += iprot->readListBegin(_etype933, _size930);
            this->KeyValueMaps.resize(_size930);
            uint32_t _i934;
            for (_i934 = 0; _i934 < _size930; ++_i934)
            {
              xfer += this->KeyValueMaps[_i934].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast935;
          xfer += iprot->readI32(ecast935);
          this->Type = (TDDICauseType)ecast935;
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Failure) { 
            this->Failure = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->Failure->read(iprot);
          bool wasSet = false;
          if (this->Failure->__isset.UsedFailure) { wasSet = true; }
          if (this->Failure->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->Failure.reset(); }
          this->__isset.Failure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDICause::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDICause");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter936;
    for (_iter936 = this->KeyValueMaps.begin(); _iter936 != this->KeyValueMaps.end(); ++_iter936)
    {
      xfer += (*_iter936).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failure", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Failure) {
    xfer += this->Failure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDICause &a, TDDICause &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Type, b.Type);
  swap(a.Failure, b.Failure);
  swap(a.__isset, b.__isset);
}

TDDICause::TDDICause(const TDDICause& other937) {
  Id = other937.Id;
  Name = other937.Name;
  Description = other937.Description;
  KeyValueMaps = other937.KeyValueMaps;
  Type = other937.Type;
  Failure = other937.Failure;
  __isset = other937.__isset;
}
TDDICause& TDDICause::operator=(const TDDICause& other938) {
  Id = other938.Id;
  Name = other938.Name;
  Description = other938.Description;
  KeyValueMaps = other938.KeyValueMaps;
  Type = other938.Type;
  Failure = other938.Failure;
  __isset = other938.__isset;
  return *this;
}
void TDDICause::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDICause(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "Failure=" << to_string(Failure);
  out << ")";
}


TDDIGate::~TDDIGate() throw() {
}


void TDDIGate::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIGate::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIGate::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIGate::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIGate::__set_Type(const TDDICauseType val) {
  this->Type = val;
}

void TDDIGate::__set_Failure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->Failure = val;
}

void TDDIGate::__set_GateType(const TDDIGateType val) {
  this->GateType = val;
}

void TDDIGate::__set_Causes(const std::vector<TDDIAbstractCauseRef> & val) {
  this->Causes = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIGate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIGate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size939;
            ::apache::thrift::protocol::TType _etype942;
            xfer += iprot->readListBegin(_etype942, _size939);
            this->KeyValueMaps.resize(_size939);
            uint32_t _i943;
            for (_i943 = 0; _i943 < _size939; ++_i943)
            {
              xfer += this->KeyValueMaps[_i943].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast944;
          xfer += iprot->readI32(ecast944);
          this->Type = (TDDICauseType)ecast944;
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Failure) { 
            this->Failure = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->Failure->read(iprot);
          bool wasSet = false;
          if (this->Failure->__isset.UsedFailure) { wasSet = true; }
          if (this->Failure->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->Failure.reset(); }
          this->__isset.Failure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast945;
          xfer += iprot->readI32(ecast945);
          this->GateType = (TDDIGateType)ecast945;
          this->__isset.GateType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Causes.clear();
            uint32_t _size946;
            ::apache::thrift::protocol::TType _etype949;
            xfer += iprot->readListBegin(_etype949, _size946);
            this->Causes.resize(_size946);
            uint32_t _i950;
            for (_i950 = 0; _i950 < _size946; ++_i950)
            {
              xfer += this->Causes[_i950].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Causes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIGate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIGate");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter951;
    for (_iter951 = this->KeyValueMaps.begin(); _iter951 != this->KeyValueMaps.end(); ++_iter951)
    {
      xfer += (*_iter951).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failure", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Failure) {
    xfer += this->Failure->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("GateType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->GateType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Causes", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Causes.size()));
    std::vector<TDDIAbstractCauseRef> ::const_iterator _iter952;
    for (_iter952 = this->Causes.begin(); _iter952 != this->Causes.end(); ++_iter952)
    {
      xfer += (*_iter952).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIGate &a, TDDIGate &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Type, b.Type);
  swap(a.Failure, b.Failure);
  swap(a.GateType, b.GateType);
  swap(a.Causes, b.Causes);
  swap(a.__isset, b.__isset);
}

TDDIGate::TDDIGate(const TDDIGate& other953) {
  Id = other953.Id;
  Name = other953.Name;
  Description = other953.Description;
  KeyValueMaps = other953.KeyValueMaps;
  Type = other953.Type;
  Failure = other953.Failure;
  GateType = other953.GateType;
  Causes = other953.Causes;
  __isset = other953.__isset;
}
TDDIGate& TDDIGate::operator=(const TDDIGate& other954) {
  Id = other954.Id;
  Name = other954.Name;
  Description = other954.Description;
  KeyValueMaps = other954.KeyValueMaps;
  Type = other954.Type;
  Failure = other954.Failure;
  GateType = other954.GateType;
  Causes = other954.Causes;
  __isset = other954.__isset;
  return *this;
}
void TDDIGate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIGate(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "Failure=" << to_string(Failure);
  out << ", " << "GateType=" << to_string(GateType);
  out << ", " << "Causes=" << to_string(Causes);
  out << ")";
}


TDDICauseUnion::~TDDICauseUnion() throw() {
}


void TDDICauseUnion::__set_Cause(::apache::thrift::stdcxx::shared_ptr<TDDICause> val) {
  this->Cause = val;
__isset.Cause = true;
}

void TDDICauseUnion::__set_Gate(::apache::thrift::stdcxx::shared_ptr<TDDIGate> val) {
  this->Gate = val;
__isset.Gate = true;
}
std::ostream& operator<<(std::ostream& out, const TDDICauseUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDICauseUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Cause) { 
            this->Cause = ::apache::thrift::stdcxx::shared_ptr<TDDICause>(new TDDICause);
          }
          xfer += this->Cause->read(iprot);
          bool wasSet = false;
          if (this->Cause->__isset.Id) { wasSet = true; }
          if (this->Cause->__isset.Name) { wasSet = true; }
          if (this->Cause->__isset.Description) { wasSet = true; }
          if (this->Cause->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Cause->__isset.Type) { wasSet = true; }
          if (this->Cause->__isset.Failure) { wasSet = true; }
          if (!wasSet) { this->Cause.reset(); }
          this->__isset.Cause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Gate) { 
            this->Gate = ::apache::thrift::stdcxx::shared_ptr<TDDIGate>(new TDDIGate);
          }
          xfer += this->Gate->read(iprot);
          bool wasSet = false;
          if (this->Gate->__isset.Id) { wasSet = true; }
          if (this->Gate->__isset.Name) { wasSet = true; }
          if (this->Gate->__isset.Description) { wasSet = true; }
          if (this->Gate->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Gate->__isset.Type) { wasSet = true; }
          if (this->Gate->__isset.Failure) { wasSet = true; }
          if (this->Gate->__isset.GateType) { wasSet = true; }
          if (this->Gate->__isset.Causes) { wasSet = true; }
          if (!wasSet) { this->Gate.reset(); }
          this->__isset.Gate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDICauseUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDICauseUnion");

  if (this->__isset.Cause) {
    xfer += oprot->writeFieldBegin("Cause", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Cause) {
      xfer += this->Cause->write(oprot); 
    } else {oprot->writeStructBegin("TDDICause"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Gate) {
    xfer += oprot->writeFieldBegin("Gate", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->Gate) {
      xfer += this->Gate->write(oprot); 
    } else {oprot->writeStructBegin("TDDIGate"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDICauseUnion &a, TDDICauseUnion &b) {
  using ::std::swap;
  swap(a.Cause, b.Cause);
  swap(a.Gate, b.Gate);
  swap(a.__isset, b.__isset);
}

TDDICauseUnion::TDDICauseUnion(const TDDICauseUnion& other955) {
  Cause = other955.Cause;
  Gate = other955.Gate;
  __isset = other955.__isset;
}
TDDICauseUnion& TDDICauseUnion::operator=(const TDDICauseUnion& other956) {
  Cause = other956.Cause;
  Gate = other956.Gate;
  __isset = other956.__isset;
  return *this;
}
void TDDICauseUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDICauseUnion(";
  out << "Cause="; (__isset.Cause ? (out << to_string(Cause)) : (out << "<null>"));
  out << ", " << "Gate="; (__isset.Gate ? (out << to_string(Gate)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractCause::~TDDIAbstractCause() throw() {
}


void TDDIAbstractCause::__set_UsedCause(const TDDICauseUnion& val) {
  this->UsedCause = val;
}

void TDDIAbstractCause::__set_UsedCauseType(const TDDICauseUnionType val) {
  this->UsedCauseType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractCause& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractCause::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedCause.read(iprot);
          this->__isset.UsedCause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast957;
          xfer += iprot->readI32(ecast957);
          this->UsedCauseType = (TDDICauseUnionType)ecast957;
          this->__isset.UsedCauseType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractCause::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractCause");

  xfer += oprot->writeFieldBegin("UsedCause", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedCause.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedCauseType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedCauseType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractCause &a, TDDIAbstractCause &b) {
  using ::std::swap;
  swap(a.UsedCause, b.UsedCause);
  swap(a.UsedCauseType, b.UsedCauseType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractCause::TDDIAbstractCause(const TDDIAbstractCause& other958) {
  UsedCause = other958.UsedCause;
  UsedCauseType = other958.UsedCauseType;
  __isset = other958.__isset;
}
TDDIAbstractCause& TDDIAbstractCause::operator=(const TDDIAbstractCause& other959) {
  UsedCause = other959.UsedCause;
  UsedCauseType = other959.UsedCauseType;
  __isset = other959.__isset;
  return *this;
}
void TDDIAbstractCause::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractCause(";
  out << "UsedCause=" << to_string(UsedCause);
  out << ", " << "UsedCauseType=" << to_string(UsedCauseType);
  out << ")";
}


TDDIFaultTree::~TDDIFaultTree() throw() {
}


void TDDIFaultTree::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIFaultTree::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIFaultTree::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIFaultTree::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIFaultTree::__set_MinimalCutSets(const std::vector<TDDIMinimalCutSets> & val) {
  this->MinimalCutSets = val;
}

void TDDIFaultTree::__set_Failures(const std::vector<TDDIAbstractFailure> & val) {
  this->Failures = val;
}

void TDDIFaultTree::__set_SubModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->SubModels = val;
}

void TDDIFaultTree::__set_Causes(const std::vector<TDDIAbstractCause> & val) {
  this->Causes = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIFaultTree& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIFaultTree::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size960;
            ::apache::thrift::protocol::TType _etype963;
            xfer += iprot->readListBegin(_etype963, _size960);
            this->KeyValueMaps.resize(_size960);
            uint32_t _i964;
            for (_i964 = 0; _i964 < _size960; ++_i964)
            {
              xfer += this->KeyValueMaps[_i964].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MinimalCutSets.clear();
            uint32_t _size965;
            ::apache::thrift::protocol::TType _etype968;
            xfer += iprot->readListBegin(_etype968, _size965);
            this->MinimalCutSets.resize(_size965);
            uint32_t _i969;
            for (_i969 = 0; _i969 < _size965; ++_i969)
            {
              xfer += this->MinimalCutSets[_i969].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MinimalCutSets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size970;
            ::apache::thrift::protocol::TType _etype973;
            xfer += iprot->readListBegin(_etype973, _size970);
            this->Failures.resize(_size970);
            uint32_t _i974;
            for (_i974 = 0; _i974 < _size970; ++_i974)
            {
              xfer += this->Failures[_i974].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubModels.clear();
            uint32_t _size975;
            ::apache::thrift::protocol::TType _etype978;
            xfer += iprot->readListBegin(_etype978, _size975);
            this->SubModels.resize(_size975);
            uint32_t _i979;
            for (_i979 = 0; _i979 < _size975; ++_i979)
            {
              xfer += this->SubModels[_i979].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Causes.clear();
            uint32_t _size980;
            ::apache::thrift::protocol::TType _etype983;
            xfer += iprot->readListBegin(_etype983, _size980);
            this->Causes.resize(_size980);
            uint32_t _i984;
            for (_i984 = 0; _i984 < _size980; ++_i984)
            {
              xfer += this->Causes[_i984].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Causes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIFaultTree::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIFaultTree");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter985;
    for (_iter985 = this->KeyValueMaps.begin(); _iter985 != this->KeyValueMaps.end(); ++_iter985)
    {
      xfer += (*_iter985).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MinimalCutSets", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MinimalCutSets.size()));
    std::vector<TDDIMinimalCutSets> ::const_iterator _iter986;
    for (_iter986 = this->MinimalCutSets.begin(); _iter986 != this->MinimalCutSets.end(); ++_iter986)
    {
      xfer += (*_iter986).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailure> ::const_iterator _iter987;
    for (_iter987 = this->Failures.begin(); _iter987 != this->Failures.end(); ++_iter987)
    {
      xfer += (*_iter987).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubModels", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter988;
    for (_iter988 = this->SubModels.begin(); _iter988 != this->SubModels.end(); ++_iter988)
    {
      xfer += (*_iter988).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Causes", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Causes.size()));
    std::vector<TDDIAbstractCause> ::const_iterator _iter989;
    for (_iter989 = this->Causes.begin(); _iter989 != this->Causes.end(); ++_iter989)
    {
      xfer += (*_iter989).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIFaultTree &a, TDDIFaultTree &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.MinimalCutSets, b.MinimalCutSets);
  swap(a.Failures, b.Failures);
  swap(a.SubModels, b.SubModels);
  swap(a.Causes, b.Causes);
  swap(a.__isset, b.__isset);
}

TDDIFaultTree::TDDIFaultTree(const TDDIFaultTree& other990) {
  Id = other990.Id;
  Name = other990.Name;
  Description = other990.Description;
  KeyValueMaps = other990.KeyValueMaps;
  MinimalCutSets = other990.MinimalCutSets;
  Failures = other990.Failures;
  SubModels = other990.SubModels;
  Causes = other990.Causes;
  __isset = other990.__isset;
}
TDDIFaultTree& TDDIFaultTree::operator=(const TDDIFaultTree& other991) {
  Id = other991.Id;
  Name = other991.Name;
  Description = other991.Description;
  KeyValueMaps = other991.KeyValueMaps;
  MinimalCutSets = other991.MinimalCutSets;
  Failures = other991.Failures;
  SubModels = other991.SubModels;
  Causes = other991.Causes;
  __isset = other991.__isset;
  return *this;
}
void TDDIFaultTree::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIFaultTree(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "MinimalCutSets=" << to_string(MinimalCutSets);
  out << ", " << "Failures=" << to_string(Failures);
  out << ", " << "SubModels=" << to_string(SubModels);
  out << ", " << "Causes=" << to_string(Causes);
  out << ")";
}


TDDIHazardType::~TDDIHazardType() throw() {
}


void TDDIHazardType::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHazardType::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHazardType::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHazardType::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazardType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazardType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size992;
            ::apache::thrift::protocol::TType _etype995;
            xfer += iprot->readListBegin(_etype995, _size992);
            this->KeyValueMaps.resize(_size992);
            uint32_t _i996;
            for (_i996 = 0; _i996 < _size992; ++_i996)
            {
              xfer += this->KeyValueMaps[_i996].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazardType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazardType");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter997;
    for (_iter997 = this->KeyValueMaps.begin(); _iter997 != this->KeyValueMaps.end(); ++_iter997)
    {
      xfer += (*_iter997).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazardType &a, TDDIHazardType &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.__isset, b.__isset);
}

TDDIHazardType::TDDIHazardType(const TDDIHazardType& other998) {
  Id = other998.Id;
  Name = other998.Name;
  Description = other998.Description;
  KeyValueMaps = other998.KeyValueMaps;
  __isset = other998.__isset;
}
TDDIHazardType& TDDIHazardType::operator=(const TDDIHazardType& other999) {
  Id = other999.Id;
  Name = other999.Name;
  Description = other999.Description;
  KeyValueMaps = other999.KeyValueMaps;
  __isset = other999.__isset;
  return *this;
}
void TDDIHazardType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazardType(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ")";
}


TDDIHazardTypeSystem::~TDDIHazardTypeSystem() throw() {
}


void TDDIHazardTypeSystem::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHazardTypeSystem::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHazardTypeSystem::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHazardTypeSystem::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIHazardTypeSystem::__set_HazardTypes(const std::vector<TDDIHazardTypeRef> & val) {
  this->HazardTypes = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazardTypeSystem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazardTypeSystem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1000;
            ::apache::thrift::protocol::TType _etype1003;
            xfer += iprot->readListBegin(_etype1003, _size1000);
            this->KeyValueMaps.resize(_size1000);
            uint32_t _i1004;
            for (_i1004 = 0; _i1004 < _size1000; ++_i1004)
            {
              xfer += this->KeyValueMaps[_i1004].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->HazardTypes.clear();
            uint32_t _size1005;
            ::apache::thrift::protocol::TType _etype1008;
            xfer += iprot->readListBegin(_etype1008, _size1005);
            this->HazardTypes.resize(_size1005);
            uint32_t _i1009;
            for (_i1009 = 0; _i1009 < _size1005; ++_i1009)
            {
              xfer += this->HazardTypes[_i1009].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.HazardTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazardTypeSystem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazardTypeSystem");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1010;
    for (_iter1010 = this->KeyValueMaps.begin(); _iter1010 != this->KeyValueMaps.end(); ++_iter1010)
    {
      xfer += (*_iter1010).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HazardTypes", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->HazardTypes.size()));
    std::vector<TDDIHazardTypeRef> ::const_iterator _iter1011;
    for (_iter1011 = this->HazardTypes.begin(); _iter1011 != this->HazardTypes.end(); ++_iter1011)
    {
      xfer += (*_iter1011).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazardTypeSystem &a, TDDIHazardTypeSystem &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.HazardTypes, b.HazardTypes);
  swap(a.__isset, b.__isset);
}

TDDIHazardTypeSystem::TDDIHazardTypeSystem(const TDDIHazardTypeSystem& other1012) {
  Id = other1012.Id;
  Name = other1012.Name;
  Description = other1012.Description;
  KeyValueMaps = other1012.KeyValueMaps;
  HazardTypes = other1012.HazardTypes;
  __isset = other1012.__isset;
}
TDDIHazardTypeSystem& TDDIHazardTypeSystem::operator=(const TDDIHazardTypeSystem& other1013) {
  Id = other1013.Id;
  Name = other1013.Name;
  Description = other1013.Description;
  KeyValueMaps = other1013.KeyValueMaps;
  HazardTypes = other1013.HazardTypes;
  __isset = other1013.__isset;
  return *this;
}
void TDDIHazardTypeSystem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazardTypeSystem(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "HazardTypes=" << to_string(HazardTypes);
  out << ")";
}


TDDIRiskParameter::~TDDIRiskParameter() throw() {
}


void TDDIRiskParameter::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIRiskParameter::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIRiskParameter::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIRiskParameter::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIRiskParameter::__set_Argument(const std::string& val) {
  this->Argument = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIRiskParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRiskParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1014;
            ::apache::thrift::protocol::TType _etype1017;
            xfer += iprot->readListBegin(_etype1017, _size1014);
            this->KeyValueMaps.resize(_size1014);
            uint32_t _i1018;
            for (_i1018 = 0; _i1018 < _size1014; ++_i1018)
            {
              xfer += this->KeyValueMaps[_i1018].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Argument);
          this->__isset.Argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRiskParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRiskParameter");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1019;
    for (_iter1019 = this->KeyValueMaps.begin(); _iter1019 != this->KeyValueMaps.end(); ++_iter1019)
    {
      xfer += (*_iter1019).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Argument", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRiskParameter &a, TDDIRiskParameter &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Argument, b.Argument);
  swap(a.__isset, b.__isset);
}

TDDIRiskParameter::TDDIRiskParameter(const TDDIRiskParameter& other1020) {
  Id = other1020.Id;
  Name = other1020.Name;
  Description = other1020.Description;
  KeyValueMaps = other1020.KeyValueMaps;
  Argument = other1020.Argument;
  __isset = other1020.__isset;
}
TDDIRiskParameter& TDDIRiskParameter::operator=(const TDDIRiskParameter& other1021) {
  Id = other1021.Id;
  Name = other1021.Name;
  Description = other1021.Description;
  KeyValueMaps = other1021.KeyValueMaps;
  Argument = other1021.Argument;
  __isset = other1021.__isset;
  return *this;
}
void TDDIRiskParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRiskParameter(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Argument=" << to_string(Argument);
  out << ")";
}


TDDISituation::~TDDISituation() throw() {
}


void TDDISituation::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISituation::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISituation::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISituation::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISituation::__set_Argument(const std::string& val) {
  this->Argument = val;
}

void TDDISituation::__set_Likelihood(const std::string& val) {
  this->Likelihood = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISituation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISituation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1022;
            ::apache::thrift::protocol::TType _etype1025;
            xfer += iprot->readListBegin(_etype1025, _size1022);
            this->KeyValueMaps.resize(_size1022);
            uint32_t _i1026;
            for (_i1026 = 0; _i1026 < _size1022; ++_i1026)
            {
              xfer += this->KeyValueMaps[_i1026].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Argument);
          this->__isset.Argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Likelihood);
          this->__isset.Likelihood = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISituation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISituation");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1027;
    for (_iter1027 = this->KeyValueMaps.begin(); _iter1027 != this->KeyValueMaps.end(); ++_iter1027)
    {
      xfer += (*_iter1027).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Argument", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Likelihood", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Likelihood);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISituation &a, TDDISituation &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Argument, b.Argument);
  swap(a.Likelihood, b.Likelihood);
  swap(a.__isset, b.__isset);
}

TDDISituation::TDDISituation(const TDDISituation& other1028) {
  Id = other1028.Id;
  Name = other1028.Name;
  Description = other1028.Description;
  KeyValueMaps = other1028.KeyValueMaps;
  Argument = other1028.Argument;
  Likelihood = other1028.Likelihood;
  __isset = other1028.__isset;
}
TDDISituation& TDDISituation::operator=(const TDDISituation& other1029) {
  Id = other1029.Id;
  Name = other1029.Name;
  Description = other1029.Description;
  KeyValueMaps = other1029.KeyValueMaps;
  Argument = other1029.Argument;
  Likelihood = other1029.Likelihood;
  __isset = other1029.__isset;
  return *this;
}
void TDDISituation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISituation(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Argument=" << to_string(Argument);
  out << ", " << "Likelihood=" << to_string(Likelihood);
  out << ")";
}


TDDIAccident::~TDDIAccident() throw() {
}


void TDDIAccident::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIAccident::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIAccident::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIAccident::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIAccident::__set_Argument(const std::string& val) {
  this->Argument = val;
}

void TDDIAccident::__set_Severity(const std::string& val) {
  this->Severity = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAccident& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAccident::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1030;
            ::apache::thrift::protocol::TType _etype1033;
            xfer += iprot->readListBegin(_etype1033, _size1030);
            this->KeyValueMaps.resize(_size1030);
            uint32_t _i1034;
            for (_i1034 = 0; _i1034 < _size1030; ++_i1034)
            {
              xfer += this->KeyValueMaps[_i1034].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Argument);
          this->__isset.Argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Severity);
          this->__isset.Severity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAccident::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAccident");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1035;
    for (_iter1035 = this->KeyValueMaps.begin(); _iter1035 != this->KeyValueMaps.end(); ++_iter1035)
    {
      xfer += (*_iter1035).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Argument", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Severity", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Severity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAccident &a, TDDIAccident &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Argument, b.Argument);
  swap(a.Severity, b.Severity);
  swap(a.__isset, b.__isset);
}

TDDIAccident::TDDIAccident(const TDDIAccident& other1036) {
  Id = other1036.Id;
  Name = other1036.Name;
  Description = other1036.Description;
  KeyValueMaps = other1036.KeyValueMaps;
  Argument = other1036.Argument;
  Severity = other1036.Severity;
  __isset = other1036.__isset;
}
TDDIAccident& TDDIAccident::operator=(const TDDIAccident& other1037) {
  Id = other1037.Id;
  Name = other1037.Name;
  Description = other1037.Description;
  KeyValueMaps = other1037.KeyValueMaps;
  Argument = other1037.Argument;
  Severity = other1037.Severity;
  __isset = other1037.__isset;
  return *this;
}
void TDDIAccident::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAccident(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Argument=" << to_string(Argument);
  out << ", " << "Severity=" << to_string(Severity);
  out << ")";
}


TDDIOperatorMeasure::~TDDIOperatorMeasure() throw() {
}


void TDDIOperatorMeasure::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIOperatorMeasure::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIOperatorMeasure::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIOperatorMeasure::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIOperatorMeasure::__set_Argument(const std::string& val) {
  this->Argument = val;
}

void TDDIOperatorMeasure::__set_Controlability(const std::string& val) {
  this->Controlability = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIOperatorMeasure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIOperatorMeasure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1038;
            ::apache::thrift::protocol::TType _etype1041;
            xfer += iprot->readListBegin(_etype1041, _size1038);
            this->KeyValueMaps.resize(_size1038);
            uint32_t _i1042;
            for (_i1042 = 0; _i1042 < _size1038; ++_i1042)
            {
              xfer += this->KeyValueMaps[_i1042].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Argument);
          this->__isset.Argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Controlability);
          this->__isset.Controlability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIOperatorMeasure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIOperatorMeasure");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1043;
    for (_iter1043 = this->KeyValueMaps.begin(); _iter1043 != this->KeyValueMaps.end(); ++_iter1043)
    {
      xfer += (*_iter1043).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Argument", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Controlability", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Controlability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIOperatorMeasure &a, TDDIOperatorMeasure &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Argument, b.Argument);
  swap(a.Controlability, b.Controlability);
  swap(a.__isset, b.__isset);
}

TDDIOperatorMeasure::TDDIOperatorMeasure(const TDDIOperatorMeasure& other1044) {
  Id = other1044.Id;
  Name = other1044.Name;
  Description = other1044.Description;
  KeyValueMaps = other1044.KeyValueMaps;
  Argument = other1044.Argument;
  Controlability = other1044.Controlability;
  __isset = other1044.__isset;
}
TDDIOperatorMeasure& TDDIOperatorMeasure::operator=(const TDDIOperatorMeasure& other1045) {
  Id = other1045.Id;
  Name = other1045.Name;
  Description = other1045.Description;
  KeyValueMaps = other1045.KeyValueMaps;
  Argument = other1045.Argument;
  Controlability = other1045.Controlability;
  __isset = other1045.__isset;
  return *this;
}
void TDDIOperatorMeasure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIOperatorMeasure(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Argument=" << to_string(Argument);
  out << ", " << "Controlability=" << to_string(Controlability);
  out << ")";
}


TDDIRiskParameterUnion::~TDDIRiskParameterUnion() throw() {
}


void TDDIRiskParameterUnion::__set_RiskParameter(::apache::thrift::stdcxx::shared_ptr<TDDIRiskParameter> val) {
  this->RiskParameter = val;
__isset.RiskParameter = true;
}

void TDDIRiskParameterUnion::__set_Situation(::apache::thrift::stdcxx::shared_ptr<TDDISituation> val) {
  this->Situation = val;
__isset.Situation = true;
}

void TDDIRiskParameterUnion::__set_Accident(::apache::thrift::stdcxx::shared_ptr<TDDIAccident> val) {
  this->Accident = val;
__isset.Accident = true;
}

void TDDIRiskParameterUnion::__set_OperatorMeasure(::apache::thrift::stdcxx::shared_ptr<TDDIOperatorMeasure> val) {
  this->OperatorMeasure = val;
__isset.OperatorMeasure = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIRiskParameterUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRiskParameterUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RiskParameter) { 
            this->RiskParameter = ::apache::thrift::stdcxx::shared_ptr<TDDIRiskParameter>(new TDDIRiskParameter);
          }
          xfer += this->RiskParameter->read(iprot);
          bool wasSet = false;
          if (this->RiskParameter->__isset.Id) { wasSet = true; }
          if (this->RiskParameter->__isset.Name) { wasSet = true; }
          if (this->RiskParameter->__isset.Description) { wasSet = true; }
          if (this->RiskParameter->__isset.KeyValueMaps) { wasSet = true; }
          if (this->RiskParameter->__isset.Argument) { wasSet = true; }
          if (!wasSet) { this->RiskParameter.reset(); }
          this->__isset.RiskParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Situation) { 
            this->Situation = ::apache::thrift::stdcxx::shared_ptr<TDDISituation>(new TDDISituation);
          }
          xfer += this->Situation->read(iprot);
          bool wasSet = false;
          if (this->Situation->__isset.Id) { wasSet = true; }
          if (this->Situation->__isset.Name) { wasSet = true; }
          if (this->Situation->__isset.Description) { wasSet = true; }
          if (this->Situation->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Situation->__isset.Argument) { wasSet = true; }
          if (this->Situation->__isset.Likelihood) { wasSet = true; }
          if (!wasSet) { this->Situation.reset(); }
          this->__isset.Situation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Accident) { 
            this->Accident = ::apache::thrift::stdcxx::shared_ptr<TDDIAccident>(new TDDIAccident);
          }
          xfer += this->Accident->read(iprot);
          bool wasSet = false;
          if (this->Accident->__isset.Id) { wasSet = true; }
          if (this->Accident->__isset.Name) { wasSet = true; }
          if (this->Accident->__isset.Description) { wasSet = true; }
          if (this->Accident->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Accident->__isset.Argument) { wasSet = true; }
          if (this->Accident->__isset.Severity) { wasSet = true; }
          if (!wasSet) { this->Accident.reset(); }
          this->__isset.Accident = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->OperatorMeasure) { 
            this->OperatorMeasure = ::apache::thrift::stdcxx::shared_ptr<TDDIOperatorMeasure>(new TDDIOperatorMeasure);
          }
          xfer += this->OperatorMeasure->read(iprot);
          bool wasSet = false;
          if (this->OperatorMeasure->__isset.Id) { wasSet = true; }
          if (this->OperatorMeasure->__isset.Name) { wasSet = true; }
          if (this->OperatorMeasure->__isset.Description) { wasSet = true; }
          if (this->OperatorMeasure->__isset.KeyValueMaps) { wasSet = true; }
          if (this->OperatorMeasure->__isset.Argument) { wasSet = true; }
          if (this->OperatorMeasure->__isset.Controlability) { wasSet = true; }
          if (!wasSet) { this->OperatorMeasure.reset(); }
          this->__isset.OperatorMeasure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRiskParameterUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRiskParameterUnion");

  if (this->__isset.RiskParameter) {
    xfer += oprot->writeFieldBegin("RiskParameter", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->RiskParameter) {
      xfer += this->RiskParameter->write(oprot); 
    } else {oprot->writeStructBegin("TDDIRiskParameter"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Situation) {
    xfer += oprot->writeFieldBegin("Situation", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->Situation) {
      xfer += this->Situation->write(oprot); 
    } else {oprot->writeStructBegin("TDDISituation"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Accident) {
    xfer += oprot->writeFieldBegin("Accident", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->Accident) {
      xfer += this->Accident->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAccident"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.OperatorMeasure) {
    xfer += oprot->writeFieldBegin("OperatorMeasure", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->OperatorMeasure) {
      xfer += this->OperatorMeasure->write(oprot); 
    } else {oprot->writeStructBegin("TDDIOperatorMeasure"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRiskParameterUnion &a, TDDIRiskParameterUnion &b) {
  using ::std::swap;
  swap(a.RiskParameter, b.RiskParameter);
  swap(a.Situation, b.Situation);
  swap(a.Accident, b.Accident);
  swap(a.OperatorMeasure, b.OperatorMeasure);
  swap(a.__isset, b.__isset);
}

TDDIRiskParameterUnion::TDDIRiskParameterUnion(const TDDIRiskParameterUnion& other1046) {
  RiskParameter = other1046.RiskParameter;
  Situation = other1046.Situation;
  Accident = other1046.Accident;
  OperatorMeasure = other1046.OperatorMeasure;
  __isset = other1046.__isset;
}
TDDIRiskParameterUnion& TDDIRiskParameterUnion::operator=(const TDDIRiskParameterUnion& other1047) {
  RiskParameter = other1047.RiskParameter;
  Situation = other1047.Situation;
  Accident = other1047.Accident;
  OperatorMeasure = other1047.OperatorMeasure;
  __isset = other1047.__isset;
  return *this;
}
void TDDIRiskParameterUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRiskParameterUnion(";
  out << "RiskParameter="; (__isset.RiskParameter ? (out << to_string(RiskParameter)) : (out << "<null>"));
  out << ", " << "Situation="; (__isset.Situation ? (out << to_string(Situation)) : (out << "<null>"));
  out << ", " << "Accident="; (__isset.Accident ? (out << to_string(Accident)) : (out << "<null>"));
  out << ", " << "OperatorMeasure="; (__isset.OperatorMeasure ? (out << to_string(OperatorMeasure)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractRiskParameter::~TDDIAbstractRiskParameter() throw() {
}


void TDDIAbstractRiskParameter::__set_UsedRiskParameter(const TDDIRiskParameterUnion& val) {
  this->UsedRiskParameter = val;
}

void TDDIAbstractRiskParameter::__set_UsedRiskParameterType(const TDDIRiskParameterUnionType val) {
  this->UsedRiskParameterType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRiskParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRiskParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedRiskParameter.read(iprot);
          this->__isset.UsedRiskParameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1048;
          xfer += iprot->readI32(ecast1048);
          this->UsedRiskParameterType = (TDDIRiskParameterUnionType)ecast1048;
          this->__isset.UsedRiskParameterType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRiskParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRiskParameter");

  xfer += oprot->writeFieldBegin("UsedRiskParameter", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedRiskParameter.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedRiskParameterType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedRiskParameterType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRiskParameter &a, TDDIAbstractRiskParameter &b) {
  using ::std::swap;
  swap(a.UsedRiskParameter, b.UsedRiskParameter);
  swap(a.UsedRiskParameterType, b.UsedRiskParameterType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRiskParameter::TDDIAbstractRiskParameter(const TDDIAbstractRiskParameter& other1049) {
  UsedRiskParameter = other1049.UsedRiskParameter;
  UsedRiskParameterType = other1049.UsedRiskParameterType;
  __isset = other1049.__isset;
}
TDDIAbstractRiskParameter& TDDIAbstractRiskParameter::operator=(const TDDIAbstractRiskParameter& other1050) {
  UsedRiskParameter = other1050.UsedRiskParameter;
  UsedRiskParameterType = other1050.UsedRiskParameterType;
  __isset = other1050.__isset;
  return *this;
}
void TDDIAbstractRiskParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRiskParameter(";
  out << "UsedRiskParameter=" << to_string(UsedRiskParameter);
  out << ", " << "UsedRiskParameterType=" << to_string(UsedRiskParameterType);
  out << ")";
}


TDDIHazard::~TDDIHazard() throw() {
}


void TDDIHazard::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHazard::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHazard::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHazard::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIHazard::__set_Condition(const std::string& val) {
  this->Condition = val;
}

void TDDIHazard::__set_HazardType(::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> val) {
  this->HazardType = val;
}

void TDDIHazard::__set_Measures(const std::vector<TDDIAbstractMeasureRef> & val) {
  this->Measures = val;
}

void TDDIHazard::__set_Failures(const std::vector<TDDIAbstractFailureRef> & val) {
  this->Failures = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHazard& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHazard::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1051;
            ::apache::thrift::protocol::TType _etype1054;
            xfer += iprot->readListBegin(_etype1054, _size1051);
            this->KeyValueMaps.resize(_size1051);
            uint32_t _i1055;
            for (_i1055 = 0; _i1055 < _size1051; ++_i1055)
            {
              xfer += this->KeyValueMaps[_i1055].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Condition);
          this->__isset.Condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->HazardType) { 
            this->HazardType = ::apache::thrift::stdcxx::shared_ptr<TDDIHazardType>(new TDDIHazardType);
          }
          xfer += this->HazardType->read(iprot);
          bool wasSet = false;
          if (this->HazardType->__isset.Id) { wasSet = true; }
          if (this->HazardType->__isset.Name) { wasSet = true; }
          if (this->HazardType->__isset.Description) { wasSet = true; }
          if (this->HazardType->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->HazardType.reset(); }
          this->__isset.HazardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Measures.clear();
            uint32_t _size1056;
            ::apache::thrift::protocol::TType _etype1059;
            xfer += iprot->readListBegin(_etype1059, _size1056);
            this->Measures.resize(_size1056);
            uint32_t _i1060;
            for (_i1060 = 0; _i1060 < _size1056; ++_i1060)
            {
              xfer += this->Measures[_i1060].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Measures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size1061;
            ::apache::thrift::protocol::TType _etype1064;
            xfer += iprot->readListBegin(_etype1064, _size1061);
            this->Failures.resize(_size1061);
            uint32_t _i1065;
            for (_i1065 = 0; _i1065 < _size1061; ++_i1065)
            {
              xfer += this->Failures[_i1065].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHazard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHazard");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1066;
    for (_iter1066 = this->KeyValueMaps.begin(); _iter1066 != this->KeyValueMaps.end(); ++_iter1066)
    {
      xfer += (*_iter1066).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Condition", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Condition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HazardType", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->HazardType) {
    xfer += this->HazardType->write(oprot); 
  } else {oprot->writeStructBegin("TDDIHazardType"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Measures", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Measures.size()));
    std::vector<TDDIAbstractMeasureRef> ::const_iterator _iter1067;
    for (_iter1067 = this->Measures.begin(); _iter1067 != this->Measures.end(); ++_iter1067)
    {
      xfer += (*_iter1067).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter1068;
    for (_iter1068 = this->Failures.begin(); _iter1068 != this->Failures.end(); ++_iter1068)
    {
      xfer += (*_iter1068).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHazard &a, TDDIHazard &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Condition, b.Condition);
  swap(a.HazardType, b.HazardType);
  swap(a.Measures, b.Measures);
  swap(a.Failures, b.Failures);
  swap(a.__isset, b.__isset);
}

TDDIHazard::TDDIHazard(const TDDIHazard& other1069) {
  Id = other1069.Id;
  Name = other1069.Name;
  Description = other1069.Description;
  KeyValueMaps = other1069.KeyValueMaps;
  Condition = other1069.Condition;
  HazardType = other1069.HazardType;
  Measures = other1069.Measures;
  Failures = other1069.Failures;
  __isset = other1069.__isset;
}
TDDIHazard& TDDIHazard::operator=(const TDDIHazard& other1070) {
  Id = other1070.Id;
  Name = other1070.Name;
  Description = other1070.Description;
  KeyValueMaps = other1070.KeyValueMaps;
  Condition = other1070.Condition;
  HazardType = other1070.HazardType;
  Measures = other1070.Measures;
  Failures = other1070.Failures;
  __isset = other1070.__isset;
  return *this;
}
void TDDIHazard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHazard(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Condition=" << to_string(Condition);
  out << ", " << "HazardType=" << to_string(HazardType);
  out << ", " << "Measures=" << to_string(Measures);
  out << ", " << "Failures=" << to_string(Failures);
  out << ")";
}


TDDIRiskAssessment::~TDDIRiskAssessment() throw() {
}


void TDDIRiskAssessment::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIRiskAssessment::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIRiskAssessment::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIRiskAssessment::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIRiskAssessment::__set_RelatedStandard(const std::string& val) {
  this->RelatedStandard = val;
}

void TDDIRiskAssessment::__set_RiskParamaters(const std::vector<TDDIAbstractRiskParameterRef> & val) {
  this->RiskParamaters = val;
}

void TDDIRiskAssessment::__set_Hazard(::apache::thrift::stdcxx::shared_ptr<TDDIHazard> val) {
  this->Hazard = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIRiskAssessment& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRiskAssessment::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1071;
            ::apache::thrift::protocol::TType _etype1074;
            xfer += iprot->readListBegin(_etype1074, _size1071);
            this->KeyValueMaps.resize(_size1071);
            uint32_t _i1075;
            for (_i1075 = 0; _i1075 < _size1071; ++_i1075)
            {
              xfer += this->KeyValueMaps[_i1075].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->RelatedStandard);
          this->__isset.RelatedStandard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RiskParamaters.clear();
            uint32_t _size1076;
            ::apache::thrift::protocol::TType _etype1079;
            xfer += iprot->readListBegin(_etype1079, _size1076);
            this->RiskParamaters.resize(_size1076);
            uint32_t _i1080;
            for (_i1080 = 0; _i1080 < _size1076; ++_i1080)
            {
              xfer += this->RiskParamaters[_i1080].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RiskParamaters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Hazard) { 
            this->Hazard = ::apache::thrift::stdcxx::shared_ptr<TDDIHazard>(new TDDIHazard);
          }
          xfer += this->Hazard->read(iprot);
          bool wasSet = false;
          if (this->Hazard->__isset.Id) { wasSet = true; }
          if (this->Hazard->__isset.Name) { wasSet = true; }
          if (this->Hazard->__isset.Description) { wasSet = true; }
          if (this->Hazard->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Hazard->__isset.Condition) { wasSet = true; }
          if (this->Hazard->__isset.HazardType) { wasSet = true; }
          if (this->Hazard->__isset.Measures) { wasSet = true; }
          if (this->Hazard->__isset.Failures) { wasSet = true; }
          if (!wasSet) { this->Hazard.reset(); }
          this->__isset.Hazard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRiskAssessment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRiskAssessment");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1081;
    for (_iter1081 = this->KeyValueMaps.begin(); _iter1081 != this->KeyValueMaps.end(); ++_iter1081)
    {
      xfer += (*_iter1081).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RelatedStandard", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->RelatedStandard);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskParamaters", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RiskParamaters.size()));
    std::vector<TDDIAbstractRiskParameterRef> ::const_iterator _iter1082;
    for (_iter1082 = this->RiskParamaters.begin(); _iter1082 != this->RiskParamaters.end(); ++_iter1082)
    {
      xfer += (*_iter1082).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Hazard", ::apache::thrift::protocol::T_STRUCT, 10);
  if (this->Hazard) {
    xfer += this->Hazard->write(oprot); 
  } else {oprot->writeStructBegin("TDDIHazard"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRiskAssessment &a, TDDIRiskAssessment &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.RelatedStandard, b.RelatedStandard);
  swap(a.RiskParamaters, b.RiskParamaters);
  swap(a.Hazard, b.Hazard);
  swap(a.__isset, b.__isset);
}

TDDIRiskAssessment::TDDIRiskAssessment(const TDDIRiskAssessment& other1083) {
  Id = other1083.Id;
  Name = other1083.Name;
  Description = other1083.Description;
  KeyValueMaps = other1083.KeyValueMaps;
  RelatedStandard = other1083.RelatedStandard;
  RiskParamaters = other1083.RiskParamaters;
  Hazard = other1083.Hazard;
  __isset = other1083.__isset;
}
TDDIRiskAssessment& TDDIRiskAssessment::operator=(const TDDIRiskAssessment& other1084) {
  Id = other1084.Id;
  Name = other1084.Name;
  Description = other1084.Description;
  KeyValueMaps = other1084.KeyValueMaps;
  RelatedStandard = other1084.RelatedStandard;
  RiskParamaters = other1084.RiskParamaters;
  Hazard = other1084.Hazard;
  __isset = other1084.__isset;
  return *this;
}
void TDDIRiskAssessment::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRiskAssessment(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "RelatedStandard=" << to_string(RelatedStandard);
  out << ", " << "RiskParamaters=" << to_string(RiskParamaters);
  out << ", " << "Hazard=" << to_string(Hazard);
  out << ")";
}


TDDIMalfunction::~TDDIMalfunction() throw() {
}


void TDDIMalfunction::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMalfunction::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMalfunction::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMalfunction::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIMalfunction::__set_Hazards(const std::vector<TDDIHazardRef> & val) {
  this->Hazards = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMalfunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMalfunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1085;
            ::apache::thrift::protocol::TType _etype1088;
            xfer += iprot->readListBegin(_etype1088, _size1085);
            this->KeyValueMaps.resize(_size1085);
            uint32_t _i1089;
            for (_i1089 = 0; _i1089 < _size1085; ++_i1089)
            {
              xfer += this->KeyValueMaps[_i1089].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Hazards.clear();
            uint32_t _size1090;
            ::apache::thrift::protocol::TType _etype1093;
            xfer += iprot->readListBegin(_etype1093, _size1090);
            this->Hazards.resize(_size1090);
            uint32_t _i1094;
            for (_i1094 = 0; _i1094 < _size1090; ++_i1094)
            {
              xfer += this->Hazards[_i1094].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Hazards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMalfunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMalfunction");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1095;
    for (_iter1095 = this->KeyValueMaps.begin(); _iter1095 != this->KeyValueMaps.end(); ++_iter1095)
    {
      xfer += (*_iter1095).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Hazards", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Hazards.size()));
    std::vector<TDDIHazardRef> ::const_iterator _iter1096;
    for (_iter1096 = this->Hazards.begin(); _iter1096 != this->Hazards.end(); ++_iter1096)
    {
      xfer += (*_iter1096).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMalfunction &a, TDDIMalfunction &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Hazards, b.Hazards);
  swap(a.__isset, b.__isset);
}

TDDIMalfunction::TDDIMalfunction(const TDDIMalfunction& other1097) {
  Id = other1097.Id;
  Name = other1097.Name;
  Description = other1097.Description;
  KeyValueMaps = other1097.KeyValueMaps;
  Hazards = other1097.Hazards;
  __isset = other1097.__isset;
}
TDDIMalfunction& TDDIMalfunction::operator=(const TDDIMalfunction& other1098) {
  Id = other1098.Id;
  Name = other1098.Name;
  Description = other1098.Description;
  KeyValueMaps = other1098.KeyValueMaps;
  Hazards = other1098.Hazards;
  __isset = other1098.__isset;
  return *this;
}
void TDDIMalfunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMalfunction(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Hazards=" << to_string(Hazards);
  out << ")";
}


TDDIHARAPackage::~TDDIHARAPackage() throw() {
}


void TDDIHARAPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHARAPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHARAPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHARAPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIHARAPackage::__set_Hazards(const std::vector<TDDIHazard> & val) {
  this->Hazards = val;
}

void TDDIHARAPackage::__set_HazardTypes(const std::vector<TDDIHazardType> & val) {
  this->HazardTypes = val;
}

void TDDIHARAPackage::__set_HazardTypeSystems(const std::vector<TDDIHazardTypeSystem> & val) {
  this->HazardTypeSystems = val;
}

void TDDIHARAPackage::__set_Malfunctions(const std::vector<TDDIMalfunction> & val) {
  this->Malfunctions = val;
}

void TDDIHARAPackage::__set_RiskAssessments(const std::vector<TDDIRiskAssessment> & val) {
  this->RiskAssessments = val;
}

void TDDIHARAPackage::__set_RiskParameters(const std::vector<TDDIAbstractRiskParameter> & val) {
  this->RiskParameters = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHARAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHARAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1099;
            ::apache::thrift::protocol::TType _etype1102;
            xfer += iprot->readListBegin(_etype1102, _size1099);
            this->KeyValueMaps.resize(_size1099);
            uint32_t _i1103;
            for (_i1103 = 0; _i1103 < _size1099; ++_i1103)
            {
              xfer += this->KeyValueMaps[_i1103].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Hazards.clear();
            uint32_t _size1104;
            ::apache::thrift::protocol::TType _etype1107;
            xfer += iprot->readListBegin(_etype1107, _size1104);
            this->Hazards.resize(_size1104);
            uint32_t _i1108;
            for (_i1108 = 0; _i1108 < _size1104; ++_i1108)
            {
              xfer += this->Hazards[_i1108].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Hazards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->HazardTypes.clear();
            uint32_t _size1109;
            ::apache::thrift::protocol::TType _etype1112;
            xfer += iprot->readListBegin(_etype1112, _size1109);
            this->HazardTypes.resize(_size1109);
            uint32_t _i1113;
            for (_i1113 = 0; _i1113 < _size1109; ++_i1113)
            {
              xfer += this->HazardTypes[_i1113].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.HazardTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->HazardTypeSystems.clear();
            uint32_t _size1114;
            ::apache::thrift::protocol::TType _etype1117;
            xfer += iprot->readListBegin(_etype1117, _size1114);
            this->HazardTypeSystems.resize(_size1114);
            uint32_t _i1118;
            for (_i1118 = 0; _i1118 < _size1114; ++_i1118)
            {
              xfer += this->HazardTypeSystems[_i1118].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.HazardTypeSystems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Malfunctions.clear();
            uint32_t _size1119;
            ::apache::thrift::protocol::TType _etype1122;
            xfer += iprot->readListBegin(_etype1122, _size1119);
            this->Malfunctions.resize(_size1119);
            uint32_t _i1123;
            for (_i1123 = 0; _i1123 < _size1119; ++_i1123)
            {
              xfer += this->Malfunctions[_i1123].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Malfunctions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RiskAssessments.clear();
            uint32_t _size1124;
            ::apache::thrift::protocol::TType _etype1127;
            xfer += iprot->readListBegin(_etype1127, _size1124);
            this->RiskAssessments.resize(_size1124);
            uint32_t _i1128;
            for (_i1128 = 0; _i1128 < _size1124; ++_i1128)
            {
              xfer += this->RiskAssessments[_i1128].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RiskAssessments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RiskParameters.clear();
            uint32_t _size1129;
            ::apache::thrift::protocol::TType _etype1132;
            xfer += iprot->readListBegin(_etype1132, _size1129);
            this->RiskParameters.resize(_size1129);
            uint32_t _i1133;
            for (_i1133 = 0; _i1133 < _size1129; ++_i1133)
            {
              xfer += this->RiskParameters[_i1133].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RiskParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHARAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHARAPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1134;
    for (_iter1134 = this->KeyValueMaps.begin(); _iter1134 != this->KeyValueMaps.end(); ++_iter1134)
    {
      xfer += (*_iter1134).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Hazards", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Hazards.size()));
    std::vector<TDDIHazard> ::const_iterator _iter1135;
    for (_iter1135 = this->Hazards.begin(); _iter1135 != this->Hazards.end(); ++_iter1135)
    {
      xfer += (*_iter1135).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HazardTypes", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->HazardTypes.size()));
    std::vector<TDDIHazardType> ::const_iterator _iter1136;
    for (_iter1136 = this->HazardTypes.begin(); _iter1136 != this->HazardTypes.end(); ++_iter1136)
    {
      xfer += (*_iter1136).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HazardTypeSystems", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->HazardTypeSystems.size()));
    std::vector<TDDIHazardTypeSystem> ::const_iterator _iter1137;
    for (_iter1137 = this->HazardTypeSystems.begin(); _iter1137 != this->HazardTypeSystems.end(); ++_iter1137)
    {
      xfer += (*_iter1137).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Malfunctions", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Malfunctions.size()));
    std::vector<TDDIMalfunction> ::const_iterator _iter1138;
    for (_iter1138 = this->Malfunctions.begin(); _iter1138 != this->Malfunctions.end(); ++_iter1138)
    {
      xfer += (*_iter1138).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskAssessments", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RiskAssessments.size()));
    std::vector<TDDIRiskAssessment> ::const_iterator _iter1139;
    for (_iter1139 = this->RiskAssessments.begin(); _iter1139 != this->RiskAssessments.end(); ++_iter1139)
    {
      xfer += (*_iter1139).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskParameters", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RiskParameters.size()));
    std::vector<TDDIAbstractRiskParameter> ::const_iterator _iter1140;
    for (_iter1140 = this->RiskParameters.begin(); _iter1140 != this->RiskParameters.end(); ++_iter1140)
    {
      xfer += (*_iter1140).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHARAPackage &a, TDDIHARAPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Hazards, b.Hazards);
  swap(a.HazardTypes, b.HazardTypes);
  swap(a.HazardTypeSystems, b.HazardTypeSystems);
  swap(a.Malfunctions, b.Malfunctions);
  swap(a.RiskAssessments, b.RiskAssessments);
  swap(a.RiskParameters, b.RiskParameters);
  swap(a.__isset, b.__isset);
}

TDDIHARAPackage::TDDIHARAPackage(const TDDIHARAPackage& other1141) {
  Id = other1141.Id;
  Name = other1141.Name;
  Description = other1141.Description;
  KeyValueMaps = other1141.KeyValueMaps;
  Hazards = other1141.Hazards;
  HazardTypes = other1141.HazardTypes;
  HazardTypeSystems = other1141.HazardTypeSystems;
  Malfunctions = other1141.Malfunctions;
  RiskAssessments = other1141.RiskAssessments;
  RiskParameters = other1141.RiskParameters;
  __isset = other1141.__isset;
}
TDDIHARAPackage& TDDIHARAPackage::operator=(const TDDIHARAPackage& other1142) {
  Id = other1142.Id;
  Name = other1142.Name;
  Description = other1142.Description;
  KeyValueMaps = other1142.KeyValueMaps;
  Hazards = other1142.Hazards;
  HazardTypes = other1142.HazardTypes;
  HazardTypeSystems = other1142.HazardTypeSystems;
  Malfunctions = other1142.Malfunctions;
  RiskAssessments = other1142.RiskAssessments;
  RiskParameters = other1142.RiskParameters;
  __isset = other1142.__isset;
  return *this;
}
void TDDIHARAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHARAPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Hazards=" << to_string(Hazards);
  out << ", " << "HazardTypes=" << to_string(HazardTypes);
  out << ", " << "HazardTypeSystems=" << to_string(HazardTypeSystems);
  out << ", " << "Malfunctions=" << to_string(Malfunctions);
  out << ", " << "RiskAssessments=" << to_string(RiskAssessments);
  out << ", " << "RiskParameters=" << to_string(RiskParameters);
  out << ")";
}


TDDIDDIPackage::~TDDIDDIPackage() throw() {
}


void TDDIDDIPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIDDIPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIDDIPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIDDIPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIDDIPackage::__set_ODEProductPackages(const std::vector<TDDIAbstractODEProductPackage> & val) {
  this->ODEProductPackages = val;
}

void TDDIDDIPackage::__set_AssuranceCasePackages(const std::vector<TDDIAbstractAssuranceCasePackage> & val) {
  this->AssuranceCasePackages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDDIPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDDIPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1143;
            ::apache::thrift::protocol::TType _etype1146;
            xfer += iprot->readListBegin(_etype1146, _size1143);
            this->KeyValueMaps.resize(_size1143);
            uint32_t _i1147;
            for (_i1147 = 0; _i1147 < _size1143; ++_i1147)
            {
              xfer += this->KeyValueMaps[_i1147].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ODEProductPackages.clear();
            uint32_t _size1148;
            ::apache::thrift::protocol::TType _etype1151;
            xfer += iprot->readListBegin(_etype1151, _size1148);
            this->ODEProductPackages.resize(_size1148);
            uint32_t _i1152;
            for (_i1152 = 0; _i1152 < _size1148; ++_i1152)
            {
              xfer += this->ODEProductPackages[_i1152].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ODEProductPackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackages.clear();
            uint32_t _size1153;
            ::apache::thrift::protocol::TType _etype1156;
            xfer += iprot->readListBegin(_etype1156, _size1153);
            this->AssuranceCasePackages.resize(_size1153);
            uint32_t _i1157;
            for (_i1157 = 0; _i1157 < _size1153; ++_i1157)
            {
              xfer += this->AssuranceCasePackages[_i1157].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDDIPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDDIPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1158;
    for (_iter1158 = this->KeyValueMaps.begin(); _iter1158 != this->KeyValueMaps.end(); ++_iter1158)
    {
      xfer += (*_iter1158).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ODEProductPackages", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ODEProductPackages.size()));
    std::vector<TDDIAbstractODEProductPackage> ::const_iterator _iter1159;
    for (_iter1159 = this->ODEProductPackages.begin(); _iter1159 != this->ODEProductPackages.end(); ++_iter1159)
    {
      xfer += (*_iter1159).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackages", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackages.size()));
    std::vector<TDDIAbstractAssuranceCasePackage> ::const_iterator _iter1160;
    for (_iter1160 = this->AssuranceCasePackages.begin(); _iter1160 != this->AssuranceCasePackages.end(); ++_iter1160)
    {
      xfer += (*_iter1160).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDDIPackage &a, TDDIDDIPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.ODEProductPackages, b.ODEProductPackages);
  swap(a.AssuranceCasePackages, b.AssuranceCasePackages);
  swap(a.__isset, b.__isset);
}

TDDIDDIPackage::TDDIDDIPackage(const TDDIDDIPackage& other1161) {
  Id = other1161.Id;
  Name = other1161.Name;
  Description = other1161.Description;
  KeyValueMaps = other1161.KeyValueMaps;
  ODEProductPackages = other1161.ODEProductPackages;
  AssuranceCasePackages = other1161.AssuranceCasePackages;
  __isset = other1161.__isset;
}
TDDIDDIPackage& TDDIDDIPackage::operator=(const TDDIDDIPackage& other1162) {
  Id = other1162.Id;
  Name = other1162.Name;
  Description = other1162.Description;
  KeyValueMaps = other1162.KeyValueMaps;
  ODEProductPackages = other1162.ODEProductPackages;
  AssuranceCasePackages = other1162.AssuranceCasePackages;
  __isset = other1162.__isset;
  return *this;
}
void TDDIDDIPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDDIPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "ODEProductPackages=" << to_string(ODEProductPackages);
  out << ", " << "AssuranceCasePackages=" << to_string(AssuranceCasePackages);
  out << ")";
}


TDDIODEProductPackageUnion::~TDDIODEProductPackageUnion() throw() {
}


void TDDIODEProductPackageUnion::__set_DesignPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDesignPackage> val) {
  this->DesignPackage = val;
__isset.DesignPackage = true;
}

void TDDIODEProductPackageUnion::__set_FailureLogicPackage(::apache::thrift::stdcxx::shared_ptr<TDDIFailureLogicPackage> val) {
  this->FailureLogicPackage = val;
__isset.FailureLogicPackage = true;
}

void TDDIODEProductPackageUnion::__set_RequirementPackage(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> val) {
  this->RequirementPackage = val;
__isset.RequirementPackage = true;
}

void TDDIODEProductPackageUnion::__set_HARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIHARAPackage> val) {
  this->HARAPackage = val;
__isset.HARAPackage = true;
}

void TDDIODEProductPackageUnion::__set_DependabilityPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> val) {
  this->DependabilityPackage = val;
__isset.DependabilityPackage = true;
}

void TDDIODEProductPackageUnion::__set_TARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDITARAPackage> val) {
  this->TARAPackage = val;
__isset.TARAPackage = true;
}

void TDDIODEProductPackageUnion::__set_DomainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> val) {
  this->DomainPackage = val;
__isset.DomainPackage = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIODEProductPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIODEProductPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DesignPackage) { 
            this->DesignPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDesignPackage>(new TDDIDesignPackage);
          }
          xfer += this->DesignPackage->read(iprot);
          bool wasSet = false;
          if (this->DesignPackage->__isset.Id) { wasSet = true; }
          if (this->DesignPackage->__isset.Name) { wasSet = true; }
          if (this->DesignPackage->__isset.Description) { wasSet = true; }
          if (this->DesignPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DesignPackage->__isset.Systems) { wasSet = true; }
          if (this->DesignPackage->__isset.Functions) { wasSet = true; }
          if (!wasSet) { this->DesignPackage.reset(); }
          this->__isset.DesignPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailureLogicPackage) { 
            this->FailureLogicPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIFailureLogicPackage>(new TDDIFailureLogicPackage);
          }
          xfer += this->FailureLogicPackage->read(iprot);
          bool wasSet = false;
          if (this->FailureLogicPackage->__isset.Id) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.Name) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.Description) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->FailureLogicPackage->__isset.FailureModels) { wasSet = true; }
          if (!wasSet) { this->FailureLogicPackage.reset(); }
          this->__isset.FailureLogicPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementPackage) { 
            this->RequirementPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage>(new TDDIRequirementPackage);
          }
          xfer += this->RequirementPackage->read(iprot);
          bool wasSet = false;
          if (this->RequirementPackage->__isset.Id) { wasSet = true; }
          if (this->RequirementPackage->__isset.Name) { wasSet = true; }
          if (this->RequirementPackage->__isset.Description) { wasSet = true; }
          if (this->RequirementPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->RequirementPackage->__isset.RequirementSources) { wasSet = true; }
          if (this->RequirementPackage->__isset.DependabilityRequirements) { wasSet = true; }
          if (!wasSet) { this->RequirementPackage.reset(); }
          this->__isset.RequirementPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->HARAPackage) { 
            this->HARAPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIHARAPackage>(new TDDIHARAPackage);
          }
          xfer += this->HARAPackage->read(iprot);
          bool wasSet = false;
          if (this->HARAPackage->__isset.Id) { wasSet = true; }
          if (this->HARAPackage->__isset.Name) { wasSet = true; }
          if (this->HARAPackage->__isset.Description) { wasSet = true; }
          if (this->HARAPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->HARAPackage->__isset.Hazards) { wasSet = true; }
          if (this->HARAPackage->__isset.HazardTypes) { wasSet = true; }
          if (this->HARAPackage->__isset.HazardTypeSystems) { wasSet = true; }
          if (this->HARAPackage->__isset.Malfunctions) { wasSet = true; }
          if (this->HARAPackage->__isset.RiskAssessments) { wasSet = true; }
          if (this->HARAPackage->__isset.RiskParameters) { wasSet = true; }
          if (!wasSet) { this->HARAPackage.reset(); }
          this->__isset.HARAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DependabilityPackage) { 
            this->DependabilityPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage>(new TDDIDependabilityPackage);
          }
          xfer += this->DependabilityPackage->read(iprot);
          bool wasSet = false;
          if (this->DependabilityPackage->__isset.Id) { wasSet = true; }
          if (this->DependabilityPackage->__isset.Name) { wasSet = true; }
          if (this->DependabilityPackage->__isset.Description) { wasSet = true; }
          if (this->DependabilityPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DependabilityPackage->__isset.Measures) { wasSet = true; }
          if (this->DependabilityPackage->__isset.MeasureTypes) { wasSet = true; }
          if (this->DependabilityPackage->__isset.MaintenanceProcedures) { wasSet = true; }
          if (this->DependabilityPackage->__isset.DomainPackages) { wasSet = true; }
          if (this->DependabilityPackage->__isset.TARAPackages) { wasSet = true; }
          if (this->DependabilityPackage->__isset.HARAPackages) { wasSet = true; }
          if (this->DependabilityPackage->__isset.RequirementPackages) { wasSet = true; }
          if (!wasSet) { this->DependabilityPackage.reset(); }
          this->__isset.DependabilityPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TARAPackage) { 
            this->TARAPackage = ::apache::thrift::stdcxx::shared_ptr<TDDITARAPackage>(new TDDITARAPackage);
          }
          xfer += this->TARAPackage->read(iprot);
          bool wasSet = false;
          if (this->TARAPackage->__isset.Id) { wasSet = true; }
          if (this->TARAPackage->__isset.Name) { wasSet = true; }
          if (this->TARAPackage->__isset.Description) { wasSet = true; }
          if (this->TARAPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->TARAPackage->__isset.IdentifiedRisks) { wasSet = true; }
          if (this->TARAPackage->__isset.Controls) { wasSet = true; }
          if (this->TARAPackage->__isset.ConsideredAssets) { wasSet = true; }
          if (this->TARAPackage->__isset.ConsideredThreatAgents) { wasSet = true; }
          if (!wasSet) { this->TARAPackage.reset(); }
          this->__isset.TARAPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->DomainPackage) { 
            this->DomainPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage>(new TDDIDomainPackage);
          }
          xfer += this->DomainPackage->read(iprot);
          bool wasSet = false;
          if (this->DomainPackage->__isset.Id) { wasSet = true; }
          if (this->DomainPackage->__isset.Name) { wasSet = true; }
          if (this->DomainPackage->__isset.Description) { wasSet = true; }
          if (this->DomainPackage->__isset.KeyValueMaps) { wasSet = true; }
          if (this->DomainPackage->__isset.Standards) { wasSet = true; }
          if (this->DomainPackage->__isset.AssuranceLevels) { wasSet = true; }
          if (!wasSet) { this->DomainPackage.reset(); }
          this->__isset.DomainPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIODEProductPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIODEProductPackageUnion");

  if (this->__isset.DesignPackage) {
    xfer += oprot->writeFieldBegin("DesignPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->DesignPackage) {
      xfer += this->DesignPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDesignPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.FailureLogicPackage) {
    xfer += oprot->writeFieldBegin("FailureLogicPackage", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->FailureLogicPackage) {
      xfer += this->FailureLogicPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIFailureLogicPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.RequirementPackage) {
    xfer += oprot->writeFieldBegin("RequirementPackage", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->RequirementPackage) {
      xfer += this->RequirementPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIRequirementPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.HARAPackage) {
    xfer += oprot->writeFieldBegin("HARAPackage", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->HARAPackage) {
      xfer += this->HARAPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIHARAPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DependabilityPackage) {
    xfer += oprot->writeFieldBegin("DependabilityPackage", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->DependabilityPackage) {
      xfer += this->DependabilityPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDependabilityPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TARAPackage) {
    xfer += oprot->writeFieldBegin("TARAPackage", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->TARAPackage) {
      xfer += this->TARAPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDITARAPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.DomainPackage) {
    xfer += oprot->writeFieldBegin("DomainPackage", ::apache::thrift::protocol::T_STRUCT, 7);
    if (this->DomainPackage) {
      xfer += this->DomainPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDomainPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIODEProductPackageUnion &a, TDDIODEProductPackageUnion &b) {
  using ::std::swap;
  swap(a.DesignPackage, b.DesignPackage);
  swap(a.FailureLogicPackage, b.FailureLogicPackage);
  swap(a.RequirementPackage, b.RequirementPackage);
  swap(a.HARAPackage, b.HARAPackage);
  swap(a.DependabilityPackage, b.DependabilityPackage);
  swap(a.TARAPackage, b.TARAPackage);
  swap(a.DomainPackage, b.DomainPackage);
  swap(a.__isset, b.__isset);
}

TDDIODEProductPackageUnion::TDDIODEProductPackageUnion(const TDDIODEProductPackageUnion& other1163) {
  DesignPackage = other1163.DesignPackage;
  FailureLogicPackage = other1163.FailureLogicPackage;
  RequirementPackage = other1163.RequirementPackage;
  HARAPackage = other1163.HARAPackage;
  DependabilityPackage = other1163.DependabilityPackage;
  TARAPackage = other1163.TARAPackage;
  DomainPackage = other1163.DomainPackage;
  __isset = other1163.__isset;
}
TDDIODEProductPackageUnion& TDDIODEProductPackageUnion::operator=(const TDDIODEProductPackageUnion& other1164) {
  DesignPackage = other1164.DesignPackage;
  FailureLogicPackage = other1164.FailureLogicPackage;
  RequirementPackage = other1164.RequirementPackage;
  HARAPackage = other1164.HARAPackage;
  DependabilityPackage = other1164.DependabilityPackage;
  TARAPackage = other1164.TARAPackage;
  DomainPackage = other1164.DomainPackage;
  __isset = other1164.__isset;
  return *this;
}
void TDDIODEProductPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIODEProductPackageUnion(";
  out << "DesignPackage="; (__isset.DesignPackage ? (out << to_string(DesignPackage)) : (out << "<null>"));
  out << ", " << "FailureLogicPackage="; (__isset.FailureLogicPackage ? (out << to_string(FailureLogicPackage)) : (out << "<null>"));
  out << ", " << "RequirementPackage="; (__isset.RequirementPackage ? (out << to_string(RequirementPackage)) : (out << "<null>"));
  out << ", " << "HARAPackage="; (__isset.HARAPackage ? (out << to_string(HARAPackage)) : (out << "<null>"));
  out << ", " << "DependabilityPackage="; (__isset.DependabilityPackage ? (out << to_string(DependabilityPackage)) : (out << "<null>"));
  out << ", " << "TARAPackage="; (__isset.TARAPackage ? (out << to_string(TARAPackage)) : (out << "<null>"));
  out << ", " << "DomainPackage="; (__isset.DomainPackage ? (out << to_string(DomainPackage)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractODEProductPackage::~TDDIAbstractODEProductPackage() throw() {
}


void TDDIAbstractODEProductPackage::__set_UsedODEProductPackage(const TDDIODEProductPackageUnion& val) {
  this->UsedODEProductPackage = val;
}

void TDDIAbstractODEProductPackage::__set_UsedODEProductPackageType(const TDDIODEProductPackageUnionType val) {
  this->UsedODEProductPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractODEProductPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractODEProductPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedODEProductPackage.read(iprot);
          this->__isset.UsedODEProductPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1165;
          xfer += iprot->readI32(ecast1165);
          this->UsedODEProductPackageType = (TDDIODEProductPackageUnionType)ecast1165;
          this->__isset.UsedODEProductPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractODEProductPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractODEProductPackage");

  xfer += oprot->writeFieldBegin("UsedODEProductPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedODEProductPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedODEProductPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedODEProductPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractODEProductPackage &a, TDDIAbstractODEProductPackage &b) {
  using ::std::swap;
  swap(a.UsedODEProductPackage, b.UsedODEProductPackage);
  swap(a.UsedODEProductPackageType, b.UsedODEProductPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractODEProductPackage::TDDIAbstractODEProductPackage(const TDDIAbstractODEProductPackage& other1166) {
  UsedODEProductPackage = other1166.UsedODEProductPackage;
  UsedODEProductPackageType = other1166.UsedODEProductPackageType;
  __isset = other1166.__isset;
}
TDDIAbstractODEProductPackage& TDDIAbstractODEProductPackage::operator=(const TDDIAbstractODEProductPackage& other1167) {
  UsedODEProductPackage = other1167.UsedODEProductPackage;
  UsedODEProductPackageType = other1167.UsedODEProductPackageType;
  __isset = other1167.__isset;
  return *this;
}
void TDDIAbstractODEProductPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractODEProductPackage(";
  out << "UsedODEProductPackage=" << to_string(UsedODEProductPackage);
  out << ", " << "UsedODEProductPackageType=" << to_string(UsedODEProductPackageType);
  out << ")";
}


TDDIState::~TDDIState() throw() {
}


void TDDIState::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIState::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIState::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIState::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIState::__set_IsInitialState(const bool val) {
  this->IsInitialState = val;
}

void TDDIState::__set_IsFailState(const bool val) {
  this->IsFailState = val;
}

void TDDIState::__set_FailState(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val) {
  this->FailState = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIState& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIState::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1168;
            ::apache::thrift::protocol::TType _etype1171;
            xfer += iprot->readListBegin(_etype1171, _size1168);
            this->KeyValueMaps.resize(_size1168);
            uint32_t _i1172;
            for (_i1172 = 0; _i1172 < _size1168; ++_i1172)
            {
              xfer += this->KeyValueMaps[_i1172].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsInitialState);
          this->__isset.IsInitialState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsFailState);
          this->__isset.IsFailState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->FailState) { 
            this->FailState = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure>(new TDDIAbstractFailure);
          }
          xfer += this->FailState->read(iprot);
          bool wasSet = false;
          if (this->FailState->__isset.UsedFailure) { wasSet = true; }
          if (this->FailState->__isset.UsedFailureType) { wasSet = true; }
          if (!wasSet) { this->FailState.reset(); }
          this->__isset.FailState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIState");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1173;
    for (_iter1173 = this->KeyValueMaps.begin(); _iter1173 != this->KeyValueMaps.end(); ++_iter1173)
    {
      xfer += (*_iter1173).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsInitialState", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->IsInitialState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsFailState", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->IsFailState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailState", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->FailState) {
    xfer += this->FailState->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractFailure"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIState &a, TDDIState &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.IsInitialState, b.IsInitialState);
  swap(a.IsFailState, b.IsFailState);
  swap(a.FailState, b.FailState);
  swap(a.__isset, b.__isset);
}

TDDIState::TDDIState(const TDDIState& other1174) {
  Id = other1174.Id;
  Name = other1174.Name;
  Description = other1174.Description;
  KeyValueMaps = other1174.KeyValueMaps;
  IsInitialState = other1174.IsInitialState;
  IsFailState = other1174.IsFailState;
  FailState = other1174.FailState;
  __isset = other1174.__isset;
}
TDDIState& TDDIState::operator=(const TDDIState& other1175) {
  Id = other1175.Id;
  Name = other1175.Name;
  Description = other1175.Description;
  KeyValueMaps = other1175.KeyValueMaps;
  IsInitialState = other1175.IsInitialState;
  IsFailState = other1175.IsFailState;
  FailState = other1175.FailState;
  __isset = other1175.__isset;
  return *this;
}
void TDDIState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIState(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "IsInitialState=" << to_string(IsInitialState);
  out << ", " << "IsFailState=" << to_string(IsFailState);
  out << ", " << "FailState=" << to_string(FailState);
  out << ")";
}


TDDITransition::~TDDITransition() throw() {
}


void TDDITransition::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDITransition::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDITransition::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDITransition::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDITransition::__set_Transition(const double val) {
  this->Transition = val;
}

void TDDITransition::__set_TransitionProbDistribution(const TDDIProbDist& val) {
  this->TransitionProbDistribution = val;
}

void TDDITransition::__set_FromStates(const std::vector<TDDIStateRef> & val) {
  this->FromStates = val;
}

void TDDITransition::__set_ToStates(const std::vector<TDDIStateRef> & val) {
  this->ToStates = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITransition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITransition::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1176;
            ::apache::thrift::protocol::TType _etype1179;
            xfer += iprot->readListBegin(_etype1179, _size1176);
            this->KeyValueMaps.resize(_size1176);
            uint32_t _i1180;
            for (_i1180 = 0; _i1180 < _size1176; ++_i1180)
            {
              xfer += this->KeyValueMaps[_i1180].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Transition);
          this->__isset.Transition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->TransitionProbDistribution.read(iprot);
          this->__isset.TransitionProbDistribution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->FromStates.clear();
            uint32_t _size1181;
            ::apache::thrift::protocol::TType _etype1184;
            xfer += iprot->readListBegin(_etype1184, _size1181);
            this->FromStates.resize(_size1181);
            uint32_t _i1185;
            for (_i1185 = 0; _i1185 < _size1181; ++_i1185)
            {
              xfer += this->FromStates[_i1185].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.FromStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ToStates.clear();
            uint32_t _size1186;
            ::apache::thrift::protocol::TType _etype1189;
            xfer += iprot->readListBegin(_etype1189, _size1186);
            this->ToStates.resize(_size1186);
            uint32_t _i1190;
            for (_i1190 = 0; _i1190 < _size1186; ++_i1190)
            {
              xfer += this->ToStates[_i1190].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ToStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITransition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITransition");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1191;
    for (_iter1191 = this->KeyValueMaps.begin(); _iter1191 != this->KeyValueMaps.end(); ++_iter1191)
    {
      xfer += (*_iter1191).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Transition", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->Transition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TransitionProbDistribution", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->TransitionProbDistribution.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FromStates", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->FromStates.size()));
    std::vector<TDDIStateRef> ::const_iterator _iter1192;
    for (_iter1192 = this->FromStates.begin(); _iter1192 != this->FromStates.end(); ++_iter1192)
    {
      xfer += (*_iter1192).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ToStates", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ToStates.size()));
    std::vector<TDDIStateRef> ::const_iterator _iter1193;
    for (_iter1193 = this->ToStates.begin(); _iter1193 != this->ToStates.end(); ++_iter1193)
    {
      xfer += (*_iter1193).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITransition &a, TDDITransition &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Transition, b.Transition);
  swap(a.TransitionProbDistribution, b.TransitionProbDistribution);
  swap(a.FromStates, b.FromStates);
  swap(a.ToStates, b.ToStates);
  swap(a.__isset, b.__isset);
}

TDDITransition::TDDITransition(const TDDITransition& other1194) {
  Id = other1194.Id;
  Name = other1194.Name;
  Description = other1194.Description;
  KeyValueMaps = other1194.KeyValueMaps;
  Transition = other1194.Transition;
  TransitionProbDistribution = other1194.TransitionProbDistribution;
  FromStates = other1194.FromStates;
  ToStates = other1194.ToStates;
  __isset = other1194.__isset;
}
TDDITransition& TDDITransition::operator=(const TDDITransition& other1195) {
  Id = other1195.Id;
  Name = other1195.Name;
  Description = other1195.Description;
  KeyValueMaps = other1195.KeyValueMaps;
  Transition = other1195.Transition;
  TransitionProbDistribution = other1195.TransitionProbDistribution;
  FromStates = other1195.FromStates;
  ToStates = other1195.ToStates;
  __isset = other1195.__isset;
  return *this;
}
void TDDITransition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITransition(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Transition=" << to_string(Transition);
  out << ", " << "TransitionProbDistribution=" << to_string(TransitionProbDistribution);
  out << ", " << "FromStates=" << to_string(FromStates);
  out << ", " << "ToStates=" << to_string(ToStates);
  out << ")";
}


TDDIMarkovChain::~TDDIMarkovChain() throw() {
}


void TDDIMarkovChain::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIMarkovChain::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIMarkovChain::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIMarkovChain::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIMarkovChain::__set_MinimalCutSets(const std::vector<TDDIMinimalCutSets> & val) {
  this->MinimalCutSets = val;
}

void TDDIMarkovChain::__set_Failures(const std::vector<TDDIAbstractFailure> & val) {
  this->Failures = val;
}

void TDDIMarkovChain::__set_SubModels(const std::vector<TDDIAbstractFailureModelRef> & val) {
  this->SubModels = val;
}

void TDDIMarkovChain::__set_Transitions(const std::vector<TDDITransition> & val) {
  this->Transitions = val;
}

void TDDIMarkovChain::__set_States(const std::vector<TDDIState> & val) {
  this->States = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMarkovChain& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMarkovChain::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1196;
            ::apache::thrift::protocol::TType _etype1199;
            xfer += iprot->readListBegin(_etype1199, _size1196);
            this->KeyValueMaps.resize(_size1196);
            uint32_t _i1200;
            for (_i1200 = 0; _i1200 < _size1196; ++_i1200)
            {
              xfer += this->KeyValueMaps[_i1200].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MinimalCutSets.clear();
            uint32_t _size1201;
            ::apache::thrift::protocol::TType _etype1204;
            xfer += iprot->readListBegin(_etype1204, _size1201);
            this->MinimalCutSets.resize(_size1201);
            uint32_t _i1205;
            for (_i1205 = 0; _i1205 < _size1201; ++_i1205)
            {
              xfer += this->MinimalCutSets[_i1205].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MinimalCutSets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size1206;
            ::apache::thrift::protocol::TType _etype1209;
            xfer += iprot->readListBegin(_etype1209, _size1206);
            this->Failures.resize(_size1206);
            uint32_t _i1210;
            for (_i1210 = 0; _i1210 < _size1206; ++_i1210)
            {
              xfer += this->Failures[_i1210].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SubModels.clear();
            uint32_t _size1211;
            ::apache::thrift::protocol::TType _etype1214;
            xfer += iprot->readListBegin(_etype1214, _size1211);
            this->SubModels.resize(_size1211);
            uint32_t _i1215;
            for (_i1215 = 0; _i1215 < _size1211; ++_i1215)
            {
              xfer += this->SubModels[_i1215].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SubModels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Transitions.clear();
            uint32_t _size1216;
            ::apache::thrift::protocol::TType _etype1219;
            xfer += iprot->readListBegin(_etype1219, _size1216);
            this->Transitions.resize(_size1216);
            uint32_t _i1220;
            for (_i1220 = 0; _i1220 < _size1216; ++_i1220)
            {
              xfer += this->Transitions[_i1220].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Transitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->States.clear();
            uint32_t _size1221;
            ::apache::thrift::protocol::TType _etype1224;
            xfer += iprot->readListBegin(_etype1224, _size1221);
            this->States.resize(_size1221);
            uint32_t _i1225;
            for (_i1225 = 0; _i1225 < _size1221; ++_i1225)
            {
              xfer += this->States[_i1225].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.States = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMarkovChain::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMarkovChain");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1226;
    for (_iter1226 = this->KeyValueMaps.begin(); _iter1226 != this->KeyValueMaps.end(); ++_iter1226)
    {
      xfer += (*_iter1226).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MinimalCutSets", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MinimalCutSets.size()));
    std::vector<TDDIMinimalCutSets> ::const_iterator _iter1227;
    for (_iter1227 = this->MinimalCutSets.begin(); _iter1227 != this->MinimalCutSets.end(); ++_iter1227)
    {
      xfer += (*_iter1227).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailure> ::const_iterator _iter1228;
    for (_iter1228 = this->Failures.begin(); _iter1228 != this->Failures.end(); ++_iter1228)
    {
      xfer += (*_iter1228).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SubModels", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SubModels.size()));
    std::vector<TDDIAbstractFailureModelRef> ::const_iterator _iter1229;
    for (_iter1229 = this->SubModels.begin(); _iter1229 != this->SubModels.end(); ++_iter1229)
    {
      xfer += (*_iter1229).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Transitions", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Transitions.size()));
    std::vector<TDDITransition> ::const_iterator _iter1230;
    for (_iter1230 = this->Transitions.begin(); _iter1230 != this->Transitions.end(); ++_iter1230)
    {
      xfer += (*_iter1230).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("States", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->States.size()));
    std::vector<TDDIState> ::const_iterator _iter1231;
    for (_iter1231 = this->States.begin(); _iter1231 != this->States.end(); ++_iter1231)
    {
      xfer += (*_iter1231).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMarkovChain &a, TDDIMarkovChain &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.MinimalCutSets, b.MinimalCutSets);
  swap(a.Failures, b.Failures);
  swap(a.SubModels, b.SubModels);
  swap(a.Transitions, b.Transitions);
  swap(a.States, b.States);
  swap(a.__isset, b.__isset);
}

TDDIMarkovChain::TDDIMarkovChain(const TDDIMarkovChain& other1232) {
  Id = other1232.Id;
  Name = other1232.Name;
  Description = other1232.Description;
  KeyValueMaps = other1232.KeyValueMaps;
  MinimalCutSets = other1232.MinimalCutSets;
  Failures = other1232.Failures;
  SubModels = other1232.SubModels;
  Transitions = other1232.Transitions;
  States = other1232.States;
  __isset = other1232.__isset;
}
TDDIMarkovChain& TDDIMarkovChain::operator=(const TDDIMarkovChain& other1233) {
  Id = other1233.Id;
  Name = other1233.Name;
  Description = other1233.Description;
  KeyValueMaps = other1233.KeyValueMaps;
  MinimalCutSets = other1233.MinimalCutSets;
  Failures = other1233.Failures;
  SubModels = other1233.SubModels;
  Transitions = other1233.Transitions;
  States = other1233.States;
  __isset = other1233.__isset;
  return *this;
}
void TDDIMarkovChain::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMarkovChain(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "MinimalCutSets=" << to_string(MinimalCutSets);
  out << ", " << "Failures=" << to_string(Failures);
  out << ", " << "SubModels=" << to_string(SubModels);
  out << ", " << "Transitions=" << to_string(Transitions);
  out << ", " << "States=" << to_string(States);
  out << ")";
}


TDDILegalContract::~TDDILegalContract() throw() {
}


void TDDILegalContract::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDILegalContract::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDILegalContract::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDILegalContract::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILegalContract& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILegalContract::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1234;
            ::apache::thrift::protocol::TType _etype1237;
            xfer += iprot->readListBegin(_etype1237, _size1234);
            this->KeyValueMaps.resize(_size1234);
            uint32_t _i1238;
            for (_i1238 = 0; _i1238 < _size1234; ++_i1238)
            {
              xfer += this->KeyValueMaps[_i1238].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILegalContract::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILegalContract");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1239;
    for (_iter1239 = this->KeyValueMaps.begin(); _iter1239 != this->KeyValueMaps.end(); ++_iter1239)
    {
      xfer += (*_iter1239).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILegalContract &a, TDDILegalContract &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.__isset, b.__isset);
}

TDDILegalContract::TDDILegalContract(const TDDILegalContract& other1240) {
  Id = other1240.Id;
  Name = other1240.Name;
  Description = other1240.Description;
  KeyValueMaps = other1240.KeyValueMaps;
  __isset = other1240.__isset;
}
TDDILegalContract& TDDILegalContract::operator=(const TDDILegalContract& other1241) {
  Id = other1241.Id;
  Name = other1241.Name;
  Description = other1241.Description;
  KeyValueMaps = other1241.KeyValueMaps;
  __isset = other1241.__isset;
  return *this;
}
void TDDILegalContract::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILegalContract(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ")";
}


TDDIRequirementSourceUnion::~TDDIRequirementSourceUnion() throw() {
}


void TDDIRequirementSourceUnion::__set_LegalContract(::apache::thrift::stdcxx::shared_ptr<TDDILegalContract> val) {
  this->LegalContract = val;
__isset.LegalContract = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIRequirementSourceUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRequirementSourceUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->LegalContract) { 
            this->LegalContract = ::apache::thrift::stdcxx::shared_ptr<TDDILegalContract>(new TDDILegalContract);
          }
          xfer += this->LegalContract->read(iprot);
          bool wasSet = false;
          if (this->LegalContract->__isset.Id) { wasSet = true; }
          if (this->LegalContract->__isset.Name) { wasSet = true; }
          if (this->LegalContract->__isset.Description) { wasSet = true; }
          if (this->LegalContract->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->LegalContract.reset(); }
          this->__isset.LegalContract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRequirementSourceUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRequirementSourceUnion");

  if (this->__isset.LegalContract) {
    xfer += oprot->writeFieldBegin("LegalContract", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->LegalContract) {
      xfer += this->LegalContract->write(oprot); 
    } else {oprot->writeStructBegin("TDDILegalContract"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRequirementSourceUnion &a, TDDIRequirementSourceUnion &b) {
  using ::std::swap;
  swap(a.LegalContract, b.LegalContract);
  swap(a.__isset, b.__isset);
}

TDDIRequirementSourceUnion::TDDIRequirementSourceUnion(const TDDIRequirementSourceUnion& other1242) {
  LegalContract = other1242.LegalContract;
  __isset = other1242.__isset;
}
TDDIRequirementSourceUnion& TDDIRequirementSourceUnion::operator=(const TDDIRequirementSourceUnion& other1243) {
  LegalContract = other1243.LegalContract;
  __isset = other1243.__isset;
  return *this;
}
void TDDIRequirementSourceUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRequirementSourceUnion(";
  out << "LegalContract="; (__isset.LegalContract ? (out << to_string(LegalContract)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractRequirementSource::~TDDIAbstractRequirementSource() throw() {
}


void TDDIAbstractRequirementSource::__set_UsedRequirementSource(const TDDIRequirementSourceUnion& val) {
  this->UsedRequirementSource = val;
}

void TDDIAbstractRequirementSource::__set_UsedRequirementSourceType(const TDDIRequirementSourceUnionType val) {
  this->UsedRequirementSourceType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementSource& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractRequirementSource::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedRequirementSource.read(iprot);
          this->__isset.UsedRequirementSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1244;
          xfer += iprot->readI32(ecast1244);
          this->UsedRequirementSourceType = (TDDIRequirementSourceUnionType)ecast1244;
          this->__isset.UsedRequirementSourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractRequirementSource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractRequirementSource");

  xfer += oprot->writeFieldBegin("UsedRequirementSource", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedRequirementSource.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedRequirementSourceType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedRequirementSourceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractRequirementSource &a, TDDIAbstractRequirementSource &b) {
  using ::std::swap;
  swap(a.UsedRequirementSource, b.UsedRequirementSource);
  swap(a.UsedRequirementSourceType, b.UsedRequirementSourceType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractRequirementSource::TDDIAbstractRequirementSource(const TDDIAbstractRequirementSource& other1245) {
  UsedRequirementSource = other1245.UsedRequirementSource;
  UsedRequirementSourceType = other1245.UsedRequirementSourceType;
  __isset = other1245.__isset;
}
TDDIAbstractRequirementSource& TDDIAbstractRequirementSource::operator=(const TDDIAbstractRequirementSource& other1246) {
  UsedRequirementSource = other1246.UsedRequirementSource;
  UsedRequirementSourceType = other1246.UsedRequirementSourceType;
  __isset = other1246.__isset;
  return *this;
}
void TDDIAbstractRequirementSource::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractRequirementSource(";
  out << "UsedRequirementSource=" << to_string(UsedRequirementSource);
  out << ", " << "UsedRequirementSourceType=" << to_string(UsedRequirementSourceType);
  out << ")";
}


TDDISafetyRequirement::~TDDISafetyRequirement() throw() {
}


void TDDISafetyRequirement::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISafetyRequirement::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISafetyRequirement::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISafetyRequirement::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISafetyRequirement::__set_DecompositionArgument(const std::string& val) {
  this->DecompositionArgument = val;
}

void TDDISafetyRequirement::__set_RefinedRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->RefinedRequirements = val;
}

void TDDISafetyRequirement::__set_RequirementSource(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> val) {
  this->RequirementSource = val;
}

void TDDISafetyRequirement::__set_Measures(const std::vector<TDDIAbstractMeasureRef> & val) {
  this->Measures = val;
}

void TDDISafetyRequirement::__set_Failures(const std::vector<TDDIAbstractFailureRef> & val) {
  this->Failures = val;
}

void TDDISafetyRequirement::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISafetyRequirement::__set_MaintenanceProcedures(const std::vector<TDDIMaintenanceProcedureRef> & val) {
  this->MaintenanceProcedures = val;
}

void TDDISafetyRequirement::__set_Hazards(const std::vector<TDDIHazardRef> & val) {
  this->Hazards = val;
}

void TDDISafetyRequirement::__set_FailureReactionTime(const double val) {
  this->FailureReactionTime = val;
}

void TDDISafetyRequirement::__set_FailureDetectionTime(const double val) {
  this->FailureDetectionTime = val;
}

void TDDISafetyRequirement::__set_FailureLatencyTime(const double val) {
  this->FailureLatencyTime = val;
}

void TDDISafetyRequirement::__set_IsSafetyGoal(const bool val) {
  this->IsSafetyGoal = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISafetyRequirement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISafetyRequirement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1247;
            ::apache::thrift::protocol::TType _etype1250;
            xfer += iprot->readListBegin(_etype1250, _size1247);
            this->KeyValueMaps.resize(_size1247);
            uint32_t _i1251;
            for (_i1251 = 0; _i1251 < _size1247; ++_i1251)
            {
              xfer += this->KeyValueMaps[_i1251].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DecompositionArgument);
          this->__isset.DecompositionArgument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RefinedRequirements.clear();
            uint32_t _size1252;
            ::apache::thrift::protocol::TType _etype1255;
            xfer += iprot->readListBegin(_etype1255, _size1252);
            this->RefinedRequirements.resize(_size1252);
            uint32_t _i1256;
            for (_i1256 = 0; _i1256 < _size1252; ++_i1256)
            {
              xfer += this->RefinedRequirements[_i1256].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RefinedRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementSource) { 
            this->RequirementSource = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource>(new TDDIAbstractRequirementSource);
          }
          xfer += this->RequirementSource->read(iprot);
          bool wasSet = false;
          if (this->RequirementSource->__isset.UsedRequirementSource) { wasSet = true; }
          if (this->RequirementSource->__isset.UsedRequirementSourceType) { wasSet = true; }
          if (!wasSet) { this->RequirementSource.reset(); }
          this->__isset.RequirementSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Measures.clear();
            uint32_t _size1257;
            ::apache::thrift::protocol::TType _etype1260;
            xfer += iprot->readListBegin(_etype1260, _size1257);
            this->Measures.resize(_size1257);
            uint32_t _i1261;
            for (_i1261 = 0; _i1261 < _size1257; ++_i1261)
            {
              xfer += this->Measures[_i1261].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Measures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size1262;
            ::apache::thrift::protocol::TType _etype1265;
            xfer += iprot->readListBegin(_etype1265, _size1262);
            this->Failures.resize(_size1262);
            uint32_t _i1266;
            for (_i1266 = 0; _i1266 < _size1262; ++_i1266)
            {
              xfer += this->Failures[_i1266].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MaintenanceProcedures.clear();
            uint32_t _size1267;
            ::apache::thrift::protocol::TType _etype1270;
            xfer += iprot->readListBegin(_etype1270, _size1267);
            this->MaintenanceProcedures.resize(_size1267);
            uint32_t _i1271;
            for (_i1271 = 0; _i1271 < _size1267; ++_i1271)
            {
              xfer += this->MaintenanceProcedures[_i1271].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MaintenanceProcedures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Hazards.clear();
            uint32_t _size1272;
            ::apache::thrift::protocol::TType _etype1275;
            xfer += iprot->readListBegin(_etype1275, _size1272);
            this->Hazards.resize(_size1272);
            uint32_t _i1276;
            for (_i1276 = 0; _i1276 < _size1272; ++_i1276)
            {
              xfer += this->Hazards[_i1276].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Hazards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureReactionTime);
          this->__isset.FailureReactionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureDetectionTime);
          this->__isset.FailureDetectionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FailureLatencyTime);
          this->__isset.FailureLatencyTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsSafetyGoal);
          this->__isset.IsSafetyGoal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISafetyRequirement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISafetyRequirement");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1277;
    for (_iter1277 = this->KeyValueMaps.begin(); _iter1277 != this->KeyValueMaps.end(); ++_iter1277)
    {
      xfer += (*_iter1277).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DecompositionArgument", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->DecompositionArgument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RefinedRequirements", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RefinedRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter1278;
    for (_iter1278 = this->RefinedRequirements.begin(); _iter1278 != this->RefinedRequirements.end(); ++_iter1278)
    {
      xfer += (*_iter1278).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RequirementSource", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->RequirementSource) {
    xfer += this->RequirementSource->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractRequirementSource"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Measures", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Measures.size()));
    std::vector<TDDIAbstractMeasureRef> ::const_iterator _iter1279;
    for (_iter1279 = this->Measures.begin(); _iter1279 != this->Measures.end(); ++_iter1279)
    {
      xfer += (*_iter1279).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter1280;
    for (_iter1280 = this->Failures.begin(); _iter1280 != this->Failures.end(); ++_iter1280)
    {
      xfer += (*_iter1280).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 10);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaintenanceProcedures", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MaintenanceProcedures.size()));
    std::vector<TDDIMaintenanceProcedureRef> ::const_iterator _iter1281;
    for (_iter1281 = this->MaintenanceProcedures.begin(); _iter1281 != this->MaintenanceProcedures.end(); ++_iter1281)
    {
      xfer += (*_iter1281).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Hazards", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Hazards.size()));
    std::vector<TDDIHazardRef> ::const_iterator _iter1282;
    for (_iter1282 = this->Hazards.begin(); _iter1282 != this->Hazards.end(); ++_iter1282)
    {
      xfer += (*_iter1282).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureReactionTime", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->FailureReactionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureDetectionTime", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->FailureDetectionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FailureLatencyTime", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->FailureLatencyTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsSafetyGoal", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->IsSafetyGoal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISafetyRequirement &a, TDDISafetyRequirement &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.DecompositionArgument, b.DecompositionArgument);
  swap(a.RefinedRequirements, b.RefinedRequirements);
  swap(a.RequirementSource, b.RequirementSource);
  swap(a.Measures, b.Measures);
  swap(a.Failures, b.Failures);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.MaintenanceProcedures, b.MaintenanceProcedures);
  swap(a.Hazards, b.Hazards);
  swap(a.FailureReactionTime, b.FailureReactionTime);
  swap(a.FailureDetectionTime, b.FailureDetectionTime);
  swap(a.FailureLatencyTime, b.FailureLatencyTime);
  swap(a.IsSafetyGoal, b.IsSafetyGoal);
  swap(a.__isset, b.__isset);
}

TDDISafetyRequirement::TDDISafetyRequirement(const TDDISafetyRequirement& other1283) {
  Id = other1283.Id;
  Name = other1283.Name;
  Description = other1283.Description;
  KeyValueMaps = other1283.KeyValueMaps;
  DecompositionArgument = other1283.DecompositionArgument;
  RefinedRequirements = other1283.RefinedRequirements;
  RequirementSource = other1283.RequirementSource;
  Measures = other1283.Measures;
  Failures = other1283.Failures;
  AssuranceLevel = other1283.AssuranceLevel;
  MaintenanceProcedures = other1283.MaintenanceProcedures;
  Hazards = other1283.Hazards;
  FailureReactionTime = other1283.FailureReactionTime;
  FailureDetectionTime = other1283.FailureDetectionTime;
  FailureLatencyTime = other1283.FailureLatencyTime;
  IsSafetyGoal = other1283.IsSafetyGoal;
  __isset = other1283.__isset;
}
TDDISafetyRequirement& TDDISafetyRequirement::operator=(const TDDISafetyRequirement& other1284) {
  Id = other1284.Id;
  Name = other1284.Name;
  Description = other1284.Description;
  KeyValueMaps = other1284.KeyValueMaps;
  DecompositionArgument = other1284.DecompositionArgument;
  RefinedRequirements = other1284.RefinedRequirements;
  RequirementSource = other1284.RequirementSource;
  Measures = other1284.Measures;
  Failures = other1284.Failures;
  AssuranceLevel = other1284.AssuranceLevel;
  MaintenanceProcedures = other1284.MaintenanceProcedures;
  Hazards = other1284.Hazards;
  FailureReactionTime = other1284.FailureReactionTime;
  FailureDetectionTime = other1284.FailureDetectionTime;
  FailureLatencyTime = other1284.FailureLatencyTime;
  IsSafetyGoal = other1284.IsSafetyGoal;
  __isset = other1284.__isset;
  return *this;
}
void TDDISafetyRequirement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISafetyRequirement(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "DecompositionArgument=" << to_string(DecompositionArgument);
  out << ", " << "RefinedRequirements=" << to_string(RefinedRequirements);
  out << ", " << "RequirementSource=" << to_string(RequirementSource);
  out << ", " << "Measures=" << to_string(Measures);
  out << ", " << "Failures=" << to_string(Failures);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "MaintenanceProcedures=" << to_string(MaintenanceProcedures);
  out << ", " << "Hazards=" << to_string(Hazards);
  out << ", " << "FailureReactionTime=" << to_string(FailureReactionTime);
  out << ", " << "FailureDetectionTime=" << to_string(FailureDetectionTime);
  out << ", " << "FailureLatencyTime=" << to_string(FailureLatencyTime);
  out << ", " << "IsSafetyGoal=" << to_string(IsSafetyGoal);
  out << ")";
}


TDDISecurityRequirement::~TDDISecurityRequirement() throw() {
}


void TDDISecurityRequirement::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISecurityRequirement::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISecurityRequirement::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISecurityRequirement::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISecurityRequirement::__set_DecompositionArgument(const std::string& val) {
  this->DecompositionArgument = val;
}

void TDDISecurityRequirement::__set_RefinedRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val) {
  this->RefinedRequirements = val;
}

void TDDISecurityRequirement::__set_RequirementSource(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> val) {
  this->RequirementSource = val;
}

void TDDISecurityRequirement::__set_Measures(const std::vector<TDDIAbstractMeasureRef> & val) {
  this->Measures = val;
}

void TDDISecurityRequirement::__set_Failures(const std::vector<TDDIAbstractFailureRef> & val) {
  this->Failures = val;
}

void TDDISecurityRequirement::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISecurityRequirement::__set_MaintenanceProcedures(const std::vector<TDDIMaintenanceProcedureRef> & val) {
  this->MaintenanceProcedures = val;
}

void TDDISecurityRequirement::__set_SecurityCapabilities(const std::vector<TDDISecurityCapabilityRef> & val) {
  this->SecurityCapabilities = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISecurityRequirement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISecurityRequirement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1285;
            ::apache::thrift::protocol::TType _etype1288;
            xfer += iprot->readListBegin(_etype1288, _size1285);
            this->KeyValueMaps.resize(_size1285);
            uint32_t _i1289;
            for (_i1289 = 0; _i1289 < _size1285; ++_i1289)
            {
              xfer += this->KeyValueMaps[_i1289].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DecompositionArgument);
          this->__isset.DecompositionArgument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RefinedRequirements.clear();
            uint32_t _size1290;
            ::apache::thrift::protocol::TType _etype1293;
            xfer += iprot->readListBegin(_etype1293, _size1290);
            this->RefinedRequirements.resize(_size1290);
            uint32_t _i1294;
            for (_i1294 = 0; _i1294 < _size1290; ++_i1294)
            {
              xfer += this->RefinedRequirements[_i1294].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RefinedRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->RequirementSource) { 
            this->RequirementSource = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource>(new TDDIAbstractRequirementSource);
          }
          xfer += this->RequirementSource->read(iprot);
          bool wasSet = false;
          if (this->RequirementSource->__isset.UsedRequirementSource) { wasSet = true; }
          if (this->RequirementSource->__isset.UsedRequirementSourceType) { wasSet = true; }
          if (!wasSet) { this->RequirementSource.reset(); }
          this->__isset.RequirementSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Measures.clear();
            uint32_t _size1295;
            ::apache::thrift::protocol::TType _etype1298;
            xfer += iprot->readListBegin(_etype1298, _size1295);
            this->Measures.resize(_size1295);
            uint32_t _i1299;
            for (_i1299 = 0; _i1299 < _size1295; ++_i1299)
            {
              xfer += this->Measures[_i1299].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Measures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Failures.clear();
            uint32_t _size1300;
            ::apache::thrift::protocol::TType _etype1303;
            xfer += iprot->readListBegin(_etype1303, _size1300);
            this->Failures.resize(_size1300);
            uint32_t _i1304;
            for (_i1304 = 0; _i1304 < _size1300; ++_i1304)
            {
              xfer += this->Failures[_i1304].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Failures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MaintenanceProcedures.clear();
            uint32_t _size1305;
            ::apache::thrift::protocol::TType _etype1308;
            xfer += iprot->readListBegin(_etype1308, _size1305);
            this->MaintenanceProcedures.resize(_size1305);
            uint32_t _i1309;
            for (_i1309 = 0; _i1309 < _size1305; ++_i1309)
            {
              xfer += this->MaintenanceProcedures[_i1309].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MaintenanceProcedures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->SecurityCapabilities.clear();
            uint32_t _size1310;
            ::apache::thrift::protocol::TType _etype1313;
            xfer += iprot->readListBegin(_etype1313, _size1310);
            this->SecurityCapabilities.resize(_size1310);
            uint32_t _i1314;
            for (_i1314 = 0; _i1314 < _size1310; ++_i1314)
            {
              xfer += this->SecurityCapabilities[_i1314].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.SecurityCapabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISecurityRequirement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISecurityRequirement");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1315;
    for (_iter1315 = this->KeyValueMaps.begin(); _iter1315 != this->KeyValueMaps.end(); ++_iter1315)
    {
      xfer += (*_iter1315).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DecompositionArgument", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->DecompositionArgument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RefinedRequirements", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RefinedRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirementRef> ::const_iterator _iter1316;
    for (_iter1316 = this->RefinedRequirements.begin(); _iter1316 != this->RefinedRequirements.end(); ++_iter1316)
    {
      xfer += (*_iter1316).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RequirementSource", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->RequirementSource) {
    xfer += this->RequirementSource->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractRequirementSource"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Measures", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Measures.size()));
    std::vector<TDDIAbstractMeasureRef> ::const_iterator _iter1317;
    for (_iter1317 = this->Measures.begin(); _iter1317 != this->Measures.end(); ++_iter1317)
    {
      xfer += (*_iter1317).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Failures", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Failures.size()));
    std::vector<TDDIAbstractFailureRef> ::const_iterator _iter1318;
    for (_iter1318 = this->Failures.begin(); _iter1318 != this->Failures.end(); ++_iter1318)
    {
      xfer += (*_iter1318).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 10);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MaintenanceProcedures", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MaintenanceProcedures.size()));
    std::vector<TDDIMaintenanceProcedureRef> ::const_iterator _iter1319;
    for (_iter1319 = this->MaintenanceProcedures.begin(); _iter1319 != this->MaintenanceProcedures.end(); ++_iter1319)
    {
      xfer += (*_iter1319).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SecurityCapabilities", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->SecurityCapabilities.size()));
    std::vector<TDDISecurityCapabilityRef> ::const_iterator _iter1320;
    for (_iter1320 = this->SecurityCapabilities.begin(); _iter1320 != this->SecurityCapabilities.end(); ++_iter1320)
    {
      xfer += (*_iter1320).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISecurityRequirement &a, TDDISecurityRequirement &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.DecompositionArgument, b.DecompositionArgument);
  swap(a.RefinedRequirements, b.RefinedRequirements);
  swap(a.RequirementSource, b.RequirementSource);
  swap(a.Measures, b.Measures);
  swap(a.Failures, b.Failures);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.MaintenanceProcedures, b.MaintenanceProcedures);
  swap(a.SecurityCapabilities, b.SecurityCapabilities);
  swap(a.__isset, b.__isset);
}

TDDISecurityRequirement::TDDISecurityRequirement(const TDDISecurityRequirement& other1321) {
  Id = other1321.Id;
  Name = other1321.Name;
  Description = other1321.Description;
  KeyValueMaps = other1321.KeyValueMaps;
  DecompositionArgument = other1321.DecompositionArgument;
  RefinedRequirements = other1321.RefinedRequirements;
  RequirementSource = other1321.RequirementSource;
  Measures = other1321.Measures;
  Failures = other1321.Failures;
  AssuranceLevel = other1321.AssuranceLevel;
  MaintenanceProcedures = other1321.MaintenanceProcedures;
  SecurityCapabilities = other1321.SecurityCapabilities;
  __isset = other1321.__isset;
}
TDDISecurityRequirement& TDDISecurityRequirement::operator=(const TDDISecurityRequirement& other1322) {
  Id = other1322.Id;
  Name = other1322.Name;
  Description = other1322.Description;
  KeyValueMaps = other1322.KeyValueMaps;
  DecompositionArgument = other1322.DecompositionArgument;
  RefinedRequirements = other1322.RefinedRequirements;
  RequirementSource = other1322.RequirementSource;
  Measures = other1322.Measures;
  Failures = other1322.Failures;
  AssuranceLevel = other1322.AssuranceLevel;
  MaintenanceProcedures = other1322.MaintenanceProcedures;
  SecurityCapabilities = other1322.SecurityCapabilities;
  __isset = other1322.__isset;
  return *this;
}
void TDDISecurityRequirement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISecurityRequirement(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "DecompositionArgument=" << to_string(DecompositionArgument);
  out << ", " << "RefinedRequirements=" << to_string(RefinedRequirements);
  out << ", " << "RequirementSource=" << to_string(RequirementSource);
  out << ", " << "Measures=" << to_string(Measures);
  out << ", " << "Failures=" << to_string(Failures);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "MaintenanceProcedures=" << to_string(MaintenanceProcedures);
  out << ", " << "SecurityCapabilities=" << to_string(SecurityCapabilities);
  out << ")";
}


TDDIDependabilityRequirementUnion::~TDDIDependabilityRequirementUnion() throw() {
}


void TDDIDependabilityRequirementUnion::__set_SafetyRequirement(::apache::thrift::stdcxx::shared_ptr<TDDISafetyRequirement> val) {
  this->SafetyRequirement = val;
__isset.SafetyRequirement = true;
}

void TDDIDependabilityRequirementUnion::__set_SecurityRequirement(::apache::thrift::stdcxx::shared_ptr<TDDISecurityRequirement> val) {
  this->SecurityRequirement = val;
__isset.SecurityRequirement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIDependabilityRequirementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDependabilityRequirementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SafetyRequirement) { 
            this->SafetyRequirement = ::apache::thrift::stdcxx::shared_ptr<TDDISafetyRequirement>(new TDDISafetyRequirement);
          }
          xfer += this->SafetyRequirement->read(iprot);
          bool wasSet = false;
          if (this->SafetyRequirement->__isset.Id) { wasSet = true; }
          if (this->SafetyRequirement->__isset.Name) { wasSet = true; }
          if (this->SafetyRequirement->__isset.Description) { wasSet = true; }
          if (this->SafetyRequirement->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SafetyRequirement->__isset.DecompositionArgument) { wasSet = true; }
          if (this->SafetyRequirement->__isset.RefinedRequirements) { wasSet = true; }
          if (this->SafetyRequirement->__isset.RequirementSource) { wasSet = true; }
          if (this->SafetyRequirement->__isset.Measures) { wasSet = true; }
          if (this->SafetyRequirement->__isset.Failures) { wasSet = true; }
          if (this->SafetyRequirement->__isset.AssuranceLevel) { wasSet = true; }
          if (this->SafetyRequirement->__isset.MaintenanceProcedures) { wasSet = true; }
          if (this->SafetyRequirement->__isset.Hazards) { wasSet = true; }
          if (this->SafetyRequirement->__isset.FailureReactionTime) { wasSet = true; }
          if (this->SafetyRequirement->__isset.FailureDetectionTime) { wasSet = true; }
          if (this->SafetyRequirement->__isset.FailureLatencyTime) { wasSet = true; }
          if (this->SafetyRequirement->__isset.IsSafetyGoal) { wasSet = true; }
          if (!wasSet) { this->SafetyRequirement.reset(); }
          this->__isset.SafetyRequirement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SecurityRequirement) { 
            this->SecurityRequirement = ::apache::thrift::stdcxx::shared_ptr<TDDISecurityRequirement>(new TDDISecurityRequirement);
          }
          xfer += this->SecurityRequirement->read(iprot);
          bool wasSet = false;
          if (this->SecurityRequirement->__isset.Id) { wasSet = true; }
          if (this->SecurityRequirement->__isset.Name) { wasSet = true; }
          if (this->SecurityRequirement->__isset.Description) { wasSet = true; }
          if (this->SecurityRequirement->__isset.KeyValueMaps) { wasSet = true; }
          if (this->SecurityRequirement->__isset.DecompositionArgument) { wasSet = true; }
          if (this->SecurityRequirement->__isset.RefinedRequirements) { wasSet = true; }
          if (this->SecurityRequirement->__isset.RequirementSource) { wasSet = true; }
          if (this->SecurityRequirement->__isset.Measures) { wasSet = true; }
          if (this->SecurityRequirement->__isset.Failures) { wasSet = true; }
          if (this->SecurityRequirement->__isset.AssuranceLevel) { wasSet = true; }
          if (this->SecurityRequirement->__isset.MaintenanceProcedures) { wasSet = true; }
          if (this->SecurityRequirement->__isset.SecurityCapabilities) { wasSet = true; }
          if (!wasSet) { this->SecurityRequirement.reset(); }
          this->__isset.SecurityRequirement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDependabilityRequirementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDependabilityRequirementUnion");

  if (this->__isset.SafetyRequirement) {
    xfer += oprot->writeFieldBegin("SafetyRequirement", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->SafetyRequirement) {
      xfer += this->SafetyRequirement->write(oprot); 
    } else {oprot->writeStructBegin("TDDISafetyRequirement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SecurityRequirement) {
    xfer += oprot->writeFieldBegin("SecurityRequirement", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->SecurityRequirement) {
      xfer += this->SecurityRequirement->write(oprot); 
    } else {oprot->writeStructBegin("TDDISecurityRequirement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDependabilityRequirementUnion &a, TDDIDependabilityRequirementUnion &b) {
  using ::std::swap;
  swap(a.SafetyRequirement, b.SafetyRequirement);
  swap(a.SecurityRequirement, b.SecurityRequirement);
  swap(a.__isset, b.__isset);
}

TDDIDependabilityRequirementUnion::TDDIDependabilityRequirementUnion(const TDDIDependabilityRequirementUnion& other1323) {
  SafetyRequirement = other1323.SafetyRequirement;
  SecurityRequirement = other1323.SecurityRequirement;
  __isset = other1323.__isset;
}
TDDIDependabilityRequirementUnion& TDDIDependabilityRequirementUnion::operator=(const TDDIDependabilityRequirementUnion& other1324) {
  SafetyRequirement = other1324.SafetyRequirement;
  SecurityRequirement = other1324.SecurityRequirement;
  __isset = other1324.__isset;
  return *this;
}
void TDDIDependabilityRequirementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDependabilityRequirementUnion(";
  out << "SafetyRequirement="; (__isset.SafetyRequirement ? (out << to_string(SafetyRequirement)) : (out << "<null>"));
  out << ", " << "SecurityRequirement="; (__isset.SecurityRequirement ? (out << to_string(SecurityRequirement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractDependabilityRequirement::~TDDIAbstractDependabilityRequirement() throw() {
}


void TDDIAbstractDependabilityRequirement::__set_UsedDependabilityRequirement(const TDDIDependabilityRequirementUnion& val) {
  this->UsedDependabilityRequirement = val;
}

void TDDIAbstractDependabilityRequirement::__set_UsedDependabilityRequirementType(const TDDIDependabilityRequirementUnionType val) {
  this->UsedDependabilityRequirementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityRequirement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractDependabilityRequirement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedDependabilityRequirement.read(iprot);
          this->__isset.UsedDependabilityRequirement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1325;
          xfer += iprot->readI32(ecast1325);
          this->UsedDependabilityRequirementType = (TDDIDependabilityRequirementUnionType)ecast1325;
          this->__isset.UsedDependabilityRequirementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractDependabilityRequirement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractDependabilityRequirement");

  xfer += oprot->writeFieldBegin("UsedDependabilityRequirement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedDependabilityRequirement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedDependabilityRequirementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedDependabilityRequirementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractDependabilityRequirement &a, TDDIAbstractDependabilityRequirement &b) {
  using ::std::swap;
  swap(a.UsedDependabilityRequirement, b.UsedDependabilityRequirement);
  swap(a.UsedDependabilityRequirementType, b.UsedDependabilityRequirementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractDependabilityRequirement::TDDIAbstractDependabilityRequirement(const TDDIAbstractDependabilityRequirement& other1326) {
  UsedDependabilityRequirement = other1326.UsedDependabilityRequirement;
  UsedDependabilityRequirementType = other1326.UsedDependabilityRequirementType;
  __isset = other1326.__isset;
}
TDDIAbstractDependabilityRequirement& TDDIAbstractDependabilityRequirement::operator=(const TDDIAbstractDependabilityRequirement& other1327) {
  UsedDependabilityRequirement = other1327.UsedDependabilityRequirement;
  UsedDependabilityRequirementType = other1327.UsedDependabilityRequirementType;
  __isset = other1327.__isset;
  return *this;
}
void TDDIAbstractDependabilityRequirement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractDependabilityRequirement(";
  out << "UsedDependabilityRequirement=" << to_string(UsedDependabilityRequirement);
  out << ", " << "UsedDependabilityRequirementType=" << to_string(UsedDependabilityRequirementType);
  out << ")";
}


TDDIRequirementPackage::~TDDIRequirementPackage() throw() {
}


void TDDIRequirementPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIRequirementPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIRequirementPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIRequirementPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIRequirementPackage::__set_RequirementSources(const std::vector<TDDIAbstractRequirementSource> & val) {
  this->RequirementSources = val;
}

void TDDIRequirementPackage::__set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirement> & val) {
  this->DependabilityRequirements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIRequirementPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size1328;
            ::apache::thrift::protocol::TType _etype1331;
            xfer += iprot->readListBegin(_etype1331, _size1328);
            this->KeyValueMaps.resize(_size1328);
            uint32_t _i1332;
            for (_i1332 = 0; _i1332 < _size1328; ++_i1332)
            {
              xfer += this->KeyValueMaps[_i1332].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->RequirementSources.clear();
            uint32_t _size1333;
            ::apache::thrift::protocol::TType _etype1336;
            xfer += iprot->readListBegin(_etype1336, _size1333);
            this->RequirementSources.resize(_size1333);
            uint32_t _i1337;
            for (_i1337 = 0; _i1337 < _size1333; ++_i1337)
            {
              xfer += this->RequirementSources[_i1337].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.RequirementSources = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->DependabilityRequirements.clear();
            uint32_t _size1338;
            ::apache::thrift::protocol::TType _etype1341;
            xfer += iprot->readListBegin(_etype1341, _size1338);
            this->DependabilityRequirements.resize(_size1338);
            uint32_t _i1342;
            for (_i1342 = 0; _i1342 < _size1338; ++_i1342)
            {
              xfer += this->DependabilityRequirements[_i1342].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.DependabilityRequirements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIRequirementPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIRequirementPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter1343;
    for (_iter1343 = this->KeyValueMaps.begin(); _iter1343 != this->KeyValueMaps.end(); ++_iter1343)
    {
      xfer += (*_iter1343).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RequirementSources", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->RequirementSources.size()));
    std::vector<TDDIAbstractRequirementSource> ::const_iterator _iter1344;
    for (_iter1344 = this->RequirementSources.begin(); _iter1344 != this->RequirementSources.end(); ++_iter1344)
    {
      xfer += (*_iter1344).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DependabilityRequirements", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->DependabilityRequirements.size()));
    std::vector<TDDIAbstractDependabilityRequirement> ::const_iterator _iter1345;
    for (_iter1345 = this->DependabilityRequirements.begin(); _iter1345 != this->DependabilityRequirements.end(); ++_iter1345)
    {
      xfer += (*_iter1345).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIRequirementPackage &a, TDDIRequirementPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.RequirementSources, b.RequirementSources);
  swap(a.DependabilityRequirements, b.DependabilityRequirements);
  swap(a.__isset, b.__isset);
}

TDDIRequirementPackage::TDDIRequirementPackage(const TDDIRequirementPackage& other1346) {
  Id = other1346.Id;
  Name = other1346.Name;
  Description = other1346.Description;
  KeyValueMaps = other1346.KeyValueMaps;
  RequirementSources = other1346.RequirementSources;
  DependabilityRequirements = other1346.DependabilityRequirements;
  __isset = other1346.__isset;
}
TDDIRequirementPackage& TDDIRequirementPackage::operator=(const TDDIRequirementPackage& other1347) {
  Id = other1347.Id;
  Name = other1347.Name;
  Description = other1347.Description;
  KeyValueMaps = other1347.KeyValueMaps;
  RequirementSources = other1347.RequirementSources;
  DependabilityRequirements = other1347.DependabilityRequirements;
  __isset = other1347.__isset;
  return *this;
}
void TDDIRequirementPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIRequirementPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "RequirementSources=" << to_string(RequirementSources);
  out << ", " << "DependabilityRequirements=" << to_string(DependabilityRequirements);
  out << ")";
}


TDDIArtifactReference::~TDDIArtifactReference() throw() {
}


void TDDIArtifactReference::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactReference::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactReference::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactReference::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactReference::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactReference::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactReference::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactReference::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactReference::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactReference::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactReference::__set_ReferencedArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ReferencedArtifactElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactReference& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactReference::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1348;
            ::apache::thrift::protocol::TType _etype1351;
            xfer += iprot->readListBegin(_etype1351, _size1348);
            this->ImplementationConstraint.resize(_size1348);
            uint32_t _i1352;
            for (_i1352 = 0; _i1352 < _size1348; ++_i1352)
            {
              xfer += this->ImplementationConstraint[_i1352].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1353;
            ::apache::thrift::protocol::TType _etype1356;
            xfer += iprot->readListBegin(_etype1356, _size1353);
            this->Note.resize(_size1353);
            uint32_t _i1357;
            for (_i1357 = 0; _i1357 < _size1353; ++_i1357)
            {
              xfer += this->Note[_i1357].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1358;
            ::apache::thrift::protocol::TType _etype1361;
            xfer += iprot->readListBegin(_etype1361, _size1358);
            this->TaggedValue.resize(_size1358);
            uint32_t _i1362;
            for (_i1362 = 0; _i1362 < _size1358; ++_i1362)
            {
              xfer += this->TaggedValue[_i1362].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ReferencedArtifactElement.clear();
            uint32_t _size1363;
            ::apache::thrift::protocol::TType _etype1366;
            xfer += iprot->readListBegin(_etype1366, _size1363);
            this->ReferencedArtifactElement.resize(_size1363);
            uint32_t _i1367;
            for (_i1367 = 0; _i1367 < _size1363; ++_i1367)
            {
              xfer += this->ReferencedArtifactElement[_i1367].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ReferencedArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactReference::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactReference");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1368;
    for (_iter1368 = this->ImplementationConstraint.begin(); _iter1368 != this->ImplementationConstraint.end(); ++_iter1368)
    {
      xfer += (*_iter1368).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1369;
    for (_iter1369 = this->Note.begin(); _iter1369 != this->Note.end(); ++_iter1369)
    {
      xfer += (*_iter1369).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1370;
    for (_iter1370 = this->TaggedValue.begin(); _iter1370 != this->TaggedValue.end(); ++_iter1370)
    {
      xfer += (*_iter1370).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ReferencedArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ReferencedArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter1371;
    for (_iter1371 = this->ReferencedArtifactElement.begin(); _iter1371 != this->ReferencedArtifactElement.end(); ++_iter1371)
    {
      xfer += (*_iter1371).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactReference &a, TDDIArtifactReference &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ReferencedArtifactElement, b.ReferencedArtifactElement);
  swap(a.__isset, b.__isset);
}

TDDIArtifactReference::TDDIArtifactReference(const TDDIArtifactReference& other1372) {
  Gid = other1372.Gid;
  IsCitation = other1372.IsCitation;
  IsAbstract = other1372.IsAbstract;
  CitedElement = other1372.CitedElement;
  AbstractForm = other1372.AbstractForm;
  Name = other1372.Name;
  Description = other1372.Description;
  ImplementationConstraint = other1372.ImplementationConstraint;
  Note = other1372.Note;
  TaggedValue = other1372.TaggedValue;
  ReferencedArtifactElement = other1372.ReferencedArtifactElement;
  __isset = other1372.__isset;
}
TDDIArtifactReference& TDDIArtifactReference::operator=(const TDDIArtifactReference& other1373) {
  Gid = other1373.Gid;
  IsCitation = other1373.IsCitation;
  IsAbstract = other1373.IsAbstract;
  CitedElement = other1373.CitedElement;
  AbstractForm = other1373.AbstractForm;
  Name = other1373.Name;
  Description = other1373.Description;
  ImplementationConstraint = other1373.ImplementationConstraint;
  Note = other1373.Note;
  TaggedValue = other1373.TaggedValue;
  ReferencedArtifactElement = other1373.ReferencedArtifactElement;
  __isset = other1373.__isset;
  return *this;
}
void TDDIArtifactReference::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactReference(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ReferencedArtifactElement=" << to_string(ReferencedArtifactElement);
  out << ")";
}


TDDIArgumentationElementUnion::~TDDIArgumentationElementUnion() throw() {
}


void TDDIArgumentationElementUnion::__set_ArgumentGroup(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentGroup> val) {
  this->ArgumentGroup = val;
__isset.ArgumentGroup = true;
}

void TDDIArgumentationElementUnion::__set_ArgumentPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> val) {
  this->ArgumentPackage = val;
__isset.ArgumentPackage = true;
}

void TDDIArgumentationElementUnion::__set_ArgumentAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> val) {
  this->ArgumentAsset = val;
__isset.ArgumentAsset = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentationElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentationElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentGroup) { 
            this->ArgumentGroup = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentGroup>(new TDDIArgumentGroup);
          }
          xfer += this->ArgumentGroup->read(iprot);
          bool wasSet = false;
          if (this->ArgumentGroup->__isset.Gid) { wasSet = true; }
          if (this->ArgumentGroup->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentGroup->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentGroup->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentGroup->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentGroup->__isset.Name) { wasSet = true; }
          if (this->ArgumentGroup->__isset.Description) { wasSet = true; }
          if (this->ArgumentGroup->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentGroup->__isset.Note) { wasSet = true; }
          if (this->ArgumentGroup->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentGroup->__isset.ArgumentationElement) { wasSet = true; }
          if (!wasSet) { this->ArgumentGroup.reset(); }
          this->__isset.ArgumentGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentPackage) { 
            this->ArgumentPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage>(new TDDIAbstractArgumentPackage);
          }
          xfer += this->ArgumentPackage->read(iprot);
          bool wasSet = false;
          if (this->ArgumentPackage->__isset.UsedArgumentPackage) { wasSet = true; }
          if (this->ArgumentPackage->__isset.UsedArgumentPackageType) { wasSet = true; }
          if (!wasSet) { this->ArgumentPackage.reset(); }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentAsset) { 
            this->ArgumentAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset>(new TDDIAbstractArgumentAsset);
          }
          xfer += this->ArgumentAsset->read(iprot);
          bool wasSet = false;
          if (this->ArgumentAsset->__isset.UsedArgumentAsset) { wasSet = true; }
          if (this->ArgumentAsset->__isset.UsedArgumentAssetType) { wasSet = true; }
          if (!wasSet) { this->ArgumentAsset.reset(); }
          this->__isset.ArgumentAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentationElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentationElementUnion");

  if (this->__isset.ArgumentGroup) {
    xfer += oprot->writeFieldBegin("ArgumentGroup", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ArgumentGroup) {
      xfer += this->ArgumentGroup->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentGroup"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentPackage) {
    xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArgumentPackage) {
      xfer += this->ArgumentPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArgumentPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentAsset) {
    xfer += oprot->writeFieldBegin("ArgumentAsset", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArgumentAsset) {
      xfer += this->ArgumentAsset->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArgumentAsset"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentationElementUnion &a, TDDIArgumentationElementUnion &b) {
  using ::std::swap;
  swap(a.ArgumentGroup, b.ArgumentGroup);
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.ArgumentAsset, b.ArgumentAsset);
  swap(a.__isset, b.__isset);
}

TDDIArgumentationElementUnion::TDDIArgumentationElementUnion(const TDDIArgumentationElementUnion& other1374) {
  ArgumentGroup = other1374.ArgumentGroup;
  ArgumentPackage = other1374.ArgumentPackage;
  ArgumentAsset = other1374.ArgumentAsset;
  __isset = other1374.__isset;
}
TDDIArgumentationElementUnion& TDDIArgumentationElementUnion::operator=(const TDDIArgumentationElementUnion& other1375) {
  ArgumentGroup = other1375.ArgumentGroup;
  ArgumentPackage = other1375.ArgumentPackage;
  ArgumentAsset = other1375.ArgumentAsset;
  __isset = other1375.__isset;
  return *this;
}
void TDDIArgumentationElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentationElementUnion(";
  out << "ArgumentGroup="; (__isset.ArgumentGroup ? (out << to_string(ArgumentGroup)) : (out << "<null>"));
  out << ", " << "ArgumentPackage="; (__isset.ArgumentPackage ? (out << to_string(ArgumentPackage)) : (out << "<null>"));
  out << ", " << "ArgumentAsset="; (__isset.ArgumentAsset ? (out << to_string(ArgumentAsset)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArgumentationElement::~TDDIAbstractArgumentationElement() throw() {
}


void TDDIAbstractArgumentationElement::__set_UsedArgumentationElement(const TDDIArgumentationElementUnion& val) {
  this->UsedArgumentationElement = val;
}

void TDDIAbstractArgumentationElement::__set_UsedArgumentationElementType(const TDDIArgumentationElementUnionType val) {
  this->UsedArgumentationElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentationElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentationElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArgumentationElement.read(iprot);
          this->__isset.UsedArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1376;
          xfer += iprot->readI32(ecast1376);
          this->UsedArgumentationElementType = (TDDIArgumentationElementUnionType)ecast1376;
          this->__isset.UsedArgumentationElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentationElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentationElement");

  xfer += oprot->writeFieldBegin("UsedArgumentationElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArgumentationElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArgumentationElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArgumentationElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentationElement &a, TDDIAbstractArgumentationElement &b) {
  using ::std::swap;
  swap(a.UsedArgumentationElement, b.UsedArgumentationElement);
  swap(a.UsedArgumentationElementType, b.UsedArgumentationElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentationElement::TDDIAbstractArgumentationElement(const TDDIAbstractArgumentationElement& other1377) {
  UsedArgumentationElement = other1377.UsedArgumentationElement;
  UsedArgumentationElementType = other1377.UsedArgumentationElementType;
  __isset = other1377.__isset;
}
TDDIAbstractArgumentationElement& TDDIAbstractArgumentationElement::operator=(const TDDIAbstractArgumentationElement& other1378) {
  UsedArgumentationElement = other1378.UsedArgumentationElement;
  UsedArgumentationElementType = other1378.UsedArgumentationElementType;
  __isset = other1378.__isset;
  return *this;
}
void TDDIAbstractArgumentationElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentationElement(";
  out << "UsedArgumentationElement=" << to_string(UsedArgumentationElement);
  out << ", " << "UsedArgumentationElementType=" << to_string(UsedArgumentationElementType);
  out << ")";
}


TDDIArgumentGroup::~TDDIArgumentGroup() throw() {
}


void TDDIArgumentGroup::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentGroup::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentGroup::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentGroup::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentGroup::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentGroup::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentGroup::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentGroup::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentGroup::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentGroup::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentGroup::__set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val) {
  this->ArgumentationElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1379;
            ::apache::thrift::protocol::TType _etype1382;
            xfer += iprot->readListBegin(_etype1382, _size1379);
            this->ImplementationConstraint.resize(_size1379);
            uint32_t _i1383;
            for (_i1383 = 0; _i1383 < _size1379; ++_i1383)
            {
              xfer += this->ImplementationConstraint[_i1383].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1384;
            ::apache::thrift::protocol::TType _etype1387;
            xfer += iprot->readListBegin(_etype1387, _size1384);
            this->Note.resize(_size1384);
            uint32_t _i1388;
            for (_i1388 = 0; _i1388 < _size1384; ++_i1388)
            {
              xfer += this->Note[_i1388].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1389;
            ::apache::thrift::protocol::TType _etype1392;
            xfer += iprot->readListBegin(_etype1392, _size1389);
            this->TaggedValue.resize(_size1389);
            uint32_t _i1393;
            for (_i1393 = 0; _i1393 < _size1389; ++_i1393)
            {
              xfer += this->TaggedValue[_i1393].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentationElement.clear();
            uint32_t _size1394;
            ::apache::thrift::protocol::TType _etype1397;
            xfer += iprot->readListBegin(_etype1397, _size1394);
            this->ArgumentationElement.resize(_size1394);
            uint32_t _i1398;
            for (_i1398 = 0; _i1398 < _size1394; ++_i1398)
            {
              xfer += this->ArgumentationElement[_i1398].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentGroup");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1399;
    for (_iter1399 = this->ImplementationConstraint.begin(); _iter1399 != this->ImplementationConstraint.end(); ++_iter1399)
    {
      xfer += (*_iter1399).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1400;
    for (_iter1400 = this->Note.begin(); _iter1400 != this->Note.end(); ++_iter1400)
    {
      xfer += (*_iter1400).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1401;
    for (_iter1401 = this->TaggedValue.begin(); _iter1401 != this->TaggedValue.end(); ++_iter1401)
    {
      xfer += (*_iter1401).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentationElement.size()));
    std::vector<TDDIAbstractArgumentationElementRef> ::const_iterator _iter1402;
    for (_iter1402 = this->ArgumentationElement.begin(); _iter1402 != this->ArgumentationElement.end(); ++_iter1402)
    {
      xfer += (*_iter1402).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentGroup &a, TDDIArgumentGroup &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.__isset, b.__isset);
}

TDDIArgumentGroup::TDDIArgumentGroup(const TDDIArgumentGroup& other1403) {
  Gid = other1403.Gid;
  IsCitation = other1403.IsCitation;
  IsAbstract = other1403.IsAbstract;
  CitedElement = other1403.CitedElement;
  AbstractForm = other1403.AbstractForm;
  Name = other1403.Name;
  Description = other1403.Description;
  ImplementationConstraint = other1403.ImplementationConstraint;
  Note = other1403.Note;
  TaggedValue = other1403.TaggedValue;
  ArgumentationElement = other1403.ArgumentationElement;
  __isset = other1403.__isset;
}
TDDIArgumentGroup& TDDIArgumentGroup::operator=(const TDDIArgumentGroup& other1404) {
  Gid = other1404.Gid;
  IsCitation = other1404.IsCitation;
  IsAbstract = other1404.IsAbstract;
  CitedElement = other1404.CitedElement;
  AbstractForm = other1404.AbstractForm;
  Name = other1404.Name;
  Description = other1404.Description;
  ImplementationConstraint = other1404.ImplementationConstraint;
  Note = other1404.Note;
  TaggedValue = other1404.TaggedValue;
  ArgumentationElement = other1404.ArgumentationElement;
  __isset = other1404.__isset;
  return *this;
}
void TDDIArgumentGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentGroup(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArgumentationElement=" << to_string(ArgumentationElement);
  out << ")";
}


TDDIArgumentPackageUnion::~TDDIArgumentPackageUnion() throw() {
}


void TDDIArgumentPackageUnion::__set_ArgumentPackage(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackage> val) {
  this->ArgumentPackage = val;
__isset.ArgumentPackage = true;
}

void TDDIArgumentPackageUnion::__set_ArgumentPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageInterface> val) {
  this->ArgumentPackageInterface = val;
__isset.ArgumentPackageInterface = true;
}

void TDDIArgumentPackageUnion::__set_ArgumentPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageBinding> val) {
  this->ArgumentPackageBinding = val;
__isset.ArgumentPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentPackage) { 
            this->ArgumentPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackage>(new TDDIArgumentPackage);
          }
          xfer += this->ArgumentPackage->read(iprot);
          bool wasSet = false;
          if (this->ArgumentPackage->__isset.Gid) { wasSet = true; }
          if (this->ArgumentPackage->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentPackage->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentPackage->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentPackage->__isset.Name) { wasSet = true; }
          if (this->ArgumentPackage->__isset.Description) { wasSet = true; }
          if (this->ArgumentPackage->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentPackage->__isset.Note) { wasSet = true; }
          if (this->ArgumentPackage->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentPackage->__isset.ArgumentationElement) { wasSet = true; }
          if (!wasSet) { this->ArgumentPackage.reset(); }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentPackageInterface) { 
            this->ArgumentPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageInterface>(new TDDIArgumentPackageInterface);
          }
          xfer += this->ArgumentPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->ArgumentPackageInterface->__isset.Gid) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.Name) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.Description) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.Note) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.ArgumentationElement) { wasSet = true; }
          if (this->ArgumentPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->ArgumentPackageInterface.reset(); }
          this->__isset.ArgumentPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentPackageBinding) { 
            this->ArgumentPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageBinding>(new TDDIArgumentPackageBinding);
          }
          xfer += this->ArgumentPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->ArgumentPackageBinding->__isset.Gid) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.Name) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.Description) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.Note) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.ArgumentationElement) { wasSet = true; }
          if (this->ArgumentPackageBinding->__isset.ParticipantPackage) { wasSet = true; }
          if (!wasSet) { this->ArgumentPackageBinding.reset(); }
          this->__isset.ArgumentPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentPackageUnion");

  if (this->__isset.ArgumentPackage) {
    xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ArgumentPackage) {
      xfer += this->ArgumentPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentPackageInterface) {
    xfer += oprot->writeFieldBegin("ArgumentPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArgumentPackageInterface) {
      xfer += this->ArgumentPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentPackageBinding) {
    xfer += oprot->writeFieldBegin("ArgumentPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArgumentPackageBinding) {
      xfer += this->ArgumentPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentPackageUnion &a, TDDIArgumentPackageUnion &b) {
  using ::std::swap;
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.ArgumentPackageInterface, b.ArgumentPackageInterface);
  swap(a.ArgumentPackageBinding, b.ArgumentPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIArgumentPackageUnion::TDDIArgumentPackageUnion(const TDDIArgumentPackageUnion& other1405) {
  ArgumentPackage = other1405.ArgumentPackage;
  ArgumentPackageInterface = other1405.ArgumentPackageInterface;
  ArgumentPackageBinding = other1405.ArgumentPackageBinding;
  __isset = other1405.__isset;
}
TDDIArgumentPackageUnion& TDDIArgumentPackageUnion::operator=(const TDDIArgumentPackageUnion& other1406) {
  ArgumentPackage = other1406.ArgumentPackage;
  ArgumentPackageInterface = other1406.ArgumentPackageInterface;
  ArgumentPackageBinding = other1406.ArgumentPackageBinding;
  __isset = other1406.__isset;
  return *this;
}
void TDDIArgumentPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentPackageUnion(";
  out << "ArgumentPackage="; (__isset.ArgumentPackage ? (out << to_string(ArgumentPackage)) : (out << "<null>"));
  out << ", " << "ArgumentPackageInterface="; (__isset.ArgumentPackageInterface ? (out << to_string(ArgumentPackageInterface)) : (out << "<null>"));
  out << ", " << "ArgumentPackageBinding="; (__isset.ArgumentPackageBinding ? (out << to_string(ArgumentPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArgumentPackage::~TDDIAbstractArgumentPackage() throw() {
}


void TDDIAbstractArgumentPackage::__set_UsedArgumentPackage(const TDDIArgumentPackageUnion& val) {
  this->UsedArgumentPackage = val;
}

void TDDIAbstractArgumentPackage::__set_UsedArgumentPackageType(const TDDIArgumentPackageUnionType val) {
  this->UsedArgumentPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArgumentPackage.read(iprot);
          this->__isset.UsedArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1407;
          xfer += iprot->readI32(ecast1407);
          this->UsedArgumentPackageType = (TDDIArgumentPackageUnionType)ecast1407;
          this->__isset.UsedArgumentPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentPackage");

  xfer += oprot->writeFieldBegin("UsedArgumentPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArgumentPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArgumentPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArgumentPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentPackage &a, TDDIAbstractArgumentPackage &b) {
  using ::std::swap;
  swap(a.UsedArgumentPackage, b.UsedArgumentPackage);
  swap(a.UsedArgumentPackageType, b.UsedArgumentPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentPackage::TDDIAbstractArgumentPackage(const TDDIAbstractArgumentPackage& other1408) {
  UsedArgumentPackage = other1408.UsedArgumentPackage;
  UsedArgumentPackageType = other1408.UsedArgumentPackageType;
  __isset = other1408.__isset;
}
TDDIAbstractArgumentPackage& TDDIAbstractArgumentPackage::operator=(const TDDIAbstractArgumentPackage& other1409) {
  UsedArgumentPackage = other1409.UsedArgumentPackage;
  UsedArgumentPackageType = other1409.UsedArgumentPackageType;
  __isset = other1409.__isset;
  return *this;
}
void TDDIAbstractArgumentPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentPackage(";
  out << "UsedArgumentPackage=" << to_string(UsedArgumentPackage);
  out << ", " << "UsedArgumentPackageType=" << to_string(UsedArgumentPackageType);
  out << ")";
}


TDDIArgumentPackage::~TDDIArgumentPackage() throw() {
}


void TDDIArgumentPackage::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentPackage::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentPackage::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentPackage::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentPackage::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentPackage::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentPackage::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentPackage::__set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val) {
  this->ArgumentationElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1410;
            ::apache::thrift::protocol::TType _etype1413;
            xfer += iprot->readListBegin(_etype1413, _size1410);
            this->ImplementationConstraint.resize(_size1410);
            uint32_t _i1414;
            for (_i1414 = 0; _i1414 < _size1410; ++_i1414)
            {
              xfer += this->ImplementationConstraint[_i1414].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1415;
            ::apache::thrift::protocol::TType _etype1418;
            xfer += iprot->readListBegin(_etype1418, _size1415);
            this->Note.resize(_size1415);
            uint32_t _i1419;
            for (_i1419 = 0; _i1419 < _size1415; ++_i1419)
            {
              xfer += this->Note[_i1419].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1420;
            ::apache::thrift::protocol::TType _etype1423;
            xfer += iprot->readListBegin(_etype1423, _size1420);
            this->TaggedValue.resize(_size1420);
            uint32_t _i1424;
            for (_i1424 = 0; _i1424 < _size1420; ++_i1424)
            {
              xfer += this->TaggedValue[_i1424].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentationElement.clear();
            uint32_t _size1425;
            ::apache::thrift::protocol::TType _etype1428;
            xfer += iprot->readListBegin(_etype1428, _size1425);
            this->ArgumentationElement.resize(_size1425);
            uint32_t _i1429;
            for (_i1429 = 0; _i1429 < _size1425; ++_i1429)
            {
              xfer += this->ArgumentationElement[_i1429].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentPackage");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1430;
    for (_iter1430 = this->ImplementationConstraint.begin(); _iter1430 != this->ImplementationConstraint.end(); ++_iter1430)
    {
      xfer += (*_iter1430).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1431;
    for (_iter1431 = this->Note.begin(); _iter1431 != this->Note.end(); ++_iter1431)
    {
      xfer += (*_iter1431).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1432;
    for (_iter1432 = this->TaggedValue.begin(); _iter1432 != this->TaggedValue.end(); ++_iter1432)
    {
      xfer += (*_iter1432).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentationElement.size()));
    std::vector<TDDIAbstractArgumentationElementRef> ::const_iterator _iter1433;
    for (_iter1433 = this->ArgumentationElement.begin(); _iter1433 != this->ArgumentationElement.end(); ++_iter1433)
    {
      xfer += (*_iter1433).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentPackage &a, TDDIArgumentPackage &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.__isset, b.__isset);
}

TDDIArgumentPackage::TDDIArgumentPackage(const TDDIArgumentPackage& other1434) {
  Gid = other1434.Gid;
  IsCitation = other1434.IsCitation;
  IsAbstract = other1434.IsAbstract;
  CitedElement = other1434.CitedElement;
  AbstractForm = other1434.AbstractForm;
  Name = other1434.Name;
  Description = other1434.Description;
  ImplementationConstraint = other1434.ImplementationConstraint;
  Note = other1434.Note;
  TaggedValue = other1434.TaggedValue;
  ArgumentationElement = other1434.ArgumentationElement;
  __isset = other1434.__isset;
}
TDDIArgumentPackage& TDDIArgumentPackage::operator=(const TDDIArgumentPackage& other1435) {
  Gid = other1435.Gid;
  IsCitation = other1435.IsCitation;
  IsAbstract = other1435.IsAbstract;
  CitedElement = other1435.CitedElement;
  AbstractForm = other1435.AbstractForm;
  Name = other1435.Name;
  Description = other1435.Description;
  ImplementationConstraint = other1435.ImplementationConstraint;
  Note = other1435.Note;
  TaggedValue = other1435.TaggedValue;
  ArgumentationElement = other1435.ArgumentationElement;
  __isset = other1435.__isset;
  return *this;
}
void TDDIArgumentPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentPackage(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArgumentationElement=" << to_string(ArgumentationElement);
  out << ")";
}


TDDIArgumentPackageInterface::~TDDIArgumentPackageInterface() throw() {
}


void TDDIArgumentPackageInterface::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentPackageInterface::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentPackageInterface::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentPackageInterface::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentPackageInterface::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentPackageInterface::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentPackageInterface::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentPackageInterface::__set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val) {
  this->ArgumentationElement = val;
}

void TDDIArgumentPackageInterface::__set_Implements(const TDDIAbstractArgumentPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1436;
            ::apache::thrift::protocol::TType _etype1439;
            xfer += iprot->readListBegin(_etype1439, _size1436);
            this->ImplementationConstraint.resize(_size1436);
            uint32_t _i1440;
            for (_i1440 = 0; _i1440 < _size1436; ++_i1440)
            {
              xfer += this->ImplementationConstraint[_i1440].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1441;
            ::apache::thrift::protocol::TType _etype1444;
            xfer += iprot->readListBegin(_etype1444, _size1441);
            this->Note.resize(_size1441);
            uint32_t _i1445;
            for (_i1445 = 0; _i1445 < _size1441; ++_i1445)
            {
              xfer += this->Note[_i1445].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1446;
            ::apache::thrift::protocol::TType _etype1449;
            xfer += iprot->readListBegin(_etype1449, _size1446);
            this->TaggedValue.resize(_size1446);
            uint32_t _i1450;
            for (_i1450 = 0; _i1450 < _size1446; ++_i1450)
            {
              xfer += this->TaggedValue[_i1450].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentationElement.clear();
            uint32_t _size1451;
            ::apache::thrift::protocol::TType _etype1454;
            xfer += iprot->readListBegin(_etype1454, _size1451);
            this->ArgumentationElement.resize(_size1451);
            uint32_t _i1455;
            for (_i1455 = 0; _i1455 < _size1451; ++_i1455)
            {
              xfer += this->ArgumentationElement[_i1455].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentPackageInterface");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1456;
    for (_iter1456 = this->ImplementationConstraint.begin(); _iter1456 != this->ImplementationConstraint.end(); ++_iter1456)
    {
      xfer += (*_iter1456).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1457;
    for (_iter1457 = this->Note.begin(); _iter1457 != this->Note.end(); ++_iter1457)
    {
      xfer += (*_iter1457).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1458;
    for (_iter1458 = this->TaggedValue.begin(); _iter1458 != this->TaggedValue.end(); ++_iter1458)
    {
      xfer += (*_iter1458).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentationElement.size()));
    std::vector<TDDIAbstractArgumentationElementRef> ::const_iterator _iter1459;
    for (_iter1459 = this->ArgumentationElement.begin(); _iter1459 != this->ArgumentationElement.end(); ++_iter1459)
    {
      xfer += (*_iter1459).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentPackageInterface &a, TDDIArgumentPackageInterface &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIArgumentPackageInterface::TDDIArgumentPackageInterface(const TDDIArgumentPackageInterface& other1460) {
  Gid = other1460.Gid;
  IsCitation = other1460.IsCitation;
  IsAbstract = other1460.IsAbstract;
  CitedElement = other1460.CitedElement;
  AbstractForm = other1460.AbstractForm;
  Name = other1460.Name;
  Description = other1460.Description;
  ImplementationConstraint = other1460.ImplementationConstraint;
  Note = other1460.Note;
  TaggedValue = other1460.TaggedValue;
  ArgumentationElement = other1460.ArgumentationElement;
  Implements = other1460.Implements;
  __isset = other1460.__isset;
}
TDDIArgumentPackageInterface& TDDIArgumentPackageInterface::operator=(const TDDIArgumentPackageInterface& other1461) {
  Gid = other1461.Gid;
  IsCitation = other1461.IsCitation;
  IsAbstract = other1461.IsAbstract;
  CitedElement = other1461.CitedElement;
  AbstractForm = other1461.AbstractForm;
  Name = other1461.Name;
  Description = other1461.Description;
  ImplementationConstraint = other1461.ImplementationConstraint;
  Note = other1461.Note;
  TaggedValue = other1461.TaggedValue;
  ArgumentationElement = other1461.ArgumentationElement;
  Implements = other1461.Implements;
  __isset = other1461.__isset;
  return *this;
}
void TDDIArgumentPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentPackageInterface(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArgumentationElement=" << to_string(ArgumentationElement);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIArgumentPackageBinding::~TDDIArgumentPackageBinding() throw() {
}


void TDDIArgumentPackageBinding::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentPackageBinding::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentPackageBinding::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentPackageBinding::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentPackageBinding::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentPackageBinding::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentPackageBinding::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentPackageBinding::__set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val) {
  this->ArgumentationElement = val;
}

void TDDIArgumentPackageBinding::__set_ParticipantPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val) {
  this->ParticipantPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1462;
            ::apache::thrift::protocol::TType _etype1465;
            xfer += iprot->readListBegin(_etype1465, _size1462);
            this->ImplementationConstraint.resize(_size1462);
            uint32_t _i1466;
            for (_i1466 = 0; _i1466 < _size1462; ++_i1466)
            {
              xfer += this->ImplementationConstraint[_i1466].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1467;
            ::apache::thrift::protocol::TType _etype1470;
            xfer += iprot->readListBegin(_etype1470, _size1467);
            this->Note.resize(_size1467);
            uint32_t _i1471;
            for (_i1471 = 0; _i1471 < _size1467; ++_i1471)
            {
              xfer += this->Note[_i1471].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1472;
            ::apache::thrift::protocol::TType _etype1475;
            xfer += iprot->readListBegin(_etype1475, _size1472);
            this->TaggedValue.resize(_size1472);
            uint32_t _i1476;
            for (_i1476 = 0; _i1476 < _size1472; ++_i1476)
            {
              xfer += this->TaggedValue[_i1476].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentationElement.clear();
            uint32_t _size1477;
            ::apache::thrift::protocol::TType _etype1480;
            xfer += iprot->readListBegin(_etype1480, _size1477);
            this->ArgumentationElement.resize(_size1477);
            uint32_t _i1481;
            for (_i1481 = 0; _i1481 < _size1477; ++_i1481)
            {
              xfer += this->ArgumentationElement[_i1481].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackage.clear();
            uint32_t _size1482;
            ::apache::thrift::protocol::TType _etype1485;
            xfer += iprot->readListBegin(_etype1485, _size1482);
            this->ParticipantPackage.resize(_size1482);
            uint32_t _i1486;
            for (_i1486 = 0; _i1486 < _size1482; ++_i1486)
            {
              xfer += this->ParticipantPackage[_i1486].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentPackageBinding");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1487;
    for (_iter1487 = this->ImplementationConstraint.begin(); _iter1487 != this->ImplementationConstraint.end(); ++_iter1487)
    {
      xfer += (*_iter1487).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1488;
    for (_iter1488 = this->Note.begin(); _iter1488 != this->Note.end(); ++_iter1488)
    {
      xfer += (*_iter1488).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1489;
    for (_iter1489 = this->TaggedValue.begin(); _iter1489 != this->TaggedValue.end(); ++_iter1489)
    {
      xfer += (*_iter1489).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentationElement.size()));
    std::vector<TDDIAbstractArgumentationElementRef> ::const_iterator _iter1490;
    for (_iter1490 = this->ArgumentationElement.begin(); _iter1490 != this->ArgumentationElement.end(); ++_iter1490)
    {
      xfer += (*_iter1490).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackage", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackage.size()));
    std::vector<TDDIAbstractArgumentPackageRef> ::const_iterator _iter1491;
    for (_iter1491 = this->ParticipantPackage.begin(); _iter1491 != this->ParticipantPackage.end(); ++_iter1491)
    {
      xfer += (*_iter1491).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentPackageBinding &a, TDDIArgumentPackageBinding &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.ParticipantPackage, b.ParticipantPackage);
  swap(a.__isset, b.__isset);
}

TDDIArgumentPackageBinding::TDDIArgumentPackageBinding(const TDDIArgumentPackageBinding& other1492) {
  Gid = other1492.Gid;
  IsCitation = other1492.IsCitation;
  IsAbstract = other1492.IsAbstract;
  CitedElement = other1492.CitedElement;
  AbstractForm = other1492.AbstractForm;
  Name = other1492.Name;
  Description = other1492.Description;
  ImplementationConstraint = other1492.ImplementationConstraint;
  Note = other1492.Note;
  TaggedValue = other1492.TaggedValue;
  ArgumentationElement = other1492.ArgumentationElement;
  ParticipantPackage = other1492.ParticipantPackage;
  __isset = other1492.__isset;
}
TDDIArgumentPackageBinding& TDDIArgumentPackageBinding::operator=(const TDDIArgumentPackageBinding& other1493) {
  Gid = other1493.Gid;
  IsCitation = other1493.IsCitation;
  IsAbstract = other1493.IsAbstract;
  CitedElement = other1493.CitedElement;
  AbstractForm = other1493.AbstractForm;
  Name = other1493.Name;
  Description = other1493.Description;
  ImplementationConstraint = other1493.ImplementationConstraint;
  Note = other1493.Note;
  TaggedValue = other1493.TaggedValue;
  ArgumentationElement = other1493.ArgumentationElement;
  ParticipantPackage = other1493.ParticipantPackage;
  __isset = other1493.__isset;
  return *this;
}
void TDDIArgumentPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentPackageBinding(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArgumentationElement=" << to_string(ArgumentationElement);
  out << ", " << "ParticipantPackage=" << to_string(ParticipantPackage);
  out << ")";
}


TDDIArgumentAssetUnion::~TDDIArgumentAssetUnion() throw() {
}


void TDDIArgumentAssetUnion::__set_Assertion(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertion> val) {
  this->Assertion = val;
__isset.Assertion = true;
}

void TDDIArgumentAssetUnion::__set_ArgumentReasoning(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentReasoning> val) {
  this->ArgumentReasoning = val;
__isset.ArgumentReasoning = true;
}

void TDDIArgumentAssetUnion::__set_ArtifactReference(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactReference> val) {
  this->ArtifactReference = val;
__isset.ArtifactReference = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentAssetUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentAssetUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Assertion) { 
            this->Assertion = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertion>(new TDDIAbstractAssertion);
          }
          xfer += this->Assertion->read(iprot);
          bool wasSet = false;
          if (this->Assertion->__isset.UsedAssertion) { wasSet = true; }
          if (this->Assertion->__isset.UsedAssertionType) { wasSet = true; }
          if (!wasSet) { this->Assertion.reset(); }
          this->__isset.Assertion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentReasoning) { 
            this->ArgumentReasoning = ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentReasoning>(new TDDIArgumentReasoning);
          }
          xfer += this->ArgumentReasoning->read(iprot);
          bool wasSet = false;
          if (this->ArgumentReasoning->__isset.Gid) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.IsCitation) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.IsAbstract) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.CitedElement) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.AbstractForm) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.Name) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.Description) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.Note) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.TaggedValue) { wasSet = true; }
          if (this->ArgumentReasoning->__isset.Structure) { wasSet = true; }
          if (!wasSet) { this->ArgumentReasoning.reset(); }
          this->__isset.ArgumentReasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactReference) { 
            this->ArtifactReference = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactReference>(new TDDIArtifactReference);
          }
          xfer += this->ArtifactReference->read(iprot);
          bool wasSet = false;
          if (this->ArtifactReference->__isset.Gid) { wasSet = true; }
          if (this->ArtifactReference->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactReference->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactReference->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactReference->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactReference->__isset.Name) { wasSet = true; }
          if (this->ArtifactReference->__isset.Description) { wasSet = true; }
          if (this->ArtifactReference->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactReference->__isset.Note) { wasSet = true; }
          if (this->ArtifactReference->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactReference->__isset.ReferencedArtifactElement) { wasSet = true; }
          if (!wasSet) { this->ArtifactReference.reset(); }
          this->__isset.ArtifactReference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentAssetUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentAssetUnion");

  if (this->__isset.Assertion) {
    xfer += oprot->writeFieldBegin("Assertion", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Assertion) {
      xfer += this->Assertion->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractAssertion"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentReasoning) {
    xfer += oprot->writeFieldBegin("ArgumentReasoning", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArgumentReasoning) {
      xfer += this->ArgumentReasoning->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArgumentReasoning"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactReference) {
    xfer += oprot->writeFieldBegin("ArtifactReference", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArtifactReference) {
      xfer += this->ArtifactReference->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactReference"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentAssetUnion &a, TDDIArgumentAssetUnion &b) {
  using ::std::swap;
  swap(a.Assertion, b.Assertion);
  swap(a.ArgumentReasoning, b.ArgumentReasoning);
  swap(a.ArtifactReference, b.ArtifactReference);
  swap(a.__isset, b.__isset);
}

TDDIArgumentAssetUnion::TDDIArgumentAssetUnion(const TDDIArgumentAssetUnion& other1494) {
  Assertion = other1494.Assertion;
  ArgumentReasoning = other1494.ArgumentReasoning;
  ArtifactReference = other1494.ArtifactReference;
  __isset = other1494.__isset;
}
TDDIArgumentAssetUnion& TDDIArgumentAssetUnion::operator=(const TDDIArgumentAssetUnion& other1495) {
  Assertion = other1495.Assertion;
  ArgumentReasoning = other1495.ArgumentReasoning;
  ArtifactReference = other1495.ArtifactReference;
  __isset = other1495.__isset;
  return *this;
}
void TDDIArgumentAssetUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentAssetUnion(";
  out << "Assertion="; (__isset.Assertion ? (out << to_string(Assertion)) : (out << "<null>"));
  out << ", " << "ArgumentReasoning="; (__isset.ArgumentReasoning ? (out << to_string(ArgumentReasoning)) : (out << "<null>"));
  out << ", " << "ArtifactReference="; (__isset.ArtifactReference ? (out << to_string(ArtifactReference)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArgumentAsset::~TDDIAbstractArgumentAsset() throw() {
}


void TDDIAbstractArgumentAsset::__set_UsedArgumentAsset(const TDDIArgumentAssetUnion& val) {
  this->UsedArgumentAsset = val;
}

void TDDIAbstractArgumentAsset::__set_UsedArgumentAssetType(const TDDIArgumentAssetUnionType val) {
  this->UsedArgumentAssetType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentAsset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArgumentAsset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArgumentAsset.read(iprot);
          this->__isset.UsedArgumentAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1496;
          xfer += iprot->readI32(ecast1496);
          this->UsedArgumentAssetType = (TDDIArgumentAssetUnionType)ecast1496;
          this->__isset.UsedArgumentAssetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArgumentAsset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArgumentAsset");

  xfer += oprot->writeFieldBegin("UsedArgumentAsset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArgumentAsset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArgumentAssetType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArgumentAssetType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArgumentAsset &a, TDDIAbstractArgumentAsset &b) {
  using ::std::swap;
  swap(a.UsedArgumentAsset, b.UsedArgumentAsset);
  swap(a.UsedArgumentAssetType, b.UsedArgumentAssetType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArgumentAsset::TDDIAbstractArgumentAsset(const TDDIAbstractArgumentAsset& other1497) {
  UsedArgumentAsset = other1497.UsedArgumentAsset;
  UsedArgumentAssetType = other1497.UsedArgumentAssetType;
  __isset = other1497.__isset;
}
TDDIAbstractArgumentAsset& TDDIAbstractArgumentAsset::operator=(const TDDIAbstractArgumentAsset& other1498) {
  UsedArgumentAsset = other1498.UsedArgumentAsset;
  UsedArgumentAssetType = other1498.UsedArgumentAssetType;
  __isset = other1498.__isset;
  return *this;
}
void TDDIAbstractArgumentAsset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArgumentAsset(";
  out << "UsedArgumentAsset=" << to_string(UsedArgumentAsset);
  out << ", " << "UsedArgumentAssetType=" << to_string(UsedArgumentAssetType);
  out << ")";
}


TDDIArgumentReasoning::~TDDIArgumentReasoning() throw() {
}


void TDDIArgumentReasoning::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArgumentReasoning::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArgumentReasoning::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArgumentReasoning::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArgumentReasoning::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArgumentReasoning::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArgumentReasoning::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArgumentReasoning::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArgumentReasoning::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArgumentReasoning::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArgumentReasoning::__set_Structure(const TDDIAbstractArgumentPackage& val) {
  this->Structure = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArgumentReasoning& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArgumentReasoning::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1499;
            ::apache::thrift::protocol::TType _etype1502;
            xfer += iprot->readListBegin(_etype1502, _size1499);
            this->ImplementationConstraint.resize(_size1499);
            uint32_t _i1503;
            for (_i1503 = 0; _i1503 < _size1499; ++_i1503)
            {
              xfer += this->ImplementationConstraint[_i1503].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1504;
            ::apache::thrift::protocol::TType _etype1507;
            xfer += iprot->readListBegin(_etype1507, _size1504);
            this->Note.resize(_size1504);
            uint32_t _i1508;
            for (_i1508 = 0; _i1508 < _size1504; ++_i1508)
            {
              xfer += this->Note[_i1508].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1509;
            ::apache::thrift::protocol::TType _etype1512;
            xfer += iprot->readListBegin(_etype1512, _size1509);
            this->TaggedValue.resize(_size1509);
            uint32_t _i1513;
            for (_i1513 = 0; _i1513 < _size1509; ++_i1513)
            {
              xfer += this->TaggedValue[_i1513].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Structure.read(iprot);
          this->__isset.Structure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArgumentReasoning::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArgumentReasoning");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1514;
    for (_iter1514 = this->ImplementationConstraint.begin(); _iter1514 != this->ImplementationConstraint.end(); ++_iter1514)
    {
      xfer += (*_iter1514).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1515;
    for (_iter1515 = this->Note.begin(); _iter1515 != this->Note.end(); ++_iter1515)
    {
      xfer += (*_iter1515).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1516;
    for (_iter1516 = this->TaggedValue.begin(); _iter1516 != this->TaggedValue.end(); ++_iter1516)
    {
      xfer += (*_iter1516).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Structure", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->Structure.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArgumentReasoning &a, TDDIArgumentReasoning &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Structure, b.Structure);
  swap(a.__isset, b.__isset);
}

TDDIArgumentReasoning::TDDIArgumentReasoning(const TDDIArgumentReasoning& other1517) {
  Gid = other1517.Gid;
  IsCitation = other1517.IsCitation;
  IsAbstract = other1517.IsAbstract;
  CitedElement = other1517.CitedElement;
  AbstractForm = other1517.AbstractForm;
  Name = other1517.Name;
  Description = other1517.Description;
  ImplementationConstraint = other1517.ImplementationConstraint;
  Note = other1517.Note;
  TaggedValue = other1517.TaggedValue;
  Structure = other1517.Structure;
  __isset = other1517.__isset;
}
TDDIArgumentReasoning& TDDIArgumentReasoning::operator=(const TDDIArgumentReasoning& other1518) {
  Gid = other1518.Gid;
  IsCitation = other1518.IsCitation;
  IsAbstract = other1518.IsAbstract;
  CitedElement = other1518.CitedElement;
  AbstractForm = other1518.AbstractForm;
  Name = other1518.Name;
  Description = other1518.Description;
  ImplementationConstraint = other1518.ImplementationConstraint;
  Note = other1518.Note;
  TaggedValue = other1518.TaggedValue;
  Structure = other1518.Structure;
  __isset = other1518.__isset;
  return *this;
}
void TDDIArgumentReasoning::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArgumentReasoning(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Structure=" << to_string(Structure);
  out << ")";
}


TDDIClaim::~TDDIClaim() throw() {
}


void TDDIClaim::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIClaim::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIClaim::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIClaim::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIClaim::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIClaim::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIClaim::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIClaim::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIClaim::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIClaim::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIClaim::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIClaim::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIClaim& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIClaim::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1519;
            ::apache::thrift::protocol::TType _etype1522;
            xfer += iprot->readListBegin(_etype1522, _size1519);
            this->ImplementationConstraint.resize(_size1519);
            uint32_t _i1523;
            for (_i1523 = 0; _i1523 < _size1519; ++_i1523)
            {
              xfer += this->ImplementationConstraint[_i1523].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1524;
            ::apache::thrift::protocol::TType _etype1527;
            xfer += iprot->readListBegin(_etype1527, _size1524);
            this->Note.resize(_size1524);
            uint32_t _i1528;
            for (_i1528 = 0; _i1528 < _size1524; ++_i1528)
            {
              xfer += this->Note[_i1528].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1529;
            ::apache::thrift::protocol::TType _etype1532;
            xfer += iprot->readListBegin(_etype1532, _size1529);
            this->TaggedValue.resize(_size1529);
            uint32_t _i1533;
            for (_i1533 = 0; _i1533 < _size1529; ++_i1533)
            {
              xfer += this->TaggedValue[_i1533].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1534;
          xfer += iprot->readI32(ecast1534);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast1534;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size1535;
            ::apache::thrift::protocol::TType _etype1538;
            xfer += iprot->readListBegin(_etype1538, _size1535);
            this->MetaClaim.resize(_size1535);
            uint32_t _i1539;
            for (_i1539 = 0; _i1539 < _size1535; ++_i1539)
            {
              xfer += this->MetaClaim[_i1539].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIClaim::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIClaim");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1540;
    for (_iter1540 = this->ImplementationConstraint.begin(); _iter1540 != this->ImplementationConstraint.end(); ++_iter1540)
    {
      xfer += (*_iter1540).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1541;
    for (_iter1541 = this->Note.begin(); _iter1541 != this->Note.end(); ++_iter1541)
    {
      xfer += (*_iter1541).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1542;
    for (_iter1542 = this->TaggedValue.begin(); _iter1542 != this->TaggedValue.end(); ++_iter1542)
    {
      xfer += (*_iter1542).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter1543;
    for (_iter1543 = this->MetaClaim.begin(); _iter1543 != this->MetaClaim.end(); ++_iter1543)
    {
      xfer += (*_iter1543).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIClaim &a, TDDIClaim &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.__isset, b.__isset);
}

TDDIClaim::TDDIClaim(const TDDIClaim& other1544) {
  Gid = other1544.Gid;
  IsCitation = other1544.IsCitation;
  IsAbstract = other1544.IsAbstract;
  CitedElement = other1544.CitedElement;
  AbstractForm = other1544.AbstractForm;
  Name = other1544.Name;
  Description = other1544.Description;
  ImplementationConstraint = other1544.ImplementationConstraint;
  Note = other1544.Note;
  TaggedValue = other1544.TaggedValue;
  AssertionDeclaration = other1544.AssertionDeclaration;
  MetaClaim = other1544.MetaClaim;
  __isset = other1544.__isset;
}
TDDIClaim& TDDIClaim::operator=(const TDDIClaim& other1545) {
  Gid = other1545.Gid;
  IsCitation = other1545.IsCitation;
  IsAbstract = other1545.IsAbstract;
  CitedElement = other1545.CitedElement;
  AbstractForm = other1545.AbstractForm;
  Name = other1545.Name;
  Description = other1545.Description;
  ImplementationConstraint = other1545.ImplementationConstraint;
  Note = other1545.Note;
  TaggedValue = other1545.TaggedValue;
  AssertionDeclaration = other1545.AssertionDeclaration;
  MetaClaim = other1545.MetaClaim;
  __isset = other1545.__isset;
  return *this;
}
void TDDIClaim::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIClaim(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ")";
}


TDDIAssertionUnion::~TDDIAssertionUnion() throw() {
}


void TDDIAssertionUnion::__set_Claim(::apache::thrift::stdcxx::shared_ptr<TDDIClaim> val) {
  this->Claim = val;
__isset.Claim = true;
}

void TDDIAssertionUnion::__set_AssertedRelationship(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertedRelationship> val) {
  this->AssertedRelationship = val;
__isset.AssertedRelationship = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertionUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertionUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Claim) { 
            this->Claim = ::apache::thrift::stdcxx::shared_ptr<TDDIClaim>(new TDDIClaim);
          }
          xfer += this->Claim->read(iprot);
          bool wasSet = false;
          if (this->Claim->__isset.Gid) { wasSet = true; }
          if (this->Claim->__isset.IsCitation) { wasSet = true; }
          if (this->Claim->__isset.IsAbstract) { wasSet = true; }
          if (this->Claim->__isset.CitedElement) { wasSet = true; }
          if (this->Claim->__isset.AbstractForm) { wasSet = true; }
          if (this->Claim->__isset.Name) { wasSet = true; }
          if (this->Claim->__isset.Description) { wasSet = true; }
          if (this->Claim->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Claim->__isset.Note) { wasSet = true; }
          if (this->Claim->__isset.TaggedValue) { wasSet = true; }
          if (this->Claim->__isset.AssertionDeclaration) { wasSet = true; }
          if (this->Claim->__isset.MetaClaim) { wasSet = true; }
          if (!wasSet) { this->Claim.reset(); }
          this->__isset.Claim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssertedRelationship) { 
            this->AssertedRelationship = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertedRelationship>(new TDDIAbstractAssertedRelationship);
          }
          xfer += this->AssertedRelationship->read(iprot);
          bool wasSet = false;
          if (this->AssertedRelationship->__isset.UsedAssertedRelationship) { wasSet = true; }
          if (this->AssertedRelationship->__isset.UsedAssertedRelationshipType) { wasSet = true; }
          if (!wasSet) { this->AssertedRelationship.reset(); }
          this->__isset.AssertedRelationship = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertionUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertionUnion");

  if (this->__isset.Claim) {
    xfer += oprot->writeFieldBegin("Claim", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Claim) {
      xfer += this->Claim->write(oprot); 
    } else {oprot->writeStructBegin("TDDIClaim"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedRelationship) {
    xfer += oprot->writeFieldBegin("AssertedRelationship", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->AssertedRelationship) {
      xfer += this->AssertedRelationship->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractAssertedRelationship"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertionUnion &a, TDDIAssertionUnion &b) {
  using ::std::swap;
  swap(a.Claim, b.Claim);
  swap(a.AssertedRelationship, b.AssertedRelationship);
  swap(a.__isset, b.__isset);
}

TDDIAssertionUnion::TDDIAssertionUnion(const TDDIAssertionUnion& other1546) {
  Claim = other1546.Claim;
  AssertedRelationship = other1546.AssertedRelationship;
  __isset = other1546.__isset;
}
TDDIAssertionUnion& TDDIAssertionUnion::operator=(const TDDIAssertionUnion& other1547) {
  Claim = other1547.Claim;
  AssertedRelationship = other1547.AssertedRelationship;
  __isset = other1547.__isset;
  return *this;
}
void TDDIAssertionUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertionUnion(";
  out << "Claim="; (__isset.Claim ? (out << to_string(Claim)) : (out << "<null>"));
  out << ", " << "AssertedRelationship="; (__isset.AssertedRelationship ? (out << to_string(AssertedRelationship)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractAssertion::~TDDIAbstractAssertion() throw() {
}


void TDDIAbstractAssertion::__set_UsedAssertion(const TDDIAssertionUnion& val) {
  this->UsedAssertion = val;
}

void TDDIAbstractAssertion::__set_UsedAssertionType(const TDDIAssertionUnionType val) {
  this->UsedAssertionType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssertion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssertion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedAssertion.read(iprot);
          this->__isset.UsedAssertion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1548;
          xfer += iprot->readI32(ecast1548);
          this->UsedAssertionType = (TDDIAssertionUnionType)ecast1548;
          this->__isset.UsedAssertionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssertion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssertion");

  xfer += oprot->writeFieldBegin("UsedAssertion", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedAssertion.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedAssertionType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedAssertionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssertion &a, TDDIAbstractAssertion &b) {
  using ::std::swap;
  swap(a.UsedAssertion, b.UsedAssertion);
  swap(a.UsedAssertionType, b.UsedAssertionType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssertion::TDDIAbstractAssertion(const TDDIAbstractAssertion& other1549) {
  UsedAssertion = other1549.UsedAssertion;
  UsedAssertionType = other1549.UsedAssertionType;
  __isset = other1549.__isset;
}
TDDIAbstractAssertion& TDDIAbstractAssertion::operator=(const TDDIAbstractAssertion& other1550) {
  UsedAssertion = other1550.UsedAssertion;
  UsedAssertionType = other1550.UsedAssertionType;
  __isset = other1550.__isset;
  return *this;
}
void TDDIAbstractAssertion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssertion(";
  out << "UsedAssertion=" << to_string(UsedAssertion);
  out << ", " << "UsedAssertionType=" << to_string(UsedAssertionType);
  out << ")";
}


TDDIAssertedArtifactSupport::~TDDIAssertedArtifactSupport() throw() {
}


void TDDIAssertedArtifactSupport::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedArtifactSupport::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedArtifactSupport::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedArtifactSupport::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedArtifactSupport::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedArtifactSupport::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedArtifactSupport::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedArtifactSupport::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedArtifactSupport::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedArtifactSupport::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedArtifactSupport::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedArtifactSupport::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedArtifactSupport::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedArtifactSupport::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedArtifactSupport::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedArtifactSupport::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedArtifactSupport& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedArtifactSupport::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1551;
            ::apache::thrift::protocol::TType _etype1554;
            xfer += iprot->readListBegin(_etype1554, _size1551);
            this->ImplementationConstraint.resize(_size1551);
            uint32_t _i1555;
            for (_i1555 = 0; _i1555 < _size1551; ++_i1555)
            {
              xfer += this->ImplementationConstraint[_i1555].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1556;
            ::apache::thrift::protocol::TType _etype1559;
            xfer += iprot->readListBegin(_etype1559, _size1556);
            this->Note.resize(_size1556);
            uint32_t _i1560;
            for (_i1560 = 0; _i1560 < _size1556; ++_i1560)
            {
              xfer += this->Note[_i1560].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1561;
            ::apache::thrift::protocol::TType _etype1564;
            xfer += iprot->readListBegin(_etype1564, _size1561);
            this->TaggedValue.resize(_size1561);
            uint32_t _i1565;
            for (_i1565 = 0; _i1565 < _size1561; ++_i1565)
            {
              xfer += this->TaggedValue[_i1565].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1566;
          xfer += iprot->readI32(ecast1566);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast1566;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size1567;
            ::apache::thrift::protocol::TType _etype1570;
            xfer += iprot->readListBegin(_etype1570, _size1567);
            this->MetaClaim.resize(_size1567);
            uint32_t _i1571;
            for (_i1571 = 0; _i1571 < _size1567; ++_i1571)
            {
              xfer += this->MetaClaim[_i1571].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size1572;
            ::apache::thrift::protocol::TType _etype1575;
            xfer += iprot->readListBegin(_etype1575, _size1572);
            this->Source.resize(_size1572);
            uint32_t _i1576;
            for (_i1576 = 0; _i1576 < _size1572; ++_i1576)
            {
              xfer += this->Source[_i1576].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size1577;
            ::apache::thrift::protocol::TType _etype1580;
            xfer += iprot->readListBegin(_etype1580, _size1577);
            this->Target.resize(_size1577);
            uint32_t _i1581;
            for (_i1581 = 0; _i1581 < _size1577; ++_i1581)
            {
              xfer += this->Target[_i1581].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedArtifactSupport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedArtifactSupport");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1582;
    for (_iter1582 = this->ImplementationConstraint.begin(); _iter1582 != this->ImplementationConstraint.end(); ++_iter1582)
    {
      xfer += (*_iter1582).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1583;
    for (_iter1583 = this->Note.begin(); _iter1583 != this->Note.end(); ++_iter1583)
    {
      xfer += (*_iter1583).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1584;
    for (_iter1584 = this->TaggedValue.begin(); _iter1584 != this->TaggedValue.end(); ++_iter1584)
    {
      xfer += (*_iter1584).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter1585;
    for (_iter1585 = this->MetaClaim.begin(); _iter1585 != this->MetaClaim.end(); ++_iter1585)
    {
      xfer += (*_iter1585).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1586;
    for (_iter1586 = this->Source.begin(); _iter1586 != this->Source.end(); ++_iter1586)
    {
      xfer += (*_iter1586).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1587;
    for (_iter1587 = this->Target.begin(); _iter1587 != this->Target.end(); ++_iter1587)
    {
      xfer += (*_iter1587).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedArtifactSupport &a, TDDIAssertedArtifactSupport &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedArtifactSupport::TDDIAssertedArtifactSupport(const TDDIAssertedArtifactSupport& other1588) {
  Gid = other1588.Gid;
  IsCitation = other1588.IsCitation;
  IsAbstract = other1588.IsAbstract;
  CitedElement = other1588.CitedElement;
  AbstractForm = other1588.AbstractForm;
  Name = other1588.Name;
  Description = other1588.Description;
  ImplementationConstraint = other1588.ImplementationConstraint;
  Note = other1588.Note;
  TaggedValue = other1588.TaggedValue;
  AssertionDeclaration = other1588.AssertionDeclaration;
  MetaClaim = other1588.MetaClaim;
  IsCounter = other1588.IsCounter;
  Source = other1588.Source;
  Target = other1588.Target;
  Reasoning = other1588.Reasoning;
  __isset = other1588.__isset;
}
TDDIAssertedArtifactSupport& TDDIAssertedArtifactSupport::operator=(const TDDIAssertedArtifactSupport& other1589) {
  Gid = other1589.Gid;
  IsCitation = other1589.IsCitation;
  IsAbstract = other1589.IsAbstract;
  CitedElement = other1589.CitedElement;
  AbstractForm = other1589.AbstractForm;
  Name = other1589.Name;
  Description = other1589.Description;
  ImplementationConstraint = other1589.ImplementationConstraint;
  Note = other1589.Note;
  TaggedValue = other1589.TaggedValue;
  AssertionDeclaration = other1589.AssertionDeclaration;
  MetaClaim = other1589.MetaClaim;
  IsCounter = other1589.IsCounter;
  Source = other1589.Source;
  Target = other1589.Target;
  Reasoning = other1589.Reasoning;
  __isset = other1589.__isset;
  return *this;
}
void TDDIAssertedArtifactSupport::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedArtifactSupport(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedArtifactContext::~TDDIAssertedArtifactContext() throw() {
}


void TDDIAssertedArtifactContext::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedArtifactContext::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedArtifactContext::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedArtifactContext::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedArtifactContext::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedArtifactContext::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedArtifactContext::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedArtifactContext::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedArtifactContext::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedArtifactContext::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedArtifactContext::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedArtifactContext::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedArtifactContext::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedArtifactContext::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedArtifactContext::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedArtifactContext::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedArtifactContext& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedArtifactContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1590;
            ::apache::thrift::protocol::TType _etype1593;
            xfer += iprot->readListBegin(_etype1593, _size1590);
            this->ImplementationConstraint.resize(_size1590);
            uint32_t _i1594;
            for (_i1594 = 0; _i1594 < _size1590; ++_i1594)
            {
              xfer += this->ImplementationConstraint[_i1594].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1595;
            ::apache::thrift::protocol::TType _etype1598;
            xfer += iprot->readListBegin(_etype1598, _size1595);
            this->Note.resize(_size1595);
            uint32_t _i1599;
            for (_i1599 = 0; _i1599 < _size1595; ++_i1599)
            {
              xfer += this->Note[_i1599].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1600;
            ::apache::thrift::protocol::TType _etype1603;
            xfer += iprot->readListBegin(_etype1603, _size1600);
            this->TaggedValue.resize(_size1600);
            uint32_t _i1604;
            for (_i1604 = 0; _i1604 < _size1600; ++_i1604)
            {
              xfer += this->TaggedValue[_i1604].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1605;
          xfer += iprot->readI32(ecast1605);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast1605;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size1606;
            ::apache::thrift::protocol::TType _etype1609;
            xfer += iprot->readListBegin(_etype1609, _size1606);
            this->MetaClaim.resize(_size1606);
            uint32_t _i1610;
            for (_i1610 = 0; _i1610 < _size1606; ++_i1610)
            {
              xfer += this->MetaClaim[_i1610].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size1611;
            ::apache::thrift::protocol::TType _etype1614;
            xfer += iprot->readListBegin(_etype1614, _size1611);
            this->Source.resize(_size1611);
            uint32_t _i1615;
            for (_i1615 = 0; _i1615 < _size1611; ++_i1615)
            {
              xfer += this->Source[_i1615].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size1616;
            ::apache::thrift::protocol::TType _etype1619;
            xfer += iprot->readListBegin(_etype1619, _size1616);
            this->Target.resize(_size1616);
            uint32_t _i1620;
            for (_i1620 = 0; _i1620 < _size1616; ++_i1620)
            {
              xfer += this->Target[_i1620].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedArtifactContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedArtifactContext");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1621;
    for (_iter1621 = this->ImplementationConstraint.begin(); _iter1621 != this->ImplementationConstraint.end(); ++_iter1621)
    {
      xfer += (*_iter1621).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1622;
    for (_iter1622 = this->Note.begin(); _iter1622 != this->Note.end(); ++_iter1622)
    {
      xfer += (*_iter1622).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1623;
    for (_iter1623 = this->TaggedValue.begin(); _iter1623 != this->TaggedValue.end(); ++_iter1623)
    {
      xfer += (*_iter1623).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter1624;
    for (_iter1624 = this->MetaClaim.begin(); _iter1624 != this->MetaClaim.end(); ++_iter1624)
    {
      xfer += (*_iter1624).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1625;
    for (_iter1625 = this->Source.begin(); _iter1625 != this->Source.end(); ++_iter1625)
    {
      xfer += (*_iter1625).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1626;
    for (_iter1626 = this->Target.begin(); _iter1626 != this->Target.end(); ++_iter1626)
    {
      xfer += (*_iter1626).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedArtifactContext &a, TDDIAssertedArtifactContext &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedArtifactContext::TDDIAssertedArtifactContext(const TDDIAssertedArtifactContext& other1627) {
  Gid = other1627.Gid;
  IsCitation = other1627.IsCitation;
  IsAbstract = other1627.IsAbstract;
  CitedElement = other1627.CitedElement;
  AbstractForm = other1627.AbstractForm;
  Name = other1627.Name;
  Description = other1627.Description;
  ImplementationConstraint = other1627.ImplementationConstraint;
  Note = other1627.Note;
  TaggedValue = other1627.TaggedValue;
  AssertionDeclaration = other1627.AssertionDeclaration;
  MetaClaim = other1627.MetaClaim;
  IsCounter = other1627.IsCounter;
  Source = other1627.Source;
  Target = other1627.Target;
  Reasoning = other1627.Reasoning;
  __isset = other1627.__isset;
}
TDDIAssertedArtifactContext& TDDIAssertedArtifactContext::operator=(const TDDIAssertedArtifactContext& other1628) {
  Gid = other1628.Gid;
  IsCitation = other1628.IsCitation;
  IsAbstract = other1628.IsAbstract;
  CitedElement = other1628.CitedElement;
  AbstractForm = other1628.AbstractForm;
  Name = other1628.Name;
  Description = other1628.Description;
  ImplementationConstraint = other1628.ImplementationConstraint;
  Note = other1628.Note;
  TaggedValue = other1628.TaggedValue;
  AssertionDeclaration = other1628.AssertionDeclaration;
  MetaClaim = other1628.MetaClaim;
  IsCounter = other1628.IsCounter;
  Source = other1628.Source;
  Target = other1628.Target;
  Reasoning = other1628.Reasoning;
  __isset = other1628.__isset;
  return *this;
}
void TDDIAssertedArtifactContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedArtifactContext(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedInference::~TDDIAssertedInference() throw() {
}


void TDDIAssertedInference::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedInference::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedInference::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedInference::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedInference::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedInference::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedInference::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedInference::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedInference::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedInference::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedInference::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedInference::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedInference::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedInference::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedInference::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedInference::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedInference& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedInference::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1629;
            ::apache::thrift::protocol::TType _etype1632;
            xfer += iprot->readListBegin(_etype1632, _size1629);
            this->ImplementationConstraint.resize(_size1629);
            uint32_t _i1633;
            for (_i1633 = 0; _i1633 < _size1629; ++_i1633)
            {
              xfer += this->ImplementationConstraint[_i1633].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1634;
            ::apache::thrift::protocol::TType _etype1637;
            xfer += iprot->readListBegin(_etype1637, _size1634);
            this->Note.resize(_size1634);
            uint32_t _i1638;
            for (_i1638 = 0; _i1638 < _size1634; ++_i1638)
            {
              xfer += this->Note[_i1638].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1639;
            ::apache::thrift::protocol::TType _etype1642;
            xfer += iprot->readListBegin(_etype1642, _size1639);
            this->TaggedValue.resize(_size1639);
            uint32_t _i1643;
            for (_i1643 = 0; _i1643 < _size1639; ++_i1643)
            {
              xfer += this->TaggedValue[_i1643].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1644;
          xfer += iprot->readI32(ecast1644);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast1644;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size1645;
            ::apache::thrift::protocol::TType _etype1648;
            xfer += iprot->readListBegin(_etype1648, _size1645);
            this->MetaClaim.resize(_size1645);
            uint32_t _i1649;
            for (_i1649 = 0; _i1649 < _size1645; ++_i1649)
            {
              xfer += this->MetaClaim[_i1649].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size1650;
            ::apache::thrift::protocol::TType _etype1653;
            xfer += iprot->readListBegin(_etype1653, _size1650);
            this->Source.resize(_size1650);
            uint32_t _i1654;
            for (_i1654 = 0; _i1654 < _size1650; ++_i1654)
            {
              xfer += this->Source[_i1654].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size1655;
            ::apache::thrift::protocol::TType _etype1658;
            xfer += iprot->readListBegin(_etype1658, _size1655);
            this->Target.resize(_size1655);
            uint32_t _i1659;
            for (_i1659 = 0; _i1659 < _size1655; ++_i1659)
            {
              xfer += this->Target[_i1659].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedInference::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedInference");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1660;
    for (_iter1660 = this->ImplementationConstraint.begin(); _iter1660 != this->ImplementationConstraint.end(); ++_iter1660)
    {
      xfer += (*_iter1660).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1661;
    for (_iter1661 = this->Note.begin(); _iter1661 != this->Note.end(); ++_iter1661)
    {
      xfer += (*_iter1661).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1662;
    for (_iter1662 = this->TaggedValue.begin(); _iter1662 != this->TaggedValue.end(); ++_iter1662)
    {
      xfer += (*_iter1662).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter1663;
    for (_iter1663 = this->MetaClaim.begin(); _iter1663 != this->MetaClaim.end(); ++_iter1663)
    {
      xfer += (*_iter1663).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1664;
    for (_iter1664 = this->Source.begin(); _iter1664 != this->Source.end(); ++_iter1664)
    {
      xfer += (*_iter1664).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1665;
    for (_iter1665 = this->Target.begin(); _iter1665 != this->Target.end(); ++_iter1665)
    {
      xfer += (*_iter1665).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedInference &a, TDDIAssertedInference &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedInference::TDDIAssertedInference(const TDDIAssertedInference& other1666) {
  Gid = other1666.Gid;
  IsCitation = other1666.IsCitation;
  IsAbstract = other1666.IsAbstract;
  CitedElement = other1666.CitedElement;
  AbstractForm = other1666.AbstractForm;
  Name = other1666.Name;
  Description = other1666.Description;
  ImplementationConstraint = other1666.ImplementationConstraint;
  Note = other1666.Note;
  TaggedValue = other1666.TaggedValue;
  AssertionDeclaration = other1666.AssertionDeclaration;
  MetaClaim = other1666.MetaClaim;
  IsCounter = other1666.IsCounter;
  Source = other1666.Source;
  Target = other1666.Target;
  Reasoning = other1666.Reasoning;
  __isset = other1666.__isset;
}
TDDIAssertedInference& TDDIAssertedInference::operator=(const TDDIAssertedInference& other1667) {
  Gid = other1667.Gid;
  IsCitation = other1667.IsCitation;
  IsAbstract = other1667.IsAbstract;
  CitedElement = other1667.CitedElement;
  AbstractForm = other1667.AbstractForm;
  Name = other1667.Name;
  Description = other1667.Description;
  ImplementationConstraint = other1667.ImplementationConstraint;
  Note = other1667.Note;
  TaggedValue = other1667.TaggedValue;
  AssertionDeclaration = other1667.AssertionDeclaration;
  MetaClaim = other1667.MetaClaim;
  IsCounter = other1667.IsCounter;
  Source = other1667.Source;
  Target = other1667.Target;
  Reasoning = other1667.Reasoning;
  __isset = other1667.__isset;
  return *this;
}
void TDDIAssertedInference::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedInference(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedEvidence::~TDDIAssertedEvidence() throw() {
}


void TDDIAssertedEvidence::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedEvidence::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedEvidence::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedEvidence::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedEvidence::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedEvidence::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedEvidence::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedEvidence::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedEvidence::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedEvidence::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedEvidence::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedEvidence::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedEvidence::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedEvidence::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedEvidence::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedEvidence::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedEvidence& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedEvidence::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1668;
            ::apache::thrift::protocol::TType _etype1671;
            xfer += iprot->readListBegin(_etype1671, _size1668);
            this->ImplementationConstraint.resize(_size1668);
            uint32_t _i1672;
            for (_i1672 = 0; _i1672 < _size1668; ++_i1672)
            {
              xfer += this->ImplementationConstraint[_i1672].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1673;
            ::apache::thrift::protocol::TType _etype1676;
            xfer += iprot->readListBegin(_etype1676, _size1673);
            this->Note.resize(_size1673);
            uint32_t _i1677;
            for (_i1677 = 0; _i1677 < _size1673; ++_i1677)
            {
              xfer += this->Note[_i1677].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1678;
            ::apache::thrift::protocol::TType _etype1681;
            xfer += iprot->readListBegin(_etype1681, _size1678);
            this->TaggedValue.resize(_size1678);
            uint32_t _i1682;
            for (_i1682 = 0; _i1682 < _size1678; ++_i1682)
            {
              xfer += this->TaggedValue[_i1682].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1683;
          xfer += iprot->readI32(ecast1683);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast1683;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size1684;
            ::apache::thrift::protocol::TType _etype1687;
            xfer += iprot->readListBegin(_etype1687, _size1684);
            this->MetaClaim.resize(_size1684);
            uint32_t _i1688;
            for (_i1688 = 0; _i1688 < _size1684; ++_i1688)
            {
              xfer += this->MetaClaim[_i1688].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size1689;
            ::apache::thrift::protocol::TType _etype1692;
            xfer += iprot->readListBegin(_etype1692, _size1689);
            this->Source.resize(_size1689);
            uint32_t _i1693;
            for (_i1693 = 0; _i1693 < _size1689; ++_i1693)
            {
              xfer += this->Source[_i1693].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size1694;
            ::apache::thrift::protocol::TType _etype1697;
            xfer += iprot->readListBegin(_etype1697, _size1694);
            this->Target.resize(_size1694);
            uint32_t _i1698;
            for (_i1698 = 0; _i1698 < _size1694; ++_i1698)
            {
              xfer += this->Target[_i1698].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedEvidence::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedEvidence");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1699;
    for (_iter1699 = this->ImplementationConstraint.begin(); _iter1699 != this->ImplementationConstraint.end(); ++_iter1699)
    {
      xfer += (*_iter1699).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1700;
    for (_iter1700 = this->Note.begin(); _iter1700 != this->Note.end(); ++_iter1700)
    {
      xfer += (*_iter1700).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1701;
    for (_iter1701 = this->TaggedValue.begin(); _iter1701 != this->TaggedValue.end(); ++_iter1701)
    {
      xfer += (*_iter1701).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter1702;
    for (_iter1702 = this->MetaClaim.begin(); _iter1702 != this->MetaClaim.end(); ++_iter1702)
    {
      xfer += (*_iter1702).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1703;
    for (_iter1703 = this->Source.begin(); _iter1703 != this->Source.end(); ++_iter1703)
    {
      xfer += (*_iter1703).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1704;
    for (_iter1704 = this->Target.begin(); _iter1704 != this->Target.end(); ++_iter1704)
    {
      xfer += (*_iter1704).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedEvidence &a, TDDIAssertedEvidence &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedEvidence::TDDIAssertedEvidence(const TDDIAssertedEvidence& other1705) {
  Gid = other1705.Gid;
  IsCitation = other1705.IsCitation;
  IsAbstract = other1705.IsAbstract;
  CitedElement = other1705.CitedElement;
  AbstractForm = other1705.AbstractForm;
  Name = other1705.Name;
  Description = other1705.Description;
  ImplementationConstraint = other1705.ImplementationConstraint;
  Note = other1705.Note;
  TaggedValue = other1705.TaggedValue;
  AssertionDeclaration = other1705.AssertionDeclaration;
  MetaClaim = other1705.MetaClaim;
  IsCounter = other1705.IsCounter;
  Source = other1705.Source;
  Target = other1705.Target;
  Reasoning = other1705.Reasoning;
  __isset = other1705.__isset;
}
TDDIAssertedEvidence& TDDIAssertedEvidence::operator=(const TDDIAssertedEvidence& other1706) {
  Gid = other1706.Gid;
  IsCitation = other1706.IsCitation;
  IsAbstract = other1706.IsAbstract;
  CitedElement = other1706.CitedElement;
  AbstractForm = other1706.AbstractForm;
  Name = other1706.Name;
  Description = other1706.Description;
  ImplementationConstraint = other1706.ImplementationConstraint;
  Note = other1706.Note;
  TaggedValue = other1706.TaggedValue;
  AssertionDeclaration = other1706.AssertionDeclaration;
  MetaClaim = other1706.MetaClaim;
  IsCounter = other1706.IsCounter;
  Source = other1706.Source;
  Target = other1706.Target;
  Reasoning = other1706.Reasoning;
  __isset = other1706.__isset;
  return *this;
}
void TDDIAssertedEvidence::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedEvidence(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedContext::~TDDIAssertedContext() throw() {
}


void TDDIAssertedContext::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssertedContext::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssertedContext::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssertedContext::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssertedContext::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssertedContext::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssertedContext::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssertedContext::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssertedContext::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssertedContext::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssertedContext::__set_AssertionDeclaration(const TDDIAssertionDeclaration val) {
  this->AssertionDeclaration = val;
}

void TDDIAssertedContext::__set_MetaClaim(const std::vector<TDDIClaimRef> & val) {
  this->MetaClaim = val;
}

void TDDIAssertedContext::__set_IsCounter(const bool val) {
  this->IsCounter = val;
}

void TDDIAssertedContext::__set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Source = val;
}

void TDDIAssertedContext::__set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val) {
  this->Target = val;
}

void TDDIAssertedContext::__set_Reasoning(const TDDIArgumentReasoning& val) {
  this->Reasoning = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedContext& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1707;
            ::apache::thrift::protocol::TType _etype1710;
            xfer += iprot->readListBegin(_etype1710, _size1707);
            this->ImplementationConstraint.resize(_size1707);
            uint32_t _i1711;
            for (_i1711 = 0; _i1711 < _size1707; ++_i1711)
            {
              xfer += this->ImplementationConstraint[_i1711].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1712;
            ::apache::thrift::protocol::TType _etype1715;
            xfer += iprot->readListBegin(_etype1715, _size1712);
            this->Note.resize(_size1712);
            uint32_t _i1716;
            for (_i1716 = 0; _i1716 < _size1712; ++_i1716)
            {
              xfer += this->Note[_i1716].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1717;
            ::apache::thrift::protocol::TType _etype1720;
            xfer += iprot->readListBegin(_etype1720, _size1717);
            this->TaggedValue.resize(_size1717);
            uint32_t _i1721;
            for (_i1721 = 0; _i1721 < _size1717; ++_i1721)
            {
              xfer += this->TaggedValue[_i1721].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1722;
          xfer += iprot->readI32(ecast1722);
          this->AssertionDeclaration = (TDDIAssertionDeclaration)ecast1722;
          this->__isset.AssertionDeclaration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->MetaClaim.clear();
            uint32_t _size1723;
            ::apache::thrift::protocol::TType _etype1726;
            xfer += iprot->readListBegin(_etype1726, _size1723);
            this->MetaClaim.resize(_size1723);
            uint32_t _i1727;
            for (_i1727 = 0; _i1727 < _size1723; ++_i1727)
            {
              xfer += this->MetaClaim[_i1727].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.MetaClaim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCounter);
          this->__isset.IsCounter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size1728;
            ::apache::thrift::protocol::TType _etype1731;
            xfer += iprot->readListBegin(_etype1731, _size1728);
            this->Source.resize(_size1728);
            uint32_t _i1732;
            for (_i1732 = 0; _i1732 < _size1728; ++_i1732)
            {
              xfer += this->Source[_i1732].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size1733;
            ::apache::thrift::protocol::TType _etype1736;
            xfer += iprot->readListBegin(_etype1736, _size1733);
            this->Target.resize(_size1733);
            uint32_t _i1737;
            for (_i1737 = 0; _i1737 < _size1733; ++_i1737)
            {
              xfer += this->Target[_i1737].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Reasoning.read(iprot);
          this->__isset.Reasoning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedContext");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1738;
    for (_iter1738 = this->ImplementationConstraint.begin(); _iter1738 != this->ImplementationConstraint.end(); ++_iter1738)
    {
      xfer += (*_iter1738).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1739;
    for (_iter1739 = this->Note.begin(); _iter1739 != this->Note.end(); ++_iter1739)
    {
      xfer += (*_iter1739).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1740;
    for (_iter1740 = this->TaggedValue.begin(); _iter1740 != this->TaggedValue.end(); ++_iter1740)
    {
      xfer += (*_iter1740).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssertionDeclaration", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->AssertionDeclaration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MetaClaim", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->MetaClaim.size()));
    std::vector<TDDIClaimRef> ::const_iterator _iter1741;
    for (_iter1741 = this->MetaClaim.begin(); _iter1741 != this->MetaClaim.end(); ++_iter1741)
    {
      xfer += (*_iter1741).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCounter", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->IsCounter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1742;
    for (_iter1742 = this->Source.begin(); _iter1742 != this->Source.end(); ++_iter1742)
    {
      xfer += (*_iter1742).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArgumentAssetRef> ::const_iterator _iter1743;
    for (_iter1743 = this->Target.begin(); _iter1743 != this->Target.end(); ++_iter1743)
    {
      xfer += (*_iter1743).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Reasoning", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Reasoning.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedContext &a, TDDIAssertedContext &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssertionDeclaration, b.AssertionDeclaration);
  swap(a.MetaClaim, b.MetaClaim);
  swap(a.IsCounter, b.IsCounter);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.Reasoning, b.Reasoning);
  swap(a.__isset, b.__isset);
}

TDDIAssertedContext::TDDIAssertedContext(const TDDIAssertedContext& other1744) {
  Gid = other1744.Gid;
  IsCitation = other1744.IsCitation;
  IsAbstract = other1744.IsAbstract;
  CitedElement = other1744.CitedElement;
  AbstractForm = other1744.AbstractForm;
  Name = other1744.Name;
  Description = other1744.Description;
  ImplementationConstraint = other1744.ImplementationConstraint;
  Note = other1744.Note;
  TaggedValue = other1744.TaggedValue;
  AssertionDeclaration = other1744.AssertionDeclaration;
  MetaClaim = other1744.MetaClaim;
  IsCounter = other1744.IsCounter;
  Source = other1744.Source;
  Target = other1744.Target;
  Reasoning = other1744.Reasoning;
  __isset = other1744.__isset;
}
TDDIAssertedContext& TDDIAssertedContext::operator=(const TDDIAssertedContext& other1745) {
  Gid = other1745.Gid;
  IsCitation = other1745.IsCitation;
  IsAbstract = other1745.IsAbstract;
  CitedElement = other1745.CitedElement;
  AbstractForm = other1745.AbstractForm;
  Name = other1745.Name;
  Description = other1745.Description;
  ImplementationConstraint = other1745.ImplementationConstraint;
  Note = other1745.Note;
  TaggedValue = other1745.TaggedValue;
  AssertionDeclaration = other1745.AssertionDeclaration;
  MetaClaim = other1745.MetaClaim;
  IsCounter = other1745.IsCounter;
  Source = other1745.Source;
  Target = other1745.Target;
  Reasoning = other1745.Reasoning;
  __isset = other1745.__isset;
  return *this;
}
void TDDIAssertedContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedContext(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssertionDeclaration=" << to_string(AssertionDeclaration);
  out << ", " << "MetaClaim=" << to_string(MetaClaim);
  out << ", " << "IsCounter=" << to_string(IsCounter);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ", " << "Reasoning=" << to_string(Reasoning);
  out << ")";
}


TDDIAssertedRelationshipUnion::~TDDIAssertedRelationshipUnion() throw() {
}


void TDDIAssertedRelationshipUnion::__set_AssertedArtifactSupport(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedArtifactSupport> val) {
  this->AssertedArtifactSupport = val;
__isset.AssertedArtifactSupport = true;
}

void TDDIAssertedRelationshipUnion::__set_AssertedArtifactContext(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedArtifactContext> val) {
  this->AssertedArtifactContext = val;
__isset.AssertedArtifactContext = true;
}

void TDDIAssertedRelationshipUnion::__set_AssertedInference(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedInference> val) {
  this->AssertedInference = val;
__isset.AssertedInference = true;
}

void TDDIAssertedRelationshipUnion::__set_AssertedEvidence(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedEvidence> val) {
  this->AssertedEvidence = val;
__isset.AssertedEvidence = true;
}

void TDDIAssertedRelationshipUnion::__set_AssertedContext(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedContext> val) {
  this->AssertedContext = val;
__isset.AssertedContext = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssertedRelationshipUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssertedRelationshipUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssertedArtifactSupport) { 
            this->AssertedArtifactSupport = ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedArtifactSupport>(new TDDIAssertedArtifactSupport);
          }
          xfer += this->AssertedArtifactSupport->read(iprot);
          bool wasSet = false;
          if (this->AssertedArtifactSupport->__isset.Gid) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.IsCitation) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.IsAbstract) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.CitedElement) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.AbstractForm) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.Name) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.Description) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.Note) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.TaggedValue) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.AssertionDeclaration) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.MetaClaim) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.IsCounter) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.Source) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.Target) { wasSet = true; }
          if (this->AssertedArtifactSupport->__isset.Reasoning) { wasSet = true; }
          if (!wasSet) { this->AssertedArtifactSupport.reset(); }
          this->__isset.AssertedArtifactSupport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssertedArtifactContext) { 
            this->AssertedArtifactContext = ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedArtifactContext>(new TDDIAssertedArtifactContext);
          }
          xfer += this->AssertedArtifactContext->read(iprot);
          bool wasSet = false;
          if (this->AssertedArtifactContext->__isset.Gid) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.IsCitation) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.IsAbstract) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.CitedElement) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.AbstractForm) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.Name) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.Description) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.Note) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.TaggedValue) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.AssertionDeclaration) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.MetaClaim) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.IsCounter) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.Source) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.Target) { wasSet = true; }
          if (this->AssertedArtifactContext->__isset.Reasoning) { wasSet = true; }
          if (!wasSet) { this->AssertedArtifactContext.reset(); }
          this->__isset.AssertedArtifactContext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssertedInference) { 
            this->AssertedInference = ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedInference>(new TDDIAssertedInference);
          }
          xfer += this->AssertedInference->read(iprot);
          bool wasSet = false;
          if (this->AssertedInference->__isset.Gid) { wasSet = true; }
          if (this->AssertedInference->__isset.IsCitation) { wasSet = true; }
          if (this->AssertedInference->__isset.IsAbstract) { wasSet = true; }
          if (this->AssertedInference->__isset.CitedElement) { wasSet = true; }
          if (this->AssertedInference->__isset.AbstractForm) { wasSet = true; }
          if (this->AssertedInference->__isset.Name) { wasSet = true; }
          if (this->AssertedInference->__isset.Description) { wasSet = true; }
          if (this->AssertedInference->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssertedInference->__isset.Note) { wasSet = true; }
          if (this->AssertedInference->__isset.TaggedValue) { wasSet = true; }
          if (this->AssertedInference->__isset.AssertionDeclaration) { wasSet = true; }
          if (this->AssertedInference->__isset.MetaClaim) { wasSet = true; }
          if (this->AssertedInference->__isset.IsCounter) { wasSet = true; }
          if (this->AssertedInference->__isset.Source) { wasSet = true; }
          if (this->AssertedInference->__isset.Target) { wasSet = true; }
          if (this->AssertedInference->__isset.Reasoning) { wasSet = true; }
          if (!wasSet) { this->AssertedInference.reset(); }
          this->__isset.AssertedInference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssertedEvidence) { 
            this->AssertedEvidence = ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedEvidence>(new TDDIAssertedEvidence);
          }
          xfer += this->AssertedEvidence->read(iprot);
          bool wasSet = false;
          if (this->AssertedEvidence->__isset.Gid) { wasSet = true; }
          if (this->AssertedEvidence->__isset.IsCitation) { wasSet = true; }
          if (this->AssertedEvidence->__isset.IsAbstract) { wasSet = true; }
          if (this->AssertedEvidence->__isset.CitedElement) { wasSet = true; }
          if (this->AssertedEvidence->__isset.AbstractForm) { wasSet = true; }
          if (this->AssertedEvidence->__isset.Name) { wasSet = true; }
          if (this->AssertedEvidence->__isset.Description) { wasSet = true; }
          if (this->AssertedEvidence->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssertedEvidence->__isset.Note) { wasSet = true; }
          if (this->AssertedEvidence->__isset.TaggedValue) { wasSet = true; }
          if (this->AssertedEvidence->__isset.AssertionDeclaration) { wasSet = true; }
          if (this->AssertedEvidence->__isset.MetaClaim) { wasSet = true; }
          if (this->AssertedEvidence->__isset.IsCounter) { wasSet = true; }
          if (this->AssertedEvidence->__isset.Source) { wasSet = true; }
          if (this->AssertedEvidence->__isset.Target) { wasSet = true; }
          if (this->AssertedEvidence->__isset.Reasoning) { wasSet = true; }
          if (!wasSet) { this->AssertedEvidence.reset(); }
          this->__isset.AssertedEvidence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssertedContext) { 
            this->AssertedContext = ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedContext>(new TDDIAssertedContext);
          }
          xfer += this->AssertedContext->read(iprot);
          bool wasSet = false;
          if (this->AssertedContext->__isset.Gid) { wasSet = true; }
          if (this->AssertedContext->__isset.IsCitation) { wasSet = true; }
          if (this->AssertedContext->__isset.IsAbstract) { wasSet = true; }
          if (this->AssertedContext->__isset.CitedElement) { wasSet = true; }
          if (this->AssertedContext->__isset.AbstractForm) { wasSet = true; }
          if (this->AssertedContext->__isset.Name) { wasSet = true; }
          if (this->AssertedContext->__isset.Description) { wasSet = true; }
          if (this->AssertedContext->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssertedContext->__isset.Note) { wasSet = true; }
          if (this->AssertedContext->__isset.TaggedValue) { wasSet = true; }
          if (this->AssertedContext->__isset.AssertionDeclaration) { wasSet = true; }
          if (this->AssertedContext->__isset.MetaClaim) { wasSet = true; }
          if (this->AssertedContext->__isset.IsCounter) { wasSet = true; }
          if (this->AssertedContext->__isset.Source) { wasSet = true; }
          if (this->AssertedContext->__isset.Target) { wasSet = true; }
          if (this->AssertedContext->__isset.Reasoning) { wasSet = true; }
          if (!wasSet) { this->AssertedContext.reset(); }
          this->__isset.AssertedContext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssertedRelationshipUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssertedRelationshipUnion");

  if (this->__isset.AssertedArtifactSupport) {
    xfer += oprot->writeFieldBegin("AssertedArtifactSupport", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->AssertedArtifactSupport) {
      xfer += this->AssertedArtifactSupport->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssertedArtifactSupport"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedArtifactContext) {
    xfer += oprot->writeFieldBegin("AssertedArtifactContext", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->AssertedArtifactContext) {
      xfer += this->AssertedArtifactContext->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssertedArtifactContext"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedInference) {
    xfer += oprot->writeFieldBegin("AssertedInference", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->AssertedInference) {
      xfer += this->AssertedInference->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssertedInference"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedEvidence) {
    xfer += oprot->writeFieldBegin("AssertedEvidence", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->AssertedEvidence) {
      xfer += this->AssertedEvidence->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssertedEvidence"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssertedContext) {
    xfer += oprot->writeFieldBegin("AssertedContext", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->AssertedContext) {
      xfer += this->AssertedContext->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssertedContext"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssertedRelationshipUnion &a, TDDIAssertedRelationshipUnion &b) {
  using ::std::swap;
  swap(a.AssertedArtifactSupport, b.AssertedArtifactSupport);
  swap(a.AssertedArtifactContext, b.AssertedArtifactContext);
  swap(a.AssertedInference, b.AssertedInference);
  swap(a.AssertedEvidence, b.AssertedEvidence);
  swap(a.AssertedContext, b.AssertedContext);
  swap(a.__isset, b.__isset);
}

TDDIAssertedRelationshipUnion::TDDIAssertedRelationshipUnion(const TDDIAssertedRelationshipUnion& other1746) {
  AssertedArtifactSupport = other1746.AssertedArtifactSupport;
  AssertedArtifactContext = other1746.AssertedArtifactContext;
  AssertedInference = other1746.AssertedInference;
  AssertedEvidence = other1746.AssertedEvidence;
  AssertedContext = other1746.AssertedContext;
  __isset = other1746.__isset;
}
TDDIAssertedRelationshipUnion& TDDIAssertedRelationshipUnion::operator=(const TDDIAssertedRelationshipUnion& other1747) {
  AssertedArtifactSupport = other1747.AssertedArtifactSupport;
  AssertedArtifactContext = other1747.AssertedArtifactContext;
  AssertedInference = other1747.AssertedInference;
  AssertedEvidence = other1747.AssertedEvidence;
  AssertedContext = other1747.AssertedContext;
  __isset = other1747.__isset;
  return *this;
}
void TDDIAssertedRelationshipUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssertedRelationshipUnion(";
  out << "AssertedArtifactSupport="; (__isset.AssertedArtifactSupport ? (out << to_string(AssertedArtifactSupport)) : (out << "<null>"));
  out << ", " << "AssertedArtifactContext="; (__isset.AssertedArtifactContext ? (out << to_string(AssertedArtifactContext)) : (out << "<null>"));
  out << ", " << "AssertedInference="; (__isset.AssertedInference ? (out << to_string(AssertedInference)) : (out << "<null>"));
  out << ", " << "AssertedEvidence="; (__isset.AssertedEvidence ? (out << to_string(AssertedEvidence)) : (out << "<null>"));
  out << ", " << "AssertedContext="; (__isset.AssertedContext ? (out << to_string(AssertedContext)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractAssertedRelationship::~TDDIAbstractAssertedRelationship() throw() {
}


void TDDIAbstractAssertedRelationship::__set_UsedAssertedRelationship(const TDDIAssertedRelationshipUnion& val) {
  this->UsedAssertedRelationship = val;
}

void TDDIAbstractAssertedRelationship::__set_UsedAssertedRelationshipType(const TDDIAssertedRelationshipUnionType val) {
  this->UsedAssertedRelationshipType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssertedRelationship& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssertedRelationship::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedAssertedRelationship.read(iprot);
          this->__isset.UsedAssertedRelationship = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1748;
          xfer += iprot->readI32(ecast1748);
          this->UsedAssertedRelationshipType = (TDDIAssertedRelationshipUnionType)ecast1748;
          this->__isset.UsedAssertedRelationshipType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssertedRelationship::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssertedRelationship");

  xfer += oprot->writeFieldBegin("UsedAssertedRelationship", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedAssertedRelationship.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedAssertedRelationshipType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedAssertedRelationshipType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssertedRelationship &a, TDDIAbstractAssertedRelationship &b) {
  using ::std::swap;
  swap(a.UsedAssertedRelationship, b.UsedAssertedRelationship);
  swap(a.UsedAssertedRelationshipType, b.UsedAssertedRelationshipType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssertedRelationship::TDDIAbstractAssertedRelationship(const TDDIAbstractAssertedRelationship& other1749) {
  UsedAssertedRelationship = other1749.UsedAssertedRelationship;
  UsedAssertedRelationshipType = other1749.UsedAssertedRelationshipType;
  __isset = other1749.__isset;
}
TDDIAbstractAssertedRelationship& TDDIAbstractAssertedRelationship::operator=(const TDDIAbstractAssertedRelationship& other1750) {
  UsedAssertedRelationship = other1750.UsedAssertedRelationship;
  UsedAssertedRelationshipType = other1750.UsedAssertedRelationshipType;
  __isset = other1750.__isset;
  return *this;
}
void TDDIAbstractAssertedRelationship::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssertedRelationship(";
  out << "UsedAssertedRelationship=" << to_string(UsedAssertedRelationship);
  out << ", " << "UsedAssertedRelationshipType=" << to_string(UsedAssertedRelationshipType);
  out << ")";
}


TDDIArtifactPackageUnion::~TDDIArtifactPackageUnion() throw() {
}


void TDDIArtifactPackageUnion::__set_ArtifactPackage(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackage> val) {
  this->ArtifactPackage = val;
__isset.ArtifactPackage = true;
}

void TDDIArtifactPackageUnion::__set_ArtifactPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageInterface> val) {
  this->ArtifactPackageInterface = val;
__isset.ArtifactPackageInterface = true;
}

void TDDIArtifactPackageUnion::__set_ArtifactPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageBinding> val) {
  this->ArtifactPackageBinding = val;
__isset.ArtifactPackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactPackage) { 
            this->ArtifactPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackage>(new TDDIArtifactPackage);
          }
          xfer += this->ArtifactPackage->read(iprot);
          bool wasSet = false;
          if (this->ArtifactPackage->__isset.Gid) { wasSet = true; }
          if (this->ArtifactPackage->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactPackage->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactPackage->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactPackage->__isset.Name) { wasSet = true; }
          if (this->ArtifactPackage->__isset.Description) { wasSet = true; }
          if (this->ArtifactPackage->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactPackage->__isset.Note) { wasSet = true; }
          if (this->ArtifactPackage->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactPackage->__isset.ArtifactElement) { wasSet = true; }
          if (!wasSet) { this->ArtifactPackage.reset(); }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactPackageInterface) { 
            this->ArtifactPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageInterface>(new TDDIArtifactPackageInterface);
          }
          xfer += this->ArtifactPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->ArtifactPackageInterface->__isset.Gid) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.Name) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.Description) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.Note) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.ArtifactElement) { wasSet = true; }
          if (this->ArtifactPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->ArtifactPackageInterface.reset(); }
          this->__isset.ArtifactPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactPackageBinding) { 
            this->ArtifactPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageBinding>(new TDDIArtifactPackageBinding);
          }
          xfer += this->ArtifactPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->ArtifactPackageBinding->__isset.Gid) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.Name) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.Description) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.Note) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.ArtifactElement) { wasSet = true; }
          if (this->ArtifactPackageBinding->__isset.ParticipantPackage) { wasSet = true; }
          if (!wasSet) { this->ArtifactPackageBinding.reset(); }
          this->__isset.ArtifactPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactPackageUnion");

  if (this->__isset.ArtifactPackage) {
    xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ArtifactPackage) {
      xfer += this->ArtifactPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactPackageInterface) {
    xfer += oprot->writeFieldBegin("ArtifactPackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ArtifactPackageInterface) {
      xfer += this->ArtifactPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactPackageBinding) {
    xfer += oprot->writeFieldBegin("ArtifactPackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArtifactPackageBinding) {
      xfer += this->ArtifactPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactPackageUnion &a, TDDIArtifactPackageUnion &b) {
  using ::std::swap;
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArtifactPackageInterface, b.ArtifactPackageInterface);
  swap(a.ArtifactPackageBinding, b.ArtifactPackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIArtifactPackageUnion::TDDIArtifactPackageUnion(const TDDIArtifactPackageUnion& other1751) {
  ArtifactPackage = other1751.ArtifactPackage;
  ArtifactPackageInterface = other1751.ArtifactPackageInterface;
  ArtifactPackageBinding = other1751.ArtifactPackageBinding;
  __isset = other1751.__isset;
}
TDDIArtifactPackageUnion& TDDIArtifactPackageUnion::operator=(const TDDIArtifactPackageUnion& other1752) {
  ArtifactPackage = other1752.ArtifactPackage;
  ArtifactPackageInterface = other1752.ArtifactPackageInterface;
  ArtifactPackageBinding = other1752.ArtifactPackageBinding;
  __isset = other1752.__isset;
  return *this;
}
void TDDIArtifactPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactPackageUnion(";
  out << "ArtifactPackage="; (__isset.ArtifactPackage ? (out << to_string(ArtifactPackage)) : (out << "<null>"));
  out << ", " << "ArtifactPackageInterface="; (__isset.ArtifactPackageInterface ? (out << to_string(ArtifactPackageInterface)) : (out << "<null>"));
  out << ", " << "ArtifactPackageBinding="; (__isset.ArtifactPackageBinding ? (out << to_string(ArtifactPackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArtifactPackage::~TDDIAbstractArtifactPackage() throw() {
}


void TDDIAbstractArtifactPackage::__set_UsedArtifactPackage(const TDDIArtifactPackageUnion& val) {
  this->UsedArtifactPackage = val;
}

void TDDIAbstractArtifactPackage::__set_UsedArtifactPackageType(const TDDIArtifactPackageUnionType val) {
  this->UsedArtifactPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArtifactPackage.read(iprot);
          this->__isset.UsedArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1753;
          xfer += iprot->readI32(ecast1753);
          this->UsedArtifactPackageType = (TDDIArtifactPackageUnionType)ecast1753;
          this->__isset.UsedArtifactPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactPackage");

  xfer += oprot->writeFieldBegin("UsedArtifactPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArtifactPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArtifactPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArtifactPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactPackage &a, TDDIAbstractArtifactPackage &b) {
  using ::std::swap;
  swap(a.UsedArtifactPackage, b.UsedArtifactPackage);
  swap(a.UsedArtifactPackageType, b.UsedArtifactPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactPackage::TDDIAbstractArtifactPackage(const TDDIAbstractArtifactPackage& other1754) {
  UsedArtifactPackage = other1754.UsedArtifactPackage;
  UsedArtifactPackageType = other1754.UsedArtifactPackageType;
  __isset = other1754.__isset;
}
TDDIAbstractArtifactPackage& TDDIAbstractArtifactPackage::operator=(const TDDIAbstractArtifactPackage& other1755) {
  UsedArtifactPackage = other1755.UsedArtifactPackage;
  UsedArtifactPackageType = other1755.UsedArtifactPackageType;
  __isset = other1755.__isset;
  return *this;
}
void TDDIAbstractArtifactPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactPackage(";
  out << "UsedArtifactPackage=" << to_string(UsedArtifactPackage);
  out << ", " << "UsedArtifactPackageType=" << to_string(UsedArtifactPackageType);
  out << ")";
}


TDDIArtifactPackage::~TDDIArtifactPackage() throw() {
}


void TDDIArtifactPackage::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactPackage::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactPackage::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactPackage::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactPackage::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactPackage::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactPackage::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactPackage::__set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ArtifactElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1756;
            ::apache::thrift::protocol::TType _etype1759;
            xfer += iprot->readListBegin(_etype1759, _size1756);
            this->ImplementationConstraint.resize(_size1756);
            uint32_t _i1760;
            for (_i1760 = 0; _i1760 < _size1756; ++_i1760)
            {
              xfer += this->ImplementationConstraint[_i1760].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1761;
            ::apache::thrift::protocol::TType _etype1764;
            xfer += iprot->readListBegin(_etype1764, _size1761);
            this->Note.resize(_size1761);
            uint32_t _i1765;
            for (_i1765 = 0; _i1765 < _size1761; ++_i1765)
            {
              xfer += this->Note[_i1765].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1766;
            ::apache::thrift::protocol::TType _etype1769;
            xfer += iprot->readListBegin(_etype1769, _size1766);
            this->TaggedValue.resize(_size1766);
            uint32_t _i1770;
            for (_i1770 = 0; _i1770 < _size1766; ++_i1770)
            {
              xfer += this->TaggedValue[_i1770].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactElement.clear();
            uint32_t _size1771;
            ::apache::thrift::protocol::TType _etype1774;
            xfer += iprot->readListBegin(_etype1774, _size1771);
            this->ArtifactElement.resize(_size1771);
            uint32_t _i1775;
            for (_i1775 = 0; _i1775 < _size1771; ++_i1775)
            {
              xfer += this->ArtifactElement[_i1775].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactPackage");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1776;
    for (_iter1776 = this->ImplementationConstraint.begin(); _iter1776 != this->ImplementationConstraint.end(); ++_iter1776)
    {
      xfer += (*_iter1776).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1777;
    for (_iter1777 = this->Note.begin(); _iter1777 != this->Note.end(); ++_iter1777)
    {
      xfer += (*_iter1777).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1778;
    for (_iter1778 = this->TaggedValue.begin(); _iter1778 != this->TaggedValue.end(); ++_iter1778)
    {
      xfer += (*_iter1778).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter1779;
    for (_iter1779 = this->ArtifactElement.begin(); _iter1779 != this->ArtifactElement.end(); ++_iter1779)
    {
      xfer += (*_iter1779).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactPackage &a, TDDIArtifactPackage &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.__isset, b.__isset);
}

TDDIArtifactPackage::TDDIArtifactPackage(const TDDIArtifactPackage& other1780) {
  Gid = other1780.Gid;
  IsCitation = other1780.IsCitation;
  IsAbstract = other1780.IsAbstract;
  CitedElement = other1780.CitedElement;
  AbstractForm = other1780.AbstractForm;
  Name = other1780.Name;
  Description = other1780.Description;
  ImplementationConstraint = other1780.ImplementationConstraint;
  Note = other1780.Note;
  TaggedValue = other1780.TaggedValue;
  ArtifactElement = other1780.ArtifactElement;
  __isset = other1780.__isset;
}
TDDIArtifactPackage& TDDIArtifactPackage::operator=(const TDDIArtifactPackage& other1781) {
  Gid = other1781.Gid;
  IsCitation = other1781.IsCitation;
  IsAbstract = other1781.IsAbstract;
  CitedElement = other1781.CitedElement;
  AbstractForm = other1781.AbstractForm;
  Name = other1781.Name;
  Description = other1781.Description;
  ImplementationConstraint = other1781.ImplementationConstraint;
  Note = other1781.Note;
  TaggedValue = other1781.TaggedValue;
  ArtifactElement = other1781.ArtifactElement;
  __isset = other1781.__isset;
  return *this;
}
void TDDIArtifactPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactPackage(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArtifactElement=" << to_string(ArtifactElement);
  out << ")";
}


TDDIArtifactPackageInterface::~TDDIArtifactPackageInterface() throw() {
}


void TDDIArtifactPackageInterface::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactPackageInterface::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactPackageInterface::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactPackageInterface::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactPackageInterface::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactPackageInterface::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactPackageInterface::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactPackageInterface::__set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ArtifactElement = val;
}

void TDDIArtifactPackageInterface::__set_Implements(const TDDIAbstractArtifactPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1782;
            ::apache::thrift::protocol::TType _etype1785;
            xfer += iprot->readListBegin(_etype1785, _size1782);
            this->ImplementationConstraint.resize(_size1782);
            uint32_t _i1786;
            for (_i1786 = 0; _i1786 < _size1782; ++_i1786)
            {
              xfer += this->ImplementationConstraint[_i1786].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1787;
            ::apache::thrift::protocol::TType _etype1790;
            xfer += iprot->readListBegin(_etype1790, _size1787);
            this->Note.resize(_size1787);
            uint32_t _i1791;
            for (_i1791 = 0; _i1791 < _size1787; ++_i1791)
            {
              xfer += this->Note[_i1791].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1792;
            ::apache::thrift::protocol::TType _etype1795;
            xfer += iprot->readListBegin(_etype1795, _size1792);
            this->TaggedValue.resize(_size1792);
            uint32_t _i1796;
            for (_i1796 = 0; _i1796 < _size1792; ++_i1796)
            {
              xfer += this->TaggedValue[_i1796].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactElement.clear();
            uint32_t _size1797;
            ::apache::thrift::protocol::TType _etype1800;
            xfer += iprot->readListBegin(_etype1800, _size1797);
            this->ArtifactElement.resize(_size1797);
            uint32_t _i1801;
            for (_i1801 = 0; _i1801 < _size1797; ++_i1801)
            {
              xfer += this->ArtifactElement[_i1801].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactPackageInterface");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1802;
    for (_iter1802 = this->ImplementationConstraint.begin(); _iter1802 != this->ImplementationConstraint.end(); ++_iter1802)
    {
      xfer += (*_iter1802).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1803;
    for (_iter1803 = this->Note.begin(); _iter1803 != this->Note.end(); ++_iter1803)
    {
      xfer += (*_iter1803).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1804;
    for (_iter1804 = this->TaggedValue.begin(); _iter1804 != this->TaggedValue.end(); ++_iter1804)
    {
      xfer += (*_iter1804).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter1805;
    for (_iter1805 = this->ArtifactElement.begin(); _iter1805 != this->ArtifactElement.end(); ++_iter1805)
    {
      xfer += (*_iter1805).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactPackageInterface &a, TDDIArtifactPackageInterface &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIArtifactPackageInterface::TDDIArtifactPackageInterface(const TDDIArtifactPackageInterface& other1806) {
  Gid = other1806.Gid;
  IsCitation = other1806.IsCitation;
  IsAbstract = other1806.IsAbstract;
  CitedElement = other1806.CitedElement;
  AbstractForm = other1806.AbstractForm;
  Name = other1806.Name;
  Description = other1806.Description;
  ImplementationConstraint = other1806.ImplementationConstraint;
  Note = other1806.Note;
  TaggedValue = other1806.TaggedValue;
  ArtifactElement = other1806.ArtifactElement;
  Implements = other1806.Implements;
  __isset = other1806.__isset;
}
TDDIArtifactPackageInterface& TDDIArtifactPackageInterface::operator=(const TDDIArtifactPackageInterface& other1807) {
  Gid = other1807.Gid;
  IsCitation = other1807.IsCitation;
  IsAbstract = other1807.IsAbstract;
  CitedElement = other1807.CitedElement;
  AbstractForm = other1807.AbstractForm;
  Name = other1807.Name;
  Description = other1807.Description;
  ImplementationConstraint = other1807.ImplementationConstraint;
  Note = other1807.Note;
  TaggedValue = other1807.TaggedValue;
  ArtifactElement = other1807.ArtifactElement;
  Implements = other1807.Implements;
  __isset = other1807.__isset;
  return *this;
}
void TDDIArtifactPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactPackageInterface(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArtifactElement=" << to_string(ArtifactElement);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIArtifactPackageBinding::~TDDIArtifactPackageBinding() throw() {
}


void TDDIArtifactPackageBinding::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactPackageBinding::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactPackageBinding::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactPackageBinding::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactPackageBinding::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactPackageBinding::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactPackageBinding::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactPackageBinding::__set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ArtifactElement = val;
}

void TDDIArtifactPackageBinding::__set_ParticipantPackage(const std::vector<TDDIAbstractArtifactPackage> & val) {
  this->ParticipantPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1808;
            ::apache::thrift::protocol::TType _etype1811;
            xfer += iprot->readListBegin(_etype1811, _size1808);
            this->ImplementationConstraint.resize(_size1808);
            uint32_t _i1812;
            for (_i1812 = 0; _i1812 < _size1808; ++_i1812)
            {
              xfer += this->ImplementationConstraint[_i1812].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1813;
            ::apache::thrift::protocol::TType _etype1816;
            xfer += iprot->readListBegin(_etype1816, _size1813);
            this->Note.resize(_size1813);
            uint32_t _i1817;
            for (_i1817 = 0; _i1817 < _size1813; ++_i1817)
            {
              xfer += this->Note[_i1817].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1818;
            ::apache::thrift::protocol::TType _etype1821;
            xfer += iprot->readListBegin(_etype1821, _size1818);
            this->TaggedValue.resize(_size1818);
            uint32_t _i1822;
            for (_i1822 = 0; _i1822 < _size1818; ++_i1822)
            {
              xfer += this->TaggedValue[_i1822].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactElement.clear();
            uint32_t _size1823;
            ::apache::thrift::protocol::TType _etype1826;
            xfer += iprot->readListBegin(_etype1826, _size1823);
            this->ArtifactElement.resize(_size1823);
            uint32_t _i1827;
            for (_i1827 = 0; _i1827 < _size1823; ++_i1827)
            {
              xfer += this->ArtifactElement[_i1827].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackage.clear();
            uint32_t _size1828;
            ::apache::thrift::protocol::TType _etype1831;
            xfer += iprot->readListBegin(_etype1831, _size1828);
            this->ParticipantPackage.resize(_size1828);
            uint32_t _i1832;
            for (_i1832 = 0; _i1832 < _size1828; ++_i1832)
            {
              xfer += this->ParticipantPackage[_i1832].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactPackageBinding");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1833;
    for (_iter1833 = this->ImplementationConstraint.begin(); _iter1833 != this->ImplementationConstraint.end(); ++_iter1833)
    {
      xfer += (*_iter1833).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1834;
    for (_iter1834 = this->Note.begin(); _iter1834 != this->Note.end(); ++_iter1834)
    {
      xfer += (*_iter1834).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1835;
    for (_iter1835 = this->TaggedValue.begin(); _iter1835 != this->TaggedValue.end(); ++_iter1835)
    {
      xfer += (*_iter1835).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter1836;
    for (_iter1836 = this->ArtifactElement.begin(); _iter1836 != this->ArtifactElement.end(); ++_iter1836)
    {
      xfer += (*_iter1836).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackage", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackage.size()));
    std::vector<TDDIAbstractArtifactPackage> ::const_iterator _iter1837;
    for (_iter1837 = this->ParticipantPackage.begin(); _iter1837 != this->ParticipantPackage.end(); ++_iter1837)
    {
      xfer += (*_iter1837).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactPackageBinding &a, TDDIArtifactPackageBinding &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.ParticipantPackage, b.ParticipantPackage);
  swap(a.__isset, b.__isset);
}

TDDIArtifactPackageBinding::TDDIArtifactPackageBinding(const TDDIArtifactPackageBinding& other1838) {
  Gid = other1838.Gid;
  IsCitation = other1838.IsCitation;
  IsAbstract = other1838.IsAbstract;
  CitedElement = other1838.CitedElement;
  AbstractForm = other1838.AbstractForm;
  Name = other1838.Name;
  Description = other1838.Description;
  ImplementationConstraint = other1838.ImplementationConstraint;
  Note = other1838.Note;
  TaggedValue = other1838.TaggedValue;
  ArtifactElement = other1838.ArtifactElement;
  ParticipantPackage = other1838.ParticipantPackage;
  __isset = other1838.__isset;
}
TDDIArtifactPackageBinding& TDDIArtifactPackageBinding::operator=(const TDDIArtifactPackageBinding& other1839) {
  Gid = other1839.Gid;
  IsCitation = other1839.IsCitation;
  IsAbstract = other1839.IsAbstract;
  CitedElement = other1839.CitedElement;
  AbstractForm = other1839.AbstractForm;
  Name = other1839.Name;
  Description = other1839.Description;
  ImplementationConstraint = other1839.ImplementationConstraint;
  Note = other1839.Note;
  TaggedValue = other1839.TaggedValue;
  ArtifactElement = other1839.ArtifactElement;
  ParticipantPackage = other1839.ParticipantPackage;
  __isset = other1839.__isset;
  return *this;
}
void TDDIArtifactPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactPackageBinding(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArtifactElement=" << to_string(ArtifactElement);
  out << ", " << "ParticipantPackage=" << to_string(ParticipantPackage);
  out << ")";
}


TDDIArtifactGroup::~TDDIArtifactGroup() throw() {
}


void TDDIArtifactGroup::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactGroup::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactGroup::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactGroup::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactGroup::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactGroup::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactGroup::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactGroup::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactGroup::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactGroup::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactGroup::__set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val) {
  this->ArtifactElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1840;
            ::apache::thrift::protocol::TType _etype1843;
            xfer += iprot->readListBegin(_etype1843, _size1840);
            this->ImplementationConstraint.resize(_size1840);
            uint32_t _i1844;
            for (_i1844 = 0; _i1844 < _size1840; ++_i1844)
            {
              xfer += this->ImplementationConstraint[_i1844].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1845;
            ::apache::thrift::protocol::TType _etype1848;
            xfer += iprot->readListBegin(_etype1848, _size1845);
            this->Note.resize(_size1845);
            uint32_t _i1849;
            for (_i1849 = 0; _i1849 < _size1845; ++_i1849)
            {
              xfer += this->Note[_i1849].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1850;
            ::apache::thrift::protocol::TType _etype1853;
            xfer += iprot->readListBegin(_etype1853, _size1850);
            this->TaggedValue.resize(_size1850);
            uint32_t _i1854;
            for (_i1854 = 0; _i1854 < _size1850; ++_i1854)
            {
              xfer += this->TaggedValue[_i1854].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactElement.clear();
            uint32_t _size1855;
            ::apache::thrift::protocol::TType _etype1858;
            xfer += iprot->readListBegin(_etype1858, _size1855);
            this->ArtifactElement.resize(_size1855);
            uint32_t _i1859;
            for (_i1859 = 0; _i1859 < _size1855; ++_i1859)
            {
              xfer += this->ArtifactElement[_i1859].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactGroup");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1860;
    for (_iter1860 = this->ImplementationConstraint.begin(); _iter1860 != this->ImplementationConstraint.end(); ++_iter1860)
    {
      xfer += (*_iter1860).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1861;
    for (_iter1861 = this->Note.begin(); _iter1861 != this->Note.end(); ++_iter1861)
    {
      xfer += (*_iter1861).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1862;
    for (_iter1862 = this->TaggedValue.begin(); _iter1862 != this->TaggedValue.end(); ++_iter1862)
    {
      xfer += (*_iter1862).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactElement.size()));
    std::vector<TDDIAbstractArtifactElementRef> ::const_iterator _iter1863;
    for (_iter1863 = this->ArtifactElement.begin(); _iter1863 != this->ArtifactElement.end(); ++_iter1863)
    {
      xfer += (*_iter1863).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactGroup &a, TDDIArtifactGroup &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.__isset, b.__isset);
}

TDDIArtifactGroup::TDDIArtifactGroup(const TDDIArtifactGroup& other1864) {
  Gid = other1864.Gid;
  IsCitation = other1864.IsCitation;
  IsAbstract = other1864.IsAbstract;
  CitedElement = other1864.CitedElement;
  AbstractForm = other1864.AbstractForm;
  Name = other1864.Name;
  Description = other1864.Description;
  ImplementationConstraint = other1864.ImplementationConstraint;
  Note = other1864.Note;
  TaggedValue = other1864.TaggedValue;
  ArtifactElement = other1864.ArtifactElement;
  __isset = other1864.__isset;
}
TDDIArtifactGroup& TDDIArtifactGroup::operator=(const TDDIArtifactGroup& other1865) {
  Gid = other1865.Gid;
  IsCitation = other1865.IsCitation;
  IsAbstract = other1865.IsAbstract;
  CitedElement = other1865.CitedElement;
  AbstractForm = other1865.AbstractForm;
  Name = other1865.Name;
  Description = other1865.Description;
  ImplementationConstraint = other1865.ImplementationConstraint;
  Note = other1865.Note;
  TaggedValue = other1865.TaggedValue;
  ArtifactElement = other1865.ArtifactElement;
  __isset = other1865.__isset;
  return *this;
}
void TDDIArtifactGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactGroup(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "ArtifactElement=" << to_string(ArtifactElement);
  out << ")";
}


TDDIProperty::~TDDIProperty() throw() {
}


void TDDIProperty::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIProperty::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIProperty::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIProperty::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIProperty::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIProperty::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIProperty::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIProperty::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIProperty::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIProperty::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIProperty::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIProperty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1866;
            ::apache::thrift::protocol::TType _etype1869;
            xfer += iprot->readListBegin(_etype1869, _size1866);
            this->ImplementationConstraint.resize(_size1866);
            uint32_t _i1870;
            for (_i1870 = 0; _i1870 < _size1866; ++_i1870)
            {
              xfer += this->ImplementationConstraint[_i1870].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1871;
            ::apache::thrift::protocol::TType _etype1874;
            xfer += iprot->readListBegin(_etype1874, _size1871);
            this->Note.resize(_size1871);
            uint32_t _i1875;
            for (_i1875 = 0; _i1875 < _size1871; ++_i1875)
            {
              xfer += this->Note[_i1875].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1876;
            ::apache::thrift::protocol::TType _etype1879;
            xfer += iprot->readListBegin(_etype1879, _size1876);
            this->TaggedValue.resize(_size1876);
            uint32_t _i1880;
            for (_i1880 = 0; _i1880 < _size1876; ++_i1880)
            {
              xfer += this->TaggedValue[_i1880].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size1881;
            ::apache::thrift::protocol::TType _etype1884;
            xfer += iprot->readListBegin(_etype1884, _size1881);
            this->Property.resize(_size1881);
            uint32_t _i1885;
            for (_i1885 = 0; _i1885 < _size1881; ++_i1885)
            {
              xfer += this->Property[_i1885].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIProperty");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1886;
    for (_iter1886 = this->ImplementationConstraint.begin(); _iter1886 != this->ImplementationConstraint.end(); ++_iter1886)
    {
      xfer += (*_iter1886).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1887;
    for (_iter1887 = this->Note.begin(); _iter1887 != this->Note.end(); ++_iter1887)
    {
      xfer += (*_iter1887).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1888;
    for (_iter1888 = this->TaggedValue.begin(); _iter1888 != this->TaggedValue.end(); ++_iter1888)
    {
      xfer += (*_iter1888).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter1889;
    for (_iter1889 = this->Property.begin(); _iter1889 != this->Property.end(); ++_iter1889)
    {
      xfer += (*_iter1889).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIProperty &a, TDDIProperty &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.__isset, b.__isset);
}

TDDIProperty::TDDIProperty(const TDDIProperty& other1890) {
  Gid = other1890.Gid;
  IsCitation = other1890.IsCitation;
  IsAbstract = other1890.IsAbstract;
  CitedElement = other1890.CitedElement;
  AbstractForm = other1890.AbstractForm;
  Name = other1890.Name;
  Description = other1890.Description;
  ImplementationConstraint = other1890.ImplementationConstraint;
  Note = other1890.Note;
  TaggedValue = other1890.TaggedValue;
  Property = other1890.Property;
  __isset = other1890.__isset;
}
TDDIProperty& TDDIProperty::operator=(const TDDIProperty& other1891) {
  Gid = other1891.Gid;
  IsCitation = other1891.IsCitation;
  IsAbstract = other1891.IsAbstract;
  CitedElement = other1891.CitedElement;
  AbstractForm = other1891.AbstractForm;
  Name = other1891.Name;
  Description = other1891.Description;
  ImplementationConstraint = other1891.ImplementationConstraint;
  Note = other1891.Note;
  TaggedValue = other1891.TaggedValue;
  Property = other1891.Property;
  __isset = other1891.__isset;
  return *this;
}
void TDDIProperty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIProperty(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ")";
}


TDDITechnique::~TDDITechnique() throw() {
}


void TDDITechnique::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITechnique::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITechnique::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITechnique::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITechnique::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITechnique::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITechnique::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITechnique::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITechnique::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITechnique::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITechnique::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITechnique& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITechnique::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1892;
            ::apache::thrift::protocol::TType _etype1895;
            xfer += iprot->readListBegin(_etype1895, _size1892);
            this->ImplementationConstraint.resize(_size1892);
            uint32_t _i1896;
            for (_i1896 = 0; _i1896 < _size1892; ++_i1896)
            {
              xfer += this->ImplementationConstraint[_i1896].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1897;
            ::apache::thrift::protocol::TType _etype1900;
            xfer += iprot->readListBegin(_etype1900, _size1897);
            this->Note.resize(_size1897);
            uint32_t _i1901;
            for (_i1901 = 0; _i1901 < _size1897; ++_i1901)
            {
              xfer += this->Note[_i1901].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1902;
            ::apache::thrift::protocol::TType _etype1905;
            xfer += iprot->readListBegin(_etype1905, _size1902);
            this->TaggedValue.resize(_size1902);
            uint32_t _i1906;
            for (_i1906 = 0; _i1906 < _size1902; ++_i1906)
            {
              xfer += this->TaggedValue[_i1906].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size1907;
            ::apache::thrift::protocol::TType _etype1910;
            xfer += iprot->readListBegin(_etype1910, _size1907);
            this->Property.resize(_size1907);
            uint32_t _i1911;
            for (_i1911 = 0; _i1911 < _size1907; ++_i1911)
            {
              xfer += this->Property[_i1911].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITechnique::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITechnique");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1912;
    for (_iter1912 = this->ImplementationConstraint.begin(); _iter1912 != this->ImplementationConstraint.end(); ++_iter1912)
    {
      xfer += (*_iter1912).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1913;
    for (_iter1913 = this->Note.begin(); _iter1913 != this->Note.end(); ++_iter1913)
    {
      xfer += (*_iter1913).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1914;
    for (_iter1914 = this->TaggedValue.begin(); _iter1914 != this->TaggedValue.end(); ++_iter1914)
    {
      xfer += (*_iter1914).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter1915;
    for (_iter1915 = this->Property.begin(); _iter1915 != this->Property.end(); ++_iter1915)
    {
      xfer += (*_iter1915).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITechnique &a, TDDITechnique &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.__isset, b.__isset);
}

TDDITechnique::TDDITechnique(const TDDITechnique& other1916) {
  Gid = other1916.Gid;
  IsCitation = other1916.IsCitation;
  IsAbstract = other1916.IsAbstract;
  CitedElement = other1916.CitedElement;
  AbstractForm = other1916.AbstractForm;
  Name = other1916.Name;
  Description = other1916.Description;
  ImplementationConstraint = other1916.ImplementationConstraint;
  Note = other1916.Note;
  TaggedValue = other1916.TaggedValue;
  Property = other1916.Property;
  __isset = other1916.__isset;
}
TDDITechnique& TDDITechnique::operator=(const TDDITechnique& other1917) {
  Gid = other1917.Gid;
  IsCitation = other1917.IsCitation;
  IsAbstract = other1917.IsAbstract;
  CitedElement = other1917.CitedElement;
  AbstractForm = other1917.AbstractForm;
  Name = other1917.Name;
  Description = other1917.Description;
  ImplementationConstraint = other1917.ImplementationConstraint;
  Note = other1917.Note;
  TaggedValue = other1917.TaggedValue;
  Property = other1917.Property;
  __isset = other1917.__isset;
  return *this;
}
void TDDITechnique::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITechnique(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ")";
}


TDDIParticipant::~TDDIParticipant() throw() {
}


void TDDIParticipant::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIParticipant::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIParticipant::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIParticipant::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIParticipant::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIParticipant::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIParticipant::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIParticipant::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIParticipant::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIParticipant::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIParticipant::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIParticipant& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIParticipant::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1918;
            ::apache::thrift::protocol::TType _etype1921;
            xfer += iprot->readListBegin(_etype1921, _size1918);
            this->ImplementationConstraint.resize(_size1918);
            uint32_t _i1922;
            for (_i1922 = 0; _i1922 < _size1918; ++_i1922)
            {
              xfer += this->ImplementationConstraint[_i1922].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1923;
            ::apache::thrift::protocol::TType _etype1926;
            xfer += iprot->readListBegin(_etype1926, _size1923);
            this->Note.resize(_size1923);
            uint32_t _i1927;
            for (_i1927 = 0; _i1927 < _size1923; ++_i1927)
            {
              xfer += this->Note[_i1927].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1928;
            ::apache::thrift::protocol::TType _etype1931;
            xfer += iprot->readListBegin(_etype1931, _size1928);
            this->TaggedValue.resize(_size1928);
            uint32_t _i1932;
            for (_i1932 = 0; _i1932 < _size1928; ++_i1932)
            {
              xfer += this->TaggedValue[_i1932].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size1933;
            ::apache::thrift::protocol::TType _etype1936;
            xfer += iprot->readListBegin(_etype1936, _size1933);
            this->Property.resize(_size1933);
            uint32_t _i1937;
            for (_i1937 = 0; _i1937 < _size1933; ++_i1937)
            {
              xfer += this->Property[_i1937].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIParticipant::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIParticipant");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1938;
    for (_iter1938 = this->ImplementationConstraint.begin(); _iter1938 != this->ImplementationConstraint.end(); ++_iter1938)
    {
      xfer += (*_iter1938).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1939;
    for (_iter1939 = this->Note.begin(); _iter1939 != this->Note.end(); ++_iter1939)
    {
      xfer += (*_iter1939).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1940;
    for (_iter1940 = this->TaggedValue.begin(); _iter1940 != this->TaggedValue.end(); ++_iter1940)
    {
      xfer += (*_iter1940).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter1941;
    for (_iter1941 = this->Property.begin(); _iter1941 != this->Property.end(); ++_iter1941)
    {
      xfer += (*_iter1941).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIParticipant &a, TDDIParticipant &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.__isset, b.__isset);
}

TDDIParticipant::TDDIParticipant(const TDDIParticipant& other1942) {
  Gid = other1942.Gid;
  IsCitation = other1942.IsCitation;
  IsAbstract = other1942.IsAbstract;
  CitedElement = other1942.CitedElement;
  AbstractForm = other1942.AbstractForm;
  Name = other1942.Name;
  Description = other1942.Description;
  ImplementationConstraint = other1942.ImplementationConstraint;
  Note = other1942.Note;
  TaggedValue = other1942.TaggedValue;
  Property = other1942.Property;
  __isset = other1942.__isset;
}
TDDIParticipant& TDDIParticipant::operator=(const TDDIParticipant& other1943) {
  Gid = other1943.Gid;
  IsCitation = other1943.IsCitation;
  IsAbstract = other1943.IsAbstract;
  CitedElement = other1943.CitedElement;
  AbstractForm = other1943.AbstractForm;
  Name = other1943.Name;
  Description = other1943.Description;
  ImplementationConstraint = other1943.ImplementationConstraint;
  Note = other1943.Note;
  TaggedValue = other1943.TaggedValue;
  Property = other1943.Property;
  __isset = other1943.__isset;
  return *this;
}
void TDDIParticipant::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIParticipant(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ")";
}


TDDIActivity::~TDDIActivity() throw() {
}


void TDDIActivity::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIActivity::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIActivity::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIActivity::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIActivity::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIActivity::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIActivity::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIActivity::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIActivity::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIActivity::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIActivity::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}

void TDDIActivity::__set_StartTime(const std::string& val) {
  this->StartTime = val;
}

void TDDIActivity::__set_EndTime(const std::string& val) {
  this->EndTime = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIActivity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIActivity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1944;
            ::apache::thrift::protocol::TType _etype1947;
            xfer += iprot->readListBegin(_etype1947, _size1944);
            this->ImplementationConstraint.resize(_size1944);
            uint32_t _i1948;
            for (_i1948 = 0; _i1948 < _size1944; ++_i1948)
            {
              xfer += this->ImplementationConstraint[_i1948].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1949;
            ::apache::thrift::protocol::TType _etype1952;
            xfer += iprot->readListBegin(_etype1952, _size1949);
            this->Note.resize(_size1949);
            uint32_t _i1953;
            for (_i1953 = 0; _i1953 < _size1949; ++_i1953)
            {
              xfer += this->Note[_i1953].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1954;
            ::apache::thrift::protocol::TType _etype1957;
            xfer += iprot->readListBegin(_etype1957, _size1954);
            this->TaggedValue.resize(_size1954);
            uint32_t _i1958;
            for (_i1958 = 0; _i1958 < _size1954; ++_i1958)
            {
              xfer += this->TaggedValue[_i1958].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size1959;
            ::apache::thrift::protocol::TType _etype1962;
            xfer += iprot->readListBegin(_etype1962, _size1959);
            this->Property.resize(_size1959);
            uint32_t _i1963;
            for (_i1963 = 0; _i1963 < _size1959; ++_i1963)
            {
              xfer += this->Property[_i1963].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->StartTime);
          this->__isset.StartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->EndTime);
          this->__isset.EndTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIActivity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIActivity");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1964;
    for (_iter1964 = this->ImplementationConstraint.begin(); _iter1964 != this->ImplementationConstraint.end(); ++_iter1964)
    {
      xfer += (*_iter1964).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1965;
    for (_iter1965 = this->Note.begin(); _iter1965 != this->Note.end(); ++_iter1965)
    {
      xfer += (*_iter1965).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1966;
    for (_iter1966 = this->TaggedValue.begin(); _iter1966 != this->TaggedValue.end(); ++_iter1966)
    {
      xfer += (*_iter1966).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter1967;
    for (_iter1967 = this->Property.begin(); _iter1967 != this->Property.end(); ++_iter1967)
    {
      xfer += (*_iter1967).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StartTime", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->StartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("EndTime", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->EndTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIActivity &a, TDDIActivity &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.StartTime, b.StartTime);
  swap(a.EndTime, b.EndTime);
  swap(a.__isset, b.__isset);
}

TDDIActivity::TDDIActivity(const TDDIActivity& other1968) {
  Gid = other1968.Gid;
  IsCitation = other1968.IsCitation;
  IsAbstract = other1968.IsAbstract;
  CitedElement = other1968.CitedElement;
  AbstractForm = other1968.AbstractForm;
  Name = other1968.Name;
  Description = other1968.Description;
  ImplementationConstraint = other1968.ImplementationConstraint;
  Note = other1968.Note;
  TaggedValue = other1968.TaggedValue;
  Property = other1968.Property;
  StartTime = other1968.StartTime;
  EndTime = other1968.EndTime;
  __isset = other1968.__isset;
}
TDDIActivity& TDDIActivity::operator=(const TDDIActivity& other1969) {
  Gid = other1969.Gid;
  IsCitation = other1969.IsCitation;
  IsAbstract = other1969.IsAbstract;
  CitedElement = other1969.CitedElement;
  AbstractForm = other1969.AbstractForm;
  Name = other1969.Name;
  Description = other1969.Description;
  ImplementationConstraint = other1969.ImplementationConstraint;
  Note = other1969.Note;
  TaggedValue = other1969.TaggedValue;
  Property = other1969.Property;
  StartTime = other1969.StartTime;
  EndTime = other1969.EndTime;
  __isset = other1969.__isset;
  return *this;
}
void TDDIActivity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIActivity(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ", " << "StartTime=" << to_string(StartTime);
  out << ", " << "EndTime=" << to_string(EndTime);
  out << ")";
}


TDDIEvent::~TDDIEvent() throw() {
}


void TDDIEvent::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIEvent::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIEvent::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIEvent::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIEvent::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIEvent::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIEvent::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIEvent::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIEvent::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIEvent::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIEvent::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}

void TDDIEvent::__set_Occurence(const std::string& val) {
  this->Occurence = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1970;
            ::apache::thrift::protocol::TType _etype1973;
            xfer += iprot->readListBegin(_etype1973, _size1970);
            this->ImplementationConstraint.resize(_size1970);
            uint32_t _i1974;
            for (_i1974 = 0; _i1974 < _size1970; ++_i1974)
            {
              xfer += this->ImplementationConstraint[_i1974].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size1975;
            ::apache::thrift::protocol::TType _etype1978;
            xfer += iprot->readListBegin(_etype1978, _size1975);
            this->Note.resize(_size1975);
            uint32_t _i1979;
            for (_i1979 = 0; _i1979 < _size1975; ++_i1979)
            {
              xfer += this->Note[_i1979].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size1980;
            ::apache::thrift::protocol::TType _etype1983;
            xfer += iprot->readListBegin(_etype1983, _size1980);
            this->TaggedValue.resize(_size1980);
            uint32_t _i1984;
            for (_i1984 = 0; _i1984 < _size1980; ++_i1984)
            {
              xfer += this->TaggedValue[_i1984].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size1985;
            ::apache::thrift::protocol::TType _etype1988;
            xfer += iprot->readListBegin(_etype1988, _size1985);
            this->Property.resize(_size1985);
            uint32_t _i1989;
            for (_i1989 = 0; _i1989 < _size1985; ++_i1989)
            {
              xfer += this->Property[_i1989].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Occurence);
          this->__isset.Occurence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIEvent");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter1990;
    for (_iter1990 = this->ImplementationConstraint.begin(); _iter1990 != this->ImplementationConstraint.end(); ++_iter1990)
    {
      xfer += (*_iter1990).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter1991;
    for (_iter1991 = this->Note.begin(); _iter1991 != this->Note.end(); ++_iter1991)
    {
      xfer += (*_iter1991).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter1992;
    for (_iter1992 = this->TaggedValue.begin(); _iter1992 != this->TaggedValue.end(); ++_iter1992)
    {
      xfer += (*_iter1992).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter1993;
    for (_iter1993 = this->Property.begin(); _iter1993 != this->Property.end(); ++_iter1993)
    {
      xfer += (*_iter1993).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Occurence", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->Occurence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIEvent &a, TDDIEvent &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.Occurence, b.Occurence);
  swap(a.__isset, b.__isset);
}

TDDIEvent::TDDIEvent(const TDDIEvent& other1994) {
  Gid = other1994.Gid;
  IsCitation = other1994.IsCitation;
  IsAbstract = other1994.IsAbstract;
  CitedElement = other1994.CitedElement;
  AbstractForm = other1994.AbstractForm;
  Name = other1994.Name;
  Description = other1994.Description;
  ImplementationConstraint = other1994.ImplementationConstraint;
  Note = other1994.Note;
  TaggedValue = other1994.TaggedValue;
  Property = other1994.Property;
  Occurence = other1994.Occurence;
  __isset = other1994.__isset;
}
TDDIEvent& TDDIEvent::operator=(const TDDIEvent& other1995) {
  Gid = other1995.Gid;
  IsCitation = other1995.IsCitation;
  IsAbstract = other1995.IsAbstract;
  CitedElement = other1995.CitedElement;
  AbstractForm = other1995.AbstractForm;
  Name = other1995.Name;
  Description = other1995.Description;
  ImplementationConstraint = other1995.ImplementationConstraint;
  Note = other1995.Note;
  TaggedValue = other1995.TaggedValue;
  Property = other1995.Property;
  Occurence = other1995.Occurence;
  __isset = other1995.__isset;
  return *this;
}
void TDDIEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIEvent(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ", " << "Occurence=" << to_string(Occurence);
  out << ")";
}


TDDIResource::~TDDIResource() throw() {
}


void TDDIResource::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIResource::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIResource::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIResource::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIResource::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIResource::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIResource::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIResource::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIResource::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIResource::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIResource::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIResource& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIResource::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size1996;
            ::apache::thrift::protocol::TType _etype1999;
            xfer += iprot->readListBegin(_etype1999, _size1996);
            this->ImplementationConstraint.resize(_size1996);
            uint32_t _i2000;
            for (_i2000 = 0; _i2000 < _size1996; ++_i2000)
            {
              xfer += this->ImplementationConstraint[_i2000].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2001;
            ::apache::thrift::protocol::TType _etype2004;
            xfer += iprot->readListBegin(_etype2004, _size2001);
            this->Note.resize(_size2001);
            uint32_t _i2005;
            for (_i2005 = 0; _i2005 < _size2001; ++_i2005)
            {
              xfer += this->Note[_i2005].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2006;
            ::apache::thrift::protocol::TType _etype2009;
            xfer += iprot->readListBegin(_etype2009, _size2006);
            this->TaggedValue.resize(_size2006);
            uint32_t _i2010;
            for (_i2010 = 0; _i2010 < _size2006; ++_i2010)
            {
              xfer += this->TaggedValue[_i2010].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2011;
            ::apache::thrift::protocol::TType _etype2014;
            xfer += iprot->readListBegin(_etype2014, _size2011);
            this->Property.resize(_size2011);
            uint32_t _i2015;
            for (_i2015 = 0; _i2015 < _size2011; ++_i2015)
            {
              xfer += this->Property[_i2015].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIResource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIResource");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2016;
    for (_iter2016 = this->ImplementationConstraint.begin(); _iter2016 != this->ImplementationConstraint.end(); ++_iter2016)
    {
      xfer += (*_iter2016).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2017;
    for (_iter2017 = this->Note.begin(); _iter2017 != this->Note.end(); ++_iter2017)
    {
      xfer += (*_iter2017).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2018;
    for (_iter2018 = this->TaggedValue.begin(); _iter2018 != this->TaggedValue.end(); ++_iter2018)
    {
      xfer += (*_iter2018).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2019;
    for (_iter2019 = this->Property.begin(); _iter2019 != this->Property.end(); ++_iter2019)
    {
      xfer += (*_iter2019).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIResource &a, TDDIResource &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.__isset, b.__isset);
}

TDDIResource::TDDIResource(const TDDIResource& other2020) {
  Gid = other2020.Gid;
  IsCitation = other2020.IsCitation;
  IsAbstract = other2020.IsAbstract;
  CitedElement = other2020.CitedElement;
  AbstractForm = other2020.AbstractForm;
  Name = other2020.Name;
  Description = other2020.Description;
  ImplementationConstraint = other2020.ImplementationConstraint;
  Note = other2020.Note;
  TaggedValue = other2020.TaggedValue;
  Property = other2020.Property;
  __isset = other2020.__isset;
}
TDDIResource& TDDIResource::operator=(const TDDIResource& other2021) {
  Gid = other2021.Gid;
  IsCitation = other2021.IsCitation;
  IsAbstract = other2021.IsAbstract;
  CitedElement = other2021.CitedElement;
  AbstractForm = other2021.AbstractForm;
  Name = other2021.Name;
  Description = other2021.Description;
  ImplementationConstraint = other2021.ImplementationConstraint;
  Note = other2021.Note;
  TaggedValue = other2021.TaggedValue;
  Property = other2021.Property;
  __isset = other2021.__isset;
  return *this;
}
void TDDIResource::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIResource(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ")";
}


TDDIArtifact::~TDDIArtifact() throw() {
}


void TDDIArtifact::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifact::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifact::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifact::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifact::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifact::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifact::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifact::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifact::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifact::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifact::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}

void TDDIArtifact::__set_Version(const std::string& val) {
  this->Version = val;
}

void TDDIArtifact::__set_Date(const std::string& val) {
  this->Date = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2022;
            ::apache::thrift::protocol::TType _etype2025;
            xfer += iprot->readListBegin(_etype2025, _size2022);
            this->ImplementationConstraint.resize(_size2022);
            uint32_t _i2026;
            for (_i2026 = 0; _i2026 < _size2022; ++_i2026)
            {
              xfer += this->ImplementationConstraint[_i2026].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2027;
            ::apache::thrift::protocol::TType _etype2030;
            xfer += iprot->readListBegin(_etype2030, _size2027);
            this->Note.resize(_size2027);
            uint32_t _i2031;
            for (_i2031 = 0; _i2031 < _size2027; ++_i2031)
            {
              xfer += this->Note[_i2031].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2032;
            ::apache::thrift::protocol::TType _etype2035;
            xfer += iprot->readListBegin(_etype2035, _size2032);
            this->TaggedValue.resize(_size2032);
            uint32_t _i2036;
            for (_i2036 = 0; _i2036 < _size2032; ++_i2036)
            {
              xfer += this->TaggedValue[_i2036].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2037;
            ::apache::thrift::protocol::TType _etype2040;
            xfer += iprot->readListBegin(_etype2040, _size2037);
            this->Property.resize(_size2037);
            uint32_t _i2041;
            for (_i2041 = 0; _i2041 < _size2037; ++_i2041)
            {
              xfer += this->Property[_i2041].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Version);
          this->__isset.Version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Date);
          this->__isset.Date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifact");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2042;
    for (_iter2042 = this->ImplementationConstraint.begin(); _iter2042 != this->ImplementationConstraint.end(); ++_iter2042)
    {
      xfer += (*_iter2042).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2043;
    for (_iter2043 = this->Note.begin(); _iter2043 != this->Note.end(); ++_iter2043)
    {
      xfer += (*_iter2043).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2044;
    for (_iter2044 = this->TaggedValue.begin(); _iter2044 != this->TaggedValue.end(); ++_iter2044)
    {
      xfer += (*_iter2044).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2045;
    for (_iter2045 = this->Property.begin(); _iter2045 != this->Property.end(); ++_iter2045)
    {
      xfer += (*_iter2045).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Version", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->Version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Date", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->Date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifact &a, TDDIArtifact &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.Version, b.Version);
  swap(a.Date, b.Date);
  swap(a.__isset, b.__isset);
}

TDDIArtifact::TDDIArtifact(const TDDIArtifact& other2046) {
  Gid = other2046.Gid;
  IsCitation = other2046.IsCitation;
  IsAbstract = other2046.IsAbstract;
  CitedElement = other2046.CitedElement;
  AbstractForm = other2046.AbstractForm;
  Name = other2046.Name;
  Description = other2046.Description;
  ImplementationConstraint = other2046.ImplementationConstraint;
  Note = other2046.Note;
  TaggedValue = other2046.TaggedValue;
  Property = other2046.Property;
  Version = other2046.Version;
  Date = other2046.Date;
  __isset = other2046.__isset;
}
TDDIArtifact& TDDIArtifact::operator=(const TDDIArtifact& other2047) {
  Gid = other2047.Gid;
  IsCitation = other2047.IsCitation;
  IsAbstract = other2047.IsAbstract;
  CitedElement = other2047.CitedElement;
  AbstractForm = other2047.AbstractForm;
  Name = other2047.Name;
  Description = other2047.Description;
  ImplementationConstraint = other2047.ImplementationConstraint;
  Note = other2047.Note;
  TaggedValue = other2047.TaggedValue;
  Property = other2047.Property;
  Version = other2047.Version;
  Date = other2047.Date;
  __isset = other2047.__isset;
  return *this;
}
void TDDIArtifact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifact(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ", " << "Version=" << to_string(Version);
  out << ", " << "Date=" << to_string(Date);
  out << ")";
}


TDDIArtifactAssetRelationship::~TDDIArtifactAssetRelationship() throw() {
}


void TDDIArtifactAssetRelationship::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIArtifactAssetRelationship::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIArtifactAssetRelationship::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIArtifactAssetRelationship::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIArtifactAssetRelationship::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIArtifactAssetRelationship::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIArtifactAssetRelationship::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIArtifactAssetRelationship::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIArtifactAssetRelationship::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIArtifactAssetRelationship::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIArtifactAssetRelationship::__set_Property(const std::vector<TDDIPropertyRef> & val) {
  this->Property = val;
}

void TDDIArtifactAssetRelationship::__set_Source(const std::vector<TDDIAbstractArtifactAssetRef> & val) {
  this->Source = val;
}

void TDDIArtifactAssetRelationship::__set_Target(const std::vector<TDDIAbstractArtifactAssetRef> & val) {
  this->Target = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetRelationship& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactAssetRelationship::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2048;
            ::apache::thrift::protocol::TType _etype2051;
            xfer += iprot->readListBegin(_etype2051, _size2048);
            this->ImplementationConstraint.resize(_size2048);
            uint32_t _i2052;
            for (_i2052 = 0; _i2052 < _size2048; ++_i2052)
            {
              xfer += this->ImplementationConstraint[_i2052].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2053;
            ::apache::thrift::protocol::TType _etype2056;
            xfer += iprot->readListBegin(_etype2056, _size2053);
            this->Note.resize(_size2053);
            uint32_t _i2057;
            for (_i2057 = 0; _i2057 < _size2053; ++_i2057)
            {
              xfer += this->Note[_i2057].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2058;
            ::apache::thrift::protocol::TType _etype2061;
            xfer += iprot->readListBegin(_etype2061, _size2058);
            this->TaggedValue.resize(_size2058);
            uint32_t _i2062;
            for (_i2062 = 0; _i2062 < _size2058; ++_i2062)
            {
              xfer += this->TaggedValue[_i2062].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Property.clear();
            uint32_t _size2063;
            ::apache::thrift::protocol::TType _etype2066;
            xfer += iprot->readListBegin(_etype2066, _size2063);
            this->Property.resize(_size2063);
            uint32_t _i2067;
            for (_i2067 = 0; _i2067 < _size2063; ++_i2067)
            {
              xfer += this->Property[_i2067].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Source.clear();
            uint32_t _size2068;
            ::apache::thrift::protocol::TType _etype2071;
            xfer += iprot->readListBegin(_etype2071, _size2068);
            this->Source.resize(_size2068);
            uint32_t _i2072;
            for (_i2072 = 0; _i2072 < _size2068; ++_i2072)
            {
              xfer += this->Source[_i2072].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Target.clear();
            uint32_t _size2073;
            ::apache::thrift::protocol::TType _etype2076;
            xfer += iprot->readListBegin(_etype2076, _size2073);
            this->Target.resize(_size2073);
            uint32_t _i2077;
            for (_i2077 = 0; _i2077 < _size2073; ++_i2077)
            {
              xfer += this->Target[_i2077].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactAssetRelationship::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactAssetRelationship");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2078;
    for (_iter2078 = this->ImplementationConstraint.begin(); _iter2078 != this->ImplementationConstraint.end(); ++_iter2078)
    {
      xfer += (*_iter2078).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2079;
    for (_iter2079 = this->Note.begin(); _iter2079 != this->Note.end(); ++_iter2079)
    {
      xfer += (*_iter2079).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2080;
    for (_iter2080 = this->TaggedValue.begin(); _iter2080 != this->TaggedValue.end(); ++_iter2080)
    {
      xfer += (*_iter2080).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Property.size()));
    std::vector<TDDIPropertyRef> ::const_iterator _iter2081;
    for (_iter2081 = this->Property.begin(); _iter2081 != this->Property.end(); ++_iter2081)
    {
      xfer += (*_iter2081).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Source.size()));
    std::vector<TDDIAbstractArtifactAssetRef> ::const_iterator _iter2082;
    for (_iter2082 = this->Source.begin(); _iter2082 != this->Source.end(); ++_iter2082)
    {
      xfer += (*_iter2082).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Target", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Target.size()));
    std::vector<TDDIAbstractArtifactAssetRef> ::const_iterator _iter2083;
    for (_iter2083 = this->Target.begin(); _iter2083 != this->Target.end(); ++_iter2083)
    {
      xfer += (*_iter2083).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactAssetRelationship &a, TDDIArtifactAssetRelationship &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Property, b.Property);
  swap(a.Source, b.Source);
  swap(a.Target, b.Target);
  swap(a.__isset, b.__isset);
}

TDDIArtifactAssetRelationship::TDDIArtifactAssetRelationship(const TDDIArtifactAssetRelationship& other2084) {
  Gid = other2084.Gid;
  IsCitation = other2084.IsCitation;
  IsAbstract = other2084.IsAbstract;
  CitedElement = other2084.CitedElement;
  AbstractForm = other2084.AbstractForm;
  Name = other2084.Name;
  Description = other2084.Description;
  ImplementationConstraint = other2084.ImplementationConstraint;
  Note = other2084.Note;
  TaggedValue = other2084.TaggedValue;
  Property = other2084.Property;
  Source = other2084.Source;
  Target = other2084.Target;
  __isset = other2084.__isset;
}
TDDIArtifactAssetRelationship& TDDIArtifactAssetRelationship::operator=(const TDDIArtifactAssetRelationship& other2085) {
  Gid = other2085.Gid;
  IsCitation = other2085.IsCitation;
  IsAbstract = other2085.IsAbstract;
  CitedElement = other2085.CitedElement;
  AbstractForm = other2085.AbstractForm;
  Name = other2085.Name;
  Description = other2085.Description;
  ImplementationConstraint = other2085.ImplementationConstraint;
  Note = other2085.Note;
  TaggedValue = other2085.TaggedValue;
  Property = other2085.Property;
  Source = other2085.Source;
  Target = other2085.Target;
  __isset = other2085.__isset;
  return *this;
}
void TDDIArtifactAssetRelationship::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactAssetRelationship(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Property=" << to_string(Property);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "Target=" << to_string(Target);
  out << ")";
}


TDDIArtifactAssetUnion::~TDDIArtifactAssetUnion() throw() {
}


void TDDIArtifactAssetUnion::__set_Property(::apache::thrift::stdcxx::shared_ptr<TDDIProperty> val) {
  this->Property = val;
__isset.Property = true;
}

void TDDIArtifactAssetUnion::__set_Technique(::apache::thrift::stdcxx::shared_ptr<TDDITechnique> val) {
  this->Technique = val;
__isset.Technique = true;
}

void TDDIArtifactAssetUnion::__set_Participant(::apache::thrift::stdcxx::shared_ptr<TDDIParticipant> val) {
  this->Participant = val;
__isset.Participant = true;
}

void TDDIArtifactAssetUnion::__set_Activity(::apache::thrift::stdcxx::shared_ptr<TDDIActivity> val) {
  this->Activity = val;
__isset.Activity = true;
}

void TDDIArtifactAssetUnion::__set_Event(::apache::thrift::stdcxx::shared_ptr<TDDIEvent> val) {
  this->Event = val;
__isset.Event = true;
}

void TDDIArtifactAssetUnion::__set_Resource(::apache::thrift::stdcxx::shared_ptr<TDDIResource> val) {
  this->Resource = val;
__isset.Resource = true;
}

void TDDIArtifactAssetUnion::__set_Artifact(::apache::thrift::stdcxx::shared_ptr<TDDIArtifact> val) {
  this->Artifact = val;
__isset.Artifact = true;
}

void TDDIArtifactAssetUnion::__set_ArtifactAssetRelationship(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactAssetRelationship> val) {
  this->ArtifactAssetRelationship = val;
__isset.ArtifactAssetRelationship = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactAssetUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Property) { 
            this->Property = ::apache::thrift::stdcxx::shared_ptr<TDDIProperty>(new TDDIProperty);
          }
          xfer += this->Property->read(iprot);
          bool wasSet = false;
          if (this->Property->__isset.Gid) { wasSet = true; }
          if (this->Property->__isset.IsCitation) { wasSet = true; }
          if (this->Property->__isset.IsAbstract) { wasSet = true; }
          if (this->Property->__isset.CitedElement) { wasSet = true; }
          if (this->Property->__isset.AbstractForm) { wasSet = true; }
          if (this->Property->__isset.Name) { wasSet = true; }
          if (this->Property->__isset.Description) { wasSet = true; }
          if (this->Property->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Property->__isset.Note) { wasSet = true; }
          if (this->Property->__isset.TaggedValue) { wasSet = true; }
          if (this->Property->__isset.Property) { wasSet = true; }
          if (!wasSet) { this->Property.reset(); }
          this->__isset.Property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Technique) { 
            this->Technique = ::apache::thrift::stdcxx::shared_ptr<TDDITechnique>(new TDDITechnique);
          }
          xfer += this->Technique->read(iprot);
          bool wasSet = false;
          if (this->Technique->__isset.Gid) { wasSet = true; }
          if (this->Technique->__isset.IsCitation) { wasSet = true; }
          if (this->Technique->__isset.IsAbstract) { wasSet = true; }
          if (this->Technique->__isset.CitedElement) { wasSet = true; }
          if (this->Technique->__isset.AbstractForm) { wasSet = true; }
          if (this->Technique->__isset.Name) { wasSet = true; }
          if (this->Technique->__isset.Description) { wasSet = true; }
          if (this->Technique->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Technique->__isset.Note) { wasSet = true; }
          if (this->Technique->__isset.TaggedValue) { wasSet = true; }
          if (this->Technique->__isset.Property) { wasSet = true; }
          if (!wasSet) { this->Technique.reset(); }
          this->__isset.Technique = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Participant) { 
            this->Participant = ::apache::thrift::stdcxx::shared_ptr<TDDIParticipant>(new TDDIParticipant);
          }
          xfer += this->Participant->read(iprot);
          bool wasSet = false;
          if (this->Participant->__isset.Gid) { wasSet = true; }
          if (this->Participant->__isset.IsCitation) { wasSet = true; }
          if (this->Participant->__isset.IsAbstract) { wasSet = true; }
          if (this->Participant->__isset.CitedElement) { wasSet = true; }
          if (this->Participant->__isset.AbstractForm) { wasSet = true; }
          if (this->Participant->__isset.Name) { wasSet = true; }
          if (this->Participant->__isset.Description) { wasSet = true; }
          if (this->Participant->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Participant->__isset.Note) { wasSet = true; }
          if (this->Participant->__isset.TaggedValue) { wasSet = true; }
          if (this->Participant->__isset.Property) { wasSet = true; }
          if (!wasSet) { this->Participant.reset(); }
          this->__isset.Participant = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Activity) { 
            this->Activity = ::apache::thrift::stdcxx::shared_ptr<TDDIActivity>(new TDDIActivity);
          }
          xfer += this->Activity->read(iprot);
          bool wasSet = false;
          if (this->Activity->__isset.Gid) { wasSet = true; }
          if (this->Activity->__isset.IsCitation) { wasSet = true; }
          if (this->Activity->__isset.IsAbstract) { wasSet = true; }
          if (this->Activity->__isset.CitedElement) { wasSet = true; }
          if (this->Activity->__isset.AbstractForm) { wasSet = true; }
          if (this->Activity->__isset.Name) { wasSet = true; }
          if (this->Activity->__isset.Description) { wasSet = true; }
          if (this->Activity->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Activity->__isset.Note) { wasSet = true; }
          if (this->Activity->__isset.TaggedValue) { wasSet = true; }
          if (this->Activity->__isset.Property) { wasSet = true; }
          if (this->Activity->__isset.StartTime) { wasSet = true; }
          if (this->Activity->__isset.EndTime) { wasSet = true; }
          if (!wasSet) { this->Activity.reset(); }
          this->__isset.Activity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Event) { 
            this->Event = ::apache::thrift::stdcxx::shared_ptr<TDDIEvent>(new TDDIEvent);
          }
          xfer += this->Event->read(iprot);
          bool wasSet = false;
          if (this->Event->__isset.Gid) { wasSet = true; }
          if (this->Event->__isset.IsCitation) { wasSet = true; }
          if (this->Event->__isset.IsAbstract) { wasSet = true; }
          if (this->Event->__isset.CitedElement) { wasSet = true; }
          if (this->Event->__isset.AbstractForm) { wasSet = true; }
          if (this->Event->__isset.Name) { wasSet = true; }
          if (this->Event->__isset.Description) { wasSet = true; }
          if (this->Event->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Event->__isset.Note) { wasSet = true; }
          if (this->Event->__isset.TaggedValue) { wasSet = true; }
          if (this->Event->__isset.Property) { wasSet = true; }
          if (this->Event->__isset.Occurence) { wasSet = true; }
          if (!wasSet) { this->Event.reset(); }
          this->__isset.Event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Resource) { 
            this->Resource = ::apache::thrift::stdcxx::shared_ptr<TDDIResource>(new TDDIResource);
          }
          xfer += this->Resource->read(iprot);
          bool wasSet = false;
          if (this->Resource->__isset.Gid) { wasSet = true; }
          if (this->Resource->__isset.IsCitation) { wasSet = true; }
          if (this->Resource->__isset.IsAbstract) { wasSet = true; }
          if (this->Resource->__isset.CitedElement) { wasSet = true; }
          if (this->Resource->__isset.AbstractForm) { wasSet = true; }
          if (this->Resource->__isset.Name) { wasSet = true; }
          if (this->Resource->__isset.Description) { wasSet = true; }
          if (this->Resource->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Resource->__isset.Note) { wasSet = true; }
          if (this->Resource->__isset.TaggedValue) { wasSet = true; }
          if (this->Resource->__isset.Property) { wasSet = true; }
          if (!wasSet) { this->Resource.reset(); }
          this->__isset.Resource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Artifact) { 
            this->Artifact = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifact>(new TDDIArtifact);
          }
          xfer += this->Artifact->read(iprot);
          bool wasSet = false;
          if (this->Artifact->__isset.Gid) { wasSet = true; }
          if (this->Artifact->__isset.IsCitation) { wasSet = true; }
          if (this->Artifact->__isset.IsAbstract) { wasSet = true; }
          if (this->Artifact->__isset.CitedElement) { wasSet = true; }
          if (this->Artifact->__isset.AbstractForm) { wasSet = true; }
          if (this->Artifact->__isset.Name) { wasSet = true; }
          if (this->Artifact->__isset.Description) { wasSet = true; }
          if (this->Artifact->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Artifact->__isset.Note) { wasSet = true; }
          if (this->Artifact->__isset.TaggedValue) { wasSet = true; }
          if (this->Artifact->__isset.Property) { wasSet = true; }
          if (this->Artifact->__isset.Version) { wasSet = true; }
          if (this->Artifact->__isset.Date) { wasSet = true; }
          if (!wasSet) { this->Artifact.reset(); }
          this->__isset.Artifact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactAssetRelationship) { 
            this->ArtifactAssetRelationship = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactAssetRelationship>(new TDDIArtifactAssetRelationship);
          }
          xfer += this->ArtifactAssetRelationship->read(iprot);
          bool wasSet = false;
          if (this->ArtifactAssetRelationship->__isset.Gid) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.Name) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.Description) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.Note) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.Property) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.Source) { wasSet = true; }
          if (this->ArtifactAssetRelationship->__isset.Target) { wasSet = true; }
          if (!wasSet) { this->ArtifactAssetRelationship.reset(); }
          this->__isset.ArtifactAssetRelationship = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactAssetUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactAssetUnion");

  if (this->__isset.Property) {
    xfer += oprot->writeFieldBegin("Property", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Property) {
      xfer += this->Property->write(oprot); 
    } else {oprot->writeStructBegin("TDDIProperty"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Technique) {
    xfer += oprot->writeFieldBegin("Technique", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->Technique) {
      xfer += this->Technique->write(oprot); 
    } else {oprot->writeStructBegin("TDDITechnique"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Participant) {
    xfer += oprot->writeFieldBegin("Participant", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->Participant) {
      xfer += this->Participant->write(oprot); 
    } else {oprot->writeStructBegin("TDDIParticipant"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Activity) {
    xfer += oprot->writeFieldBegin("Activity", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->Activity) {
      xfer += this->Activity->write(oprot); 
    } else {oprot->writeStructBegin("TDDIActivity"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Event) {
    xfer += oprot->writeFieldBegin("Event", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->Event) {
      xfer += this->Event->write(oprot); 
    } else {oprot->writeStructBegin("TDDIEvent"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Resource) {
    xfer += oprot->writeFieldBegin("Resource", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->Resource) {
      xfer += this->Resource->write(oprot); 
    } else {oprot->writeStructBegin("TDDIResource"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Artifact) {
    xfer += oprot->writeFieldBegin("Artifact", ::apache::thrift::protocol::T_STRUCT, 7);
    if (this->Artifact) {
      xfer += this->Artifact->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifact"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactAssetRelationship) {
    xfer += oprot->writeFieldBegin("ArtifactAssetRelationship", ::apache::thrift::protocol::T_STRUCT, 8);
    if (this->ArtifactAssetRelationship) {
      xfer += this->ArtifactAssetRelationship->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactAssetRelationship"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactAssetUnion &a, TDDIArtifactAssetUnion &b) {
  using ::std::swap;
  swap(a.Property, b.Property);
  swap(a.Technique, b.Technique);
  swap(a.Participant, b.Participant);
  swap(a.Activity, b.Activity);
  swap(a.Event, b.Event);
  swap(a.Resource, b.Resource);
  swap(a.Artifact, b.Artifact);
  swap(a.ArtifactAssetRelationship, b.ArtifactAssetRelationship);
  swap(a.__isset, b.__isset);
}

TDDIArtifactAssetUnion::TDDIArtifactAssetUnion(const TDDIArtifactAssetUnion& other2086) {
  Property = other2086.Property;
  Technique = other2086.Technique;
  Participant = other2086.Participant;
  Activity = other2086.Activity;
  Event = other2086.Event;
  Resource = other2086.Resource;
  Artifact = other2086.Artifact;
  ArtifactAssetRelationship = other2086.ArtifactAssetRelationship;
  __isset = other2086.__isset;
}
TDDIArtifactAssetUnion& TDDIArtifactAssetUnion::operator=(const TDDIArtifactAssetUnion& other2087) {
  Property = other2087.Property;
  Technique = other2087.Technique;
  Participant = other2087.Participant;
  Activity = other2087.Activity;
  Event = other2087.Event;
  Resource = other2087.Resource;
  Artifact = other2087.Artifact;
  ArtifactAssetRelationship = other2087.ArtifactAssetRelationship;
  __isset = other2087.__isset;
  return *this;
}
void TDDIArtifactAssetUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactAssetUnion(";
  out << "Property="; (__isset.Property ? (out << to_string(Property)) : (out << "<null>"));
  out << ", " << "Technique="; (__isset.Technique ? (out << to_string(Technique)) : (out << "<null>"));
  out << ", " << "Participant="; (__isset.Participant ? (out << to_string(Participant)) : (out << "<null>"));
  out << ", " << "Activity="; (__isset.Activity ? (out << to_string(Activity)) : (out << "<null>"));
  out << ", " << "Event="; (__isset.Event ? (out << to_string(Event)) : (out << "<null>"));
  out << ", " << "Resource="; (__isset.Resource ? (out << to_string(Resource)) : (out << "<null>"));
  out << ", " << "Artifact="; (__isset.Artifact ? (out << to_string(Artifact)) : (out << "<null>"));
  out << ", " << "ArtifactAssetRelationship="; (__isset.ArtifactAssetRelationship ? (out << to_string(ArtifactAssetRelationship)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArtifactAsset::~TDDIAbstractArtifactAsset() throw() {
}


void TDDIAbstractArtifactAsset::__set_UsedArtifactAsset(const TDDIArtifactAssetUnion& val) {
  this->UsedArtifactAsset = val;
}

void TDDIAbstractArtifactAsset::__set_UsedArtifactAssetType(const TDDIArtifactAssetUnionType val) {
  this->UsedArtifactAssetType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactAsset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactAsset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArtifactAsset.read(iprot);
          this->__isset.UsedArtifactAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2088;
          xfer += iprot->readI32(ecast2088);
          this->UsedArtifactAssetType = (TDDIArtifactAssetUnionType)ecast2088;
          this->__isset.UsedArtifactAssetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactAsset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactAsset");

  xfer += oprot->writeFieldBegin("UsedArtifactAsset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArtifactAsset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArtifactAssetType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArtifactAssetType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactAsset &a, TDDIAbstractArtifactAsset &b) {
  using ::std::swap;
  swap(a.UsedArtifactAsset, b.UsedArtifactAsset);
  swap(a.UsedArtifactAssetType, b.UsedArtifactAssetType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactAsset::TDDIAbstractArtifactAsset(const TDDIAbstractArtifactAsset& other2089) {
  UsedArtifactAsset = other2089.UsedArtifactAsset;
  UsedArtifactAssetType = other2089.UsedArtifactAssetType;
  __isset = other2089.__isset;
}
TDDIAbstractArtifactAsset& TDDIAbstractArtifactAsset::operator=(const TDDIAbstractArtifactAsset& other2090) {
  UsedArtifactAsset = other2090.UsedArtifactAsset;
  UsedArtifactAssetType = other2090.UsedArtifactAssetType;
  __isset = other2090.__isset;
  return *this;
}
void TDDIAbstractArtifactAsset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactAsset(";
  out << "UsedArtifactAsset=" << to_string(UsedArtifactAsset);
  out << ", " << "UsedArtifactAssetType=" << to_string(UsedArtifactAssetType);
  out << ")";
}


TDDIAssuranceCasePackageUnion::~TDDIAssuranceCasePackageUnion() throw() {
}


void TDDIAssuranceCasePackageUnion::__set_AssuranceCasePackage(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackage> val) {
  this->AssuranceCasePackage = val;
__isset.AssuranceCasePackage = true;
}

void TDDIAssuranceCasePackageUnion::__set_AssuranceCasePackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> val) {
  this->AssuranceCasePackageInterface = val;
__isset.AssuranceCasePackageInterface = true;
}

void TDDIAssuranceCasePackageUnion::__set_AssuranceCasePackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageBinding> val) {
  this->AssuranceCasePackageBinding = val;
__isset.AssuranceCasePackageBinding = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceCasePackage) { 
            this->AssuranceCasePackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackage>(new TDDIAssuranceCasePackage);
          }
          xfer += this->AssuranceCasePackage->read(iprot);
          bool wasSet = false;
          if (this->AssuranceCasePackage->__isset.Gid) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.CitedElement) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.AbstractForm) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.Name) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.Description) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.Note) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.TaggedValue) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.AssuranceCasePackage) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.Interface) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.ArtifactPackage) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.ArgumentPackage) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.TerminologyPackage) { wasSet = true; }
          if (!wasSet) { this->AssuranceCasePackage.reset(); }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceCasePackageInterface) { 
            this->AssuranceCasePackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface>(new TDDIAssuranceCasePackageInterface);
          }
          xfer += this->AssuranceCasePackageInterface->read(iprot);
          bool wasSet = false;
          if (this->AssuranceCasePackageInterface->__isset.Gid) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.AbstractForm) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Name) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Description) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Note) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.TaggedValue) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.AssuranceCasePackage) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Interface) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.ArtifactPackage) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.ArgumentPackage) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.TerminologyPackage) { wasSet = true; }
          if (this->AssuranceCasePackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->AssuranceCasePackageInterface.reset(); }
          this->__isset.AssuranceCasePackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceCasePackageBinding) { 
            this->AssuranceCasePackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageBinding>(new TDDIAssuranceCasePackageBinding);
          }
          xfer += this->AssuranceCasePackageBinding->read(iprot);
          bool wasSet = false;
          if (this->AssuranceCasePackageBinding->__isset.Gid) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.AbstractForm) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.Name) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.Description) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.Note) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.TaggedValue) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.AssuranceCasePackage) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.Interface) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.ArtifactPackage) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.ArgumentPackage) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.TerminologyPackage) { wasSet = true; }
          if (this->AssuranceCasePackageBinding->__isset.ParticipantPackage) { wasSet = true; }
          if (!wasSet) { this->AssuranceCasePackageBinding.reset(); }
          this->__isset.AssuranceCasePackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackageUnion");

  if (this->__isset.AssuranceCasePackage) {
    xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->AssuranceCasePackage) {
      xfer += this->AssuranceCasePackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssuranceCasePackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssuranceCasePackageInterface) {
    xfer += oprot->writeFieldBegin("AssuranceCasePackageInterface", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->AssuranceCasePackageInterface) {
      xfer += this->AssuranceCasePackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssuranceCasePackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssuranceCasePackageBinding) {
    xfer += oprot->writeFieldBegin("AssuranceCasePackageBinding", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->AssuranceCasePackageBinding) {
      xfer += this->AssuranceCasePackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAssuranceCasePackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackageUnion &a, TDDIAssuranceCasePackageUnion &b) {
  using ::std::swap;
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.AssuranceCasePackageInterface, b.AssuranceCasePackageInterface);
  swap(a.AssuranceCasePackageBinding, b.AssuranceCasePackageBinding);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackageUnion::TDDIAssuranceCasePackageUnion(const TDDIAssuranceCasePackageUnion& other2091) {
  AssuranceCasePackage = other2091.AssuranceCasePackage;
  AssuranceCasePackageInterface = other2091.AssuranceCasePackageInterface;
  AssuranceCasePackageBinding = other2091.AssuranceCasePackageBinding;
  __isset = other2091.__isset;
}
TDDIAssuranceCasePackageUnion& TDDIAssuranceCasePackageUnion::operator=(const TDDIAssuranceCasePackageUnion& other2092) {
  AssuranceCasePackage = other2092.AssuranceCasePackage;
  AssuranceCasePackageInterface = other2092.AssuranceCasePackageInterface;
  AssuranceCasePackageBinding = other2092.AssuranceCasePackageBinding;
  __isset = other2092.__isset;
  return *this;
}
void TDDIAssuranceCasePackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackageUnion(";
  out << "AssuranceCasePackage="; (__isset.AssuranceCasePackage ? (out << to_string(AssuranceCasePackage)) : (out << "<null>"));
  out << ", " << "AssuranceCasePackageInterface="; (__isset.AssuranceCasePackageInterface ? (out << to_string(AssuranceCasePackageInterface)) : (out << "<null>"));
  out << ", " << "AssuranceCasePackageBinding="; (__isset.AssuranceCasePackageBinding ? (out << to_string(AssuranceCasePackageBinding)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractAssuranceCasePackage::~TDDIAbstractAssuranceCasePackage() throw() {
}


void TDDIAbstractAssuranceCasePackage::__set_UsedAssuranceCasePackage(const TDDIAssuranceCasePackageUnion& val) {
  this->UsedAssuranceCasePackage = val;
}

void TDDIAbstractAssuranceCasePackage::__set_UsedAssuranceCasePackageType(const TDDIAssuranceCasePackageUnionType val) {
  this->UsedAssuranceCasePackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssuranceCasePackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssuranceCasePackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedAssuranceCasePackage.read(iprot);
          this->__isset.UsedAssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2093;
          xfer += iprot->readI32(ecast2093);
          this->UsedAssuranceCasePackageType = (TDDIAssuranceCasePackageUnionType)ecast2093;
          this->__isset.UsedAssuranceCasePackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssuranceCasePackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssuranceCasePackage");

  xfer += oprot->writeFieldBegin("UsedAssuranceCasePackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedAssuranceCasePackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedAssuranceCasePackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedAssuranceCasePackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssuranceCasePackage &a, TDDIAbstractAssuranceCasePackage &b) {
  using ::std::swap;
  swap(a.UsedAssuranceCasePackage, b.UsedAssuranceCasePackage);
  swap(a.UsedAssuranceCasePackageType, b.UsedAssuranceCasePackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssuranceCasePackage::TDDIAbstractAssuranceCasePackage(const TDDIAbstractAssuranceCasePackage& other2094) {
  UsedAssuranceCasePackage = other2094.UsedAssuranceCasePackage;
  UsedAssuranceCasePackageType = other2094.UsedAssuranceCasePackageType;
  __isset = other2094.__isset;
}
TDDIAbstractAssuranceCasePackage& TDDIAbstractAssuranceCasePackage::operator=(const TDDIAbstractAssuranceCasePackage& other2095) {
  UsedAssuranceCasePackage = other2095.UsedAssuranceCasePackage;
  UsedAssuranceCasePackageType = other2095.UsedAssuranceCasePackageType;
  __isset = other2095.__isset;
  return *this;
}
void TDDIAbstractAssuranceCasePackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssuranceCasePackage(";
  out << "UsedAssuranceCasePackage=" << to_string(UsedAssuranceCasePackage);
  out << ", " << "UsedAssuranceCasePackageType=" << to_string(UsedAssuranceCasePackageType);
  out << ")";
}


TDDIAssuranceCasePackage::~TDDIAssuranceCasePackage() throw() {
}


void TDDIAssuranceCasePackage::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssuranceCasePackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssuranceCasePackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssuranceCasePackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssuranceCasePackage::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssuranceCasePackage::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssuranceCasePackage::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssuranceCasePackage::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssuranceCasePackage::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssuranceCasePackage::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssuranceCasePackage::__set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackage = val;
}

void TDDIAssuranceCasePackage::__set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val) {
  this->Interface = val;
}

void TDDIAssuranceCasePackage::__set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val) {
  this->ArtifactPackage = val;
}

void TDDIAssuranceCasePackage::__set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val) {
  this->ArgumentPackage = val;
}

void TDDIAssuranceCasePackage::__set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val) {
  this->TerminologyPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2096;
            ::apache::thrift::protocol::TType _etype2099;
            xfer += iprot->readListBegin(_etype2099, _size2096);
            this->ImplementationConstraint.resize(_size2096);
            uint32_t _i2100;
            for (_i2100 = 0; _i2100 < _size2096; ++_i2100)
            {
              xfer += this->ImplementationConstraint[_i2100].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2101;
            ::apache::thrift::protocol::TType _etype2104;
            xfer += iprot->readListBegin(_etype2104, _size2101);
            this->Note.resize(_size2101);
            uint32_t _i2105;
            for (_i2105 = 0; _i2105 < _size2101; ++_i2105)
            {
              xfer += this->Note[_i2105].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2106;
            ::apache::thrift::protocol::TType _etype2109;
            xfer += iprot->readListBegin(_etype2109, _size2106);
            this->TaggedValue.resize(_size2106);
            uint32_t _i2110;
            for (_i2110 = 0; _i2110 < _size2106; ++_i2110)
            {
              xfer += this->TaggedValue[_i2110].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackage.clear();
            uint32_t _size2111;
            ::apache::thrift::protocol::TType _etype2114;
            xfer += iprot->readListBegin(_etype2114, _size2111);
            this->AssuranceCasePackage.resize(_size2111);
            uint32_t _i2115;
            for (_i2115 = 0; _i2115 < _size2111; ++_i2115)
            {
              xfer += this->AssuranceCasePackage[_i2115].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Interface.clear();
            uint32_t _size2116;
            ::apache::thrift::protocol::TType _etype2119;
            xfer += iprot->readListBegin(_etype2119, _size2116);
            this->Interface.resize(_size2116);
            uint32_t _i2120;
            for (_i2120 = 0; _i2120 < _size2116; ++_i2120)
            {
              xfer += this->Interface[_i2120].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Interface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactPackage.clear();
            uint32_t _size2121;
            ::apache::thrift::protocol::TType _etype2124;
            xfer += iprot->readListBegin(_etype2124, _size2121);
            this->ArtifactPackage.resize(_size2121);
            uint32_t _i2125;
            for (_i2125 = 0; _i2125 < _size2121; ++_i2125)
            {
              xfer += this->ArtifactPackage[_i2125].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentPackage.clear();
            uint32_t _size2126;
            ::apache::thrift::protocol::TType _etype2129;
            xfer += iprot->readListBegin(_etype2129, _size2126);
            this->ArgumentPackage.resize(_size2126);
            uint32_t _i2130;
            for (_i2130 = 0; _i2130 < _size2126; ++_i2130)
            {
              xfer += this->ArgumentPackage[_i2130].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyPackage.clear();
            uint32_t _size2131;
            ::apache::thrift::protocol::TType _etype2134;
            xfer += iprot->readListBegin(_etype2134, _size2131);
            this->TerminologyPackage.resize(_size2131);
            uint32_t _i2135;
            for (_i2135 = 0; _i2135 < _size2131; ++_i2135)
            {
              xfer += this->TerminologyPackage[_i2135].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackage");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2136;
    for (_iter2136 = this->ImplementationConstraint.begin(); _iter2136 != this->ImplementationConstraint.end(); ++_iter2136)
    {
      xfer += (*_iter2136).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2137;
    for (_iter2137 = this->Note.begin(); _iter2137 != this->Note.end(); ++_iter2137)
    {
      xfer += (*_iter2137).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2138;
    for (_iter2138 = this->TaggedValue.begin(); _iter2138 != this->TaggedValue.end(); ++_iter2138)
    {
      xfer += (*_iter2138).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackage.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter2139;
    for (_iter2139 = this->AssuranceCasePackage.begin(); _iter2139 != this->AssuranceCasePackage.end(); ++_iter2139)
    {
      xfer += (*_iter2139).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Interface", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Interface.size()));
    std::vector<TDDIAssuranceCasePackageInterfaceRef> ::const_iterator _iter2140;
    for (_iter2140 = this->Interface.begin(); _iter2140 != this->Interface.end(); ++_iter2140)
    {
      xfer += (*_iter2140).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactPackage.size()));
    std::vector<TDDIAbstractArtifactPackageRef> ::const_iterator _iter2141;
    for (_iter2141 = this->ArtifactPackage.begin(); _iter2141 != this->ArtifactPackage.end(); ++_iter2141)
    {
      xfer += (*_iter2141).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentPackage.size()));
    std::vector<TDDIAbstractArgumentPackageRef> ::const_iterator _iter2142;
    for (_iter2142 = this->ArgumentPackage.begin(); _iter2142 != this->ArgumentPackage.end(); ++_iter2142)
    {
      xfer += (*_iter2142).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyPackage.size()));
    std::vector<TDDIAbstractTerminologyPackageRef> ::const_iterator _iter2143;
    for (_iter2143 = this->TerminologyPackage.begin(); _iter2143 != this->TerminologyPackage.end(); ++_iter2143)
    {
      xfer += (*_iter2143).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackage &a, TDDIAssuranceCasePackage &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.Interface, b.Interface);
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackage::TDDIAssuranceCasePackage(const TDDIAssuranceCasePackage& other2144) {
  Gid = other2144.Gid;
  IsCitation = other2144.IsCitation;
  IsAbstract = other2144.IsAbstract;
  CitedElement = other2144.CitedElement;
  AbstractForm = other2144.AbstractForm;
  Name = other2144.Name;
  Description = other2144.Description;
  ImplementationConstraint = other2144.ImplementationConstraint;
  Note = other2144.Note;
  TaggedValue = other2144.TaggedValue;
  AssuranceCasePackage = other2144.AssuranceCasePackage;
  Interface = other2144.Interface;
  ArtifactPackage = other2144.ArtifactPackage;
  ArgumentPackage = other2144.ArgumentPackage;
  TerminologyPackage = other2144.TerminologyPackage;
  __isset = other2144.__isset;
}
TDDIAssuranceCasePackage& TDDIAssuranceCasePackage::operator=(const TDDIAssuranceCasePackage& other2145) {
  Gid = other2145.Gid;
  IsCitation = other2145.IsCitation;
  IsAbstract = other2145.IsAbstract;
  CitedElement = other2145.CitedElement;
  AbstractForm = other2145.AbstractForm;
  Name = other2145.Name;
  Description = other2145.Description;
  ImplementationConstraint = other2145.ImplementationConstraint;
  Note = other2145.Note;
  TaggedValue = other2145.TaggedValue;
  AssuranceCasePackage = other2145.AssuranceCasePackage;
  Interface = other2145.Interface;
  ArtifactPackage = other2145.ArtifactPackage;
  ArgumentPackage = other2145.ArgumentPackage;
  TerminologyPackage = other2145.TerminologyPackage;
  __isset = other2145.__isset;
  return *this;
}
void TDDIAssuranceCasePackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackage(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssuranceCasePackage=" << to_string(AssuranceCasePackage);
  out << ", " << "Interface=" << to_string(Interface);
  out << ", " << "ArtifactPackage=" << to_string(ArtifactPackage);
  out << ", " << "ArgumentPackage=" << to_string(ArgumentPackage);
  out << ", " << "TerminologyPackage=" << to_string(TerminologyPackage);
  out << ")";
}


TDDIAssuranceCasePackageInterface::~TDDIAssuranceCasePackageInterface() throw() {
}


void TDDIAssuranceCasePackageInterface::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssuranceCasePackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssuranceCasePackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssuranceCasePackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssuranceCasePackageInterface::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssuranceCasePackageInterface::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssuranceCasePackageInterface::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssuranceCasePackageInterface::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssuranceCasePackageInterface::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssuranceCasePackageInterface::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssuranceCasePackageInterface::__set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackage = val;
}

void TDDIAssuranceCasePackageInterface::__set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val) {
  this->Interface = val;
}

void TDDIAssuranceCasePackageInterface::__set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val) {
  this->ArtifactPackage = val;
}

void TDDIAssuranceCasePackageInterface::__set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val) {
  this->ArgumentPackage = val;
}

void TDDIAssuranceCasePackageInterface::__set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val) {
  this->TerminologyPackage = val;
}

void TDDIAssuranceCasePackageInterface::__set_Implements(const TDDIAbstractAssuranceCasePackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2146;
            ::apache::thrift::protocol::TType _etype2149;
            xfer += iprot->readListBegin(_etype2149, _size2146);
            this->ImplementationConstraint.resize(_size2146);
            uint32_t _i2150;
            for (_i2150 = 0; _i2150 < _size2146; ++_i2150)
            {
              xfer += this->ImplementationConstraint[_i2150].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2151;
            ::apache::thrift::protocol::TType _etype2154;
            xfer += iprot->readListBegin(_etype2154, _size2151);
            this->Note.resize(_size2151);
            uint32_t _i2155;
            for (_i2155 = 0; _i2155 < _size2151; ++_i2155)
            {
              xfer += this->Note[_i2155].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2156;
            ::apache::thrift::protocol::TType _etype2159;
            xfer += iprot->readListBegin(_etype2159, _size2156);
            this->TaggedValue.resize(_size2156);
            uint32_t _i2160;
            for (_i2160 = 0; _i2160 < _size2156; ++_i2160)
            {
              xfer += this->TaggedValue[_i2160].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackage.clear();
            uint32_t _size2161;
            ::apache::thrift::protocol::TType _etype2164;
            xfer += iprot->readListBegin(_etype2164, _size2161);
            this->AssuranceCasePackage.resize(_size2161);
            uint32_t _i2165;
            for (_i2165 = 0; _i2165 < _size2161; ++_i2165)
            {
              xfer += this->AssuranceCasePackage[_i2165].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Interface.clear();
            uint32_t _size2166;
            ::apache::thrift::protocol::TType _etype2169;
            xfer += iprot->readListBegin(_etype2169, _size2166);
            this->Interface.resize(_size2166);
            uint32_t _i2170;
            for (_i2170 = 0; _i2170 < _size2166; ++_i2170)
            {
              xfer += this->Interface[_i2170].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Interface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactPackage.clear();
            uint32_t _size2171;
            ::apache::thrift::protocol::TType _etype2174;
            xfer += iprot->readListBegin(_etype2174, _size2171);
            this->ArtifactPackage.resize(_size2171);
            uint32_t _i2175;
            for (_i2175 = 0; _i2175 < _size2171; ++_i2175)
            {
              xfer += this->ArtifactPackage[_i2175].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentPackage.clear();
            uint32_t _size2176;
            ::apache::thrift::protocol::TType _etype2179;
            xfer += iprot->readListBegin(_etype2179, _size2176);
            this->ArgumentPackage.resize(_size2176);
            uint32_t _i2180;
            for (_i2180 = 0; _i2180 < _size2176; ++_i2180)
            {
              xfer += this->ArgumentPackage[_i2180].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyPackage.clear();
            uint32_t _size2181;
            ::apache::thrift::protocol::TType _etype2184;
            xfer += iprot->readListBegin(_etype2184, _size2181);
            this->TerminologyPackage.resize(_size2181);
            uint32_t _i2185;
            for (_i2185 = 0; _i2185 < _size2181; ++_i2185)
            {
              xfer += this->TerminologyPackage[_i2185].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackageInterface");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2186;
    for (_iter2186 = this->ImplementationConstraint.begin(); _iter2186 != this->ImplementationConstraint.end(); ++_iter2186)
    {
      xfer += (*_iter2186).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2187;
    for (_iter2187 = this->Note.begin(); _iter2187 != this->Note.end(); ++_iter2187)
    {
      xfer += (*_iter2187).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2188;
    for (_iter2188 = this->TaggedValue.begin(); _iter2188 != this->TaggedValue.end(); ++_iter2188)
    {
      xfer += (*_iter2188).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackage.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter2189;
    for (_iter2189 = this->AssuranceCasePackage.begin(); _iter2189 != this->AssuranceCasePackage.end(); ++_iter2189)
    {
      xfer += (*_iter2189).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Interface", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Interface.size()));
    std::vector<TDDIAssuranceCasePackageInterfaceRef> ::const_iterator _iter2190;
    for (_iter2190 = this->Interface.begin(); _iter2190 != this->Interface.end(); ++_iter2190)
    {
      xfer += (*_iter2190).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactPackage.size()));
    std::vector<TDDIAbstractArtifactPackageRef> ::const_iterator _iter2191;
    for (_iter2191 = this->ArtifactPackage.begin(); _iter2191 != this->ArtifactPackage.end(); ++_iter2191)
    {
      xfer += (*_iter2191).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentPackage.size()));
    std::vector<TDDIAbstractArgumentPackageRef> ::const_iterator _iter2192;
    for (_iter2192 = this->ArgumentPackage.begin(); _iter2192 != this->ArgumentPackage.end(); ++_iter2192)
    {
      xfer += (*_iter2192).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyPackage.size()));
    std::vector<TDDIAbstractTerminologyPackageRef> ::const_iterator _iter2193;
    for (_iter2193 = this->TerminologyPackage.begin(); _iter2193 != this->TerminologyPackage.end(); ++_iter2193)
    {
      xfer += (*_iter2193).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackageInterface &a, TDDIAssuranceCasePackageInterface &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.Interface, b.Interface);
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackageInterface::TDDIAssuranceCasePackageInterface(const TDDIAssuranceCasePackageInterface& other2194) {
  Gid = other2194.Gid;
  IsCitation = other2194.IsCitation;
  IsAbstract = other2194.IsAbstract;
  CitedElement = other2194.CitedElement;
  AbstractForm = other2194.AbstractForm;
  Name = other2194.Name;
  Description = other2194.Description;
  ImplementationConstraint = other2194.ImplementationConstraint;
  Note = other2194.Note;
  TaggedValue = other2194.TaggedValue;
  AssuranceCasePackage = other2194.AssuranceCasePackage;
  Interface = other2194.Interface;
  ArtifactPackage = other2194.ArtifactPackage;
  ArgumentPackage = other2194.ArgumentPackage;
  TerminologyPackage = other2194.TerminologyPackage;
  Implements = other2194.Implements;
  __isset = other2194.__isset;
}
TDDIAssuranceCasePackageInterface& TDDIAssuranceCasePackageInterface::operator=(const TDDIAssuranceCasePackageInterface& other2195) {
  Gid = other2195.Gid;
  IsCitation = other2195.IsCitation;
  IsAbstract = other2195.IsAbstract;
  CitedElement = other2195.CitedElement;
  AbstractForm = other2195.AbstractForm;
  Name = other2195.Name;
  Description = other2195.Description;
  ImplementationConstraint = other2195.ImplementationConstraint;
  Note = other2195.Note;
  TaggedValue = other2195.TaggedValue;
  AssuranceCasePackage = other2195.AssuranceCasePackage;
  Interface = other2195.Interface;
  ArtifactPackage = other2195.ArtifactPackage;
  ArgumentPackage = other2195.ArgumentPackage;
  TerminologyPackage = other2195.TerminologyPackage;
  Implements = other2195.Implements;
  __isset = other2195.__isset;
  return *this;
}
void TDDIAssuranceCasePackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackageInterface(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssuranceCasePackage=" << to_string(AssuranceCasePackage);
  out << ", " << "Interface=" << to_string(Interface);
  out << ", " << "ArtifactPackage=" << to_string(ArtifactPackage);
  out << ", " << "ArgumentPackage=" << to_string(ArgumentPackage);
  out << ", " << "TerminologyPackage=" << to_string(TerminologyPackage);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDIAssuranceCasePackageBinding::~TDDIAssuranceCasePackageBinding() throw() {
}


void TDDIAssuranceCasePackageBinding::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIAssuranceCasePackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIAssuranceCasePackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIAssuranceCasePackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIAssuranceCasePackageBinding::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIAssuranceCasePackageBinding::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIAssuranceCasePackageBinding::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIAssuranceCasePackageBinding::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIAssuranceCasePackageBinding::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIAssuranceCasePackageBinding::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIAssuranceCasePackageBinding::__set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->AssuranceCasePackage = val;
}

void TDDIAssuranceCasePackageBinding::__set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val) {
  this->Interface = val;
}

void TDDIAssuranceCasePackageBinding::__set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val) {
  this->ArtifactPackage = val;
}

void TDDIAssuranceCasePackageBinding::__set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val) {
  this->ArgumentPackage = val;
}

void TDDIAssuranceCasePackageBinding::__set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val) {
  this->TerminologyPackage = val;
}

void TDDIAssuranceCasePackageBinding::__set_ParticipantPackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val) {
  this->ParticipantPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAssuranceCasePackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2196;
            ::apache::thrift::protocol::TType _etype2199;
            xfer += iprot->readListBegin(_etype2199, _size2196);
            this->ImplementationConstraint.resize(_size2196);
            uint32_t _i2200;
            for (_i2200 = 0; _i2200 < _size2196; ++_i2200)
            {
              xfer += this->ImplementationConstraint[_i2200].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2201;
            ::apache::thrift::protocol::TType _etype2204;
            xfer += iprot->readListBegin(_etype2204, _size2201);
            this->Note.resize(_size2201);
            uint32_t _i2205;
            for (_i2205 = 0; _i2205 < _size2201; ++_i2205)
            {
              xfer += this->Note[_i2205].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2206;
            ::apache::thrift::protocol::TType _etype2209;
            xfer += iprot->readListBegin(_etype2209, _size2206);
            this->TaggedValue.resize(_size2206);
            uint32_t _i2210;
            for (_i2210 = 0; _i2210 < _size2206; ++_i2210)
            {
              xfer += this->TaggedValue[_i2210].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AssuranceCasePackage.clear();
            uint32_t _size2211;
            ::apache::thrift::protocol::TType _etype2214;
            xfer += iprot->readListBegin(_etype2214, _size2211);
            this->AssuranceCasePackage.resize(_size2211);
            uint32_t _i2215;
            for (_i2215 = 0; _i2215 < _size2211; ++_i2215)
            {
              xfer += this->AssuranceCasePackage[_i2215].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Interface.clear();
            uint32_t _size2216;
            ::apache::thrift::protocol::TType _etype2219;
            xfer += iprot->readListBegin(_etype2219, _size2216);
            this->Interface.resize(_size2216);
            uint32_t _i2220;
            for (_i2220 = 0; _i2220 < _size2216; ++_i2220)
            {
              xfer += this->Interface[_i2220].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Interface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArtifactPackage.clear();
            uint32_t _size2221;
            ::apache::thrift::protocol::TType _etype2224;
            xfer += iprot->readListBegin(_etype2224, _size2221);
            this->ArtifactPackage.resize(_size2221);
            uint32_t _i2225;
            for (_i2225 = 0; _i2225 < _size2221; ++_i2225)
            {
              xfer += this->ArtifactPackage[_i2225].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ArgumentPackage.clear();
            uint32_t _size2226;
            ::apache::thrift::protocol::TType _etype2229;
            xfer += iprot->readListBegin(_etype2229, _size2226);
            this->ArgumentPackage.resize(_size2226);
            uint32_t _i2230;
            for (_i2230 = 0; _i2230 < _size2226; ++_i2230)
            {
              xfer += this->ArgumentPackage[_i2230].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ArgumentPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyPackage.clear();
            uint32_t _size2231;
            ::apache::thrift::protocol::TType _etype2234;
            xfer += iprot->readListBegin(_etype2234, _size2231);
            this->TerminologyPackage.resize(_size2231);
            uint32_t _i2235;
            for (_i2235 = 0; _i2235 < _size2231; ++_i2235)
            {
              xfer += this->TerminologyPackage[_i2235].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackage.clear();
            uint32_t _size2236;
            ::apache::thrift::protocol::TType _etype2239;
            xfer += iprot->readListBegin(_etype2239, _size2236);
            this->ParticipantPackage.resize(_size2236);
            uint32_t _i2240;
            for (_i2240 = 0; _i2240 < _size2236; ++_i2240)
            {
              xfer += this->ParticipantPackage[_i2240].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAssuranceCasePackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAssuranceCasePackageBinding");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2241;
    for (_iter2241 = this->ImplementationConstraint.begin(); _iter2241 != this->ImplementationConstraint.end(); ++_iter2241)
    {
      xfer += (*_iter2241).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2242;
    for (_iter2242 = this->Note.begin(); _iter2242 != this->Note.end(); ++_iter2242)
    {
      xfer += (*_iter2242).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2243;
    for (_iter2243 = this->TaggedValue.begin(); _iter2243 != this->TaggedValue.end(); ++_iter2243)
    {
      xfer += (*_iter2243).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AssuranceCasePackage.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter2244;
    for (_iter2244 = this->AssuranceCasePackage.begin(); _iter2244 != this->AssuranceCasePackage.end(); ++_iter2244)
    {
      xfer += (*_iter2244).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Interface", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Interface.size()));
    std::vector<TDDIAssuranceCasePackageInterfaceRef> ::const_iterator _iter2245;
    for (_iter2245 = this->Interface.begin(); _iter2245 != this->Interface.end(); ++_iter2245)
    {
      xfer += (*_iter2245).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArtifactPackage.size()));
    std::vector<TDDIAbstractArtifactPackageRef> ::const_iterator _iter2246;
    for (_iter2246 = this->ArtifactPackage.begin(); _iter2246 != this->ArtifactPackage.end(); ++_iter2246)
    {
      xfer += (*_iter2246).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ArgumentPackage", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ArgumentPackage.size()));
    std::vector<TDDIAbstractArgumentPackageRef> ::const_iterator _iter2247;
    for (_iter2247 = this->ArgumentPackage.begin(); _iter2247 != this->ArgumentPackage.end(); ++_iter2247)
    {
      xfer += (*_iter2247).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyPackage.size()));
    std::vector<TDDIAbstractTerminologyPackageRef> ::const_iterator _iter2248;
    for (_iter2248 = this->TerminologyPackage.begin(); _iter2248 != this->TerminologyPackage.end(); ++_iter2248)
    {
      xfer += (*_iter2248).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackage", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackage.size()));
    std::vector<TDDIAbstractAssuranceCasePackageRef> ::const_iterator _iter2249;
    for (_iter2249 = this->ParticipantPackage.begin(); _iter2249 != this->ParticipantPackage.end(); ++_iter2249)
    {
      xfer += (*_iter2249).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAssuranceCasePackageBinding &a, TDDIAssuranceCasePackageBinding &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.Interface, b.Interface);
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArgumentPackage, b.ArgumentPackage);
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.ParticipantPackage, b.ParticipantPackage);
  swap(a.__isset, b.__isset);
}

TDDIAssuranceCasePackageBinding::TDDIAssuranceCasePackageBinding(const TDDIAssuranceCasePackageBinding& other2250) {
  Gid = other2250.Gid;
  IsCitation = other2250.IsCitation;
  IsAbstract = other2250.IsAbstract;
  CitedElement = other2250.CitedElement;
  AbstractForm = other2250.AbstractForm;
  Name = other2250.Name;
  Description = other2250.Description;
  ImplementationConstraint = other2250.ImplementationConstraint;
  Note = other2250.Note;
  TaggedValue = other2250.TaggedValue;
  AssuranceCasePackage = other2250.AssuranceCasePackage;
  Interface = other2250.Interface;
  ArtifactPackage = other2250.ArtifactPackage;
  ArgumentPackage = other2250.ArgumentPackage;
  TerminologyPackage = other2250.TerminologyPackage;
  ParticipantPackage = other2250.ParticipantPackage;
  __isset = other2250.__isset;
}
TDDIAssuranceCasePackageBinding& TDDIAssuranceCasePackageBinding::operator=(const TDDIAssuranceCasePackageBinding& other2251) {
  Gid = other2251.Gid;
  IsCitation = other2251.IsCitation;
  IsAbstract = other2251.IsAbstract;
  CitedElement = other2251.CitedElement;
  AbstractForm = other2251.AbstractForm;
  Name = other2251.Name;
  Description = other2251.Description;
  ImplementationConstraint = other2251.ImplementationConstraint;
  Note = other2251.Note;
  TaggedValue = other2251.TaggedValue;
  AssuranceCasePackage = other2251.AssuranceCasePackage;
  Interface = other2251.Interface;
  ArtifactPackage = other2251.ArtifactPackage;
  ArgumentPackage = other2251.ArgumentPackage;
  TerminologyPackage = other2251.TerminologyPackage;
  ParticipantPackage = other2251.ParticipantPackage;
  __isset = other2251.__isset;
  return *this;
}
void TDDIAssuranceCasePackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAssuranceCasePackageBinding(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "AssuranceCasePackage=" << to_string(AssuranceCasePackage);
  out << ", " << "Interface=" << to_string(Interface);
  out << ", " << "ArtifactPackage=" << to_string(ArtifactPackage);
  out << ", " << "ArgumentPackage=" << to_string(ArgumentPackage);
  out << ", " << "TerminologyPackage=" << to_string(TerminologyPackage);
  out << ", " << "ParticipantPackage=" << to_string(ParticipantPackage);
  out << ")";
}


TDDILangString::~TDDILangString() throw() {
}


void TDDILangString::__set_Lang(const std::string& val) {
  this->Lang = val;
}

void TDDILangString::__set_Content(const std::string& val) {
  this->Content = val;
}
std::ostream& operator<<(std::ostream& out, const TDDILangString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILangString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Lang);
          this->__isset.Lang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Content);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILangString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILangString");

  xfer += oprot->writeFieldBegin("Lang", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Lang);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILangString &a, TDDILangString &b) {
  using ::std::swap;
  swap(a.Lang, b.Lang);
  swap(a.Content, b.Content);
  swap(a.__isset, b.__isset);
}

TDDILangString::TDDILangString(const TDDILangString& other2252) {
  Lang = other2252.Lang;
  Content = other2252.Content;
  __isset = other2252.__isset;
}
TDDILangString& TDDILangString::operator=(const TDDILangString& other2253) {
  Lang = other2253.Lang;
  Content = other2253.Content;
  __isset = other2253.__isset;
  return *this;
}
void TDDILangString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILangString(";
  out << "Lang=" << to_string(Lang);
  out << ", " << "Content=" << to_string(Content);
  out << ")";
}


TDDIExpressionLangString::~TDDIExpressionLangString() throw() {
}


void TDDIExpressionLangString::__set_Lang(const std::string& val) {
  this->Lang = val;
}

void TDDIExpressionLangString::__set_Content(const std::string& val) {
  this->Content = val;
}

void TDDIExpressionLangString::__set_Expression(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> val) {
  this->Expression = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIExpressionLangString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIExpressionLangString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Lang);
          this->__isset.Lang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Content);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Expression) { 
            this->Expression = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement>(new TDDIAbstractArtifactElement);
          }
          xfer += this->Expression->read(iprot);
          bool wasSet = false;
          if (this->Expression->__isset.UsedArtifactElement) { wasSet = true; }
          if (this->Expression->__isset.UsedArtifactElementType) { wasSet = true; }
          if (!wasSet) { this->Expression.reset(); }
          this->__isset.Expression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIExpressionLangString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIExpressionLangString");

  xfer += oprot->writeFieldBegin("Lang", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Lang);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Expression", ::apache::thrift::protocol::T_STRUCT, 3);
  if (this->Expression) {
    xfer += this->Expression->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractArtifactElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIExpressionLangString &a, TDDIExpressionLangString &b) {
  using ::std::swap;
  swap(a.Lang, b.Lang);
  swap(a.Content, b.Content);
  swap(a.Expression, b.Expression);
  swap(a.__isset, b.__isset);
}

TDDIExpressionLangString::TDDIExpressionLangString(const TDDIExpressionLangString& other2254) {
  Lang = other2254.Lang;
  Content = other2254.Content;
  Expression = other2254.Expression;
  __isset = other2254.__isset;
}
TDDIExpressionLangString& TDDIExpressionLangString::operator=(const TDDIExpressionLangString& other2255) {
  Lang = other2255.Lang;
  Content = other2255.Content;
  Expression = other2255.Expression;
  __isset = other2255.__isset;
  return *this;
}
void TDDIExpressionLangString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIExpressionLangString(";
  out << "Lang=" << to_string(Lang);
  out << ", " << "Content=" << to_string(Content);
  out << ", " << "Expression=" << to_string(Expression);
  out << ")";
}


TDDILangStringUnion::~TDDILangStringUnion() throw() {
}


void TDDILangStringUnion::__set_LangString(::apache::thrift::stdcxx::shared_ptr<TDDILangString> val) {
  this->LangString = val;
__isset.LangString = true;
}

void TDDILangStringUnion::__set_ExpressionLangString(::apache::thrift::stdcxx::shared_ptr<TDDIExpressionLangString> val) {
  this->ExpressionLangString = val;
__isset.ExpressionLangString = true;
}
std::ostream& operator<<(std::ostream& out, const TDDILangStringUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDILangStringUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->LangString) { 
            this->LangString = ::apache::thrift::stdcxx::shared_ptr<TDDILangString>(new TDDILangString);
          }
          xfer += this->LangString->read(iprot);
          bool wasSet = false;
          if (this->LangString->__isset.Lang) { wasSet = true; }
          if (this->LangString->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->LangString.reset(); }
          this->__isset.LangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ExpressionLangString) { 
            this->ExpressionLangString = ::apache::thrift::stdcxx::shared_ptr<TDDIExpressionLangString>(new TDDIExpressionLangString);
          }
          xfer += this->ExpressionLangString->read(iprot);
          bool wasSet = false;
          if (this->ExpressionLangString->__isset.Lang) { wasSet = true; }
          if (this->ExpressionLangString->__isset.Content) { wasSet = true; }
          if (this->ExpressionLangString->__isset.Expression) { wasSet = true; }
          if (!wasSet) { this->ExpressionLangString.reset(); }
          this->__isset.ExpressionLangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDILangStringUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDILangStringUnion");

  if (this->__isset.LangString) {
    xfer += oprot->writeFieldBegin("LangString", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->LangString) {
      xfer += this->LangString->write(oprot); 
    } else {oprot->writeStructBegin("TDDILangString"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ExpressionLangString) {
    xfer += oprot->writeFieldBegin("ExpressionLangString", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ExpressionLangString) {
      xfer += this->ExpressionLangString->write(oprot); 
    } else {oprot->writeStructBegin("TDDIExpressionLangString"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDILangStringUnion &a, TDDILangStringUnion &b) {
  using ::std::swap;
  swap(a.LangString, b.LangString);
  swap(a.ExpressionLangString, b.ExpressionLangString);
  swap(a.__isset, b.__isset);
}

TDDILangStringUnion::TDDILangStringUnion(const TDDILangStringUnion& other2256) {
  LangString = other2256.LangString;
  ExpressionLangString = other2256.ExpressionLangString;
  __isset = other2256.__isset;
}
TDDILangStringUnion& TDDILangStringUnion::operator=(const TDDILangStringUnion& other2257) {
  LangString = other2257.LangString;
  ExpressionLangString = other2257.ExpressionLangString;
  __isset = other2257.__isset;
  return *this;
}
void TDDILangStringUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDILangStringUnion(";
  out << "LangString="; (__isset.LangString ? (out << to_string(LangString)) : (out << "<null>"));
  out << ", " << "ExpressionLangString="; (__isset.ExpressionLangString ? (out << to_string(ExpressionLangString)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractLangString::~TDDIAbstractLangString() throw() {
}


void TDDIAbstractLangString::__set_UsedLangString(const TDDILangStringUnion& val) {
  this->UsedLangString = val;
}

void TDDIAbstractLangString::__set_UsedLangStringType(const TDDILangStringUnionType val) {
  this->UsedLangStringType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractLangString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractLangString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedLangString.read(iprot);
          this->__isset.UsedLangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2258;
          xfer += iprot->readI32(ecast2258);
          this->UsedLangStringType = (TDDILangStringUnionType)ecast2258;
          this->__isset.UsedLangStringType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractLangString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractLangString");

  xfer += oprot->writeFieldBegin("UsedLangString", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedLangString.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedLangStringType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedLangStringType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractLangString &a, TDDIAbstractLangString &b) {
  using ::std::swap;
  swap(a.UsedLangString, b.UsedLangString);
  swap(a.UsedLangStringType, b.UsedLangStringType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractLangString::TDDIAbstractLangString(const TDDIAbstractLangString& other2259) {
  UsedLangString = other2259.UsedLangString;
  UsedLangStringType = other2259.UsedLangStringType;
  __isset = other2259.__isset;
}
TDDIAbstractLangString& TDDIAbstractLangString::operator=(const TDDIAbstractLangString& other2260) {
  UsedLangString = other2260.UsedLangString;
  UsedLangStringType = other2260.UsedLangStringType;
  __isset = other2260.__isset;
  return *this;
}
void TDDIAbstractLangString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractLangString(";
  out << "UsedLangString=" << to_string(UsedLangString);
  out << ", " << "UsedLangStringType=" << to_string(UsedLangStringType);
  out << ")";
}


TDDIMultiLangString::~TDDIMultiLangString() throw() {
}


void TDDIMultiLangString::__set_Values(const std::vector<TDDIAbstractLangString> & val) {
  this->Values = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIMultiLangString& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIMultiLangString::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Values.clear();
            uint32_t _size2261;
            ::apache::thrift::protocol::TType _etype2264;
            xfer += iprot->readListBegin(_etype2264, _size2261);
            this->Values.resize(_size2261);
            uint32_t _i2265;
            for (_i2265 = 0; _i2265 < _size2261; ++_i2265)
            {
              xfer += this->Values[_i2265].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIMultiLangString::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIMultiLangString");

  xfer += oprot->writeFieldBegin("Values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Values.size()));
    std::vector<TDDIAbstractLangString> ::const_iterator _iter2266;
    for (_iter2266 = this->Values.begin(); _iter2266 != this->Values.end(); ++_iter2266)
    {
      xfer += (*_iter2266).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIMultiLangString &a, TDDIMultiLangString &b) {
  using ::std::swap;
  swap(a.Values, b.Values);
  swap(a.__isset, b.__isset);
}

TDDIMultiLangString::TDDIMultiLangString(const TDDIMultiLangString& other2267) {
  Values = other2267.Values;
  __isset = other2267.__isset;
}
TDDIMultiLangString& TDDIMultiLangString::operator=(const TDDIMultiLangString& other2268) {
  Values = other2268.Values;
  __isset = other2268.__isset;
  return *this;
}
void TDDIMultiLangString::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIMultiLangString(";
  out << "Values=" << to_string(Values);
  out << ")";
}


TDDIDescription::~TDDIDescription() throw() {
}


void TDDIDescription::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIDescription::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIDescription::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIDescription::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIDescription::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIDescription::__set_Content(const TDDIMultiLangString& val) {
  this->Content = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIDescription& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Content.read(iprot);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIDescription");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Content.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIDescription &a, TDDIDescription &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Content, b.Content);
  swap(a.__isset, b.__isset);
}

TDDIDescription::TDDIDescription(const TDDIDescription& other2269) {
  Gid = other2269.Gid;
  IsCitation = other2269.IsCitation;
  IsAbstract = other2269.IsAbstract;
  CitedElement = other2269.CitedElement;
  AbstractForm = other2269.AbstractForm;
  Content = other2269.Content;
  __isset = other2269.__isset;
}
TDDIDescription& TDDIDescription::operator=(const TDDIDescription& other2270) {
  Gid = other2270.Gid;
  IsCitation = other2270.IsCitation;
  IsAbstract = other2270.IsAbstract;
  CitedElement = other2270.CitedElement;
  AbstractForm = other2270.AbstractForm;
  Content = other2270.Content;
  __isset = other2270.__isset;
  return *this;
}
void TDDIDescription::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIDescription(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Content=" << to_string(Content);
  out << ")";
}


TDDIImplementationConstraint::~TDDIImplementationConstraint() throw() {
}


void TDDIImplementationConstraint::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIImplementationConstraint::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIImplementationConstraint::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIImplementationConstraint::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIImplementationConstraint::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIImplementationConstraint::__set_Content(const TDDIMultiLangString& val) {
  this->Content = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIImplementationConstraint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIImplementationConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Content.read(iprot);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIImplementationConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIImplementationConstraint");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Content.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIImplementationConstraint &a, TDDIImplementationConstraint &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Content, b.Content);
  swap(a.__isset, b.__isset);
}

TDDIImplementationConstraint::TDDIImplementationConstraint(const TDDIImplementationConstraint& other2271) {
  Gid = other2271.Gid;
  IsCitation = other2271.IsCitation;
  IsAbstract = other2271.IsAbstract;
  CitedElement = other2271.CitedElement;
  AbstractForm = other2271.AbstractForm;
  Content = other2271.Content;
  __isset = other2271.__isset;
}
TDDIImplementationConstraint& TDDIImplementationConstraint::operator=(const TDDIImplementationConstraint& other2272) {
  Gid = other2272.Gid;
  IsCitation = other2272.IsCitation;
  IsAbstract = other2272.IsAbstract;
  CitedElement = other2272.CitedElement;
  AbstractForm = other2272.AbstractForm;
  Content = other2272.Content;
  __isset = other2272.__isset;
  return *this;
}
void TDDIImplementationConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIImplementationConstraint(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Content=" << to_string(Content);
  out << ")";
}


TDDINote::~TDDINote() throw() {
}


void TDDINote::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDINote::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDINote::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDINote::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDINote::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDINote::__set_Content(const TDDIMultiLangString& val) {
  this->Content = val;
}
std::ostream& operator<<(std::ostream& out, const TDDINote& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDINote::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Content.read(iprot);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDINote::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDINote");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Content.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDINote &a, TDDINote &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Content, b.Content);
  swap(a.__isset, b.__isset);
}

TDDINote::TDDINote(const TDDINote& other2273) {
  Gid = other2273.Gid;
  IsCitation = other2273.IsCitation;
  IsAbstract = other2273.IsAbstract;
  CitedElement = other2273.CitedElement;
  AbstractForm = other2273.AbstractForm;
  Content = other2273.Content;
  __isset = other2273.__isset;
}
TDDINote& TDDINote::operator=(const TDDINote& other2274) {
  Gid = other2274.Gid;
  IsCitation = other2274.IsCitation;
  IsAbstract = other2274.IsAbstract;
  CitedElement = other2274.CitedElement;
  AbstractForm = other2274.AbstractForm;
  Content = other2274.Content;
  __isset = other2274.__isset;
  return *this;
}
void TDDINote::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDINote(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Content=" << to_string(Content);
  out << ")";
}


TDDITaggedValue::~TDDITaggedValue() throw() {
}


void TDDITaggedValue::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITaggedValue::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITaggedValue::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITaggedValue::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITaggedValue::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITaggedValue::__set_Content(const TDDIMultiLangString& val) {
  this->Content = val;
}

void TDDITaggedValue::__set_Key(const TDDIMultiLangString& val) {
  this->Key = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITaggedValue& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITaggedValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Content.read(iprot);
          this->__isset.Content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Key.read(iprot);
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITaggedValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITaggedValue");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Content", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->Content.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->Key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITaggedValue &a, TDDITaggedValue &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Content, b.Content);
  swap(a.Key, b.Key);
  swap(a.__isset, b.__isset);
}

TDDITaggedValue::TDDITaggedValue(const TDDITaggedValue& other2275) {
  Gid = other2275.Gid;
  IsCitation = other2275.IsCitation;
  IsAbstract = other2275.IsAbstract;
  CitedElement = other2275.CitedElement;
  AbstractForm = other2275.AbstractForm;
  Content = other2275.Content;
  Key = other2275.Key;
  __isset = other2275.__isset;
}
TDDITaggedValue& TDDITaggedValue::operator=(const TDDITaggedValue& other2276) {
  Gid = other2276.Gid;
  IsCitation = other2276.IsCitation;
  IsAbstract = other2276.IsAbstract;
  CitedElement = other2276.CitedElement;
  AbstractForm = other2276.AbstractForm;
  Content = other2276.Content;
  Key = other2276.Key;
  __isset = other2276.__isset;
  return *this;
}
void TDDITaggedValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITaggedValue(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Content=" << to_string(Content);
  out << ", " << "Key=" << to_string(Key);
  out << ")";
}


TDDIUtilityElementUnion::~TDDIUtilityElementUnion() throw() {
}


void TDDIUtilityElementUnion::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
__isset.Description = true;
}

void TDDIUtilityElementUnion::__set_ImplementationConstraint(::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> val) {
  this->ImplementationConstraint = val;
__isset.ImplementationConstraint = true;
}

void TDDIUtilityElementUnion::__set_Note(::apache::thrift::stdcxx::shared_ptr<TDDINote> val) {
  this->Note = val;
__isset.Note = true;
}

void TDDIUtilityElementUnion::__set_TaggedValue(::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> val) {
  this->TaggedValue = val;
__isset.TaggedValue = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIUtilityElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIUtilityElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ImplementationConstraint) { 
            this->ImplementationConstraint = ::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint>(new TDDIImplementationConstraint);
          }
          xfer += this->ImplementationConstraint->read(iprot);
          bool wasSet = false;
          if (this->ImplementationConstraint->__isset.Gid) { wasSet = true; }
          if (this->ImplementationConstraint->__isset.IsCitation) { wasSet = true; }
          if (this->ImplementationConstraint->__isset.IsAbstract) { wasSet = true; }
          if (this->ImplementationConstraint->__isset.CitedElement) { wasSet = true; }
          if (this->ImplementationConstraint->__isset.AbstractForm) { wasSet = true; }
          if (this->ImplementationConstraint->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->ImplementationConstraint.reset(); }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Note) { 
            this->Note = ::apache::thrift::stdcxx::shared_ptr<TDDINote>(new TDDINote);
          }
          xfer += this->Note->read(iprot);
          bool wasSet = false;
          if (this->Note->__isset.Gid) { wasSet = true; }
          if (this->Note->__isset.IsCitation) { wasSet = true; }
          if (this->Note->__isset.IsAbstract) { wasSet = true; }
          if (this->Note->__isset.CitedElement) { wasSet = true; }
          if (this->Note->__isset.AbstractForm) { wasSet = true; }
          if (this->Note->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Note.reset(); }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TaggedValue) { 
            this->TaggedValue = ::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue>(new TDDITaggedValue);
          }
          xfer += this->TaggedValue->read(iprot);
          bool wasSet = false;
          if (this->TaggedValue->__isset.Gid) { wasSet = true; }
          if (this->TaggedValue->__isset.IsCitation) { wasSet = true; }
          if (this->TaggedValue->__isset.IsAbstract) { wasSet = true; }
          if (this->TaggedValue->__isset.CitedElement) { wasSet = true; }
          if (this->TaggedValue->__isset.AbstractForm) { wasSet = true; }
          if (this->TaggedValue->__isset.Content) { wasSet = true; }
          if (this->TaggedValue->__isset.Key) { wasSet = true; }
          if (!wasSet) { this->TaggedValue.reset(); }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIUtilityElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIUtilityElementUnion");

  if (this->__isset.Description) {
    xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Description) {
      xfer += this->Description->write(oprot); 
    } else {oprot->writeStructBegin("TDDIDescription"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ImplementationConstraint) {
    xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ImplementationConstraint) {
      xfer += this->ImplementationConstraint->write(oprot); 
    } else {oprot->writeStructBegin("TDDIImplementationConstraint"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Note) {
    xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->Note) {
      xfer += this->Note->write(oprot); 
    } else {oprot->writeStructBegin("TDDINote"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TaggedValue) {
    xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->TaggedValue) {
      xfer += this->TaggedValue->write(oprot); 
    } else {oprot->writeStructBegin("TDDITaggedValue"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIUtilityElementUnion &a, TDDIUtilityElementUnion &b) {
  using ::std::swap;
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.__isset, b.__isset);
}

TDDIUtilityElementUnion::TDDIUtilityElementUnion(const TDDIUtilityElementUnion& other2277) {
  Description = other2277.Description;
  ImplementationConstraint = other2277.ImplementationConstraint;
  Note = other2277.Note;
  TaggedValue = other2277.TaggedValue;
  __isset = other2277.__isset;
}
TDDIUtilityElementUnion& TDDIUtilityElementUnion::operator=(const TDDIUtilityElementUnion& other2278) {
  Description = other2278.Description;
  ImplementationConstraint = other2278.ImplementationConstraint;
  Note = other2278.Note;
  TaggedValue = other2278.TaggedValue;
  __isset = other2278.__isset;
  return *this;
}
void TDDIUtilityElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIUtilityElementUnion(";
  out << "Description="; (__isset.Description ? (out << to_string(Description)) : (out << "<null>"));
  out << ", " << "ImplementationConstraint="; (__isset.ImplementationConstraint ? (out << to_string(ImplementationConstraint)) : (out << "<null>"));
  out << ", " << "Note="; (__isset.Note ? (out << to_string(Note)) : (out << "<null>"));
  out << ", " << "TaggedValue="; (__isset.TaggedValue ? (out << to_string(TaggedValue)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractUtilityElement::~TDDIAbstractUtilityElement() throw() {
}


void TDDIAbstractUtilityElement::__set_UsedUtilityElement(const TDDIUtilityElementUnion& val) {
  this->UsedUtilityElement = val;
}

void TDDIAbstractUtilityElement::__set_UsedUtilityElementType(const TDDIUtilityElementUnionType val) {
  this->UsedUtilityElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractUtilityElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractUtilityElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedUtilityElement.read(iprot);
          this->__isset.UsedUtilityElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2279;
          xfer += iprot->readI32(ecast2279);
          this->UsedUtilityElementType = (TDDIUtilityElementUnionType)ecast2279;
          this->__isset.UsedUtilityElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractUtilityElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractUtilityElement");

  xfer += oprot->writeFieldBegin("UsedUtilityElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedUtilityElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedUtilityElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedUtilityElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractUtilityElement &a, TDDIAbstractUtilityElement &b) {
  using ::std::swap;
  swap(a.UsedUtilityElement, b.UsedUtilityElement);
  swap(a.UsedUtilityElementType, b.UsedUtilityElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractUtilityElement::TDDIAbstractUtilityElement(const TDDIAbstractUtilityElement& other2280) {
  UsedUtilityElement = other2280.UsedUtilityElement;
  UsedUtilityElementType = other2280.UsedUtilityElementType;
  __isset = other2280.__isset;
}
TDDIAbstractUtilityElement& TDDIAbstractUtilityElement::operator=(const TDDIAbstractUtilityElement& other2281) {
  UsedUtilityElement = other2281.UsedUtilityElement;
  UsedUtilityElementType = other2281.UsedUtilityElementType;
  __isset = other2281.__isset;
  return *this;
}
void TDDIAbstractUtilityElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractUtilityElement(";
  out << "UsedUtilityElement=" << to_string(UsedUtilityElement);
  out << ", " << "UsedUtilityElementType=" << to_string(UsedUtilityElementType);
  out << ")";
}


TDDIArtifactElementUnion::~TDDIArtifactElementUnion() throw() {
}


void TDDIArtifactElementUnion::__set_TerminologyElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyElement> val) {
  this->TerminologyElement = val;
__isset.TerminologyElement = true;
}

void TDDIArtifactElementUnion::__set_AssuranceCasePackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> val) {
  this->AssuranceCasePackage = val;
__isset.AssuranceCasePackage = true;
}

void TDDIArtifactElementUnion::__set_ArtifactPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> val) {
  this->ArtifactPackage = val;
__isset.ArtifactPackage = true;
}

void TDDIArtifactElementUnion::__set_ArtifactGroup(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactGroup> val) {
  this->ArtifactGroup = val;
__isset.ArtifactGroup = true;
}

void TDDIArtifactElementUnion::__set_ArtifactAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> val) {
  this->ArtifactAsset = val;
__isset.ArtifactAsset = true;
}

void TDDIArtifactElementUnion::__set_ArgumentationElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> val) {
  this->ArgumentationElement = val;
__isset.ArgumentationElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIArtifactElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIArtifactElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyElement) { 
            this->TerminologyElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyElement>(new TDDIAbstractTerminologyElement);
          }
          xfer += this->TerminologyElement->read(iprot);
          bool wasSet = false;
          if (this->TerminologyElement->__isset.UsedTerminologyElement) { wasSet = true; }
          if (this->TerminologyElement->__isset.UsedTerminologyElementType) { wasSet = true; }
          if (!wasSet) { this->TerminologyElement.reset(); }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceCasePackage) { 
            this->AssuranceCasePackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage>(new TDDIAbstractAssuranceCasePackage);
          }
          xfer += this->AssuranceCasePackage->read(iprot);
          bool wasSet = false;
          if (this->AssuranceCasePackage->__isset.UsedAssuranceCasePackage) { wasSet = true; }
          if (this->AssuranceCasePackage->__isset.UsedAssuranceCasePackageType) { wasSet = true; }
          if (!wasSet) { this->AssuranceCasePackage.reset(); }
          this->__isset.AssuranceCasePackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactPackage) { 
            this->ArtifactPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage>(new TDDIAbstractArtifactPackage);
          }
          xfer += this->ArtifactPackage->read(iprot);
          bool wasSet = false;
          if (this->ArtifactPackage->__isset.UsedArtifactPackage) { wasSet = true; }
          if (this->ArtifactPackage->__isset.UsedArtifactPackageType) { wasSet = true; }
          if (!wasSet) { this->ArtifactPackage.reset(); }
          this->__isset.ArtifactPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactGroup) { 
            this->ArtifactGroup = ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactGroup>(new TDDIArtifactGroup);
          }
          xfer += this->ArtifactGroup->read(iprot);
          bool wasSet = false;
          if (this->ArtifactGroup->__isset.Gid) { wasSet = true; }
          if (this->ArtifactGroup->__isset.IsCitation) { wasSet = true; }
          if (this->ArtifactGroup->__isset.IsAbstract) { wasSet = true; }
          if (this->ArtifactGroup->__isset.CitedElement) { wasSet = true; }
          if (this->ArtifactGroup->__isset.AbstractForm) { wasSet = true; }
          if (this->ArtifactGroup->__isset.Name) { wasSet = true; }
          if (this->ArtifactGroup->__isset.Description) { wasSet = true; }
          if (this->ArtifactGroup->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->ArtifactGroup->__isset.Note) { wasSet = true; }
          if (this->ArtifactGroup->__isset.TaggedValue) { wasSet = true; }
          if (this->ArtifactGroup->__isset.ArtifactElement) { wasSet = true; }
          if (!wasSet) { this->ArtifactGroup.reset(); }
          this->__isset.ArtifactGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactAsset) { 
            this->ArtifactAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset>(new TDDIAbstractArtifactAsset);
          }
          xfer += this->ArtifactAsset->read(iprot);
          bool wasSet = false;
          if (this->ArtifactAsset->__isset.UsedArtifactAsset) { wasSet = true; }
          if (this->ArtifactAsset->__isset.UsedArtifactAssetType) { wasSet = true; }
          if (!wasSet) { this->ArtifactAsset.reset(); }
          this->__isset.ArtifactAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArgumentationElement) { 
            this->ArgumentationElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement>(new TDDIAbstractArgumentationElement);
          }
          xfer += this->ArgumentationElement->read(iprot);
          bool wasSet = false;
          if (this->ArgumentationElement->__isset.UsedArgumentationElement) { wasSet = true; }
          if (this->ArgumentationElement->__isset.UsedArgumentationElementType) { wasSet = true; }
          if (!wasSet) { this->ArgumentationElement.reset(); }
          this->__isset.ArgumentationElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIArtifactElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIArtifactElementUnion");

  if (this->__isset.TerminologyElement) {
    xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->TerminologyElement) {
      xfer += this->TerminologyElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractTerminologyElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.AssuranceCasePackage) {
    xfer += oprot->writeFieldBegin("AssuranceCasePackage", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->AssuranceCasePackage) {
      xfer += this->AssuranceCasePackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractAssuranceCasePackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactPackage) {
    xfer += oprot->writeFieldBegin("ArtifactPackage", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->ArtifactPackage) {
      xfer += this->ArtifactPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArtifactPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactGroup) {
    xfer += oprot->writeFieldBegin("ArtifactGroup", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->ArtifactGroup) {
      xfer += this->ArtifactGroup->write(oprot); 
    } else {oprot->writeStructBegin("TDDIArtifactGroup"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArtifactAsset) {
    xfer += oprot->writeFieldBegin("ArtifactAsset", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->ArtifactAsset) {
      xfer += this->ArtifactAsset->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArtifactAsset"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ArgumentationElement) {
    xfer += oprot->writeFieldBegin("ArgumentationElement", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->ArgumentationElement) {
      xfer += this->ArgumentationElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArgumentationElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIArtifactElementUnion &a, TDDIArtifactElementUnion &b) {
  using ::std::swap;
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.AssuranceCasePackage, b.AssuranceCasePackage);
  swap(a.ArtifactPackage, b.ArtifactPackage);
  swap(a.ArtifactGroup, b.ArtifactGroup);
  swap(a.ArtifactAsset, b.ArtifactAsset);
  swap(a.ArgumentationElement, b.ArgumentationElement);
  swap(a.__isset, b.__isset);
}

TDDIArtifactElementUnion::TDDIArtifactElementUnion(const TDDIArtifactElementUnion& other2282) {
  TerminologyElement = other2282.TerminologyElement;
  AssuranceCasePackage = other2282.AssuranceCasePackage;
  ArtifactPackage = other2282.ArtifactPackage;
  ArtifactGroup = other2282.ArtifactGroup;
  ArtifactAsset = other2282.ArtifactAsset;
  ArgumentationElement = other2282.ArgumentationElement;
  __isset = other2282.__isset;
}
TDDIArtifactElementUnion& TDDIArtifactElementUnion::operator=(const TDDIArtifactElementUnion& other2283) {
  TerminologyElement = other2283.TerminologyElement;
  AssuranceCasePackage = other2283.AssuranceCasePackage;
  ArtifactPackage = other2283.ArtifactPackage;
  ArtifactGroup = other2283.ArtifactGroup;
  ArtifactAsset = other2283.ArtifactAsset;
  ArgumentationElement = other2283.ArgumentationElement;
  __isset = other2283.__isset;
  return *this;
}
void TDDIArtifactElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIArtifactElementUnion(";
  out << "TerminologyElement="; (__isset.TerminologyElement ? (out << to_string(TerminologyElement)) : (out << "<null>"));
  out << ", " << "AssuranceCasePackage="; (__isset.AssuranceCasePackage ? (out << to_string(AssuranceCasePackage)) : (out << "<null>"));
  out << ", " << "ArtifactPackage="; (__isset.ArtifactPackage ? (out << to_string(ArtifactPackage)) : (out << "<null>"));
  out << ", " << "ArtifactGroup="; (__isset.ArtifactGroup ? (out << to_string(ArtifactGroup)) : (out << "<null>"));
  out << ", " << "ArtifactAsset="; (__isset.ArtifactAsset ? (out << to_string(ArtifactAsset)) : (out << "<null>"));
  out << ", " << "ArgumentationElement="; (__isset.ArgumentationElement ? (out << to_string(ArgumentationElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractArtifactElement::~TDDIAbstractArtifactElement() throw() {
}


void TDDIAbstractArtifactElement::__set_UsedArtifactElement(const TDDIArtifactElementUnion& val) {
  this->UsedArtifactElement = val;
}

void TDDIAbstractArtifactElement::__set_UsedArtifactElementType(const TDDIArtifactElementUnionType val) {
  this->UsedArtifactElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractArtifactElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedArtifactElement.read(iprot);
          this->__isset.UsedArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2284;
          xfer += iprot->readI32(ecast2284);
          this->UsedArtifactElementType = (TDDIArtifactElementUnionType)ecast2284;
          this->__isset.UsedArtifactElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractArtifactElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractArtifactElement");

  xfer += oprot->writeFieldBegin("UsedArtifactElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedArtifactElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedArtifactElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedArtifactElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractArtifactElement &a, TDDIAbstractArtifactElement &b) {
  using ::std::swap;
  swap(a.UsedArtifactElement, b.UsedArtifactElement);
  swap(a.UsedArtifactElementType, b.UsedArtifactElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractArtifactElement::TDDIAbstractArtifactElement(const TDDIAbstractArtifactElement& other2285) {
  UsedArtifactElement = other2285.UsedArtifactElement;
  UsedArtifactElementType = other2285.UsedArtifactElementType;
  __isset = other2285.__isset;
}
TDDIAbstractArtifactElement& TDDIAbstractArtifactElement::operator=(const TDDIAbstractArtifactElement& other2286) {
  UsedArtifactElement = other2286.UsedArtifactElement;
  UsedArtifactElementType = other2286.UsedArtifactElementType;
  __isset = other2286.__isset;
  return *this;
}
void TDDIAbstractArtifactElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractArtifactElement(";
  out << "UsedArtifactElement=" << to_string(UsedArtifactElement);
  out << ", " << "UsedArtifactElementType=" << to_string(UsedArtifactElementType);
  out << ")";
}


TDDIModelElementUnion::~TDDIModelElementUnion() throw() {
}


void TDDIModelElementUnion::__set_ArtifactElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> val) {
  this->ArtifactElement = val;
__isset.ArtifactElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIModelElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIModelElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ArtifactElement) { 
            this->ArtifactElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement>(new TDDIAbstractArtifactElement);
          }
          xfer += this->ArtifactElement->read(iprot);
          bool wasSet = false;
          if (this->ArtifactElement->__isset.UsedArtifactElement) { wasSet = true; }
          if (this->ArtifactElement->__isset.UsedArtifactElementType) { wasSet = true; }
          if (!wasSet) { this->ArtifactElement.reset(); }
          this->__isset.ArtifactElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIModelElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIModelElementUnion");

  if (this->__isset.ArtifactElement) {
    xfer += oprot->writeFieldBegin("ArtifactElement", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ArtifactElement) {
      xfer += this->ArtifactElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractArtifactElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIModelElementUnion &a, TDDIModelElementUnion &b) {
  using ::std::swap;
  swap(a.ArtifactElement, b.ArtifactElement);
  swap(a.__isset, b.__isset);
}

TDDIModelElementUnion::TDDIModelElementUnion(const TDDIModelElementUnion& other2287) {
  ArtifactElement = other2287.ArtifactElement;
  __isset = other2287.__isset;
}
TDDIModelElementUnion& TDDIModelElementUnion::operator=(const TDDIModelElementUnion& other2288) {
  ArtifactElement = other2288.ArtifactElement;
  __isset = other2288.__isset;
  return *this;
}
void TDDIModelElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIModelElementUnion(";
  out << "ArtifactElement="; (__isset.ArtifactElement ? (out << to_string(ArtifactElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractModelElement::~TDDIAbstractModelElement() throw() {
}


void TDDIAbstractModelElement::__set_UsedModelElement(const TDDIModelElementUnion& val) {
  this->UsedModelElement = val;
}

void TDDIAbstractModelElement::__set_UsedModelElementType(const TDDIModelElementUnionType val) {
  this->UsedModelElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractModelElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractModelElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedModelElement.read(iprot);
          this->__isset.UsedModelElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2289;
          xfer += iprot->readI32(ecast2289);
          this->UsedModelElementType = (TDDIModelElementUnionType)ecast2289;
          this->__isset.UsedModelElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractModelElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractModelElement");

  xfer += oprot->writeFieldBegin("UsedModelElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedModelElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedModelElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedModelElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractModelElement &a, TDDIAbstractModelElement &b) {
  using ::std::swap;
  swap(a.UsedModelElement, b.UsedModelElement);
  swap(a.UsedModelElementType, b.UsedModelElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractModelElement::TDDIAbstractModelElement(const TDDIAbstractModelElement& other2290) {
  UsedModelElement = other2290.UsedModelElement;
  UsedModelElementType = other2290.UsedModelElementType;
  __isset = other2290.__isset;
}
TDDIAbstractModelElement& TDDIAbstractModelElement::operator=(const TDDIAbstractModelElement& other2291) {
  UsedModelElement = other2291.UsedModelElement;
  UsedModelElementType = other2291.UsedModelElementType;
  __isset = other2291.__isset;
  return *this;
}
void TDDIAbstractModelElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractModelElement(";
  out << "UsedModelElement=" << to_string(UsedModelElement);
  out << ", " << "UsedModelElementType=" << to_string(UsedModelElementType);
  out << ")";
}


TDDISACMElementUnion::~TDDISACMElementUnion() throw() {
}


void TDDISACMElementUnion::__set_UtilityElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractUtilityElement> val) {
  this->UtilityElement = val;
__isset.UtilityElement = true;
}

void TDDISACMElementUnion::__set_ModelElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> val) {
  this->ModelElement = val;
__isset.ModelElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDISACMElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISACMElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->UtilityElement) { 
            this->UtilityElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractUtilityElement>(new TDDIAbstractUtilityElement);
          }
          xfer += this->UtilityElement->read(iprot);
          bool wasSet = false;
          if (this->UtilityElement->__isset.UsedUtilityElement) { wasSet = true; }
          if (this->UtilityElement->__isset.UsedUtilityElementType) { wasSet = true; }
          if (!wasSet) { this->UtilityElement.reset(); }
          this->__isset.UtilityElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ModelElement) { 
            this->ModelElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement>(new TDDIAbstractModelElement);
          }
          xfer += this->ModelElement->read(iprot);
          bool wasSet = false;
          if (this->ModelElement->__isset.UsedModelElement) { wasSet = true; }
          if (this->ModelElement->__isset.UsedModelElementType) { wasSet = true; }
          if (!wasSet) { this->ModelElement.reset(); }
          this->__isset.ModelElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISACMElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISACMElementUnion");

  if (this->__isset.UtilityElement) {
    xfer += oprot->writeFieldBegin("UtilityElement", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->UtilityElement) {
      xfer += this->UtilityElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractUtilityElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ModelElement) {
    xfer += oprot->writeFieldBegin("ModelElement", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ModelElement) {
      xfer += this->ModelElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractModelElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISACMElementUnion &a, TDDISACMElementUnion &b) {
  using ::std::swap;
  swap(a.UtilityElement, b.UtilityElement);
  swap(a.ModelElement, b.ModelElement);
  swap(a.__isset, b.__isset);
}

TDDISACMElementUnion::TDDISACMElementUnion(const TDDISACMElementUnion& other2292) {
  UtilityElement = other2292.UtilityElement;
  ModelElement = other2292.ModelElement;
  __isset = other2292.__isset;
}
TDDISACMElementUnion& TDDISACMElementUnion::operator=(const TDDISACMElementUnion& other2293) {
  UtilityElement = other2293.UtilityElement;
  ModelElement = other2293.ModelElement;
  __isset = other2293.__isset;
  return *this;
}
void TDDISACMElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISACMElementUnion(";
  out << "UtilityElement="; (__isset.UtilityElement ? (out << to_string(UtilityElement)) : (out << "<null>"));
  out << ", " << "ModelElement="; (__isset.ModelElement ? (out << to_string(ModelElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractSACMElement::~TDDIAbstractSACMElement() throw() {
}


void TDDIAbstractSACMElement::__set_UsedSACMElement(const TDDISACMElementUnion& val) {
  this->UsedSACMElement = val;
}

void TDDIAbstractSACMElement::__set_UsedSACMElementType(const TDDISACMElementUnionType val) {
  this->UsedSACMElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractSACMElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractSACMElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedSACMElement.read(iprot);
          this->__isset.UsedSACMElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2294;
          xfer += iprot->readI32(ecast2294);
          this->UsedSACMElementType = (TDDISACMElementUnionType)ecast2294;
          this->__isset.UsedSACMElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractSACMElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractSACMElement");

  xfer += oprot->writeFieldBegin("UsedSACMElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedSACMElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedSACMElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedSACMElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractSACMElement &a, TDDIAbstractSACMElement &b) {
  using ::std::swap;
  swap(a.UsedSACMElement, b.UsedSACMElement);
  swap(a.UsedSACMElementType, b.UsedSACMElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractSACMElement::TDDIAbstractSACMElement(const TDDIAbstractSACMElement& other2295) {
  UsedSACMElement = other2295.UsedSACMElement;
  UsedSACMElementType = other2295.UsedSACMElementType;
  __isset = other2295.__isset;
}
TDDIAbstractSACMElement& TDDIAbstractSACMElement::operator=(const TDDIAbstractSACMElement& other2296) {
  UsedSACMElement = other2296.UsedSACMElement;
  UsedSACMElementType = other2296.UsedSACMElementType;
  __isset = other2296.__isset;
  return *this;
}
void TDDIAbstractSACMElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractSACMElement(";
  out << "UsedSACMElement=" << to_string(UsedSACMElement);
  out << ", " << "UsedSACMElementType=" << to_string(UsedSACMElementType);
  out << ")";
}


TDDIElementUnion::~TDDIElementUnion() throw() {
}


void TDDIElementUnion::__set_LangString(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->LangString = val;
__isset.LangString = true;
}

void TDDIElementUnion::__set_MultiLangString(::apache::thrift::stdcxx::shared_ptr<TDDIMultiLangString> val) {
  this->MultiLangString = val;
__isset.MultiLangString = true;
}

void TDDIElementUnion::__set_SACMElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->SACMElement = val;
__isset.SACMElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->LangString) { 
            this->LangString = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->LangString->read(iprot);
          bool wasSet = false;
          if (this->LangString->__isset.UsedLangString) { wasSet = true; }
          if (this->LangString->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->LangString.reset(); }
          this->__isset.LangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MultiLangString) { 
            this->MultiLangString = ::apache::thrift::stdcxx::shared_ptr<TDDIMultiLangString>(new TDDIMultiLangString);
          }
          xfer += this->MultiLangString->read(iprot);
          bool wasSet = false;
          if (this->MultiLangString->__isset.Values) { wasSet = true; }
          if (!wasSet) { this->MultiLangString.reset(); }
          this->__isset.MultiLangString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->SACMElement) { 
            this->SACMElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->SACMElement->read(iprot);
          bool wasSet = false;
          if (this->SACMElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->SACMElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->SACMElement.reset(); }
          this->__isset.SACMElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIElementUnion");

  if (this->__isset.LangString) {
    xfer += oprot->writeFieldBegin("LangString", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->LangString) {
      xfer += this->LangString->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.MultiLangString) {
    xfer += oprot->writeFieldBegin("MultiLangString", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->MultiLangString) {
      xfer += this->MultiLangString->write(oprot); 
    } else {oprot->writeStructBegin("TDDIMultiLangString"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.SACMElement) {
    xfer += oprot->writeFieldBegin("SACMElement", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->SACMElement) {
      xfer += this->SACMElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIElementUnion &a, TDDIElementUnion &b) {
  using ::std::swap;
  swap(a.LangString, b.LangString);
  swap(a.MultiLangString, b.MultiLangString);
  swap(a.SACMElement, b.SACMElement);
  swap(a.__isset, b.__isset);
}

TDDIElementUnion::TDDIElementUnion(const TDDIElementUnion& other2297) {
  LangString = other2297.LangString;
  MultiLangString = other2297.MultiLangString;
  SACMElement = other2297.SACMElement;
  __isset = other2297.__isset;
}
TDDIElementUnion& TDDIElementUnion::operator=(const TDDIElementUnion& other2298) {
  LangString = other2298.LangString;
  MultiLangString = other2298.MultiLangString;
  SACMElement = other2298.SACMElement;
  __isset = other2298.__isset;
  return *this;
}
void TDDIElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIElementUnion(";
  out << "LangString="; (__isset.LangString ? (out << to_string(LangString)) : (out << "<null>"));
  out << ", " << "MultiLangString="; (__isset.MultiLangString ? (out << to_string(MultiLangString)) : (out << "<null>"));
  out << ", " << "SACMElement="; (__isset.SACMElement ? (out << to_string(SACMElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractElement::~TDDIAbstractElement() throw() {
}


void TDDIAbstractElement::__set_UsedElement(const TDDIElementUnion& val) {
  this->UsedElement = val;
}

void TDDIAbstractElement::__set_UsedElementType(const TDDIElementUnionType val) {
  this->UsedElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedElement.read(iprot);
          this->__isset.UsedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2299;
          xfer += iprot->readI32(ecast2299);
          this->UsedElementType = (TDDIElementUnionType)ecast2299;
          this->__isset.UsedElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractElement");

  xfer += oprot->writeFieldBegin("UsedElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractElement &a, TDDIAbstractElement &b) {
  using ::std::swap;
  swap(a.UsedElement, b.UsedElement);
  swap(a.UsedElementType, b.UsedElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractElement::TDDIAbstractElement(const TDDIAbstractElement& other2300) {
  UsedElement = other2300.UsedElement;
  UsedElementType = other2300.UsedElementType;
  __isset = other2300.__isset;
}
TDDIAbstractElement& TDDIAbstractElement::operator=(const TDDIAbstractElement& other2301) {
  UsedElement = other2301.UsedElement;
  UsedElementType = other2301.UsedElementType;
  __isset = other2301.__isset;
  return *this;
}
void TDDIAbstractElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractElement(";
  out << "UsedElement=" << to_string(UsedElement);
  out << ", " << "UsedElementType=" << to_string(UsedElementType);
  out << ")";
}


TDDITerminologyElementUnion::~TDDITerminologyElementUnion() throw() {
}


void TDDITerminologyElementUnion::__set_TerminologyGroup(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyGroup> val) {
  this->TerminologyGroup = val;
__isset.TerminologyGroup = true;
}

void TDDITerminologyElementUnion::__set_TerminologyPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> val) {
  this->TerminologyPackage = val;
__isset.TerminologyPackage = true;
}

void TDDITerminologyElementUnion::__set_TerminologyAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyAsset> val) {
  this->TerminologyAsset = val;
__isset.TerminologyAsset = true;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyGroup) { 
            this->TerminologyGroup = ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyGroup>(new TDDITerminologyGroup);
          }
          xfer += this->TerminologyGroup->read(iprot);
          bool wasSet = false;
          if (this->TerminologyGroup->__isset.Gid) { wasSet = true; }
          if (this->TerminologyGroup->__isset.IsCitation) { wasSet = true; }
          if (this->TerminologyGroup->__isset.IsAbstract) { wasSet = true; }
          if (this->TerminologyGroup->__isset.CitedElement) { wasSet = true; }
          if (this->TerminologyGroup->__isset.AbstractForm) { wasSet = true; }
          if (this->TerminologyGroup->__isset.Name) { wasSet = true; }
          if (this->TerminologyGroup->__isset.Description) { wasSet = true; }
          if (this->TerminologyGroup->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->TerminologyGroup->__isset.Note) { wasSet = true; }
          if (this->TerminologyGroup->__isset.TaggedValue) { wasSet = true; }
          if (this->TerminologyGroup->__isset.TerminologyElement) { wasSet = true; }
          if (!wasSet) { this->TerminologyGroup.reset(); }
          this->__isset.TerminologyGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyPackage) { 
            this->TerminologyPackage = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage>(new TDDIAbstractTerminologyPackage);
          }
          xfer += this->TerminologyPackage->read(iprot);
          bool wasSet = false;
          if (this->TerminologyPackage->__isset.UsedTerminologyPackage) { wasSet = true; }
          if (this->TerminologyPackage->__isset.UsedTerminologyPackageType) { wasSet = true; }
          if (!wasSet) { this->TerminologyPackage.reset(); }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyAsset) { 
            this->TerminologyAsset = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyAsset>(new TDDIAbstractTerminologyAsset);
          }
          xfer += this->TerminologyAsset->read(iprot);
          bool wasSet = false;
          if (this->TerminologyAsset->__isset.UsedTerminologyAsset) { wasSet = true; }
          if (this->TerminologyAsset->__isset.UsedTerminologyAssetType) { wasSet = true; }
          if (!wasSet) { this->TerminologyAsset.reset(); }
          this->__isset.TerminologyAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyElementUnion");

  if (this->__isset.TerminologyGroup) {
    xfer += oprot->writeFieldBegin("TerminologyGroup", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->TerminologyGroup) {
      xfer += this->TerminologyGroup->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerminologyGroup"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TerminologyPackage) {
    xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->TerminologyPackage) {
      xfer += this->TerminologyPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractTerminologyPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TerminologyAsset) {
    xfer += oprot->writeFieldBegin("TerminologyAsset", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->TerminologyAsset) {
      xfer += this->TerminologyAsset->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractTerminologyAsset"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyElementUnion &a, TDDITerminologyElementUnion &b) {
  using ::std::swap;
  swap(a.TerminologyGroup, b.TerminologyGroup);
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.TerminologyAsset, b.TerminologyAsset);
  swap(a.__isset, b.__isset);
}

TDDITerminologyElementUnion::TDDITerminologyElementUnion(const TDDITerminologyElementUnion& other2302) {
  TerminologyGroup = other2302.TerminologyGroup;
  TerminologyPackage = other2302.TerminologyPackage;
  TerminologyAsset = other2302.TerminologyAsset;
  __isset = other2302.__isset;
}
TDDITerminologyElementUnion& TDDITerminologyElementUnion::operator=(const TDDITerminologyElementUnion& other2303) {
  TerminologyGroup = other2303.TerminologyGroup;
  TerminologyPackage = other2303.TerminologyPackage;
  TerminologyAsset = other2303.TerminologyAsset;
  __isset = other2303.__isset;
  return *this;
}
void TDDITerminologyElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyElementUnion(";
  out << "TerminologyGroup="; (__isset.TerminologyGroup ? (out << to_string(TerminologyGroup)) : (out << "<null>"));
  out << ", " << "TerminologyPackage="; (__isset.TerminologyPackage ? (out << to_string(TerminologyPackage)) : (out << "<null>"));
  out << ", " << "TerminologyAsset="; (__isset.TerminologyAsset ? (out << to_string(TerminologyAsset)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractTerminologyElement::~TDDIAbstractTerminologyElement() throw() {
}


void TDDIAbstractTerminologyElement::__set_UsedTerminologyElement(const TDDITerminologyElementUnion& val) {
  this->UsedTerminologyElement = val;
}

void TDDIAbstractTerminologyElement::__set_UsedTerminologyElementType(const TDDITerminologyElementUnionType val) {
  this->UsedTerminologyElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractTerminologyElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedTerminologyElement.read(iprot);
          this->__isset.UsedTerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2304;
          xfer += iprot->readI32(ecast2304);
          this->UsedTerminologyElementType = (TDDITerminologyElementUnionType)ecast2304;
          this->__isset.UsedTerminologyElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractTerminologyElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractTerminologyElement");

  xfer += oprot->writeFieldBegin("UsedTerminologyElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedTerminologyElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedTerminologyElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedTerminologyElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractTerminologyElement &a, TDDIAbstractTerminologyElement &b) {
  using ::std::swap;
  swap(a.UsedTerminologyElement, b.UsedTerminologyElement);
  swap(a.UsedTerminologyElementType, b.UsedTerminologyElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractTerminologyElement::TDDIAbstractTerminologyElement(const TDDIAbstractTerminologyElement& other2305) {
  UsedTerminologyElement = other2305.UsedTerminologyElement;
  UsedTerminologyElementType = other2305.UsedTerminologyElementType;
  __isset = other2305.__isset;
}
TDDIAbstractTerminologyElement& TDDIAbstractTerminologyElement::operator=(const TDDIAbstractTerminologyElement& other2306) {
  UsedTerminologyElement = other2306.UsedTerminologyElement;
  UsedTerminologyElementType = other2306.UsedTerminologyElementType;
  __isset = other2306.__isset;
  return *this;
}
void TDDIAbstractTerminologyElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractTerminologyElement(";
  out << "UsedTerminologyElement=" << to_string(UsedTerminologyElement);
  out << ", " << "UsedTerminologyElementType=" << to_string(UsedTerminologyElementType);
  out << ")";
}


TDDITerminologyGroup::~TDDITerminologyGroup() throw() {
}


void TDDITerminologyGroup::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerminologyGroup::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerminologyGroup::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerminologyGroup::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerminologyGroup::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerminologyGroup::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerminologyGroup::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerminologyGroup::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerminologyGroup::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerminologyGroup::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerminologyGroup::__set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val) {
  this->TerminologyElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyGroup& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyGroup::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2307;
            ::apache::thrift::protocol::TType _etype2310;
            xfer += iprot->readListBegin(_etype2310, _size2307);
            this->ImplementationConstraint.resize(_size2307);
            uint32_t _i2311;
            for (_i2311 = 0; _i2311 < _size2307; ++_i2311)
            {
              xfer += this->ImplementationConstraint[_i2311].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2312;
            ::apache::thrift::protocol::TType _etype2315;
            xfer += iprot->readListBegin(_etype2315, _size2312);
            this->Note.resize(_size2312);
            uint32_t _i2316;
            for (_i2316 = 0; _i2316 < _size2312; ++_i2316)
            {
              xfer += this->Note[_i2316].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2317;
            ::apache::thrift::protocol::TType _etype2320;
            xfer += iprot->readListBegin(_etype2320, _size2317);
            this->TaggedValue.resize(_size2317);
            uint32_t _i2321;
            for (_i2321 = 0; _i2321 < _size2317; ++_i2321)
            {
              xfer += this->TaggedValue[_i2321].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyElement.clear();
            uint32_t _size2322;
            ::apache::thrift::protocol::TType _etype2325;
            xfer += iprot->readListBegin(_etype2325, _size2322);
            this->TerminologyElement.resize(_size2322);
            uint32_t _i2326;
            for (_i2326 = 0; _i2326 < _size2322; ++_i2326)
            {
              xfer += this->TerminologyElement[_i2326].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyGroup::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyGroup");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2327;
    for (_iter2327 = this->ImplementationConstraint.begin(); _iter2327 != this->ImplementationConstraint.end(); ++_iter2327)
    {
      xfer += (*_iter2327).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2328;
    for (_iter2328 = this->Note.begin(); _iter2328 != this->Note.end(); ++_iter2328)
    {
      xfer += (*_iter2328).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2329;
    for (_iter2329 = this->TaggedValue.begin(); _iter2329 != this->TaggedValue.end(); ++_iter2329)
    {
      xfer += (*_iter2329).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyElement.size()));
    std::vector<TDDIAbstractTerminologyElement> ::const_iterator _iter2330;
    for (_iter2330 = this->TerminologyElement.begin(); _iter2330 != this->TerminologyElement.end(); ++_iter2330)
    {
      xfer += (*_iter2330).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyGroup &a, TDDITerminologyGroup &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.__isset, b.__isset);
}

TDDITerminologyGroup::TDDITerminologyGroup(const TDDITerminologyGroup& other2331) {
  Gid = other2331.Gid;
  IsCitation = other2331.IsCitation;
  IsAbstract = other2331.IsAbstract;
  CitedElement = other2331.CitedElement;
  AbstractForm = other2331.AbstractForm;
  Name = other2331.Name;
  Description = other2331.Description;
  ImplementationConstraint = other2331.ImplementationConstraint;
  Note = other2331.Note;
  TaggedValue = other2331.TaggedValue;
  TerminologyElement = other2331.TerminologyElement;
  __isset = other2331.__isset;
}
TDDITerminologyGroup& TDDITerminologyGroup::operator=(const TDDITerminologyGroup& other2332) {
  Gid = other2332.Gid;
  IsCitation = other2332.IsCitation;
  IsAbstract = other2332.IsAbstract;
  CitedElement = other2332.CitedElement;
  AbstractForm = other2332.AbstractForm;
  Name = other2332.Name;
  Description = other2332.Description;
  ImplementationConstraint = other2332.ImplementationConstraint;
  Note = other2332.Note;
  TaggedValue = other2332.TaggedValue;
  TerminologyElement = other2332.TerminologyElement;
  __isset = other2332.__isset;
  return *this;
}
void TDDITerminologyGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyGroup(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "TerminologyElement=" << to_string(TerminologyElement);
  out << ")";
}


TDDITerminologyPackageUnion::~TDDITerminologyPackageUnion() throw() {
}


void TDDITerminologyPackageUnion::__set_TerminologyPackage(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackage> val) {
  this->TerminologyPackage = val;
__isset.TerminologyPackage = true;
}

void TDDITerminologyPackageUnion::__set_TerminologyPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageBinding> val) {
  this->TerminologyPackageBinding = val;
__isset.TerminologyPackageBinding = true;
}

void TDDITerminologyPackageUnion::__set_TerminologyPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageInterface> val) {
  this->TerminologyPackageInterface = val;
__isset.TerminologyPackageInterface = true;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyPackageUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyPackage) { 
            this->TerminologyPackage = ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackage>(new TDDITerminologyPackage);
          }
          xfer += this->TerminologyPackage->read(iprot);
          bool wasSet = false;
          if (this->TerminologyPackage->__isset.Gid) { wasSet = true; }
          if (this->TerminologyPackage->__isset.IsCitation) { wasSet = true; }
          if (this->TerminologyPackage->__isset.IsAbstract) { wasSet = true; }
          if (this->TerminologyPackage->__isset.CitedElement) { wasSet = true; }
          if (this->TerminologyPackage->__isset.AbstractForm) { wasSet = true; }
          if (this->TerminologyPackage->__isset.Name) { wasSet = true; }
          if (this->TerminologyPackage->__isset.Description) { wasSet = true; }
          if (this->TerminologyPackage->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->TerminologyPackage->__isset.Note) { wasSet = true; }
          if (this->TerminologyPackage->__isset.TaggedValue) { wasSet = true; }
          if (this->TerminologyPackage->__isset.TerminologyElement) { wasSet = true; }
          if (!wasSet) { this->TerminologyPackage.reset(); }
          this->__isset.TerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyPackageBinding) { 
            this->TerminologyPackageBinding = ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageBinding>(new TDDITerminologyPackageBinding);
          }
          xfer += this->TerminologyPackageBinding->read(iprot);
          bool wasSet = false;
          if (this->TerminologyPackageBinding->__isset.Gid) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.IsCitation) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.IsAbstract) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.CitedElement) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.AbstractForm) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.Name) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.Description) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.Note) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.TaggedValue) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.TerminologyElement) { wasSet = true; }
          if (this->TerminologyPackageBinding->__isset.ParticipantPackage) { wasSet = true; }
          if (!wasSet) { this->TerminologyPackageBinding.reset(); }
          this->__isset.TerminologyPackageBinding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->TerminologyPackageInterface) { 
            this->TerminologyPackageInterface = ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageInterface>(new TDDITerminologyPackageInterface);
          }
          xfer += this->TerminologyPackageInterface->read(iprot);
          bool wasSet = false;
          if (this->TerminologyPackageInterface->__isset.Gid) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.IsCitation) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.IsAbstract) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.CitedElement) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.AbstractForm) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.Name) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.Description) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.Note) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.TaggedValue) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.TerminologyElement) { wasSet = true; }
          if (this->TerminologyPackageInterface->__isset.Implements) { wasSet = true; }
          if (!wasSet) { this->TerminologyPackageInterface.reset(); }
          this->__isset.TerminologyPackageInterface = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyPackageUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyPackageUnion");

  if (this->__isset.TerminologyPackage) {
    xfer += oprot->writeFieldBegin("TerminologyPackage", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->TerminologyPackage) {
      xfer += this->TerminologyPackage->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerminologyPackage"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TerminologyPackageBinding) {
    xfer += oprot->writeFieldBegin("TerminologyPackageBinding", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->TerminologyPackageBinding) {
      xfer += this->TerminologyPackageBinding->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerminologyPackageBinding"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.TerminologyPackageInterface) {
    xfer += oprot->writeFieldBegin("TerminologyPackageInterface", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->TerminologyPackageInterface) {
      xfer += this->TerminologyPackageInterface->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerminologyPackageInterface"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyPackageUnion &a, TDDITerminologyPackageUnion &b) {
  using ::std::swap;
  swap(a.TerminologyPackage, b.TerminologyPackage);
  swap(a.TerminologyPackageBinding, b.TerminologyPackageBinding);
  swap(a.TerminologyPackageInterface, b.TerminologyPackageInterface);
  swap(a.__isset, b.__isset);
}

TDDITerminologyPackageUnion::TDDITerminologyPackageUnion(const TDDITerminologyPackageUnion& other2333) {
  TerminologyPackage = other2333.TerminologyPackage;
  TerminologyPackageBinding = other2333.TerminologyPackageBinding;
  TerminologyPackageInterface = other2333.TerminologyPackageInterface;
  __isset = other2333.__isset;
}
TDDITerminologyPackageUnion& TDDITerminologyPackageUnion::operator=(const TDDITerminologyPackageUnion& other2334) {
  TerminologyPackage = other2334.TerminologyPackage;
  TerminologyPackageBinding = other2334.TerminologyPackageBinding;
  TerminologyPackageInterface = other2334.TerminologyPackageInterface;
  __isset = other2334.__isset;
  return *this;
}
void TDDITerminologyPackageUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyPackageUnion(";
  out << "TerminologyPackage="; (__isset.TerminologyPackage ? (out << to_string(TerminologyPackage)) : (out << "<null>"));
  out << ", " << "TerminologyPackageBinding="; (__isset.TerminologyPackageBinding ? (out << to_string(TerminologyPackageBinding)) : (out << "<null>"));
  out << ", " << "TerminologyPackageInterface="; (__isset.TerminologyPackageInterface ? (out << to_string(TerminologyPackageInterface)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractTerminologyPackage::~TDDIAbstractTerminologyPackage() throw() {
}


void TDDIAbstractTerminologyPackage::__set_UsedTerminologyPackage(const TDDITerminologyPackageUnion& val) {
  this->UsedTerminologyPackage = val;
}

void TDDIAbstractTerminologyPackage::__set_UsedTerminologyPackageType(const TDDITerminologyPackageUnionType val) {
  this->UsedTerminologyPackageType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractTerminologyPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedTerminologyPackage.read(iprot);
          this->__isset.UsedTerminologyPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2335;
          xfer += iprot->readI32(ecast2335);
          this->UsedTerminologyPackageType = (TDDITerminologyPackageUnionType)ecast2335;
          this->__isset.UsedTerminologyPackageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractTerminologyPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractTerminologyPackage");

  xfer += oprot->writeFieldBegin("UsedTerminologyPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedTerminologyPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedTerminologyPackageType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedTerminologyPackageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractTerminologyPackage &a, TDDIAbstractTerminologyPackage &b) {
  using ::std::swap;
  swap(a.UsedTerminologyPackage, b.UsedTerminologyPackage);
  swap(a.UsedTerminologyPackageType, b.UsedTerminologyPackageType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractTerminologyPackage::TDDIAbstractTerminologyPackage(const TDDIAbstractTerminologyPackage& other2336) {
  UsedTerminologyPackage = other2336.UsedTerminologyPackage;
  UsedTerminologyPackageType = other2336.UsedTerminologyPackageType;
  __isset = other2336.__isset;
}
TDDIAbstractTerminologyPackage& TDDIAbstractTerminologyPackage::operator=(const TDDIAbstractTerminologyPackage& other2337) {
  UsedTerminologyPackage = other2337.UsedTerminologyPackage;
  UsedTerminologyPackageType = other2337.UsedTerminologyPackageType;
  __isset = other2337.__isset;
  return *this;
}
void TDDIAbstractTerminologyPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractTerminologyPackage(";
  out << "UsedTerminologyPackage=" << to_string(UsedTerminologyPackage);
  out << ", " << "UsedTerminologyPackageType=" << to_string(UsedTerminologyPackageType);
  out << ")";
}


TDDITerminologyPackage::~TDDITerminologyPackage() throw() {
}


void TDDITerminologyPackage::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerminologyPackage::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerminologyPackage::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerminologyPackage::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerminologyPackage::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerminologyPackage::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerminologyPackage::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerminologyPackage::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerminologyPackage::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerminologyPackage::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerminologyPackage::__set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val) {
  this->TerminologyElement = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2338;
            ::apache::thrift::protocol::TType _etype2341;
            xfer += iprot->readListBegin(_etype2341, _size2338);
            this->ImplementationConstraint.resize(_size2338);
            uint32_t _i2342;
            for (_i2342 = 0; _i2342 < _size2338; ++_i2342)
            {
              xfer += this->ImplementationConstraint[_i2342].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2343;
            ::apache::thrift::protocol::TType _etype2346;
            xfer += iprot->readListBegin(_etype2346, _size2343);
            this->Note.resize(_size2343);
            uint32_t _i2347;
            for (_i2347 = 0; _i2347 < _size2343; ++_i2347)
            {
              xfer += this->Note[_i2347].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2348;
            ::apache::thrift::protocol::TType _etype2351;
            xfer += iprot->readListBegin(_etype2351, _size2348);
            this->TaggedValue.resize(_size2348);
            uint32_t _i2352;
            for (_i2352 = 0; _i2352 < _size2348; ++_i2352)
            {
              xfer += this->TaggedValue[_i2352].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyElement.clear();
            uint32_t _size2353;
            ::apache::thrift::protocol::TType _etype2356;
            xfer += iprot->readListBegin(_etype2356, _size2353);
            this->TerminologyElement.resize(_size2353);
            uint32_t _i2357;
            for (_i2357 = 0; _i2357 < _size2353; ++_i2357)
            {
              xfer += this->TerminologyElement[_i2357].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyPackage");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2358;
    for (_iter2358 = this->ImplementationConstraint.begin(); _iter2358 != this->ImplementationConstraint.end(); ++_iter2358)
    {
      xfer += (*_iter2358).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2359;
    for (_iter2359 = this->Note.begin(); _iter2359 != this->Note.end(); ++_iter2359)
    {
      xfer += (*_iter2359).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2360;
    for (_iter2360 = this->TaggedValue.begin(); _iter2360 != this->TaggedValue.end(); ++_iter2360)
    {
      xfer += (*_iter2360).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyElement.size()));
    std::vector<TDDIAbstractTerminologyElement> ::const_iterator _iter2361;
    for (_iter2361 = this->TerminologyElement.begin(); _iter2361 != this->TerminologyElement.end(); ++_iter2361)
    {
      xfer += (*_iter2361).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyPackage &a, TDDITerminologyPackage &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.__isset, b.__isset);
}

TDDITerminologyPackage::TDDITerminologyPackage(const TDDITerminologyPackage& other2362) {
  Gid = other2362.Gid;
  IsCitation = other2362.IsCitation;
  IsAbstract = other2362.IsAbstract;
  CitedElement = other2362.CitedElement;
  AbstractForm = other2362.AbstractForm;
  Name = other2362.Name;
  Description = other2362.Description;
  ImplementationConstraint = other2362.ImplementationConstraint;
  Note = other2362.Note;
  TaggedValue = other2362.TaggedValue;
  TerminologyElement = other2362.TerminologyElement;
  __isset = other2362.__isset;
}
TDDITerminologyPackage& TDDITerminologyPackage::operator=(const TDDITerminologyPackage& other2363) {
  Gid = other2363.Gid;
  IsCitation = other2363.IsCitation;
  IsAbstract = other2363.IsAbstract;
  CitedElement = other2363.CitedElement;
  AbstractForm = other2363.AbstractForm;
  Name = other2363.Name;
  Description = other2363.Description;
  ImplementationConstraint = other2363.ImplementationConstraint;
  Note = other2363.Note;
  TaggedValue = other2363.TaggedValue;
  TerminologyElement = other2363.TerminologyElement;
  __isset = other2363.__isset;
  return *this;
}
void TDDITerminologyPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyPackage(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "TerminologyElement=" << to_string(TerminologyElement);
  out << ")";
}


TDDITerminologyPackageBinding::~TDDITerminologyPackageBinding() throw() {
}


void TDDITerminologyPackageBinding::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerminologyPackageBinding::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerminologyPackageBinding::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerminologyPackageBinding::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerminologyPackageBinding::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerminologyPackageBinding::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerminologyPackageBinding::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerminologyPackageBinding::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerminologyPackageBinding::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerminologyPackageBinding::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerminologyPackageBinding::__set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val) {
  this->TerminologyElement = val;
}

void TDDITerminologyPackageBinding::__set_ParticipantPackage(const std::vector<TDDIAbstractTerminologyPackage> & val) {
  this->ParticipantPackage = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageBinding& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyPackageBinding::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2364;
            ::apache::thrift::protocol::TType _etype2367;
            xfer += iprot->readListBegin(_etype2367, _size2364);
            this->ImplementationConstraint.resize(_size2364);
            uint32_t _i2368;
            for (_i2368 = 0; _i2368 < _size2364; ++_i2368)
            {
              xfer += this->ImplementationConstraint[_i2368].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2369;
            ::apache::thrift::protocol::TType _etype2372;
            xfer += iprot->readListBegin(_etype2372, _size2369);
            this->Note.resize(_size2369);
            uint32_t _i2373;
            for (_i2373 = 0; _i2373 < _size2369; ++_i2373)
            {
              xfer += this->Note[_i2373].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2374;
            ::apache::thrift::protocol::TType _etype2377;
            xfer += iprot->readListBegin(_etype2377, _size2374);
            this->TaggedValue.resize(_size2374);
            uint32_t _i2378;
            for (_i2378 = 0; _i2378 < _size2374; ++_i2378)
            {
              xfer += this->TaggedValue[_i2378].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyElement.clear();
            uint32_t _size2379;
            ::apache::thrift::protocol::TType _etype2382;
            xfer += iprot->readListBegin(_etype2382, _size2379);
            this->TerminologyElement.resize(_size2379);
            uint32_t _i2383;
            for (_i2383 = 0; _i2383 < _size2379; ++_i2383)
            {
              xfer += this->TerminologyElement[_i2383].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ParticipantPackage.clear();
            uint32_t _size2384;
            ::apache::thrift::protocol::TType _etype2387;
            xfer += iprot->readListBegin(_etype2387, _size2384);
            this->ParticipantPackage.resize(_size2384);
            uint32_t _i2388;
            for (_i2388 = 0; _i2388 < _size2384; ++_i2388)
            {
              xfer += this->ParticipantPackage[_i2388].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ParticipantPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyPackageBinding::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyPackageBinding");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2389;
    for (_iter2389 = this->ImplementationConstraint.begin(); _iter2389 != this->ImplementationConstraint.end(); ++_iter2389)
    {
      xfer += (*_iter2389).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2390;
    for (_iter2390 = this->Note.begin(); _iter2390 != this->Note.end(); ++_iter2390)
    {
      xfer += (*_iter2390).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2391;
    for (_iter2391 = this->TaggedValue.begin(); _iter2391 != this->TaggedValue.end(); ++_iter2391)
    {
      xfer += (*_iter2391).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyElement.size()));
    std::vector<TDDIAbstractTerminologyElement> ::const_iterator _iter2392;
    for (_iter2392 = this->TerminologyElement.begin(); _iter2392 != this->TerminologyElement.end(); ++_iter2392)
    {
      xfer += (*_iter2392).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ParticipantPackage", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ParticipantPackage.size()));
    std::vector<TDDIAbstractTerminologyPackage> ::const_iterator _iter2393;
    for (_iter2393 = this->ParticipantPackage.begin(); _iter2393 != this->ParticipantPackage.end(); ++_iter2393)
    {
      xfer += (*_iter2393).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyPackageBinding &a, TDDITerminologyPackageBinding &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.ParticipantPackage, b.ParticipantPackage);
  swap(a.__isset, b.__isset);
}

TDDITerminologyPackageBinding::TDDITerminologyPackageBinding(const TDDITerminologyPackageBinding& other2394) {
  Gid = other2394.Gid;
  IsCitation = other2394.IsCitation;
  IsAbstract = other2394.IsAbstract;
  CitedElement = other2394.CitedElement;
  AbstractForm = other2394.AbstractForm;
  Name = other2394.Name;
  Description = other2394.Description;
  ImplementationConstraint = other2394.ImplementationConstraint;
  Note = other2394.Note;
  TaggedValue = other2394.TaggedValue;
  TerminologyElement = other2394.TerminologyElement;
  ParticipantPackage = other2394.ParticipantPackage;
  __isset = other2394.__isset;
}
TDDITerminologyPackageBinding& TDDITerminologyPackageBinding::operator=(const TDDITerminologyPackageBinding& other2395) {
  Gid = other2395.Gid;
  IsCitation = other2395.IsCitation;
  IsAbstract = other2395.IsAbstract;
  CitedElement = other2395.CitedElement;
  AbstractForm = other2395.AbstractForm;
  Name = other2395.Name;
  Description = other2395.Description;
  ImplementationConstraint = other2395.ImplementationConstraint;
  Note = other2395.Note;
  TaggedValue = other2395.TaggedValue;
  TerminologyElement = other2395.TerminologyElement;
  ParticipantPackage = other2395.ParticipantPackage;
  __isset = other2395.__isset;
  return *this;
}
void TDDITerminologyPackageBinding::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyPackageBinding(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "TerminologyElement=" << to_string(TerminologyElement);
  out << ", " << "ParticipantPackage=" << to_string(ParticipantPackage);
  out << ")";
}


TDDITerminologyPackageInterface::~TDDITerminologyPackageInterface() throw() {
}


void TDDITerminologyPackageInterface::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerminologyPackageInterface::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerminologyPackageInterface::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerminologyPackageInterface::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerminologyPackageInterface::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerminologyPackageInterface::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerminologyPackageInterface::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerminologyPackageInterface::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerminologyPackageInterface::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerminologyPackageInterface::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerminologyPackageInterface::__set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val) {
  this->TerminologyElement = val;
}

void TDDITerminologyPackageInterface::__set_Implements(const TDDIAbstractTerminologyPackage& val) {
  this->Implements = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageInterface& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyPackageInterface::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2396;
            ::apache::thrift::protocol::TType _etype2399;
            xfer += iprot->readListBegin(_etype2399, _size2396);
            this->ImplementationConstraint.resize(_size2396);
            uint32_t _i2400;
            for (_i2400 = 0; _i2400 < _size2396; ++_i2400)
            {
              xfer += this->ImplementationConstraint[_i2400].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2401;
            ::apache::thrift::protocol::TType _etype2404;
            xfer += iprot->readListBegin(_etype2404, _size2401);
            this->Note.resize(_size2401);
            uint32_t _i2405;
            for (_i2405 = 0; _i2405 < _size2401; ++_i2405)
            {
              xfer += this->Note[_i2405].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2406;
            ::apache::thrift::protocol::TType _etype2409;
            xfer += iprot->readListBegin(_etype2409, _size2406);
            this->TaggedValue.resize(_size2406);
            uint32_t _i2410;
            for (_i2410 = 0; _i2410 < _size2406; ++_i2410)
            {
              xfer += this->TaggedValue[_i2410].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TerminologyElement.clear();
            uint32_t _size2411;
            ::apache::thrift::protocol::TType _etype2414;
            xfer += iprot->readListBegin(_etype2414, _size2411);
            this->TerminologyElement.resize(_size2411);
            uint32_t _i2415;
            for (_i2415 = 0; _i2415 < _size2411; ++_i2415)
            {
              xfer += this->TerminologyElement[_i2415].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TerminologyElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->Implements.read(iprot);
          this->__isset.Implements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyPackageInterface::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyPackageInterface");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2416;
    for (_iter2416 = this->ImplementationConstraint.begin(); _iter2416 != this->ImplementationConstraint.end(); ++_iter2416)
    {
      xfer += (*_iter2416).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2417;
    for (_iter2417 = this->Note.begin(); _iter2417 != this->Note.end(); ++_iter2417)
    {
      xfer += (*_iter2417).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2418;
    for (_iter2418 = this->TaggedValue.begin(); _iter2418 != this->TaggedValue.end(); ++_iter2418)
    {
      xfer += (*_iter2418).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TerminologyElement", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TerminologyElement.size()));
    std::vector<TDDIAbstractTerminologyElement> ::const_iterator _iter2419;
    for (_iter2419 = this->TerminologyElement.begin(); _iter2419 != this->TerminologyElement.end(); ++_iter2419)
    {
      xfer += (*_iter2419).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Implements", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->Implements.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyPackageInterface &a, TDDITerminologyPackageInterface &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.TerminologyElement, b.TerminologyElement);
  swap(a.Implements, b.Implements);
  swap(a.__isset, b.__isset);
}

TDDITerminologyPackageInterface::TDDITerminologyPackageInterface(const TDDITerminologyPackageInterface& other2420) {
  Gid = other2420.Gid;
  IsCitation = other2420.IsCitation;
  IsAbstract = other2420.IsAbstract;
  CitedElement = other2420.CitedElement;
  AbstractForm = other2420.AbstractForm;
  Name = other2420.Name;
  Description = other2420.Description;
  ImplementationConstraint = other2420.ImplementationConstraint;
  Note = other2420.Note;
  TaggedValue = other2420.TaggedValue;
  TerminologyElement = other2420.TerminologyElement;
  Implements = other2420.Implements;
  __isset = other2420.__isset;
}
TDDITerminologyPackageInterface& TDDITerminologyPackageInterface::operator=(const TDDITerminologyPackageInterface& other2421) {
  Gid = other2421.Gid;
  IsCitation = other2421.IsCitation;
  IsAbstract = other2421.IsAbstract;
  CitedElement = other2421.CitedElement;
  AbstractForm = other2421.AbstractForm;
  Name = other2421.Name;
  Description = other2421.Description;
  ImplementationConstraint = other2421.ImplementationConstraint;
  Note = other2421.Note;
  TaggedValue = other2421.TaggedValue;
  TerminologyElement = other2421.TerminologyElement;
  Implements = other2421.Implements;
  __isset = other2421.__isset;
  return *this;
}
void TDDITerminologyPackageInterface::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyPackageInterface(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "TerminologyElement=" << to_string(TerminologyElement);
  out << ", " << "Implements=" << to_string(Implements);
  out << ")";
}


TDDICategory::~TDDICategory() throw() {
}


void TDDICategory::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDICategory::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDICategory::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDICategory::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDICategory::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDICategory::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDICategory::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDICategory::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDICategory::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDICategory::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}
std::ostream& operator<<(std::ostream& out, const TDDICategory& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDICategory::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2422;
            ::apache::thrift::protocol::TType _etype2425;
            xfer += iprot->readListBegin(_etype2425, _size2422);
            this->ImplementationConstraint.resize(_size2422);
            uint32_t _i2426;
            for (_i2426 = 0; _i2426 < _size2422; ++_i2426)
            {
              xfer += this->ImplementationConstraint[_i2426].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2427;
            ::apache::thrift::protocol::TType _etype2430;
            xfer += iprot->readListBegin(_etype2430, _size2427);
            this->Note.resize(_size2427);
            uint32_t _i2431;
            for (_i2431 = 0; _i2431 < _size2427; ++_i2431)
            {
              xfer += this->Note[_i2431].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2432;
            ::apache::thrift::protocol::TType _etype2435;
            xfer += iprot->readListBegin(_etype2435, _size2432);
            this->TaggedValue.resize(_size2432);
            uint32_t _i2436;
            for (_i2436 = 0; _i2436 < _size2432; ++_i2436)
            {
              xfer += this->TaggedValue[_i2436].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDICategory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDICategory");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2437;
    for (_iter2437 = this->ImplementationConstraint.begin(); _iter2437 != this->ImplementationConstraint.end(); ++_iter2437)
    {
      xfer += (*_iter2437).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2438;
    for (_iter2438 = this->Note.begin(); _iter2438 != this->Note.end(); ++_iter2438)
    {
      xfer += (*_iter2438).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2439;
    for (_iter2439 = this->TaggedValue.begin(); _iter2439 != this->TaggedValue.end(); ++_iter2439)
    {
      xfer += (*_iter2439).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDICategory &a, TDDICategory &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.__isset, b.__isset);
}

TDDICategory::TDDICategory(const TDDICategory& other2440) {
  Gid = other2440.Gid;
  IsCitation = other2440.IsCitation;
  IsAbstract = other2440.IsAbstract;
  CitedElement = other2440.CitedElement;
  AbstractForm = other2440.AbstractForm;
  Name = other2440.Name;
  Description = other2440.Description;
  ImplementationConstraint = other2440.ImplementationConstraint;
  Note = other2440.Note;
  TaggedValue = other2440.TaggedValue;
  __isset = other2440.__isset;
}
TDDICategory& TDDICategory::operator=(const TDDICategory& other2441) {
  Gid = other2441.Gid;
  IsCitation = other2441.IsCitation;
  IsAbstract = other2441.IsAbstract;
  CitedElement = other2441.CitedElement;
  AbstractForm = other2441.AbstractForm;
  Name = other2441.Name;
  Description = other2441.Description;
  ImplementationConstraint = other2441.ImplementationConstraint;
  Note = other2441.Note;
  TaggedValue = other2441.TaggedValue;
  __isset = other2441.__isset;
  return *this;
}
void TDDICategory::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDICategory(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ")";
}


TDDIExpression::~TDDIExpression() throw() {
}


void TDDIExpression::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDIExpression::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDIExpression::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDIExpression::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDIExpression::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDIExpression::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDIExpression::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDIExpression::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDIExpression::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDIExpression::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDIExpression::__set_Value(const std::string& val) {
  this->Value = val;
}

void TDDIExpression::__set_Categories(const std::vector<TDDICategoryRef> & val) {
  this->Categories = val;
}

void TDDIExpression::__set_Element(const std::vector<TDDIAbstractExpressionElementRef> & val) {
  this->Element = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIExpression& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIExpression::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2442;
            ::apache::thrift::protocol::TType _etype2445;
            xfer += iprot->readListBegin(_etype2445, _size2442);
            this->ImplementationConstraint.resize(_size2442);
            uint32_t _i2446;
            for (_i2446 = 0; _i2446 < _size2442; ++_i2446)
            {
              xfer += this->ImplementationConstraint[_i2446].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2447;
            ::apache::thrift::protocol::TType _etype2450;
            xfer += iprot->readListBegin(_etype2450, _size2447);
            this->Note.resize(_size2447);
            uint32_t _i2451;
            for (_i2451 = 0; _i2451 < _size2447; ++_i2451)
            {
              xfer += this->Note[_i2451].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2452;
            ::apache::thrift::protocol::TType _etype2455;
            xfer += iprot->readListBegin(_etype2455, _size2452);
            this->TaggedValue.resize(_size2452);
            uint32_t _i2456;
            for (_i2456 = 0; _i2456 < _size2452; ++_i2456)
            {
              xfer += this->TaggedValue[_i2456].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Categories.clear();
            uint32_t _size2457;
            ::apache::thrift::protocol::TType _etype2460;
            xfer += iprot->readListBegin(_etype2460, _size2457);
            this->Categories.resize(_size2457);
            uint32_t _i2461;
            for (_i2461 = 0; _i2461 < _size2457; ++_i2461)
            {
              xfer += this->Categories[_i2461].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Categories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Element.clear();
            uint32_t _size2462;
            ::apache::thrift::protocol::TType _etype2465;
            xfer += iprot->readListBegin(_etype2465, _size2462);
            this->Element.resize(_size2462);
            uint32_t _i2466;
            for (_i2466 = 0; _i2466 < _size2462; ++_i2466)
            {
              xfer += this->Element[_i2466].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Element = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIExpression::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIExpression");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2467;
    for (_iter2467 = this->ImplementationConstraint.begin(); _iter2467 != this->ImplementationConstraint.end(); ++_iter2467)
    {
      xfer += (*_iter2467).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2468;
    for (_iter2468 = this->Note.begin(); _iter2468 != this->Note.end(); ++_iter2468)
    {
      xfer += (*_iter2468).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2469;
    for (_iter2469 = this->TaggedValue.begin(); _iter2469 != this->TaggedValue.end(); ++_iter2469)
    {
      xfer += (*_iter2469).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Categories", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Categories.size()));
    std::vector<TDDICategoryRef> ::const_iterator _iter2470;
    for (_iter2470 = this->Categories.begin(); _iter2470 != this->Categories.end(); ++_iter2470)
    {
      xfer += (*_iter2470).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Element", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Element.size()));
    std::vector<TDDIAbstractExpressionElementRef> ::const_iterator _iter2471;
    for (_iter2471 = this->Element.begin(); _iter2471 != this->Element.end(); ++_iter2471)
    {
      xfer += (*_iter2471).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIExpression &a, TDDIExpression &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Value, b.Value);
  swap(a.Categories, b.Categories);
  swap(a.Element, b.Element);
  swap(a.__isset, b.__isset);
}

TDDIExpression::TDDIExpression(const TDDIExpression& other2472) {
  Gid = other2472.Gid;
  IsCitation = other2472.IsCitation;
  IsAbstract = other2472.IsAbstract;
  CitedElement = other2472.CitedElement;
  AbstractForm = other2472.AbstractForm;
  Name = other2472.Name;
  Description = other2472.Description;
  ImplementationConstraint = other2472.ImplementationConstraint;
  Note = other2472.Note;
  TaggedValue = other2472.TaggedValue;
  Value = other2472.Value;
  Categories = other2472.Categories;
  Element = other2472.Element;
  __isset = other2472.__isset;
}
TDDIExpression& TDDIExpression::operator=(const TDDIExpression& other2473) {
  Gid = other2473.Gid;
  IsCitation = other2473.IsCitation;
  IsAbstract = other2473.IsAbstract;
  CitedElement = other2473.CitedElement;
  AbstractForm = other2473.AbstractForm;
  Name = other2473.Name;
  Description = other2473.Description;
  ImplementationConstraint = other2473.ImplementationConstraint;
  Note = other2473.Note;
  TaggedValue = other2473.TaggedValue;
  Value = other2473.Value;
  Categories = other2473.Categories;
  Element = other2473.Element;
  __isset = other2473.__isset;
  return *this;
}
void TDDIExpression::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIExpression(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Categories=" << to_string(Categories);
  out << ", " << "Element=" << to_string(Element);
  out << ")";
}


TDDITerm::~TDDITerm() throw() {
}


void TDDITerm::__set_Gid(const std::string& val) {
  this->Gid = val;
}

void TDDITerm::__set_IsCitation(const bool val) {
  this->IsCitation = val;
}

void TDDITerm::__set_IsAbstract(const bool val) {
  this->IsAbstract = val;
}

void TDDITerm::__set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->CitedElement = val;
}

void TDDITerm::__set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val) {
  this->AbstractForm = val;
}

void TDDITerm::__set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val) {
  this->Name = val;
}

void TDDITerm::__set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val) {
  this->Description = val;
}

void TDDITerm::__set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val) {
  this->ImplementationConstraint = val;
}

void TDDITerm::__set_Note(const std::vector<TDDINoteRef> & val) {
  this->Note = val;
}

void TDDITerm::__set_TaggedValue(const std::vector<TDDITaggedValueRef> & val) {
  this->TaggedValue = val;
}

void TDDITerm::__set_Value(const std::string& val) {
  this->Value = val;
}

void TDDITerm::__set_Category(const std::vector<TDDICategoryRef> & val) {
  this->Category = val;
}

void TDDITerm::__set_ExternalReference(const std::string& val) {
  this->ExternalReference = val;
}

void TDDITerm::__set_Origin(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> val) {
  this->Origin = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITerm& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerm::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gid);
          this->__isset.Gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsCitation);
          this->__isset.IsCitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsAbstract);
          this->__isset.IsAbstract = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->CitedElement) { 
            this->CitedElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->CitedElement->read(iprot);
          bool wasSet = false;
          if (this->CitedElement->__isset.UsedSACMElement) { wasSet = true; }
          if (this->CitedElement->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->CitedElement.reset(); }
          this->__isset.CitedElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AbstractForm) { 
            this->AbstractForm = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement>(new TDDIAbstractSACMElement);
          }
          xfer += this->AbstractForm->read(iprot);
          bool wasSet = false;
          if (this->AbstractForm->__isset.UsedSACMElement) { wasSet = true; }
          if (this->AbstractForm->__isset.UsedSACMElementType) { wasSet = true; }
          if (!wasSet) { this->AbstractForm.reset(); }
          this->__isset.AbstractForm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Name) { 
            this->Name = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString>(new TDDIAbstractLangString);
          }
          xfer += this->Name->read(iprot);
          bool wasSet = false;
          if (this->Name->__isset.UsedLangString) { wasSet = true; }
          if (this->Name->__isset.UsedLangStringType) { wasSet = true; }
          if (!wasSet) { this->Name.reset(); }
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Description) { 
            this->Description = ::apache::thrift::stdcxx::shared_ptr<TDDIDescription>(new TDDIDescription);
          }
          xfer += this->Description->read(iprot);
          bool wasSet = false;
          if (this->Description->__isset.Gid) { wasSet = true; }
          if (this->Description->__isset.IsCitation) { wasSet = true; }
          if (this->Description->__isset.IsAbstract) { wasSet = true; }
          if (this->Description->__isset.CitedElement) { wasSet = true; }
          if (this->Description->__isset.AbstractForm) { wasSet = true; }
          if (this->Description->__isset.Content) { wasSet = true; }
          if (!wasSet) { this->Description.reset(); }
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementationConstraint.clear();
            uint32_t _size2474;
            ::apache::thrift::protocol::TType _etype2477;
            xfer += iprot->readListBegin(_etype2477, _size2474);
            this->ImplementationConstraint.resize(_size2474);
            uint32_t _i2478;
            for (_i2478 = 0; _i2478 < _size2474; ++_i2478)
            {
              xfer += this->ImplementationConstraint[_i2478].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementationConstraint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Note.clear();
            uint32_t _size2479;
            ::apache::thrift::protocol::TType _etype2482;
            xfer += iprot->readListBegin(_etype2482, _size2479);
            this->Note.resize(_size2479);
            uint32_t _i2483;
            for (_i2483 = 0; _i2483 < _size2479; ++_i2483)
            {
              xfer += this->Note[_i2483].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->TaggedValue.clear();
            uint32_t _size2484;
            ::apache::thrift::protocol::TType _etype2487;
            xfer += iprot->readListBegin(_etype2487, _size2484);
            this->TaggedValue.resize(_size2484);
            uint32_t _i2488;
            for (_i2488 = 0; _i2488 < _size2484; ++_i2488)
            {
              xfer += this->TaggedValue[_i2488].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.TaggedValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Category.clear();
            uint32_t _size2489;
            ::apache::thrift::protocol::TType _etype2492;
            xfer += iprot->readListBegin(_etype2492, _size2489);
            this->Category.resize(_size2489);
            uint32_t _i2493;
            for (_i2493 = 0; _i2493 < _size2489; ++_i2493)
            {
              xfer += this->Category[_i2493].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ExternalReference);
          this->__isset.ExternalReference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Origin) { 
            this->Origin = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement>(new TDDIAbstractModelElement);
          }
          xfer += this->Origin->read(iprot);
          bool wasSet = false;
          if (this->Origin->__isset.UsedModelElement) { wasSet = true; }
          if (this->Origin->__isset.UsedModelElementType) { wasSet = true; }
          if (!wasSet) { this->Origin.reset(); }
          this->__isset.Origin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerm");

  xfer += oprot->writeFieldBegin("Gid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsCitation", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->IsCitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsAbstract", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->IsAbstract);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("CitedElement", ::apache::thrift::protocol::T_STRUCT, 4);
  if (this->CitedElement) {
    xfer += this->CitedElement->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AbstractForm", ::apache::thrift::protocol::T_STRUCT, 5);
  if (this->AbstractForm) {
    xfer += this->AbstractForm->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractSACMElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRUCT, 6);
  if (this->Name) {
    xfer += this->Name->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractLangString"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRUCT, 7);
  if (this->Description) {
    xfer += this->Description->write(oprot); 
  } else {oprot->writeStructBegin("TDDIDescription"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementationConstraint", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementationConstraint.size()));
    std::vector<TDDIImplementationConstraintRef> ::const_iterator _iter2494;
    for (_iter2494 = this->ImplementationConstraint.begin(); _iter2494 != this->ImplementationConstraint.end(); ++_iter2494)
    {
      xfer += (*_iter2494).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Note", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Note.size()));
    std::vector<TDDINoteRef> ::const_iterator _iter2495;
    for (_iter2495 = this->Note.begin(); _iter2495 != this->Note.end(); ++_iter2495)
    {
      xfer += (*_iter2495).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TaggedValue", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->TaggedValue.size()));
    std::vector<TDDITaggedValueRef> ::const_iterator _iter2496;
    for (_iter2496 = this->TaggedValue.begin(); _iter2496 != this->TaggedValue.end(); ++_iter2496)
    {
      xfer += (*_iter2496).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Category.size()));
    std::vector<TDDICategoryRef> ::const_iterator _iter2497;
    for (_iter2497 = this->Category.begin(); _iter2497 != this->Category.end(); ++_iter2497)
    {
      xfer += (*_iter2497).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExternalReference", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->ExternalReference);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Origin", ::apache::thrift::protocol::T_STRUCT, 14);
  if (this->Origin) {
    xfer += this->Origin->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAbstractModelElement"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerm &a, TDDITerm &b) {
  using ::std::swap;
  swap(a.Gid, b.Gid);
  swap(a.IsCitation, b.IsCitation);
  swap(a.IsAbstract, b.IsAbstract);
  swap(a.CitedElement, b.CitedElement);
  swap(a.AbstractForm, b.AbstractForm);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.ImplementationConstraint, b.ImplementationConstraint);
  swap(a.Note, b.Note);
  swap(a.TaggedValue, b.TaggedValue);
  swap(a.Value, b.Value);
  swap(a.Category, b.Category);
  swap(a.ExternalReference, b.ExternalReference);
  swap(a.Origin, b.Origin);
  swap(a.__isset, b.__isset);
}

TDDITerm::TDDITerm(const TDDITerm& other2498) {
  Gid = other2498.Gid;
  IsCitation = other2498.IsCitation;
  IsAbstract = other2498.IsAbstract;
  CitedElement = other2498.CitedElement;
  AbstractForm = other2498.AbstractForm;
  Name = other2498.Name;
  Description = other2498.Description;
  ImplementationConstraint = other2498.ImplementationConstraint;
  Note = other2498.Note;
  TaggedValue = other2498.TaggedValue;
  Value = other2498.Value;
  Category = other2498.Category;
  ExternalReference = other2498.ExternalReference;
  Origin = other2498.Origin;
  __isset = other2498.__isset;
}
TDDITerm& TDDITerm::operator=(const TDDITerm& other2499) {
  Gid = other2499.Gid;
  IsCitation = other2499.IsCitation;
  IsAbstract = other2499.IsAbstract;
  CitedElement = other2499.CitedElement;
  AbstractForm = other2499.AbstractForm;
  Name = other2499.Name;
  Description = other2499.Description;
  ImplementationConstraint = other2499.ImplementationConstraint;
  Note = other2499.Note;
  TaggedValue = other2499.TaggedValue;
  Value = other2499.Value;
  Category = other2499.Category;
  ExternalReference = other2499.ExternalReference;
  Origin = other2499.Origin;
  __isset = other2499.__isset;
  return *this;
}
void TDDITerm::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerm(";
  out << "Gid=" << to_string(Gid);
  out << ", " << "IsCitation=" << to_string(IsCitation);
  out << ", " << "IsAbstract=" << to_string(IsAbstract);
  out << ", " << "CitedElement=" << to_string(CitedElement);
  out << ", " << "AbstractForm=" << to_string(AbstractForm);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "ImplementationConstraint=" << to_string(ImplementationConstraint);
  out << ", " << "Note=" << to_string(Note);
  out << ", " << "TaggedValue=" << to_string(TaggedValue);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "ExternalReference=" << to_string(ExternalReference);
  out << ", " << "Origin=" << to_string(Origin);
  out << ")";
}


TDDIExpressionElementUnion::~TDDIExpressionElementUnion() throw() {
}


void TDDIExpressionElementUnion::__set_Expression(::apache::thrift::stdcxx::shared_ptr<TDDIExpression> val) {
  this->Expression = val;
__isset.Expression = true;
}

void TDDIExpressionElementUnion::__set_Term(::apache::thrift::stdcxx::shared_ptr<TDDITerm> val) {
  this->Term = val;
__isset.Term = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIExpressionElementUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIExpressionElementUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Expression) { 
            this->Expression = ::apache::thrift::stdcxx::shared_ptr<TDDIExpression>(new TDDIExpression);
          }
          xfer += this->Expression->read(iprot);
          bool wasSet = false;
          if (this->Expression->__isset.Gid) { wasSet = true; }
          if (this->Expression->__isset.IsCitation) { wasSet = true; }
          if (this->Expression->__isset.IsAbstract) { wasSet = true; }
          if (this->Expression->__isset.CitedElement) { wasSet = true; }
          if (this->Expression->__isset.AbstractForm) { wasSet = true; }
          if (this->Expression->__isset.Name) { wasSet = true; }
          if (this->Expression->__isset.Description) { wasSet = true; }
          if (this->Expression->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Expression->__isset.Note) { wasSet = true; }
          if (this->Expression->__isset.TaggedValue) { wasSet = true; }
          if (this->Expression->__isset.Value) { wasSet = true; }
          if (this->Expression->__isset.Categories) { wasSet = true; }
          if (this->Expression->__isset.Element) { wasSet = true; }
          if (!wasSet) { this->Expression.reset(); }
          this->__isset.Expression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Term) { 
            this->Term = ::apache::thrift::stdcxx::shared_ptr<TDDITerm>(new TDDITerm);
          }
          xfer += this->Term->read(iprot);
          bool wasSet = false;
          if (this->Term->__isset.Gid) { wasSet = true; }
          if (this->Term->__isset.IsCitation) { wasSet = true; }
          if (this->Term->__isset.IsAbstract) { wasSet = true; }
          if (this->Term->__isset.CitedElement) { wasSet = true; }
          if (this->Term->__isset.AbstractForm) { wasSet = true; }
          if (this->Term->__isset.Name) { wasSet = true; }
          if (this->Term->__isset.Description) { wasSet = true; }
          if (this->Term->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Term->__isset.Note) { wasSet = true; }
          if (this->Term->__isset.TaggedValue) { wasSet = true; }
          if (this->Term->__isset.Value) { wasSet = true; }
          if (this->Term->__isset.Category) { wasSet = true; }
          if (this->Term->__isset.ExternalReference) { wasSet = true; }
          if (this->Term->__isset.Origin) { wasSet = true; }
          if (!wasSet) { this->Term.reset(); }
          this->__isset.Term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIExpressionElementUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIExpressionElementUnion");

  if (this->__isset.Expression) {
    xfer += oprot->writeFieldBegin("Expression", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Expression) {
      xfer += this->Expression->write(oprot); 
    } else {oprot->writeStructBegin("TDDIExpression"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Term) {
    xfer += oprot->writeFieldBegin("Term", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->Term) {
      xfer += this->Term->write(oprot); 
    } else {oprot->writeStructBegin("TDDITerm"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIExpressionElementUnion &a, TDDIExpressionElementUnion &b) {
  using ::std::swap;
  swap(a.Expression, b.Expression);
  swap(a.Term, b.Term);
  swap(a.__isset, b.__isset);
}

TDDIExpressionElementUnion::TDDIExpressionElementUnion(const TDDIExpressionElementUnion& other2500) {
  Expression = other2500.Expression;
  Term = other2500.Term;
  __isset = other2500.__isset;
}
TDDIExpressionElementUnion& TDDIExpressionElementUnion::operator=(const TDDIExpressionElementUnion& other2501) {
  Expression = other2501.Expression;
  Term = other2501.Term;
  __isset = other2501.__isset;
  return *this;
}
void TDDIExpressionElementUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIExpressionElementUnion(";
  out << "Expression="; (__isset.Expression ? (out << to_string(Expression)) : (out << "<null>"));
  out << ", " << "Term="; (__isset.Term ? (out << to_string(Term)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractExpressionElement::~TDDIAbstractExpressionElement() throw() {
}


void TDDIAbstractExpressionElement::__set_UsedExpressionElement(const TDDIExpressionElementUnion& val) {
  this->UsedExpressionElement = val;
}

void TDDIAbstractExpressionElement::__set_UsedExpressionElementType(const TDDIExpressionElementUnionType val) {
  this->UsedExpressionElementType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractExpressionElement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractExpressionElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedExpressionElement.read(iprot);
          this->__isset.UsedExpressionElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2502;
          xfer += iprot->readI32(ecast2502);
          this->UsedExpressionElementType = (TDDIExpressionElementUnionType)ecast2502;
          this->__isset.UsedExpressionElementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractExpressionElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractExpressionElement");

  xfer += oprot->writeFieldBegin("UsedExpressionElement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedExpressionElement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedExpressionElementType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedExpressionElementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractExpressionElement &a, TDDIAbstractExpressionElement &b) {
  using ::std::swap;
  swap(a.UsedExpressionElement, b.UsedExpressionElement);
  swap(a.UsedExpressionElementType, b.UsedExpressionElementType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractExpressionElement::TDDIAbstractExpressionElement(const TDDIAbstractExpressionElement& other2503) {
  UsedExpressionElement = other2503.UsedExpressionElement;
  UsedExpressionElementType = other2503.UsedExpressionElementType;
  __isset = other2503.__isset;
}
TDDIAbstractExpressionElement& TDDIAbstractExpressionElement::operator=(const TDDIAbstractExpressionElement& other2504) {
  UsedExpressionElement = other2504.UsedExpressionElement;
  UsedExpressionElementType = other2504.UsedExpressionElementType;
  __isset = other2504.__isset;
  return *this;
}
void TDDIAbstractExpressionElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractExpressionElement(";
  out << "UsedExpressionElement=" << to_string(UsedExpressionElement);
  out << ", " << "UsedExpressionElementType=" << to_string(UsedExpressionElementType);
  out << ")";
}


TDDITerminologyAssetUnion::~TDDITerminologyAssetUnion() throw() {
}


void TDDITerminologyAssetUnion::__set_Category(::apache::thrift::stdcxx::shared_ptr<TDDICategory> val) {
  this->Category = val;
__isset.Category = true;
}

void TDDITerminologyAssetUnion::__set_ExpressionElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> val) {
  this->ExpressionElement = val;
__isset.ExpressionElement = true;
}
std::ostream& operator<<(std::ostream& out, const TDDITerminologyAssetUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITerminologyAssetUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Category) { 
            this->Category = ::apache::thrift::stdcxx::shared_ptr<TDDICategory>(new TDDICategory);
          }
          xfer += this->Category->read(iprot);
          bool wasSet = false;
          if (this->Category->__isset.Gid) { wasSet = true; }
          if (this->Category->__isset.IsCitation) { wasSet = true; }
          if (this->Category->__isset.IsAbstract) { wasSet = true; }
          if (this->Category->__isset.CitedElement) { wasSet = true; }
          if (this->Category->__isset.AbstractForm) { wasSet = true; }
          if (this->Category->__isset.Name) { wasSet = true; }
          if (this->Category->__isset.Description) { wasSet = true; }
          if (this->Category->__isset.ImplementationConstraint) { wasSet = true; }
          if (this->Category->__isset.Note) { wasSet = true; }
          if (this->Category->__isset.TaggedValue) { wasSet = true; }
          if (!wasSet) { this->Category.reset(); }
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ExpressionElement) { 
            this->ExpressionElement = ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement>(new TDDIAbstractExpressionElement);
          }
          xfer += this->ExpressionElement->read(iprot);
          bool wasSet = false;
          if (this->ExpressionElement->__isset.UsedExpressionElement) { wasSet = true; }
          if (this->ExpressionElement->__isset.UsedExpressionElementType) { wasSet = true; }
          if (!wasSet) { this->ExpressionElement.reset(); }
          this->__isset.ExpressionElement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITerminologyAssetUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITerminologyAssetUnion");

  if (this->__isset.Category) {
    xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Category) {
      xfer += this->Category->write(oprot); 
    } else {oprot->writeStructBegin("TDDICategory"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ExpressionElement) {
    xfer += oprot->writeFieldBegin("ExpressionElement", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->ExpressionElement) {
      xfer += this->ExpressionElement->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAbstractExpressionElement"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITerminologyAssetUnion &a, TDDITerminologyAssetUnion &b) {
  using ::std::swap;
  swap(a.Category, b.Category);
  swap(a.ExpressionElement, b.ExpressionElement);
  swap(a.__isset, b.__isset);
}

TDDITerminologyAssetUnion::TDDITerminologyAssetUnion(const TDDITerminologyAssetUnion& other2505) {
  Category = other2505.Category;
  ExpressionElement = other2505.ExpressionElement;
  __isset = other2505.__isset;
}
TDDITerminologyAssetUnion& TDDITerminologyAssetUnion::operator=(const TDDITerminologyAssetUnion& other2506) {
  Category = other2506.Category;
  ExpressionElement = other2506.ExpressionElement;
  __isset = other2506.__isset;
  return *this;
}
void TDDITerminologyAssetUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITerminologyAssetUnion(";
  out << "Category="; (__isset.Category ? (out << to_string(Category)) : (out << "<null>"));
  out << ", " << "ExpressionElement="; (__isset.ExpressionElement ? (out << to_string(ExpressionElement)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractTerminologyAsset::~TDDIAbstractTerminologyAsset() throw() {
}


void TDDIAbstractTerminologyAsset::__set_UsedTerminologyAsset(const TDDITerminologyAssetUnion& val) {
  this->UsedTerminologyAsset = val;
}

void TDDIAbstractTerminologyAsset::__set_UsedTerminologyAssetType(const TDDITerminologyAssetUnionType val) {
  this->UsedTerminologyAssetType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyAsset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractTerminologyAsset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedTerminologyAsset.read(iprot);
          this->__isset.UsedTerminologyAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2507;
          xfer += iprot->readI32(ecast2507);
          this->UsedTerminologyAssetType = (TDDITerminologyAssetUnionType)ecast2507;
          this->__isset.UsedTerminologyAssetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractTerminologyAsset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractTerminologyAsset");

  xfer += oprot->writeFieldBegin("UsedTerminologyAsset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedTerminologyAsset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedTerminologyAssetType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedTerminologyAssetType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractTerminologyAsset &a, TDDIAbstractTerminologyAsset &b) {
  using ::std::swap;
  swap(a.UsedTerminologyAsset, b.UsedTerminologyAsset);
  swap(a.UsedTerminologyAssetType, b.UsedTerminologyAssetType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractTerminologyAsset::TDDIAbstractTerminologyAsset(const TDDIAbstractTerminologyAsset& other2508) {
  UsedTerminologyAsset = other2508.UsedTerminologyAsset;
  UsedTerminologyAssetType = other2508.UsedTerminologyAssetType;
  __isset = other2508.__isset;
}
TDDIAbstractTerminologyAsset& TDDIAbstractTerminologyAsset::operator=(const TDDIAbstractTerminologyAsset& other2509) {
  UsedTerminologyAsset = other2509.UsedTerminologyAsset;
  UsedTerminologyAssetType = other2509.UsedTerminologyAssetType;
  __isset = other2509.__isset;
  return *this;
}
void TDDIAbstractTerminologyAsset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractTerminologyAsset(";
  out << "UsedTerminologyAsset=" << to_string(UsedTerminologyAsset);
  out << ", " << "UsedTerminologyAssetType=" << to_string(UsedTerminologyAssetType);
  out << ")";
}


TDDIAbstractEpsilonScriptExecutionException::~TDDIAbstractEpsilonScriptExecutionException() throw() {
}


void TDDIAbstractEpsilonScriptExecutionException::__set_UsedException(const TDDIEpsilonScriptExecutionExceptionUnion& val) {
  this->UsedException = val;
}

void TDDIAbstractEpsilonScriptExecutionException::__set_UsedExceptionType(const TDDIEpsilonScriptExecutionExceptionUnionType val) {
  this->UsedExceptionType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractEpsilonScriptExecutionException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractEpsilonScriptExecutionException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedException.read(iprot);
          this->__isset.UsedException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2510;
          xfer += iprot->readI32(ecast2510);
          this->UsedExceptionType = (TDDIEpsilonScriptExecutionExceptionUnionType)ecast2510;
          this->__isset.UsedExceptionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractEpsilonScriptExecutionException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractEpsilonScriptExecutionException");

  xfer += oprot->writeFieldBegin("UsedException", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedException.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedExceptionType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedExceptionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractEpsilonScriptExecutionException &a, TDDIAbstractEpsilonScriptExecutionException &b) {
  using ::std::swap;
  swap(a.UsedException, b.UsedException);
  swap(a.UsedExceptionType, b.UsedExceptionType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractEpsilonScriptExecutionException::TDDIAbstractEpsilonScriptExecutionException(const TDDIAbstractEpsilonScriptExecutionException& other2511) : TException() {
  UsedException = other2511.UsedException;
  UsedExceptionType = other2511.UsedExceptionType;
  __isset = other2511.__isset;
}
TDDIAbstractEpsilonScriptExecutionException& TDDIAbstractEpsilonScriptExecutionException::operator=(const TDDIAbstractEpsilonScriptExecutionException& other2512) {
  UsedException = other2512.UsedException;
  UsedExceptionType = other2512.UsedExceptionType;
  __isset = other2512.__isset;
  return *this;
}
void TDDIAbstractEpsilonScriptExecutionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractEpsilonScriptExecutionException(";
  out << "UsedException=" << to_string(UsedException);
  out << ", " << "UsedExceptionType=" << to_string(UsedExceptionType);
  out << ")";
}

const char* TDDIAbstractEpsilonScriptExecutionException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TDDIAbstractEpsilonScriptExecutionException";
  }
}


TDDIEpsilonScriptExecutionExceptionUnion::~TDDIEpsilonScriptExecutionExceptionUnion() throw() {
}


void TDDIEpsilonScriptExecutionExceptionUnion::__set_ValidationFailedException(::apache::thrift::stdcxx::shared_ptr<TDDIValidationFailedException> val) {
  this->ValidationFailedException = val;
__isset.ValidationFailedException = true;
}

void TDDIEpsilonScriptExecutionExceptionUnion::__set_EpsilonScriptExecutionException(::apache::thrift::stdcxx::shared_ptr<TDDIEpsilonScriptExecutionException> val) {
  this->EpsilonScriptExecutionException = val;
__isset.EpsilonScriptExecutionException = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptExecutionExceptionUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIEpsilonScriptExecutionExceptionUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ValidationFailedException) { 
            this->ValidationFailedException = ::apache::thrift::stdcxx::shared_ptr<TDDIValidationFailedException>(new TDDIValidationFailedException);
          }
          xfer += this->ValidationFailedException->read(iprot);
          bool wasSet = false;
          if (this->ValidationFailedException->__isset.ValidationResult) { wasSet = true; }
          if (!wasSet) { this->ValidationFailedException.reset(); }
          this->__isset.ValidationFailedException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->EpsilonScriptExecutionException) { 
            this->EpsilonScriptExecutionException = ::apache::thrift::stdcxx::shared_ptr<TDDIEpsilonScriptExecutionException>(new TDDIEpsilonScriptExecutionException);
          }
          xfer += this->EpsilonScriptExecutionException->read(iprot);
          bool wasSet = false;
          if (this->EpsilonScriptExecutionException->__isset.Message) { wasSet = true; }
          if (!wasSet) { this->EpsilonScriptExecutionException.reset(); }
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIEpsilonScriptExecutionExceptionUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIEpsilonScriptExecutionExceptionUnion");

  if (this->__isset.ValidationFailedException) {
    xfer += oprot->writeFieldBegin("ValidationFailedException", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ValidationFailedException) {
      xfer += this->ValidationFailedException->write(oprot); 
    } else {oprot->writeStructBegin("TDDIValidationFailedException"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.EpsilonScriptExecutionException) {
    xfer += oprot->writeFieldBegin("EpsilonScriptExecutionException", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->EpsilonScriptExecutionException) {
      xfer += this->EpsilonScriptExecutionException->write(oprot); 
    } else {oprot->writeStructBegin("TDDIEpsilonScriptExecutionException"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIEpsilonScriptExecutionExceptionUnion &a, TDDIEpsilonScriptExecutionExceptionUnion &b) {
  using ::std::swap;
  swap(a.ValidationFailedException, b.ValidationFailedException);
  swap(a.EpsilonScriptExecutionException, b.EpsilonScriptExecutionException);
  swap(a.__isset, b.__isset);
}

TDDIEpsilonScriptExecutionExceptionUnion::TDDIEpsilonScriptExecutionExceptionUnion(const TDDIEpsilonScriptExecutionExceptionUnion& other2513) {
  ValidationFailedException = other2513.ValidationFailedException;
  EpsilonScriptExecutionException = other2513.EpsilonScriptExecutionException;
  __isset = other2513.__isset;
}
TDDIEpsilonScriptExecutionExceptionUnion& TDDIEpsilonScriptExecutionExceptionUnion::operator=(const TDDIEpsilonScriptExecutionExceptionUnion& other2514) {
  ValidationFailedException = other2514.ValidationFailedException;
  EpsilonScriptExecutionException = other2514.EpsilonScriptExecutionException;
  __isset = other2514.__isset;
  return *this;
}
void TDDIEpsilonScriptExecutionExceptionUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIEpsilonScriptExecutionExceptionUnion(";
  out << "ValidationFailedException="; (__isset.ValidationFailedException ? (out << to_string(ValidationFailedException)) : (out << "<null>"));
  out << ", " << "EpsilonScriptExecutionException="; (__isset.EpsilonScriptExecutionException ? (out << to_string(EpsilonScriptExecutionException)) : (out << "<null>"));
  out << ")";
}


TDDIEpsilonScriptExecutionException::~TDDIEpsilonScriptExecutionException() throw() {
}


void TDDIEpsilonScriptExecutionException::__set_Message(const std::string& val) {
  this->Message = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptExecutionException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIEpsilonScriptExecutionException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Message);
          this->__isset.Message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIEpsilonScriptExecutionException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIEpsilonScriptExecutionException");

  xfer += oprot->writeFieldBegin("Message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIEpsilonScriptExecutionException &a, TDDIEpsilonScriptExecutionException &b) {
  using ::std::swap;
  swap(a.Message, b.Message);
  swap(a.__isset, b.__isset);
}

TDDIEpsilonScriptExecutionException::TDDIEpsilonScriptExecutionException(const TDDIEpsilonScriptExecutionException& other2515) {
  Message = other2515.Message;
  __isset = other2515.__isset;
}
TDDIEpsilonScriptExecutionException& TDDIEpsilonScriptExecutionException::operator=(const TDDIEpsilonScriptExecutionException& other2516) {
  Message = other2516.Message;
  __isset = other2516.__isset;
  return *this;
}
void TDDIEpsilonScriptExecutionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIEpsilonScriptExecutionException(";
  out << "Message=" << to_string(Message);
  out << ")";
}


TDDIValidationFailedException::~TDDIValidationFailedException() throw() {
}


void TDDIValidationFailedException::__set_ValidationResult(const TDDIValidationResult& val) {
  this->ValidationResult = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIValidationFailedException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIValidationFailedException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ValidationResult.read(iprot);
          this->__isset.ValidationResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIValidationFailedException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIValidationFailedException");

  xfer += oprot->writeFieldBegin("ValidationResult", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ValidationResult.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIValidationFailedException &a, TDDIValidationFailedException &b) {
  using ::std::swap;
  swap(a.ValidationResult, b.ValidationResult);
  swap(a.__isset, b.__isset);
}

TDDIValidationFailedException::TDDIValidationFailedException(const TDDIValidationFailedException& other2517) {
  ValidationResult = other2517.ValidationResult;
  __isset = other2517.__isset;
}
TDDIValidationFailedException& TDDIValidationFailedException::operator=(const TDDIValidationFailedException& other2518) {
  ValidationResult = other2518.ValidationResult;
  __isset = other2518.__isset;
  return *this;
}
void TDDIValidationFailedException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIValidationFailedException(";
  out << "ValidationResult=" << to_string(ValidationResult);
  out << ")";
}


TDDIValidationResult::~TDDIValidationResult() throw() {
}


void TDDIValidationResult::__set_ValidationViolationOccurred(const bool val) {
  this->ValidationViolationOccurred = val;
}

void TDDIValidationResult::__set_ValidationViolationMessages(const std::vector<TDDIValidationViolationMessage> & val) {
  this->ValidationViolationMessages = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIValidationResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIValidationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ValidationViolationOccurred);
          this->__isset.ValidationViolationOccurred = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ValidationViolationMessages.clear();
            uint32_t _size2519;
            ::apache::thrift::protocol::TType _etype2522;
            xfer += iprot->readListBegin(_etype2522, _size2519);
            this->ValidationViolationMessages.resize(_size2519);
            uint32_t _i2523;
            for (_i2523 = 0; _i2523 < _size2519; ++_i2523)
            {
              xfer += this->ValidationViolationMessages[_i2523].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ValidationViolationMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIValidationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIValidationResult");

  xfer += oprot->writeFieldBegin("ValidationViolationOccurred", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ValidationViolationOccurred);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ValidationViolationMessages", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ValidationViolationMessages.size()));
    std::vector<TDDIValidationViolationMessage> ::const_iterator _iter2524;
    for (_iter2524 = this->ValidationViolationMessages.begin(); _iter2524 != this->ValidationViolationMessages.end(); ++_iter2524)
    {
      xfer += (*_iter2524).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIValidationResult &a, TDDIValidationResult &b) {
  using ::std::swap;
  swap(a.ValidationViolationOccurred, b.ValidationViolationOccurred);
  swap(a.ValidationViolationMessages, b.ValidationViolationMessages);
  swap(a.__isset, b.__isset);
}

TDDIValidationResult::TDDIValidationResult(const TDDIValidationResult& other2525) {
  ValidationViolationOccurred = other2525.ValidationViolationOccurred;
  ValidationViolationMessages = other2525.ValidationViolationMessages;
  __isset = other2525.__isset;
}
TDDIValidationResult& TDDIValidationResult::operator=(const TDDIValidationResult& other2526) {
  ValidationViolationOccurred = other2526.ValidationViolationOccurred;
  ValidationViolationMessages = other2526.ValidationViolationMessages;
  __isset = other2526.__isset;
  return *this;
}
void TDDIValidationResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIValidationResult(";
  out << "ValidationViolationOccurred=" << to_string(ValidationViolationOccurred);
  out << ", " << "ValidationViolationMessages=" << to_string(ValidationViolationMessages);
  out << ")";
}


TDDIValidationViolationMessage::~TDDIValidationViolationMessage() throw() {
}


void TDDIValidationViolationMessage::__set_Context(const std::string& val) {
  this->Context = val;
}

void TDDIValidationViolationMessage::__set_Message(const std::string& val) {
  this->Message = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIValidationViolationMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIValidationViolationMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Context);
          this->__isset.Context = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Message);
          this->__isset.Message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIValidationViolationMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIValidationViolationMessage");

  xfer += oprot->writeFieldBegin("Context", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Context);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIValidationViolationMessage &a, TDDIValidationViolationMessage &b) {
  using ::std::swap;
  swap(a.Context, b.Context);
  swap(a.Message, b.Message);
  swap(a.__isset, b.__isset);
}

TDDIValidationViolationMessage::TDDIValidationViolationMessage(const TDDIValidationViolationMessage& other2527) {
  Context = other2527.Context;
  Message = other2527.Message;
  __isset = other2527.__isset;
}
TDDIValidationViolationMessage& TDDIValidationViolationMessage::operator=(const TDDIValidationViolationMessage& other2528) {
  Context = other2528.Context;
  Message = other2528.Message;
  __isset = other2528.__isset;
  return *this;
}
void TDDIValidationViolationMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIValidationViolationMessage(";
  out << "Context=" << to_string(Context);
  out << ", " << "Message=" << to_string(Message);
  out << ")";
}


TDDIServiceConfig::~TDDIServiceConfig() throw() {
}


void TDDIServiceConfig::__set_DDIFilePath(const std::string& val) {
  this->DDIFilePath = val;
}

void TDDIServiceConfig::__set_EpsilonScriptExecutionConfig(const std::vector<TDDIEpsilonScriptExecutionConfig> & val) {
  this->EpsilonScriptExecutionConfig = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIServiceConfig& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIServiceConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DDIFilePath);
          this->__isset.DDIFilePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->EpsilonScriptExecutionConfig.clear();
            uint32_t _size2529;
            ::apache::thrift::protocol::TType _etype2532;
            xfer += iprot->readListBegin(_etype2532, _size2529);
            this->EpsilonScriptExecutionConfig.resize(_size2529);
            uint32_t _i2533;
            for (_i2533 = 0; _i2533 < _size2529; ++_i2533)
            {
              xfer += this->EpsilonScriptExecutionConfig[_i2533].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.EpsilonScriptExecutionConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIServiceConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIServiceConfig");

  xfer += oprot->writeFieldBegin("DDIFilePath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DDIFilePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("EpsilonScriptExecutionConfig", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->EpsilonScriptExecutionConfig.size()));
    std::vector<TDDIEpsilonScriptExecutionConfig> ::const_iterator _iter2534;
    for (_iter2534 = this->EpsilonScriptExecutionConfig.begin(); _iter2534 != this->EpsilonScriptExecutionConfig.end(); ++_iter2534)
    {
      xfer += (*_iter2534).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIServiceConfig &a, TDDIServiceConfig &b) {
  using ::std::swap;
  swap(a.DDIFilePath, b.DDIFilePath);
  swap(a.EpsilonScriptExecutionConfig, b.EpsilonScriptExecutionConfig);
  swap(a.__isset, b.__isset);
}

TDDIServiceConfig::TDDIServiceConfig(const TDDIServiceConfig& other2535) {
  DDIFilePath = other2535.DDIFilePath;
  EpsilonScriptExecutionConfig = other2535.EpsilonScriptExecutionConfig;
  __isset = other2535.__isset;
}
TDDIServiceConfig& TDDIServiceConfig::operator=(const TDDIServiceConfig& other2536) {
  DDIFilePath = other2536.DDIFilePath;
  EpsilonScriptExecutionConfig = other2536.EpsilonScriptExecutionConfig;
  __isset = other2536.__isset;
  return *this;
}
void TDDIServiceConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIServiceConfig(";
  out << "DDIFilePath=" << to_string(DDIFilePath);
  out << ", " << "EpsilonScriptExecutionConfig=" << to_string(EpsilonScriptExecutionConfig);
  out << ")";
}


TDDIEpsilonScriptExecutionConfig::~TDDIEpsilonScriptExecutionConfig() throw() {
}


void TDDIEpsilonScriptExecutionConfig::__set_ScriptFilePath(const std::string& val) {
  this->ScriptFilePath = val;
}

void TDDIEpsilonScriptExecutionConfig::__set_ScriptContent(const std::string& val) {
  this->ScriptContent = val;
}

void TDDIEpsilonScriptExecutionConfig::__set_ExecuteWithScriptFile(const bool val) {
  this->ExecuteWithScriptFile = val;
}

void TDDIEpsilonScriptExecutionConfig::__set_EpsilonLanguage(const TDDIEpsilonLanguage val) {
  this->EpsilonLanguage = val;
}

void TDDIEpsilonScriptExecutionConfig::__set_ModelConfigs(const std::vector<TDDIEpsilonScriptModelConfig> & val) {
  this->ModelConfigs = val;
}

void TDDIEpsilonScriptExecutionConfig::__set_ExportParameters(const std::vector<TDDIEpsilonParameter> & val) {
  this->ExportParameters = val;
}

void TDDIEpsilonScriptExecutionConfig::__set_ImportParameters(const std::vector<TDDIEpsilonParameter> & val) {
  this->ImportParameters = val;
}

void TDDIEpsilonScriptExecutionConfig::__set_VariableNameOfReturnValue(const std::string& val) {
  this->VariableNameOfReturnValue = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptExecutionConfig& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIEpsilonScriptExecutionConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ScriptFilePath);
          this->__isset.ScriptFilePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ScriptContent);
          this->__isset.ScriptContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ExecuteWithScriptFile);
          this->__isset.ExecuteWithScriptFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2537;
          xfer += iprot->readI32(ecast2537);
          this->EpsilonLanguage = (TDDIEpsilonLanguage)ecast2537;
          this->__isset.EpsilonLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ModelConfigs.clear();
            uint32_t _size2538;
            ::apache::thrift::protocol::TType _etype2541;
            xfer += iprot->readListBegin(_etype2541, _size2538);
            this->ModelConfigs.resize(_size2538);
            uint32_t _i2542;
            for (_i2542 = 0; _i2542 < _size2538; ++_i2542)
            {
              xfer += this->ModelConfigs[_i2542].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ModelConfigs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ExportParameters.clear();
            uint32_t _size2543;
            ::apache::thrift::protocol::TType _etype2546;
            xfer += iprot->readListBegin(_etype2546, _size2543);
            this->ExportParameters.resize(_size2543);
            uint32_t _i2547;
            for (_i2547 = 0; _i2547 < _size2543; ++_i2547)
            {
              xfer += this->ExportParameters[_i2547].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ExportParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImportParameters.clear();
            uint32_t _size2548;
            ::apache::thrift::protocol::TType _etype2551;
            xfer += iprot->readListBegin(_etype2551, _size2548);
            this->ImportParameters.resize(_size2548);
            uint32_t _i2552;
            for (_i2552 = 0; _i2552 < _size2548; ++_i2552)
            {
              xfer += this->ImportParameters[_i2552].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImportParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->VariableNameOfReturnValue);
          this->__isset.VariableNameOfReturnValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIEpsilonScriptExecutionConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIEpsilonScriptExecutionConfig");

  xfer += oprot->writeFieldBegin("ScriptFilePath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ScriptFilePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ScriptContent", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ScriptContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExecuteWithScriptFile", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ExecuteWithScriptFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("EpsilonLanguage", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->EpsilonLanguage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ModelConfigs", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ModelConfigs.size()));
    std::vector<TDDIEpsilonScriptModelConfig> ::const_iterator _iter2553;
    for (_iter2553 = this->ModelConfigs.begin(); _iter2553 != this->ModelConfigs.end(); ++_iter2553)
    {
      xfer += (*_iter2553).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExportParameters", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ExportParameters.size()));
    std::vector<TDDIEpsilonParameter> ::const_iterator _iter2554;
    for (_iter2554 = this->ExportParameters.begin(); _iter2554 != this->ExportParameters.end(); ++_iter2554)
    {
      xfer += (*_iter2554).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImportParameters", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImportParameters.size()));
    std::vector<TDDIEpsilonParameter> ::const_iterator _iter2555;
    for (_iter2555 = this->ImportParameters.begin(); _iter2555 != this->ImportParameters.end(); ++_iter2555)
    {
      xfer += (*_iter2555).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("VariableNameOfReturnValue", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->VariableNameOfReturnValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIEpsilonScriptExecutionConfig &a, TDDIEpsilonScriptExecutionConfig &b) {
  using ::std::swap;
  swap(a.ScriptFilePath, b.ScriptFilePath);
  swap(a.ScriptContent, b.ScriptContent);
  swap(a.ExecuteWithScriptFile, b.ExecuteWithScriptFile);
  swap(a.EpsilonLanguage, b.EpsilonLanguage);
  swap(a.ModelConfigs, b.ModelConfigs);
  swap(a.ExportParameters, b.ExportParameters);
  swap(a.ImportParameters, b.ImportParameters);
  swap(a.VariableNameOfReturnValue, b.VariableNameOfReturnValue);
  swap(a.__isset, b.__isset);
}

TDDIEpsilonScriptExecutionConfig::TDDIEpsilonScriptExecutionConfig(const TDDIEpsilonScriptExecutionConfig& other2556) {
  ScriptFilePath = other2556.ScriptFilePath;
  ScriptContent = other2556.ScriptContent;
  ExecuteWithScriptFile = other2556.ExecuteWithScriptFile;
  EpsilonLanguage = other2556.EpsilonLanguage;
  ModelConfigs = other2556.ModelConfigs;
  ExportParameters = other2556.ExportParameters;
  ImportParameters = other2556.ImportParameters;
  VariableNameOfReturnValue = other2556.VariableNameOfReturnValue;
  __isset = other2556.__isset;
}
TDDIEpsilonScriptExecutionConfig& TDDIEpsilonScriptExecutionConfig::operator=(const TDDIEpsilonScriptExecutionConfig& other2557) {
  ScriptFilePath = other2557.ScriptFilePath;
  ScriptContent = other2557.ScriptContent;
  ExecuteWithScriptFile = other2557.ExecuteWithScriptFile;
  EpsilonLanguage = other2557.EpsilonLanguage;
  ModelConfigs = other2557.ModelConfigs;
  ExportParameters = other2557.ExportParameters;
  ImportParameters = other2557.ImportParameters;
  VariableNameOfReturnValue = other2557.VariableNameOfReturnValue;
  __isset = other2557.__isset;
  return *this;
}
void TDDIEpsilonScriptExecutionConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIEpsilonScriptExecutionConfig(";
  out << "ScriptFilePath=" << to_string(ScriptFilePath);
  out << ", " << "ScriptContent=" << to_string(ScriptContent);
  out << ", " << "ExecuteWithScriptFile=" << to_string(ExecuteWithScriptFile);
  out << ", " << "EpsilonLanguage=" << to_string(EpsilonLanguage);
  out << ", " << "ModelConfigs=" << to_string(ModelConfigs);
  out << ", " << "ExportParameters=" << to_string(ExportParameters);
  out << ", " << "ImportParameters=" << to_string(ImportParameters);
  out << ", " << "VariableNameOfReturnValue=" << to_string(VariableNameOfReturnValue);
  out << ")";
}


TDDIEpsilonScriptModelConfig::~TDDIEpsilonScriptModelConfig() throw() {
}


void TDDIEpsilonScriptModelConfig::__set_ModelUri(const std::string& val) {
  this->ModelUri = val;
}

void TDDIEpsilonScriptModelConfig::__set_ModelName(const std::string& val) {
  this->ModelName = val;
}

void TDDIEpsilonScriptModelConfig::__set_Alias(const std::string& val) {
  this->Alias = val;
}

void TDDIEpsilonScriptModelConfig::__set_ReadOnLoad(const bool val) {
  this->ReadOnLoad = val;
}

void TDDIEpsilonScriptModelConfig::__set_StoreOnDisposal(const bool val) {
  this->StoreOnDisposal = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptModelConfig& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIEpsilonScriptModelConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ModelUri);
          this->__isset.ModelUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ModelName);
          this->__isset.ModelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Alias);
          this->__isset.Alias = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ReadOnLoad);
          this->__isset.ReadOnLoad = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->StoreOnDisposal);
          this->__isset.StoreOnDisposal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIEpsilonScriptModelConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIEpsilonScriptModelConfig");

  xfer += oprot->writeFieldBegin("ModelUri", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ModelUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ModelName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ModelName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Alias", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Alias);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ReadOnLoad", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->ReadOnLoad);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StoreOnDisposal", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->StoreOnDisposal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIEpsilonScriptModelConfig &a, TDDIEpsilonScriptModelConfig &b) {
  using ::std::swap;
  swap(a.ModelUri, b.ModelUri);
  swap(a.ModelName, b.ModelName);
  swap(a.Alias, b.Alias);
  swap(a.ReadOnLoad, b.ReadOnLoad);
  swap(a.StoreOnDisposal, b.StoreOnDisposal);
  swap(a.__isset, b.__isset);
}

TDDIEpsilonScriptModelConfig::TDDIEpsilonScriptModelConfig(const TDDIEpsilonScriptModelConfig& other2558) {
  ModelUri = other2558.ModelUri;
  ModelName = other2558.ModelName;
  Alias = other2558.Alias;
  ReadOnLoad = other2558.ReadOnLoad;
  StoreOnDisposal = other2558.StoreOnDisposal;
  __isset = other2558.__isset;
}
TDDIEpsilonScriptModelConfig& TDDIEpsilonScriptModelConfig::operator=(const TDDIEpsilonScriptModelConfig& other2559) {
  ModelUri = other2559.ModelUri;
  ModelName = other2559.ModelName;
  Alias = other2559.Alias;
  ReadOnLoad = other2559.ReadOnLoad;
  StoreOnDisposal = other2559.StoreOnDisposal;
  __isset = other2559.__isset;
  return *this;
}
void TDDIEpsilonScriptModelConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIEpsilonScriptModelConfig(";
  out << "ModelUri=" << to_string(ModelUri);
  out << ", " << "ModelName=" << to_string(ModelName);
  out << ", " << "Alias=" << to_string(Alias);
  out << ", " << "ReadOnLoad=" << to_string(ReadOnLoad);
  out << ", " << "StoreOnDisposal=" << to_string(StoreOnDisposal);
  out << ")";
}


TDDIEpsilonParameter::~TDDIEpsilonParameter() throw() {
}


void TDDIEpsilonParameter::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIEpsilonParameter::__set_Alias(const std::string& val) {
  this->Alias = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIEpsilonParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIEpsilonParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Alias);
          this->__isset.Alias = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIEpsilonParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIEpsilonParameter");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Alias", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Alias);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIEpsilonParameter &a, TDDIEpsilonParameter &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.Alias, b.Alias);
  swap(a.__isset, b.__isset);
}

TDDIEpsilonParameter::TDDIEpsilonParameter(const TDDIEpsilonParameter& other2560) {
  Name = other2560.Name;
  Alias = other2560.Alias;
  __isset = other2560.__isset;
}
TDDIEpsilonParameter& TDDIEpsilonParameter::operator=(const TDDIEpsilonParameter& other2561) {
  Name = other2561.Name;
  Alias = other2561.Alias;
  __isset = other2561.__isset;
  return *this;
}
void TDDIEpsilonParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIEpsilonParameter(";
  out << "Name=" << to_string(Name);
  out << ", " << "Alias=" << to_string(Alias);
  out << ")";
}


TDDIExternalServiceParameter::~TDDIExternalServiceParameter() throw() {
}


void TDDIExternalServiceParameter::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIExternalServiceParameter::__set_Value(const std::string& val) {
  this->Value = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIExternalServiceParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIExternalServiceParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIExternalServiceParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIExternalServiceParameter");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIExternalServiceParameter &a, TDDIExternalServiceParameter &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.Value, b.Value);
  swap(a.__isset, b.__isset);
}

TDDIExternalServiceParameter::TDDIExternalServiceParameter(const TDDIExternalServiceParameter& other2562) {
  Name = other2562.Name;
  Value = other2562.Value;
  __isset = other2562.__isset;
}
TDDIExternalServiceParameter& TDDIExternalServiceParameter::operator=(const TDDIExternalServiceParameter& other2563) {
  Name = other2563.Name;
  Value = other2563.Value;
  __isset = other2563.__isset;
  return *this;
}
void TDDIExternalServiceParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIExternalServiceParameter(";
  out << "Name=" << to_string(Name);
  out << ", " << "Value=" << to_string(Value);
  out << ")";
}


TDDIVulnerability::~TDDIVulnerability() throw() {
}


void TDDIVulnerability::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIVulnerability::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIVulnerability::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIVulnerability::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIVulnerability::__set_Category(const std::string& val) {
  this->Category = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIVulnerability& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIVulnerability::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2564;
            ::apache::thrift::protocol::TType _etype2567;
            xfer += iprot->readListBegin(_etype2567, _size2564);
            this->KeyValueMaps.resize(_size2564);
            uint32_t _i2568;
            for (_i2568 = 0; _i2568 < _size2564; ++_i2568)
            {
              xfer += this->KeyValueMaps[_i2568].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Category);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIVulnerability::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIVulnerability");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2569;
    for (_iter2569 = this->KeyValueMaps.begin(); _iter2569 != this->KeyValueMaps.end(); ++_iter2569)
    {
      xfer += (*_iter2569).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIVulnerability &a, TDDIVulnerability &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Category, b.Category);
  swap(a.__isset, b.__isset);
}

TDDIVulnerability::TDDIVulnerability(const TDDIVulnerability& other2570) {
  Id = other2570.Id;
  Name = other2570.Name;
  Description = other2570.Description;
  KeyValueMaps = other2570.KeyValueMaps;
  Category = other2570.Category;
  __isset = other2570.__isset;
}
TDDIVulnerability& TDDIVulnerability::operator=(const TDDIVulnerability& other2571) {
  Id = other2571.Id;
  Name = other2571.Name;
  Description = other2571.Description;
  KeyValueMaps = other2571.KeyValueMaps;
  Category = other2571.Category;
  __isset = other2571.__isset;
  return *this;
}
void TDDIVulnerability::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIVulnerability(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Category=" << to_string(Category);
  out << ")";
}


TDDIAsset::~TDDIAsset() throw() {
}


void TDDIAsset::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIAsset::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIAsset::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIAsset::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIAsset::__set_FinancialValue(const double val) {
  this->FinancialValue = val;
}

void TDDIAsset::__set_FinancialCostType(const TDDIFinancialCostType val) {
  this->FinancialCostType = val;
}

void TDDIAsset::__set_OperationalCost(const double val) {
  this->OperationalCost = val;
}

void TDDIAsset::__set_OperationalCostType(const TDDIOperationalCostType val) {
  this->OperationalCostType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAsset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAsset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2572;
            ::apache::thrift::protocol::TType _etype2575;
            xfer += iprot->readListBegin(_etype2575, _size2572);
            this->KeyValueMaps.resize(_size2572);
            uint32_t _i2576;
            for (_i2576 = 0; _i2576 < _size2572; ++_i2576)
            {
              xfer += this->KeyValueMaps[_i2576].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FinancialValue);
          this->__isset.FinancialValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2577;
          xfer += iprot->readI32(ecast2577);
          this->FinancialCostType = (TDDIFinancialCostType)ecast2577;
          this->__isset.FinancialCostType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OperationalCost);
          this->__isset.OperationalCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2578;
          xfer += iprot->readI32(ecast2578);
          this->OperationalCostType = (TDDIOperationalCostType)ecast2578;
          this->__isset.OperationalCostType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAsset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAsset");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2579;
    for (_iter2579 = this->KeyValueMaps.begin(); _iter2579 != this->KeyValueMaps.end(); ++_iter2579)
    {
      xfer += (*_iter2579).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialValue", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->FinancialValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialCostType", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->FinancialCostType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OperationalCost", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->OperationalCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OperationalCostType", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->OperationalCostType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAsset &a, TDDIAsset &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.FinancialValue, b.FinancialValue);
  swap(a.FinancialCostType, b.FinancialCostType);
  swap(a.OperationalCost, b.OperationalCost);
  swap(a.OperationalCostType, b.OperationalCostType);
  swap(a.__isset, b.__isset);
}

TDDIAsset::TDDIAsset(const TDDIAsset& other2580) {
  Id = other2580.Id;
  Name = other2580.Name;
  Description = other2580.Description;
  KeyValueMaps = other2580.KeyValueMaps;
  FinancialValue = other2580.FinancialValue;
  FinancialCostType = other2580.FinancialCostType;
  OperationalCost = other2580.OperationalCost;
  OperationalCostType = other2580.OperationalCostType;
  __isset = other2580.__isset;
}
TDDIAsset& TDDIAsset::operator=(const TDDIAsset& other2581) {
  Id = other2581.Id;
  Name = other2581.Name;
  Description = other2581.Description;
  KeyValueMaps = other2581.KeyValueMaps;
  FinancialValue = other2581.FinancialValue;
  FinancialCostType = other2581.FinancialCostType;
  OperationalCost = other2581.OperationalCost;
  OperationalCostType = other2581.OperationalCostType;
  __isset = other2581.__isset;
  return *this;
}
void TDDIAsset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAsset(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "FinancialValue=" << to_string(FinancialValue);
  out << ", " << "FinancialCostType=" << to_string(FinancialCostType);
  out << ", " << "OperationalCost=" << to_string(OperationalCost);
  out << ", " << "OperationalCostType=" << to_string(OperationalCostType);
  out << ")";
}


TDDIVulnerableItem::~TDDIVulnerableItem() throw() {
}


void TDDIVulnerableItem::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIVulnerableItem::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIVulnerableItem::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIVulnerableItem::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIVulnerableItem::__set_FinancialValue(const double val) {
  this->FinancialValue = val;
}

void TDDIVulnerableItem::__set_FinancialCostType(const TDDIFinancialCostType val) {
  this->FinancialCostType = val;
}

void TDDIVulnerableItem::__set_OperationalCost(const double val) {
  this->OperationalCost = val;
}

void TDDIVulnerableItem::__set_OperationalCostType(const TDDIOperationalCostType val) {
  this->OperationalCostType = val;
}

void TDDIVulnerableItem::__set_Vulnerabilities(const std::vector<TDDIVulnerability> & val) {
  this->Vulnerabilities = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIVulnerableItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIVulnerableItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2582;
            ::apache::thrift::protocol::TType _etype2585;
            xfer += iprot->readListBegin(_etype2585, _size2582);
            this->KeyValueMaps.resize(_size2582);
            uint32_t _i2586;
            for (_i2586 = 0; _i2586 < _size2582; ++_i2586)
            {
              xfer += this->KeyValueMaps[_i2586].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FinancialValue);
          this->__isset.FinancialValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2587;
          xfer += iprot->readI32(ecast2587);
          this->FinancialCostType = (TDDIFinancialCostType)ecast2587;
          this->__isset.FinancialCostType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->OperationalCost);
          this->__isset.OperationalCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2588;
          xfer += iprot->readI32(ecast2588);
          this->OperationalCostType = (TDDIOperationalCostType)ecast2588;
          this->__isset.OperationalCostType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Vulnerabilities.clear();
            uint32_t _size2589;
            ::apache::thrift::protocol::TType _etype2592;
            xfer += iprot->readListBegin(_etype2592, _size2589);
            this->Vulnerabilities.resize(_size2589);
            uint32_t _i2593;
            for (_i2593 = 0; _i2593 < _size2589; ++_i2593)
            {
              xfer += this->Vulnerabilities[_i2593].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Vulnerabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIVulnerableItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIVulnerableItem");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2594;
    for (_iter2594 = this->KeyValueMaps.begin(); _iter2594 != this->KeyValueMaps.end(); ++_iter2594)
    {
      xfer += (*_iter2594).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialValue", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->FinancialValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialCostType", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->FinancialCostType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OperationalCost", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->OperationalCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OperationalCostType", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->OperationalCostType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Vulnerabilities", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Vulnerabilities.size()));
    std::vector<TDDIVulnerability> ::const_iterator _iter2595;
    for (_iter2595 = this->Vulnerabilities.begin(); _iter2595 != this->Vulnerabilities.end(); ++_iter2595)
    {
      xfer += (*_iter2595).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIVulnerableItem &a, TDDIVulnerableItem &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.FinancialValue, b.FinancialValue);
  swap(a.FinancialCostType, b.FinancialCostType);
  swap(a.OperationalCost, b.OperationalCost);
  swap(a.OperationalCostType, b.OperationalCostType);
  swap(a.Vulnerabilities, b.Vulnerabilities);
  swap(a.__isset, b.__isset);
}

TDDIVulnerableItem::TDDIVulnerableItem(const TDDIVulnerableItem& other2596) {
  Id = other2596.Id;
  Name = other2596.Name;
  Description = other2596.Description;
  KeyValueMaps = other2596.KeyValueMaps;
  FinancialValue = other2596.FinancialValue;
  FinancialCostType = other2596.FinancialCostType;
  OperationalCost = other2596.OperationalCost;
  OperationalCostType = other2596.OperationalCostType;
  Vulnerabilities = other2596.Vulnerabilities;
  __isset = other2596.__isset;
}
TDDIVulnerableItem& TDDIVulnerableItem::operator=(const TDDIVulnerableItem& other2597) {
  Id = other2597.Id;
  Name = other2597.Name;
  Description = other2597.Description;
  KeyValueMaps = other2597.KeyValueMaps;
  FinancialValue = other2597.FinancialValue;
  FinancialCostType = other2597.FinancialCostType;
  OperationalCost = other2597.OperationalCost;
  OperationalCostType = other2597.OperationalCostType;
  Vulnerabilities = other2597.Vulnerabilities;
  __isset = other2597.__isset;
  return *this;
}
void TDDIVulnerableItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIVulnerableItem(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "FinancialValue=" << to_string(FinancialValue);
  out << ", " << "FinancialCostType=" << to_string(FinancialCostType);
  out << ", " << "OperationalCost=" << to_string(OperationalCost);
  out << ", " << "OperationalCostType=" << to_string(OperationalCostType);
  out << ", " << "Vulnerabilities=" << to_string(Vulnerabilities);
  out << ")";
}


TDDIAbstractAssetUnion::~TDDIAbstractAssetUnion() throw() {
}


void TDDIAbstractAssetUnion::__set_Asset(::apache::thrift::stdcxx::shared_ptr<TDDIAsset> val) {
  this->Asset = val;
__isset.Asset = true;
}

void TDDIAbstractAssetUnion::__set_VulnerableItem(::apache::thrift::stdcxx::shared_ptr<TDDIVulnerableItem> val) {
  this->VulnerableItem = val;
__isset.VulnerableItem = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssetUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAssetUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Asset) { 
            this->Asset = ::apache::thrift::stdcxx::shared_ptr<TDDIAsset>(new TDDIAsset);
          }
          xfer += this->Asset->read(iprot);
          bool wasSet = false;
          if (this->Asset->__isset.Id) { wasSet = true; }
          if (this->Asset->__isset.Name) { wasSet = true; }
          if (this->Asset->__isset.Description) { wasSet = true; }
          if (this->Asset->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Asset->__isset.FinancialValue) { wasSet = true; }
          if (this->Asset->__isset.FinancialCostType) { wasSet = true; }
          if (this->Asset->__isset.OperationalCost) { wasSet = true; }
          if (this->Asset->__isset.OperationalCostType) { wasSet = true; }
          if (!wasSet) { this->Asset.reset(); }
          this->__isset.Asset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->VulnerableItem) { 
            this->VulnerableItem = ::apache::thrift::stdcxx::shared_ptr<TDDIVulnerableItem>(new TDDIVulnerableItem);
          }
          xfer += this->VulnerableItem->read(iprot);
          bool wasSet = false;
          if (this->VulnerableItem->__isset.Id) { wasSet = true; }
          if (this->VulnerableItem->__isset.Name) { wasSet = true; }
          if (this->VulnerableItem->__isset.Description) { wasSet = true; }
          if (this->VulnerableItem->__isset.KeyValueMaps) { wasSet = true; }
          if (this->VulnerableItem->__isset.FinancialValue) { wasSet = true; }
          if (this->VulnerableItem->__isset.FinancialCostType) { wasSet = true; }
          if (this->VulnerableItem->__isset.OperationalCost) { wasSet = true; }
          if (this->VulnerableItem->__isset.OperationalCostType) { wasSet = true; }
          if (this->VulnerableItem->__isset.Vulnerabilities) { wasSet = true; }
          if (!wasSet) { this->VulnerableItem.reset(); }
          this->__isset.VulnerableItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAssetUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAssetUnion");

  if (this->__isset.Asset) {
    xfer += oprot->writeFieldBegin("Asset", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->Asset) {
      xfer += this->Asset->write(oprot); 
    } else {oprot->writeStructBegin("TDDIAsset"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.VulnerableItem) {
    xfer += oprot->writeFieldBegin("VulnerableItem", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->VulnerableItem) {
      xfer += this->VulnerableItem->write(oprot); 
    } else {oprot->writeStructBegin("TDDIVulnerableItem"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAssetUnion &a, TDDIAbstractAssetUnion &b) {
  using ::std::swap;
  swap(a.Asset, b.Asset);
  swap(a.VulnerableItem, b.VulnerableItem);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAssetUnion::TDDIAbstractAssetUnion(const TDDIAbstractAssetUnion& other2598) {
  Asset = other2598.Asset;
  VulnerableItem = other2598.VulnerableItem;
  __isset = other2598.__isset;
}
TDDIAbstractAssetUnion& TDDIAbstractAssetUnion::operator=(const TDDIAbstractAssetUnion& other2599) {
  Asset = other2599.Asset;
  VulnerableItem = other2599.VulnerableItem;
  __isset = other2599.__isset;
  return *this;
}
void TDDIAbstractAssetUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAssetUnion(";
  out << "Asset="; (__isset.Asset ? (out << to_string(Asset)) : (out << "<null>"));
  out << ", " << "VulnerableItem="; (__isset.VulnerableItem ? (out << to_string(VulnerableItem)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractAsset::~TDDIAbstractAsset() throw() {
}


void TDDIAbstractAsset::__set_UsedAsset(const TDDIAbstractAssetUnion& val) {
  this->UsedAsset = val;
}

void TDDIAbstractAsset::__set_UsedAssetType(const TDDIAbstractAssetUnionType val) {
  this->UsedAssetType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAsset& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAsset::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedAsset.read(iprot);
          this->__isset.UsedAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2600;
          xfer += iprot->readI32(ecast2600);
          this->UsedAssetType = (TDDIAbstractAssetUnionType)ecast2600;
          this->__isset.UsedAssetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAsset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAsset");

  xfer += oprot->writeFieldBegin("UsedAsset", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedAsset.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedAssetType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedAssetType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAsset &a, TDDIAbstractAsset &b) {
  using ::std::swap;
  swap(a.UsedAsset, b.UsedAsset);
  swap(a.UsedAssetType, b.UsedAssetType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAsset::TDDIAbstractAsset(const TDDIAbstractAsset& other2601) {
  UsedAsset = other2601.UsedAsset;
  UsedAssetType = other2601.UsedAssetType;
  __isset = other2601.__isset;
}
TDDIAbstractAsset& TDDIAbstractAsset::operator=(const TDDIAbstractAsset& other2602) {
  UsedAsset = other2602.UsedAsset;
  UsedAssetType = other2602.UsedAssetType;
  __isset = other2602.__isset;
  return *this;
}
void TDDIAbstractAsset::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAsset(";
  out << "UsedAsset=" << to_string(UsedAsset);
  out << ", " << "UsedAssetType=" << to_string(UsedAssetType);
  out << ")";
}


TDDISecurityControl::~TDDISecurityControl() throw() {
}


void TDDISecurityControl::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISecurityControl::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISecurityControl::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISecurityControl::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISecurityControl::__set_IntrinsicSafety(const std::string& val) {
  this->IntrinsicSafety = val;
}

void TDDISecurityControl::__set_SafeGuard(const std::string& val) {
  this->SafeGuard = val;
}

void TDDISecurityControl::__set_ApplierInformation(const std::string& val) {
  this->ApplierInformation = val;
}

void TDDISecurityControl::__set_RiskAcceptability(const bool val) {
  this->RiskAcceptability = val;
}

void TDDISecurityControl::__set_FurtherAction(const std::string& val) {
  this->FurtherAction = val;
}

void TDDISecurityControl::__set_Source(const std::string& val) {
  this->Source = val;
}

void TDDISecurityControl::__set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val) {
  this->AssuranceLevel = val;
}

void TDDISecurityControl::__set_MeasureType(::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> val) {
  this->MeasureType = val;
}

void TDDISecurityControl::__set_Category(const std::string& val) {
  this->Category = val;
}

void TDDISecurityControl::__set_Type(const TDDISecurityApplicationType val) {
  this->Type = val;
}

void TDDISecurityControl::__set_Vulnerabilities(const std::vector<TDDIVulnerabilityRef> & val) {
  this->Vulnerabilities = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISecurityControl& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISecurityControl::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2603;
            ::apache::thrift::protocol::TType _etype2606;
            xfer += iprot->readListBegin(_etype2606, _size2603);
            this->KeyValueMaps.resize(_size2603);
            uint32_t _i2607;
            for (_i2607 = 0; _i2607 < _size2603; ++_i2607)
            {
              xfer += this->KeyValueMaps[_i2607].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IntrinsicSafety);
          this->__isset.IntrinsicSafety = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SafeGuard);
          this->__isset.SafeGuard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ApplierInformation);
          this->__isset.ApplierInformation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->RiskAcceptability);
          this->__isset.RiskAcceptability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->FurtherAction);
          this->__isset.FurtherAction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Source);
          this->__isset.Source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->AssuranceLevel) { 
            this->AssuranceLevel = ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel>(new TDDIAssuranceLevel);
          }
          xfer += this->AssuranceLevel->read(iprot);
          bool wasSet = false;
          if (this->AssuranceLevel->__isset.Id) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Name) { wasSet = true; }
          if (this->AssuranceLevel->__isset.Description) { wasSet = true; }
          if (this->AssuranceLevel->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->AssuranceLevel.reset(); }
          this->__isset.AssuranceLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->MeasureType) { 
            this->MeasureType = ::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType>(new TDDIMeasureType);
          }
          xfer += this->MeasureType->read(iprot);
          bool wasSet = false;
          if (this->MeasureType->__isset.Id) { wasSet = true; }
          if (this->MeasureType->__isset.Name) { wasSet = true; }
          if (this->MeasureType->__isset.Description) { wasSet = true; }
          if (this->MeasureType->__isset.KeyValueMaps) { wasSet = true; }
          if (!wasSet) { this->MeasureType.reset(); }
          this->__isset.MeasureType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Category);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2608;
          xfer += iprot->readI32(ecast2608);
          this->Type = (TDDISecurityApplicationType)ecast2608;
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Vulnerabilities.clear();
            uint32_t _size2609;
            ::apache::thrift::protocol::TType _etype2612;
            xfer += iprot->readListBegin(_etype2612, _size2609);
            this->Vulnerabilities.resize(_size2609);
            uint32_t _i2613;
            for (_i2613 = 0; _i2613 < _size2609; ++_i2613)
            {
              xfer += this->Vulnerabilities[_i2613].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Vulnerabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISecurityControl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISecurityControl");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2614;
    for (_iter2614 = this->KeyValueMaps.begin(); _iter2614 != this->KeyValueMaps.end(); ++_iter2614)
    {
      xfer += (*_iter2614).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IntrinsicSafety", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->IntrinsicSafety);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SafeGuard", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->SafeGuard);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ApplierInformation", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ApplierInformation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RiskAcceptability", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->RiskAcceptability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FurtherAction", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->FurtherAction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->Source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AssuranceLevel", ::apache::thrift::protocol::T_STRUCT, 11);
  if (this->AssuranceLevel) {
    xfer += this->AssuranceLevel->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAssuranceLevel"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("MeasureType", ::apache::thrift::protocol::T_STRUCT, 12);
  if (this->MeasureType) {
    xfer += this->MeasureType->write(oprot); 
  } else {oprot->writeStructBegin("TDDIMeasureType"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->Category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Vulnerabilities", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Vulnerabilities.size()));
    std::vector<TDDIVulnerabilityRef> ::const_iterator _iter2615;
    for (_iter2615 = this->Vulnerabilities.begin(); _iter2615 != this->Vulnerabilities.end(); ++_iter2615)
    {
      xfer += (*_iter2615).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISecurityControl &a, TDDISecurityControl &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.IntrinsicSafety, b.IntrinsicSafety);
  swap(a.SafeGuard, b.SafeGuard);
  swap(a.ApplierInformation, b.ApplierInformation);
  swap(a.RiskAcceptability, b.RiskAcceptability);
  swap(a.FurtherAction, b.FurtherAction);
  swap(a.Source, b.Source);
  swap(a.AssuranceLevel, b.AssuranceLevel);
  swap(a.MeasureType, b.MeasureType);
  swap(a.Category, b.Category);
  swap(a.Type, b.Type);
  swap(a.Vulnerabilities, b.Vulnerabilities);
  swap(a.__isset, b.__isset);
}

TDDISecurityControl::TDDISecurityControl(const TDDISecurityControl& other2616) {
  Id = other2616.Id;
  Name = other2616.Name;
  Description = other2616.Description;
  KeyValueMaps = other2616.KeyValueMaps;
  IntrinsicSafety = other2616.IntrinsicSafety;
  SafeGuard = other2616.SafeGuard;
  ApplierInformation = other2616.ApplierInformation;
  RiskAcceptability = other2616.RiskAcceptability;
  FurtherAction = other2616.FurtherAction;
  Source = other2616.Source;
  AssuranceLevel = other2616.AssuranceLevel;
  MeasureType = other2616.MeasureType;
  Category = other2616.Category;
  Type = other2616.Type;
  Vulnerabilities = other2616.Vulnerabilities;
  __isset = other2616.__isset;
}
TDDISecurityControl& TDDISecurityControl::operator=(const TDDISecurityControl& other2617) {
  Id = other2617.Id;
  Name = other2617.Name;
  Description = other2617.Description;
  KeyValueMaps = other2617.KeyValueMaps;
  IntrinsicSafety = other2617.IntrinsicSafety;
  SafeGuard = other2617.SafeGuard;
  ApplierInformation = other2617.ApplierInformation;
  RiskAcceptability = other2617.RiskAcceptability;
  FurtherAction = other2617.FurtherAction;
  Source = other2617.Source;
  AssuranceLevel = other2617.AssuranceLevel;
  MeasureType = other2617.MeasureType;
  Category = other2617.Category;
  Type = other2617.Type;
  Vulnerabilities = other2617.Vulnerabilities;
  __isset = other2617.__isset;
  return *this;
}
void TDDISecurityControl::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISecurityControl(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "IntrinsicSafety=" << to_string(IntrinsicSafety);
  out << ", " << "SafeGuard=" << to_string(SafeGuard);
  out << ", " << "ApplierInformation=" << to_string(ApplierInformation);
  out << ", " << "RiskAcceptability=" << to_string(RiskAcceptability);
  out << ", " << "FurtherAction=" << to_string(FurtherAction);
  out << ", " << "Source=" << to_string(Source);
  out << ", " << "AssuranceLevel=" << to_string(AssuranceLevel);
  out << ", " << "MeasureType=" << to_string(MeasureType);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "Vulnerabilities=" << to_string(Vulnerabilities);
  out << ")";
}


TDDISecurityCapability::~TDDISecurityCapability() throw() {
}


void TDDISecurityCapability::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISecurityCapability::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISecurityCapability::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISecurityCapability::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISecurityCapability::__set_Category(const std::string& val) {
  this->Category = val;
}

void TDDISecurityCapability::__set_Type(const TDDISecurityApplicationType val) {
  this->Type = val;
}

void TDDISecurityCapability::__set_ImplementedBy(const std::vector<TDDISecurityControlRef> & val) {
  this->ImplementedBy = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISecurityCapability& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISecurityCapability::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2618;
            ::apache::thrift::protocol::TType _etype2621;
            xfer += iprot->readListBegin(_etype2621, _size2618);
            this->KeyValueMaps.resize(_size2618);
            uint32_t _i2622;
            for (_i2622 = 0; _i2622 < _size2618; ++_i2622)
            {
              xfer += this->KeyValueMaps[_i2622].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Category);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2623;
          xfer += iprot->readI32(ecast2623);
          this->Type = (TDDISecurityApplicationType)ecast2623;
          this->__isset.Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ImplementedBy.clear();
            uint32_t _size2624;
            ::apache::thrift::protocol::TType _etype2627;
            xfer += iprot->readListBegin(_etype2627, _size2624);
            this->ImplementedBy.resize(_size2624);
            uint32_t _i2628;
            for (_i2628 = 0; _i2628 < _size2624; ++_i2628)
            {
              xfer += this->ImplementedBy[_i2628].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ImplementedBy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISecurityCapability::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISecurityCapability");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2629;
    for (_iter2629 = this->KeyValueMaps.begin(); _iter2629 != this->KeyValueMaps.end(); ++_iter2629)
    {
      xfer += (*_iter2629).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImplementedBy", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ImplementedBy.size()));
    std::vector<TDDISecurityControlRef> ::const_iterator _iter2630;
    for (_iter2630 = this->ImplementedBy.begin(); _iter2630 != this->ImplementedBy.end(); ++_iter2630)
    {
      xfer += (*_iter2630).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISecurityCapability &a, TDDISecurityCapability &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Category, b.Category);
  swap(a.Type, b.Type);
  swap(a.ImplementedBy, b.ImplementedBy);
  swap(a.__isset, b.__isset);
}

TDDISecurityCapability::TDDISecurityCapability(const TDDISecurityCapability& other2631) {
  Id = other2631.Id;
  Name = other2631.Name;
  Description = other2631.Description;
  KeyValueMaps = other2631.KeyValueMaps;
  Category = other2631.Category;
  Type = other2631.Type;
  ImplementedBy = other2631.ImplementedBy;
  __isset = other2631.__isset;
}
TDDISecurityCapability& TDDISecurityCapability::operator=(const TDDISecurityCapability& other2632) {
  Id = other2632.Id;
  Name = other2632.Name;
  Description = other2632.Description;
  KeyValueMaps = other2632.KeyValueMaps;
  Category = other2632.Category;
  Type = other2632.Type;
  ImplementedBy = other2632.ImplementedBy;
  __isset = other2632.__isset;
  return *this;
}
void TDDISecurityCapability::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISecurityCapability(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "Type=" << to_string(Type);
  out << ", " << "ImplementedBy=" << to_string(ImplementedBy);
  out << ")";
}


TDDISecurityRisk::~TDDISecurityRisk() throw() {
}


void TDDISecurityRisk::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDISecurityRisk::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDISecurityRisk::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDISecurityRisk::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDISecurityRisk::__set_Likelihood(const double val) {
  this->Likelihood = val;
}

void TDDISecurityRisk::__set_ImpactAsset(const std::string& val) {
  this->ImpactAsset = val;
}

void TDDISecurityRisk::__set_ImpactIndividuals(const std::string& val) {
  this->ImpactIndividuals = val;
}

void TDDISecurityRisk::__set_ImpactBusiness(const std::string& val) {
  this->ImpactBusiness = val;
}

void TDDISecurityRisk::__set_AttackerGoals(const std::vector<TDDIAttackerGoalRef> & val) {
  this->AttackerGoals = val;
}
std::ostream& operator<<(std::ostream& out, const TDDISecurityRisk& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDISecurityRisk::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2633;
            ::apache::thrift::protocol::TType _etype2636;
            xfer += iprot->readListBegin(_etype2636, _size2633);
            this->KeyValueMaps.resize(_size2633);
            uint32_t _i2637;
            for (_i2637 = 0; _i2637 < _size2633; ++_i2637)
            {
              xfer += this->KeyValueMaps[_i2637].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Likelihood);
          this->__isset.Likelihood = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ImpactAsset);
          this->__isset.ImpactAsset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ImpactIndividuals);
          this->__isset.ImpactIndividuals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ImpactBusiness);
          this->__isset.ImpactBusiness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AttackerGoals.clear();
            uint32_t _size2638;
            ::apache::thrift::protocol::TType _etype2641;
            xfer += iprot->readListBegin(_etype2641, _size2638);
            this->AttackerGoals.resize(_size2638);
            uint32_t _i2642;
            for (_i2642 = 0; _i2642 < _size2638; ++_i2642)
            {
              xfer += this->AttackerGoals[_i2642].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AttackerGoals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDISecurityRisk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDISecurityRisk");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2643;
    for (_iter2643 = this->KeyValueMaps.begin(); _iter2643 != this->KeyValueMaps.end(); ++_iter2643)
    {
      xfer += (*_iter2643).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Likelihood", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->Likelihood);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImpactAsset", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->ImpactAsset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImpactIndividuals", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ImpactIndividuals);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImpactBusiness", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ImpactBusiness);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AttackerGoals", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AttackerGoals.size()));
    std::vector<TDDIAttackerGoalRef> ::const_iterator _iter2644;
    for (_iter2644 = this->AttackerGoals.begin(); _iter2644 != this->AttackerGoals.end(); ++_iter2644)
    {
      xfer += (*_iter2644).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDISecurityRisk &a, TDDISecurityRisk &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Likelihood, b.Likelihood);
  swap(a.ImpactAsset, b.ImpactAsset);
  swap(a.ImpactIndividuals, b.ImpactIndividuals);
  swap(a.ImpactBusiness, b.ImpactBusiness);
  swap(a.AttackerGoals, b.AttackerGoals);
  swap(a.__isset, b.__isset);
}

TDDISecurityRisk::TDDISecurityRisk(const TDDISecurityRisk& other2645) {
  Id = other2645.Id;
  Name = other2645.Name;
  Description = other2645.Description;
  KeyValueMaps = other2645.KeyValueMaps;
  Likelihood = other2645.Likelihood;
  ImpactAsset = other2645.ImpactAsset;
  ImpactIndividuals = other2645.ImpactIndividuals;
  ImpactBusiness = other2645.ImpactBusiness;
  AttackerGoals = other2645.AttackerGoals;
  __isset = other2645.__isset;
}
TDDISecurityRisk& TDDISecurityRisk::operator=(const TDDISecurityRisk& other2646) {
  Id = other2646.Id;
  Name = other2646.Name;
  Description = other2646.Description;
  KeyValueMaps = other2646.KeyValueMaps;
  Likelihood = other2646.Likelihood;
  ImpactAsset = other2646.ImpactAsset;
  ImpactIndividuals = other2646.ImpactIndividuals;
  ImpactBusiness = other2646.ImpactBusiness;
  AttackerGoals = other2646.AttackerGoals;
  __isset = other2646.__isset;
  return *this;
}
void TDDISecurityRisk::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDISecurityRisk(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Likelihood=" << to_string(Likelihood);
  out << ", " << "ImpactAsset=" << to_string(ImpactAsset);
  out << ", " << "ImpactIndividuals=" << to_string(ImpactIndividuals);
  out << ", " << "ImpactBusiness=" << to_string(ImpactBusiness);
  out << ", " << "AttackerGoals=" << to_string(AttackerGoals);
  out << ")";
}


TDDIAttack::~TDDIAttack() throw() {
}


void TDDIAttack::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIAttack::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIAttack::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIAttack::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIAttack::__set_Category(const std::string& val) {
  this->Category = val;
}

void TDDIAttack::__set_FinancialCost(const double val) {
  this->FinancialCost = val;
}

void TDDIAttack::__set_FinancialCostType(const TDDIFinancialCostType val) {
  this->FinancialCostType = val;
}

void TDDIAttack::__set_TimeRequired(const double val) {
  this->TimeRequired = val;
}

void TDDIAttack::__set_TimeUnit(const TDDITimeUnit val) {
  this->TimeUnit = val;
}

void TDDIAttack::__set_Difficulty(const std::string& val) {
  this->Difficulty = val;
}

void TDDIAttack::__set_Detectability(const std::string& val) {
  this->Detectability = val;
}

void TDDIAttack::__set_ExploitedVulnerabilities(const std::vector<TDDIVulnerabilityRef> & val) {
  this->ExploitedVulnerabilities = val;
}

void TDDIAttack::__set_Violations(const std::vector<TDDISecurityViolationRef> & val) {
  this->Violations = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAttack& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAttack::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2647;
            ::apache::thrift::protocol::TType _etype2650;
            xfer += iprot->readListBegin(_etype2650, _size2647);
            this->KeyValueMaps.resize(_size2647);
            uint32_t _i2651;
            for (_i2651 = 0; _i2651 < _size2647; ++_i2651)
            {
              xfer += this->KeyValueMaps[_i2651].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Category);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FinancialCost);
          this->__isset.FinancialCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2652;
          xfer += iprot->readI32(ecast2652);
          this->FinancialCostType = (TDDIFinancialCostType)ecast2652;
          this->__isset.FinancialCostType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TimeRequired);
          this->__isset.TimeRequired = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2653;
          xfer += iprot->readI32(ecast2653);
          this->TimeUnit = (TDDITimeUnit)ecast2653;
          this->__isset.TimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Difficulty);
          this->__isset.Difficulty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Detectability);
          this->__isset.Detectability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ExploitedVulnerabilities.clear();
            uint32_t _size2654;
            ::apache::thrift::protocol::TType _etype2657;
            xfer += iprot->readListBegin(_etype2657, _size2654);
            this->ExploitedVulnerabilities.resize(_size2654);
            uint32_t _i2658;
            for (_i2658 = 0; _i2658 < _size2654; ++_i2658)
            {
              xfer += this->ExploitedVulnerabilities[_i2658].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ExploitedVulnerabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Violations.clear();
            uint32_t _size2659;
            ::apache::thrift::protocol::TType _etype2662;
            xfer += iprot->readListBegin(_etype2662, _size2659);
            this->Violations.resize(_size2659);
            uint32_t _i2663;
            for (_i2663 = 0; _i2663 < _size2659; ++_i2663)
            {
              xfer += this->Violations[_i2663].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Violations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAttack::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAttack");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2664;
    for (_iter2664 = this->KeyValueMaps.begin(); _iter2664 != this->KeyValueMaps.end(); ++_iter2664)
    {
      xfer += (*_iter2664).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialCost", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->FinancialCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialCostType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->FinancialCostType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TimeRequired", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->TimeRequired);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TimeUnit", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->TimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Difficulty", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->Difficulty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Detectability", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->Detectability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExploitedVulnerabilities", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ExploitedVulnerabilities.size()));
    std::vector<TDDIVulnerabilityRef> ::const_iterator _iter2665;
    for (_iter2665 = this->ExploitedVulnerabilities.begin(); _iter2665 != this->ExploitedVulnerabilities.end(); ++_iter2665)
    {
      xfer += (*_iter2665).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Violations", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Violations.size()));
    std::vector<TDDISecurityViolationRef> ::const_iterator _iter2666;
    for (_iter2666 = this->Violations.begin(); _iter2666 != this->Violations.end(); ++_iter2666)
    {
      xfer += (*_iter2666).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAttack &a, TDDIAttack &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Category, b.Category);
  swap(a.FinancialCost, b.FinancialCost);
  swap(a.FinancialCostType, b.FinancialCostType);
  swap(a.TimeRequired, b.TimeRequired);
  swap(a.TimeUnit, b.TimeUnit);
  swap(a.Difficulty, b.Difficulty);
  swap(a.Detectability, b.Detectability);
  swap(a.ExploitedVulnerabilities, b.ExploitedVulnerabilities);
  swap(a.Violations, b.Violations);
  swap(a.__isset, b.__isset);
}

TDDIAttack::TDDIAttack(const TDDIAttack& other2667) {
  Id = other2667.Id;
  Name = other2667.Name;
  Description = other2667.Description;
  KeyValueMaps = other2667.KeyValueMaps;
  Category = other2667.Category;
  FinancialCost = other2667.FinancialCost;
  FinancialCostType = other2667.FinancialCostType;
  TimeRequired = other2667.TimeRequired;
  TimeUnit = other2667.TimeUnit;
  Difficulty = other2667.Difficulty;
  Detectability = other2667.Detectability;
  ExploitedVulnerabilities = other2667.ExploitedVulnerabilities;
  Violations = other2667.Violations;
  __isset = other2667.__isset;
}
TDDIAttack& TDDIAttack::operator=(const TDDIAttack& other2668) {
  Id = other2668.Id;
  Name = other2668.Name;
  Description = other2668.Description;
  KeyValueMaps = other2668.KeyValueMaps;
  Category = other2668.Category;
  FinancialCost = other2668.FinancialCost;
  FinancialCostType = other2668.FinancialCostType;
  TimeRequired = other2668.TimeRequired;
  TimeUnit = other2668.TimeUnit;
  Difficulty = other2668.Difficulty;
  Detectability = other2668.Detectability;
  ExploitedVulnerabilities = other2668.ExploitedVulnerabilities;
  Violations = other2668.Violations;
  __isset = other2668.__isset;
  return *this;
}
void TDDIAttack::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAttack(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "FinancialCost=" << to_string(FinancialCost);
  out << ", " << "FinancialCostType=" << to_string(FinancialCostType);
  out << ", " << "TimeRequired=" << to_string(TimeRequired);
  out << ", " << "TimeUnit=" << to_string(TimeUnit);
  out << ", " << "Difficulty=" << to_string(Difficulty);
  out << ", " << "Detectability=" << to_string(Detectability);
  out << ", " << "ExploitedVulnerabilities=" << to_string(ExploitedVulnerabilities);
  out << ", " << "Violations=" << to_string(Violations);
  out << ")";
}


TDDIAction::~TDDIAction() throw() {
}


void TDDIAction::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIAction::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIAction::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIAction::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIAction::__set_Category(const std::string& val) {
  this->Category = val;
}

void TDDIAction::__set_FinancialCost(const double val) {
  this->FinancialCost = val;
}

void TDDIAction::__set_FinancialCostType(const TDDIFinancialCostType val) {
  this->FinancialCostType = val;
}

void TDDIAction::__set_TimeRequired(const double val) {
  this->TimeRequired = val;
}

void TDDIAction::__set_TimeUnit(const TDDITimeUnit val) {
  this->TimeUnit = val;
}

void TDDIAction::__set_Difficulty(const std::string& val) {
  this->Difficulty = val;
}

void TDDIAction::__set_Detectability(const std::string& val) {
  this->Detectability = val;
}

void TDDIAction::__set_ExploitedVulnerabilities(const std::vector<TDDIVulnerabilityRef> & val) {
  this->ExploitedVulnerabilities = val;
}

void TDDIAction::__set_Violations(const std::vector<TDDISecurityViolationRef> & val) {
  this->Violations = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2669;
            ::apache::thrift::protocol::TType _etype2672;
            xfer += iprot->readListBegin(_etype2672, _size2669);
            this->KeyValueMaps.resize(_size2669);
            uint32_t _i2673;
            for (_i2673 = 0; _i2673 < _size2669; ++_i2673)
            {
              xfer += this->KeyValueMaps[_i2673].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Category);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FinancialCost);
          this->__isset.FinancialCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2674;
          xfer += iprot->readI32(ecast2674);
          this->FinancialCostType = (TDDIFinancialCostType)ecast2674;
          this->__isset.FinancialCostType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TimeRequired);
          this->__isset.TimeRequired = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2675;
          xfer += iprot->readI32(ecast2675);
          this->TimeUnit = (TDDITimeUnit)ecast2675;
          this->__isset.TimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Difficulty);
          this->__isset.Difficulty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Detectability);
          this->__isset.Detectability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ExploitedVulnerabilities.clear();
            uint32_t _size2676;
            ::apache::thrift::protocol::TType _etype2679;
            xfer += iprot->readListBegin(_etype2679, _size2676);
            this->ExploitedVulnerabilities.resize(_size2676);
            uint32_t _i2680;
            for (_i2680 = 0; _i2680 < _size2676; ++_i2680)
            {
              xfer += this->ExploitedVulnerabilities[_i2680].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ExploitedVulnerabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Violations.clear();
            uint32_t _size2681;
            ::apache::thrift::protocol::TType _etype2684;
            xfer += iprot->readListBegin(_etype2684, _size2681);
            this->Violations.resize(_size2681);
            uint32_t _i2685;
            for (_i2685 = 0; _i2685 < _size2681; ++_i2685)
            {
              xfer += this->Violations[_i2685].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Violations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAction");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2686;
    for (_iter2686 = this->KeyValueMaps.begin(); _iter2686 != this->KeyValueMaps.end(); ++_iter2686)
    {
      xfer += (*_iter2686).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialCost", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->FinancialCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialCostType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->FinancialCostType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TimeRequired", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->TimeRequired);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TimeUnit", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->TimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Difficulty", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->Difficulty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Detectability", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->Detectability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExploitedVulnerabilities", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ExploitedVulnerabilities.size()));
    std::vector<TDDIVulnerabilityRef> ::const_iterator _iter2687;
    for (_iter2687 = this->ExploitedVulnerabilities.begin(); _iter2687 != this->ExploitedVulnerabilities.end(); ++_iter2687)
    {
      xfer += (*_iter2687).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Violations", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Violations.size()));
    std::vector<TDDISecurityViolationRef> ::const_iterator _iter2688;
    for (_iter2688 = this->Violations.begin(); _iter2688 != this->Violations.end(); ++_iter2688)
    {
      xfer += (*_iter2688).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAction &a, TDDIAction &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Category, b.Category);
  swap(a.FinancialCost, b.FinancialCost);
  swap(a.FinancialCostType, b.FinancialCostType);
  swap(a.TimeRequired, b.TimeRequired);
  swap(a.TimeUnit, b.TimeUnit);
  swap(a.Difficulty, b.Difficulty);
  swap(a.Detectability, b.Detectability);
  swap(a.ExploitedVulnerabilities, b.ExploitedVulnerabilities);
  swap(a.Violations, b.Violations);
  swap(a.__isset, b.__isset);
}

TDDIAction::TDDIAction(const TDDIAction& other2689) {
  Id = other2689.Id;
  Name = other2689.Name;
  Description = other2689.Description;
  KeyValueMaps = other2689.KeyValueMaps;
  Category = other2689.Category;
  FinancialCost = other2689.FinancialCost;
  FinancialCostType = other2689.FinancialCostType;
  TimeRequired = other2689.TimeRequired;
  TimeUnit = other2689.TimeUnit;
  Difficulty = other2689.Difficulty;
  Detectability = other2689.Detectability;
  ExploitedVulnerabilities = other2689.ExploitedVulnerabilities;
  Violations = other2689.Violations;
  __isset = other2689.__isset;
}
TDDIAction& TDDIAction::operator=(const TDDIAction& other2690) {
  Id = other2690.Id;
  Name = other2690.Name;
  Description = other2690.Description;
  KeyValueMaps = other2690.KeyValueMaps;
  Category = other2690.Category;
  FinancialCost = other2690.FinancialCost;
  FinancialCostType = other2690.FinancialCostType;
  TimeRequired = other2690.TimeRequired;
  TimeUnit = other2690.TimeUnit;
  Difficulty = other2690.Difficulty;
  Detectability = other2690.Detectability;
  ExploitedVulnerabilities = other2690.ExploitedVulnerabilities;
  Violations = other2690.Violations;
  __isset = other2690.__isset;
  return *this;
}
void TDDIAction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAction(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "FinancialCost=" << to_string(FinancialCost);
  out << ", " << "FinancialCostType=" << to_string(FinancialCostType);
  out << ", " << "TimeRequired=" << to_string(TimeRequired);
  out << ", " << "TimeUnit=" << to_string(TimeUnit);
  out << ", " << "Difficulty=" << to_string(Difficulty);
  out << ", " << "Detectability=" << to_string(Detectability);
  out << ", " << "ExploitedVulnerabilities=" << to_string(ExploitedVulnerabilities);
  out << ", " << "Violations=" << to_string(Violations);
  out << ")";
}


TDDIPayload::~TDDIPayload() throw() {
}


void TDDIPayload::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIPayload::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIPayload::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIPayload::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIPayload::__set_Category(const std::string& val) {
  this->Category = val;
}

void TDDIPayload::__set_FinancialCost(const double val) {
  this->FinancialCost = val;
}

void TDDIPayload::__set_FinancialCostType(const TDDIFinancialCostType val) {
  this->FinancialCostType = val;
}

void TDDIPayload::__set_TimeRequired(const double val) {
  this->TimeRequired = val;
}

void TDDIPayload::__set_TimeUnit(const TDDITimeUnit val) {
  this->TimeUnit = val;
}

void TDDIPayload::__set_Difficulty(const std::string& val) {
  this->Difficulty = val;
}

void TDDIPayload::__set_Detectability(const std::string& val) {
  this->Detectability = val;
}

void TDDIPayload::__set_ExploitedVulnerabilities(const std::vector<TDDIVulnerabilityRef> & val) {
  this->ExploitedVulnerabilities = val;
}

void TDDIPayload::__set_Violations(const std::vector<TDDISecurityViolationRef> & val) {
  this->Violations = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIPayload& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIPayload::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2691;
            ::apache::thrift::protocol::TType _etype2694;
            xfer += iprot->readListBegin(_etype2694, _size2691);
            this->KeyValueMaps.resize(_size2691);
            uint32_t _i2695;
            for (_i2695 = 0; _i2695 < _size2691; ++_i2695)
            {
              xfer += this->KeyValueMaps[_i2695].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Category);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->FinancialCost);
          this->__isset.FinancialCost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2696;
          xfer += iprot->readI32(ecast2696);
          this->FinancialCostType = (TDDIFinancialCostType)ecast2696;
          this->__isset.FinancialCostType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->TimeRequired);
          this->__isset.TimeRequired = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2697;
          xfer += iprot->readI32(ecast2697);
          this->TimeUnit = (TDDITimeUnit)ecast2697;
          this->__isset.TimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Difficulty);
          this->__isset.Difficulty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Detectability);
          this->__isset.Detectability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ExploitedVulnerabilities.clear();
            uint32_t _size2698;
            ::apache::thrift::protocol::TType _etype2701;
            xfer += iprot->readListBegin(_etype2701, _size2698);
            this->ExploitedVulnerabilities.resize(_size2698);
            uint32_t _i2702;
            for (_i2702 = 0; _i2702 < _size2698; ++_i2702)
            {
              xfer += this->ExploitedVulnerabilities[_i2702].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ExploitedVulnerabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Violations.clear();
            uint32_t _size2703;
            ::apache::thrift::protocol::TType _etype2706;
            xfer += iprot->readListBegin(_etype2706, _size2703);
            this->Violations.resize(_size2703);
            uint32_t _i2707;
            for (_i2707 = 0; _i2707 < _size2703; ++_i2707)
            {
              xfer += this->Violations[_i2707].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Violations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIPayload::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIPayload");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2708;
    for (_iter2708 = this->KeyValueMaps.begin(); _iter2708 != this->KeyValueMaps.end(); ++_iter2708)
    {
      xfer += (*_iter2708).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialCost", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->FinancialCost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("FinancialCostType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->FinancialCostType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TimeRequired", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->TimeRequired);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("TimeUnit", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->TimeUnit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Difficulty", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->Difficulty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Detectability", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->Detectability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExploitedVulnerabilities", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ExploitedVulnerabilities.size()));
    std::vector<TDDIVulnerabilityRef> ::const_iterator _iter2709;
    for (_iter2709 = this->ExploitedVulnerabilities.begin(); _iter2709 != this->ExploitedVulnerabilities.end(); ++_iter2709)
    {
      xfer += (*_iter2709).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Violations", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Violations.size()));
    std::vector<TDDISecurityViolationRef> ::const_iterator _iter2710;
    for (_iter2710 = this->Violations.begin(); _iter2710 != this->Violations.end(); ++_iter2710)
    {
      xfer += (*_iter2710).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIPayload &a, TDDIPayload &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Category, b.Category);
  swap(a.FinancialCost, b.FinancialCost);
  swap(a.FinancialCostType, b.FinancialCostType);
  swap(a.TimeRequired, b.TimeRequired);
  swap(a.TimeUnit, b.TimeUnit);
  swap(a.Difficulty, b.Difficulty);
  swap(a.Detectability, b.Detectability);
  swap(a.ExploitedVulnerabilities, b.ExploitedVulnerabilities);
  swap(a.Violations, b.Violations);
  swap(a.__isset, b.__isset);
}

TDDIPayload::TDDIPayload(const TDDIPayload& other2711) {
  Id = other2711.Id;
  Name = other2711.Name;
  Description = other2711.Description;
  KeyValueMaps = other2711.KeyValueMaps;
  Category = other2711.Category;
  FinancialCost = other2711.FinancialCost;
  FinancialCostType = other2711.FinancialCostType;
  TimeRequired = other2711.TimeRequired;
  TimeUnit = other2711.TimeUnit;
  Difficulty = other2711.Difficulty;
  Detectability = other2711.Detectability;
  ExploitedVulnerabilities = other2711.ExploitedVulnerabilities;
  Violations = other2711.Violations;
  __isset = other2711.__isset;
}
TDDIPayload& TDDIPayload::operator=(const TDDIPayload& other2712) {
  Id = other2712.Id;
  Name = other2712.Name;
  Description = other2712.Description;
  KeyValueMaps = other2712.KeyValueMaps;
  Category = other2712.Category;
  FinancialCost = other2712.FinancialCost;
  FinancialCostType = other2712.FinancialCostType;
  TimeRequired = other2712.TimeRequired;
  TimeUnit = other2712.TimeUnit;
  Difficulty = other2712.Difficulty;
  Detectability = other2712.Detectability;
  ExploitedVulnerabilities = other2712.ExploitedVulnerabilities;
  Violations = other2712.Violations;
  __isset = other2712.__isset;
  return *this;
}
void TDDIPayload::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIPayload(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "FinancialCost=" << to_string(FinancialCost);
  out << ", " << "FinancialCostType=" << to_string(FinancialCostType);
  out << ", " << "TimeRequired=" << to_string(TimeRequired);
  out << ", " << "TimeUnit=" << to_string(TimeUnit);
  out << ", " << "Difficulty=" << to_string(Difficulty);
  out << ", " << "Detectability=" << to_string(Detectability);
  out << ", " << "ExploitedVulnerabilities=" << to_string(ExploitedVulnerabilities);
  out << ", " << "Violations=" << to_string(Violations);
  out << ")";
}


TDDIAbstractAttackUnion::~TDDIAbstractAttackUnion() throw() {
}


void TDDIAbstractAttackUnion::__set_Attack(::apache::thrift::stdcxx::shared_ptr<TDDIAttack> val) {
  this->Attack = val;
}

void TDDIAbstractAttackUnion::__set_Action(::apache::thrift::stdcxx::shared_ptr<TDDIAction> val) {
  this->Action = val;
}

void TDDIAbstractAttackUnion::__set_Payload(::apache::thrift::stdcxx::shared_ptr<TDDIPayload> val) {
  this->Payload = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAttackUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAttackUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Attack) { 
            this->Attack = ::apache::thrift::stdcxx::shared_ptr<TDDIAttack>(new TDDIAttack);
          }
          xfer += this->Attack->read(iprot);
          bool wasSet = false;
          if (this->Attack->__isset.Id) { wasSet = true; }
          if (this->Attack->__isset.Name) { wasSet = true; }
          if (this->Attack->__isset.Description) { wasSet = true; }
          if (this->Attack->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Attack->__isset.Category) { wasSet = true; }
          if (this->Attack->__isset.FinancialCost) { wasSet = true; }
          if (this->Attack->__isset.FinancialCostType) { wasSet = true; }
          if (this->Attack->__isset.TimeRequired) { wasSet = true; }
          if (this->Attack->__isset.TimeUnit) { wasSet = true; }
          if (this->Attack->__isset.Difficulty) { wasSet = true; }
          if (this->Attack->__isset.Detectability) { wasSet = true; }
          if (this->Attack->__isset.ExploitedVulnerabilities) { wasSet = true; }
          if (this->Attack->__isset.Violations) { wasSet = true; }
          if (!wasSet) { this->Attack.reset(); }
          this->__isset.Attack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Action) { 
            this->Action = ::apache::thrift::stdcxx::shared_ptr<TDDIAction>(new TDDIAction);
          }
          xfer += this->Action->read(iprot);
          bool wasSet = false;
          if (this->Action->__isset.Id) { wasSet = true; }
          if (this->Action->__isset.Name) { wasSet = true; }
          if (this->Action->__isset.Description) { wasSet = true; }
          if (this->Action->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Action->__isset.Category) { wasSet = true; }
          if (this->Action->__isset.FinancialCost) { wasSet = true; }
          if (this->Action->__isset.FinancialCostType) { wasSet = true; }
          if (this->Action->__isset.TimeRequired) { wasSet = true; }
          if (this->Action->__isset.TimeUnit) { wasSet = true; }
          if (this->Action->__isset.Difficulty) { wasSet = true; }
          if (this->Action->__isset.Detectability) { wasSet = true; }
          if (this->Action->__isset.ExploitedVulnerabilities) { wasSet = true; }
          if (this->Action->__isset.Violations) { wasSet = true; }
          if (!wasSet) { this->Action.reset(); }
          this->__isset.Action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Payload) { 
            this->Payload = ::apache::thrift::stdcxx::shared_ptr<TDDIPayload>(new TDDIPayload);
          }
          xfer += this->Payload->read(iprot);
          bool wasSet = false;
          if (this->Payload->__isset.Id) { wasSet = true; }
          if (this->Payload->__isset.Name) { wasSet = true; }
          if (this->Payload->__isset.Description) { wasSet = true; }
          if (this->Payload->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Payload->__isset.Category) { wasSet = true; }
          if (this->Payload->__isset.FinancialCost) { wasSet = true; }
          if (this->Payload->__isset.FinancialCostType) { wasSet = true; }
          if (this->Payload->__isset.TimeRequired) { wasSet = true; }
          if (this->Payload->__isset.TimeUnit) { wasSet = true; }
          if (this->Payload->__isset.Difficulty) { wasSet = true; }
          if (this->Payload->__isset.Detectability) { wasSet = true; }
          if (this->Payload->__isset.ExploitedVulnerabilities) { wasSet = true; }
          if (this->Payload->__isset.Violations) { wasSet = true; }
          if (!wasSet) { this->Payload.reset(); }
          this->__isset.Payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAttackUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAttackUnion");

  xfer += oprot->writeFieldBegin("Attack", ::apache::thrift::protocol::T_STRUCT, 1);
  if (this->Attack) {
    xfer += this->Attack->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAttack"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Action", ::apache::thrift::protocol::T_STRUCT, 2);
  if (this->Action) {
    xfer += this->Action->write(oprot); 
  } else {oprot->writeStructBegin("TDDIAction"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Payload", ::apache::thrift::protocol::T_STRUCT, 3);
  if (this->Payload) {
    xfer += this->Payload->write(oprot); 
  } else {oprot->writeStructBegin("TDDIPayload"); 
    oprot->writeStructEnd();
    oprot->writeFieldStop();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAttackUnion &a, TDDIAbstractAttackUnion &b) {
  using ::std::swap;
  swap(a.Attack, b.Attack);
  swap(a.Action, b.Action);
  swap(a.Payload, b.Payload);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAttackUnion::TDDIAbstractAttackUnion(const TDDIAbstractAttackUnion& other2713) {
  Attack = other2713.Attack;
  Action = other2713.Action;
  Payload = other2713.Payload;
  __isset = other2713.__isset;
}
TDDIAbstractAttackUnion& TDDIAbstractAttackUnion::operator=(const TDDIAbstractAttackUnion& other2714) {
  Attack = other2714.Attack;
  Action = other2714.Action;
  Payload = other2714.Payload;
  __isset = other2714.__isset;
  return *this;
}
void TDDIAbstractAttackUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAttackUnion(";
  out << "Attack=" << to_string(Attack);
  out << ", " << "Action=" << to_string(Action);
  out << ", " << "Payload=" << to_string(Payload);
  out << ")";
}


TDDIAbstractAttack::~TDDIAbstractAttack() throw() {
}


void TDDIAbstractAttack::__set_UsedAttack(const TDDIAbstractAttackUnion& val) {
  this->UsedAttack = val;
}

void TDDIAbstractAttack::__set_UsedAttackType(const TDDIAbstractAttackUnionType val) {
  this->UsedAttackType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractAttack& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractAttack::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedAttack.read(iprot);
          this->__isset.UsedAttack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2715;
          xfer += iprot->readI32(ecast2715);
          this->UsedAttackType = (TDDIAbstractAttackUnionType)ecast2715;
          this->__isset.UsedAttackType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractAttack::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractAttack");

  xfer += oprot->writeFieldBegin("UsedAttack", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedAttack.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedAttackType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedAttackType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractAttack &a, TDDIAbstractAttack &b) {
  using ::std::swap;
  swap(a.UsedAttack, b.UsedAttack);
  swap(a.UsedAttackType, b.UsedAttackType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractAttack::TDDIAbstractAttack(const TDDIAbstractAttack& other2716) {
  UsedAttack = other2716.UsedAttack;
  UsedAttackType = other2716.UsedAttackType;
  __isset = other2716.__isset;
}
TDDIAbstractAttack& TDDIAbstractAttack::operator=(const TDDIAbstractAttack& other2717) {
  UsedAttack = other2717.UsedAttack;
  UsedAttackType = other2717.UsedAttackType;
  __isset = other2717.__isset;
  return *this;
}
void TDDIAbstractAttack::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractAttack(";
  out << "UsedAttack=" << to_string(UsedAttack);
  out << ", " << "UsedAttackType=" << to_string(UsedAttackType);
  out << ")";
}


TDDIAttackerGoal::~TDDIAttackerGoal() throw() {
}


void TDDIAttackerGoal::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIAttackerGoal::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIAttackerGoal::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIAttackerGoal::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIAttackerGoal::__set_Category(const std::string& val) {
  this->Category = val;
}

void TDDIAttackerGoal::__set_Attacks(const std::vector<TDDIAbstractAttack> & val) {
  this->Attacks = val;
}

void TDDIAttackerGoal::__set_AddressedBy(const std::vector<TDDISecurityCapability> & val) {
  this->AddressedBy = val;
}

void TDDIAttackerGoal::__set_AttackedItems(const std::vector<TDDIVulnerableItemRef> & val) {
  this->AttackedItems = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAttackerGoal& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAttackerGoal::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2718;
            ::apache::thrift::protocol::TType _etype2721;
            xfer += iprot->readListBegin(_etype2721, _size2718);
            this->KeyValueMaps.resize(_size2718);
            uint32_t _i2722;
            for (_i2722 = 0; _i2722 < _size2718; ++_i2722)
            {
              xfer += this->KeyValueMaps[_i2722].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Category);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Attacks.clear();
            uint32_t _size2723;
            ::apache::thrift::protocol::TType _etype2726;
            xfer += iprot->readListBegin(_etype2726, _size2723);
            this->Attacks.resize(_size2723);
            uint32_t _i2727;
            for (_i2727 = 0; _i2727 < _size2723; ++_i2727)
            {
              xfer += this->Attacks[_i2727].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Attacks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AddressedBy.clear();
            uint32_t _size2728;
            ::apache::thrift::protocol::TType _etype2731;
            xfer += iprot->readListBegin(_etype2731, _size2728);
            this->AddressedBy.resize(_size2728);
            uint32_t _i2732;
            for (_i2732 = 0; _i2732 < _size2728; ++_i2732)
            {
              xfer += this->AddressedBy[_i2732].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AddressedBy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AttackedItems.clear();
            uint32_t _size2733;
            ::apache::thrift::protocol::TType _etype2736;
            xfer += iprot->readListBegin(_etype2736, _size2733);
            this->AttackedItems.resize(_size2733);
            uint32_t _i2737;
            for (_i2737 = 0; _i2737 < _size2733; ++_i2737)
            {
              xfer += this->AttackedItems[_i2737].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AttackedItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAttackerGoal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAttackerGoal");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2738;
    for (_iter2738 = this->KeyValueMaps.begin(); _iter2738 != this->KeyValueMaps.end(); ++_iter2738)
    {
      xfer += (*_iter2738).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Attacks", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Attacks.size()));
    std::vector<TDDIAbstractAttack> ::const_iterator _iter2739;
    for (_iter2739 = this->Attacks.begin(); _iter2739 != this->Attacks.end(); ++_iter2739)
    {
      xfer += (*_iter2739).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AddressedBy", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AddressedBy.size()));
    std::vector<TDDISecurityCapability> ::const_iterator _iter2740;
    for (_iter2740 = this->AddressedBy.begin(); _iter2740 != this->AddressedBy.end(); ++_iter2740)
    {
      xfer += (*_iter2740).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AttackedItems", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AttackedItems.size()));
    std::vector<TDDIVulnerableItemRef> ::const_iterator _iter2741;
    for (_iter2741 = this->AttackedItems.begin(); _iter2741 != this->AttackedItems.end(); ++_iter2741)
    {
      xfer += (*_iter2741).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAttackerGoal &a, TDDIAttackerGoal &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.Category, b.Category);
  swap(a.Attacks, b.Attacks);
  swap(a.AddressedBy, b.AddressedBy);
  swap(a.AttackedItems, b.AttackedItems);
  swap(a.__isset, b.__isset);
}

TDDIAttackerGoal::TDDIAttackerGoal(const TDDIAttackerGoal& other2742) {
  Id = other2742.Id;
  Name = other2742.Name;
  Description = other2742.Description;
  KeyValueMaps = other2742.KeyValueMaps;
  Category = other2742.Category;
  Attacks = other2742.Attacks;
  AddressedBy = other2742.AddressedBy;
  AttackedItems = other2742.AttackedItems;
  __isset = other2742.__isset;
}
TDDIAttackerGoal& TDDIAttackerGoal::operator=(const TDDIAttackerGoal& other2743) {
  Id = other2743.Id;
  Name = other2743.Name;
  Description = other2743.Description;
  KeyValueMaps = other2743.KeyValueMaps;
  Category = other2743.Category;
  Attacks = other2743.Attacks;
  AddressedBy = other2743.AddressedBy;
  AttackedItems = other2743.AttackedItems;
  __isset = other2743.__isset;
  return *this;
}
void TDDIAttackerGoal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAttackerGoal(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "Category=" << to_string(Category);
  out << ", " << "Attacks=" << to_string(Attacks);
  out << ", " << "AddressedBy=" << to_string(AddressedBy);
  out << ", " << "AttackedItems=" << to_string(AttackedItems);
  out << ")";
}


TDDIThreatAgent::~TDDIThreatAgent() throw() {
}


void TDDIThreatAgent::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIThreatAgent::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIThreatAgent::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIThreatAgent::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIThreatAgent::__set_SkillLevel(const std::string& val) {
  this->SkillLevel = val;
}

void TDDIThreatAgent::__set_Motivation(const std::string& val) {
  this->Motivation = val;
}

void TDDIThreatAgent::__set_AnonymityDesire(const std::string& val) {
  this->AnonymityDesire = val;
}

void TDDIThreatAgent::__set_AttackerGoals(const std::vector<TDDIAttackerGoal> & val) {
  this->AttackerGoals = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIThreatAgent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIThreatAgent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2744;
            ::apache::thrift::protocol::TType _etype2747;
            xfer += iprot->readListBegin(_etype2747, _size2744);
            this->KeyValueMaps.resize(_size2744);
            uint32_t _i2748;
            for (_i2748 = 0; _i2748 < _size2744; ++_i2748)
            {
              xfer += this->KeyValueMaps[_i2748].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SkillLevel);
          this->__isset.SkillLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Motivation);
          this->__isset.Motivation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->AnonymityDesire);
          this->__isset.AnonymityDesire = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AttackerGoals.clear();
            uint32_t _size2749;
            ::apache::thrift::protocol::TType _etype2752;
            xfer += iprot->readListBegin(_etype2752, _size2749);
            this->AttackerGoals.resize(_size2749);
            uint32_t _i2753;
            for (_i2753 = 0; _i2753 < _size2749; ++_i2753)
            {
              xfer += this->AttackerGoals[_i2753].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AttackerGoals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIThreatAgent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIThreatAgent");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2754;
    for (_iter2754 = this->KeyValueMaps.begin(); _iter2754 != this->KeyValueMaps.end(); ++_iter2754)
    {
      xfer += (*_iter2754).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SkillLevel", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->SkillLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Motivation", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Motivation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnonymityDesire", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->AnonymityDesire);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AttackerGoals", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AttackerGoals.size()));
    std::vector<TDDIAttackerGoal> ::const_iterator _iter2755;
    for (_iter2755 = this->AttackerGoals.begin(); _iter2755 != this->AttackerGoals.end(); ++_iter2755)
    {
      xfer += (*_iter2755).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIThreatAgent &a, TDDIThreatAgent &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.SkillLevel, b.SkillLevel);
  swap(a.Motivation, b.Motivation);
  swap(a.AnonymityDesire, b.AnonymityDesire);
  swap(a.AttackerGoals, b.AttackerGoals);
  swap(a.__isset, b.__isset);
}

TDDIThreatAgent::TDDIThreatAgent(const TDDIThreatAgent& other2756) {
  Id = other2756.Id;
  Name = other2756.Name;
  Description = other2756.Description;
  KeyValueMaps = other2756.KeyValueMaps;
  SkillLevel = other2756.SkillLevel;
  Motivation = other2756.Motivation;
  AnonymityDesire = other2756.AnonymityDesire;
  AttackerGoals = other2756.AttackerGoals;
  __isset = other2756.__isset;
}
TDDIThreatAgent& TDDIThreatAgent::operator=(const TDDIThreatAgent& other2757) {
  Id = other2757.Id;
  Name = other2757.Name;
  Description = other2757.Description;
  KeyValueMaps = other2757.KeyValueMaps;
  SkillLevel = other2757.SkillLevel;
  Motivation = other2757.Motivation;
  AnonymityDesire = other2757.AnonymityDesire;
  AttackerGoals = other2757.AttackerGoals;
  __isset = other2757.__isset;
  return *this;
}
void TDDIThreatAgent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIThreatAgent(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "SkillLevel=" << to_string(SkillLevel);
  out << ", " << "Motivation=" << to_string(Motivation);
  out << ", " << "AnonymityDesire=" << to_string(AnonymityDesire);
  out << ", " << "AttackerGoals=" << to_string(AttackerGoals);
  out << ")";
}


TDDIHuman::~TDDIHuman() throw() {
}


void TDDIHuman::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDIHuman::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDIHuman::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDIHuman::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDIHuman::__set_SkillLevel(const std::string& val) {
  this->SkillLevel = val;
}

void TDDIHuman::__set_Motivation(const std::string& val) {
  this->Motivation = val;
}

void TDDIHuman::__set_AnonymityDesire(const std::string& val) {
  this->AnonymityDesire = val;
}

void TDDIHuman::__set_AttackerGoals(const std::vector<TDDIAttackerGoal> & val) {
  this->AttackerGoals = val;
}

void TDDIHuman::__set_Actions(const std::vector<TDDIActionRef> & val) {
  this->Actions = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIHuman& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIHuman::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2758;
            ::apache::thrift::protocol::TType _etype2761;
            xfer += iprot->readListBegin(_etype2761, _size2758);
            this->KeyValueMaps.resize(_size2758);
            uint32_t _i2762;
            for (_i2762 = 0; _i2762 < _size2758; ++_i2762)
            {
              xfer += this->KeyValueMaps[_i2762].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SkillLevel);
          this->__isset.SkillLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Motivation);
          this->__isset.Motivation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->AnonymityDesire);
          this->__isset.AnonymityDesire = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AttackerGoals.clear();
            uint32_t _size2763;
            ::apache::thrift::protocol::TType _etype2766;
            xfer += iprot->readListBegin(_etype2766, _size2763);
            this->AttackerGoals.resize(_size2763);
            uint32_t _i2767;
            for (_i2767 = 0; _i2767 < _size2763; ++_i2767)
            {
              xfer += this->AttackerGoals[_i2767].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AttackerGoals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Actions.clear();
            uint32_t _size2768;
            ::apache::thrift::protocol::TType _etype2771;
            xfer += iprot->readListBegin(_etype2771, _size2768);
            this->Actions.resize(_size2768);
            uint32_t _i2772;
            for (_i2772 = 0; _i2772 < _size2768; ++_i2772)
            {
              xfer += this->Actions[_i2772].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Actions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIHuman::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIHuman");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2773;
    for (_iter2773 = this->KeyValueMaps.begin(); _iter2773 != this->KeyValueMaps.end(); ++_iter2773)
    {
      xfer += (*_iter2773).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SkillLevel", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->SkillLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Motivation", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Motivation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnonymityDesire", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->AnonymityDesire);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AttackerGoals", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AttackerGoals.size()));
    std::vector<TDDIAttackerGoal> ::const_iterator _iter2774;
    for (_iter2774 = this->AttackerGoals.begin(); _iter2774 != this->AttackerGoals.end(); ++_iter2774)
    {
      xfer += (*_iter2774).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Actions", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Actions.size()));
    std::vector<TDDIActionRef> ::const_iterator _iter2775;
    for (_iter2775 = this->Actions.begin(); _iter2775 != this->Actions.end(); ++_iter2775)
    {
      xfer += (*_iter2775).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIHuman &a, TDDIHuman &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.SkillLevel, b.SkillLevel);
  swap(a.Motivation, b.Motivation);
  swap(a.AnonymityDesire, b.AnonymityDesire);
  swap(a.AttackerGoals, b.AttackerGoals);
  swap(a.Actions, b.Actions);
  swap(a.__isset, b.__isset);
}

TDDIHuman::TDDIHuman(const TDDIHuman& other2776) {
  Id = other2776.Id;
  Name = other2776.Name;
  Description = other2776.Description;
  KeyValueMaps = other2776.KeyValueMaps;
  SkillLevel = other2776.SkillLevel;
  Motivation = other2776.Motivation;
  AnonymityDesire = other2776.AnonymityDesire;
  AttackerGoals = other2776.AttackerGoals;
  Actions = other2776.Actions;
  __isset = other2776.__isset;
}
TDDIHuman& TDDIHuman::operator=(const TDDIHuman& other2777) {
  Id = other2777.Id;
  Name = other2777.Name;
  Description = other2777.Description;
  KeyValueMaps = other2777.KeyValueMaps;
  SkillLevel = other2777.SkillLevel;
  Motivation = other2777.Motivation;
  AnonymityDesire = other2777.AnonymityDesire;
  AttackerGoals = other2777.AttackerGoals;
  Actions = other2777.Actions;
  __isset = other2777.__isset;
  return *this;
}
void TDDIHuman::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIHuman(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "SkillLevel=" << to_string(SkillLevel);
  out << ", " << "Motivation=" << to_string(Motivation);
  out << ", " << "AnonymityDesire=" << to_string(AnonymityDesire);
  out << ", " << "AttackerGoals=" << to_string(AttackerGoals);
  out << ", " << "Actions=" << to_string(Actions);
  out << ")";
}


TDDINonHuman::~TDDINonHuman() throw() {
}


void TDDINonHuman::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDINonHuman::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDINonHuman::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDINonHuman::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDINonHuman::__set_SkillLevel(const std::string& val) {
  this->SkillLevel = val;
}

void TDDINonHuman::__set_Motivation(const std::string& val) {
  this->Motivation = val;
}

void TDDINonHuman::__set_AnonymityDesire(const std::string& val) {
  this->AnonymityDesire = val;
}

void TDDINonHuman::__set_AttackerGoals(const std::vector<TDDIAttackerGoal> & val) {
  this->AttackerGoals = val;
}

void TDDINonHuman::__set_Payloads(const std::vector<TDDIPayloadRef> & val) {
  this->Payloads = val;
}
std::ostream& operator<<(std::ostream& out, const TDDINonHuman& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDINonHuman::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2778;
            ::apache::thrift::protocol::TType _etype2781;
            xfer += iprot->readListBegin(_etype2781, _size2778);
            this->KeyValueMaps.resize(_size2778);
            uint32_t _i2782;
            for (_i2782 = 0; _i2782 < _size2778; ++_i2782)
            {
              xfer += this->KeyValueMaps[_i2782].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SkillLevel);
          this->__isset.SkillLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Motivation);
          this->__isset.Motivation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->AnonymityDesire);
          this->__isset.AnonymityDesire = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AttackerGoals.clear();
            uint32_t _size2783;
            ::apache::thrift::protocol::TType _etype2786;
            xfer += iprot->readListBegin(_etype2786, _size2783);
            this->AttackerGoals.resize(_size2783);
            uint32_t _i2787;
            for (_i2787 = 0; _i2787 < _size2783; ++_i2787)
            {
              xfer += this->AttackerGoals[_i2787].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.AttackerGoals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Payloads.clear();
            uint32_t _size2788;
            ::apache::thrift::protocol::TType _etype2791;
            xfer += iprot->readListBegin(_etype2791, _size2788);
            this->Payloads.resize(_size2788);
            uint32_t _i2792;
            for (_i2792 = 0; _i2792 < _size2788; ++_i2792)
            {
              xfer += this->Payloads[_i2792].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Payloads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDINonHuman::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDINonHuman");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2793;
    for (_iter2793 = this->KeyValueMaps.begin(); _iter2793 != this->KeyValueMaps.end(); ++_iter2793)
    {
      xfer += (*_iter2793).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SkillLevel", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->SkillLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Motivation", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Motivation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AnonymityDesire", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->AnonymityDesire);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("AttackerGoals", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->AttackerGoals.size()));
    std::vector<TDDIAttackerGoal> ::const_iterator _iter2794;
    for (_iter2794 = this->AttackerGoals.begin(); _iter2794 != this->AttackerGoals.end(); ++_iter2794)
    {
      xfer += (*_iter2794).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Payloads", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Payloads.size()));
    std::vector<TDDIPayloadRef> ::const_iterator _iter2795;
    for (_iter2795 = this->Payloads.begin(); _iter2795 != this->Payloads.end(); ++_iter2795)
    {
      xfer += (*_iter2795).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDINonHuman &a, TDDINonHuman &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.SkillLevel, b.SkillLevel);
  swap(a.Motivation, b.Motivation);
  swap(a.AnonymityDesire, b.AnonymityDesire);
  swap(a.AttackerGoals, b.AttackerGoals);
  swap(a.Payloads, b.Payloads);
  swap(a.__isset, b.__isset);
}

TDDINonHuman::TDDINonHuman(const TDDINonHuman& other2796) {
  Id = other2796.Id;
  Name = other2796.Name;
  Description = other2796.Description;
  KeyValueMaps = other2796.KeyValueMaps;
  SkillLevel = other2796.SkillLevel;
  Motivation = other2796.Motivation;
  AnonymityDesire = other2796.AnonymityDesire;
  AttackerGoals = other2796.AttackerGoals;
  Payloads = other2796.Payloads;
  __isset = other2796.__isset;
}
TDDINonHuman& TDDINonHuman::operator=(const TDDINonHuman& other2797) {
  Id = other2797.Id;
  Name = other2797.Name;
  Description = other2797.Description;
  KeyValueMaps = other2797.KeyValueMaps;
  SkillLevel = other2797.SkillLevel;
  Motivation = other2797.Motivation;
  AnonymityDesire = other2797.AnonymityDesire;
  AttackerGoals = other2797.AttackerGoals;
  Payloads = other2797.Payloads;
  __isset = other2797.__isset;
  return *this;
}
void TDDINonHuman::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDINonHuman(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "SkillLevel=" << to_string(SkillLevel);
  out << ", " << "Motivation=" << to_string(Motivation);
  out << ", " << "AnonymityDesire=" << to_string(AnonymityDesire);
  out << ", " << "AttackerGoals=" << to_string(AttackerGoals);
  out << ", " << "Payloads=" << to_string(Payloads);
  out << ")";
}


TDDIAbstractThreatAgentUnion::~TDDIAbstractThreatAgentUnion() throw() {
}


void TDDIAbstractThreatAgentUnion::__set_ThreatAgent(::apache::thrift::stdcxx::shared_ptr<TDDIThreatAgent> val) {
  this->ThreatAgent = val;
__isset.ThreatAgent = true;
}

void TDDIAbstractThreatAgentUnion::__set_Human(::apache::thrift::stdcxx::shared_ptr<TDDIHuman> val) {
  this->Human = val;
__isset.Human = true;
}

void TDDIAbstractThreatAgentUnion::__set_NonHuman(::apache::thrift::stdcxx::shared_ptr<TDDINonHuman> val) {
  this->NonHuman = val;
__isset.NonHuman = true;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractThreatAgentUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractThreatAgentUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->ThreatAgent) { 
            this->ThreatAgent = ::apache::thrift::stdcxx::shared_ptr<TDDIThreatAgent>(new TDDIThreatAgent);
          }
          xfer += this->ThreatAgent->read(iprot);
          bool wasSet = false;
          if (this->ThreatAgent->__isset.Id) { wasSet = true; }
          if (this->ThreatAgent->__isset.Name) { wasSet = true; }
          if (this->ThreatAgent->__isset.Description) { wasSet = true; }
          if (this->ThreatAgent->__isset.KeyValueMaps) { wasSet = true; }
          if (this->ThreatAgent->__isset.SkillLevel) { wasSet = true; }
          if (this->ThreatAgent->__isset.Motivation) { wasSet = true; }
          if (this->ThreatAgent->__isset.AnonymityDesire) { wasSet = true; }
          if (this->ThreatAgent->__isset.AttackerGoals) { wasSet = true; }
          if (!wasSet) { this->ThreatAgent.reset(); }
          this->__isset.ThreatAgent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->Human) { 
            this->Human = ::apache::thrift::stdcxx::shared_ptr<TDDIHuman>(new TDDIHuman);
          }
          xfer += this->Human->read(iprot);
          bool wasSet = false;
          if (this->Human->__isset.Id) { wasSet = true; }
          if (this->Human->__isset.Name) { wasSet = true; }
          if (this->Human->__isset.Description) { wasSet = true; }
          if (this->Human->__isset.KeyValueMaps) { wasSet = true; }
          if (this->Human->__isset.SkillLevel) { wasSet = true; }
          if (this->Human->__isset.Motivation) { wasSet = true; }
          if (this->Human->__isset.AnonymityDesire) { wasSet = true; }
          if (this->Human->__isset.AttackerGoals) { wasSet = true; }
          if (this->Human->__isset.Actions) { wasSet = true; }
          if (!wasSet) { this->Human.reset(); }
          this->__isset.Human = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->NonHuman) { 
            this->NonHuman = ::apache::thrift::stdcxx::shared_ptr<TDDINonHuman>(new TDDINonHuman);
          }
          xfer += this->NonHuman->read(iprot);
          bool wasSet = false;
          if (this->NonHuman->__isset.Id) { wasSet = true; }
          if (this->NonHuman->__isset.Name) { wasSet = true; }
          if (this->NonHuman->__isset.Description) { wasSet = true; }
          if (this->NonHuman->__isset.KeyValueMaps) { wasSet = true; }
          if (this->NonHuman->__isset.SkillLevel) { wasSet = true; }
          if (this->NonHuman->__isset.Motivation) { wasSet = true; }
          if (this->NonHuman->__isset.AnonymityDesire) { wasSet = true; }
          if (this->NonHuman->__isset.AttackerGoals) { wasSet = true; }
          if (this->NonHuman->__isset.Payloads) { wasSet = true; }
          if (!wasSet) { this->NonHuman.reset(); }
          this->__isset.NonHuman = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractThreatAgentUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractThreatAgentUnion");

  if (this->__isset.ThreatAgent) {
    xfer += oprot->writeFieldBegin("ThreatAgent", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->ThreatAgent) {
      xfer += this->ThreatAgent->write(oprot); 
    } else {oprot->writeStructBegin("TDDIThreatAgent"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.Human) {
    xfer += oprot->writeFieldBegin("Human", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->Human) {
      xfer += this->Human->write(oprot); 
    } else {oprot->writeStructBegin("TDDIHuman"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.NonHuman) {
    xfer += oprot->writeFieldBegin("NonHuman", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->NonHuman) {
      xfer += this->NonHuman->write(oprot); 
    } else {oprot->writeStructBegin("TDDINonHuman"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractThreatAgentUnion &a, TDDIAbstractThreatAgentUnion &b) {
  using ::std::swap;
  swap(a.ThreatAgent, b.ThreatAgent);
  swap(a.Human, b.Human);
  swap(a.NonHuman, b.NonHuman);
  swap(a.__isset, b.__isset);
}

TDDIAbstractThreatAgentUnion::TDDIAbstractThreatAgentUnion(const TDDIAbstractThreatAgentUnion& other2798) {
  ThreatAgent = other2798.ThreatAgent;
  Human = other2798.Human;
  NonHuman = other2798.NonHuman;
  __isset = other2798.__isset;
}
TDDIAbstractThreatAgentUnion& TDDIAbstractThreatAgentUnion::operator=(const TDDIAbstractThreatAgentUnion& other2799) {
  ThreatAgent = other2799.ThreatAgent;
  Human = other2799.Human;
  NonHuman = other2799.NonHuman;
  __isset = other2799.__isset;
  return *this;
}
void TDDIAbstractThreatAgentUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractThreatAgentUnion(";
  out << "ThreatAgent="; (__isset.ThreatAgent ? (out << to_string(ThreatAgent)) : (out << "<null>"));
  out << ", " << "Human="; (__isset.Human ? (out << to_string(Human)) : (out << "<null>"));
  out << ", " << "NonHuman="; (__isset.NonHuman ? (out << to_string(NonHuman)) : (out << "<null>"));
  out << ")";
}


TDDIAbstractThreatAgent::~TDDIAbstractThreatAgent() throw() {
}


void TDDIAbstractThreatAgent::__set_UsedThreatAgent(const TDDIAbstractThreatAgentUnion& val) {
  this->UsedThreatAgent = val;
}

void TDDIAbstractThreatAgent::__set_UsedThreatAgentType(const TDDIAbstractThreatAgentUnionType val) {
  this->UsedThreatAgentType = val;
}
std::ostream& operator<<(std::ostream& out, const TDDIAbstractThreatAgent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDIAbstractThreatAgent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->UsedThreatAgent.read(iprot);
          this->__isset.UsedThreatAgent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2800;
          xfer += iprot->readI32(ecast2800);
          this->UsedThreatAgentType = (TDDIAbstractThreatAgentUnionType)ecast2800;
          this->__isset.UsedThreatAgentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDIAbstractThreatAgent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDIAbstractThreatAgent");

  xfer += oprot->writeFieldBegin("UsedThreatAgent", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->UsedThreatAgent.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UsedThreatAgentType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->UsedThreatAgentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDIAbstractThreatAgent &a, TDDIAbstractThreatAgent &b) {
  using ::std::swap;
  swap(a.UsedThreatAgent, b.UsedThreatAgent);
  swap(a.UsedThreatAgentType, b.UsedThreatAgentType);
  swap(a.__isset, b.__isset);
}

TDDIAbstractThreatAgent::TDDIAbstractThreatAgent(const TDDIAbstractThreatAgent& other2801) {
  UsedThreatAgent = other2801.UsedThreatAgent;
  UsedThreatAgentType = other2801.UsedThreatAgentType;
  __isset = other2801.__isset;
}
TDDIAbstractThreatAgent& TDDIAbstractThreatAgent::operator=(const TDDIAbstractThreatAgent& other2802) {
  UsedThreatAgent = other2802.UsedThreatAgent;
  UsedThreatAgentType = other2802.UsedThreatAgentType;
  __isset = other2802.__isset;
  return *this;
}
void TDDIAbstractThreatAgent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDIAbstractThreatAgent(";
  out << "UsedThreatAgent=" << to_string(UsedThreatAgent);
  out << ", " << "UsedThreatAgentType=" << to_string(UsedThreatAgentType);
  out << ")";
}


TDDITARAPackage::~TDDITARAPackage() throw() {
}


void TDDITARAPackage::__set_Id(const int64_t val) {
  this->Id = val;
}

void TDDITARAPackage::__set_Name(const std::string& val) {
  this->Name = val;
}

void TDDITARAPackage::__set_Description(const std::string& val) {
  this->Description = val;
}

void TDDITARAPackage::__set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val) {
  this->KeyValueMaps = val;
}

void TDDITARAPackage::__set_IdentifiedRisks(const std::vector<TDDISecurityRisk> & val) {
  this->IdentifiedRisks = val;
}

void TDDITARAPackage::__set_Controls(const std::vector<TDDISecurityControl> & val) {
  this->Controls = val;
}

void TDDITARAPackage::__set_ConsideredAssets(const std::vector<TDDIAbstractAsset> & val) {
  this->ConsideredAssets = val;
}

void TDDITARAPackage::__set_ConsideredThreatAgents(const std::vector<TDDIAbstractThreatAgent> & val) {
  this->ConsideredThreatAgents = val;
}
std::ostream& operator<<(std::ostream& out, const TDDITARAPackage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDDITARAPackage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Description);
          this->__isset.Description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->KeyValueMaps.clear();
            uint32_t _size2803;
            ::apache::thrift::protocol::TType _etype2806;
            xfer += iprot->readListBegin(_etype2806, _size2803);
            this->KeyValueMaps.resize(_size2803);
            uint32_t _i2807;
            for (_i2807 = 0; _i2807 < _size2803; ++_i2807)
            {
              xfer += this->KeyValueMaps[_i2807].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.KeyValueMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->IdentifiedRisks.clear();
            uint32_t _size2808;
            ::apache::thrift::protocol::TType _etype2811;
            xfer += iprot->readListBegin(_etype2811, _size2808);
            this->IdentifiedRisks.resize(_size2808);
            uint32_t _i2812;
            for (_i2812 = 0; _i2812 < _size2808; ++_i2812)
            {
              xfer += this->IdentifiedRisks[_i2812].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.IdentifiedRisks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Controls.clear();
            uint32_t _size2813;
            ::apache::thrift::protocol::TType _etype2816;
            xfer += iprot->readListBegin(_etype2816, _size2813);
            this->Controls.resize(_size2813);
            uint32_t _i2817;
            for (_i2817 = 0; _i2817 < _size2813; ++_i2817)
            {
              xfer += this->Controls[_i2817].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Controls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ConsideredAssets.clear();
            uint32_t _size2818;
            ::apache::thrift::protocol::TType _etype2821;
            xfer += iprot->readListBegin(_etype2821, _size2818);
            this->ConsideredAssets.resize(_size2818);
            uint32_t _i2822;
            for (_i2822 = 0; _i2822 < _size2818; ++_i2822)
            {
              xfer += this->ConsideredAssets[_i2822].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ConsideredAssets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ConsideredThreatAgents.clear();
            uint32_t _size2823;
            ::apache::thrift::protocol::TType _etype2826;
            xfer += iprot->readListBegin(_etype2826, _size2823);
            this->ConsideredThreatAgents.resize(_size2823);
            uint32_t _i2827;
            for (_i2827 = 0; _i2827 < _size2823; ++_i2827)
            {
              xfer += this->ConsideredThreatAgents[_i2827].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ConsideredThreatAgents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDDITARAPackage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDDITARAPackage");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("KeyValueMaps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->KeyValueMaps.size()));
    std::vector<TDDIKeyValueMap> ::const_iterator _iter2828;
    for (_iter2828 = this->KeyValueMaps.begin(); _iter2828 != this->KeyValueMaps.end(); ++_iter2828)
    {
      xfer += (*_iter2828).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IdentifiedRisks", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->IdentifiedRisks.size()));
    std::vector<TDDISecurityRisk> ::const_iterator _iter2829;
    for (_iter2829 = this->IdentifiedRisks.begin(); _iter2829 != this->IdentifiedRisks.end(); ++_iter2829)
    {
      xfer += (*_iter2829).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Controls", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Controls.size()));
    std::vector<TDDISecurityControl> ::const_iterator _iter2830;
    for (_iter2830 = this->Controls.begin(); _iter2830 != this->Controls.end(); ++_iter2830)
    {
      xfer += (*_iter2830).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ConsideredAssets", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ConsideredAssets.size()));
    std::vector<TDDIAbstractAsset> ::const_iterator _iter2831;
    for (_iter2831 = this->ConsideredAssets.begin(); _iter2831 != this->ConsideredAssets.end(); ++_iter2831)
    {
      xfer += (*_iter2831).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ConsideredThreatAgents", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ConsideredThreatAgents.size()));
    std::vector<TDDIAbstractThreatAgent> ::const_iterator _iter2832;
    for (_iter2832 = this->ConsideredThreatAgents.begin(); _iter2832 != this->ConsideredThreatAgents.end(); ++_iter2832)
    {
      xfer += (*_iter2832).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDDITARAPackage &a, TDDITARAPackage &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.Name, b.Name);
  swap(a.Description, b.Description);
  swap(a.KeyValueMaps, b.KeyValueMaps);
  swap(a.IdentifiedRisks, b.IdentifiedRisks);
  swap(a.Controls, b.Controls);
  swap(a.ConsideredAssets, b.ConsideredAssets);
  swap(a.ConsideredThreatAgents, b.ConsideredThreatAgents);
  swap(a.__isset, b.__isset);
}

TDDITARAPackage::TDDITARAPackage(const TDDITARAPackage& other2833) {
  Id = other2833.Id;
  Name = other2833.Name;
  Description = other2833.Description;
  KeyValueMaps = other2833.KeyValueMaps;
  IdentifiedRisks = other2833.IdentifiedRisks;
  Controls = other2833.Controls;
  ConsideredAssets = other2833.ConsideredAssets;
  ConsideredThreatAgents = other2833.ConsideredThreatAgents;
  __isset = other2833.__isset;
}
TDDITARAPackage& TDDITARAPackage::operator=(const TDDITARAPackage& other2834) {
  Id = other2834.Id;
  Name = other2834.Name;
  Description = other2834.Description;
  KeyValueMaps = other2834.KeyValueMaps;
  IdentifiedRisks = other2834.IdentifiedRisks;
  Controls = other2834.Controls;
  ConsideredAssets = other2834.ConsideredAssets;
  ConsideredThreatAgents = other2834.ConsideredThreatAgents;
  __isset = other2834.__isset;
  return *this;
}
void TDDITARAPackage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDDITARAPackage(";
  out << "Id=" << to_string(Id);
  out << ", " << "Name=" << to_string(Name);
  out << ", " << "Description=" << to_string(Description);
  out << ", " << "KeyValueMaps=" << to_string(KeyValueMaps);
  out << ", " << "IdentifiedRisks=" << to_string(IdentifiedRisks);
  out << ", " << "Controls=" << to_string(Controls);
  out << ", " << "ConsideredAssets=" << to_string(ConsideredAssets);
  out << ", " << "ConsideredThreatAgents=" << to_string(ConsideredThreatAgents);
  out << ")";
}

} // namespace
