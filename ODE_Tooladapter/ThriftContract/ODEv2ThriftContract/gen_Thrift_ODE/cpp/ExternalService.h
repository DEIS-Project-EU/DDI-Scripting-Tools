/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExternalService_H
#define ExternalService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "mergedDDIThriftContract_types.h"

namespace thriftContract {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ExternalServiceIf {
 public:
  virtual ~ExternalServiceIf() {}
  virtual void InvokeExternalService(TDDIDDIPackage& _return, const TDDIDDIPackage& DDIPackage, const std::string& ServiceId, const std::vector<TDDIExternalServiceParameter> & ServiceParameter) = 0;
};

class ExternalServiceIfFactory {
 public:
  typedef ExternalServiceIf Handler;

  virtual ~ExternalServiceIfFactory() {}

  virtual ExternalServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ExternalServiceIf* /* handler */) = 0;
};

class ExternalServiceIfSingletonFactory : virtual public ExternalServiceIfFactory {
 public:
  ExternalServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ExternalServiceIf>& iface) : iface_(iface) {}
  virtual ~ExternalServiceIfSingletonFactory() {}

  virtual ExternalServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ExternalServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ExternalServiceIf> iface_;
};

class ExternalServiceNull : virtual public ExternalServiceIf {
 public:
  virtual ~ExternalServiceNull() {}
  void InvokeExternalService(TDDIDDIPackage& /* _return */, const TDDIDDIPackage& /* DDIPackage */, const std::string& /* ServiceId */, const std::vector<TDDIExternalServiceParameter> & /* ServiceParameter */) {
    return;
  }
};

typedef struct _ExternalService_InvokeExternalService_args__isset {
  _ExternalService_InvokeExternalService_args__isset() : DDIPackage(false), ServiceId(false), ServiceParameter(true) {}
  bool DDIPackage :1;
  bool ServiceId :1;
  bool ServiceParameter :1;
} _ExternalService_InvokeExternalService_args__isset;

class ExternalService_InvokeExternalService_args {
 public:

  ExternalService_InvokeExternalService_args(const ExternalService_InvokeExternalService_args&);
  ExternalService_InvokeExternalService_args& operator=(const ExternalService_InvokeExternalService_args&);
  ExternalService_InvokeExternalService_args() : ServiceId() {

  }

  virtual ~ExternalService_InvokeExternalService_args() throw();
  TDDIDDIPackage DDIPackage;
  std::string ServiceId;
  std::vector<TDDIExternalServiceParameter>  ServiceParameter;

  _ExternalService_InvokeExternalService_args__isset __isset;

  void __set_DDIPackage(const TDDIDDIPackage& val);

  void __set_ServiceId(const std::string& val);

  void __set_ServiceParameter(const std::vector<TDDIExternalServiceParameter> & val);

  bool operator == (const ExternalService_InvokeExternalService_args & rhs) const
  {
    if (!(DDIPackage == rhs.DDIPackage))
      return false;
    if (!(ServiceId == rhs.ServiceId))
      return false;
    if (!(ServiceParameter == rhs.ServiceParameter))
      return false;
    return true;
  }
  bool operator != (const ExternalService_InvokeExternalService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExternalService_InvokeExternalService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExternalService_InvokeExternalService_pargs {
 public:


  virtual ~ExternalService_InvokeExternalService_pargs() throw();
  const TDDIDDIPackage* DDIPackage;
  const std::string* ServiceId;
  const std::vector<TDDIExternalServiceParameter> * ServiceParameter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExternalService_InvokeExternalService_result__isset {
  _ExternalService_InvokeExternalService_result__isset() : success(false) {}
  bool success :1;
} _ExternalService_InvokeExternalService_result__isset;

class ExternalService_InvokeExternalService_result {
 public:

  ExternalService_InvokeExternalService_result(const ExternalService_InvokeExternalService_result&);
  ExternalService_InvokeExternalService_result& operator=(const ExternalService_InvokeExternalService_result&);
  ExternalService_InvokeExternalService_result() {
  }

  virtual ~ExternalService_InvokeExternalService_result() throw();
  TDDIDDIPackage success;

  _ExternalService_InvokeExternalService_result__isset __isset;

  void __set_success(const TDDIDDIPackage& val);

  bool operator == (const ExternalService_InvokeExternalService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ExternalService_InvokeExternalService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExternalService_InvokeExternalService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExternalService_InvokeExternalService_presult__isset {
  _ExternalService_InvokeExternalService_presult__isset() : success(false) {}
  bool success :1;
} _ExternalService_InvokeExternalService_presult__isset;

class ExternalService_InvokeExternalService_presult {
 public:


  virtual ~ExternalService_InvokeExternalService_presult() throw();
  TDDIDDIPackage* success;

  _ExternalService_InvokeExternalService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExternalServiceClient : virtual public ExternalServiceIf {
 public:
  ExternalServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ExternalServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void InvokeExternalService(TDDIDDIPackage& _return, const TDDIDDIPackage& DDIPackage, const std::string& ServiceId, const std::vector<TDDIExternalServiceParameter> & ServiceParameter);
  void send_InvokeExternalService(const TDDIDDIPackage& DDIPackage, const std::string& ServiceId, const std::vector<TDDIExternalServiceParameter> & ServiceParameter);
  void recv_InvokeExternalService(TDDIDDIPackage& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExternalServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ExternalServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ExternalServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_InvokeExternalService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExternalServiceProcessor(::apache::thrift::stdcxx::shared_ptr<ExternalServiceIf> iface) :
    iface_(iface) {
    processMap_["InvokeExternalService"] = &ExternalServiceProcessor::process_InvokeExternalService;
  }

  virtual ~ExternalServiceProcessor() {}
};

class ExternalServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ExternalServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ExternalServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ExternalServiceIfFactory > handlerFactory_;
};

class ExternalServiceMultiface : virtual public ExternalServiceIf {
 public:
  ExternalServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ExternalServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExternalServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ExternalServiceIf> > ifaces_;
  ExternalServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ExternalServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void InvokeExternalService(TDDIDDIPackage& _return, const TDDIDDIPackage& DDIPackage, const std::string& ServiceId, const std::vector<TDDIExternalServiceParameter> & ServiceParameter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InvokeExternalService(_return, DDIPackage, ServiceId, ServiceParameter);
    }
    ifaces_[i]->InvokeExternalService(_return, DDIPackage, ServiceId, ServiceParameter);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ExternalServiceConcurrentClient : virtual public ExternalServiceIf {
 public:
  ExternalServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ExternalServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void InvokeExternalService(TDDIDDIPackage& _return, const TDDIDDIPackage& DDIPackage, const std::string& ServiceId, const std::vector<TDDIExternalServiceParameter> & ServiceParameter);
  int32_t send_InvokeExternalService(const TDDIDDIPackage& DDIPackage, const std::string& ServiceId, const std::vector<TDDIExternalServiceParameter> & ServiceParameter);
  void recv_InvokeExternalService(TDDIDDIPackage& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
