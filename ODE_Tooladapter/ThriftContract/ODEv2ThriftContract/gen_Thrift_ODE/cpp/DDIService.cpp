/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DDIService.h"

namespace thriftContract {


DDIService_ExportModelToDDIFile_args::~DDIService_ExportModelToDDIFile_args() throw() {
}


uint32_t DDIService_ExportModelToDDIFile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ServiceConfiguration.read(iprot);
          this->__isset.ServiceConfiguration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DDIPackage.read(iprot);
          this->__isset.DDIPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ExportModelToDDIFile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ExportModelToDDIFile_args");

  xfer += oprot->writeFieldBegin("ServiceConfiguration", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ServiceConfiguration.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DDIPackage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->DDIPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExportModelToDDIFile_pargs::~DDIService_ExportModelToDDIFile_pargs() throw() {
}


uint32_t DDIService_ExportModelToDDIFile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ExportModelToDDIFile_pargs");

  xfer += oprot->writeFieldBegin("ServiceConfiguration", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->ServiceConfiguration)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DDIPackage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->DDIPackage)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExportModelToDDIFile_result::~DDIService_ExportModelToDDIFile_result() throw() {
}


uint32_t DDIService_ExportModelToDDIFile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->EpsilonScriptExecutionException.read(iprot);
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ExportModelToDDIFile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DDIService_ExportModelToDDIFile_result");

  if (this->__isset.EpsilonScriptExecutionException) {
    xfer += oprot->writeFieldBegin("EpsilonScriptExecutionException", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->EpsilonScriptExecutionException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExportModelToDDIFile_presult::~DDIService_ExportModelToDDIFile_presult() throw() {
}


uint32_t DDIService_ExportModelToDDIFile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->EpsilonScriptExecutionException.read(iprot);
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DDIService_ImportDDIModel_args::~DDIService_ImportDDIModel_args() throw() {
}


uint32_t DDIService_ImportDDIModel_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ServiceConfiguration.read(iprot);
          this->__isset.ServiceConfiguration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ImportDDIModel_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ImportDDIModel_args");

  xfer += oprot->writeFieldBegin("ServiceConfiguration", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ServiceConfiguration.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ImportDDIModel_pargs::~DDIService_ImportDDIModel_pargs() throw() {
}


uint32_t DDIService_ImportDDIModel_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ImportDDIModel_pargs");

  xfer += oprot->writeFieldBegin("ServiceConfiguration", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->ServiceConfiguration)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ImportDDIModel_result::~DDIService_ImportDDIModel_result() throw() {
}


uint32_t DDIService_ImportDDIModel_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->EpsilonScriptExecutionException.read(iprot);
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ImportDDIModel_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DDIService_ImportDDIModel_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.EpsilonScriptExecutionException) {
    xfer += oprot->writeFieldBegin("EpsilonScriptExecutionException", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->EpsilonScriptExecutionException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ImportDDIModel_presult::~DDIService_ImportDDIModel_presult() throw() {
}


uint32_t DDIService_ImportDDIModel_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->EpsilonScriptExecutionException.read(iprot);
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DDIService_ValidateDDI_args::~DDIService_ValidateDDI_args() throw() {
}


uint32_t DDIService_ValidateDDI_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DdiPath);
          this->__isset.DdiPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->EvlFilePath);
          this->__isset.EvlFilePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ValidateDDI_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ValidateDDI_args");

  xfer += oprot->writeFieldBegin("DdiPath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DdiPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("EvlFilePath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->EvlFilePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ValidateDDI_pargs::~DDIService_ValidateDDI_pargs() throw() {
}


uint32_t DDIService_ValidateDDI_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ValidateDDI_pargs");

  xfer += oprot->writeFieldBegin("DdiPath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->DdiPath)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("EvlFilePath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->EvlFilePath)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ValidateDDI_result::~DDIService_ValidateDDI_result() throw() {
}


uint32_t DDIService_ValidateDDI_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ValidateDDI_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DDIService_ValidateDDI_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ValidateDDI_presult::~DDIService_ValidateDDI_presult() throw() {
}


uint32_t DDIService_ValidateDDI_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DDIService_ExecuteEpsilonSriptsOnDDIFile_args::~DDIService_ExecuteEpsilonSriptsOnDDIFile_args() throw() {
}


uint32_t DDIService_ExecuteEpsilonSriptsOnDDIFile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ServiceConfiguration.read(iprot);
          this->__isset.ServiceConfiguration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->BackupDDIFile);
          this->__isset.BackupDDIFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ReturnDDIPackage);
          this->__isset.ReturnDDIPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ExecuteEpsilonSriptsOnDDIFile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ExecuteEpsilonSriptsOnDDIFile_args");

  xfer += oprot->writeFieldBegin("ServiceConfiguration", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->ServiceConfiguration.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BackupDDIFile", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->BackupDDIFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ReturnDDIPackage", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ReturnDDIPackage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExecuteEpsilonSriptsOnDDIFile_pargs::~DDIService_ExecuteEpsilonSriptsOnDDIFile_pargs() throw() {
}


uint32_t DDIService_ExecuteEpsilonSriptsOnDDIFile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ExecuteEpsilonSriptsOnDDIFile_pargs");

  xfer += oprot->writeFieldBegin("ServiceConfiguration", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->ServiceConfiguration)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BackupDDIFile", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool((*(this->BackupDDIFile)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ReturnDDIPackage", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool((*(this->ReturnDDIPackage)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExecuteEpsilonSriptsOnDDIFile_result::~DDIService_ExecuteEpsilonSriptsOnDDIFile_result() throw() {
}


uint32_t DDIService_ExecuteEpsilonSriptsOnDDIFile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->EpsilonScriptExecutionException.read(iprot);
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ExecuteEpsilonSriptsOnDDIFile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DDIService_ExecuteEpsilonSriptsOnDDIFile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.EpsilonScriptExecutionException) {
    xfer += oprot->writeFieldBegin("EpsilonScriptExecutionException", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->EpsilonScriptExecutionException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExecuteEpsilonSriptsOnDDIFile_presult::~DDIService_ExecuteEpsilonSriptsOnDDIFile_presult() throw() {
}


uint32_t DDIService_ExecuteEpsilonSriptsOnDDIFile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->EpsilonScriptExecutionException.read(iprot);
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


DDIService_ExecuteEpsilonSripts_args::~DDIService_ExecuteEpsilonSripts_args() throw() {
}


uint32_t DDIService_ExecuteEpsilonSripts_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->DDIPackage.read(iprot);
          this->__isset.DDIPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ServiceConfiguration.read(iprot);
          this->__isset.ServiceConfiguration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ExportDDIFile);
          this->__isset.ExportDDIFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ReturnDDIPackage);
          this->__isset.ReturnDDIPackage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ExecuteEpsilonSripts_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ExecuteEpsilonSripts_args");

  xfer += oprot->writeFieldBegin("DDIPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->DDIPackage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ServiceConfiguration", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ServiceConfiguration.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExportDDIFile", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ExportDDIFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ReturnDDIPackage", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->ReturnDDIPackage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExecuteEpsilonSripts_pargs::~DDIService_ExecuteEpsilonSripts_pargs() throw() {
}


uint32_t DDIService_ExecuteEpsilonSripts_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DDIService_ExecuteEpsilonSripts_pargs");

  xfer += oprot->writeFieldBegin("DDIPackage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->DDIPackage)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ServiceConfiguration", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->ServiceConfiguration)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ExportDDIFile", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool((*(this->ExportDDIFile)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ReturnDDIPackage", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool((*(this->ReturnDDIPackage)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExecuteEpsilonSripts_result::~DDIService_ExecuteEpsilonSripts_result() throw() {
}


uint32_t DDIService_ExecuteEpsilonSripts_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->EpsilonScriptExecutionException.read(iprot);
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DDIService_ExecuteEpsilonSripts_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("DDIService_ExecuteEpsilonSripts_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.EpsilonScriptExecutionException) {
    xfer += oprot->writeFieldBegin("EpsilonScriptExecutionException", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->EpsilonScriptExecutionException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


DDIService_ExecuteEpsilonSripts_presult::~DDIService_ExecuteEpsilonSripts_presult() throw() {
}


uint32_t DDIService_ExecuteEpsilonSripts_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->EpsilonScriptExecutionException.read(iprot);
          this->__isset.EpsilonScriptExecutionException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void DDIServiceClient::ExportModelToDDIFile(const TDDIServiceConfig& ServiceConfiguration, const TDDIDDIPackage& DDIPackage)
{
  send_ExportModelToDDIFile(ServiceConfiguration, DDIPackage);
  recv_ExportModelToDDIFile();
}

void DDIServiceClient::send_ExportModelToDDIFile(const TDDIServiceConfig& ServiceConfiguration, const TDDIDDIPackage& DDIPackage)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ExportModelToDDIFile", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ExportModelToDDIFile_pargs args;
  args.ServiceConfiguration = &ServiceConfiguration;
  args.DDIPackage = &DDIPackage;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DDIServiceClient::recv_ExportModelToDDIFile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ExportModelToDDIFile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DDIService_ExportModelToDDIFile_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.EpsilonScriptExecutionException) {
    throw result.EpsilonScriptExecutionException;
  }
  return;
}

void DDIServiceClient::ImportDDIModel(TDDIDDIPackage& _return, const TDDIServiceConfig& ServiceConfiguration)
{
  send_ImportDDIModel(ServiceConfiguration);
  recv_ImportDDIModel(_return);
}

void DDIServiceClient::send_ImportDDIModel(const TDDIServiceConfig& ServiceConfiguration)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ImportDDIModel", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ImportDDIModel_pargs args;
  args.ServiceConfiguration = &ServiceConfiguration;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DDIServiceClient::recv_ImportDDIModel(TDDIDDIPackage& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ImportDDIModel") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DDIService_ImportDDIModel_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.EpsilonScriptExecutionException) {
    throw result.EpsilonScriptExecutionException;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ImportDDIModel failed: unknown result");
}

void DDIServiceClient::ValidateDDI(TDDIValidationResult& _return, const std::string& DdiPath, const std::string& EvlFilePath)
{
  send_ValidateDDI(DdiPath, EvlFilePath);
  recv_ValidateDDI(_return);
}

void DDIServiceClient::send_ValidateDDI(const std::string& DdiPath, const std::string& EvlFilePath)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ValidateDDI", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ValidateDDI_pargs args;
  args.DdiPath = &DdiPath;
  args.EvlFilePath = &EvlFilePath;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DDIServiceClient::recv_ValidateDDI(TDDIValidationResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ValidateDDI") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DDIService_ValidateDDI_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ValidateDDI failed: unknown result");
}

void DDIServiceClient::ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return, const TDDIServiceConfig& ServiceConfiguration, const bool BackupDDIFile, const bool ReturnDDIPackage)
{
  send_ExecuteEpsilonSriptsOnDDIFile(ServiceConfiguration, BackupDDIFile, ReturnDDIPackage);
  recv_ExecuteEpsilonSriptsOnDDIFile(_return);
}

void DDIServiceClient::send_ExecuteEpsilonSriptsOnDDIFile(const TDDIServiceConfig& ServiceConfiguration, const bool BackupDDIFile, const bool ReturnDDIPackage)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ExecuteEpsilonSriptsOnDDIFile", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ExecuteEpsilonSriptsOnDDIFile_pargs args;
  args.ServiceConfiguration = &ServiceConfiguration;
  args.BackupDDIFile = &BackupDDIFile;
  args.ReturnDDIPackage = &ReturnDDIPackage;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DDIServiceClient::recv_ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ExecuteEpsilonSriptsOnDDIFile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DDIService_ExecuteEpsilonSriptsOnDDIFile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.EpsilonScriptExecutionException) {
    throw result.EpsilonScriptExecutionException;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ExecuteEpsilonSriptsOnDDIFile failed: unknown result");
}

void DDIServiceClient::ExecuteEpsilonSripts(TDDIDDIPackage& _return, const TDDIDDIPackage& DDIPackage, const TDDIServiceConfig& ServiceConfiguration, const bool ExportDDIFile, const bool ReturnDDIPackage)
{
  send_ExecuteEpsilonSripts(DDIPackage, ServiceConfiguration, ExportDDIFile, ReturnDDIPackage);
  recv_ExecuteEpsilonSripts(_return);
}

void DDIServiceClient::send_ExecuteEpsilonSripts(const TDDIDDIPackage& DDIPackage, const TDDIServiceConfig& ServiceConfiguration, const bool ExportDDIFile, const bool ReturnDDIPackage)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ExecuteEpsilonSripts", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ExecuteEpsilonSripts_pargs args;
  args.DDIPackage = &DDIPackage;
  args.ServiceConfiguration = &ServiceConfiguration;
  args.ExportDDIFile = &ExportDDIFile;
  args.ReturnDDIPackage = &ReturnDDIPackage;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void DDIServiceClient::recv_ExecuteEpsilonSripts(TDDIDDIPackage& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ExecuteEpsilonSripts") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  DDIService_ExecuteEpsilonSripts_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.EpsilonScriptExecutionException) {
    throw result.EpsilonScriptExecutionException;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ExecuteEpsilonSripts failed: unknown result");
}

bool DDIServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void DDIServiceProcessor::process_ExportModelToDDIFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("DDIService.ExportModelToDDIFile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DDIService.ExportModelToDDIFile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "DDIService.ExportModelToDDIFile");
  }

  DDIService_ExportModelToDDIFile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "DDIService.ExportModelToDDIFile", bytes);
  }

  DDIService_ExportModelToDDIFile_result result;
  try {
    iface_->ExportModelToDDIFile(args.ServiceConfiguration, args.DDIPackage);
  } catch (TDDIAbstractEpsilonScriptExecutionException &EpsilonScriptExecutionException) {
    result.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
    result.__isset.EpsilonScriptExecutionException = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "DDIService.ExportModelToDDIFile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ExportModelToDDIFile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "DDIService.ExportModelToDDIFile");
  }

  oprot->writeMessageBegin("ExportModelToDDIFile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "DDIService.ExportModelToDDIFile", bytes);
  }
}

void DDIServiceProcessor::process_ImportDDIModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("DDIService.ImportDDIModel", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DDIService.ImportDDIModel");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "DDIService.ImportDDIModel");
  }

  DDIService_ImportDDIModel_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "DDIService.ImportDDIModel", bytes);
  }

  DDIService_ImportDDIModel_result result;
  try {
    iface_->ImportDDIModel(result.success, args.ServiceConfiguration);
    result.__isset.success = true;
  } catch (TDDIAbstractEpsilonScriptExecutionException &EpsilonScriptExecutionException) {
    result.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
    result.__isset.EpsilonScriptExecutionException = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "DDIService.ImportDDIModel");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ImportDDIModel", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "DDIService.ImportDDIModel");
  }

  oprot->writeMessageBegin("ImportDDIModel", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "DDIService.ImportDDIModel", bytes);
  }
}

void DDIServiceProcessor::process_ValidateDDI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("DDIService.ValidateDDI", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DDIService.ValidateDDI");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "DDIService.ValidateDDI");
  }

  DDIService_ValidateDDI_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "DDIService.ValidateDDI", bytes);
  }

  DDIService_ValidateDDI_result result;
  try {
    iface_->ValidateDDI(result.success, args.DdiPath, args.EvlFilePath);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "DDIService.ValidateDDI");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ValidateDDI", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "DDIService.ValidateDDI");
  }

  oprot->writeMessageBegin("ValidateDDI", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "DDIService.ValidateDDI", bytes);
  }
}

void DDIServiceProcessor::process_ExecuteEpsilonSriptsOnDDIFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("DDIService.ExecuteEpsilonSriptsOnDDIFile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DDIService.ExecuteEpsilonSriptsOnDDIFile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "DDIService.ExecuteEpsilonSriptsOnDDIFile");
  }

  DDIService_ExecuteEpsilonSriptsOnDDIFile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "DDIService.ExecuteEpsilonSriptsOnDDIFile", bytes);
  }

  DDIService_ExecuteEpsilonSriptsOnDDIFile_result result;
  try {
    iface_->ExecuteEpsilonSriptsOnDDIFile(result.success, args.ServiceConfiguration, args.BackupDDIFile, args.ReturnDDIPackage);
    result.__isset.success = true;
  } catch (TDDIAbstractEpsilonScriptExecutionException &EpsilonScriptExecutionException) {
    result.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
    result.__isset.EpsilonScriptExecutionException = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "DDIService.ExecuteEpsilonSriptsOnDDIFile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ExecuteEpsilonSriptsOnDDIFile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "DDIService.ExecuteEpsilonSriptsOnDDIFile");
  }

  oprot->writeMessageBegin("ExecuteEpsilonSriptsOnDDIFile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "DDIService.ExecuteEpsilonSriptsOnDDIFile", bytes);
  }
}

void DDIServiceProcessor::process_ExecuteEpsilonSripts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("DDIService.ExecuteEpsilonSripts", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "DDIService.ExecuteEpsilonSripts");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "DDIService.ExecuteEpsilonSripts");
  }

  DDIService_ExecuteEpsilonSripts_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "DDIService.ExecuteEpsilonSripts", bytes);
  }

  DDIService_ExecuteEpsilonSripts_result result;
  try {
    iface_->ExecuteEpsilonSripts(result.success, args.DDIPackage, args.ServiceConfiguration, args.ExportDDIFile, args.ReturnDDIPackage);
    result.__isset.success = true;
  } catch (TDDIAbstractEpsilonScriptExecutionException &EpsilonScriptExecutionException) {
    result.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
    result.__isset.EpsilonScriptExecutionException = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "DDIService.ExecuteEpsilonSripts");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ExecuteEpsilonSripts", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "DDIService.ExecuteEpsilonSripts");
  }

  oprot->writeMessageBegin("ExecuteEpsilonSripts", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "DDIService.ExecuteEpsilonSripts", bytes);
  }
}

::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > DDIServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< DDIServiceIfFactory > cleanup(handlerFactory_);
  ::apache::thrift::stdcxx::shared_ptr< DDIServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > processor(new DDIServiceProcessor(handler));
  return processor;
}

void DDIServiceConcurrentClient::ExportModelToDDIFile(const TDDIServiceConfig& ServiceConfiguration, const TDDIDDIPackage& DDIPackage)
{
  int32_t seqid = send_ExportModelToDDIFile(ServiceConfiguration, DDIPackage);
  recv_ExportModelToDDIFile(seqid);
}

int32_t DDIServiceConcurrentClient::send_ExportModelToDDIFile(const TDDIServiceConfig& ServiceConfiguration, const TDDIDDIPackage& DDIPackage)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ExportModelToDDIFile", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ExportModelToDDIFile_pargs args;
  args.ServiceConfiguration = &ServiceConfiguration;
  args.DDIPackage = &DDIPackage;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DDIServiceConcurrentClient::recv_ExportModelToDDIFile(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ExportModelToDDIFile") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DDIService_ExportModelToDDIFile_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.EpsilonScriptExecutionException) {
        sentry.commit();
        throw result.EpsilonScriptExecutionException;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void DDIServiceConcurrentClient::ImportDDIModel(TDDIDDIPackage& _return, const TDDIServiceConfig& ServiceConfiguration)
{
  int32_t seqid = send_ImportDDIModel(ServiceConfiguration);
  recv_ImportDDIModel(_return, seqid);
}

int32_t DDIServiceConcurrentClient::send_ImportDDIModel(const TDDIServiceConfig& ServiceConfiguration)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ImportDDIModel", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ImportDDIModel_pargs args;
  args.ServiceConfiguration = &ServiceConfiguration;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DDIServiceConcurrentClient::recv_ImportDDIModel(TDDIDDIPackage& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ImportDDIModel") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DDIService_ImportDDIModel_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.EpsilonScriptExecutionException) {
        sentry.commit();
        throw result.EpsilonScriptExecutionException;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ImportDDIModel failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void DDIServiceConcurrentClient::ValidateDDI(TDDIValidationResult& _return, const std::string& DdiPath, const std::string& EvlFilePath)
{
  int32_t seqid = send_ValidateDDI(DdiPath, EvlFilePath);
  recv_ValidateDDI(_return, seqid);
}

int32_t DDIServiceConcurrentClient::send_ValidateDDI(const std::string& DdiPath, const std::string& EvlFilePath)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ValidateDDI", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ValidateDDI_pargs args;
  args.DdiPath = &DdiPath;
  args.EvlFilePath = &EvlFilePath;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DDIServiceConcurrentClient::recv_ValidateDDI(TDDIValidationResult& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ValidateDDI") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DDIService_ValidateDDI_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ValidateDDI failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void DDIServiceConcurrentClient::ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return, const TDDIServiceConfig& ServiceConfiguration, const bool BackupDDIFile, const bool ReturnDDIPackage)
{
  int32_t seqid = send_ExecuteEpsilonSriptsOnDDIFile(ServiceConfiguration, BackupDDIFile, ReturnDDIPackage);
  recv_ExecuteEpsilonSriptsOnDDIFile(_return, seqid);
}

int32_t DDIServiceConcurrentClient::send_ExecuteEpsilonSriptsOnDDIFile(const TDDIServiceConfig& ServiceConfiguration, const bool BackupDDIFile, const bool ReturnDDIPackage)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ExecuteEpsilonSriptsOnDDIFile", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ExecuteEpsilonSriptsOnDDIFile_pargs args;
  args.ServiceConfiguration = &ServiceConfiguration;
  args.BackupDDIFile = &BackupDDIFile;
  args.ReturnDDIPackage = &ReturnDDIPackage;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DDIServiceConcurrentClient::recv_ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ExecuteEpsilonSriptsOnDDIFile") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DDIService_ExecuteEpsilonSriptsOnDDIFile_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.EpsilonScriptExecutionException) {
        sentry.commit();
        throw result.EpsilonScriptExecutionException;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ExecuteEpsilonSriptsOnDDIFile failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void DDIServiceConcurrentClient::ExecuteEpsilonSripts(TDDIDDIPackage& _return, const TDDIDDIPackage& DDIPackage, const TDDIServiceConfig& ServiceConfiguration, const bool ExportDDIFile, const bool ReturnDDIPackage)
{
  int32_t seqid = send_ExecuteEpsilonSripts(DDIPackage, ServiceConfiguration, ExportDDIFile, ReturnDDIPackage);
  recv_ExecuteEpsilonSripts(_return, seqid);
}

int32_t DDIServiceConcurrentClient::send_ExecuteEpsilonSripts(const TDDIDDIPackage& DDIPackage, const TDDIServiceConfig& ServiceConfiguration, const bool ExportDDIFile, const bool ReturnDDIPackage)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ExecuteEpsilonSripts", ::apache::thrift::protocol::T_CALL, cseqid);

  DDIService_ExecuteEpsilonSripts_pargs args;
  args.DDIPackage = &DDIPackage;
  args.ServiceConfiguration = &ServiceConfiguration;
  args.ExportDDIFile = &ExportDDIFile;
  args.ReturnDDIPackage = &ReturnDDIPackage;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void DDIServiceConcurrentClient::recv_ExecuteEpsilonSripts(TDDIDDIPackage& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ExecuteEpsilonSripts") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      DDIService_ExecuteEpsilonSripts_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.EpsilonScriptExecutionException) {
        sentry.commit();
        throw result.EpsilonScriptExecutionException;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ExecuteEpsilonSripts failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

} // namespace

