/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DDIService_H
#define DDIService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "mergedDDIThriftContract_types.h"

namespace thriftContract {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DDIServiceIf {
 public:
  virtual ~DDIServiceIf() {}
  virtual void ExportModelToDDIFile(const std::string& DDIFilePath, const TDDIDDIPackage& DDIPackage) = 0;
  virtual void ImportDDIModel(TDDIDDIPackage& _return, const std::string& DDIFilePath) = 0;
  virtual void ValidateDDI(TDDIValidationResult& _return, const std::string& DDIFilePath, const std::string& EvlFilePath) = 0;
  virtual void ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return, const std::vector<TDDIEpsilonScriptExecutionConfig> & EpsilonScriptExecutionConfigs, const bool BackupDDIFile, const bool ReturnDDIPackage) = 0;
};

class DDIServiceIfFactory {
 public:
  typedef DDIServiceIf Handler;

  virtual ~DDIServiceIfFactory() {}

  virtual DDIServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DDIServiceIf* /* handler */) = 0;
};

class DDIServiceIfSingletonFactory : virtual public DDIServiceIfFactory {
 public:
  DDIServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<DDIServiceIf>& iface) : iface_(iface) {}
  virtual ~DDIServiceIfSingletonFactory() {}

  virtual DDIServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DDIServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<DDIServiceIf> iface_;
};

class DDIServiceNull : virtual public DDIServiceIf {
 public:
  virtual ~DDIServiceNull() {}
  void ExportModelToDDIFile(const std::string& /* DDIFilePath */, const TDDIDDIPackage& /* DDIPackage */) {
    return;
  }
  void ImportDDIModel(TDDIDDIPackage& /* _return */, const std::string& /* DDIFilePath */) {
    return;
  }
  void ValidateDDI(TDDIValidationResult& /* _return */, const std::string& /* DDIFilePath */, const std::string& /* EvlFilePath */) {
    return;
  }
  void ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& /* _return */, const std::vector<TDDIEpsilonScriptExecutionConfig> & /* EpsilonScriptExecutionConfigs */, const bool /* BackupDDIFile */, const bool /* ReturnDDIPackage */) {
    return;
  }
};

typedef struct _DDIService_ExportModelToDDIFile_args__isset {
  _DDIService_ExportModelToDDIFile_args__isset() : DDIFilePath(false), DDIPackage(false) {}
  bool DDIFilePath :1;
  bool DDIPackage :1;
} _DDIService_ExportModelToDDIFile_args__isset;

class DDIService_ExportModelToDDIFile_args {
 public:

  DDIService_ExportModelToDDIFile_args(const DDIService_ExportModelToDDIFile_args&);
  DDIService_ExportModelToDDIFile_args& operator=(const DDIService_ExportModelToDDIFile_args&);
  DDIService_ExportModelToDDIFile_args() : DDIFilePath() {
  }

  virtual ~DDIService_ExportModelToDDIFile_args() throw();
  std::string DDIFilePath;
  TDDIDDIPackage DDIPackage;

  _DDIService_ExportModelToDDIFile_args__isset __isset;

  void __set_DDIFilePath(const std::string& val);

  void __set_DDIPackage(const TDDIDDIPackage& val);

  bool operator == (const DDIService_ExportModelToDDIFile_args & rhs) const
  {
    if (!(DDIFilePath == rhs.DDIFilePath))
      return false;
    if (!(DDIPackage == rhs.DDIPackage))
      return false;
    return true;
  }
  bool operator != (const DDIService_ExportModelToDDIFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DDIService_ExportModelToDDIFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DDIService_ExportModelToDDIFile_pargs {
 public:


  virtual ~DDIService_ExportModelToDDIFile_pargs() throw();
  const std::string* DDIFilePath;
  const TDDIDDIPackage* DDIPackage;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DDIService_ExportModelToDDIFile_result__isset {
  _DDIService_ExportModelToDDIFile_result__isset() : EpsilonScriptExecutionException(false) {}
  bool EpsilonScriptExecutionException :1;
} _DDIService_ExportModelToDDIFile_result__isset;

class DDIService_ExportModelToDDIFile_result {
 public:

  DDIService_ExportModelToDDIFile_result(const DDIService_ExportModelToDDIFile_result&);
  DDIService_ExportModelToDDIFile_result& operator=(const DDIService_ExportModelToDDIFile_result&);
  DDIService_ExportModelToDDIFile_result() {
  }

  virtual ~DDIService_ExportModelToDDIFile_result() throw();
  TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException;

  _DDIService_ExportModelToDDIFile_result__isset __isset;

  void __set_EpsilonScriptExecutionException(const TDDIAbstractEpsilonScriptExecutionException& val);

  bool operator == (const DDIService_ExportModelToDDIFile_result & rhs) const
  {
    if (!(EpsilonScriptExecutionException == rhs.EpsilonScriptExecutionException))
      return false;
    return true;
  }
  bool operator != (const DDIService_ExportModelToDDIFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DDIService_ExportModelToDDIFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DDIService_ExportModelToDDIFile_presult__isset {
  _DDIService_ExportModelToDDIFile_presult__isset() : EpsilonScriptExecutionException(false) {}
  bool EpsilonScriptExecutionException :1;
} _DDIService_ExportModelToDDIFile_presult__isset;

class DDIService_ExportModelToDDIFile_presult {
 public:


  virtual ~DDIService_ExportModelToDDIFile_presult() throw();
  TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException;

  _DDIService_ExportModelToDDIFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DDIService_ImportDDIModel_args__isset {
  _DDIService_ImportDDIModel_args__isset() : DDIFilePath(false) {}
  bool DDIFilePath :1;
} _DDIService_ImportDDIModel_args__isset;

class DDIService_ImportDDIModel_args {
 public:

  DDIService_ImportDDIModel_args(const DDIService_ImportDDIModel_args&);
  DDIService_ImportDDIModel_args& operator=(const DDIService_ImportDDIModel_args&);
  DDIService_ImportDDIModel_args() : DDIFilePath() {
  }

  virtual ~DDIService_ImportDDIModel_args() throw();
  std::string DDIFilePath;

  _DDIService_ImportDDIModel_args__isset __isset;

  void __set_DDIFilePath(const std::string& val);

  bool operator == (const DDIService_ImportDDIModel_args & rhs) const
  {
    if (!(DDIFilePath == rhs.DDIFilePath))
      return false;
    return true;
  }
  bool operator != (const DDIService_ImportDDIModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DDIService_ImportDDIModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DDIService_ImportDDIModel_pargs {
 public:


  virtual ~DDIService_ImportDDIModel_pargs() throw();
  const std::string* DDIFilePath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DDIService_ImportDDIModel_result__isset {
  _DDIService_ImportDDIModel_result__isset() : success(false), EpsilonScriptExecutionException(false) {}
  bool success :1;
  bool EpsilonScriptExecutionException :1;
} _DDIService_ImportDDIModel_result__isset;

class DDIService_ImportDDIModel_result {
 public:

  DDIService_ImportDDIModel_result(const DDIService_ImportDDIModel_result&);
  DDIService_ImportDDIModel_result& operator=(const DDIService_ImportDDIModel_result&);
  DDIService_ImportDDIModel_result() {
  }

  virtual ~DDIService_ImportDDIModel_result() throw();
  TDDIDDIPackage success;
  TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException;

  _DDIService_ImportDDIModel_result__isset __isset;

  void __set_success(const TDDIDDIPackage& val);

  void __set_EpsilonScriptExecutionException(const TDDIAbstractEpsilonScriptExecutionException& val);

  bool operator == (const DDIService_ImportDDIModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(EpsilonScriptExecutionException == rhs.EpsilonScriptExecutionException))
      return false;
    return true;
  }
  bool operator != (const DDIService_ImportDDIModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DDIService_ImportDDIModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DDIService_ImportDDIModel_presult__isset {
  _DDIService_ImportDDIModel_presult__isset() : success(false), EpsilonScriptExecutionException(false) {}
  bool success :1;
  bool EpsilonScriptExecutionException :1;
} _DDIService_ImportDDIModel_presult__isset;

class DDIService_ImportDDIModel_presult {
 public:


  virtual ~DDIService_ImportDDIModel_presult() throw();
  TDDIDDIPackage* success;
  TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException;

  _DDIService_ImportDDIModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DDIService_ValidateDDI_args__isset {
  _DDIService_ValidateDDI_args__isset() : DDIFilePath(false), EvlFilePath(false) {}
  bool DDIFilePath :1;
  bool EvlFilePath :1;
} _DDIService_ValidateDDI_args__isset;

class DDIService_ValidateDDI_args {
 public:

  DDIService_ValidateDDI_args(const DDIService_ValidateDDI_args&);
  DDIService_ValidateDDI_args& operator=(const DDIService_ValidateDDI_args&);
  DDIService_ValidateDDI_args() : DDIFilePath(), EvlFilePath() {
  }

  virtual ~DDIService_ValidateDDI_args() throw();
  std::string DDIFilePath;
  std::string EvlFilePath;

  _DDIService_ValidateDDI_args__isset __isset;

  void __set_DDIFilePath(const std::string& val);

  void __set_EvlFilePath(const std::string& val);

  bool operator == (const DDIService_ValidateDDI_args & rhs) const
  {
    if (!(DDIFilePath == rhs.DDIFilePath))
      return false;
    if (!(EvlFilePath == rhs.EvlFilePath))
      return false;
    return true;
  }
  bool operator != (const DDIService_ValidateDDI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DDIService_ValidateDDI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DDIService_ValidateDDI_pargs {
 public:


  virtual ~DDIService_ValidateDDI_pargs() throw();
  const std::string* DDIFilePath;
  const std::string* EvlFilePath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DDIService_ValidateDDI_result__isset {
  _DDIService_ValidateDDI_result__isset() : success(false) {}
  bool success :1;
} _DDIService_ValidateDDI_result__isset;

class DDIService_ValidateDDI_result {
 public:

  DDIService_ValidateDDI_result(const DDIService_ValidateDDI_result&);
  DDIService_ValidateDDI_result& operator=(const DDIService_ValidateDDI_result&);
  DDIService_ValidateDDI_result() {
  }

  virtual ~DDIService_ValidateDDI_result() throw();
  TDDIValidationResult success;

  _DDIService_ValidateDDI_result__isset __isset;

  void __set_success(const TDDIValidationResult& val);

  bool operator == (const DDIService_ValidateDDI_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DDIService_ValidateDDI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DDIService_ValidateDDI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DDIService_ValidateDDI_presult__isset {
  _DDIService_ValidateDDI_presult__isset() : success(false) {}
  bool success :1;
} _DDIService_ValidateDDI_presult__isset;

class DDIService_ValidateDDI_presult {
 public:


  virtual ~DDIService_ValidateDDI_presult() throw();
  TDDIValidationResult* success;

  _DDIService_ValidateDDI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DDIService_ExecuteEpsilonSriptsOnDDIFile_args__isset {
  _DDIService_ExecuteEpsilonSriptsOnDDIFile_args__isset() : EpsilonScriptExecutionConfigs(false), BackupDDIFile(false), ReturnDDIPackage(false) {}
  bool EpsilonScriptExecutionConfigs :1;
  bool BackupDDIFile :1;
  bool ReturnDDIPackage :1;
} _DDIService_ExecuteEpsilonSriptsOnDDIFile_args__isset;

class DDIService_ExecuteEpsilonSriptsOnDDIFile_args {
 public:

  DDIService_ExecuteEpsilonSriptsOnDDIFile_args(const DDIService_ExecuteEpsilonSriptsOnDDIFile_args&);
  DDIService_ExecuteEpsilonSriptsOnDDIFile_args& operator=(const DDIService_ExecuteEpsilonSriptsOnDDIFile_args&);
  DDIService_ExecuteEpsilonSriptsOnDDIFile_args() : BackupDDIFile(0), ReturnDDIPackage(0) {
  }

  virtual ~DDIService_ExecuteEpsilonSriptsOnDDIFile_args() throw();
  std::vector<TDDIEpsilonScriptExecutionConfig>  EpsilonScriptExecutionConfigs;
  bool BackupDDIFile;
  bool ReturnDDIPackage;

  _DDIService_ExecuteEpsilonSriptsOnDDIFile_args__isset __isset;

  void __set_EpsilonScriptExecutionConfigs(const std::vector<TDDIEpsilonScriptExecutionConfig> & val);

  void __set_BackupDDIFile(const bool val);

  void __set_ReturnDDIPackage(const bool val);

  bool operator == (const DDIService_ExecuteEpsilonSriptsOnDDIFile_args & rhs) const
  {
    if (!(EpsilonScriptExecutionConfigs == rhs.EpsilonScriptExecutionConfigs))
      return false;
    if (!(BackupDDIFile == rhs.BackupDDIFile))
      return false;
    if (!(ReturnDDIPackage == rhs.ReturnDDIPackage))
      return false;
    return true;
  }
  bool operator != (const DDIService_ExecuteEpsilonSriptsOnDDIFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DDIService_ExecuteEpsilonSriptsOnDDIFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DDIService_ExecuteEpsilonSriptsOnDDIFile_pargs {
 public:


  virtual ~DDIService_ExecuteEpsilonSriptsOnDDIFile_pargs() throw();
  const std::vector<TDDIEpsilonScriptExecutionConfig> * EpsilonScriptExecutionConfigs;
  const bool* BackupDDIFile;
  const bool* ReturnDDIPackage;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DDIService_ExecuteEpsilonSriptsOnDDIFile_result__isset {
  _DDIService_ExecuteEpsilonSriptsOnDDIFile_result__isset() : success(false), EpsilonScriptExecutionException(false) {}
  bool success :1;
  bool EpsilonScriptExecutionException :1;
} _DDIService_ExecuteEpsilonSriptsOnDDIFile_result__isset;

class DDIService_ExecuteEpsilonSriptsOnDDIFile_result {
 public:

  DDIService_ExecuteEpsilonSriptsOnDDIFile_result(const DDIService_ExecuteEpsilonSriptsOnDDIFile_result&);
  DDIService_ExecuteEpsilonSriptsOnDDIFile_result& operator=(const DDIService_ExecuteEpsilonSriptsOnDDIFile_result&);
  DDIService_ExecuteEpsilonSriptsOnDDIFile_result() {
  }

  virtual ~DDIService_ExecuteEpsilonSriptsOnDDIFile_result() throw();
  TDDIDDIPackage success;
  TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException;

  _DDIService_ExecuteEpsilonSriptsOnDDIFile_result__isset __isset;

  void __set_success(const TDDIDDIPackage& val);

  void __set_EpsilonScriptExecutionException(const TDDIAbstractEpsilonScriptExecutionException& val);

  bool operator == (const DDIService_ExecuteEpsilonSriptsOnDDIFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(EpsilonScriptExecutionException == rhs.EpsilonScriptExecutionException))
      return false;
    return true;
  }
  bool operator != (const DDIService_ExecuteEpsilonSriptsOnDDIFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DDIService_ExecuteEpsilonSriptsOnDDIFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DDIService_ExecuteEpsilonSriptsOnDDIFile_presult__isset {
  _DDIService_ExecuteEpsilonSriptsOnDDIFile_presult__isset() : success(false), EpsilonScriptExecutionException(false) {}
  bool success :1;
  bool EpsilonScriptExecutionException :1;
} _DDIService_ExecuteEpsilonSriptsOnDDIFile_presult__isset;

class DDIService_ExecuteEpsilonSriptsOnDDIFile_presult {
 public:


  virtual ~DDIService_ExecuteEpsilonSriptsOnDDIFile_presult() throw();
  TDDIDDIPackage* success;
  TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException;

  _DDIService_ExecuteEpsilonSriptsOnDDIFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DDIServiceClient : virtual public DDIServiceIf {
 public:
  DDIServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DDIServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ExportModelToDDIFile(const std::string& DDIFilePath, const TDDIDDIPackage& DDIPackage);
  void send_ExportModelToDDIFile(const std::string& DDIFilePath, const TDDIDDIPackage& DDIPackage);
  void recv_ExportModelToDDIFile();
  void ImportDDIModel(TDDIDDIPackage& _return, const std::string& DDIFilePath);
  void send_ImportDDIModel(const std::string& DDIFilePath);
  void recv_ImportDDIModel(TDDIDDIPackage& _return);
  void ValidateDDI(TDDIValidationResult& _return, const std::string& DDIFilePath, const std::string& EvlFilePath);
  void send_ValidateDDI(const std::string& DDIFilePath, const std::string& EvlFilePath);
  void recv_ValidateDDI(TDDIValidationResult& _return);
  void ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return, const std::vector<TDDIEpsilonScriptExecutionConfig> & EpsilonScriptExecutionConfigs, const bool BackupDDIFile, const bool ReturnDDIPackage);
  void send_ExecuteEpsilonSriptsOnDDIFile(const std::vector<TDDIEpsilonScriptExecutionConfig> & EpsilonScriptExecutionConfigs, const bool BackupDDIFile, const bool ReturnDDIPackage);
  void recv_ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DDIServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<DDIServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DDIServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ExportModelToDDIFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ImportDDIModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ValidateDDI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecuteEpsilonSriptsOnDDIFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DDIServiceProcessor(::apache::thrift::stdcxx::shared_ptr<DDIServiceIf> iface) :
    iface_(iface) {
    processMap_["ExportModelToDDIFile"] = &DDIServiceProcessor::process_ExportModelToDDIFile;
    processMap_["ImportDDIModel"] = &DDIServiceProcessor::process_ImportDDIModel;
    processMap_["ValidateDDI"] = &DDIServiceProcessor::process_ValidateDDI;
    processMap_["ExecuteEpsilonSriptsOnDDIFile"] = &DDIServiceProcessor::process_ExecuteEpsilonSriptsOnDDIFile;
  }

  virtual ~DDIServiceProcessor() {}
};

class DDIServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DDIServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< DDIServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< DDIServiceIfFactory > handlerFactory_;
};

class DDIServiceMultiface : virtual public DDIServiceIf {
 public:
  DDIServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<DDIServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DDIServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<DDIServiceIf> > ifaces_;
  DDIServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<DDIServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ExportModelToDDIFile(const std::string& DDIFilePath, const TDDIDDIPackage& DDIPackage) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExportModelToDDIFile(DDIFilePath, DDIPackage);
    }
    ifaces_[i]->ExportModelToDDIFile(DDIFilePath, DDIPackage);
  }

  void ImportDDIModel(TDDIDDIPackage& _return, const std::string& DDIFilePath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ImportDDIModel(_return, DDIFilePath);
    }
    ifaces_[i]->ImportDDIModel(_return, DDIFilePath);
    return;
  }

  void ValidateDDI(TDDIValidationResult& _return, const std::string& DDIFilePath, const std::string& EvlFilePath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ValidateDDI(_return, DDIFilePath, EvlFilePath);
    }
    ifaces_[i]->ValidateDDI(_return, DDIFilePath, EvlFilePath);
    return;
  }

  void ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return, const std::vector<TDDIEpsilonScriptExecutionConfig> & EpsilonScriptExecutionConfigs, const bool BackupDDIFile, const bool ReturnDDIPackage) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecuteEpsilonSriptsOnDDIFile(_return, EpsilonScriptExecutionConfigs, BackupDDIFile, ReturnDDIPackage);
    }
    ifaces_[i]->ExecuteEpsilonSriptsOnDDIFile(_return, EpsilonScriptExecutionConfigs, BackupDDIFile, ReturnDDIPackage);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DDIServiceConcurrentClient : virtual public DDIServiceIf {
 public:
  DDIServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DDIServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ExportModelToDDIFile(const std::string& DDIFilePath, const TDDIDDIPackage& DDIPackage);
  int32_t send_ExportModelToDDIFile(const std::string& DDIFilePath, const TDDIDDIPackage& DDIPackage);
  void recv_ExportModelToDDIFile(const int32_t seqid);
  void ImportDDIModel(TDDIDDIPackage& _return, const std::string& DDIFilePath);
  int32_t send_ImportDDIModel(const std::string& DDIFilePath);
  void recv_ImportDDIModel(TDDIDDIPackage& _return, const int32_t seqid);
  void ValidateDDI(TDDIValidationResult& _return, const std::string& DDIFilePath, const std::string& EvlFilePath);
  int32_t send_ValidateDDI(const std::string& DDIFilePath, const std::string& EvlFilePath);
  void recv_ValidateDDI(TDDIValidationResult& _return, const int32_t seqid);
  void ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return, const std::vector<TDDIEpsilonScriptExecutionConfig> & EpsilonScriptExecutionConfigs, const bool BackupDDIFile, const bool ReturnDDIPackage);
  int32_t send_ExecuteEpsilonSriptsOnDDIFile(const std::vector<TDDIEpsilonScriptExecutionConfig> & EpsilonScriptExecutionConfigs, const bool BackupDDIFile, const bool ReturnDDIPackage);
  void recv_ExecuteEpsilonSriptsOnDDIFile(TDDIDDIPackage& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
