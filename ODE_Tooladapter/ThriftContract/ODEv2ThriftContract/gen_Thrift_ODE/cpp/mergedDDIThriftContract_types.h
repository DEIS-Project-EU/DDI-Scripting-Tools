/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mergedDDIThriftContract_TYPES_H
#define mergedDDIThriftContract_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace thriftContract {

enum TDDITimeUnit {
  TUMillisecond = 0,
  TUSecond = 1,
  TUMinute = 2,
  TUHour = 3,
  TUDay = 4,
  TUWeek = 5,
  TUMonth = 6,
  TUYear = 7
};

extern const std::map<int, const char*> _TDDITimeUnit_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDITimeUnit val);

enum TDDIBaseElementUnionType {
  BEUTConfiguration = 0,
  BEUTSystem = 1,
  BEUTFunction = 2,
  BEUTPerfChars = 3,
  BEUTSignal = 4,
  BEUTContext = 5,
  BEUTSystemBoundary = 6,
  BEUTPort = 7,
  BEUTLifecycleCondition = 8,
  BEUTDesignPackage = 9,
  BEUTMinimalCutSet = 10,
  BEUTMinimalCutSets = 11,
  BEUTFailureModel = 12,
  BEUTFailure = 13,
  BEUTProbDist = 14,
  BEUTProbDistParam = 15,
  BEUTFailureLogicPackage = 16,
  BEUTTransition = 17,
  BEUTState = 18,
  BEUTCause = 19,
  BEUTFMEAEntry = 20,
  BEUTMeasure = 21,
  BEUTMeasureType = 22,
  BEUTMaintenanceProcedure = 23,
  BEUTDependabilityPackage = 24,
  BEUTAbstractRequirementSource = 25,
  BEUTAbstractDependabilityRequirement = 26,
  BEUTRequirementPackage = 27,
  BEUTHazard = 28,
  BEUTMalfunction = 29,
  BEUTHazardType = 30,
  BEUTHazardTypeSystem = 31,
  BEUTRiskAssessment = 32,
  BEUTRiskParameter = 33,
  BEUTHARAPackage = 34,
  BEUTThreatAgent = 35,
  BEUTAttackerGoal = 36,
  BEUTSecurityRisk = 37,
  BEUTAttack = 38,
  BEUTSecurityCapability = 39,
  BEUTAsset = 40,
  BEUTVulnerability = 41,
  BEUTTARAPackage = 42,
  BEUTStandard = 43,
  BEUTAssuranceLevel = 44,
  BEUTDomainPackage = 45
};

extern const std::map<int, const char*> _TDDIBaseElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIBaseElementUnionType val);

enum TDDIODEProductPackageUnionType {
  OPPUTDesignPackage = 0,
  OPPUTFailureLogicPackage = 1,
  OPPUTRequirementPackage = 2,
  OPPUTHARAPackage = 3,
  OPPUTDependabilityPackage = 4,
  OPPUTTARAPackage = 5,
  OPPUTDomainPackage = 6
};

extern const std::map<int, const char*> _TDDIODEProductPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIODEProductPackageUnionType val);

enum TDDIPortDirection {
  PDIN = 0,
  PDOUT = 1,
  PDINOUT = 2
};

extern const std::map<int, const char*> _TDDIPortDirection_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIPortDirection val);

enum TDDISystemUnionType {
  SUTSystem = 0,
  SUTPhysicalComponent = 1,
  SUTLogicalComponent = 2,
  SUTSafetyRelatedSystem = 3
};

extern const std::map<int, const char*> _TDDISystemUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDISystemUnionType val);

enum TDDIFunctionUnionType {
  FUTFunction = 0,
  FUTSafetyFunction = 1
};

extern const std::map<int, const char*> _TDDIFunctionUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFunctionUnionType val);

enum TDDIFailureOriginType {
  FOTInput = 0,
  FOTOutput = 1,
  FOTInternal = 2
};

extern const std::map<int, const char*> _TDDIFailureOriginType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFailureOriginType val);

enum TDDIFailureUnionType {
  FAILUTFailure = 0,
  FAILUTSecurityViolation = 1
};

extern const std::map<int, const char*> _TDDIFailureUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFailureUnionType val);

enum TDDIFailureModelUnionType {
  FAMUTFailureModel = 0,
  FAMUTMarkovChain = 1,
  FAMUTFaultTree = 2,
  FAMUTFMEA = 3
};

extern const std::map<int, const char*> _TDDIFailureModelUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFailureModelUnionType val);

enum TDDIGateType {
  GTOR = 0,
  GTAND = 1,
  GTNOT = 2,
  GTXOR = 3,
  GTVOTE = 4,
  GTPAND = 5,
  GTPOR = 6,
  GTSAND = 7,
  InputEvent = 8,
  OutputEvent = 9
};

extern const std::map<int, const char*> _TDDIGateType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIGateType val);

enum TDDICauseType {
  CTInputEvent = 0,
  CTOutputEvent = 1,
  CTBasicEvent = 2,
  CTGate = 3
};

extern const std::map<int, const char*> _TDDICauseType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDICauseType val);

enum TDDICauseUnionType {
  CUTCause = 0,
  CutGate = 1
};

extern const std::map<int, const char*> _TDDICauseUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDICauseUnionType val);

enum TDDIFMEAEntryUnionType {
  FMEAEUTFMEAEntry = 0,
  FMEAEUTFMEDAEntry = 1
};

extern const std::map<int, const char*> _TDDIFMEAEntryUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFMEAEntryUnionType val);

enum TDDIFMEAType {
  FMEA = 0,
  FMEDA = 1
};

extern const std::map<int, const char*> _TDDIFMEAType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFMEAType val);

enum TDDIMeasureUnionType {
  MUTMeasure = 0,
  MUTFaultToleranceMeasure = 1,
  MUTSecurityControl = 2
};

extern const std::map<int, const char*> _TDDIMeasureUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIMeasureUnionType val);

enum TDDIStandardUnionType {
  SUTStandard = 0,
  SUTSafetyStandard = 1
};

extern const std::map<int, const char*> _TDDIStandardUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIStandardUnionType val);

enum TDDIRiskParameterUnionType {
  RPUTRiskParameter = 0,
  RPUTSituation = 1,
  RPUTAccident = 2,
  RPUTOperatorMeasure = 3
};

extern const std::map<int, const char*> _TDDIRiskParameterUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIRiskParameterUnionType val);

enum TDDIRequirementSourceUnionType {
  RSUTLegalContract = 0
};

extern const std::map<int, const char*> _TDDIRequirementSourceUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIRequirementSourceUnionType val);

enum TDDIDependabilityRequirementUnionType {
  DRUTSafetyRequirement = 0,
  DRUTSecurityRequirement = 1
};

extern const std::map<int, const char*> _TDDIDependabilityRequirementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityRequirementUnionType val);

enum TDDIFinancialCostType {
  FCTUSD = 0,
  FCTEUR = 1,
  FCTGBP = 2
};

extern const std::map<int, const char*> _TDDIFinancialCostType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIFinancialCostType val);

enum TDDISecurityApplicationType {
  SATPreventive = 0,
  SATActive = 1,
  SATPassive = 2
};

extern const std::map<int, const char*> _TDDISecurityApplicationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDISecurityApplicationType val);

enum TDDIOperationalCostType {
  OCTWorkhours = 0,
  OCTWorkdays = 1,
  OCTWorkmonths = 2
};

extern const std::map<int, const char*> _TDDIOperationalCostType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIOperationalCostType val);

enum TDDIAbstractAssetUnionType {
  AAUTAsset = 0,
  AAUTVulnerableItem = 1
};

extern const std::map<int, const char*> _TDDIAbstractAssetUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssetUnionType val);

enum TDDIAbstractThreatAgentUnionType {
  ATAUTThreatAgent = 0,
  ATAUTHuman = 1,
  ATAUTNonHuman = 2
};

extern const std::map<int, const char*> _TDDIAbstractThreatAgentUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAbstractThreatAgentUnionType val);

enum TDDIAbstractAttackUnionType {
  AAUTAttack = 0,
  AAUTAction = 1,
  AAUTPayload = 2
};

extern const std::map<int, const char*> _TDDIAbstractAttackUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAttackUnionType val);

enum TDDIAssertionDeclaration {
  ADAsserted = 0,
  ADNeedsSupport = 1,
  ADAssumed = 2,
  ADAxiomatic = 3,
  ADDefeated = 4,
  ADAsCited = 5
};

extern const std::map<int, const char*> _TDDIAssertionDeclaration_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAssertionDeclaration val);

enum TDDIArgumentationElementUnionType {
  AEUTArgumentGroup = 0,
  AEUTAbstractArgumentPackage = 1,
  AEUTAbstractArgumentAsset = 2
};

extern const std::map<int, const char*> _TDDIArgumentationElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArgumentationElementUnionType val);

enum TDDIArgumentPackageUnionType {
  APUTArgumentPackage = 0,
  APUTArgumentPackageInterface = 1,
  APUTArgumentPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIArgumentPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageUnionType val);

enum TDDIArgumentAssetUnionType {
  AAUTAbstractAssertion = 0,
  AAUTArgumentReasoning = 1,
  AAUTArtifactReference = 2
};

extern const std::map<int, const char*> _TDDIArgumentAssetUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArgumentAssetUnionType val);

enum TDDIAssertionUnionType {
  AUTClaim = 0,
  AUTAbstractAssertedRelationship = 1
};

extern const std::map<int, const char*> _TDDIAssertionUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAssertionUnionType val);

enum TDDIAssertedRelationshipUnionType {
  ARUTAssertedArtifactSupport = 0,
  ARUTAssertedArtifactContext = 1,
  ARUTAssertedInference = 2,
  ARUTAssertedEvidence = 3,
  ARUTAssertedContext = 4
};

extern const std::map<int, const char*> _TDDIAssertedRelationshipUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAssertedRelationshipUnionType val);

enum TDDIArtifactPackageUnionType {
  APUTArtifactPackage = 0,
  APUTArtifactPackageInterface = 1,
  APUTArtifactPackageBinding = 2
};

extern const std::map<int, const char*> _TDDIArtifactPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageUnionType val);

enum TDDIArtifactAssetUnionType {
  AAUTProperty = 0,
  AAUTTechnique = 1,
  AAUTParticipant = 2,
  AAUTActivity = 3,
  AAUTEvent = 4,
  AAUTResource = 5,
  AAUTArtifact = 6,
  AAUTArtifactAssetRelationship = 7
};

extern const std::map<int, const char*> _TDDIArtifactAssetUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetUnionType val);

enum TDDIAssuranceCasePackageUnionType {
  ACPUTAssuranceCasePackage = 0,
  ACPUTAssuranceCasePackageInterface = 1,
  ACPUTAssuranceCasePackageBinding = 2
};

extern const std::map<int, const char*> _TDDIAssuranceCasePackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageUnionType val);

enum TDDILangStringUnionType {
  LSUTLangString = 0,
  LSUTExpressionLangString = 1
};

extern const std::map<int, const char*> _TDDILangStringUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDILangStringUnionType val);

enum TDDIUtilityElementUnionType {
  UEUTDescription = 0,
  UEUTImplementationConstraint = 1,
  UEUTNote = 2,
  UEUTTaggedValue = 3
};

extern const std::map<int, const char*> _TDDIUtilityElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIUtilityElementUnionType val);

enum TDDIArtifactElementUnionType {
  AEUTAbstractTerminologyElement = 0,
  AEUTAbstractAssuranceCasePackage = 1,
  AEUTAbstractArtifactPackage = 2,
  AEUTArtifactGroup = 3,
  AEUTAbstractArtifactAsset = 4,
  AEUTAbstractArgumentationElement = 5
};

extern const std::map<int, const char*> _TDDIArtifactElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIArtifactElementUnionType val);

enum TDDIModelElementUnionType {
  MEUTAbstractArtifactElement = 0
};

extern const std::map<int, const char*> _TDDIModelElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIModelElementUnionType val);

enum TDDISACMElementUnionType {
  EUTAbstractUtilityElement = 0,
  EUTAbstractModelElement = 1
};

extern const std::map<int, const char*> _TDDISACMElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDISACMElementUnionType val);

enum TDDIElementUnionType {
  EUTAbstractLangString = 0,
  EUTMultiLangString = 1,
  EUTAbstractSACMElement = 2
};

extern const std::map<int, const char*> _TDDIElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIElementUnionType val);

enum TDDITerminologyElementUnionType {
  TEUTTerminologyGroup = 0,
  TEUTAbstractTerminologyPackage = 1,
  TEUTAbstractTerminologyAsset = 2
};

extern const std::map<int, const char*> _TDDITerminologyElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDITerminologyElementUnionType val);

enum TDDITerminologyPackageUnionType {
  TPUTTerminologyPackage = 0,
  TPUTTerminologyPackageBinding = 1,
  TPUTTerminologyPackageInterface = 2
};

extern const std::map<int, const char*> _TDDITerminologyPackageUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageUnionType val);

enum TDDIExpressionElementUnionType {
  EEUTExpression = 0,
  EEUTTerm = 1
};

extern const std::map<int, const char*> _TDDIExpressionElementUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIExpressionElementUnionType val);

enum TDDITerminologyAssetUnionType {
  TAUTCategory = 0,
  TAUTAbstractExpressionElement = 1
};

extern const std::map<int, const char*> _TDDITerminologyAssetUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDITerminologyAssetUnionType val);

enum TDDIEpsilonScriptExecutionExceptionUnionType {
  ESEEUTEpsilonScriptExecutionException = 0,
  ESEEUTValidationFailedException = 1
};

extern const std::map<int, const char*> _TDDIEpsilonScriptExecutionExceptionUnionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptExecutionExceptionUnionType val);

enum TDDIEpsilonLanguage {
  ELEOL = 0,
  ELEVL = 1,
  ELETL = 2,
  ELEWL = 3,
  ELEGL = 4,
  ELECL = 5,
  ELEML = 6,
  ELEPL = 7
};

extern const std::map<int, const char*> _TDDIEpsilonLanguage_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonLanguage val);

class TDDIAbstractDependabilityRequirementRef;

class TDDIAbstractSystemRef;

class TDDIAbstractFunctionRef;

class TDDIPortRef;

class TDDIAbstractStandardRef;

class TDDIMalfunctionRef;

class TDDILogicalComponentRef;

class TDDIAssuranceLevelRef;

class TDDIAbstractFailureRef;

class TDDIAbstractFailureModelRef;

class TDDISecurityViolationRef;

class TDDIAbstractCauseRef;

class TDDIAbstractMeasureRef;

class TDDIAbstractRiskParameterRef;

class TDDIHazardTypeRef;

class TDDIHazardRef;

class TDDIStateRef;

class TDDIMaintenanceProcedureRef;

class TDDIVulnerabilityRef;

class TDDIVulnerableItemRef;

class TDDISecurityControlRef;

class TDDIAttackerGoalRef;

class TDDIActionRef;

class TDDIPayloadRef;

class TDDISecurityCapabilityRef;

class TDDIImplementationConstraintRef;

class TDDINoteRef;

class TDDITaggedValueRef;

class TDDIAbstractArtifactElementRef;

class TDDIClaimRef;

class TDDIAbstractArgumentPackageRef;

class TDDIAbstractArgumentationElementRef;

class TDDIAbstractArgumentAssetRef;

class TDDIPropertyRef;

class TDDIAbstractArtifactAssetRef;

class TDDIAbstractAssuranceCasePackageRef;

class TDDIAssuranceCasePackageInterfaceRef;

class TDDIAbstractArtifactPackageRef;

class TDDIAbstractTerminologyPackageRef;

class TDDIAbstractExpressionElementRef;

class TDDICategoryRef;

class TDDIBaseElementUnion;

class TDDIAbstractBaseElement;

class TDDIValue;

class TDDIKeyValueMap;

class TDDIMeasureType;

class TDDIMeasure;

class TDDIFaultToleranceMeasure;

class TDDIMeasureUnion;

class TDDIAbstractMeasure;

class TDDIMaintenanceProcedure;

class TDDIDependabilityPackage;

class TDDIPort;

class TDDISystemBoundary;

class TDDISignal;

class TDDIPerfChars;

class TDDIFunction;

class TDDISafetyFunction;

class TDDIFunctionUnion;

class TDDIAbstractFunction;

class TDDIConfiguration;

class TDDIContext;

class TDDISystem;

class TDDILogicalComponent;

class TDDISafetyRelatedSystem;

class TDDILifecycleCondition;

class TDDIPhysicalComponent;

class TDDISystemUnion;

class TDDIAbstractSystem;

class TDDIDesignPackage;

class TDDIDomainPackage;

class TDDIAssuranceLevel;

class TDDIStandard;

class TDDISafetyStandard;

class TDDIStandardUnion;

class TDDIAbstractStandard;

class TDDIProbDistParam;

class TDDIProbDist;

class TDDIFailure;

class TDDISecurityViolation;

class TDDIFailureUnion;

class TDDIAbstractFailure;

class TDDIMinimalCutSet;

class TDDIMinimalCutSets;

class TDDIFailureModel;

class TDDIFailureModelUnion;

class TDDIAbstractFailureModel;

class TDDIFailureLogicPackage;

class TDDIFMEAEntry;

class TDDIFMEDAEntry;

class TDDIFMEAEntryUnion;

class TDDIAbstractFMEAEntry;

class TDDIFMEA;

class TDDICause;

class TDDIGate;

class TDDICauseUnion;

class TDDIAbstractCause;

class TDDIFaultTree;

class TDDIHazardType;

class TDDIHazardTypeSystem;

class TDDIRiskParameter;

class TDDISituation;

class TDDIAccident;

class TDDIOperatorMeasure;

class TDDIRiskParameterUnion;

class TDDIAbstractRiskParameter;

class TDDIHazard;

class TDDIRiskAssessment;

class TDDIMalfunction;

class TDDIHARAPackage;

class TDDIDDIPackage;

class TDDIODEProductPackageUnion;

class TDDIAbstractODEProductPackage;

class TDDIState;

class TDDITransition;

class TDDIMarkovChain;

class TDDILegalContract;

class TDDIRequirementSourceUnion;

class TDDIAbstractRequirementSource;

class TDDISafetyRequirement;

class TDDISecurityRequirement;

class TDDIDependabilityRequirementUnion;

class TDDIAbstractDependabilityRequirement;

class TDDIRequirementPackage;

class TDDIArtifactReference;

class TDDIArgumentationElementUnion;

class TDDIAbstractArgumentationElement;

class TDDIArgumentGroup;

class TDDIArgumentPackageUnion;

class TDDIAbstractArgumentPackage;

class TDDIArgumentPackage;

class TDDIArgumentPackageInterface;

class TDDIArgumentPackageBinding;

class TDDIArgumentAssetUnion;

class TDDIAbstractArgumentAsset;

class TDDIArgumentReasoning;

class TDDIClaim;

class TDDIAssertionUnion;

class TDDIAbstractAssertion;

class TDDIAssertedArtifactSupport;

class TDDIAssertedArtifactContext;

class TDDIAssertedInference;

class TDDIAssertedEvidence;

class TDDIAssertedContext;

class TDDIAssertedRelationshipUnion;

class TDDIAbstractAssertedRelationship;

class TDDIArtifactPackageUnion;

class TDDIAbstractArtifactPackage;

class TDDIArtifactPackage;

class TDDIArtifactPackageInterface;

class TDDIArtifactPackageBinding;

class TDDIArtifactGroup;

class TDDIProperty;

class TDDITechnique;

class TDDIParticipant;

class TDDIActivity;

class TDDIEvent;

class TDDIResource;

class TDDIArtifact;

class TDDIArtifactAssetRelationship;

class TDDIArtifactAssetUnion;

class TDDIAbstractArtifactAsset;

class TDDIAssuranceCasePackageUnion;

class TDDIAbstractAssuranceCasePackage;

class TDDIAssuranceCasePackage;

class TDDIAssuranceCasePackageInterface;

class TDDIAssuranceCasePackageBinding;

class TDDILangString;

class TDDIExpressionLangString;

class TDDILangStringUnion;

class TDDIAbstractLangString;

class TDDIMultiLangString;

class TDDIDescription;

class TDDIImplementationConstraint;

class TDDINote;

class TDDITaggedValue;

class TDDIUtilityElementUnion;

class TDDIAbstractUtilityElement;

class TDDIArtifactElementUnion;

class TDDIAbstractArtifactElement;

class TDDIModelElementUnion;

class TDDIAbstractModelElement;

class TDDISACMElementUnion;

class TDDIAbstractSACMElement;

class TDDIElementUnion;

class TDDIAbstractElement;

class TDDITerminologyElementUnion;

class TDDIAbstractTerminologyElement;

class TDDITerminologyGroup;

class TDDITerminologyPackageUnion;

class TDDIAbstractTerminologyPackage;

class TDDITerminologyPackage;

class TDDITerminologyPackageBinding;

class TDDITerminologyPackageInterface;

class TDDICategory;

class TDDIExpression;

class TDDITerm;

class TDDIExpressionElementUnion;

class TDDIAbstractExpressionElement;

class TDDITerminologyAssetUnion;

class TDDIAbstractTerminologyAsset;

class TDDIAbstractEpsilonScriptExecutionException;

class TDDIEpsilonScriptExecutionExceptionUnion;

class TDDIEpsilonScriptExecutionException;

class TDDIValidationFailedException;

class TDDIValidationResult;

class TDDIValidationViolationMessage;

class TDDIServiceConfig;

class TDDIEpsilonScriptExecutionConfig;

class TDDIEpsilonScriptModelConfig;

class TDDIEpsilonParameter;

class TDDIExternalServiceParameter;

class TDDIVulnerability;

class TDDIAsset;

class TDDIVulnerableItem;

class TDDIAbstractAssetUnion;

class TDDIAbstractAsset;

class TDDISecurityControl;

class TDDISecurityCapability;

class TDDISecurityRisk;

class TDDIAttack;

class TDDIAction;

class TDDIPayload;

class TDDIAbstractAttackUnion;

class TDDIAbstractAttack;

class TDDIAttackerGoal;

class TDDIThreatAgent;

class TDDIHuman;

class TDDINonHuman;

class TDDIAbstractThreatAgentUnion;

class TDDIAbstractThreatAgent;

class TDDITARAPackage;

typedef struct _TDDIAbstractDependabilityRequirementRef__isset {
  _TDDIAbstractDependabilityRequirementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractDependabilityRequirementRef__isset;

class TDDIAbstractDependabilityRequirementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDependabilityRequirementRef(const TDDIAbstractDependabilityRequirementRef&);
  TDDIAbstractDependabilityRequirementRef& operator=(const TDDIAbstractDependabilityRequirementRef&);
  TDDIAbstractDependabilityRequirementRef() : ref() {
  }

  virtual ~TDDIAbstractDependabilityRequirementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> ref;

  _TDDIAbstractDependabilityRequirementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> val);

  bool operator == (const TDDIAbstractDependabilityRequirementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDependabilityRequirementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDependabilityRequirementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDependabilityRequirementRef &a, TDDIAbstractDependabilityRequirementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityRequirementRef& obj);

typedef struct _TDDIAbstractSystemRef__isset {
  _TDDIAbstractSystemRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractSystemRef__isset;

class TDDIAbstractSystemRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractSystemRef(const TDDIAbstractSystemRef&);
  TDDIAbstractSystemRef& operator=(const TDDIAbstractSystemRef&);
  TDDIAbstractSystemRef() : ref() {
  }

  virtual ~TDDIAbstractSystemRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> ref;

  _TDDIAbstractSystemRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> val);

  bool operator == (const TDDIAbstractSystemRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractSystemRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractSystemRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractSystemRef &a, TDDIAbstractSystemRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractSystemRef& obj);

typedef struct _TDDIAbstractFunctionRef__isset {
  _TDDIAbstractFunctionRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFunctionRef__isset;

class TDDIAbstractFunctionRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFunctionRef(const TDDIAbstractFunctionRef&);
  TDDIAbstractFunctionRef& operator=(const TDDIAbstractFunctionRef&);
  TDDIAbstractFunctionRef() : ref() {
  }

  virtual ~TDDIAbstractFunctionRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> ref;

  _TDDIAbstractFunctionRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> val);

  bool operator == (const TDDIAbstractFunctionRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFunctionRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFunctionRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFunctionRef &a, TDDIAbstractFunctionRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFunctionRef& obj);

typedef struct _TDDIPortRef__isset {
  _TDDIPortRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIPortRef__isset;

class TDDIPortRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIPortRef(const TDDIPortRef&);
  TDDIPortRef& operator=(const TDDIPortRef&);
  TDDIPortRef() : ref() {
  }

  virtual ~TDDIPortRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIPort> ref;

  _TDDIPortRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val);

  bool operator == (const TDDIPortRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIPortRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPortRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPortRef &a, TDDIPortRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIPortRef& obj);

typedef struct _TDDIAbstractStandardRef__isset {
  _TDDIAbstractStandardRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractStandardRef__isset;

class TDDIAbstractStandardRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractStandardRef(const TDDIAbstractStandardRef&);
  TDDIAbstractStandardRef& operator=(const TDDIAbstractStandardRef&);
  TDDIAbstractStandardRef() : ref() {
  }

  virtual ~TDDIAbstractStandardRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> ref;

  _TDDIAbstractStandardRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> val);

  bool operator == (const TDDIAbstractStandardRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractStandardRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractStandardRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractStandardRef &a, TDDIAbstractStandardRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractStandardRef& obj);

typedef struct _TDDIMalfunctionRef__isset {
  _TDDIMalfunctionRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIMalfunctionRef__isset;

class TDDIMalfunctionRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIMalfunctionRef(const TDDIMalfunctionRef&);
  TDDIMalfunctionRef& operator=(const TDDIMalfunctionRef&);
  TDDIMalfunctionRef() : ref() {
  }

  virtual ~TDDIMalfunctionRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIMalfunction> ref;

  _TDDIMalfunctionRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMalfunction> val);

  bool operator == (const TDDIMalfunctionRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIMalfunctionRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMalfunctionRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMalfunctionRef &a, TDDIMalfunctionRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIMalfunctionRef& obj);

typedef struct _TDDILogicalComponentRef__isset {
  _TDDILogicalComponentRef__isset() : ref(false) {}
  bool ref :1;
} _TDDILogicalComponentRef__isset;

class TDDILogicalComponentRef : public virtual ::apache::thrift::TBase {
 public:

  TDDILogicalComponentRef(const TDDILogicalComponentRef&);
  TDDILogicalComponentRef& operator=(const TDDILogicalComponentRef&);
  TDDILogicalComponentRef() : ref() {
  }

  virtual ~TDDILogicalComponentRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDILogicalComponent> ref;

  _TDDILogicalComponentRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDILogicalComponent> val);

  bool operator == (const TDDILogicalComponentRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDILogicalComponentRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILogicalComponentRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILogicalComponentRef &a, TDDILogicalComponentRef &b);

std::ostream& operator<<(std::ostream& out, const TDDILogicalComponentRef& obj);

typedef struct _TDDIAssuranceLevelRef__isset {
  _TDDIAssuranceLevelRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAssuranceLevelRef__isset;

class TDDIAssuranceLevelRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceLevelRef(const TDDIAssuranceLevelRef&);
  TDDIAssuranceLevelRef& operator=(const TDDIAssuranceLevelRef&);
  TDDIAssuranceLevelRef() : ref() {
  }

  virtual ~TDDIAssuranceLevelRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> ref;

  _TDDIAssuranceLevelRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  bool operator == (const TDDIAssuranceLevelRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceLevelRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceLevelRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceLevelRef &a, TDDIAssuranceLevelRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceLevelRef& obj);

typedef struct _TDDIAbstractFailureRef__isset {
  _TDDIAbstractFailureRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFailureRef__isset;

class TDDIAbstractFailureRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailureRef(const TDDIAbstractFailureRef&);
  TDDIAbstractFailureRef& operator=(const TDDIAbstractFailureRef&);
  TDDIAbstractFailureRef() : ref() {
  }

  virtual ~TDDIAbstractFailureRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> ref;

  _TDDIAbstractFailureRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  bool operator == (const TDDIAbstractFailureRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailureRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailureRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailureRef &a, TDDIAbstractFailureRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureRef& obj);

typedef struct _TDDIAbstractFailureModelRef__isset {
  _TDDIAbstractFailureModelRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractFailureModelRef__isset;

class TDDIAbstractFailureModelRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailureModelRef(const TDDIAbstractFailureModelRef&);
  TDDIAbstractFailureModelRef& operator=(const TDDIAbstractFailureModelRef&);
  TDDIAbstractFailureModelRef() : ref() {
  }

  virtual ~TDDIAbstractFailureModelRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureModel> ref;

  _TDDIAbstractFailureModelRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailureModel> val);

  bool operator == (const TDDIAbstractFailureModelRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailureModelRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailureModelRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailureModelRef &a, TDDIAbstractFailureModelRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureModelRef& obj);

typedef struct _TDDISecurityViolationRef__isset {
  _TDDISecurityViolationRef__isset() : ref(false) {}
  bool ref :1;
} _TDDISecurityViolationRef__isset;

class TDDISecurityViolationRef : public virtual ::apache::thrift::TBase {
 public:

  TDDISecurityViolationRef(const TDDISecurityViolationRef&);
  TDDISecurityViolationRef& operator=(const TDDISecurityViolationRef&);
  TDDISecurityViolationRef() : ref() {
  }

  virtual ~TDDISecurityViolationRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDISecurityViolation> ref;

  _TDDISecurityViolationRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDISecurityViolation> val);

  bool operator == (const TDDISecurityViolationRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDISecurityViolationRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISecurityViolationRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISecurityViolationRef &a, TDDISecurityViolationRef &b);

std::ostream& operator<<(std::ostream& out, const TDDISecurityViolationRef& obj);

typedef struct _TDDIAbstractCauseRef__isset {
  _TDDIAbstractCauseRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractCauseRef__isset;

class TDDIAbstractCauseRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractCauseRef(const TDDIAbstractCauseRef&);
  TDDIAbstractCauseRef& operator=(const TDDIAbstractCauseRef&);
  TDDIAbstractCauseRef() : ref() {
  }

  virtual ~TDDIAbstractCauseRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractCause> ref;

  _TDDIAbstractCauseRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractCause> val);

  bool operator == (const TDDIAbstractCauseRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractCauseRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractCauseRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractCauseRef &a, TDDIAbstractCauseRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractCauseRef& obj);

typedef struct _TDDIAbstractMeasureRef__isset {
  _TDDIAbstractMeasureRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractMeasureRef__isset;

class TDDIAbstractMeasureRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractMeasureRef(const TDDIAbstractMeasureRef&);
  TDDIAbstractMeasureRef& operator=(const TDDIAbstractMeasureRef&);
  TDDIAbstractMeasureRef() : ref() {
  }

  virtual ~TDDIAbstractMeasureRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> ref;

  _TDDIAbstractMeasureRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> val);

  bool operator == (const TDDIAbstractMeasureRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractMeasureRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractMeasureRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractMeasureRef &a, TDDIAbstractMeasureRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractMeasureRef& obj);

typedef struct _TDDIAbstractRiskParameterRef__isset {
  _TDDIAbstractRiskParameterRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractRiskParameterRef__isset;

class TDDIAbstractRiskParameterRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRiskParameterRef(const TDDIAbstractRiskParameterRef&);
  TDDIAbstractRiskParameterRef& operator=(const TDDIAbstractRiskParameterRef&);
  TDDIAbstractRiskParameterRef() : ref() {
  }

  virtual ~TDDIAbstractRiskParameterRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> ref;

  _TDDIAbstractRiskParameterRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> val);

  bool operator == (const TDDIAbstractRiskParameterRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRiskParameterRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRiskParameterRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRiskParameterRef &a, TDDIAbstractRiskParameterRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRiskParameterRef& obj);

typedef struct _TDDIHazardTypeRef__isset {
  _TDDIHazardTypeRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIHazardTypeRef__isset;

class TDDIHazardTypeRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazardTypeRef(const TDDIHazardTypeRef&);
  TDDIHazardTypeRef& operator=(const TDDIHazardTypeRef&);
  TDDIHazardTypeRef() : ref() {
  }

  virtual ~TDDIHazardTypeRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> ref;

  _TDDIHazardTypeRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> val);

  bool operator == (const TDDIHazardTypeRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIHazardTypeRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazardTypeRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazardTypeRef &a, TDDIHazardTypeRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazardTypeRef& obj);

typedef struct _TDDIHazardRef__isset {
  _TDDIHazardRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIHazardRef__isset;

class TDDIHazardRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazardRef(const TDDIHazardRef&);
  TDDIHazardRef& operator=(const TDDIHazardRef&);
  TDDIHazardRef() : ref() {
  }

  virtual ~TDDIHazardRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIHazard> ref;

  _TDDIHazardRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIHazard> val);

  bool operator == (const TDDIHazardRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIHazardRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazardRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazardRef &a, TDDIHazardRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazardRef& obj);

typedef struct _TDDIStateRef__isset {
  _TDDIStateRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIStateRef__isset;

class TDDIStateRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIStateRef(const TDDIStateRef&);
  TDDIStateRef& operator=(const TDDIStateRef&);
  TDDIStateRef() : ref() {
  }

  virtual ~TDDIStateRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIState> ref;

  _TDDIStateRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIState> val);

  bool operator == (const TDDIStateRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIStateRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIStateRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIStateRef &a, TDDIStateRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIStateRef& obj);

typedef struct _TDDIMaintenanceProcedureRef__isset {
  _TDDIMaintenanceProcedureRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIMaintenanceProcedureRef__isset;

class TDDIMaintenanceProcedureRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIMaintenanceProcedureRef(const TDDIMaintenanceProcedureRef&);
  TDDIMaintenanceProcedureRef& operator=(const TDDIMaintenanceProcedureRef&);
  TDDIMaintenanceProcedureRef() : ref() {
  }

  virtual ~TDDIMaintenanceProcedureRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> ref;

  _TDDIMaintenanceProcedureRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val);

  bool operator == (const TDDIMaintenanceProcedureRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIMaintenanceProcedureRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMaintenanceProcedureRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMaintenanceProcedureRef &a, TDDIMaintenanceProcedureRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIMaintenanceProcedureRef& obj);

typedef struct _TDDIVulnerabilityRef__isset {
  _TDDIVulnerabilityRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIVulnerabilityRef__isset;

class TDDIVulnerabilityRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIVulnerabilityRef(const TDDIVulnerabilityRef&);
  TDDIVulnerabilityRef& operator=(const TDDIVulnerabilityRef&);
  TDDIVulnerabilityRef() : ref() {
  }

  virtual ~TDDIVulnerabilityRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIVulnerability> ref;

  _TDDIVulnerabilityRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIVulnerability> val);

  bool operator == (const TDDIVulnerabilityRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIVulnerabilityRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIVulnerabilityRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIVulnerabilityRef &a, TDDIVulnerabilityRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIVulnerabilityRef& obj);

typedef struct _TDDIVulnerableItemRef__isset {
  _TDDIVulnerableItemRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIVulnerableItemRef__isset;

class TDDIVulnerableItemRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIVulnerableItemRef(const TDDIVulnerableItemRef&);
  TDDIVulnerableItemRef& operator=(const TDDIVulnerableItemRef&);
  TDDIVulnerableItemRef() : ref() {
  }

  virtual ~TDDIVulnerableItemRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIVulnerableItem> ref;

  _TDDIVulnerableItemRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIVulnerableItem> val);

  bool operator == (const TDDIVulnerableItemRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIVulnerableItemRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIVulnerableItemRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIVulnerableItemRef &a, TDDIVulnerableItemRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIVulnerableItemRef& obj);

typedef struct _TDDISecurityControlRef__isset {
  _TDDISecurityControlRef__isset() : ref(false) {}
  bool ref :1;
} _TDDISecurityControlRef__isset;

class TDDISecurityControlRef : public virtual ::apache::thrift::TBase {
 public:

  TDDISecurityControlRef(const TDDISecurityControlRef&);
  TDDISecurityControlRef& operator=(const TDDISecurityControlRef&);
  TDDISecurityControlRef() : ref() {
  }

  virtual ~TDDISecurityControlRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDISecurityControl> ref;

  _TDDISecurityControlRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDISecurityControl> val);

  bool operator == (const TDDISecurityControlRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDISecurityControlRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISecurityControlRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISecurityControlRef &a, TDDISecurityControlRef &b);

std::ostream& operator<<(std::ostream& out, const TDDISecurityControlRef& obj);

typedef struct _TDDIAttackerGoalRef__isset {
  _TDDIAttackerGoalRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAttackerGoalRef__isset;

class TDDIAttackerGoalRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAttackerGoalRef(const TDDIAttackerGoalRef&);
  TDDIAttackerGoalRef& operator=(const TDDIAttackerGoalRef&);
  TDDIAttackerGoalRef() : ref() {
  }

  virtual ~TDDIAttackerGoalRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAttackerGoal> ref;

  _TDDIAttackerGoalRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAttackerGoal> val);

  bool operator == (const TDDIAttackerGoalRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAttackerGoalRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAttackerGoalRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAttackerGoalRef &a, TDDIAttackerGoalRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAttackerGoalRef& obj);

typedef struct _TDDIActionRef__isset {
  _TDDIActionRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIActionRef__isset;

class TDDIActionRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIActionRef(const TDDIActionRef&);
  TDDIActionRef& operator=(const TDDIActionRef&);
  TDDIActionRef() : ref() {
  }

  virtual ~TDDIActionRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAction> ref;

  _TDDIActionRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAction> val);

  bool operator == (const TDDIActionRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIActionRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIActionRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIActionRef &a, TDDIActionRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIActionRef& obj);

typedef struct _TDDIPayloadRef__isset {
  _TDDIPayloadRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIPayloadRef__isset;

class TDDIPayloadRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIPayloadRef(const TDDIPayloadRef&);
  TDDIPayloadRef& operator=(const TDDIPayloadRef&);
  TDDIPayloadRef() : ref() {
  }

  virtual ~TDDIPayloadRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIPayload> ref;

  _TDDIPayloadRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIPayload> val);

  bool operator == (const TDDIPayloadRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIPayloadRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPayloadRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPayloadRef &a, TDDIPayloadRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIPayloadRef& obj);

typedef struct _TDDISecurityCapabilityRef__isset {
  _TDDISecurityCapabilityRef__isset() : ref(false) {}
  bool ref :1;
} _TDDISecurityCapabilityRef__isset;

class TDDISecurityCapabilityRef : public virtual ::apache::thrift::TBase {
 public:

  TDDISecurityCapabilityRef(const TDDISecurityCapabilityRef&);
  TDDISecurityCapabilityRef& operator=(const TDDISecurityCapabilityRef&);
  TDDISecurityCapabilityRef() : ref() {
  }

  virtual ~TDDISecurityCapabilityRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDISecurityCapability> ref;

  _TDDISecurityCapabilityRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDISecurityCapability> val);

  bool operator == (const TDDISecurityCapabilityRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDISecurityCapabilityRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISecurityCapabilityRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISecurityCapabilityRef &a, TDDISecurityCapabilityRef &b);

std::ostream& operator<<(std::ostream& out, const TDDISecurityCapabilityRef& obj);

typedef struct _TDDIImplementationConstraintRef__isset {
  _TDDIImplementationConstraintRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIImplementationConstraintRef__isset;

class TDDIImplementationConstraintRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIImplementationConstraintRef(const TDDIImplementationConstraintRef&);
  TDDIImplementationConstraintRef& operator=(const TDDIImplementationConstraintRef&);
  TDDIImplementationConstraintRef() : ref() {
  }

  virtual ~TDDIImplementationConstraintRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> ref;

  _TDDIImplementationConstraintRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> val);

  bool operator == (const TDDIImplementationConstraintRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIImplementationConstraintRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIImplementationConstraintRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIImplementationConstraintRef &a, TDDIImplementationConstraintRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIImplementationConstraintRef& obj);

typedef struct _TDDINoteRef__isset {
  _TDDINoteRef__isset() : ref(false) {}
  bool ref :1;
} _TDDINoteRef__isset;

class TDDINoteRef : public virtual ::apache::thrift::TBase {
 public:

  TDDINoteRef(const TDDINoteRef&);
  TDDINoteRef& operator=(const TDDINoteRef&);
  TDDINoteRef() : ref() {
  }

  virtual ~TDDINoteRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDINote> ref;

  _TDDINoteRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDINote> val);

  bool operator == (const TDDINoteRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDINoteRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDINoteRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDINoteRef &a, TDDINoteRef &b);

std::ostream& operator<<(std::ostream& out, const TDDINoteRef& obj);

typedef struct _TDDITaggedValueRef__isset {
  _TDDITaggedValueRef__isset() : ref(false) {}
  bool ref :1;
} _TDDITaggedValueRef__isset;

class TDDITaggedValueRef : public virtual ::apache::thrift::TBase {
 public:

  TDDITaggedValueRef(const TDDITaggedValueRef&);
  TDDITaggedValueRef& operator=(const TDDITaggedValueRef&);
  TDDITaggedValueRef() : ref() {
  }

  virtual ~TDDITaggedValueRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> ref;

  _TDDITaggedValueRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> val);

  bool operator == (const TDDITaggedValueRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDITaggedValueRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITaggedValueRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITaggedValueRef &a, TDDITaggedValueRef &b);

std::ostream& operator<<(std::ostream& out, const TDDITaggedValueRef& obj);

typedef struct _TDDIAbstractArtifactElementRef__isset {
  _TDDIAbstractArtifactElementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArtifactElementRef__isset;

class TDDIAbstractArtifactElementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactElementRef(const TDDIAbstractArtifactElementRef&);
  TDDIAbstractArtifactElementRef& operator=(const TDDIAbstractArtifactElementRef&);
  TDDIAbstractArtifactElementRef() : ref() {
  }

  virtual ~TDDIAbstractArtifactElementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> ref;

  _TDDIAbstractArtifactElementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> val);

  bool operator == (const TDDIAbstractArtifactElementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactElementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactElementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactElementRef &a, TDDIAbstractArtifactElementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactElementRef& obj);

typedef struct _TDDIClaimRef__isset {
  _TDDIClaimRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIClaimRef__isset;

class TDDIClaimRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIClaimRef(const TDDIClaimRef&);
  TDDIClaimRef& operator=(const TDDIClaimRef&);
  TDDIClaimRef() : ref() {
  }

  virtual ~TDDIClaimRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIClaim> ref;

  _TDDIClaimRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIClaim> val);

  bool operator == (const TDDIClaimRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIClaimRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIClaimRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIClaimRef &a, TDDIClaimRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIClaimRef& obj);

typedef struct _TDDIAbstractArgumentPackageRef__isset {
  _TDDIAbstractArgumentPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArgumentPackageRef__isset;

class TDDIAbstractArgumentPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentPackageRef(const TDDIAbstractArgumentPackageRef&);
  TDDIAbstractArgumentPackageRef& operator=(const TDDIAbstractArgumentPackageRef&);
  TDDIAbstractArgumentPackageRef() : ref() {
  }

  virtual ~TDDIAbstractArgumentPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> ref;

  _TDDIAbstractArgumentPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> val);

  bool operator == (const TDDIAbstractArgumentPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentPackageRef &a, TDDIAbstractArgumentPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentPackageRef& obj);

typedef struct _TDDIAbstractArgumentationElementRef__isset {
  _TDDIAbstractArgumentationElementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArgumentationElementRef__isset;

class TDDIAbstractArgumentationElementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentationElementRef(const TDDIAbstractArgumentationElementRef&);
  TDDIAbstractArgumentationElementRef& operator=(const TDDIAbstractArgumentationElementRef&);
  TDDIAbstractArgumentationElementRef() : ref() {
  }

  virtual ~TDDIAbstractArgumentationElementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> ref;

  _TDDIAbstractArgumentationElementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> val);

  bool operator == (const TDDIAbstractArgumentationElementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentationElementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentationElementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentationElementRef &a, TDDIAbstractArgumentationElementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentationElementRef& obj);

typedef struct _TDDIAbstractArgumentAssetRef__isset {
  _TDDIAbstractArgumentAssetRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArgumentAssetRef__isset;

class TDDIAbstractArgumentAssetRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentAssetRef(const TDDIAbstractArgumentAssetRef&);
  TDDIAbstractArgumentAssetRef& operator=(const TDDIAbstractArgumentAssetRef&);
  TDDIAbstractArgumentAssetRef() : ref() {
  }

  virtual ~TDDIAbstractArgumentAssetRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> ref;

  _TDDIAbstractArgumentAssetRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> val);

  bool operator == (const TDDIAbstractArgumentAssetRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentAssetRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentAssetRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentAssetRef &a, TDDIAbstractArgumentAssetRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentAssetRef& obj);

typedef struct _TDDIPropertyRef__isset {
  _TDDIPropertyRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIPropertyRef__isset;

class TDDIPropertyRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIPropertyRef(const TDDIPropertyRef&);
  TDDIPropertyRef& operator=(const TDDIPropertyRef&);
  TDDIPropertyRef() : ref() {
  }

  virtual ~TDDIPropertyRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIProperty> ref;

  _TDDIPropertyRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIProperty> val);

  bool operator == (const TDDIPropertyRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIPropertyRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPropertyRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPropertyRef &a, TDDIPropertyRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIPropertyRef& obj);

typedef struct _TDDIAbstractArtifactAssetRef__isset {
  _TDDIAbstractArtifactAssetRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArtifactAssetRef__isset;

class TDDIAbstractArtifactAssetRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactAssetRef(const TDDIAbstractArtifactAssetRef&);
  TDDIAbstractArtifactAssetRef& operator=(const TDDIAbstractArtifactAssetRef&);
  TDDIAbstractArtifactAssetRef() : ref() {
  }

  virtual ~TDDIAbstractArtifactAssetRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> ref;

  _TDDIAbstractArtifactAssetRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> val);

  bool operator == (const TDDIAbstractArtifactAssetRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactAssetRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactAssetRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactAssetRef &a, TDDIAbstractArtifactAssetRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactAssetRef& obj);

typedef struct _TDDIAbstractAssuranceCasePackageRef__isset {
  _TDDIAbstractAssuranceCasePackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractAssuranceCasePackageRef__isset;

class TDDIAbstractAssuranceCasePackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssuranceCasePackageRef(const TDDIAbstractAssuranceCasePackageRef&);
  TDDIAbstractAssuranceCasePackageRef& operator=(const TDDIAbstractAssuranceCasePackageRef&);
  TDDIAbstractAssuranceCasePackageRef() : ref() {
  }

  virtual ~TDDIAbstractAssuranceCasePackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> ref;

  _TDDIAbstractAssuranceCasePackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> val);

  bool operator == (const TDDIAbstractAssuranceCasePackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssuranceCasePackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssuranceCasePackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssuranceCasePackageRef &a, TDDIAbstractAssuranceCasePackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssuranceCasePackageRef& obj);

typedef struct _TDDIAssuranceCasePackageInterfaceRef__isset {
  _TDDIAssuranceCasePackageInterfaceRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAssuranceCasePackageInterfaceRef__isset;

class TDDIAssuranceCasePackageInterfaceRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackageInterfaceRef(const TDDIAssuranceCasePackageInterfaceRef&);
  TDDIAssuranceCasePackageInterfaceRef& operator=(const TDDIAssuranceCasePackageInterfaceRef&);
  TDDIAssuranceCasePackageInterfaceRef() : ref() {
  }

  virtual ~TDDIAssuranceCasePackageInterfaceRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> ref;

  _TDDIAssuranceCasePackageInterfaceRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> val);

  bool operator == (const TDDIAssuranceCasePackageInterfaceRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackageInterfaceRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackageInterfaceRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackageInterfaceRef &a, TDDIAssuranceCasePackageInterfaceRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageInterfaceRef& obj);

typedef struct _TDDIAbstractArtifactPackageRef__isset {
  _TDDIAbstractArtifactPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractArtifactPackageRef__isset;

class TDDIAbstractArtifactPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactPackageRef(const TDDIAbstractArtifactPackageRef&);
  TDDIAbstractArtifactPackageRef& operator=(const TDDIAbstractArtifactPackageRef&);
  TDDIAbstractArtifactPackageRef() : ref() {
  }

  virtual ~TDDIAbstractArtifactPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> ref;

  _TDDIAbstractArtifactPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> val);

  bool operator == (const TDDIAbstractArtifactPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactPackageRef &a, TDDIAbstractArtifactPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactPackageRef& obj);

typedef struct _TDDIAbstractTerminologyPackageRef__isset {
  _TDDIAbstractTerminologyPackageRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractTerminologyPackageRef__isset;

class TDDIAbstractTerminologyPackageRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractTerminologyPackageRef(const TDDIAbstractTerminologyPackageRef&);
  TDDIAbstractTerminologyPackageRef& operator=(const TDDIAbstractTerminologyPackageRef&);
  TDDIAbstractTerminologyPackageRef() : ref() {
  }

  virtual ~TDDIAbstractTerminologyPackageRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> ref;

  _TDDIAbstractTerminologyPackageRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> val);

  bool operator == (const TDDIAbstractTerminologyPackageRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractTerminologyPackageRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractTerminologyPackageRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractTerminologyPackageRef &a, TDDIAbstractTerminologyPackageRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyPackageRef& obj);

typedef struct _TDDIAbstractExpressionElementRef__isset {
  _TDDIAbstractExpressionElementRef__isset() : ref(false) {}
  bool ref :1;
} _TDDIAbstractExpressionElementRef__isset;

class TDDIAbstractExpressionElementRef : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractExpressionElementRef(const TDDIAbstractExpressionElementRef&);
  TDDIAbstractExpressionElementRef& operator=(const TDDIAbstractExpressionElementRef&);
  TDDIAbstractExpressionElementRef() : ref() {
  }

  virtual ~TDDIAbstractExpressionElementRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> ref;

  _TDDIAbstractExpressionElementRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> val);

  bool operator == (const TDDIAbstractExpressionElementRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractExpressionElementRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractExpressionElementRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractExpressionElementRef &a, TDDIAbstractExpressionElementRef &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractExpressionElementRef& obj);

typedef struct _TDDICategoryRef__isset {
  _TDDICategoryRef__isset() : ref(false) {}
  bool ref :1;
} _TDDICategoryRef__isset;

class TDDICategoryRef : public virtual ::apache::thrift::TBase {
 public:

  TDDICategoryRef(const TDDICategoryRef&);
  TDDICategoryRef& operator=(const TDDICategoryRef&);
  TDDICategoryRef() : ref() {
  }

  virtual ~TDDICategoryRef() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDICategory> ref;

  _TDDICategoryRef__isset __isset;

  void __set_ref(::apache::thrift::stdcxx::shared_ptr<TDDICategory> val);

  bool operator == (const TDDICategoryRef & rhs) const
  {
    if (!(ref == rhs.ref))
      return false;
    return true;
  }
  bool operator != (const TDDICategoryRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDICategoryRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDICategoryRef &a, TDDICategoryRef &b);

std::ostream& operator<<(std::ostream& out, const TDDICategoryRef& obj);

typedef struct _TDDIBaseElementUnion__isset {
  _TDDIBaseElementUnion__isset() : FailureModel(false), MinimalCutSets(false), MinimalCutSet(false), Failure(false), ProbDist(false), ProbDistParam(false), FMEAEntry(false), Transition(false), State(false), Cause(false), Measure(false), MeasureType(false), MaintenanceProcedure(false), Standard(false), AssuranceLevel(false), HazardType(false), HazardTypeSystem(false), RiskParameter(false), Hazard(false), RiskAssessment(false), Malfunction(false), ThreatAgent(false), AttackerGoal(false), SecurityRisk(false), Attack(false), SecurityCapability(false), Asset(false), Vulnerability(false), RequirementSource(false), DependabilityRequirement(false), Configuration(false), System(false), Function(false), PerfChars(false), Signal(false), Context(false), SystemBoundary(false), Port(false), LifecycleCondition(false), DesignPackage(false), FailureLogicPackage(false), DependabilityPackage(false), RequirementPackage(false), DomainPackage(false), HARAPackage(false), TARAPackage(false), DDIPackage(false) {}
  bool FailureModel :1;
  bool MinimalCutSets :1;
  bool MinimalCutSet :1;
  bool Failure :1;
  bool ProbDist :1;
  bool ProbDistParam :1;
  bool FMEAEntry :1;
  bool Transition :1;
  bool State :1;
  bool Cause :1;
  bool Measure :1;
  bool MeasureType :1;
  bool MaintenanceProcedure :1;
  bool Standard :1;
  bool AssuranceLevel :1;
  bool HazardType :1;
  bool HazardTypeSystem :1;
  bool RiskParameter :1;
  bool Hazard :1;
  bool RiskAssessment :1;
  bool Malfunction :1;
  bool ThreatAgent :1;
  bool AttackerGoal :1;
  bool SecurityRisk :1;
  bool Attack :1;
  bool SecurityCapability :1;
  bool Asset :1;
  bool Vulnerability :1;
  bool RequirementSource :1;
  bool DependabilityRequirement :1;
  bool Configuration :1;
  bool System :1;
  bool Function :1;
  bool PerfChars :1;
  bool Signal :1;
  bool Context :1;
  bool SystemBoundary :1;
  bool Port :1;
  bool LifecycleCondition :1;
  bool DesignPackage :1;
  bool FailureLogicPackage :1;
  bool DependabilityPackage :1;
  bool RequirementPackage :1;
  bool DomainPackage :1;
  bool HARAPackage :1;
  bool TARAPackage :1;
  bool DDIPackage :1;
} _TDDIBaseElementUnion__isset;

class TDDIBaseElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIBaseElementUnion(const TDDIBaseElementUnion&);
  TDDIBaseElementUnion& operator=(const TDDIBaseElementUnion&);
  TDDIBaseElementUnion() : FailureModel(), MinimalCutSets(), MinimalCutSet(), Failure(), ProbDist(), ProbDistParam(), FMEAEntry(), Transition(), State(), Cause(), Measure(), MeasureType(), MaintenanceProcedure(), Standard(), AssuranceLevel(), HazardType(), HazardTypeSystem(), RiskParameter(), Hazard(), RiskAssessment(), Malfunction(), ThreatAgent(), AttackerGoal(), SecurityRisk(), Attack(), SecurityCapability(), Asset(), Vulnerability(), RequirementSource(), DependabilityRequirement(), Configuration(), System(), Function(), PerfChars(), Signal(), Context(), SystemBoundary(), Port(), LifecycleCondition(), DesignPackage(), FailureLogicPackage(), DependabilityPackage(), RequirementPackage(), DomainPackage(), HARAPackage(), TARAPackage(), DDIPackage() {
  }

  virtual ~TDDIBaseElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailureModel> FailureModel;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutSets> MinimalCutSets;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutSet> MinimalCutSet;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> Failure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIProbDist> ProbDist;
  ::apache::thrift::stdcxx::shared_ptr<TDDIProbDistParam> ProbDistParam;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAEntry> FMEAEntry;
  ::apache::thrift::stdcxx::shared_ptr<TDDITransition> Transition;
  ::apache::thrift::stdcxx::shared_ptr<TDDIState> State;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractCause> Cause;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> Measure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> MeasureType;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> MaintenanceProcedure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> Standard;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  ::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> HazardType;
  ::apache::thrift::stdcxx::shared_ptr<TDDIHazardTypeSystem> HazardTypeSystem;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> RiskParameter;
  ::apache::thrift::stdcxx::shared_ptr<TDDIHazard> Hazard;
  ::apache::thrift::stdcxx::shared_ptr<TDDIRiskAssessment> RiskAssessment;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMalfunction> Malfunction;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractThreatAgent> ThreatAgent;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAttackerGoal> AttackerGoal;
  ::apache::thrift::stdcxx::shared_ptr<TDDISecurityRisk> SecurityRisk;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAttack> Attack;
  ::apache::thrift::stdcxx::shared_ptr<TDDISecurityCapability> SecurityCapability;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> Asset;
  ::apache::thrift::stdcxx::shared_ptr<TDDIVulnerability> Vulnerability;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> RequirementSource;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> DependabilityRequirement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIConfiguration> Configuration;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> System;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> Function;
  ::apache::thrift::stdcxx::shared_ptr<TDDIPerfChars> PerfChars;
  ::apache::thrift::stdcxx::shared_ptr<TDDISignal> Signal;
  ::apache::thrift::stdcxx::shared_ptr<TDDIContext> Context;
  ::apache::thrift::stdcxx::shared_ptr<TDDISystemBoundary> SystemBoundary;
  ::apache::thrift::stdcxx::shared_ptr<TDDIPort> Port;
  ::apache::thrift::stdcxx::shared_ptr<TDDILifecycleCondition> LifecycleCondition;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDesignPackage> DesignPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailureLogicPackage> FailureLogicPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> DependabilityPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> RequirementPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> DomainPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIHARAPackage> HARAPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDITARAPackage> TARAPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDDIPackage> DDIPackage;

  _TDDIBaseElementUnion__isset __isset;

  void __set_FailureModel(::apache::thrift::stdcxx::shared_ptr<TDDIFailureModel> val);

  void __set_MinimalCutSets(::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutSets> val);

  void __set_MinimalCutSet(::apache::thrift::stdcxx::shared_ptr<TDDIMinimalCutSet> val);

  void __set_Failure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  void __set_ProbDist(::apache::thrift::stdcxx::shared_ptr<TDDIProbDist> val);

  void __set_ProbDistParam(::apache::thrift::stdcxx::shared_ptr<TDDIProbDistParam> val);

  void __set_FMEAEntry(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFMEAEntry> val);

  void __set_Transition(::apache::thrift::stdcxx::shared_ptr<TDDITransition> val);

  void __set_State(::apache::thrift::stdcxx::shared_ptr<TDDIState> val);

  void __set_Cause(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractCause> val);

  void __set_Measure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractMeasure> val);

  void __set_MeasureType(::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> val);

  void __set_MaintenanceProcedure(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val);

  void __set_Standard(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractStandard> val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_HazardType(::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> val);

  void __set_HazardTypeSystem(::apache::thrift::stdcxx::shared_ptr<TDDIHazardTypeSystem> val);

  void __set_RiskParameter(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRiskParameter> val);

  void __set_Hazard(::apache::thrift::stdcxx::shared_ptr<TDDIHazard> val);

  void __set_RiskAssessment(::apache::thrift::stdcxx::shared_ptr<TDDIRiskAssessment> val);

  void __set_Malfunction(::apache::thrift::stdcxx::shared_ptr<TDDIMalfunction> val);

  void __set_ThreatAgent(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractThreatAgent> val);

  void __set_AttackerGoal(::apache::thrift::stdcxx::shared_ptr<TDDIAttackerGoal> val);

  void __set_SecurityRisk(::apache::thrift::stdcxx::shared_ptr<TDDISecurityRisk> val);

  void __set_Attack(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAttack> val);

  void __set_SecurityCapability(::apache::thrift::stdcxx::shared_ptr<TDDISecurityCapability> val);

  void __set_Asset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val);

  void __set_Vulnerability(::apache::thrift::stdcxx::shared_ptr<TDDIVulnerability> val);

  void __set_RequirementSource(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> val);

  void __set_DependabilityRequirement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractDependabilityRequirement> val);

  void __set_Configuration(::apache::thrift::stdcxx::shared_ptr<TDDIConfiguration> val);

  void __set_System(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSystem> val);

  void __set_Function(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFunction> val);

  void __set_PerfChars(::apache::thrift::stdcxx::shared_ptr<TDDIPerfChars> val);

  void __set_Signal(::apache::thrift::stdcxx::shared_ptr<TDDISignal> val);

  void __set_Context(::apache::thrift::stdcxx::shared_ptr<TDDIContext> val);

  void __set_SystemBoundary(::apache::thrift::stdcxx::shared_ptr<TDDISystemBoundary> val);

  void __set_Port(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val);

  void __set_LifecycleCondition(::apache::thrift::stdcxx::shared_ptr<TDDILifecycleCondition> val);

  void __set_DesignPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDesignPackage> val);

  void __set_FailureLogicPackage(::apache::thrift::stdcxx::shared_ptr<TDDIFailureLogicPackage> val);

  void __set_DependabilityPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> val);

  void __set_RequirementPackage(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> val);

  void __set_DomainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> val);

  void __set_HARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIHARAPackage> val);

  void __set_TARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDITARAPackage> val);

  void __set_DDIPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDDIPackage> val);

  bool operator == (const TDDIBaseElementUnion & rhs) const
  {
    if (__isset.FailureModel != rhs.__isset.FailureModel)
      return false;
    else if (__isset.FailureModel && !(FailureModel == rhs.FailureModel))
      return false;
    if (__isset.MinimalCutSets != rhs.__isset.MinimalCutSets)
      return false;
    else if (__isset.MinimalCutSets && !(MinimalCutSets == rhs.MinimalCutSets))
      return false;
    if (__isset.MinimalCutSet != rhs.__isset.MinimalCutSet)
      return false;
    else if (__isset.MinimalCutSet && !(MinimalCutSet == rhs.MinimalCutSet))
      return false;
    if (__isset.Failure != rhs.__isset.Failure)
      return false;
    else if (__isset.Failure && !(Failure == rhs.Failure))
      return false;
    if (__isset.ProbDist != rhs.__isset.ProbDist)
      return false;
    else if (__isset.ProbDist && !(ProbDist == rhs.ProbDist))
      return false;
    if (__isset.ProbDistParam != rhs.__isset.ProbDistParam)
      return false;
    else if (__isset.ProbDistParam && !(ProbDistParam == rhs.ProbDistParam))
      return false;
    if (__isset.FMEAEntry != rhs.__isset.FMEAEntry)
      return false;
    else if (__isset.FMEAEntry && !(FMEAEntry == rhs.FMEAEntry))
      return false;
    if (__isset.Transition != rhs.__isset.Transition)
      return false;
    else if (__isset.Transition && !(Transition == rhs.Transition))
      return false;
    if (__isset.State != rhs.__isset.State)
      return false;
    else if (__isset.State && !(State == rhs.State))
      return false;
    if (__isset.Cause != rhs.__isset.Cause)
      return false;
    else if (__isset.Cause && !(Cause == rhs.Cause))
      return false;
    if (__isset.Measure != rhs.__isset.Measure)
      return false;
    else if (__isset.Measure && !(Measure == rhs.Measure))
      return false;
    if (__isset.MeasureType != rhs.__isset.MeasureType)
      return false;
    else if (__isset.MeasureType && !(MeasureType == rhs.MeasureType))
      return false;
    if (__isset.MaintenanceProcedure != rhs.__isset.MaintenanceProcedure)
      return false;
    else if (__isset.MaintenanceProcedure && !(MaintenanceProcedure == rhs.MaintenanceProcedure))
      return false;
    if (__isset.Standard != rhs.__isset.Standard)
      return false;
    else if (__isset.Standard && !(Standard == rhs.Standard))
      return false;
    if (__isset.AssuranceLevel != rhs.__isset.AssuranceLevel)
      return false;
    else if (__isset.AssuranceLevel && !(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (__isset.HazardType != rhs.__isset.HazardType)
      return false;
    else if (__isset.HazardType && !(HazardType == rhs.HazardType))
      return false;
    if (__isset.HazardTypeSystem != rhs.__isset.HazardTypeSystem)
      return false;
    else if (__isset.HazardTypeSystem && !(HazardTypeSystem == rhs.HazardTypeSystem))
      return false;
    if (__isset.RiskParameter != rhs.__isset.RiskParameter)
      return false;
    else if (__isset.RiskParameter && !(RiskParameter == rhs.RiskParameter))
      return false;
    if (__isset.Hazard != rhs.__isset.Hazard)
      return false;
    else if (__isset.Hazard && !(Hazard == rhs.Hazard))
      return false;
    if (__isset.RiskAssessment != rhs.__isset.RiskAssessment)
      return false;
    else if (__isset.RiskAssessment && !(RiskAssessment == rhs.RiskAssessment))
      return false;
    if (__isset.Malfunction != rhs.__isset.Malfunction)
      return false;
    else if (__isset.Malfunction && !(Malfunction == rhs.Malfunction))
      return false;
    if (__isset.ThreatAgent != rhs.__isset.ThreatAgent)
      return false;
    else if (__isset.ThreatAgent && !(ThreatAgent == rhs.ThreatAgent))
      return false;
    if (__isset.AttackerGoal != rhs.__isset.AttackerGoal)
      return false;
    else if (__isset.AttackerGoal && !(AttackerGoal == rhs.AttackerGoal))
      return false;
    if (__isset.SecurityRisk != rhs.__isset.SecurityRisk)
      return false;
    else if (__isset.SecurityRisk && !(SecurityRisk == rhs.SecurityRisk))
      return false;
    if (__isset.Attack != rhs.__isset.Attack)
      return false;
    else if (__isset.Attack && !(Attack == rhs.Attack))
      return false;
    if (__isset.SecurityCapability != rhs.__isset.SecurityCapability)
      return false;
    else if (__isset.SecurityCapability && !(SecurityCapability == rhs.SecurityCapability))
      return false;
    if (__isset.Asset != rhs.__isset.Asset)
      return false;
    else if (__isset.Asset && !(Asset == rhs.Asset))
      return false;
    if (__isset.Vulnerability != rhs.__isset.Vulnerability)
      return false;
    else if (__isset.Vulnerability && !(Vulnerability == rhs.Vulnerability))
      return false;
    if (__isset.RequirementSource != rhs.__isset.RequirementSource)
      return false;
    else if (__isset.RequirementSource && !(RequirementSource == rhs.RequirementSource))
      return false;
    if (__isset.DependabilityRequirement != rhs.__isset.DependabilityRequirement)
      return false;
    else if (__isset.DependabilityRequirement && !(DependabilityRequirement == rhs.DependabilityRequirement))
      return false;
    if (__isset.Configuration != rhs.__isset.Configuration)
      return false;
    else if (__isset.Configuration && !(Configuration == rhs.Configuration))
      return false;
    if (__isset.System != rhs.__isset.System)
      return false;
    else if (__isset.System && !(System == rhs.System))
      return false;
    if (__isset.Function != rhs.__isset.Function)
      return false;
    else if (__isset.Function && !(Function == rhs.Function))
      return false;
    if (__isset.PerfChars != rhs.__isset.PerfChars)
      return false;
    else if (__isset.PerfChars && !(PerfChars == rhs.PerfChars))
      return false;
    if (__isset.Signal != rhs.__isset.Signal)
      return false;
    else if (__isset.Signal && !(Signal == rhs.Signal))
      return false;
    if (__isset.Context != rhs.__isset.Context)
      return false;
    else if (__isset.Context && !(Context == rhs.Context))
      return false;
    if (__isset.SystemBoundary != rhs.__isset.SystemBoundary)
      return false;
    else if (__isset.SystemBoundary && !(SystemBoundary == rhs.SystemBoundary))
      return false;
    if (__isset.Port != rhs.__isset.Port)
      return false;
    else if (__isset.Port && !(Port == rhs.Port))
      return false;
    if (__isset.LifecycleCondition != rhs.__isset.LifecycleCondition)
      return false;
    else if (__isset.LifecycleCondition && !(LifecycleCondition == rhs.LifecycleCondition))
      return false;
    if (__isset.DesignPackage != rhs.__isset.DesignPackage)
      return false;
    else if (__isset.DesignPackage && !(DesignPackage == rhs.DesignPackage))
      return false;
    if (__isset.FailureLogicPackage != rhs.__isset.FailureLogicPackage)
      return false;
    else if (__isset.FailureLogicPackage && !(FailureLogicPackage == rhs.FailureLogicPackage))
      return false;
    if (__isset.DependabilityPackage != rhs.__isset.DependabilityPackage)
      return false;
    else if (__isset.DependabilityPackage && !(DependabilityPackage == rhs.DependabilityPackage))
      return false;
    if (__isset.RequirementPackage != rhs.__isset.RequirementPackage)
      return false;
    else if (__isset.RequirementPackage && !(RequirementPackage == rhs.RequirementPackage))
      return false;
    if (__isset.DomainPackage != rhs.__isset.DomainPackage)
      return false;
    else if (__isset.DomainPackage && !(DomainPackage == rhs.DomainPackage))
      return false;
    if (__isset.HARAPackage != rhs.__isset.HARAPackage)
      return false;
    else if (__isset.HARAPackage && !(HARAPackage == rhs.HARAPackage))
      return false;
    if (__isset.TARAPackage != rhs.__isset.TARAPackage)
      return false;
    else if (__isset.TARAPackage && !(TARAPackage == rhs.TARAPackage))
      return false;
    if (__isset.DDIPackage != rhs.__isset.DDIPackage)
      return false;
    else if (__isset.DDIPackage && !(DDIPackage == rhs.DDIPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIBaseElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIBaseElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIBaseElementUnion &a, TDDIBaseElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIBaseElementUnion& obj);

typedef struct _TDDIAbstractBaseElement__isset {
  _TDDIAbstractBaseElement__isset() : UsedBaseElement(false), UsedBaseElementType(false) {}
  bool UsedBaseElement :1;
  bool UsedBaseElementType :1;
} _TDDIAbstractBaseElement__isset;

class TDDIAbstractBaseElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractBaseElement(const TDDIAbstractBaseElement&);
  TDDIAbstractBaseElement& operator=(const TDDIAbstractBaseElement&);
  TDDIAbstractBaseElement() : UsedBaseElementType((TDDIBaseElementUnionType)0) {
  }

  virtual ~TDDIAbstractBaseElement() throw();
  TDDIBaseElementUnion UsedBaseElement;
  TDDIBaseElementUnionType UsedBaseElementType;

  _TDDIAbstractBaseElement__isset __isset;

  void __set_UsedBaseElement(const TDDIBaseElementUnion& val);

  void __set_UsedBaseElementType(const TDDIBaseElementUnionType val);

  bool operator == (const TDDIAbstractBaseElement & rhs) const
  {
    if (!(UsedBaseElement == rhs.UsedBaseElement))
      return false;
    if (!(UsedBaseElementType == rhs.UsedBaseElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractBaseElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractBaseElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractBaseElement &a, TDDIAbstractBaseElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractBaseElement& obj);

typedef struct _TDDIValue__isset {
  _TDDIValue__isset() : Tag(true), Value(true) {}
  bool Tag :1;
  bool Value :1;
} _TDDIValue__isset;

class TDDIValue : public virtual ::apache::thrift::TBase {
 public:

  TDDIValue(const TDDIValue&);
  TDDIValue& operator=(const TDDIValue&);
  TDDIValue() : Tag(""), Value("") {
  }

  virtual ~TDDIValue() throw();
  std::string Tag;
  std::string Value;

  _TDDIValue__isset __isset;

  void __set_Tag(const std::string& val);

  void __set_Value(const std::string& val);

  bool operator == (const TDDIValue & rhs) const
  {
    if (!(Tag == rhs.Tag))
      return false;
    if (!(Value == rhs.Value))
      return false;
    return true;
  }
  bool operator != (const TDDIValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIValue &a, TDDIValue &b);

std::ostream& operator<<(std::ostream& out, const TDDIValue& obj);

typedef struct _TDDIKeyValueMap__isset {
  _TDDIKeyValueMap__isset() : Key(true), Values(true) {}
  bool Key :1;
  bool Values :1;
} _TDDIKeyValueMap__isset;

class TDDIKeyValueMap : public virtual ::apache::thrift::TBase {
 public:

  TDDIKeyValueMap(const TDDIKeyValueMap&);
  TDDIKeyValueMap& operator=(const TDDIKeyValueMap&);
  TDDIKeyValueMap() : Key("") {

  }

  virtual ~TDDIKeyValueMap() throw();
  std::string Key;
  std::vector<TDDIValue>  Values;

  _TDDIKeyValueMap__isset __isset;

  void __set_Key(const std::string& val);

  void __set_Values(const std::vector<TDDIValue> & val);

  bool operator == (const TDDIKeyValueMap & rhs) const
  {
    if (!(Key == rhs.Key))
      return false;
    if (!(Values == rhs.Values))
      return false;
    return true;
  }
  bool operator != (const TDDIKeyValueMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIKeyValueMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIKeyValueMap &a, TDDIKeyValueMap &b);

std::ostream& operator<<(std::ostream& out, const TDDIKeyValueMap& obj);

typedef struct _TDDIMeasureType__isset {
  _TDDIMeasureType__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
} _TDDIMeasureType__isset;

class TDDIMeasureType : public virtual ::apache::thrift::TBase {
 public:

  TDDIMeasureType(const TDDIMeasureType&);
  TDDIMeasureType& operator=(const TDDIMeasureType&);
  TDDIMeasureType() : Id(0), Name(""), Description("") {

  }

  virtual ~TDDIMeasureType() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;

  _TDDIMeasureType__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  bool operator == (const TDDIMeasureType & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    return true;
  }
  bool operator != (const TDDIMeasureType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMeasureType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMeasureType &a, TDDIMeasureType &b);

std::ostream& operator<<(std::ostream& out, const TDDIMeasureType& obj);

typedef struct _TDDIMeasure__isset {
  _TDDIMeasure__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), IntrinsicSafety(true), SafeGuard(true), ApplierInformation(true), RiskAcceptability(true), FurtherAction(true), Source(true), AssuranceLevel(false), MeasureType(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool IntrinsicSafety :1;
  bool SafeGuard :1;
  bool ApplierInformation :1;
  bool RiskAcceptability :1;
  bool FurtherAction :1;
  bool Source :1;
  bool AssuranceLevel :1;
  bool MeasureType :1;
} _TDDIMeasure__isset;

class TDDIMeasure : public virtual ::apache::thrift::TBase {
 public:

  TDDIMeasure(const TDDIMeasure&);
  TDDIMeasure& operator=(const TDDIMeasure&);
  TDDIMeasure() : Id(0), Name(""), Description(""), IntrinsicSafety(""), SafeGuard(""), ApplierInformation(""), RiskAcceptability(false), FurtherAction(""), Source(""), AssuranceLevel(), MeasureType() {

  }

  virtual ~TDDIMeasure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string IntrinsicSafety;
  std::string SafeGuard;
  std::string ApplierInformation;
  bool RiskAcceptability;
  std::string FurtherAction;
  std::string Source;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> MeasureType;

  _TDDIMeasure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_IntrinsicSafety(const std::string& val);

  void __set_SafeGuard(const std::string& val);

  void __set_ApplierInformation(const std::string& val);

  void __set_RiskAcceptability(const bool val);

  void __set_FurtherAction(const std::string& val);

  void __set_Source(const std::string& val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_MeasureType(::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> val);

  bool operator == (const TDDIMeasure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(IntrinsicSafety == rhs.IntrinsicSafety))
      return false;
    if (!(SafeGuard == rhs.SafeGuard))
      return false;
    if (!(ApplierInformation == rhs.ApplierInformation))
      return false;
    if (!(RiskAcceptability == rhs.RiskAcceptability))
      return false;
    if (!(FurtherAction == rhs.FurtherAction))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(MeasureType == rhs.MeasureType))
      return false;
    return true;
  }
  bool operator != (const TDDIMeasure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMeasure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMeasure &a, TDDIMeasure &b);

std::ostream& operator<<(std::ostream& out, const TDDIMeasure& obj);

typedef struct _TDDIFaultToleranceMeasure__isset {
  _TDDIFaultToleranceMeasure__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), IntrinsicSafety(true), SafeGuard(true), ApplierInformation(true), RiskAcceptability(true), FurtherAction(true), Source(true), AssuranceLevel(false), MeasureType(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool IntrinsicSafety :1;
  bool SafeGuard :1;
  bool ApplierInformation :1;
  bool RiskAcceptability :1;
  bool FurtherAction :1;
  bool Source :1;
  bool AssuranceLevel :1;
  bool MeasureType :1;
} _TDDIFaultToleranceMeasure__isset;

class TDDIFaultToleranceMeasure : public virtual ::apache::thrift::TBase {
 public:

  TDDIFaultToleranceMeasure(const TDDIFaultToleranceMeasure&);
  TDDIFaultToleranceMeasure& operator=(const TDDIFaultToleranceMeasure&);
  TDDIFaultToleranceMeasure() : Id(0), Name(""), Description(""), IntrinsicSafety(""), SafeGuard(""), ApplierInformation(""), RiskAcceptability(false), FurtherAction(""), Source(""), AssuranceLevel(), MeasureType() {

  }

  virtual ~TDDIFaultToleranceMeasure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string IntrinsicSafety;
  std::string SafeGuard;
  std::string ApplierInformation;
  bool RiskAcceptability;
  std::string FurtherAction;
  std::string Source;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> MeasureType;

  _TDDIFaultToleranceMeasure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_IntrinsicSafety(const std::string& val);

  void __set_SafeGuard(const std::string& val);

  void __set_ApplierInformation(const std::string& val);

  void __set_RiskAcceptability(const bool val);

  void __set_FurtherAction(const std::string& val);

  void __set_Source(const std::string& val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_MeasureType(::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> val);

  bool operator == (const TDDIFaultToleranceMeasure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(IntrinsicSafety == rhs.IntrinsicSafety))
      return false;
    if (!(SafeGuard == rhs.SafeGuard))
      return false;
    if (!(ApplierInformation == rhs.ApplierInformation))
      return false;
    if (!(RiskAcceptability == rhs.RiskAcceptability))
      return false;
    if (!(FurtherAction == rhs.FurtherAction))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(MeasureType == rhs.MeasureType))
      return false;
    return true;
  }
  bool operator != (const TDDIFaultToleranceMeasure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFaultToleranceMeasure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFaultToleranceMeasure &a, TDDIFaultToleranceMeasure &b);

std::ostream& operator<<(std::ostream& out, const TDDIFaultToleranceMeasure& obj);

typedef struct _TDDIMeasureUnion__isset {
  _TDDIMeasureUnion__isset() : Measure(false), FaultToleranceMeasure(false), SecurityControl(false) {}
  bool Measure :1;
  bool FaultToleranceMeasure :1;
  bool SecurityControl :1;
} _TDDIMeasureUnion__isset;

class TDDIMeasureUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIMeasureUnion(const TDDIMeasureUnion&);
  TDDIMeasureUnion& operator=(const TDDIMeasureUnion&);
  TDDIMeasureUnion() : Measure(), FaultToleranceMeasure(), SecurityControl() {
  }

  virtual ~TDDIMeasureUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIMeasure> Measure;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFaultToleranceMeasure> FaultToleranceMeasure;
  ::apache::thrift::stdcxx::shared_ptr<TDDISecurityControl> SecurityControl;

  _TDDIMeasureUnion__isset __isset;

  void __set_Measure(::apache::thrift::stdcxx::shared_ptr<TDDIMeasure> val);

  void __set_FaultToleranceMeasure(::apache::thrift::stdcxx::shared_ptr<TDDIFaultToleranceMeasure> val);

  void __set_SecurityControl(::apache::thrift::stdcxx::shared_ptr<TDDISecurityControl> val);

  bool operator == (const TDDIMeasureUnion & rhs) const
  {
    if (__isset.Measure != rhs.__isset.Measure)
      return false;
    else if (__isset.Measure && !(Measure == rhs.Measure))
      return false;
    if (__isset.FaultToleranceMeasure != rhs.__isset.FaultToleranceMeasure)
      return false;
    else if (__isset.FaultToleranceMeasure && !(FaultToleranceMeasure == rhs.FaultToleranceMeasure))
      return false;
    if (__isset.SecurityControl != rhs.__isset.SecurityControl)
      return false;
    else if (__isset.SecurityControl && !(SecurityControl == rhs.SecurityControl))
      return false;
    return true;
  }
  bool operator != (const TDDIMeasureUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMeasureUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMeasureUnion &a, TDDIMeasureUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIMeasureUnion& obj);

typedef struct _TDDIAbstractMeasure__isset {
  _TDDIAbstractMeasure__isset() : UsedMeasure(false), UsedMeasureType(false) {}
  bool UsedMeasure :1;
  bool UsedMeasureType :1;
} _TDDIAbstractMeasure__isset;

class TDDIAbstractMeasure : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractMeasure(const TDDIAbstractMeasure&);
  TDDIAbstractMeasure& operator=(const TDDIAbstractMeasure&);
  TDDIAbstractMeasure() : UsedMeasureType((TDDIMeasureUnionType)0) {
  }

  virtual ~TDDIAbstractMeasure() throw();
  TDDIMeasureUnion UsedMeasure;
  TDDIMeasureUnionType UsedMeasureType;

  _TDDIAbstractMeasure__isset __isset;

  void __set_UsedMeasure(const TDDIMeasureUnion& val);

  void __set_UsedMeasureType(const TDDIMeasureUnionType val);

  bool operator == (const TDDIAbstractMeasure & rhs) const
  {
    if (!(UsedMeasure == rhs.UsedMeasure))
      return false;
    if (!(UsedMeasureType == rhs.UsedMeasureType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractMeasure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractMeasure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractMeasure &a, TDDIAbstractMeasure &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractMeasure& obj);

typedef struct _TDDIMaintenanceProcedure__isset {
  _TDDIMaintenanceProcedure__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), ActivityDescription(true), TechnicalDescription(true), ToolSpecification(true), StaffNumber(false), StaffSkillLevel(true), StaffTrainingDescription(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool ActivityDescription :1;
  bool TechnicalDescription :1;
  bool ToolSpecification :1;
  bool StaffNumber :1;
  bool StaffSkillLevel :1;
  bool StaffTrainingDescription :1;
} _TDDIMaintenanceProcedure__isset;

class TDDIMaintenanceProcedure : public virtual ::apache::thrift::TBase {
 public:

  TDDIMaintenanceProcedure(const TDDIMaintenanceProcedure&);
  TDDIMaintenanceProcedure& operator=(const TDDIMaintenanceProcedure&);
  TDDIMaintenanceProcedure() : Id(0), Name(""), Description(""), ActivityDescription(""), TechnicalDescription(""), ToolSpecification(""), StaffNumber(0), StaffSkillLevel(""), StaffTrainingDescription("") {

  }

  virtual ~TDDIMaintenanceProcedure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string ActivityDescription;
  std::string TechnicalDescription;
  std::string ToolSpecification;
  int32_t StaffNumber;
  std::string StaffSkillLevel;
  std::string StaffTrainingDescription;

  _TDDIMaintenanceProcedure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_ActivityDescription(const std::string& val);

  void __set_TechnicalDescription(const std::string& val);

  void __set_ToolSpecification(const std::string& val);

  void __set_StaffNumber(const int32_t val);

  void __set_StaffSkillLevel(const std::string& val);

  void __set_StaffTrainingDescription(const std::string& val);

  bool operator == (const TDDIMaintenanceProcedure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(ActivityDescription == rhs.ActivityDescription))
      return false;
    if (!(TechnicalDescription == rhs.TechnicalDescription))
      return false;
    if (!(ToolSpecification == rhs.ToolSpecification))
      return false;
    if (!(StaffNumber == rhs.StaffNumber))
      return false;
    if (!(StaffSkillLevel == rhs.StaffSkillLevel))
      return false;
    if (!(StaffTrainingDescription == rhs.StaffTrainingDescription))
      return false;
    return true;
  }
  bool operator != (const TDDIMaintenanceProcedure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMaintenanceProcedure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMaintenanceProcedure &a, TDDIMaintenanceProcedure &b);

std::ostream& operator<<(std::ostream& out, const TDDIMaintenanceProcedure& obj);

typedef struct _TDDIDependabilityPackage__isset {
  _TDDIDependabilityPackage__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Measures(true), MeasureTypes(true), MaintenanceProcedures(true), DomainPackages(true), TARAPackages(true), HARAPackages(true), RequirementPackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Measures :1;
  bool MeasureTypes :1;
  bool MaintenanceProcedures :1;
  bool DomainPackages :1;
  bool TARAPackages :1;
  bool HARAPackages :1;
  bool RequirementPackages :1;
} _TDDIDependabilityPackage__isset;

class TDDIDependabilityPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIDependabilityPackage(const TDDIDependabilityPackage&);
  TDDIDependabilityPackage& operator=(const TDDIDependabilityPackage&);
  TDDIDependabilityPackage() : Id(0), Name(""), Description("") {








  }

  virtual ~TDDIDependabilityPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractMeasure>  Measures;
  std::vector<TDDIMeasureType>  MeasureTypes;
  std::vector<TDDIMaintenanceProcedure>  MaintenanceProcedures;
  std::vector<TDDIDomainPackage>  DomainPackages;
  std::vector<TDDITARAPackage>  TARAPackages;
  std::vector<TDDIHARAPackage>  HARAPackages;
  std::vector<TDDIRequirementPackage>  RequirementPackages;

  _TDDIDependabilityPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Measures(const std::vector<TDDIAbstractMeasure> & val);

  void __set_MeasureTypes(const std::vector<TDDIMeasureType> & val);

  void __set_MaintenanceProcedures(const std::vector<TDDIMaintenanceProcedure> & val);

  void __set_DomainPackages(const std::vector<TDDIDomainPackage> & val);

  void __set_TARAPackages(const std::vector<TDDITARAPackage> & val);

  void __set_HARAPackages(const std::vector<TDDIHARAPackage> & val);

  void __set_RequirementPackages(const std::vector<TDDIRequirementPackage> & val);

  bool operator == (const TDDIDependabilityPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Measures == rhs.Measures))
      return false;
    if (!(MeasureTypes == rhs.MeasureTypes))
      return false;
    if (!(MaintenanceProcedures == rhs.MaintenanceProcedures))
      return false;
    if (!(DomainPackages == rhs.DomainPackages))
      return false;
    if (!(TARAPackages == rhs.TARAPackages))
      return false;
    if (!(HARAPackages == rhs.HARAPackages))
      return false;
    if (!(RequirementPackages == rhs.RequirementPackages))
      return false;
    return true;
  }
  bool operator != (const TDDIDependabilityPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDependabilityPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDependabilityPackage &a, TDDIDependabilityPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityPackage& obj);

typedef struct _TDDIPort__isset {
  _TDDIPort__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), DependabilityRequirements(true), AssuranceLevel(false), FlowType(true), Direction(true), RefinedPorts(true), InterfaceFailures(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool FlowType :1;
  bool Direction :1;
  bool RefinedPorts :1;
  bool InterfaceFailures :1;
} _TDDIPort__isset;

class TDDIPort : public virtual ::apache::thrift::TBase {
 public:

  TDDIPort(const TDDIPort&);
  TDDIPort& operator=(const TDDIPort&);
  TDDIPort() : Id(0), Name(""), Description(""), AssuranceLevel(), FlowType(""), Direction((TDDIPortDirection)0) {


    Direction = (TDDIPortDirection)0;



  }

  virtual ~TDDIPort() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::string FlowType;
  TDDIPortDirection Direction;
  std::vector<TDDIPortRef>  RefinedPorts;
  std::vector<TDDIAbstractFailureRef>  InterfaceFailures;

  _TDDIPort__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_FlowType(const std::string& val);

  void __set_Direction(const TDDIPortDirection val);

  void __set_RefinedPorts(const std::vector<TDDIPortRef> & val);

  void __set_InterfaceFailures(const std::vector<TDDIAbstractFailureRef> & val);

  bool operator == (const TDDIPort & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(FlowType == rhs.FlowType))
      return false;
    if (!(Direction == rhs.Direction))
      return false;
    if (!(RefinedPorts == rhs.RefinedPorts))
      return false;
    if (!(InterfaceFailures == rhs.InterfaceFailures))
      return false;
    return true;
  }
  bool operator != (const TDDIPort &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPort & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPort &a, TDDIPort &b);

std::ostream& operator<<(std::ostream& out, const TDDIPort& obj);

typedef struct _TDDISystemBoundary__isset {
  _TDDISystemBoundary__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Ports(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Ports :1;
} _TDDISystemBoundary__isset;

class TDDISystemBoundary : public virtual ::apache::thrift::TBase {
 public:

  TDDISystemBoundary(const TDDISystemBoundary&);
  TDDISystemBoundary& operator=(const TDDISystemBoundary&);
  TDDISystemBoundary() : Id(0), Name(""), Description("") {


  }

  virtual ~TDDISystemBoundary() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIPortRef>  Ports;

  _TDDISystemBoundary__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Ports(const std::vector<TDDIPortRef> & val);

  bool operator == (const TDDISystemBoundary & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    return true;
  }
  bool operator != (const TDDISystemBoundary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISystemBoundary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISystemBoundary &a, TDDISystemBoundary &b);

std::ostream& operator<<(std::ostream& out, const TDDISystemBoundary& obj);

typedef struct _TDDISignal__isset {
  _TDDISignal__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
} _TDDISignal__isset;

class TDDISignal : public virtual ::apache::thrift::TBase {
 public:

  TDDISignal(const TDDISignal&);
  TDDISignal& operator=(const TDDISignal&);
  TDDISignal() : Id(0), Name(""), Description(""), FromPort(), ToPort() {

  }

  virtual ~TDDISignal() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIPort> FromPort;
  ::apache::thrift::stdcxx::shared_ptr<TDDIPort> ToPort;

  _TDDISignal__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_FromPort(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val);

  void __set_ToPort(::apache::thrift::stdcxx::shared_ptr<TDDIPort> val);

  bool operator == (const TDDISignal & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(FromPort == rhs.FromPort))
      return false;
    if (!(ToPort == rhs.ToPort))
      return false;
    return true;
  }
  bool operator != (const TDDISignal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISignal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISignal &a, TDDISignal &b);

std::ostream& operator<<(std::ostream& out, const TDDISignal& obj);

typedef struct _TDDIPerfChars__isset {
  _TDDIPerfChars__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), ResponseTime(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool ResponseTime :1;
} _TDDIPerfChars__isset;

class TDDIPerfChars : public virtual ::apache::thrift::TBase {
 public:

  TDDIPerfChars(const TDDIPerfChars&);
  TDDIPerfChars& operator=(const TDDIPerfChars&);
  TDDIPerfChars() : Id(0), Name(""), Description(""), ResponseTime(0) {

  }

  virtual ~TDDIPerfChars() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double ResponseTime;

  _TDDIPerfChars__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_ResponseTime(const double val);

  bool operator == (const TDDIPerfChars & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(ResponseTime == rhs.ResponseTime))
      return false;
    return true;
  }
  bool operator != (const TDDIPerfChars &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPerfChars & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPerfChars &a, TDDIPerfChars &b);

std::ostream& operator<<(std::ostream& out, const TDDIPerfChars& obj);

typedef struct _TDDIFunction__isset {
  _TDDIFunction__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), DependabilityRequirements(true), AssuranceLevel(false), SubFunctions(true), Ports(true), Signals(true), PerfChars(false), FailureModels(true), Malfunctions(true), AsAsset(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubFunctions :1;
  bool Ports :1;
  bool Signals :1;
  bool PerfChars :1;
  bool FailureModels :1;
  bool Malfunctions :1;
  bool AsAsset :1;
} _TDDIFunction__isset;

class TDDIFunction : public virtual ::apache::thrift::TBase {
 public:

  TDDIFunction(const TDDIFunction&);
  TDDIFunction& operator=(const TDDIFunction&);
  TDDIFunction() : Id(0), Name(""), Description(""), AssuranceLevel(), AsAsset() {







  }

  virtual ~TDDIFunction() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractFunctionRef>  SubFunctions;
  std::vector<TDDIPort>  Ports;
  std::vector<TDDISignal>  Signals;
  TDDIPerfChars PerfChars;
  std::vector<TDDIAbstractFailureModelRef>  FailureModels;
  std::vector<TDDIMalfunctionRef>  Malfunctions;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> AsAsset;

  _TDDIFunction__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_Ports(const std::vector<TDDIPort> & val);

  void __set_Signals(const std::vector<TDDISignal> & val);

  void __set_PerfChars(const TDDIPerfChars& val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_Malfunctions(const std::vector<TDDIMalfunctionRef> & val);

  void __set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val);

  bool operator == (const TDDIFunction & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubFunctions == rhs.SubFunctions))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(Signals == rhs.Signals))
      return false;
    if (!(PerfChars == rhs.PerfChars))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(Malfunctions == rhs.Malfunctions))
      return false;
    if (!(AsAsset == rhs.AsAsset))
      return false;
    return true;
  }
  bool operator != (const TDDIFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFunction &a, TDDIFunction &b);

std::ostream& operator<<(std::ostream& out, const TDDIFunction& obj);

typedef struct _TDDISafetyFunction__isset {
  _TDDISafetyFunction__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), DependabilityRequirements(true), AssuranceLevel(false), SubFunctions(true), Ports(true), Signals(true), PerfChars(false), FailureModels(true), Malfunctions(true), AsAsset(false), Object(true), Behavior(true), SafeState(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool SubFunctions :1;
  bool Ports :1;
  bool Signals :1;
  bool PerfChars :1;
  bool FailureModels :1;
  bool Malfunctions :1;
  bool AsAsset :1;
  bool Object :1;
  bool Behavior :1;
  bool SafeState :1;
} _TDDISafetyFunction__isset;

class TDDISafetyFunction : public virtual ::apache::thrift::TBase {
 public:

  TDDISafetyFunction(const TDDISafetyFunction&);
  TDDISafetyFunction& operator=(const TDDISafetyFunction&);
  TDDISafetyFunction() : Id(0), Name(""), Description(""), AssuranceLevel(), AsAsset(), Object(""), Behavior(""), SafeState("") {







  }

  virtual ~TDDISafetyFunction() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractFunctionRef>  SubFunctions;
  std::vector<TDDIPort>  Ports;
  std::vector<TDDISignal>  Signals;
  TDDIPerfChars PerfChars;
  std::vector<TDDIAbstractFailureModelRef>  FailureModels;
  std::vector<TDDIMalfunctionRef>  Malfunctions;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> AsAsset;
  std::string Object;
  std::string Behavior;
  std::string SafeState;

  _TDDISafetyFunction__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_SubFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_Ports(const std::vector<TDDIPort> & val);

  void __set_Signals(const std::vector<TDDISignal> & val);

  void __set_PerfChars(const TDDIPerfChars& val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_Malfunctions(const std::vector<TDDIMalfunctionRef> & val);

  void __set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val);

  void __set_Object(const std::string& val);

  void __set_Behavior(const std::string& val);

  void __set_SafeState(const std::string& val);

  bool operator == (const TDDISafetyFunction & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(SubFunctions == rhs.SubFunctions))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(Signals == rhs.Signals))
      return false;
    if (!(PerfChars == rhs.PerfChars))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(Malfunctions == rhs.Malfunctions))
      return false;
    if (!(AsAsset == rhs.AsAsset))
      return false;
    if (!(Object == rhs.Object))
      return false;
    if (!(Behavior == rhs.Behavior))
      return false;
    if (!(SafeState == rhs.SafeState))
      return false;
    return true;
  }
  bool operator != (const TDDISafetyFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISafetyFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISafetyFunction &a, TDDISafetyFunction &b);

std::ostream& operator<<(std::ostream& out, const TDDISafetyFunction& obj);

typedef struct _TDDIFunctionUnion__isset {
  _TDDIFunctionUnion__isset() : Function(false), SafetyFunction(false) {}
  bool Function :1;
  bool SafetyFunction :1;
} _TDDIFunctionUnion__isset;

class TDDIFunctionUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFunctionUnion(const TDDIFunctionUnion&);
  TDDIFunctionUnion& operator=(const TDDIFunctionUnion&);
  TDDIFunctionUnion() : Function(), SafetyFunction() {
  }

  virtual ~TDDIFunctionUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIFunction> Function;
  ::apache::thrift::stdcxx::shared_ptr<TDDISafetyFunction> SafetyFunction;

  _TDDIFunctionUnion__isset __isset;

  void __set_Function(::apache::thrift::stdcxx::shared_ptr<TDDIFunction> val);

  void __set_SafetyFunction(::apache::thrift::stdcxx::shared_ptr<TDDISafetyFunction> val);

  bool operator == (const TDDIFunctionUnion & rhs) const
  {
    if (__isset.Function != rhs.__isset.Function)
      return false;
    else if (__isset.Function && !(Function == rhs.Function))
      return false;
    if (__isset.SafetyFunction != rhs.__isset.SafetyFunction)
      return false;
    else if (__isset.SafetyFunction && !(SafetyFunction == rhs.SafetyFunction))
      return false;
    return true;
  }
  bool operator != (const TDDIFunctionUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFunctionUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFunctionUnion &a, TDDIFunctionUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFunctionUnion& obj);

typedef struct _TDDIAbstractFunction__isset {
  _TDDIAbstractFunction__isset() : UsedFunction(false), UsedFunctionType(false) {}
  bool UsedFunction :1;
  bool UsedFunctionType :1;
} _TDDIAbstractFunction__isset;

class TDDIAbstractFunction : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFunction(const TDDIAbstractFunction&);
  TDDIAbstractFunction& operator=(const TDDIAbstractFunction&);
  TDDIAbstractFunction() : UsedFunctionType((TDDIFunctionUnionType)0) {
  }

  virtual ~TDDIAbstractFunction() throw();
  TDDIFunctionUnion UsedFunction;
  TDDIFunctionUnionType UsedFunctionType;

  _TDDIAbstractFunction__isset __isset;

  void __set_UsedFunction(const TDDIFunctionUnion& val);

  void __set_UsedFunctionType(const TDDIFunctionUnionType val);

  bool operator == (const TDDIAbstractFunction & rhs) const
  {
    if (!(UsedFunction == rhs.UsedFunction))
      return false;
    if (!(UsedFunctionType == rhs.UsedFunctionType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFunction &a, TDDIAbstractFunction &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFunction& obj);

typedef struct _TDDIConfiguration__isset {
  _TDDIConfiguration__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), SubSystems(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool SubSystems :1;
} _TDDIConfiguration__isset;

class TDDIConfiguration : public virtual ::apache::thrift::TBase {
 public:

  TDDIConfiguration(const TDDIConfiguration&);
  TDDIConfiguration& operator=(const TDDIConfiguration&);
  TDDIConfiguration() : Id(0), Name(""), Description("") {


  }

  virtual ~TDDIConfiguration() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractSystemRef>  SubSystems;

  _TDDIConfiguration__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  bool operator == (const TDDIConfiguration & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    return true;
  }
  bool operator != (const TDDIConfiguration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIConfiguration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIConfiguration &a, TDDIConfiguration &b);

std::ostream& operator<<(std::ostream& out, const TDDIConfiguration& obj);

typedef struct _TDDIContext__isset {
  _TDDIContext__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), UsageHistory(true), MissionTime(true), MissionTimeTimeUnit(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool UsageHistory :1;
  bool MissionTime :1;
  bool MissionTimeTimeUnit :1;
} _TDDIContext__isset;

class TDDIContext : public virtual ::apache::thrift::TBase {
 public:

  TDDIContext(const TDDIContext&);
  TDDIContext& operator=(const TDDIContext&);
  TDDIContext() : Id(0), Name(""), Description(""), UsageHistory(""), MissionTime(0), MissionTimeTimeUnit((TDDITimeUnit)3) {

    MissionTimeTimeUnit = (TDDITimeUnit)3;

  }

  virtual ~TDDIContext() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string UsageHistory;
  double MissionTime;
  TDDITimeUnit MissionTimeTimeUnit;

  _TDDIContext__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_UsageHistory(const std::string& val);

  void __set_MissionTime(const double val);

  void __set_MissionTimeTimeUnit(const TDDITimeUnit val);

  bool operator == (const TDDIContext & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(UsageHistory == rhs.UsageHistory))
      return false;
    if (!(MissionTime == rhs.MissionTime))
      return false;
    if (!(MissionTimeTimeUnit == rhs.MissionTimeTimeUnit))
      return false;
    return true;
  }
  bool operator != (const TDDIContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIContext &a, TDDIContext &b);

std::ostream& operator<<(std::ostream& out, const TDDIContext& obj);

typedef struct _TDDISystem__isset {
  _TDDISystem__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), OverallLifetime(true), OverallLifetimeTimeUnit(true), Contexts(true), Configurations(true), Ports(true), Signals(true), SystemBoundaries(true), AppliedStandards(true), RealisedFunctions(true), AsAsset(false), DependabilityRequirements(true), AssuranceLevel(false), FailureModels(true), SubSystems(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool OverallLifetime :1;
  bool OverallLifetimeTimeUnit :1;
  bool Contexts :1;
  bool Configurations :1;
  bool Ports :1;
  bool Signals :1;
  bool SystemBoundaries :1;
  bool AppliedStandards :1;
  bool RealisedFunctions :1;
  bool AsAsset :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool FailureModels :1;
  bool SubSystems :1;
} _TDDISystem__isset;

class TDDISystem : public virtual ::apache::thrift::TBase {
 public:

  TDDISystem(const TDDISystem&);
  TDDISystem& operator=(const TDDISystem&);
  TDDISystem() : Id(0), Name(""), Description(""), OverallLifetime(0), OverallLifetimeTimeUnit((TDDITimeUnit)3), AsAsset(), AssuranceLevel() {

    OverallLifetimeTimeUnit = (TDDITimeUnit)3;











  }

  virtual ~TDDISystem() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double OverallLifetime;
  TDDITimeUnit OverallLifetimeTimeUnit;
  std::vector<TDDIContext>  Contexts;
  std::vector<TDDIConfiguration>  Configurations;
  std::vector<TDDIPort>  Ports;
  std::vector<TDDISignal>  Signals;
  std::vector<TDDISystemBoundary>  SystemBoundaries;
  std::vector<TDDIAbstractStandardRef>  AppliedStandards;
  std::vector<TDDIAbstractFunctionRef>  RealisedFunctions;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> AsAsset;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractFailureModelRef>  FailureModels;
  std::vector<TDDIAbstractSystemRef>  SubSystems;

  _TDDISystem__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_OverallLifetime(const double val);

  void __set_OverallLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_Contexts(const std::vector<TDDIContext> & val);

  void __set_Configurations(const std::vector<TDDIConfiguration> & val);

  void __set_Ports(const std::vector<TDDIPort> & val);

  void __set_Signals(const std::vector<TDDISignal> & val);

  void __set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val);

  void __set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val);

  void __set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  bool operator == (const TDDISystem & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(OverallLifetime == rhs.OverallLifetime))
      return false;
    if (!(OverallLifetimeTimeUnit == rhs.OverallLifetimeTimeUnit))
      return false;
    if (!(Contexts == rhs.Contexts))
      return false;
    if (!(Configurations == rhs.Configurations))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(Signals == rhs.Signals))
      return false;
    if (!(SystemBoundaries == rhs.SystemBoundaries))
      return false;
    if (!(AppliedStandards == rhs.AppliedStandards))
      return false;
    if (!(RealisedFunctions == rhs.RealisedFunctions))
      return false;
    if (!(AsAsset == rhs.AsAsset))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    return true;
  }
  bool operator != (const TDDISystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISystem &a, TDDISystem &b);

std::ostream& operator<<(std::ostream& out, const TDDISystem& obj);

typedef struct _TDDILogicalComponent__isset {
  _TDDILogicalComponent__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), OverallLifetime(true), OverallLifetimeTimeUnit(true), Contexts(true), Configurations(true), Ports(true), Signals(true), SystemBoundaries(true), AppliedStandards(true), RealisedFunctions(true), AsAsset(false), DependabilityRequirements(true), AssuranceLevel(false), FailureModels(true), SubSystems(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool OverallLifetime :1;
  bool OverallLifetimeTimeUnit :1;
  bool Contexts :1;
  bool Configurations :1;
  bool Ports :1;
  bool Signals :1;
  bool SystemBoundaries :1;
  bool AppliedStandards :1;
  bool RealisedFunctions :1;
  bool AsAsset :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool FailureModels :1;
  bool SubSystems :1;
} _TDDILogicalComponent__isset;

class TDDILogicalComponent : public virtual ::apache::thrift::TBase {
 public:

  TDDILogicalComponent(const TDDILogicalComponent&);
  TDDILogicalComponent& operator=(const TDDILogicalComponent&);
  TDDILogicalComponent() : Id(0), Name(""), Description(""), OverallLifetime(0), OverallLifetimeTimeUnit((TDDITimeUnit)3), AsAsset(), AssuranceLevel() {

    OverallLifetimeTimeUnit = (TDDITimeUnit)3;











  }

  virtual ~TDDILogicalComponent() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double OverallLifetime;
  TDDITimeUnit OverallLifetimeTimeUnit;
  std::vector<TDDIContext>  Contexts;
  std::vector<TDDIConfiguration>  Configurations;
  std::vector<TDDIPort>  Ports;
  std::vector<TDDISignal>  Signals;
  std::vector<TDDISystemBoundary>  SystemBoundaries;
  std::vector<TDDIAbstractStandardRef>  AppliedStandards;
  std::vector<TDDIAbstractFunctionRef>  RealisedFunctions;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> AsAsset;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractFailureModelRef>  FailureModels;
  std::vector<TDDIAbstractSystemRef>  SubSystems;

  _TDDILogicalComponent__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_OverallLifetime(const double val);

  void __set_OverallLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_Contexts(const std::vector<TDDIContext> & val);

  void __set_Configurations(const std::vector<TDDIConfiguration> & val);

  void __set_Ports(const std::vector<TDDIPort> & val);

  void __set_Signals(const std::vector<TDDISignal> & val);

  void __set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val);

  void __set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val);

  void __set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  bool operator == (const TDDILogicalComponent & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(OverallLifetime == rhs.OverallLifetime))
      return false;
    if (!(OverallLifetimeTimeUnit == rhs.OverallLifetimeTimeUnit))
      return false;
    if (!(Contexts == rhs.Contexts))
      return false;
    if (!(Configurations == rhs.Configurations))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(Signals == rhs.Signals))
      return false;
    if (!(SystemBoundaries == rhs.SystemBoundaries))
      return false;
    if (!(AppliedStandards == rhs.AppliedStandards))
      return false;
    if (!(RealisedFunctions == rhs.RealisedFunctions))
      return false;
    if (!(AsAsset == rhs.AsAsset))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    return true;
  }
  bool operator != (const TDDILogicalComponent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILogicalComponent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILogicalComponent &a, TDDILogicalComponent &b);

std::ostream& operator<<(std::ostream& out, const TDDILogicalComponent& obj);

typedef struct _TDDISafetyRelatedSystem__isset {
  _TDDISafetyRelatedSystem__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), OverallLifetime(true), OverallLifetimeTimeUnit(true), Contexts(true), Configurations(true), Ports(true), Signals(true), SystemBoundaries(true), AppliedStandards(true), RealisedFunctions(true), AsAsset(false), DependabilityRequirements(true), AssuranceLevel(false), FailureModels(true), SubSystems(true), SafeState(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool OverallLifetime :1;
  bool OverallLifetimeTimeUnit :1;
  bool Contexts :1;
  bool Configurations :1;
  bool Ports :1;
  bool Signals :1;
  bool SystemBoundaries :1;
  bool AppliedStandards :1;
  bool RealisedFunctions :1;
  bool AsAsset :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool FailureModels :1;
  bool SubSystems :1;
  bool SafeState :1;
} _TDDISafetyRelatedSystem__isset;

class TDDISafetyRelatedSystem : public virtual ::apache::thrift::TBase {
 public:

  TDDISafetyRelatedSystem(const TDDISafetyRelatedSystem&);
  TDDISafetyRelatedSystem& operator=(const TDDISafetyRelatedSystem&);
  TDDISafetyRelatedSystem() : Id(0), Name(""), Description(""), OverallLifetime(0), OverallLifetimeTimeUnit((TDDITimeUnit)3), AsAsset(), AssuranceLevel(), SafeState("") {

    OverallLifetimeTimeUnit = (TDDITimeUnit)3;











  }

  virtual ~TDDISafetyRelatedSystem() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double OverallLifetime;
  TDDITimeUnit OverallLifetimeTimeUnit;
  std::vector<TDDIContext>  Contexts;
  std::vector<TDDIConfiguration>  Configurations;
  std::vector<TDDIPort>  Ports;
  std::vector<TDDISignal>  Signals;
  std::vector<TDDISystemBoundary>  SystemBoundaries;
  std::vector<TDDIAbstractStandardRef>  AppliedStandards;
  std::vector<TDDIAbstractFunctionRef>  RealisedFunctions;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> AsAsset;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractFailureModelRef>  FailureModels;
  std::vector<TDDIAbstractSystemRef>  SubSystems;
  std::string SafeState;

  _TDDISafetyRelatedSystem__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_OverallLifetime(const double val);

  void __set_OverallLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_Contexts(const std::vector<TDDIContext> & val);

  void __set_Configurations(const std::vector<TDDIConfiguration> & val);

  void __set_Ports(const std::vector<TDDIPort> & val);

  void __set_Signals(const std::vector<TDDISignal> & val);

  void __set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val);

  void __set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val);

  void __set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  void __set_SafeState(const std::string& val);

  bool operator == (const TDDISafetyRelatedSystem & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(OverallLifetime == rhs.OverallLifetime))
      return false;
    if (!(OverallLifetimeTimeUnit == rhs.OverallLifetimeTimeUnit))
      return false;
    if (!(Contexts == rhs.Contexts))
      return false;
    if (!(Configurations == rhs.Configurations))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(Signals == rhs.Signals))
      return false;
    if (!(SystemBoundaries == rhs.SystemBoundaries))
      return false;
    if (!(AppliedStandards == rhs.AppliedStandards))
      return false;
    if (!(RealisedFunctions == rhs.RealisedFunctions))
      return false;
    if (!(AsAsset == rhs.AsAsset))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    if (!(SafeState == rhs.SafeState))
      return false;
    return true;
  }
  bool operator != (const TDDISafetyRelatedSystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISafetyRelatedSystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISafetyRelatedSystem &a, TDDISafetyRelatedSystem &b);

std::ostream& operator<<(std::ostream& out, const TDDISafetyRelatedSystem& obj);

typedef struct _TDDILifecycleCondition__isset {
  _TDDILifecycleCondition__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Value(true), Conditions(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Value :1;
  bool Conditions :1;
} _TDDILifecycleCondition__isset;

class TDDILifecycleCondition : public virtual ::apache::thrift::TBase {
 public:

  TDDILifecycleCondition(const TDDILifecycleCondition&);
  TDDILifecycleCondition& operator=(const TDDILifecycleCondition&);
  TDDILifecycleCondition() : Id(0), Name(""), Description(""), Value("") {


  }

  virtual ~TDDILifecycleCondition() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Value;
  std::vector<TDDILifecycleCondition>  Conditions;

  _TDDILifecycleCondition__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Value(const std::string& val);

  void __set_Conditions(const std::vector<TDDILifecycleCondition> & val);

  bool operator == (const TDDILifecycleCondition & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Conditions == rhs.Conditions))
      return false;
    return true;
  }
  bool operator != (const TDDILifecycleCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILifecycleCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILifecycleCondition &a, TDDILifecycleCondition &b);

std::ostream& operator<<(std::ostream& out, const TDDILifecycleCondition& obj);

typedef struct _TDDIPhysicalComponent__isset {
  _TDDIPhysicalComponent__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), OverallLifetime(true), OverallLifetimeTimeUnit(true), Contexts(true), Configurations(true), Ports(true), Signals(true), SystemBoundaries(true), AppliedStandards(true), RealisedFunctions(true), AsAsset(false), DependabilityRequirements(true), AssuranceLevel(false), FailureModels(true), SubSystems(true), Dimensions(true), PricePerUnit(false), Mass(true), ProtectionCategory(false), UsefulLifetime(true), UsefulLifetimeTimeUnit(true), LogicalComponents(true), LifecycleConditions(true), MaintenanceProcedure(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool OverallLifetime :1;
  bool OverallLifetimeTimeUnit :1;
  bool Contexts :1;
  bool Configurations :1;
  bool Ports :1;
  bool Signals :1;
  bool SystemBoundaries :1;
  bool AppliedStandards :1;
  bool RealisedFunctions :1;
  bool AsAsset :1;
  bool DependabilityRequirements :1;
  bool AssuranceLevel :1;
  bool FailureModels :1;
  bool SubSystems :1;
  bool Dimensions :1;
  bool PricePerUnit :1;
  bool Mass :1;
  bool ProtectionCategory :1;
  bool UsefulLifetime :1;
  bool UsefulLifetimeTimeUnit :1;
  bool LogicalComponents :1;
  bool LifecycleConditions :1;
  bool MaintenanceProcedure :1;
} _TDDIPhysicalComponent__isset;

class TDDIPhysicalComponent : public virtual ::apache::thrift::TBase {
 public:

  TDDIPhysicalComponent(const TDDIPhysicalComponent&);
  TDDIPhysicalComponent& operator=(const TDDIPhysicalComponent&);
  TDDIPhysicalComponent() : Id(0), Name(""), Description(""), OverallLifetime(0), OverallLifetimeTimeUnit((TDDITimeUnit)3), AsAsset(), AssuranceLevel(), Dimensions(""), PricePerUnit(0), Mass(0), ProtectionCategory(0), UsefulLifetime(0), UsefulLifetimeTimeUnit((TDDITimeUnit)0), MaintenanceProcedure() {

    OverallLifetimeTimeUnit = (TDDITimeUnit)3;











    UsefulLifetimeTimeUnit = (TDDITimeUnit)0;



  }

  virtual ~TDDIPhysicalComponent() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double OverallLifetime;
  TDDITimeUnit OverallLifetimeTimeUnit;
  std::vector<TDDIContext>  Contexts;
  std::vector<TDDIConfiguration>  Configurations;
  std::vector<TDDIPort>  Ports;
  std::vector<TDDISignal>  Signals;
  std::vector<TDDISystemBoundary>  SystemBoundaries;
  std::vector<TDDIAbstractStandardRef>  AppliedStandards;
  std::vector<TDDIAbstractFunctionRef>  RealisedFunctions;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> AsAsset;
  std::vector<TDDIAbstractDependabilityRequirementRef>  DependabilityRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIAbstractFailureModelRef>  FailureModels;
  std::vector<TDDIAbstractSystemRef>  SubSystems;
  std::string Dimensions;
  int32_t PricePerUnit;
  double Mass;
  int32_t ProtectionCategory;
  double UsefulLifetime;
  TDDITimeUnit UsefulLifetimeTimeUnit;
  std::vector<TDDILogicalComponentRef>  LogicalComponents;
  std::vector<TDDILifecycleCondition>  LifecycleConditions;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> MaintenanceProcedure;

  _TDDIPhysicalComponent__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_OverallLifetime(const double val);

  void __set_OverallLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_Contexts(const std::vector<TDDIContext> & val);

  void __set_Configurations(const std::vector<TDDIConfiguration> & val);

  void __set_Ports(const std::vector<TDDIPort> & val);

  void __set_Signals(const std::vector<TDDISignal> & val);

  void __set_SystemBoundaries(const std::vector<TDDISystemBoundary> & val);

  void __set_AppliedStandards(const std::vector<TDDIAbstractStandardRef> & val);

  void __set_RealisedFunctions(const std::vector<TDDIAbstractFunctionRef> & val);

  void __set_AsAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAsset> val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_SubSystems(const std::vector<TDDIAbstractSystemRef> & val);

  void __set_Dimensions(const std::string& val);

  void __set_PricePerUnit(const int32_t val);

  void __set_Mass(const double val);

  void __set_ProtectionCategory(const int32_t val);

  void __set_UsefulLifetime(const double val);

  void __set_UsefulLifetimeTimeUnit(const TDDITimeUnit val);

  void __set_LogicalComponents(const std::vector<TDDILogicalComponentRef> & val);

  void __set_LifecycleConditions(const std::vector<TDDILifecycleCondition> & val);

  void __set_MaintenanceProcedure(::apache::thrift::stdcxx::shared_ptr<TDDIMaintenanceProcedure> val);

  bool operator == (const TDDIPhysicalComponent & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(OverallLifetime == rhs.OverallLifetime))
      return false;
    if (!(OverallLifetimeTimeUnit == rhs.OverallLifetimeTimeUnit))
      return false;
    if (!(Contexts == rhs.Contexts))
      return false;
    if (!(Configurations == rhs.Configurations))
      return false;
    if (!(Ports == rhs.Ports))
      return false;
    if (!(Signals == rhs.Signals))
      return false;
    if (!(SystemBoundaries == rhs.SystemBoundaries))
      return false;
    if (!(AppliedStandards == rhs.AppliedStandards))
      return false;
    if (!(RealisedFunctions == rhs.RealisedFunctions))
      return false;
    if (!(AsAsset == rhs.AsAsset))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    if (!(SubSystems == rhs.SubSystems))
      return false;
    if (!(Dimensions == rhs.Dimensions))
      return false;
    if (!(PricePerUnit == rhs.PricePerUnit))
      return false;
    if (!(Mass == rhs.Mass))
      return false;
    if (!(ProtectionCategory == rhs.ProtectionCategory))
      return false;
    if (!(UsefulLifetime == rhs.UsefulLifetime))
      return false;
    if (!(UsefulLifetimeTimeUnit == rhs.UsefulLifetimeTimeUnit))
      return false;
    if (!(LogicalComponents == rhs.LogicalComponents))
      return false;
    if (!(LifecycleConditions == rhs.LifecycleConditions))
      return false;
    if (!(MaintenanceProcedure == rhs.MaintenanceProcedure))
      return false;
    return true;
  }
  bool operator != (const TDDIPhysicalComponent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPhysicalComponent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPhysicalComponent &a, TDDIPhysicalComponent &b);

std::ostream& operator<<(std::ostream& out, const TDDIPhysicalComponent& obj);

typedef struct _TDDISystemUnion__isset {
  _TDDISystemUnion__isset() : System(false), PhysicalComponent(false), LogicalComponent(false), SafetyRelatedSystem(false) {}
  bool System :1;
  bool PhysicalComponent :1;
  bool LogicalComponent :1;
  bool SafetyRelatedSystem :1;
} _TDDISystemUnion__isset;

class TDDISystemUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDISystemUnion(const TDDISystemUnion&);
  TDDISystemUnion& operator=(const TDDISystemUnion&);
  TDDISystemUnion() : System(), PhysicalComponent(), LogicalComponent(), SafetyRelatedSystem() {
  }

  virtual ~TDDISystemUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDISystem> System;
  ::apache::thrift::stdcxx::shared_ptr<TDDIPhysicalComponent> PhysicalComponent;
  ::apache::thrift::stdcxx::shared_ptr<TDDILogicalComponent> LogicalComponent;
  ::apache::thrift::stdcxx::shared_ptr<TDDISafetyRelatedSystem> SafetyRelatedSystem;

  _TDDISystemUnion__isset __isset;

  void __set_System(::apache::thrift::stdcxx::shared_ptr<TDDISystem> val);

  void __set_PhysicalComponent(::apache::thrift::stdcxx::shared_ptr<TDDIPhysicalComponent> val);

  void __set_LogicalComponent(::apache::thrift::stdcxx::shared_ptr<TDDILogicalComponent> val);

  void __set_SafetyRelatedSystem(::apache::thrift::stdcxx::shared_ptr<TDDISafetyRelatedSystem> val);

  bool operator == (const TDDISystemUnion & rhs) const
  {
    if (__isset.System != rhs.__isset.System)
      return false;
    else if (__isset.System && !(System == rhs.System))
      return false;
    if (__isset.PhysicalComponent != rhs.__isset.PhysicalComponent)
      return false;
    else if (__isset.PhysicalComponent && !(PhysicalComponent == rhs.PhysicalComponent))
      return false;
    if (__isset.LogicalComponent != rhs.__isset.LogicalComponent)
      return false;
    else if (__isset.LogicalComponent && !(LogicalComponent == rhs.LogicalComponent))
      return false;
    if (__isset.SafetyRelatedSystem != rhs.__isset.SafetyRelatedSystem)
      return false;
    else if (__isset.SafetyRelatedSystem && !(SafetyRelatedSystem == rhs.SafetyRelatedSystem))
      return false;
    return true;
  }
  bool operator != (const TDDISystemUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISystemUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISystemUnion &a, TDDISystemUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDISystemUnion& obj);

typedef struct _TDDIAbstractSystem__isset {
  _TDDIAbstractSystem__isset() : UsedSystem(false), UsedSystemType(false) {}
  bool UsedSystem :1;
  bool UsedSystemType :1;
} _TDDIAbstractSystem__isset;

class TDDIAbstractSystem : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractSystem(const TDDIAbstractSystem&);
  TDDIAbstractSystem& operator=(const TDDIAbstractSystem&);
  TDDIAbstractSystem() : UsedSystemType((TDDISystemUnionType)0) {
  }

  virtual ~TDDIAbstractSystem() throw();
  TDDISystemUnion UsedSystem;
  TDDISystemUnionType UsedSystemType;

  _TDDIAbstractSystem__isset __isset;

  void __set_UsedSystem(const TDDISystemUnion& val);

  void __set_UsedSystemType(const TDDISystemUnionType val);

  bool operator == (const TDDIAbstractSystem & rhs) const
  {
    if (!(UsedSystem == rhs.UsedSystem))
      return false;
    if (!(UsedSystemType == rhs.UsedSystemType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractSystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractSystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractSystem &a, TDDIAbstractSystem &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractSystem& obj);

typedef struct _TDDIDesignPackage__isset {
  _TDDIDesignPackage__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Systems(true), Functions(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Systems :1;
  bool Functions :1;
} _TDDIDesignPackage__isset;

class TDDIDesignPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIDesignPackage(const TDDIDesignPackage&);
  TDDIDesignPackage& operator=(const TDDIDesignPackage&);
  TDDIDesignPackage() : Id(0), Name(""), Description("") {



  }

  virtual ~TDDIDesignPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractSystem>  Systems;
  std::vector<TDDIAbstractFunction>  Functions;

  _TDDIDesignPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Systems(const std::vector<TDDIAbstractSystem> & val);

  void __set_Functions(const std::vector<TDDIAbstractFunction> & val);

  bool operator == (const TDDIDesignPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Systems == rhs.Systems))
      return false;
    if (!(Functions == rhs.Functions))
      return false;
    return true;
  }
  bool operator != (const TDDIDesignPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDesignPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDesignPackage &a, TDDIDesignPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIDesignPackage& obj);

typedef struct _TDDIDomainPackage__isset {
  _TDDIDomainPackage__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Standards(true), AssuranceLevels(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Standards :1;
  bool AssuranceLevels :1;
} _TDDIDomainPackage__isset;

class TDDIDomainPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIDomainPackage(const TDDIDomainPackage&);
  TDDIDomainPackage& operator=(const TDDIDomainPackage&);
  TDDIDomainPackage() : Id(0), Name(""), Description("") {



  }

  virtual ~TDDIDomainPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractStandard>  Standards;
  std::vector<TDDIAssuranceLevel>  AssuranceLevels;

  _TDDIDomainPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Standards(const std::vector<TDDIAbstractStandard> & val);

  void __set_AssuranceLevels(const std::vector<TDDIAssuranceLevel> & val);

  bool operator == (const TDDIDomainPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Standards == rhs.Standards))
      return false;
    if (!(AssuranceLevels == rhs.AssuranceLevels))
      return false;
    return true;
  }
  bool operator != (const TDDIDomainPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDomainPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDomainPackage &a, TDDIDomainPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIDomainPackage& obj);

typedef struct _TDDIAssuranceLevel__isset {
  _TDDIAssuranceLevel__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
} _TDDIAssuranceLevel__isset;

class TDDIAssuranceLevel : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceLevel(const TDDIAssuranceLevel&);
  TDDIAssuranceLevel& operator=(const TDDIAssuranceLevel&);
  TDDIAssuranceLevel() : Id(0), Name(""), Description("") {

  }

  virtual ~TDDIAssuranceLevel() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;

  _TDDIAssuranceLevel__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  bool operator == (const TDDIAssuranceLevel & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceLevel &a, TDDIAssuranceLevel &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceLevel& obj);

typedef struct _TDDIStandard__isset {
  _TDDIStandard__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
} _TDDIStandard__isset;

class TDDIStandard : public virtual ::apache::thrift::TBase {
 public:

  TDDIStandard(const TDDIStandard&);
  TDDIStandard& operator=(const TDDIStandard&);
  TDDIStandard() : Id(0), Name(""), Description("") {

  }

  virtual ~TDDIStandard() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;

  _TDDIStandard__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  bool operator == (const TDDIStandard & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    return true;
  }
  bool operator != (const TDDIStandard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIStandard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIStandard &a, TDDIStandard &b);

std::ostream& operator<<(std::ostream& out, const TDDIStandard& obj);

typedef struct _TDDISafetyStandard__isset {
  _TDDISafetyStandard__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), AssuranceLevels(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool AssuranceLevels :1;
} _TDDISafetyStandard__isset;

class TDDISafetyStandard : public virtual ::apache::thrift::TBase {
 public:

  TDDISafetyStandard(const TDDISafetyStandard&);
  TDDISafetyStandard& operator=(const TDDISafetyStandard&);
  TDDISafetyStandard() : Id(0), Name(""), Description("") {


  }

  virtual ~TDDISafetyStandard() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAssuranceLevelRef>  AssuranceLevels;

  _TDDISafetyStandard__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_AssuranceLevels(const std::vector<TDDIAssuranceLevelRef> & val);

  bool operator == (const TDDISafetyStandard & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(AssuranceLevels == rhs.AssuranceLevels))
      return false;
    return true;
  }
  bool operator != (const TDDISafetyStandard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISafetyStandard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISafetyStandard &a, TDDISafetyStandard &b);

std::ostream& operator<<(std::ostream& out, const TDDISafetyStandard& obj);

typedef struct _TDDIStandardUnion__isset {
  _TDDIStandardUnion__isset() : Standard(false), SafetyStandard(false) {}
  bool Standard :1;
  bool SafetyStandard :1;
} _TDDIStandardUnion__isset;

class TDDIStandardUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIStandardUnion(const TDDIStandardUnion&);
  TDDIStandardUnion& operator=(const TDDIStandardUnion&);
  TDDIStandardUnion() : Standard(), SafetyStandard() {
  }

  virtual ~TDDIStandardUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIStandard> Standard;
  ::apache::thrift::stdcxx::shared_ptr<TDDISafetyStandard> SafetyStandard;

  _TDDIStandardUnion__isset __isset;

  void __set_Standard(::apache::thrift::stdcxx::shared_ptr<TDDIStandard> val);

  void __set_SafetyStandard(::apache::thrift::stdcxx::shared_ptr<TDDISafetyStandard> val);

  bool operator == (const TDDIStandardUnion & rhs) const
  {
    if (__isset.Standard != rhs.__isset.Standard)
      return false;
    else if (__isset.Standard && !(Standard == rhs.Standard))
      return false;
    if (__isset.SafetyStandard != rhs.__isset.SafetyStandard)
      return false;
    else if (__isset.SafetyStandard && !(SafetyStandard == rhs.SafetyStandard))
      return false;
    return true;
  }
  bool operator != (const TDDIStandardUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIStandardUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIStandardUnion &a, TDDIStandardUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIStandardUnion& obj);

typedef struct _TDDIAbstractStandard__isset {
  _TDDIAbstractStandard__isset() : UsedStandard(false), UsedStandardType(false) {}
  bool UsedStandard :1;
  bool UsedStandardType :1;
} _TDDIAbstractStandard__isset;

class TDDIAbstractStandard : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractStandard(const TDDIAbstractStandard&);
  TDDIAbstractStandard& operator=(const TDDIAbstractStandard&);
  TDDIAbstractStandard() : UsedStandardType((TDDIStandardUnionType)0) {
  }

  virtual ~TDDIAbstractStandard() throw();
  TDDIStandardUnion UsedStandard;
  TDDIStandardUnionType UsedStandardType;

  _TDDIAbstractStandard__isset __isset;

  void __set_UsedStandard(const TDDIStandardUnion& val);

  void __set_UsedStandardType(const TDDIStandardUnionType val);

  bool operator == (const TDDIAbstractStandard & rhs) const
  {
    if (!(UsedStandard == rhs.UsedStandard))
      return false;
    if (!(UsedStandardType == rhs.UsedStandardType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractStandard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractStandard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractStandard &a, TDDIAbstractStandard &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractStandard& obj);

typedef struct _TDDIProbDistParam__isset {
  _TDDIProbDistParam__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Value(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Value :1;
} _TDDIProbDistParam__isset;

class TDDIProbDistParam : public virtual ::apache::thrift::TBase {
 public:

  TDDIProbDistParam(const TDDIProbDistParam&);
  TDDIProbDistParam& operator=(const TDDIProbDistParam&);
  TDDIProbDistParam() : Id(0), Name(""), Description(""), Value("") {

  }

  virtual ~TDDIProbDistParam() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Value;

  _TDDIProbDistParam__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Value(const std::string& val);

  bool operator == (const TDDIProbDistParam & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Value == rhs.Value))
      return false;
    return true;
  }
  bool operator != (const TDDIProbDistParam &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIProbDistParam & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIProbDistParam &a, TDDIProbDistParam &b);

std::ostream& operator<<(std::ostream& out, const TDDIProbDistParam& obj);

typedef struct _TDDIProbDist__isset {
  _TDDIProbDist__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Type(true), Parameters(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Type :1;
  bool Parameters :1;
} _TDDIProbDist__isset;

class TDDIProbDist : public virtual ::apache::thrift::TBase {
 public:

  TDDIProbDist(const TDDIProbDist&);
  TDDIProbDist& operator=(const TDDIProbDist&);
  TDDIProbDist() : Id(0), Name(""), Description(""), Type("") {


  }

  virtual ~TDDIProbDist() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Type;
  std::vector<TDDIProbDistParam>  Parameters;

  _TDDIProbDist__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Type(const std::string& val);

  void __set_Parameters(const std::vector<TDDIProbDistParam> & val);

  bool operator == (const TDDIProbDist & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Parameters == rhs.Parameters))
      return false;
    return true;
  }
  bool operator != (const TDDIProbDist &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIProbDist & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIProbDist &a, TDDIProbDist &b);

std::ostream& operator<<(std::ostream& out, const TDDIProbDist& obj);

typedef struct _TDDIFailure__isset {
  _TDDIFailure__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), OriginType(false), FailureClass(false), FailureRate(false), IsCCF(false), CCFFailures(true), FailureProbDistribution(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool OriginType :1;
  bool FailureClass :1;
  bool FailureRate :1;
  bool IsCCF :1;
  bool CCFFailures :1;
  bool FailureProbDistribution :1;
} _TDDIFailure__isset;

class TDDIFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailure(const TDDIFailure&);
  TDDIFailure& operator=(const TDDIFailure&);
  TDDIFailure() : Id(0), Name(""), Description(""), OriginType((TDDIFailureOriginType)0), FailureClass(), FailureRate(0), IsCCF(0) {


  }

  virtual ~TDDIFailure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  TDDIFailureOriginType OriginType;
  std::string FailureClass;
  double FailureRate;
  bool IsCCF;
  std::vector<TDDIAbstractFailureRef>  CCFFailures;
  TDDIProbDist FailureProbDistribution;

  _TDDIFailure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_OriginType(const TDDIFailureOriginType val);

  void __set_FailureClass(const std::string& val);

  void __set_FailureRate(const double val);

  void __set_IsCCF(const bool val);

  void __set_CCFFailures(const std::vector<TDDIAbstractFailureRef> & val);

  void __set_FailureProbDistribution(const TDDIProbDist& val);

  bool operator == (const TDDIFailure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(OriginType == rhs.OriginType))
      return false;
    if (!(FailureClass == rhs.FailureClass))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(IsCCF == rhs.IsCCF))
      return false;
    if (!(CCFFailures == rhs.CCFFailures))
      return false;
    if (!(FailureProbDistribution == rhs.FailureProbDistribution))
      return false;
    return true;
  }
  bool operator != (const TDDIFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailure &a, TDDIFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailure& obj);

typedef struct _TDDISecurityViolation__isset {
  _TDDISecurityViolation__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), OriginType(false), FailureClass(false), FailureRate(false), IsCCF(false), CCFFailures(true), FailureProbDistribution(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool OriginType :1;
  bool FailureClass :1;
  bool FailureRate :1;
  bool IsCCF :1;
  bool CCFFailures :1;
  bool FailureProbDistribution :1;
} _TDDISecurityViolation__isset;

class TDDISecurityViolation : public virtual ::apache::thrift::TBase {
 public:

  TDDISecurityViolation(const TDDISecurityViolation&);
  TDDISecurityViolation& operator=(const TDDISecurityViolation&);
  TDDISecurityViolation() : Id(0), Name(""), Description(""), OriginType((TDDIFailureOriginType)0), FailureClass(), FailureRate(0), IsCCF(0) {


  }

  virtual ~TDDISecurityViolation() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  TDDIFailureOriginType OriginType;
  std::string FailureClass;
  double FailureRate;
  bool IsCCF;
  std::vector<TDDIAbstractFailureRef>  CCFFailures;
  TDDIProbDist FailureProbDistribution;

  _TDDISecurityViolation__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_OriginType(const TDDIFailureOriginType val);

  void __set_FailureClass(const std::string& val);

  void __set_FailureRate(const double val);

  void __set_IsCCF(const bool val);

  void __set_CCFFailures(const std::vector<TDDIAbstractFailureRef> & val);

  void __set_FailureProbDistribution(const TDDIProbDist& val);

  bool operator == (const TDDISecurityViolation & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(OriginType == rhs.OriginType))
      return false;
    if (!(FailureClass == rhs.FailureClass))
      return false;
    if (!(FailureRate == rhs.FailureRate))
      return false;
    if (!(IsCCF == rhs.IsCCF))
      return false;
    if (!(CCFFailures == rhs.CCFFailures))
      return false;
    if (!(FailureProbDistribution == rhs.FailureProbDistribution))
      return false;
    return true;
  }
  bool operator != (const TDDISecurityViolation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISecurityViolation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISecurityViolation &a, TDDISecurityViolation &b);

std::ostream& operator<<(std::ostream& out, const TDDISecurityViolation& obj);

typedef struct _TDDIFailureUnion__isset {
  _TDDIFailureUnion__isset() : Failure(false), SecurityViolation(false) {}
  bool Failure :1;
  bool SecurityViolation :1;
} _TDDIFailureUnion__isset;

class TDDIFailureUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureUnion(const TDDIFailureUnion&);
  TDDIFailureUnion& operator=(const TDDIFailureUnion&);
  TDDIFailureUnion() : Failure(), SecurityViolation() {
  }

  virtual ~TDDIFailureUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailure> Failure;
  ::apache::thrift::stdcxx::shared_ptr<TDDISecurityViolation> SecurityViolation;

  _TDDIFailureUnion__isset __isset;

  void __set_Failure(::apache::thrift::stdcxx::shared_ptr<TDDIFailure> val);

  void __set_SecurityViolation(::apache::thrift::stdcxx::shared_ptr<TDDISecurityViolation> val);

  bool operator == (const TDDIFailureUnion & rhs) const
  {
    if (__isset.Failure != rhs.__isset.Failure)
      return false;
    else if (__isset.Failure && !(Failure == rhs.Failure))
      return false;
    if (__isset.SecurityViolation != rhs.__isset.SecurityViolation)
      return false;
    else if (__isset.SecurityViolation && !(SecurityViolation == rhs.SecurityViolation))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureUnion &a, TDDIFailureUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureUnion& obj);

typedef struct _TDDIAbstractFailure__isset {
  _TDDIAbstractFailure__isset() : UsedFailure(false), UsedFailureType(false) {}
  bool UsedFailure :1;
  bool UsedFailureType :1;
} _TDDIAbstractFailure__isset;

class TDDIAbstractFailure : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailure(const TDDIAbstractFailure&);
  TDDIAbstractFailure& operator=(const TDDIAbstractFailure&);
  TDDIAbstractFailure() : UsedFailureType((TDDIFailureUnionType)0) {
  }

  virtual ~TDDIAbstractFailure() throw();
  TDDIFailureUnion UsedFailure;
  TDDIFailureUnionType UsedFailureType;

  _TDDIAbstractFailure__isset __isset;

  void __set_UsedFailure(const TDDIFailureUnion& val);

  void __set_UsedFailureType(const TDDIFailureUnionType val);

  bool operator == (const TDDIAbstractFailure & rhs) const
  {
    if (!(UsedFailure == rhs.UsedFailure))
      return false;
    if (!(UsedFailureType == rhs.UsedFailureType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailure &a, TDDIAbstractFailure &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailure& obj);

typedef struct _TDDIMinimalCutSet__isset {
  _TDDIMinimalCutSet__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Failures(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Failures :1;
} _TDDIMinimalCutSet__isset;

class TDDIMinimalCutSet : public virtual ::apache::thrift::TBase {
 public:

  TDDIMinimalCutSet(const TDDIMinimalCutSet&);
  TDDIMinimalCutSet& operator=(const TDDIMinimalCutSet&);
  TDDIMinimalCutSet() : Id(0), Name(""), Description("") {


  }

  virtual ~TDDIMinimalCutSet() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractFailureRef>  Failures;

  _TDDIMinimalCutSet__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailureRef> & val);

  bool operator == (const TDDIMinimalCutSet & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    return true;
  }
  bool operator != (const TDDIMinimalCutSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMinimalCutSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMinimalCutSet &a, TDDIMinimalCutSet &b);

std::ostream& operator<<(std::ostream& out, const TDDIMinimalCutSet& obj);

typedef struct _TDDIMinimalCutSets__isset {
  _TDDIMinimalCutSets__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Cutsets(true), Failures(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Cutsets :1;
  bool Failures :1;
} _TDDIMinimalCutSets__isset;

class TDDIMinimalCutSets : public virtual ::apache::thrift::TBase {
 public:

  TDDIMinimalCutSets(const TDDIMinimalCutSets&);
  TDDIMinimalCutSets& operator=(const TDDIMinimalCutSets&);
  TDDIMinimalCutSets() : Id(0), Name(""), Description("") {



  }

  virtual ~TDDIMinimalCutSets() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIMinimalCutSet>  Cutsets;
  std::vector<TDDIAbstractFailureRef>  Failures;

  _TDDIMinimalCutSets__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Cutsets(const std::vector<TDDIMinimalCutSet> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailureRef> & val);

  bool operator == (const TDDIMinimalCutSets & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Cutsets == rhs.Cutsets))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    return true;
  }
  bool operator != (const TDDIMinimalCutSets &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMinimalCutSets & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMinimalCutSets &a, TDDIMinimalCutSets &b);

std::ostream& operator<<(std::ostream& out, const TDDIMinimalCutSets& obj);

typedef struct _TDDIFailureModel__isset {
  _TDDIFailureModel__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), MinimalCutSets(true), Failures(true), SubModels(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool MinimalCutSets :1;
  bool Failures :1;
  bool SubModels :1;
} _TDDIFailureModel__isset;

class TDDIFailureModel : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureModel(const TDDIFailureModel&);
  TDDIFailureModel& operator=(const TDDIFailureModel&);
  TDDIFailureModel() : Id(0), Name(""), Description("") {




  }

  virtual ~TDDIFailureModel() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIMinimalCutSets>  MinimalCutSets;
  std::vector<TDDIAbstractFailure>  Failures;
  std::vector<TDDIAbstractFailureModelRef>  SubModels;

  _TDDIFailureModel__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_MinimalCutSets(const std::vector<TDDIMinimalCutSets> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailure> & val);

  void __set_SubModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  bool operator == (const TDDIFailureModel & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(MinimalCutSets == rhs.MinimalCutSets))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    if (!(SubModels == rhs.SubModels))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureModel &a, TDDIFailureModel &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureModel& obj);

typedef struct _TDDIFailureModelUnion__isset {
  _TDDIFailureModelUnion__isset() : FailureModel(false), FMEA(false), MarkovChain(false), FaultTree(false) {}
  bool FailureModel :1;
  bool FMEA :1;
  bool MarkovChain :1;
  bool FaultTree :1;
} _TDDIFailureModelUnion__isset;

class TDDIFailureModelUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureModelUnion(const TDDIFailureModelUnion&);
  TDDIFailureModelUnion& operator=(const TDDIFailureModelUnion&);
  TDDIFailureModelUnion() : FailureModel(), FMEA(), MarkovChain(), FaultTree() {
  }

  virtual ~TDDIFailureModelUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailureModel> FailureModel;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFMEA> FMEA;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChain> MarkovChain;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFaultTree> FaultTree;

  _TDDIFailureModelUnion__isset __isset;

  void __set_FailureModel(::apache::thrift::stdcxx::shared_ptr<TDDIFailureModel> val);

  void __set_FMEA(::apache::thrift::stdcxx::shared_ptr<TDDIFMEA> val);

  void __set_MarkovChain(::apache::thrift::stdcxx::shared_ptr<TDDIMarkovChain> val);

  void __set_FaultTree(::apache::thrift::stdcxx::shared_ptr<TDDIFaultTree> val);

  bool operator == (const TDDIFailureModelUnion & rhs) const
  {
    if (__isset.FailureModel != rhs.__isset.FailureModel)
      return false;
    else if (__isset.FailureModel && !(FailureModel == rhs.FailureModel))
      return false;
    if (__isset.FMEA != rhs.__isset.FMEA)
      return false;
    else if (__isset.FMEA && !(FMEA == rhs.FMEA))
      return false;
    if (__isset.MarkovChain != rhs.__isset.MarkovChain)
      return false;
    else if (__isset.MarkovChain && !(MarkovChain == rhs.MarkovChain))
      return false;
    if (__isset.FaultTree != rhs.__isset.FaultTree)
      return false;
    else if (__isset.FaultTree && !(FaultTree == rhs.FaultTree))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureModelUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureModelUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureModelUnion &a, TDDIFailureModelUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureModelUnion& obj);

typedef struct _TDDIAbstractFailureModel__isset {
  _TDDIAbstractFailureModel__isset() : UsedFailureModel(false), UsedFailureModelType(false) {}
  bool UsedFailureModel :1;
  bool UsedFailureModelType :1;
} _TDDIAbstractFailureModel__isset;

class TDDIAbstractFailureModel : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFailureModel(const TDDIAbstractFailureModel&);
  TDDIAbstractFailureModel& operator=(const TDDIAbstractFailureModel&);
  TDDIAbstractFailureModel() : UsedFailureModelType((TDDIFailureModelUnionType)0) {
  }

  virtual ~TDDIAbstractFailureModel() throw();
  TDDIFailureModelUnion UsedFailureModel;
  TDDIFailureModelUnionType UsedFailureModelType;

  _TDDIAbstractFailureModel__isset __isset;

  void __set_UsedFailureModel(const TDDIFailureModelUnion& val);

  void __set_UsedFailureModelType(const TDDIFailureModelUnionType val);

  bool operator == (const TDDIAbstractFailureModel & rhs) const
  {
    if (!(UsedFailureModel == rhs.UsedFailureModel))
      return false;
    if (!(UsedFailureModelType == rhs.UsedFailureModelType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFailureModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFailureModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFailureModel &a, TDDIAbstractFailureModel &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFailureModel& obj);

typedef struct _TDDIFailureLogicPackage__isset {
  _TDDIFailureLogicPackage__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), FailureModels(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool FailureModels :1;
} _TDDIFailureLogicPackage__isset;

class TDDIFailureLogicPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIFailureLogicPackage(const TDDIFailureLogicPackage&);
  TDDIFailureLogicPackage& operator=(const TDDIFailureLogicPackage&);
  TDDIFailureLogicPackage() : Id(0), Name(""), Description("") {


  }

  virtual ~TDDIFailureLogicPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractFailureModel>  FailureModels;

  _TDDIFailureLogicPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_FailureModels(const std::vector<TDDIAbstractFailureModel> & val);

  bool operator == (const TDDIFailureLogicPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(FailureModels == rhs.FailureModels))
      return false;
    return true;
  }
  bool operator != (const TDDIFailureLogicPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFailureLogicPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFailureLogicPackage &a, TDDIFailureLogicPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIFailureLogicPackage& obj);

typedef struct _TDDIFMEAEntry__isset {
  _TDDIFMEAEntry__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Effect(false), Mode(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Effect :1;
  bool Mode :1;
} _TDDIFMEAEntry__isset;

class TDDIFMEAEntry : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAEntry(const TDDIFMEAEntry&);
  TDDIFMEAEntry& operator=(const TDDIFMEAEntry&);
  TDDIFMEAEntry() : Id(0), Name(""), Description(""), Effect(), Mode() {

  }

  virtual ~TDDIFMEAEntry() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> Effect;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> Mode;

  _TDDIFMEAEntry__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Effect(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  void __set_Mode(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  bool operator == (const TDDIFMEAEntry & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Effect == rhs.Effect))
      return false;
    if (!(Mode == rhs.Mode))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAEntry &a, TDDIFMEAEntry &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAEntry& obj);

typedef struct _TDDIFMEDAEntry__isset {
  _TDDIFMEDAEntry__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Effect(false), Mode(false), DiagnosisRate(false), DiagnosisProbDistribution(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Effect :1;
  bool Mode :1;
  bool DiagnosisRate :1;
  bool DiagnosisProbDistribution :1;
} _TDDIFMEDAEntry__isset;

class TDDIFMEDAEntry : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEDAEntry(const TDDIFMEDAEntry&);
  TDDIFMEDAEntry& operator=(const TDDIFMEDAEntry&);
  TDDIFMEDAEntry() : Id(0), Name(""), Description(""), Effect(), Mode(), DiagnosisRate(0) {

  }

  virtual ~TDDIFMEDAEntry() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> Effect;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> Mode;
  double DiagnosisRate;
  TDDIProbDist DiagnosisProbDistribution;

  _TDDIFMEDAEntry__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Effect(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  void __set_Mode(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  void __set_DiagnosisRate(const double val);

  void __set_DiagnosisProbDistribution(const TDDIProbDist& val);

  bool operator == (const TDDIFMEDAEntry & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Effect == rhs.Effect))
      return false;
    if (!(Mode == rhs.Mode))
      return false;
    if (!(DiagnosisRate == rhs.DiagnosisRate))
      return false;
    if (!(DiagnosisProbDistribution == rhs.DiagnosisProbDistribution))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEDAEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEDAEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEDAEntry &a, TDDIFMEDAEntry &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEDAEntry& obj);

typedef struct _TDDIFMEAEntryUnion__isset {
  _TDDIFMEAEntryUnion__isset() : FMEAEntry(false), FMEDAEntry(false) {}
  bool FMEAEntry :1;
  bool FMEDAEntry :1;
} _TDDIFMEAEntryUnion__isset;

class TDDIFMEAEntryUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEAEntryUnion(const TDDIFMEAEntryUnion&);
  TDDIFMEAEntryUnion& operator=(const TDDIFMEAEntryUnion&);
  TDDIFMEAEntryUnion() : FMEAEntry(), FMEDAEntry() {
  }

  virtual ~TDDIFMEAEntryUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIFMEAEntry> FMEAEntry;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFMEDAEntry> FMEDAEntry;

  _TDDIFMEAEntryUnion__isset __isset;

  void __set_FMEAEntry(::apache::thrift::stdcxx::shared_ptr<TDDIFMEAEntry> val);

  void __set_FMEDAEntry(::apache::thrift::stdcxx::shared_ptr<TDDIFMEDAEntry> val);

  bool operator == (const TDDIFMEAEntryUnion & rhs) const
  {
    if (__isset.FMEAEntry != rhs.__isset.FMEAEntry)
      return false;
    else if (__isset.FMEAEntry && !(FMEAEntry == rhs.FMEAEntry))
      return false;
    if (__isset.FMEDAEntry != rhs.__isset.FMEDAEntry)
      return false;
    else if (__isset.FMEDAEntry && !(FMEDAEntry == rhs.FMEDAEntry))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEAEntryUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEAEntryUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEAEntryUnion &a, TDDIFMEAEntryUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEAEntryUnion& obj);

typedef struct _TDDIAbstractFMEAEntry__isset {
  _TDDIAbstractFMEAEntry__isset() : UsedFMEAEntry(false), UsedFMEAEntryType(false) {}
  bool UsedFMEAEntry :1;
  bool UsedFMEAEntryType :1;
} _TDDIAbstractFMEAEntry__isset;

class TDDIAbstractFMEAEntry : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractFMEAEntry(const TDDIAbstractFMEAEntry&);
  TDDIAbstractFMEAEntry& operator=(const TDDIAbstractFMEAEntry&);
  TDDIAbstractFMEAEntry() : UsedFMEAEntryType((TDDIFMEAEntryUnionType)0) {
  }

  virtual ~TDDIAbstractFMEAEntry() throw();
  TDDIFMEAEntryUnion UsedFMEAEntry;
  TDDIFMEAEntryUnionType UsedFMEAEntryType;

  _TDDIAbstractFMEAEntry__isset __isset;

  void __set_UsedFMEAEntry(const TDDIFMEAEntryUnion& val);

  void __set_UsedFMEAEntryType(const TDDIFMEAEntryUnionType val);

  bool operator == (const TDDIAbstractFMEAEntry & rhs) const
  {
    if (!(UsedFMEAEntry == rhs.UsedFMEAEntry))
      return false;
    if (!(UsedFMEAEntryType == rhs.UsedFMEAEntryType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractFMEAEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractFMEAEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractFMEAEntry &a, TDDIAbstractFMEAEntry &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractFMEAEntry& obj);

typedef struct _TDDIFMEA__isset {
  _TDDIFMEA__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), MinimalCutSets(true), Failures(true), SubModels(true), Type(false), Entries(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool MinimalCutSets :1;
  bool Failures :1;
  bool SubModels :1;
  bool Type :1;
  bool Entries :1;
} _TDDIFMEA__isset;

class TDDIFMEA : public virtual ::apache::thrift::TBase {
 public:

  TDDIFMEA(const TDDIFMEA&);
  TDDIFMEA& operator=(const TDDIFMEA&);
  TDDIFMEA() : Id(0), Name(""), Description(""), Type((TDDIFMEAType)0) {





  }

  virtual ~TDDIFMEA() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIMinimalCutSets>  MinimalCutSets;
  std::vector<TDDIAbstractFailure>  Failures;
  std::vector<TDDIAbstractFailureModelRef>  SubModels;
  TDDIFMEAType Type;
  std::vector<TDDIAbstractFMEAEntry>  Entries;

  _TDDIFMEA__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_MinimalCutSets(const std::vector<TDDIMinimalCutSets> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailure> & val);

  void __set_SubModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_Type(const TDDIFMEAType val);

  void __set_Entries(const std::vector<TDDIAbstractFMEAEntry> & val);

  bool operator == (const TDDIFMEA & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(MinimalCutSets == rhs.MinimalCutSets))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    if (!(SubModels == rhs.SubModels))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Entries == rhs.Entries))
      return false;
    return true;
  }
  bool operator != (const TDDIFMEA &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFMEA & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFMEA &a, TDDIFMEA &b);

std::ostream& operator<<(std::ostream& out, const TDDIFMEA& obj);

typedef struct _TDDICause__isset {
  _TDDICause__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Type(false), Failure(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Type :1;
  bool Failure :1;
} _TDDICause__isset;

class TDDICause : public virtual ::apache::thrift::TBase {
 public:

  TDDICause(const TDDICause&);
  TDDICause& operator=(const TDDICause&);
  TDDICause() : Id(0), Name(""), Description(""), Type((TDDICauseType)0), Failure() {

  }

  virtual ~TDDICause() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  TDDICauseType Type;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> Failure;

  _TDDICause__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Type(const TDDICauseType val);

  void __set_Failure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  bool operator == (const TDDICause & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Failure == rhs.Failure))
      return false;
    return true;
  }
  bool operator != (const TDDICause &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDICause & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDICause &a, TDDICause &b);

std::ostream& operator<<(std::ostream& out, const TDDICause& obj);

typedef struct _TDDIGate__isset {
  _TDDIGate__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Type(false), Failure(false), GateType(false), Causes(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Type :1;
  bool Failure :1;
  bool GateType :1;
  bool Causes :1;
} _TDDIGate__isset;

class TDDIGate : public virtual ::apache::thrift::TBase {
 public:

  TDDIGate(const TDDIGate&);
  TDDIGate& operator=(const TDDIGate&);
  TDDIGate() : Id(0), Name(""), Description(""), Type((TDDICauseType)0), Failure(), GateType((TDDIGateType)0) {


  }

  virtual ~TDDIGate() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  TDDICauseType Type;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> Failure;
  TDDIGateType GateType;
  std::vector<TDDIAbstractCauseRef>  Causes;

  _TDDIGate__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Type(const TDDICauseType val);

  void __set_Failure(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  void __set_GateType(const TDDIGateType val);

  void __set_Causes(const std::vector<TDDIAbstractCauseRef> & val);

  bool operator == (const TDDIGate & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Failure == rhs.Failure))
      return false;
    if (!(GateType == rhs.GateType))
      return false;
    if (!(Causes == rhs.Causes))
      return false;
    return true;
  }
  bool operator != (const TDDIGate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIGate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIGate &a, TDDIGate &b);

std::ostream& operator<<(std::ostream& out, const TDDIGate& obj);

typedef struct _TDDICauseUnion__isset {
  _TDDICauseUnion__isset() : Cause(false), Gate(false) {}
  bool Cause :1;
  bool Gate :1;
} _TDDICauseUnion__isset;

class TDDICauseUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDICauseUnion(const TDDICauseUnion&);
  TDDICauseUnion& operator=(const TDDICauseUnion&);
  TDDICauseUnion() : Cause(), Gate() {
  }

  virtual ~TDDICauseUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDICause> Cause;
  ::apache::thrift::stdcxx::shared_ptr<TDDIGate> Gate;

  _TDDICauseUnion__isset __isset;

  void __set_Cause(::apache::thrift::stdcxx::shared_ptr<TDDICause> val);

  void __set_Gate(::apache::thrift::stdcxx::shared_ptr<TDDIGate> val);

  bool operator == (const TDDICauseUnion & rhs) const
  {
    if (__isset.Cause != rhs.__isset.Cause)
      return false;
    else if (__isset.Cause && !(Cause == rhs.Cause))
      return false;
    if (__isset.Gate != rhs.__isset.Gate)
      return false;
    else if (__isset.Gate && !(Gate == rhs.Gate))
      return false;
    return true;
  }
  bool operator != (const TDDICauseUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDICauseUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDICauseUnion &a, TDDICauseUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDICauseUnion& obj);

typedef struct _TDDIAbstractCause__isset {
  _TDDIAbstractCause__isset() : UsedCause(false), UsedCauseType(false) {}
  bool UsedCause :1;
  bool UsedCauseType :1;
} _TDDIAbstractCause__isset;

class TDDIAbstractCause : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractCause(const TDDIAbstractCause&);
  TDDIAbstractCause& operator=(const TDDIAbstractCause&);
  TDDIAbstractCause() : UsedCauseType((TDDICauseUnionType)0) {
  }

  virtual ~TDDIAbstractCause() throw();
  TDDICauseUnion UsedCause;
  TDDICauseUnionType UsedCauseType;

  _TDDIAbstractCause__isset __isset;

  void __set_UsedCause(const TDDICauseUnion& val);

  void __set_UsedCauseType(const TDDICauseUnionType val);

  bool operator == (const TDDIAbstractCause & rhs) const
  {
    if (!(UsedCause == rhs.UsedCause))
      return false;
    if (!(UsedCauseType == rhs.UsedCauseType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractCause &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractCause & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractCause &a, TDDIAbstractCause &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractCause& obj);

typedef struct _TDDIFaultTree__isset {
  _TDDIFaultTree__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), MinimalCutSets(true), Failures(true), SubModels(true), Causes(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool MinimalCutSets :1;
  bool Failures :1;
  bool SubModels :1;
  bool Causes :1;
} _TDDIFaultTree__isset;

class TDDIFaultTree : public virtual ::apache::thrift::TBase {
 public:

  TDDIFaultTree(const TDDIFaultTree&);
  TDDIFaultTree& operator=(const TDDIFaultTree&);
  TDDIFaultTree() : Id(0), Name(""), Description("") {





  }

  virtual ~TDDIFaultTree() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIMinimalCutSets>  MinimalCutSets;
  std::vector<TDDIAbstractFailure>  Failures;
  std::vector<TDDIAbstractFailureModelRef>  SubModels;
  std::vector<TDDIAbstractCause>  Causes;

  _TDDIFaultTree__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_MinimalCutSets(const std::vector<TDDIMinimalCutSets> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailure> & val);

  void __set_SubModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_Causes(const std::vector<TDDIAbstractCause> & val);

  bool operator == (const TDDIFaultTree & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(MinimalCutSets == rhs.MinimalCutSets))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    if (!(SubModels == rhs.SubModels))
      return false;
    if (!(Causes == rhs.Causes))
      return false;
    return true;
  }
  bool operator != (const TDDIFaultTree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIFaultTree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIFaultTree &a, TDDIFaultTree &b);

std::ostream& operator<<(std::ostream& out, const TDDIFaultTree& obj);

typedef struct _TDDIHazardType__isset {
  _TDDIHazardType__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
} _TDDIHazardType__isset;

class TDDIHazardType : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazardType(const TDDIHazardType&);
  TDDIHazardType& operator=(const TDDIHazardType&);
  TDDIHazardType() : Id(0), Name(""), Description("") {

  }

  virtual ~TDDIHazardType() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;

  _TDDIHazardType__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  bool operator == (const TDDIHazardType & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    return true;
  }
  bool operator != (const TDDIHazardType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazardType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazardType &a, TDDIHazardType &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazardType& obj);

typedef struct _TDDIHazardTypeSystem__isset {
  _TDDIHazardTypeSystem__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), HazardTypes(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool HazardTypes :1;
} _TDDIHazardTypeSystem__isset;

class TDDIHazardTypeSystem : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazardTypeSystem(const TDDIHazardTypeSystem&);
  TDDIHazardTypeSystem& operator=(const TDDIHazardTypeSystem&);
  TDDIHazardTypeSystem() : Id(0), Name(""), Description("") {


  }

  virtual ~TDDIHazardTypeSystem() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIHazardTypeRef>  HazardTypes;

  _TDDIHazardTypeSystem__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_HazardTypes(const std::vector<TDDIHazardTypeRef> & val);

  bool operator == (const TDDIHazardTypeSystem & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(HazardTypes == rhs.HazardTypes))
      return false;
    return true;
  }
  bool operator != (const TDDIHazardTypeSystem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazardTypeSystem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazardTypeSystem &a, TDDIHazardTypeSystem &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazardTypeSystem& obj);

typedef struct _TDDIRiskParameter__isset {
  _TDDIRiskParameter__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Argument(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Argument :1;
} _TDDIRiskParameter__isset;

class TDDIRiskParameter : public virtual ::apache::thrift::TBase {
 public:

  TDDIRiskParameter(const TDDIRiskParameter&);
  TDDIRiskParameter& operator=(const TDDIRiskParameter&);
  TDDIRiskParameter() : Id(0), Name(""), Description(""), Argument("") {

  }

  virtual ~TDDIRiskParameter() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Argument;

  _TDDIRiskParameter__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Argument(const std::string& val);

  bool operator == (const TDDIRiskParameter & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Argument == rhs.Argument))
      return false;
    return true;
  }
  bool operator != (const TDDIRiskParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRiskParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRiskParameter &a, TDDIRiskParameter &b);

std::ostream& operator<<(std::ostream& out, const TDDIRiskParameter& obj);

typedef struct _TDDISituation__isset {
  _TDDISituation__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Argument(true), Likelihood(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Argument :1;
  bool Likelihood :1;
} _TDDISituation__isset;

class TDDISituation : public virtual ::apache::thrift::TBase {
 public:

  TDDISituation(const TDDISituation&);
  TDDISituation& operator=(const TDDISituation&);
  TDDISituation() : Id(0), Name(""), Description(""), Argument(""), Likelihood("") {

  }

  virtual ~TDDISituation() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Argument;
  std::string Likelihood;

  _TDDISituation__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Argument(const std::string& val);

  void __set_Likelihood(const std::string& val);

  bool operator == (const TDDISituation & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Argument == rhs.Argument))
      return false;
    if (!(Likelihood == rhs.Likelihood))
      return false;
    return true;
  }
  bool operator != (const TDDISituation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISituation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISituation &a, TDDISituation &b);

std::ostream& operator<<(std::ostream& out, const TDDISituation& obj);

typedef struct _TDDIAccident__isset {
  _TDDIAccident__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Argument(true), Severity(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Argument :1;
  bool Severity :1;
} _TDDIAccident__isset;

class TDDIAccident : public virtual ::apache::thrift::TBase {
 public:

  TDDIAccident(const TDDIAccident&);
  TDDIAccident& operator=(const TDDIAccident&);
  TDDIAccident() : Id(0), Name(""), Description(""), Argument(""), Severity("") {

  }

  virtual ~TDDIAccident() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Argument;
  std::string Severity;

  _TDDIAccident__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Argument(const std::string& val);

  void __set_Severity(const std::string& val);

  bool operator == (const TDDIAccident & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Argument == rhs.Argument))
      return false;
    if (!(Severity == rhs.Severity))
      return false;
    return true;
  }
  bool operator != (const TDDIAccident &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAccident & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAccident &a, TDDIAccident &b);

std::ostream& operator<<(std::ostream& out, const TDDIAccident& obj);

typedef struct _TDDIOperatorMeasure__isset {
  _TDDIOperatorMeasure__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Argument(true), Controlability(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Argument :1;
  bool Controlability :1;
} _TDDIOperatorMeasure__isset;

class TDDIOperatorMeasure : public virtual ::apache::thrift::TBase {
 public:

  TDDIOperatorMeasure(const TDDIOperatorMeasure&);
  TDDIOperatorMeasure& operator=(const TDDIOperatorMeasure&);
  TDDIOperatorMeasure() : Id(0), Name(""), Description(""), Argument(""), Controlability("") {

  }

  virtual ~TDDIOperatorMeasure() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Argument;
  std::string Controlability;

  _TDDIOperatorMeasure__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Argument(const std::string& val);

  void __set_Controlability(const std::string& val);

  bool operator == (const TDDIOperatorMeasure & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Argument == rhs.Argument))
      return false;
    if (!(Controlability == rhs.Controlability))
      return false;
    return true;
  }
  bool operator != (const TDDIOperatorMeasure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIOperatorMeasure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIOperatorMeasure &a, TDDIOperatorMeasure &b);

std::ostream& operator<<(std::ostream& out, const TDDIOperatorMeasure& obj);

typedef struct _TDDIRiskParameterUnion__isset {
  _TDDIRiskParameterUnion__isset() : RiskParameter(false), Situation(false), Accident(false), OperatorMeasure(false) {}
  bool RiskParameter :1;
  bool Situation :1;
  bool Accident :1;
  bool OperatorMeasure :1;
} _TDDIRiskParameterUnion__isset;

class TDDIRiskParameterUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIRiskParameterUnion(const TDDIRiskParameterUnion&);
  TDDIRiskParameterUnion& operator=(const TDDIRiskParameterUnion&);
  TDDIRiskParameterUnion() : RiskParameter(), Situation(), Accident(), OperatorMeasure() {
  }

  virtual ~TDDIRiskParameterUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIRiskParameter> RiskParameter;
  ::apache::thrift::stdcxx::shared_ptr<TDDISituation> Situation;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAccident> Accident;
  ::apache::thrift::stdcxx::shared_ptr<TDDIOperatorMeasure> OperatorMeasure;

  _TDDIRiskParameterUnion__isset __isset;

  void __set_RiskParameter(::apache::thrift::stdcxx::shared_ptr<TDDIRiskParameter> val);

  void __set_Situation(::apache::thrift::stdcxx::shared_ptr<TDDISituation> val);

  void __set_Accident(::apache::thrift::stdcxx::shared_ptr<TDDIAccident> val);

  void __set_OperatorMeasure(::apache::thrift::stdcxx::shared_ptr<TDDIOperatorMeasure> val);

  bool operator == (const TDDIRiskParameterUnion & rhs) const
  {
    if (__isset.RiskParameter != rhs.__isset.RiskParameter)
      return false;
    else if (__isset.RiskParameter && !(RiskParameter == rhs.RiskParameter))
      return false;
    if (__isset.Situation != rhs.__isset.Situation)
      return false;
    else if (__isset.Situation && !(Situation == rhs.Situation))
      return false;
    if (__isset.Accident != rhs.__isset.Accident)
      return false;
    else if (__isset.Accident && !(Accident == rhs.Accident))
      return false;
    if (__isset.OperatorMeasure != rhs.__isset.OperatorMeasure)
      return false;
    else if (__isset.OperatorMeasure && !(OperatorMeasure == rhs.OperatorMeasure))
      return false;
    return true;
  }
  bool operator != (const TDDIRiskParameterUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRiskParameterUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRiskParameterUnion &a, TDDIRiskParameterUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIRiskParameterUnion& obj);

typedef struct _TDDIAbstractRiskParameter__isset {
  _TDDIAbstractRiskParameter__isset() : UsedRiskParameter(false), UsedRiskParameterType(false) {}
  bool UsedRiskParameter :1;
  bool UsedRiskParameterType :1;
} _TDDIAbstractRiskParameter__isset;

class TDDIAbstractRiskParameter : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRiskParameter(const TDDIAbstractRiskParameter&);
  TDDIAbstractRiskParameter& operator=(const TDDIAbstractRiskParameter&);
  TDDIAbstractRiskParameter() : UsedRiskParameterType((TDDIRiskParameterUnionType)0) {
  }

  virtual ~TDDIAbstractRiskParameter() throw();
  TDDIRiskParameterUnion UsedRiskParameter;
  TDDIRiskParameterUnionType UsedRiskParameterType;

  _TDDIAbstractRiskParameter__isset __isset;

  void __set_UsedRiskParameter(const TDDIRiskParameterUnion& val);

  void __set_UsedRiskParameterType(const TDDIRiskParameterUnionType val);

  bool operator == (const TDDIAbstractRiskParameter & rhs) const
  {
    if (!(UsedRiskParameter == rhs.UsedRiskParameter))
      return false;
    if (!(UsedRiskParameterType == rhs.UsedRiskParameterType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRiskParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRiskParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRiskParameter &a, TDDIAbstractRiskParameter &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRiskParameter& obj);

typedef struct _TDDIHazard__isset {
  _TDDIHazard__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Condition(true), HazardType(false), Measures(true), Failures(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Condition :1;
  bool HazardType :1;
  bool Measures :1;
  bool Failures :1;
} _TDDIHazard__isset;

class TDDIHazard : public virtual ::apache::thrift::TBase {
 public:

  TDDIHazard(const TDDIHazard&);
  TDDIHazard& operator=(const TDDIHazard&);
  TDDIHazard() : Id(0), Name(""), Description(""), Condition(""), HazardType() {



  }

  virtual ~TDDIHazard() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Condition;
  ::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> HazardType;
  std::vector<TDDIAbstractMeasureRef>  Measures;
  std::vector<TDDIAbstractFailureRef>  Failures;

  _TDDIHazard__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Condition(const std::string& val);

  void __set_HazardType(::apache::thrift::stdcxx::shared_ptr<TDDIHazardType> val);

  void __set_Measures(const std::vector<TDDIAbstractMeasureRef> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailureRef> & val);

  bool operator == (const TDDIHazard & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Condition == rhs.Condition))
      return false;
    if (!(HazardType == rhs.HazardType))
      return false;
    if (!(Measures == rhs.Measures))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    return true;
  }
  bool operator != (const TDDIHazard &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHazard & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHazard &a, TDDIHazard &b);

std::ostream& operator<<(std::ostream& out, const TDDIHazard& obj);

typedef struct _TDDIRiskAssessment__isset {
  _TDDIRiskAssessment__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), RelatedStandard(true), RiskParamaters(true), Hazard(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool RelatedStandard :1;
  bool RiskParamaters :1;
  bool Hazard :1;
} _TDDIRiskAssessment__isset;

class TDDIRiskAssessment : public virtual ::apache::thrift::TBase {
 public:

  TDDIRiskAssessment(const TDDIRiskAssessment&);
  TDDIRiskAssessment& operator=(const TDDIRiskAssessment&);
  TDDIRiskAssessment() : Id(0), Name(""), Description(""), RelatedStandard(""), Hazard() {


  }

  virtual ~TDDIRiskAssessment() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string RelatedStandard;
  std::vector<TDDIAbstractRiskParameterRef>  RiskParamaters;
  ::apache::thrift::stdcxx::shared_ptr<TDDIHazard> Hazard;

  _TDDIRiskAssessment__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_RelatedStandard(const std::string& val);

  void __set_RiskParamaters(const std::vector<TDDIAbstractRiskParameterRef> & val);

  void __set_Hazard(::apache::thrift::stdcxx::shared_ptr<TDDIHazard> val);

  bool operator == (const TDDIRiskAssessment & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(RelatedStandard == rhs.RelatedStandard))
      return false;
    if (!(RiskParamaters == rhs.RiskParamaters))
      return false;
    if (!(Hazard == rhs.Hazard))
      return false;
    return true;
  }
  bool operator != (const TDDIRiskAssessment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRiskAssessment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRiskAssessment &a, TDDIRiskAssessment &b);

std::ostream& operator<<(std::ostream& out, const TDDIRiskAssessment& obj);

typedef struct _TDDIMalfunction__isset {
  _TDDIMalfunction__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Hazards(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Hazards :1;
} _TDDIMalfunction__isset;

class TDDIMalfunction : public virtual ::apache::thrift::TBase {
 public:

  TDDIMalfunction(const TDDIMalfunction&);
  TDDIMalfunction& operator=(const TDDIMalfunction&);
  TDDIMalfunction() : Id(0), Name(""), Description("") {


  }

  virtual ~TDDIMalfunction() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIHazardRef>  Hazards;

  _TDDIMalfunction__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Hazards(const std::vector<TDDIHazardRef> & val);

  bool operator == (const TDDIMalfunction & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Hazards == rhs.Hazards))
      return false;
    return true;
  }
  bool operator != (const TDDIMalfunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMalfunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMalfunction &a, TDDIMalfunction &b);

std::ostream& operator<<(std::ostream& out, const TDDIMalfunction& obj);

typedef struct _TDDIHARAPackage__isset {
  _TDDIHARAPackage__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Hazards(true), HazardTypes(true), HazardTypeSystems(true), Malfunctions(true), RiskAssessments(true), RiskParameters(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Hazards :1;
  bool HazardTypes :1;
  bool HazardTypeSystems :1;
  bool Malfunctions :1;
  bool RiskAssessments :1;
  bool RiskParameters :1;
} _TDDIHARAPackage__isset;

class TDDIHARAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIHARAPackage(const TDDIHARAPackage&);
  TDDIHARAPackage& operator=(const TDDIHARAPackage&);
  TDDIHARAPackage() : Id(0), Name(""), Description("") {







  }

  virtual ~TDDIHARAPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIHazard>  Hazards;
  std::vector<TDDIHazardType>  HazardTypes;
  std::vector<TDDIHazardTypeSystem>  HazardTypeSystems;
  std::vector<TDDIMalfunction>  Malfunctions;
  std::vector<TDDIRiskAssessment>  RiskAssessments;
  std::vector<TDDIAbstractRiskParameter>  RiskParameters;

  _TDDIHARAPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Hazards(const std::vector<TDDIHazard> & val);

  void __set_HazardTypes(const std::vector<TDDIHazardType> & val);

  void __set_HazardTypeSystems(const std::vector<TDDIHazardTypeSystem> & val);

  void __set_Malfunctions(const std::vector<TDDIMalfunction> & val);

  void __set_RiskAssessments(const std::vector<TDDIRiskAssessment> & val);

  void __set_RiskParameters(const std::vector<TDDIAbstractRiskParameter> & val);

  bool operator == (const TDDIHARAPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Hazards == rhs.Hazards))
      return false;
    if (!(HazardTypes == rhs.HazardTypes))
      return false;
    if (!(HazardTypeSystems == rhs.HazardTypeSystems))
      return false;
    if (!(Malfunctions == rhs.Malfunctions))
      return false;
    if (!(RiskAssessments == rhs.RiskAssessments))
      return false;
    if (!(RiskParameters == rhs.RiskParameters))
      return false;
    return true;
  }
  bool operator != (const TDDIHARAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHARAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHARAPackage &a, TDDIHARAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIHARAPackage& obj);

typedef struct _TDDIDDIPackage__isset {
  _TDDIDDIPackage__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), ODEProductPackages(true), AssuranceCasePackages(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool ODEProductPackages :1;
  bool AssuranceCasePackages :1;
} _TDDIDDIPackage__isset;

class TDDIDDIPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIDDIPackage(const TDDIDDIPackage&);
  TDDIDDIPackage& operator=(const TDDIDDIPackage&);
  TDDIDDIPackage() : Id(0), Name(""), Description("") {



  }

  virtual ~TDDIDDIPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractODEProductPackage>  ODEProductPackages;
  std::vector<TDDIAbstractAssuranceCasePackage>  AssuranceCasePackages;

  _TDDIDDIPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_ODEProductPackages(const std::vector<TDDIAbstractODEProductPackage> & val);

  void __set_AssuranceCasePackages(const std::vector<TDDIAbstractAssuranceCasePackage> & val);

  bool operator == (const TDDIDDIPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(ODEProductPackages == rhs.ODEProductPackages))
      return false;
    if (!(AssuranceCasePackages == rhs.AssuranceCasePackages))
      return false;
    return true;
  }
  bool operator != (const TDDIDDIPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDDIPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDDIPackage &a, TDDIDDIPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIDDIPackage& obj);

typedef struct _TDDIODEProductPackageUnion__isset {
  _TDDIODEProductPackageUnion__isset() : DesignPackage(false), FailureLogicPackage(false), RequirementPackage(false), HARAPackage(false), DependabilityPackage(false), TARAPackage(false), DomainPackage(false) {}
  bool DesignPackage :1;
  bool FailureLogicPackage :1;
  bool RequirementPackage :1;
  bool HARAPackage :1;
  bool DependabilityPackage :1;
  bool TARAPackage :1;
  bool DomainPackage :1;
} _TDDIODEProductPackageUnion__isset;

class TDDIODEProductPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIODEProductPackageUnion(const TDDIODEProductPackageUnion&);
  TDDIODEProductPackageUnion& operator=(const TDDIODEProductPackageUnion&);
  TDDIODEProductPackageUnion() : DesignPackage(), FailureLogicPackage(), RequirementPackage(), HARAPackage(), DependabilityPackage(), TARAPackage(), DomainPackage() {
  }

  virtual ~TDDIODEProductPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIDesignPackage> DesignPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIFailureLogicPackage> FailureLogicPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> RequirementPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIHARAPackage> HARAPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> DependabilityPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDITARAPackage> TARAPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> DomainPackage;

  _TDDIODEProductPackageUnion__isset __isset;

  void __set_DesignPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDesignPackage> val);

  void __set_FailureLogicPackage(::apache::thrift::stdcxx::shared_ptr<TDDIFailureLogicPackage> val);

  void __set_RequirementPackage(::apache::thrift::stdcxx::shared_ptr<TDDIRequirementPackage> val);

  void __set_HARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDIHARAPackage> val);

  void __set_DependabilityPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDependabilityPackage> val);

  void __set_TARAPackage(::apache::thrift::stdcxx::shared_ptr<TDDITARAPackage> val);

  void __set_DomainPackage(::apache::thrift::stdcxx::shared_ptr<TDDIDomainPackage> val);

  bool operator == (const TDDIODEProductPackageUnion & rhs) const
  {
    if (__isset.DesignPackage != rhs.__isset.DesignPackage)
      return false;
    else if (__isset.DesignPackage && !(DesignPackage == rhs.DesignPackage))
      return false;
    if (__isset.FailureLogicPackage != rhs.__isset.FailureLogicPackage)
      return false;
    else if (__isset.FailureLogicPackage && !(FailureLogicPackage == rhs.FailureLogicPackage))
      return false;
    if (__isset.RequirementPackage != rhs.__isset.RequirementPackage)
      return false;
    else if (__isset.RequirementPackage && !(RequirementPackage == rhs.RequirementPackage))
      return false;
    if (__isset.HARAPackage != rhs.__isset.HARAPackage)
      return false;
    else if (__isset.HARAPackage && !(HARAPackage == rhs.HARAPackage))
      return false;
    if (__isset.DependabilityPackage != rhs.__isset.DependabilityPackage)
      return false;
    else if (__isset.DependabilityPackage && !(DependabilityPackage == rhs.DependabilityPackage))
      return false;
    if (__isset.TARAPackage != rhs.__isset.TARAPackage)
      return false;
    else if (__isset.TARAPackage && !(TARAPackage == rhs.TARAPackage))
      return false;
    if (__isset.DomainPackage != rhs.__isset.DomainPackage)
      return false;
    else if (__isset.DomainPackage && !(DomainPackage == rhs.DomainPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIODEProductPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIODEProductPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIODEProductPackageUnion &a, TDDIODEProductPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIODEProductPackageUnion& obj);

typedef struct _TDDIAbstractODEProductPackage__isset {
  _TDDIAbstractODEProductPackage__isset() : UsedODEProductPackage(false), UsedODEProductPackageType(false) {}
  bool UsedODEProductPackage :1;
  bool UsedODEProductPackageType :1;
} _TDDIAbstractODEProductPackage__isset;

class TDDIAbstractODEProductPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractODEProductPackage(const TDDIAbstractODEProductPackage&);
  TDDIAbstractODEProductPackage& operator=(const TDDIAbstractODEProductPackage&);
  TDDIAbstractODEProductPackage() : UsedODEProductPackageType((TDDIODEProductPackageUnionType)0) {
  }

  virtual ~TDDIAbstractODEProductPackage() throw();
  TDDIODEProductPackageUnion UsedODEProductPackage;
  TDDIODEProductPackageUnionType UsedODEProductPackageType;

  _TDDIAbstractODEProductPackage__isset __isset;

  void __set_UsedODEProductPackage(const TDDIODEProductPackageUnion& val);

  void __set_UsedODEProductPackageType(const TDDIODEProductPackageUnionType val);

  bool operator == (const TDDIAbstractODEProductPackage & rhs) const
  {
    if (!(UsedODEProductPackage == rhs.UsedODEProductPackage))
      return false;
    if (!(UsedODEProductPackageType == rhs.UsedODEProductPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractODEProductPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractODEProductPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractODEProductPackage &a, TDDIAbstractODEProductPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractODEProductPackage& obj);

typedef struct _TDDIState__isset {
  _TDDIState__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), IsInitialState(false), IsFailState(false), FailState(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool IsInitialState :1;
  bool IsFailState :1;
  bool FailState :1;
} _TDDIState__isset;

class TDDIState : public virtual ::apache::thrift::TBase {
 public:

  TDDIState(const TDDIState&);
  TDDIState& operator=(const TDDIState&);
  TDDIState() : Id(0), Name(""), Description(""), IsInitialState(0), IsFailState(0), FailState() {

  }

  virtual ~TDDIState() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  bool IsInitialState;
  bool IsFailState;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> FailState;

  _TDDIState__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_IsInitialState(const bool val);

  void __set_IsFailState(const bool val);

  void __set_FailState(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractFailure> val);

  bool operator == (const TDDIState & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(IsInitialState == rhs.IsInitialState))
      return false;
    if (!(IsFailState == rhs.IsFailState))
      return false;
    if (!(FailState == rhs.FailState))
      return false;
    return true;
  }
  bool operator != (const TDDIState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIState &a, TDDIState &b);

std::ostream& operator<<(std::ostream& out, const TDDIState& obj);

typedef struct _TDDITransition__isset {
  _TDDITransition__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Transition(false), TransitionProbDistribution(false), FromStates(true), ToStates(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Transition :1;
  bool TransitionProbDistribution :1;
  bool FromStates :1;
  bool ToStates :1;
} _TDDITransition__isset;

class TDDITransition : public virtual ::apache::thrift::TBase {
 public:

  TDDITransition(const TDDITransition&);
  TDDITransition& operator=(const TDDITransition&);
  TDDITransition() : Id(0), Name(""), Description(""), Transition(0) {



  }

  virtual ~TDDITransition() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double Transition;
  TDDIProbDist TransitionProbDistribution;
  std::vector<TDDIStateRef>  FromStates;
  std::vector<TDDIStateRef>  ToStates;

  _TDDITransition__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Transition(const double val);

  void __set_TransitionProbDistribution(const TDDIProbDist& val);

  void __set_FromStates(const std::vector<TDDIStateRef> & val);

  void __set_ToStates(const std::vector<TDDIStateRef> & val);

  bool operator == (const TDDITransition & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Transition == rhs.Transition))
      return false;
    if (!(TransitionProbDistribution == rhs.TransitionProbDistribution))
      return false;
    if (!(FromStates == rhs.FromStates))
      return false;
    if (!(ToStates == rhs.ToStates))
      return false;
    return true;
  }
  bool operator != (const TDDITransition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITransition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITransition &a, TDDITransition &b);

std::ostream& operator<<(std::ostream& out, const TDDITransition& obj);

typedef struct _TDDIMarkovChain__isset {
  _TDDIMarkovChain__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), MinimalCutSets(true), Failures(true), SubModels(true), Transitions(true), States(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool MinimalCutSets :1;
  bool Failures :1;
  bool SubModels :1;
  bool Transitions :1;
  bool States :1;
} _TDDIMarkovChain__isset;

class TDDIMarkovChain : public virtual ::apache::thrift::TBase {
 public:

  TDDIMarkovChain(const TDDIMarkovChain&);
  TDDIMarkovChain& operator=(const TDDIMarkovChain&);
  TDDIMarkovChain() : Id(0), Name(""), Description("") {






  }

  virtual ~TDDIMarkovChain() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIMinimalCutSets>  MinimalCutSets;
  std::vector<TDDIAbstractFailure>  Failures;
  std::vector<TDDIAbstractFailureModelRef>  SubModels;
  std::vector<TDDITransition>  Transitions;
  std::vector<TDDIState>  States;

  _TDDIMarkovChain__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_MinimalCutSets(const std::vector<TDDIMinimalCutSets> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailure> & val);

  void __set_SubModels(const std::vector<TDDIAbstractFailureModelRef> & val);

  void __set_Transitions(const std::vector<TDDITransition> & val);

  void __set_States(const std::vector<TDDIState> & val);

  bool operator == (const TDDIMarkovChain & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(MinimalCutSets == rhs.MinimalCutSets))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    if (!(SubModels == rhs.SubModels))
      return false;
    if (!(Transitions == rhs.Transitions))
      return false;
    if (!(States == rhs.States))
      return false;
    return true;
  }
  bool operator != (const TDDIMarkovChain &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMarkovChain & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMarkovChain &a, TDDIMarkovChain &b);

std::ostream& operator<<(std::ostream& out, const TDDIMarkovChain& obj);

typedef struct _TDDILegalContract__isset {
  _TDDILegalContract__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
} _TDDILegalContract__isset;

class TDDILegalContract : public virtual ::apache::thrift::TBase {
 public:

  TDDILegalContract(const TDDILegalContract&);
  TDDILegalContract& operator=(const TDDILegalContract&);
  TDDILegalContract() : Id(0), Name(""), Description("") {

  }

  virtual ~TDDILegalContract() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;

  _TDDILegalContract__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  bool operator == (const TDDILegalContract & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    return true;
  }
  bool operator != (const TDDILegalContract &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILegalContract & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILegalContract &a, TDDILegalContract &b);

std::ostream& operator<<(std::ostream& out, const TDDILegalContract& obj);

typedef struct _TDDIRequirementSourceUnion__isset {
  _TDDIRequirementSourceUnion__isset() : LegalContract(false) {}
  bool LegalContract :1;
} _TDDIRequirementSourceUnion__isset;

class TDDIRequirementSourceUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIRequirementSourceUnion(const TDDIRequirementSourceUnion&);
  TDDIRequirementSourceUnion& operator=(const TDDIRequirementSourceUnion&);
  TDDIRequirementSourceUnion() : LegalContract() {
  }

  virtual ~TDDIRequirementSourceUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDILegalContract> LegalContract;

  _TDDIRequirementSourceUnion__isset __isset;

  void __set_LegalContract(::apache::thrift::stdcxx::shared_ptr<TDDILegalContract> val);

  bool operator == (const TDDIRequirementSourceUnion & rhs) const
  {
    if (__isset.LegalContract != rhs.__isset.LegalContract)
      return false;
    else if (__isset.LegalContract && !(LegalContract == rhs.LegalContract))
      return false;
    return true;
  }
  bool operator != (const TDDIRequirementSourceUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRequirementSourceUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRequirementSourceUnion &a, TDDIRequirementSourceUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIRequirementSourceUnion& obj);

typedef struct _TDDIAbstractRequirementSource__isset {
  _TDDIAbstractRequirementSource__isset() : UsedRequirementSource(false), UsedRequirementSourceType(false) {}
  bool UsedRequirementSource :1;
  bool UsedRequirementSourceType :1;
} _TDDIAbstractRequirementSource__isset;

class TDDIAbstractRequirementSource : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractRequirementSource(const TDDIAbstractRequirementSource&);
  TDDIAbstractRequirementSource& operator=(const TDDIAbstractRequirementSource&);
  TDDIAbstractRequirementSource() : UsedRequirementSourceType((TDDIRequirementSourceUnionType)0) {
  }

  virtual ~TDDIAbstractRequirementSource() throw();
  TDDIRequirementSourceUnion UsedRequirementSource;
  TDDIRequirementSourceUnionType UsedRequirementSourceType;

  _TDDIAbstractRequirementSource__isset __isset;

  void __set_UsedRequirementSource(const TDDIRequirementSourceUnion& val);

  void __set_UsedRequirementSourceType(const TDDIRequirementSourceUnionType val);

  bool operator == (const TDDIAbstractRequirementSource & rhs) const
  {
    if (!(UsedRequirementSource == rhs.UsedRequirementSource))
      return false;
    if (!(UsedRequirementSourceType == rhs.UsedRequirementSourceType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractRequirementSource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractRequirementSource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractRequirementSource &a, TDDIAbstractRequirementSource &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractRequirementSource& obj);

typedef struct _TDDISafetyRequirement__isset {
  _TDDISafetyRequirement__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), DecompositionArgument(true), RefinedRequirements(true), RequirementSource(false), Measures(true), Failures(true), AssuranceLevel(false), MaintenanceProcedures(true), Hazards(true), FailureReactionTime(false), FailureDetectionTime(false), FailureLatencyTime(false), IsSafetyGoal(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool DecompositionArgument :1;
  bool RefinedRequirements :1;
  bool RequirementSource :1;
  bool Measures :1;
  bool Failures :1;
  bool AssuranceLevel :1;
  bool MaintenanceProcedures :1;
  bool Hazards :1;
  bool FailureReactionTime :1;
  bool FailureDetectionTime :1;
  bool FailureLatencyTime :1;
  bool IsSafetyGoal :1;
} _TDDISafetyRequirement__isset;

class TDDISafetyRequirement : public virtual ::apache::thrift::TBase {
 public:

  TDDISafetyRequirement(const TDDISafetyRequirement&);
  TDDISafetyRequirement& operator=(const TDDISafetyRequirement&);
  TDDISafetyRequirement() : Id(0), Name(""), Description(""), DecompositionArgument(""), RequirementSource(), AssuranceLevel(), FailureReactionTime(0), FailureDetectionTime(0), FailureLatencyTime(0), IsSafetyGoal(0) {






  }

  virtual ~TDDISafetyRequirement() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string DecompositionArgument;
  std::vector<TDDIAbstractDependabilityRequirementRef>  RefinedRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> RequirementSource;
  std::vector<TDDIAbstractMeasureRef>  Measures;
  std::vector<TDDIAbstractFailureRef>  Failures;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIMaintenanceProcedureRef>  MaintenanceProcedures;
  std::vector<TDDIHazardRef>  Hazards;
  double FailureReactionTime;
  double FailureDetectionTime;
  double FailureLatencyTime;
  bool IsSafetyGoal;

  _TDDISafetyRequirement__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_DecompositionArgument(const std::string& val);

  void __set_RefinedRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_RequirementSource(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> val);

  void __set_Measures(const std::vector<TDDIAbstractMeasureRef> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailureRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_MaintenanceProcedures(const std::vector<TDDIMaintenanceProcedureRef> & val);

  void __set_Hazards(const std::vector<TDDIHazardRef> & val);

  void __set_FailureReactionTime(const double val);

  void __set_FailureDetectionTime(const double val);

  void __set_FailureLatencyTime(const double val);

  void __set_IsSafetyGoal(const bool val);

  bool operator == (const TDDISafetyRequirement & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(DecompositionArgument == rhs.DecompositionArgument))
      return false;
    if (!(RefinedRequirements == rhs.RefinedRequirements))
      return false;
    if (!(RequirementSource == rhs.RequirementSource))
      return false;
    if (!(Measures == rhs.Measures))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(MaintenanceProcedures == rhs.MaintenanceProcedures))
      return false;
    if (!(Hazards == rhs.Hazards))
      return false;
    if (!(FailureReactionTime == rhs.FailureReactionTime))
      return false;
    if (!(FailureDetectionTime == rhs.FailureDetectionTime))
      return false;
    if (!(FailureLatencyTime == rhs.FailureLatencyTime))
      return false;
    if (!(IsSafetyGoal == rhs.IsSafetyGoal))
      return false;
    return true;
  }
  bool operator != (const TDDISafetyRequirement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISafetyRequirement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISafetyRequirement &a, TDDISafetyRequirement &b);

std::ostream& operator<<(std::ostream& out, const TDDISafetyRequirement& obj);

typedef struct _TDDISecurityRequirement__isset {
  _TDDISecurityRequirement__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), DecompositionArgument(true), RefinedRequirements(true), RequirementSource(false), Measures(true), Failures(true), AssuranceLevel(false), MaintenanceProcedures(true), SecurityCapabilities(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool DecompositionArgument :1;
  bool RefinedRequirements :1;
  bool RequirementSource :1;
  bool Measures :1;
  bool Failures :1;
  bool AssuranceLevel :1;
  bool MaintenanceProcedures :1;
  bool SecurityCapabilities :1;
} _TDDISecurityRequirement__isset;

class TDDISecurityRequirement : public virtual ::apache::thrift::TBase {
 public:

  TDDISecurityRequirement(const TDDISecurityRequirement&);
  TDDISecurityRequirement& operator=(const TDDISecurityRequirement&);
  TDDISecurityRequirement() : Id(0), Name(""), Description(""), DecompositionArgument(""), RequirementSource(), AssuranceLevel() {






  }

  virtual ~TDDISecurityRequirement() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string DecompositionArgument;
  std::vector<TDDIAbstractDependabilityRequirementRef>  RefinedRequirements;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> RequirementSource;
  std::vector<TDDIAbstractMeasureRef>  Measures;
  std::vector<TDDIAbstractFailureRef>  Failures;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  std::vector<TDDIMaintenanceProcedureRef>  MaintenanceProcedures;
  std::vector<TDDISecurityCapabilityRef>  SecurityCapabilities;

  _TDDISecurityRequirement__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_DecompositionArgument(const std::string& val);

  void __set_RefinedRequirements(const std::vector<TDDIAbstractDependabilityRequirementRef> & val);

  void __set_RequirementSource(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractRequirementSource> val);

  void __set_Measures(const std::vector<TDDIAbstractMeasureRef> & val);

  void __set_Failures(const std::vector<TDDIAbstractFailureRef> & val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_MaintenanceProcedures(const std::vector<TDDIMaintenanceProcedureRef> & val);

  void __set_SecurityCapabilities(const std::vector<TDDISecurityCapabilityRef> & val);

  bool operator == (const TDDISecurityRequirement & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(DecompositionArgument == rhs.DecompositionArgument))
      return false;
    if (!(RefinedRequirements == rhs.RefinedRequirements))
      return false;
    if (!(RequirementSource == rhs.RequirementSource))
      return false;
    if (!(Measures == rhs.Measures))
      return false;
    if (!(Failures == rhs.Failures))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(MaintenanceProcedures == rhs.MaintenanceProcedures))
      return false;
    if (!(SecurityCapabilities == rhs.SecurityCapabilities))
      return false;
    return true;
  }
  bool operator != (const TDDISecurityRequirement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISecurityRequirement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISecurityRequirement &a, TDDISecurityRequirement &b);

std::ostream& operator<<(std::ostream& out, const TDDISecurityRequirement& obj);

typedef struct _TDDIDependabilityRequirementUnion__isset {
  _TDDIDependabilityRequirementUnion__isset() : SafetyRequirement(false), SecurityRequirement(false) {}
  bool SafetyRequirement :1;
  bool SecurityRequirement :1;
} _TDDIDependabilityRequirementUnion__isset;

class TDDIDependabilityRequirementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIDependabilityRequirementUnion(const TDDIDependabilityRequirementUnion&);
  TDDIDependabilityRequirementUnion& operator=(const TDDIDependabilityRequirementUnion&);
  TDDIDependabilityRequirementUnion() : SafetyRequirement(), SecurityRequirement() {
  }

  virtual ~TDDIDependabilityRequirementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDISafetyRequirement> SafetyRequirement;
  ::apache::thrift::stdcxx::shared_ptr<TDDISecurityRequirement> SecurityRequirement;

  _TDDIDependabilityRequirementUnion__isset __isset;

  void __set_SafetyRequirement(::apache::thrift::stdcxx::shared_ptr<TDDISafetyRequirement> val);

  void __set_SecurityRequirement(::apache::thrift::stdcxx::shared_ptr<TDDISecurityRequirement> val);

  bool operator == (const TDDIDependabilityRequirementUnion & rhs) const
  {
    if (__isset.SafetyRequirement != rhs.__isset.SafetyRequirement)
      return false;
    else if (__isset.SafetyRequirement && !(SafetyRequirement == rhs.SafetyRequirement))
      return false;
    if (__isset.SecurityRequirement != rhs.__isset.SecurityRequirement)
      return false;
    else if (__isset.SecurityRequirement && !(SecurityRequirement == rhs.SecurityRequirement))
      return false;
    return true;
  }
  bool operator != (const TDDIDependabilityRequirementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDependabilityRequirementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDependabilityRequirementUnion &a, TDDIDependabilityRequirementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIDependabilityRequirementUnion& obj);

typedef struct _TDDIAbstractDependabilityRequirement__isset {
  _TDDIAbstractDependabilityRequirement__isset() : UsedDependabilityRequirement(false), UsedDependabilityRequirementType(false) {}
  bool UsedDependabilityRequirement :1;
  bool UsedDependabilityRequirementType :1;
} _TDDIAbstractDependabilityRequirement__isset;

class TDDIAbstractDependabilityRequirement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractDependabilityRequirement(const TDDIAbstractDependabilityRequirement&);
  TDDIAbstractDependabilityRequirement& operator=(const TDDIAbstractDependabilityRequirement&);
  TDDIAbstractDependabilityRequirement() : UsedDependabilityRequirementType((TDDIDependabilityRequirementUnionType)0) {
  }

  virtual ~TDDIAbstractDependabilityRequirement() throw();
  TDDIDependabilityRequirementUnion UsedDependabilityRequirement;
  TDDIDependabilityRequirementUnionType UsedDependabilityRequirementType;

  _TDDIAbstractDependabilityRequirement__isset __isset;

  void __set_UsedDependabilityRequirement(const TDDIDependabilityRequirementUnion& val);

  void __set_UsedDependabilityRequirementType(const TDDIDependabilityRequirementUnionType val);

  bool operator == (const TDDIAbstractDependabilityRequirement & rhs) const
  {
    if (!(UsedDependabilityRequirement == rhs.UsedDependabilityRequirement))
      return false;
    if (!(UsedDependabilityRequirementType == rhs.UsedDependabilityRequirementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractDependabilityRequirement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractDependabilityRequirement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractDependabilityRequirement &a, TDDIAbstractDependabilityRequirement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractDependabilityRequirement& obj);

typedef struct _TDDIRequirementPackage__isset {
  _TDDIRequirementPackage__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), RequirementSources(true), DependabilityRequirements(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool RequirementSources :1;
  bool DependabilityRequirements :1;
} _TDDIRequirementPackage__isset;

class TDDIRequirementPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIRequirementPackage(const TDDIRequirementPackage&);
  TDDIRequirementPackage& operator=(const TDDIRequirementPackage&);
  TDDIRequirementPackage() : Id(0), Name(""), Description("") {



  }

  virtual ~TDDIRequirementPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDIAbstractRequirementSource>  RequirementSources;
  std::vector<TDDIAbstractDependabilityRequirement>  DependabilityRequirements;

  _TDDIRequirementPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_RequirementSources(const std::vector<TDDIAbstractRequirementSource> & val);

  void __set_DependabilityRequirements(const std::vector<TDDIAbstractDependabilityRequirement> & val);

  bool operator == (const TDDIRequirementPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(RequirementSources == rhs.RequirementSources))
      return false;
    if (!(DependabilityRequirements == rhs.DependabilityRequirements))
      return false;
    return true;
  }
  bool operator != (const TDDIRequirementPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIRequirementPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIRequirementPackage &a, TDDIRequirementPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIRequirementPackage& obj);

typedef struct _TDDIArtifactReference__isset {
  _TDDIArtifactReference__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ReferencedArtifactElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ReferencedArtifactElement :1;
} _TDDIArtifactReference__isset;

class TDDIArtifactReference : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactReference(const TDDIArtifactReference&);
  TDDIArtifactReference& operator=(const TDDIArtifactReference&);
  TDDIArtifactReference() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArtifactReference() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ReferencedArtifactElement;

  _TDDIArtifactReference__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ReferencedArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  bool operator == (const TDDIArtifactReference & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ReferencedArtifactElement == rhs.ReferencedArtifactElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactReference &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactReference & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactReference &a, TDDIArtifactReference &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactReference& obj);

typedef struct _TDDIArgumentationElementUnion__isset {
  _TDDIArgumentationElementUnion__isset() : ArgumentGroup(false), ArgumentPackage(false), ArgumentAsset(false) {}
  bool ArgumentGroup :1;
  bool ArgumentPackage :1;
  bool ArgumentAsset :1;
} _TDDIArgumentationElementUnion__isset;

class TDDIArgumentationElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentationElementUnion(const TDDIArgumentationElementUnion&);
  TDDIArgumentationElementUnion& operator=(const TDDIArgumentationElementUnion&);
  TDDIArgumentationElementUnion() : ArgumentGroup(), ArgumentPackage(), ArgumentAsset() {
  }

  virtual ~TDDIArgumentationElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentGroup> ArgumentGroup;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> ArgumentPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> ArgumentAsset;

  _TDDIArgumentationElementUnion__isset __isset;

  void __set_ArgumentGroup(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentGroup> val);

  void __set_ArgumentPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentPackage> val);

  void __set_ArgumentAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentAsset> val);

  bool operator == (const TDDIArgumentationElementUnion & rhs) const
  {
    if (__isset.ArgumentGroup != rhs.__isset.ArgumentGroup)
      return false;
    else if (__isset.ArgumentGroup && !(ArgumentGroup == rhs.ArgumentGroup))
      return false;
    if (__isset.ArgumentPackage != rhs.__isset.ArgumentPackage)
      return false;
    else if (__isset.ArgumentPackage && !(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (__isset.ArgumentAsset != rhs.__isset.ArgumentAsset)
      return false;
    else if (__isset.ArgumentAsset && !(ArgumentAsset == rhs.ArgumentAsset))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentationElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentationElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentationElementUnion &a, TDDIArgumentationElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentationElementUnion& obj);

typedef struct _TDDIAbstractArgumentationElement__isset {
  _TDDIAbstractArgumentationElement__isset() : UsedArgumentationElement(false), UsedArgumentationElementType(false) {}
  bool UsedArgumentationElement :1;
  bool UsedArgumentationElementType :1;
} _TDDIAbstractArgumentationElement__isset;

class TDDIAbstractArgumentationElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentationElement(const TDDIAbstractArgumentationElement&);
  TDDIAbstractArgumentationElement& operator=(const TDDIAbstractArgumentationElement&);
  TDDIAbstractArgumentationElement() : UsedArgumentationElementType((TDDIArgumentationElementUnionType)0) {
  }

  virtual ~TDDIAbstractArgumentationElement() throw();
  TDDIArgumentationElementUnion UsedArgumentationElement;
  TDDIArgumentationElementUnionType UsedArgumentationElementType;

  _TDDIAbstractArgumentationElement__isset __isset;

  void __set_UsedArgumentationElement(const TDDIArgumentationElementUnion& val);

  void __set_UsedArgumentationElementType(const TDDIArgumentationElementUnionType val);

  bool operator == (const TDDIAbstractArgumentationElement & rhs) const
  {
    if (!(UsedArgumentationElement == rhs.UsedArgumentationElement))
      return false;
    if (!(UsedArgumentationElementType == rhs.UsedArgumentationElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentationElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentationElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentationElement &a, TDDIAbstractArgumentationElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentationElement& obj);

typedef struct _TDDIArgumentGroup__isset {
  _TDDIArgumentGroup__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArgumentationElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArgumentationElement :1;
} _TDDIArgumentGroup__isset;

class TDDIArgumentGroup : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentGroup(const TDDIArgumentGroup&);
  TDDIArgumentGroup& operator=(const TDDIArgumentGroup&);
  TDDIArgumentGroup() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArgumentGroup() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArgumentationElementRef>  ArgumentationElement;

  _TDDIArgumentGroup__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val);

  bool operator == (const TDDIArgumentGroup & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentGroup &a, TDDIArgumentGroup &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentGroup& obj);

typedef struct _TDDIArgumentPackageUnion__isset {
  _TDDIArgumentPackageUnion__isset() : ArgumentPackage(false), ArgumentPackageInterface(false), ArgumentPackageBinding(false) {}
  bool ArgumentPackage :1;
  bool ArgumentPackageInterface :1;
  bool ArgumentPackageBinding :1;
} _TDDIArgumentPackageUnion__isset;

class TDDIArgumentPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentPackageUnion(const TDDIArgumentPackageUnion&);
  TDDIArgumentPackageUnion& operator=(const TDDIArgumentPackageUnion&);
  TDDIArgumentPackageUnion() : ArgumentPackage(), ArgumentPackageInterface(), ArgumentPackageBinding() {
  }

  virtual ~TDDIArgumentPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackage> ArgumentPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageInterface> ArgumentPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageBinding> ArgumentPackageBinding;

  _TDDIArgumentPackageUnion__isset __isset;

  void __set_ArgumentPackage(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackage> val);

  void __set_ArgumentPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageInterface> val);

  void __set_ArgumentPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentPackageBinding> val);

  bool operator == (const TDDIArgumentPackageUnion & rhs) const
  {
    if (__isset.ArgumentPackage != rhs.__isset.ArgumentPackage)
      return false;
    else if (__isset.ArgumentPackage && !(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (__isset.ArgumentPackageInterface != rhs.__isset.ArgumentPackageInterface)
      return false;
    else if (__isset.ArgumentPackageInterface && !(ArgumentPackageInterface == rhs.ArgumentPackageInterface))
      return false;
    if (__isset.ArgumentPackageBinding != rhs.__isset.ArgumentPackageBinding)
      return false;
    else if (__isset.ArgumentPackageBinding && !(ArgumentPackageBinding == rhs.ArgumentPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentPackageUnion &a, TDDIArgumentPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageUnion& obj);

typedef struct _TDDIAbstractArgumentPackage__isset {
  _TDDIAbstractArgumentPackage__isset() : UsedArgumentPackage(false), UsedArgumentPackageType(false) {}
  bool UsedArgumentPackage :1;
  bool UsedArgumentPackageType :1;
} _TDDIAbstractArgumentPackage__isset;

class TDDIAbstractArgumentPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentPackage(const TDDIAbstractArgumentPackage&);
  TDDIAbstractArgumentPackage& operator=(const TDDIAbstractArgumentPackage&);
  TDDIAbstractArgumentPackage() : UsedArgumentPackageType((TDDIArgumentPackageUnionType)0) {
  }

  virtual ~TDDIAbstractArgumentPackage() throw();
  TDDIArgumentPackageUnion UsedArgumentPackage;
  TDDIArgumentPackageUnionType UsedArgumentPackageType;

  _TDDIAbstractArgumentPackage__isset __isset;

  void __set_UsedArgumentPackage(const TDDIArgumentPackageUnion& val);

  void __set_UsedArgumentPackageType(const TDDIArgumentPackageUnionType val);

  bool operator == (const TDDIAbstractArgumentPackage & rhs) const
  {
    if (!(UsedArgumentPackage == rhs.UsedArgumentPackage))
      return false;
    if (!(UsedArgumentPackageType == rhs.UsedArgumentPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentPackage &a, TDDIAbstractArgumentPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentPackage& obj);

typedef struct _TDDIArgumentPackage__isset {
  _TDDIArgumentPackage__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArgumentationElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArgumentationElement :1;
} _TDDIArgumentPackage__isset;

class TDDIArgumentPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentPackage(const TDDIArgumentPackage&);
  TDDIArgumentPackage& operator=(const TDDIArgumentPackage&);
  TDDIArgumentPackage() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArgumentPackage() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArgumentationElementRef>  ArgumentationElement;

  _TDDIArgumentPackage__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val);

  bool operator == (const TDDIArgumentPackage & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentPackage &a, TDDIArgumentPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackage& obj);

typedef struct _TDDIArgumentPackageInterface__isset {
  _TDDIArgumentPackageInterface__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArgumentationElement(true), Implements(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArgumentationElement :1;
  bool Implements :1;
} _TDDIArgumentPackageInterface__isset;

class TDDIArgumentPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentPackageInterface(const TDDIArgumentPackageInterface&);
  TDDIArgumentPackageInterface& operator=(const TDDIArgumentPackageInterface&);
  TDDIArgumentPackageInterface() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArgumentPackageInterface() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArgumentationElementRef>  ArgumentationElement;
  TDDIAbstractArgumentPackage Implements;

  _TDDIArgumentPackageInterface__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val);

  void __set_Implements(const TDDIAbstractArgumentPackage& val);

  bool operator == (const TDDIArgumentPackageInterface & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentPackageInterface &a, TDDIArgumentPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageInterface& obj);

typedef struct _TDDIArgumentPackageBinding__isset {
  _TDDIArgumentPackageBinding__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArgumentationElement(true), ParticipantPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArgumentationElement :1;
  bool ParticipantPackage :1;
} _TDDIArgumentPackageBinding__isset;

class TDDIArgumentPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentPackageBinding(const TDDIArgumentPackageBinding&);
  TDDIArgumentPackageBinding& operator=(const TDDIArgumentPackageBinding&);
  TDDIArgumentPackageBinding() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {





  }

  virtual ~TDDIArgumentPackageBinding() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArgumentationElementRef>  ArgumentationElement;
  std::vector<TDDIAbstractArgumentPackageRef>  ParticipantPackage;

  _TDDIArgumentPackageBinding__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArgumentationElement(const std::vector<TDDIAbstractArgumentationElementRef> & val);

  void __set_ParticipantPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val);

  bool operator == (const TDDIArgumentPackageBinding & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    if (!(ParticipantPackage == rhs.ParticipantPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentPackageBinding &a, TDDIArgumentPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentPackageBinding& obj);

typedef struct _TDDIArgumentAssetUnion__isset {
  _TDDIArgumentAssetUnion__isset() : Assertion(false), ArgumentReasoning(false), ArtifactReference(false) {}
  bool Assertion :1;
  bool ArgumentReasoning :1;
  bool ArtifactReference :1;
} _TDDIArgumentAssetUnion__isset;

class TDDIArgumentAssetUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentAssetUnion(const TDDIArgumentAssetUnion&);
  TDDIArgumentAssetUnion& operator=(const TDDIArgumentAssetUnion&);
  TDDIArgumentAssetUnion() : Assertion(), ArgumentReasoning(), ArtifactReference() {
  }

  virtual ~TDDIArgumentAssetUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertion> Assertion;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArgumentReasoning> ArgumentReasoning;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactReference> ArtifactReference;

  _TDDIArgumentAssetUnion__isset __isset;

  void __set_Assertion(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertion> val);

  void __set_ArgumentReasoning(::apache::thrift::stdcxx::shared_ptr<TDDIArgumentReasoning> val);

  void __set_ArtifactReference(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactReference> val);

  bool operator == (const TDDIArgumentAssetUnion & rhs) const
  {
    if (__isset.Assertion != rhs.__isset.Assertion)
      return false;
    else if (__isset.Assertion && !(Assertion == rhs.Assertion))
      return false;
    if (__isset.ArgumentReasoning != rhs.__isset.ArgumentReasoning)
      return false;
    else if (__isset.ArgumentReasoning && !(ArgumentReasoning == rhs.ArgumentReasoning))
      return false;
    if (__isset.ArtifactReference != rhs.__isset.ArtifactReference)
      return false;
    else if (__isset.ArtifactReference && !(ArtifactReference == rhs.ArtifactReference))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentAssetUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentAssetUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentAssetUnion &a, TDDIArgumentAssetUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentAssetUnion& obj);

typedef struct _TDDIAbstractArgumentAsset__isset {
  _TDDIAbstractArgumentAsset__isset() : UsedArgumentAsset(false), UsedArgumentAssetType(false) {}
  bool UsedArgumentAsset :1;
  bool UsedArgumentAssetType :1;
} _TDDIAbstractArgumentAsset__isset;

class TDDIAbstractArgumentAsset : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArgumentAsset(const TDDIAbstractArgumentAsset&);
  TDDIAbstractArgumentAsset& operator=(const TDDIAbstractArgumentAsset&);
  TDDIAbstractArgumentAsset() : UsedArgumentAssetType((TDDIArgumentAssetUnionType)0) {
  }

  virtual ~TDDIAbstractArgumentAsset() throw();
  TDDIArgumentAssetUnion UsedArgumentAsset;
  TDDIArgumentAssetUnionType UsedArgumentAssetType;

  _TDDIAbstractArgumentAsset__isset __isset;

  void __set_UsedArgumentAsset(const TDDIArgumentAssetUnion& val);

  void __set_UsedArgumentAssetType(const TDDIArgumentAssetUnionType val);

  bool operator == (const TDDIAbstractArgumentAsset & rhs) const
  {
    if (!(UsedArgumentAsset == rhs.UsedArgumentAsset))
      return false;
    if (!(UsedArgumentAssetType == rhs.UsedArgumentAssetType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArgumentAsset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArgumentAsset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArgumentAsset &a, TDDIAbstractArgumentAsset &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArgumentAsset& obj);

typedef struct _TDDIArgumentReasoning__isset {
  _TDDIArgumentReasoning__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Structure(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Structure :1;
} _TDDIArgumentReasoning__isset;

class TDDIArgumentReasoning : public virtual ::apache::thrift::TBase {
 public:

  TDDIArgumentReasoning(const TDDIArgumentReasoning&);
  TDDIArgumentReasoning& operator=(const TDDIArgumentReasoning&);
  TDDIArgumentReasoning() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {



  }

  virtual ~TDDIArgumentReasoning() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAbstractArgumentPackage Structure;

  _TDDIArgumentReasoning__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Structure(const TDDIAbstractArgumentPackage& val);

  bool operator == (const TDDIArgumentReasoning & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Structure == rhs.Structure))
      return false;
    return true;
  }
  bool operator != (const TDDIArgumentReasoning &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArgumentReasoning & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArgumentReasoning &a, TDDIArgumentReasoning &b);

std::ostream& operator<<(std::ostream& out, const TDDIArgumentReasoning& obj);

typedef struct _TDDIClaim__isset {
  _TDDIClaim__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
} _TDDIClaim__isset;

class TDDIClaim : public virtual ::apache::thrift::TBase {
 public:

  TDDIClaim(const TDDIClaim&);
  TDDIClaim& operator=(const TDDIClaim&);
  TDDIClaim() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;


  }

  virtual ~TDDIClaim() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;

  _TDDIClaim__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  bool operator == (const TDDIClaim & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    return true;
  }
  bool operator != (const TDDIClaim &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIClaim & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIClaim &a, TDDIClaim &b);

std::ostream& operator<<(std::ostream& out, const TDDIClaim& obj);

typedef struct _TDDIAssertionUnion__isset {
  _TDDIAssertionUnion__isset() : Claim(false), AssertedRelationship(false) {}
  bool Claim :1;
  bool AssertedRelationship :1;
} _TDDIAssertionUnion__isset;

class TDDIAssertionUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertionUnion(const TDDIAssertionUnion&);
  TDDIAssertionUnion& operator=(const TDDIAssertionUnion&);
  TDDIAssertionUnion() : Claim(), AssertedRelationship() {
  }

  virtual ~TDDIAssertionUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIClaim> Claim;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertedRelationship> AssertedRelationship;

  _TDDIAssertionUnion__isset __isset;

  void __set_Claim(::apache::thrift::stdcxx::shared_ptr<TDDIClaim> val);

  void __set_AssertedRelationship(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssertedRelationship> val);

  bool operator == (const TDDIAssertionUnion & rhs) const
  {
    if (__isset.Claim != rhs.__isset.Claim)
      return false;
    else if (__isset.Claim && !(Claim == rhs.Claim))
      return false;
    if (__isset.AssertedRelationship != rhs.__isset.AssertedRelationship)
      return false;
    else if (__isset.AssertedRelationship && !(AssertedRelationship == rhs.AssertedRelationship))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertionUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertionUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertionUnion &a, TDDIAssertionUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertionUnion& obj);

typedef struct _TDDIAbstractAssertion__isset {
  _TDDIAbstractAssertion__isset() : UsedAssertion(false), UsedAssertionType(false) {}
  bool UsedAssertion :1;
  bool UsedAssertionType :1;
} _TDDIAbstractAssertion__isset;

class TDDIAbstractAssertion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssertion(const TDDIAbstractAssertion&);
  TDDIAbstractAssertion& operator=(const TDDIAbstractAssertion&);
  TDDIAbstractAssertion() : UsedAssertionType((TDDIAssertionUnionType)0) {
  }

  virtual ~TDDIAbstractAssertion() throw();
  TDDIAssertionUnion UsedAssertion;
  TDDIAssertionUnionType UsedAssertionType;

  _TDDIAbstractAssertion__isset __isset;

  void __set_UsedAssertion(const TDDIAssertionUnion& val);

  void __set_UsedAssertionType(const TDDIAssertionUnionType val);

  bool operator == (const TDDIAbstractAssertion & rhs) const
  {
    if (!(UsedAssertion == rhs.UsedAssertion))
      return false;
    if (!(UsedAssertionType == rhs.UsedAssertionType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssertion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssertion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssertion &a, TDDIAbstractAssertion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssertion& obj);

typedef struct _TDDIAssertedArtifactSupport__isset {
  _TDDIAssertedArtifactSupport__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedArtifactSupport__isset;

class TDDIAssertedArtifactSupport : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedArtifactSupport(const TDDIAssertedArtifactSupport&);
  TDDIAssertedArtifactSupport& operator=(const TDDIAssertedArtifactSupport&);
  TDDIAssertedArtifactSupport() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedArtifactSupport() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedArtifactSupport__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedArtifactSupport & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedArtifactSupport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedArtifactSupport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedArtifactSupport &a, TDDIAssertedArtifactSupport &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedArtifactSupport& obj);

typedef struct _TDDIAssertedArtifactContext__isset {
  _TDDIAssertedArtifactContext__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedArtifactContext__isset;

class TDDIAssertedArtifactContext : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedArtifactContext(const TDDIAssertedArtifactContext&);
  TDDIAssertedArtifactContext& operator=(const TDDIAssertedArtifactContext&);
  TDDIAssertedArtifactContext() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedArtifactContext() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedArtifactContext__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedArtifactContext & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedArtifactContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedArtifactContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedArtifactContext &a, TDDIAssertedArtifactContext &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedArtifactContext& obj);

typedef struct _TDDIAssertedInference__isset {
  _TDDIAssertedInference__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedInference__isset;

class TDDIAssertedInference : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedInference(const TDDIAssertedInference&);
  TDDIAssertedInference& operator=(const TDDIAssertedInference&);
  TDDIAssertedInference() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedInference() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedInference__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedInference & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedInference &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedInference & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedInference &a, TDDIAssertedInference &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedInference& obj);

typedef struct _TDDIAssertedEvidence__isset {
  _TDDIAssertedEvidence__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedEvidence__isset;

class TDDIAssertedEvidence : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedEvidence(const TDDIAssertedEvidence&);
  TDDIAssertedEvidence& operator=(const TDDIAssertedEvidence&);
  TDDIAssertedEvidence() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedEvidence() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedEvidence__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedEvidence & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedEvidence &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedEvidence & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedEvidence &a, TDDIAssertedEvidence &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedEvidence& obj);

typedef struct _TDDIAssertedContext__isset {
  _TDDIAssertedContext__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssertionDeclaration(true), MetaClaim(true), IsCounter(true), Source(true), Target(true), Reasoning(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssertionDeclaration :1;
  bool MetaClaim :1;
  bool IsCounter :1;
  bool Source :1;
  bool Target :1;
  bool Reasoning :1;
} _TDDIAssertedContext__isset;

class TDDIAssertedContext : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedContext(const TDDIAssertedContext&);
  TDDIAssertedContext& operator=(const TDDIAssertedContext&);
  TDDIAssertedContext() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), AssertionDeclaration((TDDIAssertionDeclaration)0), IsCounter(false) {



    AssertionDeclaration = (TDDIAssertionDeclaration)0;




  }

  virtual ~TDDIAssertedContext() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  TDDIAssertionDeclaration AssertionDeclaration;
  std::vector<TDDIClaimRef>  MetaClaim;
  bool IsCounter;
  std::vector<TDDIAbstractArgumentAssetRef>  Source;
  std::vector<TDDIAbstractArgumentAssetRef>  Target;
  TDDIArgumentReasoning Reasoning;

  _TDDIAssertedContext__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssertionDeclaration(const TDDIAssertionDeclaration val);

  void __set_MetaClaim(const std::vector<TDDIClaimRef> & val);

  void __set_IsCounter(const bool val);

  void __set_Source(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArgumentAssetRef> & val);

  void __set_Reasoning(const TDDIArgumentReasoning& val);

  bool operator == (const TDDIAssertedContext & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssertionDeclaration == rhs.AssertionDeclaration))
      return false;
    if (!(MetaClaim == rhs.MetaClaim))
      return false;
    if (!(IsCounter == rhs.IsCounter))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    if (!(Reasoning == rhs.Reasoning))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedContext &a, TDDIAssertedContext &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedContext& obj);

typedef struct _TDDIAssertedRelationshipUnion__isset {
  _TDDIAssertedRelationshipUnion__isset() : AssertedArtifactSupport(false), AssertedArtifactContext(false), AssertedInference(false), AssertedEvidence(false), AssertedContext(false) {}
  bool AssertedArtifactSupport :1;
  bool AssertedArtifactContext :1;
  bool AssertedInference :1;
  bool AssertedEvidence :1;
  bool AssertedContext :1;
} _TDDIAssertedRelationshipUnion__isset;

class TDDIAssertedRelationshipUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssertedRelationshipUnion(const TDDIAssertedRelationshipUnion&);
  TDDIAssertedRelationshipUnion& operator=(const TDDIAssertedRelationshipUnion&);
  TDDIAssertedRelationshipUnion() : AssertedArtifactSupport(), AssertedArtifactContext(), AssertedInference(), AssertedEvidence(), AssertedContext() {
  }

  virtual ~TDDIAssertedRelationshipUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedArtifactSupport> AssertedArtifactSupport;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedArtifactContext> AssertedArtifactContext;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedInference> AssertedInference;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedEvidence> AssertedEvidence;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssertedContext> AssertedContext;

  _TDDIAssertedRelationshipUnion__isset __isset;

  void __set_AssertedArtifactSupport(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedArtifactSupport> val);

  void __set_AssertedArtifactContext(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedArtifactContext> val);

  void __set_AssertedInference(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedInference> val);

  void __set_AssertedEvidence(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedEvidence> val);

  void __set_AssertedContext(::apache::thrift::stdcxx::shared_ptr<TDDIAssertedContext> val);

  bool operator == (const TDDIAssertedRelationshipUnion & rhs) const
  {
    if (__isset.AssertedArtifactSupport != rhs.__isset.AssertedArtifactSupport)
      return false;
    else if (__isset.AssertedArtifactSupport && !(AssertedArtifactSupport == rhs.AssertedArtifactSupport))
      return false;
    if (__isset.AssertedArtifactContext != rhs.__isset.AssertedArtifactContext)
      return false;
    else if (__isset.AssertedArtifactContext && !(AssertedArtifactContext == rhs.AssertedArtifactContext))
      return false;
    if (__isset.AssertedInference != rhs.__isset.AssertedInference)
      return false;
    else if (__isset.AssertedInference && !(AssertedInference == rhs.AssertedInference))
      return false;
    if (__isset.AssertedEvidence != rhs.__isset.AssertedEvidence)
      return false;
    else if (__isset.AssertedEvidence && !(AssertedEvidence == rhs.AssertedEvidence))
      return false;
    if (__isset.AssertedContext != rhs.__isset.AssertedContext)
      return false;
    else if (__isset.AssertedContext && !(AssertedContext == rhs.AssertedContext))
      return false;
    return true;
  }
  bool operator != (const TDDIAssertedRelationshipUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssertedRelationshipUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssertedRelationshipUnion &a, TDDIAssertedRelationshipUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssertedRelationshipUnion& obj);

typedef struct _TDDIAbstractAssertedRelationship__isset {
  _TDDIAbstractAssertedRelationship__isset() : UsedAssertedRelationship(false), UsedAssertedRelationshipType(false) {}
  bool UsedAssertedRelationship :1;
  bool UsedAssertedRelationshipType :1;
} _TDDIAbstractAssertedRelationship__isset;

class TDDIAbstractAssertedRelationship : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssertedRelationship(const TDDIAbstractAssertedRelationship&);
  TDDIAbstractAssertedRelationship& operator=(const TDDIAbstractAssertedRelationship&);
  TDDIAbstractAssertedRelationship() : UsedAssertedRelationshipType((TDDIAssertedRelationshipUnionType)0) {
  }

  virtual ~TDDIAbstractAssertedRelationship() throw();
  TDDIAssertedRelationshipUnion UsedAssertedRelationship;
  TDDIAssertedRelationshipUnionType UsedAssertedRelationshipType;

  _TDDIAbstractAssertedRelationship__isset __isset;

  void __set_UsedAssertedRelationship(const TDDIAssertedRelationshipUnion& val);

  void __set_UsedAssertedRelationshipType(const TDDIAssertedRelationshipUnionType val);

  bool operator == (const TDDIAbstractAssertedRelationship & rhs) const
  {
    if (!(UsedAssertedRelationship == rhs.UsedAssertedRelationship))
      return false;
    if (!(UsedAssertedRelationshipType == rhs.UsedAssertedRelationshipType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssertedRelationship &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssertedRelationship & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssertedRelationship &a, TDDIAbstractAssertedRelationship &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssertedRelationship& obj);

typedef struct _TDDIArtifactPackageUnion__isset {
  _TDDIArtifactPackageUnion__isset() : ArtifactPackage(false), ArtifactPackageInterface(false), ArtifactPackageBinding(false) {}
  bool ArtifactPackage :1;
  bool ArtifactPackageInterface :1;
  bool ArtifactPackageBinding :1;
} _TDDIArtifactPackageUnion__isset;

class TDDIArtifactPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactPackageUnion(const TDDIArtifactPackageUnion&);
  TDDIArtifactPackageUnion& operator=(const TDDIArtifactPackageUnion&);
  TDDIArtifactPackageUnion() : ArtifactPackage(), ArtifactPackageInterface(), ArtifactPackageBinding() {
  }

  virtual ~TDDIArtifactPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackage> ArtifactPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageInterface> ArtifactPackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageBinding> ArtifactPackageBinding;

  _TDDIArtifactPackageUnion__isset __isset;

  void __set_ArtifactPackage(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackage> val);

  void __set_ArtifactPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageInterface> val);

  void __set_ArtifactPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactPackageBinding> val);

  bool operator == (const TDDIArtifactPackageUnion & rhs) const
  {
    if (__isset.ArtifactPackage != rhs.__isset.ArtifactPackage)
      return false;
    else if (__isset.ArtifactPackage && !(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (__isset.ArtifactPackageInterface != rhs.__isset.ArtifactPackageInterface)
      return false;
    else if (__isset.ArtifactPackageInterface && !(ArtifactPackageInterface == rhs.ArtifactPackageInterface))
      return false;
    if (__isset.ArtifactPackageBinding != rhs.__isset.ArtifactPackageBinding)
      return false;
    else if (__isset.ArtifactPackageBinding && !(ArtifactPackageBinding == rhs.ArtifactPackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactPackageUnion &a, TDDIArtifactPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageUnion& obj);

typedef struct _TDDIAbstractArtifactPackage__isset {
  _TDDIAbstractArtifactPackage__isset() : UsedArtifactPackage(false), UsedArtifactPackageType(false) {}
  bool UsedArtifactPackage :1;
  bool UsedArtifactPackageType :1;
} _TDDIAbstractArtifactPackage__isset;

class TDDIAbstractArtifactPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactPackage(const TDDIAbstractArtifactPackage&);
  TDDIAbstractArtifactPackage& operator=(const TDDIAbstractArtifactPackage&);
  TDDIAbstractArtifactPackage() : UsedArtifactPackageType((TDDIArtifactPackageUnionType)0) {
  }

  virtual ~TDDIAbstractArtifactPackage() throw();
  TDDIArtifactPackageUnion UsedArtifactPackage;
  TDDIArtifactPackageUnionType UsedArtifactPackageType;

  _TDDIAbstractArtifactPackage__isset __isset;

  void __set_UsedArtifactPackage(const TDDIArtifactPackageUnion& val);

  void __set_UsedArtifactPackageType(const TDDIArtifactPackageUnionType val);

  bool operator == (const TDDIAbstractArtifactPackage & rhs) const
  {
    if (!(UsedArtifactPackage == rhs.UsedArtifactPackage))
      return false;
    if (!(UsedArtifactPackageType == rhs.UsedArtifactPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactPackage &a, TDDIAbstractArtifactPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactPackage& obj);

typedef struct _TDDIArtifactPackage__isset {
  _TDDIArtifactPackage__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArtifactElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArtifactElement :1;
} _TDDIArtifactPackage__isset;

class TDDIArtifactPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactPackage(const TDDIArtifactPackage&);
  TDDIArtifactPackage& operator=(const TDDIArtifactPackage&);
  TDDIArtifactPackage() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArtifactPackage() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ArtifactElement;

  _TDDIArtifactPackage__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  bool operator == (const TDDIArtifactPackage & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArtifactElement == rhs.ArtifactElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactPackage &a, TDDIArtifactPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackage& obj);

typedef struct _TDDIArtifactPackageInterface__isset {
  _TDDIArtifactPackageInterface__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArtifactElement(true), Implements(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArtifactElement :1;
  bool Implements :1;
} _TDDIArtifactPackageInterface__isset;

class TDDIArtifactPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactPackageInterface(const TDDIArtifactPackageInterface&);
  TDDIArtifactPackageInterface& operator=(const TDDIArtifactPackageInterface&);
  TDDIArtifactPackageInterface() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArtifactPackageInterface() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ArtifactElement;
  TDDIAbstractArtifactPackage Implements;

  _TDDIArtifactPackageInterface__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  void __set_Implements(const TDDIAbstractArtifactPackage& val);

  bool operator == (const TDDIArtifactPackageInterface & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArtifactElement == rhs.ArtifactElement))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactPackageInterface &a, TDDIArtifactPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageInterface& obj);

typedef struct _TDDIArtifactPackageBinding__isset {
  _TDDIArtifactPackageBinding__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArtifactElement(true), ParticipantPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArtifactElement :1;
  bool ParticipantPackage :1;
} _TDDIArtifactPackageBinding__isset;

class TDDIArtifactPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactPackageBinding(const TDDIArtifactPackageBinding&);
  TDDIArtifactPackageBinding& operator=(const TDDIArtifactPackageBinding&);
  TDDIArtifactPackageBinding() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {





  }

  virtual ~TDDIArtifactPackageBinding() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ArtifactElement;
  std::vector<TDDIAbstractArtifactPackage>  ParticipantPackage;

  _TDDIArtifactPackageBinding__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  void __set_ParticipantPackage(const std::vector<TDDIAbstractArtifactPackage> & val);

  bool operator == (const TDDIArtifactPackageBinding & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArtifactElement == rhs.ArtifactElement))
      return false;
    if (!(ParticipantPackage == rhs.ParticipantPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactPackageBinding &a, TDDIArtifactPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactPackageBinding& obj);

typedef struct _TDDIArtifactGroup__isset {
  _TDDIArtifactGroup__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), ArtifactElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool ArtifactElement :1;
} _TDDIArtifactGroup__isset;

class TDDIArtifactGroup : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactGroup(const TDDIArtifactGroup&);
  TDDIArtifactGroup& operator=(const TDDIArtifactGroup&);
  TDDIArtifactGroup() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIArtifactGroup() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractArtifactElementRef>  ArtifactElement;

  _TDDIArtifactGroup__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_ArtifactElement(const std::vector<TDDIAbstractArtifactElementRef> & val);

  bool operator == (const TDDIArtifactGroup & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(ArtifactElement == rhs.ArtifactElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactGroup &a, TDDIArtifactGroup &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactGroup& obj);

typedef struct _TDDIProperty__isset {
  _TDDIProperty__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
} _TDDIProperty__isset;

class TDDIProperty : public virtual ::apache::thrift::TBase {
 public:

  TDDIProperty(const TDDIProperty&);
  TDDIProperty& operator=(const TDDIProperty&);
  TDDIProperty() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIProperty() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;

  _TDDIProperty__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  bool operator == (const TDDIProperty & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    return true;
  }
  bool operator != (const TDDIProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIProperty &a, TDDIProperty &b);

std::ostream& operator<<(std::ostream& out, const TDDIProperty& obj);

typedef struct _TDDITechnique__isset {
  _TDDITechnique__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
} _TDDITechnique__isset;

class TDDITechnique : public virtual ::apache::thrift::TBase {
 public:

  TDDITechnique(const TDDITechnique&);
  TDDITechnique& operator=(const TDDITechnique&);
  TDDITechnique() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDITechnique() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;

  _TDDITechnique__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  bool operator == (const TDDITechnique & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    return true;
  }
  bool operator != (const TDDITechnique &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITechnique & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITechnique &a, TDDITechnique &b);

std::ostream& operator<<(std::ostream& out, const TDDITechnique& obj);

typedef struct _TDDIParticipant__isset {
  _TDDIParticipant__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
} _TDDIParticipant__isset;

class TDDIParticipant : public virtual ::apache::thrift::TBase {
 public:

  TDDIParticipant(const TDDIParticipant&);
  TDDIParticipant& operator=(const TDDIParticipant&);
  TDDIParticipant() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIParticipant() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;

  _TDDIParticipant__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  bool operator == (const TDDIParticipant & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    return true;
  }
  bool operator != (const TDDIParticipant &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIParticipant & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIParticipant &a, TDDIParticipant &b);

std::ostream& operator<<(std::ostream& out, const TDDIParticipant& obj);

typedef struct _TDDIActivity__isset {
  _TDDIActivity__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true), StartTime(true), EndTime(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
  bool StartTime :1;
  bool EndTime :1;
} _TDDIActivity__isset;

class TDDIActivity : public virtual ::apache::thrift::TBase {
 public:

  TDDIActivity(const TDDIActivity&);
  TDDIActivity& operator=(const TDDIActivity&);
  TDDIActivity() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), StartTime(""), EndTime("") {




  }

  virtual ~TDDIActivity() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;
  std::string StartTime;
  std::string EndTime;

  _TDDIActivity__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  void __set_StartTime(const std::string& val);

  void __set_EndTime(const std::string& val);

  bool operator == (const TDDIActivity & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    if (!(StartTime == rhs.StartTime))
      return false;
    if (!(EndTime == rhs.EndTime))
      return false;
    return true;
  }
  bool operator != (const TDDIActivity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIActivity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIActivity &a, TDDIActivity &b);

std::ostream& operator<<(std::ostream& out, const TDDIActivity& obj);

typedef struct _TDDIEvent__isset {
  _TDDIEvent__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true), Occurence(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
  bool Occurence :1;
} _TDDIEvent__isset;

class TDDIEvent : public virtual ::apache::thrift::TBase {
 public:

  TDDIEvent(const TDDIEvent&);
  TDDIEvent& operator=(const TDDIEvent&);
  TDDIEvent() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), Occurence("") {




  }

  virtual ~TDDIEvent() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;
  std::string Occurence;

  _TDDIEvent__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  void __set_Occurence(const std::string& val);

  bool operator == (const TDDIEvent & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    if (!(Occurence == rhs.Occurence))
      return false;
    return true;
  }
  bool operator != (const TDDIEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIEvent &a, TDDIEvent &b);

std::ostream& operator<<(std::ostream& out, const TDDIEvent& obj);

typedef struct _TDDIResource__isset {
  _TDDIResource__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
} _TDDIResource__isset;

class TDDIResource : public virtual ::apache::thrift::TBase {
 public:

  TDDIResource(const TDDIResource&);
  TDDIResource& operator=(const TDDIResource&);
  TDDIResource() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDIResource() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;

  _TDDIResource__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  bool operator == (const TDDIResource & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    return true;
  }
  bool operator != (const TDDIResource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIResource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIResource &a, TDDIResource &b);

std::ostream& operator<<(std::ostream& out, const TDDIResource& obj);

typedef struct _TDDIArtifact__isset {
  _TDDIArtifact__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true), Version(true), Date(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
  bool Version :1;
  bool Date :1;
} _TDDIArtifact__isset;

class TDDIArtifact : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifact(const TDDIArtifact&);
  TDDIArtifact& operator=(const TDDIArtifact&);
  TDDIArtifact() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), Version(""), Date("") {




  }

  virtual ~TDDIArtifact() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;
  std::string Version;
  std::string Date;

  _TDDIArtifact__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  void __set_Version(const std::string& val);

  void __set_Date(const std::string& val);

  bool operator == (const TDDIArtifact & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    if (!(Version == rhs.Version))
      return false;
    if (!(Date == rhs.Date))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifact &a, TDDIArtifact &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifact& obj);

typedef struct _TDDIArtifactAssetRelationship__isset {
  _TDDIArtifactAssetRelationship__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Property(true), Source(true), Target(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Property :1;
  bool Source :1;
  bool Target :1;
} _TDDIArtifactAssetRelationship__isset;

class TDDIArtifactAssetRelationship : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactAssetRelationship(const TDDIArtifactAssetRelationship&);
  TDDIArtifactAssetRelationship& operator=(const TDDIArtifactAssetRelationship&);
  TDDIArtifactAssetRelationship() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {






  }

  virtual ~TDDIArtifactAssetRelationship() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIPropertyRef>  Property;
  std::vector<TDDIAbstractArtifactAssetRef>  Source;
  std::vector<TDDIAbstractArtifactAssetRef>  Target;

  _TDDIArtifactAssetRelationship__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Property(const std::vector<TDDIPropertyRef> & val);

  void __set_Source(const std::vector<TDDIAbstractArtifactAssetRef> & val);

  void __set_Target(const std::vector<TDDIAbstractArtifactAssetRef> & val);

  bool operator == (const TDDIArtifactAssetRelationship & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Property == rhs.Property))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(Target == rhs.Target))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactAssetRelationship &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactAssetRelationship & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactAssetRelationship &a, TDDIArtifactAssetRelationship &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetRelationship& obj);

typedef struct _TDDIArtifactAssetUnion__isset {
  _TDDIArtifactAssetUnion__isset() : Property(false), Technique(false), Participant(false), Activity(false), Event(false), Resource(false), Artifact(false), ArtifactAssetRelationship(false) {}
  bool Property :1;
  bool Technique :1;
  bool Participant :1;
  bool Activity :1;
  bool Event :1;
  bool Resource :1;
  bool Artifact :1;
  bool ArtifactAssetRelationship :1;
} _TDDIArtifactAssetUnion__isset;

class TDDIArtifactAssetUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactAssetUnion(const TDDIArtifactAssetUnion&);
  TDDIArtifactAssetUnion& operator=(const TDDIArtifactAssetUnion&);
  TDDIArtifactAssetUnion() : Property(), Technique(), Participant(), Activity(), Event(), Resource(), Artifact(), ArtifactAssetRelationship() {
  }

  virtual ~TDDIArtifactAssetUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIProperty> Property;
  ::apache::thrift::stdcxx::shared_ptr<TDDITechnique> Technique;
  ::apache::thrift::stdcxx::shared_ptr<TDDIParticipant> Participant;
  ::apache::thrift::stdcxx::shared_ptr<TDDIActivity> Activity;
  ::apache::thrift::stdcxx::shared_ptr<TDDIEvent> Event;
  ::apache::thrift::stdcxx::shared_ptr<TDDIResource> Resource;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifact> Artifact;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactAssetRelationship> ArtifactAssetRelationship;

  _TDDIArtifactAssetUnion__isset __isset;

  void __set_Property(::apache::thrift::stdcxx::shared_ptr<TDDIProperty> val);

  void __set_Technique(::apache::thrift::stdcxx::shared_ptr<TDDITechnique> val);

  void __set_Participant(::apache::thrift::stdcxx::shared_ptr<TDDIParticipant> val);

  void __set_Activity(::apache::thrift::stdcxx::shared_ptr<TDDIActivity> val);

  void __set_Event(::apache::thrift::stdcxx::shared_ptr<TDDIEvent> val);

  void __set_Resource(::apache::thrift::stdcxx::shared_ptr<TDDIResource> val);

  void __set_Artifact(::apache::thrift::stdcxx::shared_ptr<TDDIArtifact> val);

  void __set_ArtifactAssetRelationship(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactAssetRelationship> val);

  bool operator == (const TDDIArtifactAssetUnion & rhs) const
  {
    if (__isset.Property != rhs.__isset.Property)
      return false;
    else if (__isset.Property && !(Property == rhs.Property))
      return false;
    if (__isset.Technique != rhs.__isset.Technique)
      return false;
    else if (__isset.Technique && !(Technique == rhs.Technique))
      return false;
    if (__isset.Participant != rhs.__isset.Participant)
      return false;
    else if (__isset.Participant && !(Participant == rhs.Participant))
      return false;
    if (__isset.Activity != rhs.__isset.Activity)
      return false;
    else if (__isset.Activity && !(Activity == rhs.Activity))
      return false;
    if (__isset.Event != rhs.__isset.Event)
      return false;
    else if (__isset.Event && !(Event == rhs.Event))
      return false;
    if (__isset.Resource != rhs.__isset.Resource)
      return false;
    else if (__isset.Resource && !(Resource == rhs.Resource))
      return false;
    if (__isset.Artifact != rhs.__isset.Artifact)
      return false;
    else if (__isset.Artifact && !(Artifact == rhs.Artifact))
      return false;
    if (__isset.ArtifactAssetRelationship != rhs.__isset.ArtifactAssetRelationship)
      return false;
    else if (__isset.ArtifactAssetRelationship && !(ArtifactAssetRelationship == rhs.ArtifactAssetRelationship))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactAssetUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactAssetUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactAssetUnion &a, TDDIArtifactAssetUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactAssetUnion& obj);

typedef struct _TDDIAbstractArtifactAsset__isset {
  _TDDIAbstractArtifactAsset__isset() : UsedArtifactAsset(false), UsedArtifactAssetType(false) {}
  bool UsedArtifactAsset :1;
  bool UsedArtifactAssetType :1;
} _TDDIAbstractArtifactAsset__isset;

class TDDIAbstractArtifactAsset : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactAsset(const TDDIAbstractArtifactAsset&);
  TDDIAbstractArtifactAsset& operator=(const TDDIAbstractArtifactAsset&);
  TDDIAbstractArtifactAsset() : UsedArtifactAssetType((TDDIArtifactAssetUnionType)0) {
  }

  virtual ~TDDIAbstractArtifactAsset() throw();
  TDDIArtifactAssetUnion UsedArtifactAsset;
  TDDIArtifactAssetUnionType UsedArtifactAssetType;

  _TDDIAbstractArtifactAsset__isset __isset;

  void __set_UsedArtifactAsset(const TDDIArtifactAssetUnion& val);

  void __set_UsedArtifactAssetType(const TDDIArtifactAssetUnionType val);

  bool operator == (const TDDIAbstractArtifactAsset & rhs) const
  {
    if (!(UsedArtifactAsset == rhs.UsedArtifactAsset))
      return false;
    if (!(UsedArtifactAssetType == rhs.UsedArtifactAssetType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactAsset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactAsset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactAsset &a, TDDIAbstractArtifactAsset &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactAsset& obj);

typedef struct _TDDIAssuranceCasePackageUnion__isset {
  _TDDIAssuranceCasePackageUnion__isset() : AssuranceCasePackage(false), AssuranceCasePackageInterface(false), AssuranceCasePackageBinding(false) {}
  bool AssuranceCasePackage :1;
  bool AssuranceCasePackageInterface :1;
  bool AssuranceCasePackageBinding :1;
} _TDDIAssuranceCasePackageUnion__isset;

class TDDIAssuranceCasePackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackageUnion(const TDDIAssuranceCasePackageUnion&);
  TDDIAssuranceCasePackageUnion& operator=(const TDDIAssuranceCasePackageUnion&);
  TDDIAssuranceCasePackageUnion() : AssuranceCasePackage(), AssuranceCasePackageInterface(), AssuranceCasePackageBinding() {
  }

  virtual ~TDDIAssuranceCasePackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackage> AssuranceCasePackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> AssuranceCasePackageInterface;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageBinding> AssuranceCasePackageBinding;

  _TDDIAssuranceCasePackageUnion__isset __isset;

  void __set_AssuranceCasePackage(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackage> val);

  void __set_AssuranceCasePackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageInterface> val);

  void __set_AssuranceCasePackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceCasePackageBinding> val);

  bool operator == (const TDDIAssuranceCasePackageUnion & rhs) const
  {
    if (__isset.AssuranceCasePackage != rhs.__isset.AssuranceCasePackage)
      return false;
    else if (__isset.AssuranceCasePackage && !(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (__isset.AssuranceCasePackageInterface != rhs.__isset.AssuranceCasePackageInterface)
      return false;
    else if (__isset.AssuranceCasePackageInterface && !(AssuranceCasePackageInterface == rhs.AssuranceCasePackageInterface))
      return false;
    if (__isset.AssuranceCasePackageBinding != rhs.__isset.AssuranceCasePackageBinding)
      return false;
    else if (__isset.AssuranceCasePackageBinding && !(AssuranceCasePackageBinding == rhs.AssuranceCasePackageBinding))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackageUnion &a, TDDIAssuranceCasePackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageUnion& obj);

typedef struct _TDDIAbstractAssuranceCasePackage__isset {
  _TDDIAbstractAssuranceCasePackage__isset() : UsedAssuranceCasePackage(false), UsedAssuranceCasePackageType(false) {}
  bool UsedAssuranceCasePackage :1;
  bool UsedAssuranceCasePackageType :1;
} _TDDIAbstractAssuranceCasePackage__isset;

class TDDIAbstractAssuranceCasePackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssuranceCasePackage(const TDDIAbstractAssuranceCasePackage&);
  TDDIAbstractAssuranceCasePackage& operator=(const TDDIAbstractAssuranceCasePackage&);
  TDDIAbstractAssuranceCasePackage() : UsedAssuranceCasePackageType((TDDIAssuranceCasePackageUnionType)0) {
  }

  virtual ~TDDIAbstractAssuranceCasePackage() throw();
  TDDIAssuranceCasePackageUnion UsedAssuranceCasePackage;
  TDDIAssuranceCasePackageUnionType UsedAssuranceCasePackageType;

  _TDDIAbstractAssuranceCasePackage__isset __isset;

  void __set_UsedAssuranceCasePackage(const TDDIAssuranceCasePackageUnion& val);

  void __set_UsedAssuranceCasePackageType(const TDDIAssuranceCasePackageUnionType val);

  bool operator == (const TDDIAbstractAssuranceCasePackage & rhs) const
  {
    if (!(UsedAssuranceCasePackage == rhs.UsedAssuranceCasePackage))
      return false;
    if (!(UsedAssuranceCasePackageType == rhs.UsedAssuranceCasePackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssuranceCasePackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssuranceCasePackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssuranceCasePackage &a, TDDIAbstractAssuranceCasePackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssuranceCasePackage& obj);

typedef struct _TDDIAssuranceCasePackage__isset {
  _TDDIAssuranceCasePackage__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssuranceCasePackage(true), Interface(true), ArtifactPackage(true), ArgumentPackage(true), TerminologyPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssuranceCasePackage :1;
  bool Interface :1;
  bool ArtifactPackage :1;
  bool ArgumentPackage :1;
  bool TerminologyPackage :1;
} _TDDIAssuranceCasePackage__isset;

class TDDIAssuranceCasePackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackage(const TDDIAssuranceCasePackage&);
  TDDIAssuranceCasePackage& operator=(const TDDIAssuranceCasePackage&);
  TDDIAssuranceCasePackage() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {








  }

  virtual ~TDDIAssuranceCasePackage() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackage;
  std::vector<TDDIAssuranceCasePackageInterfaceRef>  Interface;
  std::vector<TDDIAbstractArtifactPackageRef>  ArtifactPackage;
  std::vector<TDDIAbstractArgumentPackageRef>  ArgumentPackage;
  std::vector<TDDIAbstractTerminologyPackageRef>  TerminologyPackage;

  _TDDIAssuranceCasePackage__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  void __set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val);

  void __set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val);

  void __set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val);

  void __set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val);

  bool operator == (const TDDIAssuranceCasePackage & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (!(Interface == rhs.Interface))
      return false;
    if (!(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (!(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (!(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackage &a, TDDIAssuranceCasePackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackage& obj);

typedef struct _TDDIAssuranceCasePackageInterface__isset {
  _TDDIAssuranceCasePackageInterface__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssuranceCasePackage(true), Interface(true), ArtifactPackage(true), ArgumentPackage(true), TerminologyPackage(true), Implements(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssuranceCasePackage :1;
  bool Interface :1;
  bool ArtifactPackage :1;
  bool ArgumentPackage :1;
  bool TerminologyPackage :1;
  bool Implements :1;
} _TDDIAssuranceCasePackageInterface__isset;

class TDDIAssuranceCasePackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackageInterface(const TDDIAssuranceCasePackageInterface&);
  TDDIAssuranceCasePackageInterface& operator=(const TDDIAssuranceCasePackageInterface&);
  TDDIAssuranceCasePackageInterface() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {








  }

  virtual ~TDDIAssuranceCasePackageInterface() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackage;
  std::vector<TDDIAssuranceCasePackageInterfaceRef>  Interface;
  std::vector<TDDIAbstractArtifactPackageRef>  ArtifactPackage;
  std::vector<TDDIAbstractArgumentPackageRef>  ArgumentPackage;
  std::vector<TDDIAbstractTerminologyPackageRef>  TerminologyPackage;
  TDDIAbstractAssuranceCasePackage Implements;

  _TDDIAssuranceCasePackageInterface__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  void __set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val);

  void __set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val);

  void __set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val);

  void __set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val);

  void __set_Implements(const TDDIAbstractAssuranceCasePackage& val);

  bool operator == (const TDDIAssuranceCasePackageInterface & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (!(Interface == rhs.Interface))
      return false;
    if (!(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (!(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (!(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackageInterface &a, TDDIAssuranceCasePackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageInterface& obj);

typedef struct _TDDIAssuranceCasePackageBinding__isset {
  _TDDIAssuranceCasePackageBinding__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), AssuranceCasePackage(true), Interface(true), ArtifactPackage(true), ArgumentPackage(true), TerminologyPackage(true), ParticipantPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool AssuranceCasePackage :1;
  bool Interface :1;
  bool ArtifactPackage :1;
  bool ArgumentPackage :1;
  bool TerminologyPackage :1;
  bool ParticipantPackage :1;
} _TDDIAssuranceCasePackageBinding__isset;

class TDDIAssuranceCasePackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDIAssuranceCasePackageBinding(const TDDIAssuranceCasePackageBinding&);
  TDDIAssuranceCasePackageBinding& operator=(const TDDIAssuranceCasePackageBinding&);
  TDDIAssuranceCasePackageBinding() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {









  }

  virtual ~TDDIAssuranceCasePackageBinding() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  AssuranceCasePackage;
  std::vector<TDDIAssuranceCasePackageInterfaceRef>  Interface;
  std::vector<TDDIAbstractArtifactPackageRef>  ArtifactPackage;
  std::vector<TDDIAbstractArgumentPackageRef>  ArgumentPackage;
  std::vector<TDDIAbstractTerminologyPackageRef>  TerminologyPackage;
  std::vector<TDDIAbstractAssuranceCasePackageRef>  ParticipantPackage;

  _TDDIAssuranceCasePackageBinding__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_AssuranceCasePackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  void __set_Interface(const std::vector<TDDIAssuranceCasePackageInterfaceRef> & val);

  void __set_ArtifactPackage(const std::vector<TDDIAbstractArtifactPackageRef> & val);

  void __set_ArgumentPackage(const std::vector<TDDIAbstractArgumentPackageRef> & val);

  void __set_TerminologyPackage(const std::vector<TDDIAbstractTerminologyPackageRef> & val);

  void __set_ParticipantPackage(const std::vector<TDDIAbstractAssuranceCasePackageRef> & val);

  bool operator == (const TDDIAssuranceCasePackageBinding & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (!(Interface == rhs.Interface))
      return false;
    if (!(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (!(ArgumentPackage == rhs.ArgumentPackage))
      return false;
    if (!(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    if (!(ParticipantPackage == rhs.ParticipantPackage))
      return false;
    return true;
  }
  bool operator != (const TDDIAssuranceCasePackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAssuranceCasePackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAssuranceCasePackageBinding &a, TDDIAssuranceCasePackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDIAssuranceCasePackageBinding& obj);

typedef struct _TDDILangString__isset {
  _TDDILangString__isset() : Lang(true), Content(true) {}
  bool Lang :1;
  bool Content :1;
} _TDDILangString__isset;

class TDDILangString : public virtual ::apache::thrift::TBase {
 public:

  TDDILangString(const TDDILangString&);
  TDDILangString& operator=(const TDDILangString&);
  TDDILangString() : Lang(""), Content("") {
  }

  virtual ~TDDILangString() throw();
  std::string Lang;
  std::string Content;

  _TDDILangString__isset __isset;

  void __set_Lang(const std::string& val);

  void __set_Content(const std::string& val);

  bool operator == (const TDDILangString & rhs) const
  {
    if (!(Lang == rhs.Lang))
      return false;
    if (!(Content == rhs.Content))
      return false;
    return true;
  }
  bool operator != (const TDDILangString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILangString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILangString &a, TDDILangString &b);

std::ostream& operator<<(std::ostream& out, const TDDILangString& obj);

typedef struct _TDDIExpressionLangString__isset {
  _TDDIExpressionLangString__isset() : Lang(true), Content(true), Expression(false) {}
  bool Lang :1;
  bool Content :1;
  bool Expression :1;
} _TDDIExpressionLangString__isset;

class TDDIExpressionLangString : public virtual ::apache::thrift::TBase {
 public:

  TDDIExpressionLangString(const TDDIExpressionLangString&);
  TDDIExpressionLangString& operator=(const TDDIExpressionLangString&);
  TDDIExpressionLangString() : Lang(""), Content(""), Expression() {
  }

  virtual ~TDDIExpressionLangString() throw();
  std::string Lang;
  std::string Content;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> Expression;

  _TDDIExpressionLangString__isset __isset;

  void __set_Lang(const std::string& val);

  void __set_Content(const std::string& val);

  void __set_Expression(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> val);

  bool operator == (const TDDIExpressionLangString & rhs) const
  {
    if (!(Lang == rhs.Lang))
      return false;
    if (!(Content == rhs.Content))
      return false;
    if (!(Expression == rhs.Expression))
      return false;
    return true;
  }
  bool operator != (const TDDIExpressionLangString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIExpressionLangString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIExpressionLangString &a, TDDIExpressionLangString &b);

std::ostream& operator<<(std::ostream& out, const TDDIExpressionLangString& obj);

typedef struct _TDDILangStringUnion__isset {
  _TDDILangStringUnion__isset() : LangString(false), ExpressionLangString(false) {}
  bool LangString :1;
  bool ExpressionLangString :1;
} _TDDILangStringUnion__isset;

class TDDILangStringUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDILangStringUnion(const TDDILangStringUnion&);
  TDDILangStringUnion& operator=(const TDDILangStringUnion&);
  TDDILangStringUnion() : LangString(), ExpressionLangString() {
  }

  virtual ~TDDILangStringUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDILangString> LangString;
  ::apache::thrift::stdcxx::shared_ptr<TDDIExpressionLangString> ExpressionLangString;

  _TDDILangStringUnion__isset __isset;

  void __set_LangString(::apache::thrift::stdcxx::shared_ptr<TDDILangString> val);

  void __set_ExpressionLangString(::apache::thrift::stdcxx::shared_ptr<TDDIExpressionLangString> val);

  bool operator == (const TDDILangStringUnion & rhs) const
  {
    if (__isset.LangString != rhs.__isset.LangString)
      return false;
    else if (__isset.LangString && !(LangString == rhs.LangString))
      return false;
    if (__isset.ExpressionLangString != rhs.__isset.ExpressionLangString)
      return false;
    else if (__isset.ExpressionLangString && !(ExpressionLangString == rhs.ExpressionLangString))
      return false;
    return true;
  }
  bool operator != (const TDDILangStringUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDILangStringUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDILangStringUnion &a, TDDILangStringUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDILangStringUnion& obj);

typedef struct _TDDIAbstractLangString__isset {
  _TDDIAbstractLangString__isset() : UsedLangString(false), UsedLangStringType(false) {}
  bool UsedLangString :1;
  bool UsedLangStringType :1;
} _TDDIAbstractLangString__isset;

class TDDIAbstractLangString : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractLangString(const TDDIAbstractLangString&);
  TDDIAbstractLangString& operator=(const TDDIAbstractLangString&);
  TDDIAbstractLangString() : UsedLangStringType((TDDILangStringUnionType)0) {
  }

  virtual ~TDDIAbstractLangString() throw();
  TDDILangStringUnion UsedLangString;
  TDDILangStringUnionType UsedLangStringType;

  _TDDIAbstractLangString__isset __isset;

  void __set_UsedLangString(const TDDILangStringUnion& val);

  void __set_UsedLangStringType(const TDDILangStringUnionType val);

  bool operator == (const TDDIAbstractLangString & rhs) const
  {
    if (!(UsedLangString == rhs.UsedLangString))
      return false;
    if (!(UsedLangStringType == rhs.UsedLangStringType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractLangString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractLangString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractLangString &a, TDDIAbstractLangString &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractLangString& obj);

typedef struct _TDDIMultiLangString__isset {
  _TDDIMultiLangString__isset() : Values(true) {}
  bool Values :1;
} _TDDIMultiLangString__isset;

class TDDIMultiLangString : public virtual ::apache::thrift::TBase {
 public:

  TDDIMultiLangString(const TDDIMultiLangString&);
  TDDIMultiLangString& operator=(const TDDIMultiLangString&);
  TDDIMultiLangString() {

  }

  virtual ~TDDIMultiLangString() throw();
  std::vector<TDDIAbstractLangString>  Values;

  _TDDIMultiLangString__isset __isset;

  void __set_Values(const std::vector<TDDIAbstractLangString> & val);

  bool operator == (const TDDIMultiLangString & rhs) const
  {
    if (!(Values == rhs.Values))
      return false;
    return true;
  }
  bool operator != (const TDDIMultiLangString &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIMultiLangString & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIMultiLangString &a, TDDIMultiLangString &b);

std::ostream& operator<<(std::ostream& out, const TDDIMultiLangString& obj);

typedef struct _TDDIDescription__isset {
  _TDDIDescription__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Content(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Content :1;
} _TDDIDescription__isset;

class TDDIDescription : public virtual ::apache::thrift::TBase {
 public:

  TDDIDescription(const TDDIDescription&);
  TDDIDescription& operator=(const TDDIDescription&);
  TDDIDescription() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm() {
  }

  virtual ~TDDIDescription() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  TDDIMultiLangString Content;

  _TDDIDescription__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Content(const TDDIMultiLangString& val);

  bool operator == (const TDDIDescription & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Content == rhs.Content))
      return false;
    return true;
  }
  bool operator != (const TDDIDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIDescription & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIDescription &a, TDDIDescription &b);

std::ostream& operator<<(std::ostream& out, const TDDIDescription& obj);

typedef struct _TDDIImplementationConstraint__isset {
  _TDDIImplementationConstraint__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Content(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Content :1;
} _TDDIImplementationConstraint__isset;

class TDDIImplementationConstraint : public virtual ::apache::thrift::TBase {
 public:

  TDDIImplementationConstraint(const TDDIImplementationConstraint&);
  TDDIImplementationConstraint& operator=(const TDDIImplementationConstraint&);
  TDDIImplementationConstraint() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm() {
  }

  virtual ~TDDIImplementationConstraint() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  TDDIMultiLangString Content;

  _TDDIImplementationConstraint__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Content(const TDDIMultiLangString& val);

  bool operator == (const TDDIImplementationConstraint & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Content == rhs.Content))
      return false;
    return true;
  }
  bool operator != (const TDDIImplementationConstraint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIImplementationConstraint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIImplementationConstraint &a, TDDIImplementationConstraint &b);

std::ostream& operator<<(std::ostream& out, const TDDIImplementationConstraint& obj);

typedef struct _TDDINote__isset {
  _TDDINote__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Content(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Content :1;
} _TDDINote__isset;

class TDDINote : public virtual ::apache::thrift::TBase {
 public:

  TDDINote(const TDDINote&);
  TDDINote& operator=(const TDDINote&);
  TDDINote() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm() {
  }

  virtual ~TDDINote() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  TDDIMultiLangString Content;

  _TDDINote__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Content(const TDDIMultiLangString& val);

  bool operator == (const TDDINote & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Content == rhs.Content))
      return false;
    return true;
  }
  bool operator != (const TDDINote &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDINote & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDINote &a, TDDINote &b);

std::ostream& operator<<(std::ostream& out, const TDDINote& obj);

typedef struct _TDDITaggedValue__isset {
  _TDDITaggedValue__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Content(false), Key(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Content :1;
  bool Key :1;
} _TDDITaggedValue__isset;

class TDDITaggedValue : public virtual ::apache::thrift::TBase {
 public:

  TDDITaggedValue(const TDDITaggedValue&);
  TDDITaggedValue& operator=(const TDDITaggedValue&);
  TDDITaggedValue() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm() {
  }

  virtual ~TDDITaggedValue() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  TDDIMultiLangString Content;
  TDDIMultiLangString Key;

  _TDDITaggedValue__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Content(const TDDIMultiLangString& val);

  void __set_Key(const TDDIMultiLangString& val);

  bool operator == (const TDDITaggedValue & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Content == rhs.Content))
      return false;
    if (!(Key == rhs.Key))
      return false;
    return true;
  }
  bool operator != (const TDDITaggedValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITaggedValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITaggedValue &a, TDDITaggedValue &b);

std::ostream& operator<<(std::ostream& out, const TDDITaggedValue& obj);

typedef struct _TDDIUtilityElementUnion__isset {
  _TDDIUtilityElementUnion__isset() : Description(false), ImplementationConstraint(false), Note(false), TaggedValue(false) {}
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
} _TDDIUtilityElementUnion__isset;

class TDDIUtilityElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIUtilityElementUnion(const TDDIUtilityElementUnion&);
  TDDIUtilityElementUnion& operator=(const TDDIUtilityElementUnion&);
  TDDIUtilityElementUnion() : Description(), ImplementationConstraint(), Note(), TaggedValue() {
  }

  virtual ~TDDIUtilityElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  ::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> ImplementationConstraint;
  ::apache::thrift::stdcxx::shared_ptr<TDDINote> Note;
  ::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> TaggedValue;

  _TDDIUtilityElementUnion__isset __isset;

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(::apache::thrift::stdcxx::shared_ptr<TDDIImplementationConstraint> val);

  void __set_Note(::apache::thrift::stdcxx::shared_ptr<TDDINote> val);

  void __set_TaggedValue(::apache::thrift::stdcxx::shared_ptr<TDDITaggedValue> val);

  bool operator == (const TDDIUtilityElementUnion & rhs) const
  {
    if (__isset.Description != rhs.__isset.Description)
      return false;
    else if (__isset.Description && !(Description == rhs.Description))
      return false;
    if (__isset.ImplementationConstraint != rhs.__isset.ImplementationConstraint)
      return false;
    else if (__isset.ImplementationConstraint && !(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (__isset.Note != rhs.__isset.Note)
      return false;
    else if (__isset.Note && !(Note == rhs.Note))
      return false;
    if (__isset.TaggedValue != rhs.__isset.TaggedValue)
      return false;
    else if (__isset.TaggedValue && !(TaggedValue == rhs.TaggedValue))
      return false;
    return true;
  }
  bool operator != (const TDDIUtilityElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIUtilityElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIUtilityElementUnion &a, TDDIUtilityElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIUtilityElementUnion& obj);

typedef struct _TDDIAbstractUtilityElement__isset {
  _TDDIAbstractUtilityElement__isset() : UsedUtilityElement(false), UsedUtilityElementType(false) {}
  bool UsedUtilityElement :1;
  bool UsedUtilityElementType :1;
} _TDDIAbstractUtilityElement__isset;

class TDDIAbstractUtilityElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractUtilityElement(const TDDIAbstractUtilityElement&);
  TDDIAbstractUtilityElement& operator=(const TDDIAbstractUtilityElement&);
  TDDIAbstractUtilityElement() : UsedUtilityElementType((TDDIUtilityElementUnionType)0) {
  }

  virtual ~TDDIAbstractUtilityElement() throw();
  TDDIUtilityElementUnion UsedUtilityElement;
  TDDIUtilityElementUnionType UsedUtilityElementType;

  _TDDIAbstractUtilityElement__isset __isset;

  void __set_UsedUtilityElement(const TDDIUtilityElementUnion& val);

  void __set_UsedUtilityElementType(const TDDIUtilityElementUnionType val);

  bool operator == (const TDDIAbstractUtilityElement & rhs) const
  {
    if (!(UsedUtilityElement == rhs.UsedUtilityElement))
      return false;
    if (!(UsedUtilityElementType == rhs.UsedUtilityElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractUtilityElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractUtilityElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractUtilityElement &a, TDDIAbstractUtilityElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractUtilityElement& obj);

typedef struct _TDDIArtifactElementUnion__isset {
  _TDDIArtifactElementUnion__isset() : TerminologyElement(false), AssuranceCasePackage(false), ArtifactPackage(false), ArtifactGroup(false), ArtifactAsset(false), ArgumentationElement(false) {}
  bool TerminologyElement :1;
  bool AssuranceCasePackage :1;
  bool ArtifactPackage :1;
  bool ArtifactGroup :1;
  bool ArtifactAsset :1;
  bool ArgumentationElement :1;
} _TDDIArtifactElementUnion__isset;

class TDDIArtifactElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIArtifactElementUnion(const TDDIArtifactElementUnion&);
  TDDIArtifactElementUnion& operator=(const TDDIArtifactElementUnion&);
  TDDIArtifactElementUnion() : TerminologyElement(), AssuranceCasePackage(), ArtifactPackage(), ArtifactGroup(), ArtifactAsset(), ArgumentationElement() {
  }

  virtual ~TDDIArtifactElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyElement> TerminologyElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> AssuranceCasePackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> ArtifactPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIArtifactGroup> ArtifactGroup;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> ArtifactAsset;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> ArgumentationElement;

  _TDDIArtifactElementUnion__isset __isset;

  void __set_TerminologyElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyElement> val);

  void __set_AssuranceCasePackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractAssuranceCasePackage> val);

  void __set_ArtifactPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactPackage> val);

  void __set_ArtifactGroup(::apache::thrift::stdcxx::shared_ptr<TDDIArtifactGroup> val);

  void __set_ArtifactAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactAsset> val);

  void __set_ArgumentationElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArgumentationElement> val);

  bool operator == (const TDDIArtifactElementUnion & rhs) const
  {
    if (__isset.TerminologyElement != rhs.__isset.TerminologyElement)
      return false;
    else if (__isset.TerminologyElement && !(TerminologyElement == rhs.TerminologyElement))
      return false;
    if (__isset.AssuranceCasePackage != rhs.__isset.AssuranceCasePackage)
      return false;
    else if (__isset.AssuranceCasePackage && !(AssuranceCasePackage == rhs.AssuranceCasePackage))
      return false;
    if (__isset.ArtifactPackage != rhs.__isset.ArtifactPackage)
      return false;
    else if (__isset.ArtifactPackage && !(ArtifactPackage == rhs.ArtifactPackage))
      return false;
    if (__isset.ArtifactGroup != rhs.__isset.ArtifactGroup)
      return false;
    else if (__isset.ArtifactGroup && !(ArtifactGroup == rhs.ArtifactGroup))
      return false;
    if (__isset.ArtifactAsset != rhs.__isset.ArtifactAsset)
      return false;
    else if (__isset.ArtifactAsset && !(ArtifactAsset == rhs.ArtifactAsset))
      return false;
    if (__isset.ArgumentationElement != rhs.__isset.ArgumentationElement)
      return false;
    else if (__isset.ArgumentationElement && !(ArgumentationElement == rhs.ArgumentationElement))
      return false;
    return true;
  }
  bool operator != (const TDDIArtifactElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIArtifactElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIArtifactElementUnion &a, TDDIArtifactElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIArtifactElementUnion& obj);

typedef struct _TDDIAbstractArtifactElement__isset {
  _TDDIAbstractArtifactElement__isset() : UsedArtifactElement(false), UsedArtifactElementType(false) {}
  bool UsedArtifactElement :1;
  bool UsedArtifactElementType :1;
} _TDDIAbstractArtifactElement__isset;

class TDDIAbstractArtifactElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractArtifactElement(const TDDIAbstractArtifactElement&);
  TDDIAbstractArtifactElement& operator=(const TDDIAbstractArtifactElement&);
  TDDIAbstractArtifactElement() : UsedArtifactElementType((TDDIArtifactElementUnionType)0) {
  }

  virtual ~TDDIAbstractArtifactElement() throw();
  TDDIArtifactElementUnion UsedArtifactElement;
  TDDIArtifactElementUnionType UsedArtifactElementType;

  _TDDIAbstractArtifactElement__isset __isset;

  void __set_UsedArtifactElement(const TDDIArtifactElementUnion& val);

  void __set_UsedArtifactElementType(const TDDIArtifactElementUnionType val);

  bool operator == (const TDDIAbstractArtifactElement & rhs) const
  {
    if (!(UsedArtifactElement == rhs.UsedArtifactElement))
      return false;
    if (!(UsedArtifactElementType == rhs.UsedArtifactElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractArtifactElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractArtifactElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractArtifactElement &a, TDDIAbstractArtifactElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractArtifactElement& obj);

typedef struct _TDDIModelElementUnion__isset {
  _TDDIModelElementUnion__isset() : ArtifactElement(false) {}
  bool ArtifactElement :1;
} _TDDIModelElementUnion__isset;

class TDDIModelElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIModelElementUnion(const TDDIModelElementUnion&);
  TDDIModelElementUnion& operator=(const TDDIModelElementUnion&);
  TDDIModelElementUnion() : ArtifactElement() {
  }

  virtual ~TDDIModelElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> ArtifactElement;

  _TDDIModelElementUnion__isset __isset;

  void __set_ArtifactElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractArtifactElement> val);

  bool operator == (const TDDIModelElementUnion & rhs) const
  {
    if (__isset.ArtifactElement != rhs.__isset.ArtifactElement)
      return false;
    else if (__isset.ArtifactElement && !(ArtifactElement == rhs.ArtifactElement))
      return false;
    return true;
  }
  bool operator != (const TDDIModelElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIModelElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIModelElementUnion &a, TDDIModelElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIModelElementUnion& obj);

typedef struct _TDDIAbstractModelElement__isset {
  _TDDIAbstractModelElement__isset() : UsedModelElement(false), UsedModelElementType(false) {}
  bool UsedModelElement :1;
  bool UsedModelElementType :1;
} _TDDIAbstractModelElement__isset;

class TDDIAbstractModelElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractModelElement(const TDDIAbstractModelElement&);
  TDDIAbstractModelElement& operator=(const TDDIAbstractModelElement&);
  TDDIAbstractModelElement() : UsedModelElementType((TDDIModelElementUnionType)0) {
  }

  virtual ~TDDIAbstractModelElement() throw();
  TDDIModelElementUnion UsedModelElement;
  TDDIModelElementUnionType UsedModelElementType;

  _TDDIAbstractModelElement__isset __isset;

  void __set_UsedModelElement(const TDDIModelElementUnion& val);

  void __set_UsedModelElementType(const TDDIModelElementUnionType val);

  bool operator == (const TDDIAbstractModelElement & rhs) const
  {
    if (!(UsedModelElement == rhs.UsedModelElement))
      return false;
    if (!(UsedModelElementType == rhs.UsedModelElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractModelElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractModelElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractModelElement &a, TDDIAbstractModelElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractModelElement& obj);

typedef struct _TDDISACMElementUnion__isset {
  _TDDISACMElementUnion__isset() : UtilityElement(false), ModelElement(false) {}
  bool UtilityElement :1;
  bool ModelElement :1;
} _TDDISACMElementUnion__isset;

class TDDISACMElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDISACMElementUnion(const TDDISACMElementUnion&);
  TDDISACMElementUnion& operator=(const TDDISACMElementUnion&);
  TDDISACMElementUnion() : UtilityElement(), ModelElement() {
  }

  virtual ~TDDISACMElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractUtilityElement> UtilityElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> ModelElement;

  _TDDISACMElementUnion__isset __isset;

  void __set_UtilityElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractUtilityElement> val);

  void __set_ModelElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> val);

  bool operator == (const TDDISACMElementUnion & rhs) const
  {
    if (__isset.UtilityElement != rhs.__isset.UtilityElement)
      return false;
    else if (__isset.UtilityElement && !(UtilityElement == rhs.UtilityElement))
      return false;
    if (__isset.ModelElement != rhs.__isset.ModelElement)
      return false;
    else if (__isset.ModelElement && !(ModelElement == rhs.ModelElement))
      return false;
    return true;
  }
  bool operator != (const TDDISACMElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISACMElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISACMElementUnion &a, TDDISACMElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDISACMElementUnion& obj);

typedef struct _TDDIAbstractSACMElement__isset {
  _TDDIAbstractSACMElement__isset() : UsedSACMElement(false), UsedSACMElementType(false) {}
  bool UsedSACMElement :1;
  bool UsedSACMElementType :1;
} _TDDIAbstractSACMElement__isset;

class TDDIAbstractSACMElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractSACMElement(const TDDIAbstractSACMElement&);
  TDDIAbstractSACMElement& operator=(const TDDIAbstractSACMElement&);
  TDDIAbstractSACMElement() : UsedSACMElementType((TDDISACMElementUnionType)0) {
  }

  virtual ~TDDIAbstractSACMElement() throw();
  TDDISACMElementUnion UsedSACMElement;
  TDDISACMElementUnionType UsedSACMElementType;

  _TDDIAbstractSACMElement__isset __isset;

  void __set_UsedSACMElement(const TDDISACMElementUnion& val);

  void __set_UsedSACMElementType(const TDDISACMElementUnionType val);

  bool operator == (const TDDIAbstractSACMElement & rhs) const
  {
    if (!(UsedSACMElement == rhs.UsedSACMElement))
      return false;
    if (!(UsedSACMElementType == rhs.UsedSACMElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractSACMElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractSACMElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractSACMElement &a, TDDIAbstractSACMElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractSACMElement& obj);

typedef struct _TDDIElementUnion__isset {
  _TDDIElementUnion__isset() : LangString(false), MultiLangString(false), SACMElement(false) {}
  bool LangString :1;
  bool MultiLangString :1;
  bool SACMElement :1;
} _TDDIElementUnion__isset;

class TDDIElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIElementUnion(const TDDIElementUnion&);
  TDDIElementUnion& operator=(const TDDIElementUnion&);
  TDDIElementUnion() : LangString(), MultiLangString(), SACMElement() {
  }

  virtual ~TDDIElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> LangString;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMultiLangString> MultiLangString;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> SACMElement;

  _TDDIElementUnion__isset __isset;

  void __set_LangString(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_MultiLangString(::apache::thrift::stdcxx::shared_ptr<TDDIMultiLangString> val);

  void __set_SACMElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  bool operator == (const TDDIElementUnion & rhs) const
  {
    if (__isset.LangString != rhs.__isset.LangString)
      return false;
    else if (__isset.LangString && !(LangString == rhs.LangString))
      return false;
    if (__isset.MultiLangString != rhs.__isset.MultiLangString)
      return false;
    else if (__isset.MultiLangString && !(MultiLangString == rhs.MultiLangString))
      return false;
    if (__isset.SACMElement != rhs.__isset.SACMElement)
      return false;
    else if (__isset.SACMElement && !(SACMElement == rhs.SACMElement))
      return false;
    return true;
  }
  bool operator != (const TDDIElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIElementUnion &a, TDDIElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIElementUnion& obj);

typedef struct _TDDIAbstractElement__isset {
  _TDDIAbstractElement__isset() : UsedElement(false), UsedElementType(false) {}
  bool UsedElement :1;
  bool UsedElementType :1;
} _TDDIAbstractElement__isset;

class TDDIAbstractElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractElement(const TDDIAbstractElement&);
  TDDIAbstractElement& operator=(const TDDIAbstractElement&);
  TDDIAbstractElement() : UsedElementType((TDDIElementUnionType)0) {
  }

  virtual ~TDDIAbstractElement() throw();
  TDDIElementUnion UsedElement;
  TDDIElementUnionType UsedElementType;

  _TDDIAbstractElement__isset __isset;

  void __set_UsedElement(const TDDIElementUnion& val);

  void __set_UsedElementType(const TDDIElementUnionType val);

  bool operator == (const TDDIAbstractElement & rhs) const
  {
    if (!(UsedElement == rhs.UsedElement))
      return false;
    if (!(UsedElementType == rhs.UsedElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractElement &a, TDDIAbstractElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractElement& obj);

typedef struct _TDDITerminologyElementUnion__isset {
  _TDDITerminologyElementUnion__isset() : TerminologyGroup(false), TerminologyPackage(false), TerminologyAsset(false) {}
  bool TerminologyGroup :1;
  bool TerminologyPackage :1;
  bool TerminologyAsset :1;
} _TDDITerminologyElementUnion__isset;

class TDDITerminologyElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyElementUnion(const TDDITerminologyElementUnion&);
  TDDITerminologyElementUnion& operator=(const TDDITerminologyElementUnion&);
  TDDITerminologyElementUnion() : TerminologyGroup(), TerminologyPackage(), TerminologyAsset() {
  }

  virtual ~TDDITerminologyElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyGroup> TerminologyGroup;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> TerminologyPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyAsset> TerminologyAsset;

  _TDDITerminologyElementUnion__isset __isset;

  void __set_TerminologyGroup(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyGroup> val);

  void __set_TerminologyPackage(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyPackage> val);

  void __set_TerminologyAsset(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractTerminologyAsset> val);

  bool operator == (const TDDITerminologyElementUnion & rhs) const
  {
    if (__isset.TerminologyGroup != rhs.__isset.TerminologyGroup)
      return false;
    else if (__isset.TerminologyGroup && !(TerminologyGroup == rhs.TerminologyGroup))
      return false;
    if (__isset.TerminologyPackage != rhs.__isset.TerminologyPackage)
      return false;
    else if (__isset.TerminologyPackage && !(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    if (__isset.TerminologyAsset != rhs.__isset.TerminologyAsset)
      return false;
    else if (__isset.TerminologyAsset && !(TerminologyAsset == rhs.TerminologyAsset))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyElementUnion &a, TDDITerminologyElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyElementUnion& obj);

typedef struct _TDDIAbstractTerminologyElement__isset {
  _TDDIAbstractTerminologyElement__isset() : UsedTerminologyElement(false), UsedTerminologyElementType(false) {}
  bool UsedTerminologyElement :1;
  bool UsedTerminologyElementType :1;
} _TDDIAbstractTerminologyElement__isset;

class TDDIAbstractTerminologyElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractTerminologyElement(const TDDIAbstractTerminologyElement&);
  TDDIAbstractTerminologyElement& operator=(const TDDIAbstractTerminologyElement&);
  TDDIAbstractTerminologyElement() : UsedTerminologyElementType((TDDITerminologyElementUnionType)0) {
  }

  virtual ~TDDIAbstractTerminologyElement() throw();
  TDDITerminologyElementUnion UsedTerminologyElement;
  TDDITerminologyElementUnionType UsedTerminologyElementType;

  _TDDIAbstractTerminologyElement__isset __isset;

  void __set_UsedTerminologyElement(const TDDITerminologyElementUnion& val);

  void __set_UsedTerminologyElementType(const TDDITerminologyElementUnionType val);

  bool operator == (const TDDIAbstractTerminologyElement & rhs) const
  {
    if (!(UsedTerminologyElement == rhs.UsedTerminologyElement))
      return false;
    if (!(UsedTerminologyElementType == rhs.UsedTerminologyElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractTerminologyElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractTerminologyElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractTerminologyElement &a, TDDIAbstractTerminologyElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyElement& obj);

typedef struct _TDDITerminologyGroup__isset {
  _TDDITerminologyGroup__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), TerminologyElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool TerminologyElement :1;
} _TDDITerminologyGroup__isset;

class TDDITerminologyGroup : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyGroup(const TDDITerminologyGroup&);
  TDDITerminologyGroup& operator=(const TDDITerminologyGroup&);
  TDDITerminologyGroup() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDITerminologyGroup() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractTerminologyElement>  TerminologyElement;

  _TDDITerminologyGroup__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val);

  bool operator == (const TDDITerminologyGroup & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(TerminologyElement == rhs.TerminologyElement))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyGroup &a, TDDITerminologyGroup &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyGroup& obj);

typedef struct _TDDITerminologyPackageUnion__isset {
  _TDDITerminologyPackageUnion__isset() : TerminologyPackage(false), TerminologyPackageBinding(false), TerminologyPackageInterface(false) {}
  bool TerminologyPackage :1;
  bool TerminologyPackageBinding :1;
  bool TerminologyPackageInterface :1;
} _TDDITerminologyPackageUnion__isset;

class TDDITerminologyPackageUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyPackageUnion(const TDDITerminologyPackageUnion&);
  TDDITerminologyPackageUnion& operator=(const TDDITerminologyPackageUnion&);
  TDDITerminologyPackageUnion() : TerminologyPackage(), TerminologyPackageBinding(), TerminologyPackageInterface() {
  }

  virtual ~TDDITerminologyPackageUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackage> TerminologyPackage;
  ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageBinding> TerminologyPackageBinding;
  ::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageInterface> TerminologyPackageInterface;

  _TDDITerminologyPackageUnion__isset __isset;

  void __set_TerminologyPackage(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackage> val);

  void __set_TerminologyPackageBinding(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageBinding> val);

  void __set_TerminologyPackageInterface(::apache::thrift::stdcxx::shared_ptr<TDDITerminologyPackageInterface> val);

  bool operator == (const TDDITerminologyPackageUnion & rhs) const
  {
    if (__isset.TerminologyPackage != rhs.__isset.TerminologyPackage)
      return false;
    else if (__isset.TerminologyPackage && !(TerminologyPackage == rhs.TerminologyPackage))
      return false;
    if (__isset.TerminologyPackageBinding != rhs.__isset.TerminologyPackageBinding)
      return false;
    else if (__isset.TerminologyPackageBinding && !(TerminologyPackageBinding == rhs.TerminologyPackageBinding))
      return false;
    if (__isset.TerminologyPackageInterface != rhs.__isset.TerminologyPackageInterface)
      return false;
    else if (__isset.TerminologyPackageInterface && !(TerminologyPackageInterface == rhs.TerminologyPackageInterface))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyPackageUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyPackageUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyPackageUnion &a, TDDITerminologyPackageUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageUnion& obj);

typedef struct _TDDIAbstractTerminologyPackage__isset {
  _TDDIAbstractTerminologyPackage__isset() : UsedTerminologyPackage(false), UsedTerminologyPackageType(false) {}
  bool UsedTerminologyPackage :1;
  bool UsedTerminologyPackageType :1;
} _TDDIAbstractTerminologyPackage__isset;

class TDDIAbstractTerminologyPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractTerminologyPackage(const TDDIAbstractTerminologyPackage&);
  TDDIAbstractTerminologyPackage& operator=(const TDDIAbstractTerminologyPackage&);
  TDDIAbstractTerminologyPackage() : UsedTerminologyPackageType((TDDITerminologyPackageUnionType)0) {
  }

  virtual ~TDDIAbstractTerminologyPackage() throw();
  TDDITerminologyPackageUnion UsedTerminologyPackage;
  TDDITerminologyPackageUnionType UsedTerminologyPackageType;

  _TDDIAbstractTerminologyPackage__isset __isset;

  void __set_UsedTerminologyPackage(const TDDITerminologyPackageUnion& val);

  void __set_UsedTerminologyPackageType(const TDDITerminologyPackageUnionType val);

  bool operator == (const TDDIAbstractTerminologyPackage & rhs) const
  {
    if (!(UsedTerminologyPackage == rhs.UsedTerminologyPackage))
      return false;
    if (!(UsedTerminologyPackageType == rhs.UsedTerminologyPackageType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractTerminologyPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractTerminologyPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractTerminologyPackage &a, TDDIAbstractTerminologyPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyPackage& obj);

typedef struct _TDDITerminologyPackage__isset {
  _TDDITerminologyPackage__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), TerminologyElement(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool TerminologyElement :1;
} _TDDITerminologyPackage__isset;

class TDDITerminologyPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyPackage(const TDDITerminologyPackage&);
  TDDITerminologyPackage& operator=(const TDDITerminologyPackage&);
  TDDITerminologyPackage() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDITerminologyPackage() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractTerminologyElement>  TerminologyElement;

  _TDDITerminologyPackage__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val);

  bool operator == (const TDDITerminologyPackage & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(TerminologyElement == rhs.TerminologyElement))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyPackage &a, TDDITerminologyPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackage& obj);

typedef struct _TDDITerminologyPackageBinding__isset {
  _TDDITerminologyPackageBinding__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), TerminologyElement(true), ParticipantPackage(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool TerminologyElement :1;
  bool ParticipantPackage :1;
} _TDDITerminologyPackageBinding__isset;

class TDDITerminologyPackageBinding : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyPackageBinding(const TDDITerminologyPackageBinding&);
  TDDITerminologyPackageBinding& operator=(const TDDITerminologyPackageBinding&);
  TDDITerminologyPackageBinding() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {





  }

  virtual ~TDDITerminologyPackageBinding() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractTerminologyElement>  TerminologyElement;
  std::vector<TDDIAbstractTerminologyPackage>  ParticipantPackage;

  _TDDITerminologyPackageBinding__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val);

  void __set_ParticipantPackage(const std::vector<TDDIAbstractTerminologyPackage> & val);

  bool operator == (const TDDITerminologyPackageBinding & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(TerminologyElement == rhs.TerminologyElement))
      return false;
    if (!(ParticipantPackage == rhs.ParticipantPackage))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyPackageBinding &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyPackageBinding & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyPackageBinding &a, TDDITerminologyPackageBinding &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageBinding& obj);

typedef struct _TDDITerminologyPackageInterface__isset {
  _TDDITerminologyPackageInterface__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), TerminologyElement(true), Implements(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool TerminologyElement :1;
  bool Implements :1;
} _TDDITerminologyPackageInterface__isset;

class TDDITerminologyPackageInterface : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyPackageInterface(const TDDITerminologyPackageInterface&);
  TDDITerminologyPackageInterface& operator=(const TDDITerminologyPackageInterface&);
  TDDITerminologyPackageInterface() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {




  }

  virtual ~TDDITerminologyPackageInterface() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::vector<TDDIAbstractTerminologyElement>  TerminologyElement;
  TDDIAbstractTerminologyPackage Implements;

  _TDDITerminologyPackageInterface__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_TerminologyElement(const std::vector<TDDIAbstractTerminologyElement> & val);

  void __set_Implements(const TDDIAbstractTerminologyPackage& val);

  bool operator == (const TDDITerminologyPackageInterface & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(TerminologyElement == rhs.TerminologyElement))
      return false;
    if (!(Implements == rhs.Implements))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyPackageInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyPackageInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyPackageInterface &a, TDDITerminologyPackageInterface &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyPackageInterface& obj);

typedef struct _TDDICategory__isset {
  _TDDICategory__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
} _TDDICategory__isset;

class TDDICategory : public virtual ::apache::thrift::TBase {
 public:

  TDDICategory(const TDDICategory&);
  TDDICategory& operator=(const TDDICategory&);
  TDDICategory() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description() {



  }

  virtual ~TDDICategory() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;

  _TDDICategory__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  bool operator == (const TDDICategory & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    return true;
  }
  bool operator != (const TDDICategory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDICategory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDICategory &a, TDDICategory &b);

std::ostream& operator<<(std::ostream& out, const TDDICategory& obj);

typedef struct _TDDIExpression__isset {
  _TDDIExpression__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Value(true), Categories(true), Element(true) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Value :1;
  bool Categories :1;
  bool Element :1;
} _TDDIExpression__isset;

class TDDIExpression : public virtual ::apache::thrift::TBase {
 public:

  TDDIExpression(const TDDIExpression&);
  TDDIExpression& operator=(const TDDIExpression&);
  TDDIExpression() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), Value("") {





  }

  virtual ~TDDIExpression() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::string Value;
  std::vector<TDDICategoryRef>  Categories;
  std::vector<TDDIAbstractExpressionElementRef>  Element;

  _TDDIExpression__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Value(const std::string& val);

  void __set_Categories(const std::vector<TDDICategoryRef> & val);

  void __set_Element(const std::vector<TDDIAbstractExpressionElementRef> & val);

  bool operator == (const TDDIExpression & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Categories == rhs.Categories))
      return false;
    if (!(Element == rhs.Element))
      return false;
    return true;
  }
  bool operator != (const TDDIExpression &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIExpression & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIExpression &a, TDDIExpression &b);

std::ostream& operator<<(std::ostream& out, const TDDIExpression& obj);

typedef struct _TDDITerm__isset {
  _TDDITerm__isset() : Gid(true), IsCitation(true), IsAbstract(true), CitedElement(false), AbstractForm(false), Name(false), Description(false), ImplementationConstraint(true), Note(true), TaggedValue(true), Value(true), Category(false), ExternalReference(true), Origin(false) {}
  bool Gid :1;
  bool IsCitation :1;
  bool IsAbstract :1;
  bool CitedElement :1;
  bool AbstractForm :1;
  bool Name :1;
  bool Description :1;
  bool ImplementationConstraint :1;
  bool Note :1;
  bool TaggedValue :1;
  bool Value :1;
  bool Category :1;
  bool ExternalReference :1;
  bool Origin :1;
} _TDDITerm__isset;

class TDDITerm : public virtual ::apache::thrift::TBase {
 public:

  TDDITerm(const TDDITerm&);
  TDDITerm& operator=(const TDDITerm&);
  TDDITerm() : Gid(""), IsCitation(false), IsAbstract(false), CitedElement(), AbstractForm(), Name(), Description(), Value(""), ExternalReference(""), Origin() {



  }

  virtual ~TDDITerm() throw();
  std::string Gid;
  bool IsCitation;
  bool IsAbstract;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> CitedElement;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> AbstractForm;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> Name;
  ::apache::thrift::stdcxx::shared_ptr<TDDIDescription> Description;
  std::vector<TDDIImplementationConstraintRef>  ImplementationConstraint;
  std::vector<TDDINoteRef>  Note;
  std::vector<TDDITaggedValueRef>  TaggedValue;
  std::string Value;
  std::vector<TDDICategoryRef>  Category;
  std::string ExternalReference;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> Origin;

  _TDDITerm__isset __isset;

  void __set_Gid(const std::string& val);

  void __set_IsCitation(const bool val);

  void __set_IsAbstract(const bool val);

  void __set_CitedElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_AbstractForm(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractSACMElement> val);

  void __set_Name(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractLangString> val);

  void __set_Description(::apache::thrift::stdcxx::shared_ptr<TDDIDescription> val);

  void __set_ImplementationConstraint(const std::vector<TDDIImplementationConstraintRef> & val);

  void __set_Note(const std::vector<TDDINoteRef> & val);

  void __set_TaggedValue(const std::vector<TDDITaggedValueRef> & val);

  void __set_Value(const std::string& val);

  void __set_Category(const std::vector<TDDICategoryRef> & val);

  void __set_ExternalReference(const std::string& val);

  void __set_Origin(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractModelElement> val);

  bool operator == (const TDDITerm & rhs) const
  {
    if (!(Gid == rhs.Gid))
      return false;
    if (!(IsCitation == rhs.IsCitation))
      return false;
    if (!(IsAbstract == rhs.IsAbstract))
      return false;
    if (!(CitedElement == rhs.CitedElement))
      return false;
    if (!(AbstractForm == rhs.AbstractForm))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(ImplementationConstraint == rhs.ImplementationConstraint))
      return false;
    if (!(Note == rhs.Note))
      return false;
    if (!(TaggedValue == rhs.TaggedValue))
      return false;
    if (!(Value == rhs.Value))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(ExternalReference == rhs.ExternalReference))
      return false;
    if (!(Origin == rhs.Origin))
      return false;
    return true;
  }
  bool operator != (const TDDITerm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerm &a, TDDITerm &b);

std::ostream& operator<<(std::ostream& out, const TDDITerm& obj);

typedef struct _TDDIExpressionElementUnion__isset {
  _TDDIExpressionElementUnion__isset() : Expression(false), Term(false) {}
  bool Expression :1;
  bool Term :1;
} _TDDIExpressionElementUnion__isset;

class TDDIExpressionElementUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIExpressionElementUnion(const TDDIExpressionElementUnion&);
  TDDIExpressionElementUnion& operator=(const TDDIExpressionElementUnion&);
  TDDIExpressionElementUnion() : Expression(), Term() {
  }

  virtual ~TDDIExpressionElementUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIExpression> Expression;
  ::apache::thrift::stdcxx::shared_ptr<TDDITerm> Term;

  _TDDIExpressionElementUnion__isset __isset;

  void __set_Expression(::apache::thrift::stdcxx::shared_ptr<TDDIExpression> val);

  void __set_Term(::apache::thrift::stdcxx::shared_ptr<TDDITerm> val);

  bool operator == (const TDDIExpressionElementUnion & rhs) const
  {
    if (__isset.Expression != rhs.__isset.Expression)
      return false;
    else if (__isset.Expression && !(Expression == rhs.Expression))
      return false;
    if (__isset.Term != rhs.__isset.Term)
      return false;
    else if (__isset.Term && !(Term == rhs.Term))
      return false;
    return true;
  }
  bool operator != (const TDDIExpressionElementUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIExpressionElementUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIExpressionElementUnion &a, TDDIExpressionElementUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIExpressionElementUnion& obj);

typedef struct _TDDIAbstractExpressionElement__isset {
  _TDDIAbstractExpressionElement__isset() : UsedExpressionElement(false), UsedExpressionElementType(false) {}
  bool UsedExpressionElement :1;
  bool UsedExpressionElementType :1;
} _TDDIAbstractExpressionElement__isset;

class TDDIAbstractExpressionElement : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractExpressionElement(const TDDIAbstractExpressionElement&);
  TDDIAbstractExpressionElement& operator=(const TDDIAbstractExpressionElement&);
  TDDIAbstractExpressionElement() : UsedExpressionElementType((TDDIExpressionElementUnionType)0) {
  }

  virtual ~TDDIAbstractExpressionElement() throw();
  TDDIExpressionElementUnion UsedExpressionElement;
  TDDIExpressionElementUnionType UsedExpressionElementType;

  _TDDIAbstractExpressionElement__isset __isset;

  void __set_UsedExpressionElement(const TDDIExpressionElementUnion& val);

  void __set_UsedExpressionElementType(const TDDIExpressionElementUnionType val);

  bool operator == (const TDDIAbstractExpressionElement & rhs) const
  {
    if (!(UsedExpressionElement == rhs.UsedExpressionElement))
      return false;
    if (!(UsedExpressionElementType == rhs.UsedExpressionElementType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractExpressionElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractExpressionElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractExpressionElement &a, TDDIAbstractExpressionElement &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractExpressionElement& obj);

typedef struct _TDDITerminologyAssetUnion__isset {
  _TDDITerminologyAssetUnion__isset() : Category(false), ExpressionElement(false) {}
  bool Category :1;
  bool ExpressionElement :1;
} _TDDITerminologyAssetUnion__isset;

class TDDITerminologyAssetUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDITerminologyAssetUnion(const TDDITerminologyAssetUnion&);
  TDDITerminologyAssetUnion& operator=(const TDDITerminologyAssetUnion&);
  TDDITerminologyAssetUnion() : Category(), ExpressionElement() {
  }

  virtual ~TDDITerminologyAssetUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDICategory> Category;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> ExpressionElement;

  _TDDITerminologyAssetUnion__isset __isset;

  void __set_Category(::apache::thrift::stdcxx::shared_ptr<TDDICategory> val);

  void __set_ExpressionElement(::apache::thrift::stdcxx::shared_ptr<TDDIAbstractExpressionElement> val);

  bool operator == (const TDDITerminologyAssetUnion & rhs) const
  {
    if (__isset.Category != rhs.__isset.Category)
      return false;
    else if (__isset.Category && !(Category == rhs.Category))
      return false;
    if (__isset.ExpressionElement != rhs.__isset.ExpressionElement)
      return false;
    else if (__isset.ExpressionElement && !(ExpressionElement == rhs.ExpressionElement))
      return false;
    return true;
  }
  bool operator != (const TDDITerminologyAssetUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITerminologyAssetUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITerminologyAssetUnion &a, TDDITerminologyAssetUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDITerminologyAssetUnion& obj);

typedef struct _TDDIAbstractTerminologyAsset__isset {
  _TDDIAbstractTerminologyAsset__isset() : UsedTerminologyAsset(false), UsedTerminologyAssetType(false) {}
  bool UsedTerminologyAsset :1;
  bool UsedTerminologyAssetType :1;
} _TDDIAbstractTerminologyAsset__isset;

class TDDIAbstractTerminologyAsset : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractTerminologyAsset(const TDDIAbstractTerminologyAsset&);
  TDDIAbstractTerminologyAsset& operator=(const TDDIAbstractTerminologyAsset&);
  TDDIAbstractTerminologyAsset() : UsedTerminologyAssetType((TDDITerminologyAssetUnionType)0) {
  }

  virtual ~TDDIAbstractTerminologyAsset() throw();
  TDDITerminologyAssetUnion UsedTerminologyAsset;
  TDDITerminologyAssetUnionType UsedTerminologyAssetType;

  _TDDIAbstractTerminologyAsset__isset __isset;

  void __set_UsedTerminologyAsset(const TDDITerminologyAssetUnion& val);

  void __set_UsedTerminologyAssetType(const TDDITerminologyAssetUnionType val);

  bool operator == (const TDDIAbstractTerminologyAsset & rhs) const
  {
    if (!(UsedTerminologyAsset == rhs.UsedTerminologyAsset))
      return false;
    if (!(UsedTerminologyAssetType == rhs.UsedTerminologyAssetType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractTerminologyAsset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractTerminologyAsset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractTerminologyAsset &a, TDDIAbstractTerminologyAsset &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractTerminologyAsset& obj);

typedef struct _TDDIAbstractEpsilonScriptExecutionException__isset {
  _TDDIAbstractEpsilonScriptExecutionException__isset() : UsedException(false), UsedExceptionType(false) {}
  bool UsedException :1;
  bool UsedExceptionType :1;
} _TDDIAbstractEpsilonScriptExecutionException__isset;

class TDDIAbstractEpsilonScriptExecutionException : public ::apache::thrift::TException {
 public:

  TDDIAbstractEpsilonScriptExecutionException(const TDDIAbstractEpsilonScriptExecutionException&);
  TDDIAbstractEpsilonScriptExecutionException& operator=(const TDDIAbstractEpsilonScriptExecutionException&);
  TDDIAbstractEpsilonScriptExecutionException() : UsedExceptionType((TDDIEpsilonScriptExecutionExceptionUnionType)0) {
  }

  virtual ~TDDIAbstractEpsilonScriptExecutionException() throw();
  TDDIEpsilonScriptExecutionExceptionUnion UsedException;
  TDDIEpsilonScriptExecutionExceptionUnionType UsedExceptionType;

  _TDDIAbstractEpsilonScriptExecutionException__isset __isset;

  void __set_UsedException(const TDDIEpsilonScriptExecutionExceptionUnion& val);

  void __set_UsedExceptionType(const TDDIEpsilonScriptExecutionExceptionUnionType val);

  bool operator == (const TDDIAbstractEpsilonScriptExecutionException & rhs) const
  {
    if (!(UsedException == rhs.UsedException))
      return false;
    if (!(UsedExceptionType == rhs.UsedExceptionType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractEpsilonScriptExecutionException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractEpsilonScriptExecutionException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(TDDIAbstractEpsilonScriptExecutionException &a, TDDIAbstractEpsilonScriptExecutionException &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractEpsilonScriptExecutionException& obj);

typedef struct _TDDIEpsilonScriptExecutionExceptionUnion__isset {
  _TDDIEpsilonScriptExecutionExceptionUnion__isset() : ValidationFailedException(false), EpsilonScriptExecutionException(false) {}
  bool ValidationFailedException :1;
  bool EpsilonScriptExecutionException :1;
} _TDDIEpsilonScriptExecutionExceptionUnion__isset;

class TDDIEpsilonScriptExecutionExceptionUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIEpsilonScriptExecutionExceptionUnion(const TDDIEpsilonScriptExecutionExceptionUnion&);
  TDDIEpsilonScriptExecutionExceptionUnion& operator=(const TDDIEpsilonScriptExecutionExceptionUnion&);
  TDDIEpsilonScriptExecutionExceptionUnion() : ValidationFailedException(), EpsilonScriptExecutionException() {
  }

  virtual ~TDDIEpsilonScriptExecutionExceptionUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIValidationFailedException> ValidationFailedException;
  ::apache::thrift::stdcxx::shared_ptr<TDDIEpsilonScriptExecutionException> EpsilonScriptExecutionException;

  _TDDIEpsilonScriptExecutionExceptionUnion__isset __isset;

  void __set_ValidationFailedException(::apache::thrift::stdcxx::shared_ptr<TDDIValidationFailedException> val);

  void __set_EpsilonScriptExecutionException(::apache::thrift::stdcxx::shared_ptr<TDDIEpsilonScriptExecutionException> val);

  bool operator == (const TDDIEpsilonScriptExecutionExceptionUnion & rhs) const
  {
    if (__isset.ValidationFailedException != rhs.__isset.ValidationFailedException)
      return false;
    else if (__isset.ValidationFailedException && !(ValidationFailedException == rhs.ValidationFailedException))
      return false;
    if (__isset.EpsilonScriptExecutionException != rhs.__isset.EpsilonScriptExecutionException)
      return false;
    else if (__isset.EpsilonScriptExecutionException && !(EpsilonScriptExecutionException == rhs.EpsilonScriptExecutionException))
      return false;
    return true;
  }
  bool operator != (const TDDIEpsilonScriptExecutionExceptionUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIEpsilonScriptExecutionExceptionUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIEpsilonScriptExecutionExceptionUnion &a, TDDIEpsilonScriptExecutionExceptionUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptExecutionExceptionUnion& obj);

typedef struct _TDDIEpsilonScriptExecutionException__isset {
  _TDDIEpsilonScriptExecutionException__isset() : Message(true) {}
  bool Message :1;
} _TDDIEpsilonScriptExecutionException__isset;

class TDDIEpsilonScriptExecutionException : public virtual ::apache::thrift::TBase {
 public:

  TDDIEpsilonScriptExecutionException(const TDDIEpsilonScriptExecutionException&);
  TDDIEpsilonScriptExecutionException& operator=(const TDDIEpsilonScriptExecutionException&);
  TDDIEpsilonScriptExecutionException() : Message("") {
  }

  virtual ~TDDIEpsilonScriptExecutionException() throw();
  std::string Message;

  _TDDIEpsilonScriptExecutionException__isset __isset;

  void __set_Message(const std::string& val);

  bool operator == (const TDDIEpsilonScriptExecutionException & rhs) const
  {
    if (!(Message == rhs.Message))
      return false;
    return true;
  }
  bool operator != (const TDDIEpsilonScriptExecutionException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIEpsilonScriptExecutionException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIEpsilonScriptExecutionException &a, TDDIEpsilonScriptExecutionException &b);

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptExecutionException& obj);

typedef struct _TDDIValidationFailedException__isset {
  _TDDIValidationFailedException__isset() : ValidationResult(false) {}
  bool ValidationResult :1;
} _TDDIValidationFailedException__isset;

class TDDIValidationFailedException : public virtual ::apache::thrift::TBase {
 public:

  TDDIValidationFailedException(const TDDIValidationFailedException&);
  TDDIValidationFailedException& operator=(const TDDIValidationFailedException&);
  TDDIValidationFailedException() {
  }

  virtual ~TDDIValidationFailedException() throw();
  TDDIValidationResult ValidationResult;

  _TDDIValidationFailedException__isset __isset;

  void __set_ValidationResult(const TDDIValidationResult& val);

  bool operator == (const TDDIValidationFailedException & rhs) const
  {
    if (!(ValidationResult == rhs.ValidationResult))
      return false;
    return true;
  }
  bool operator != (const TDDIValidationFailedException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIValidationFailedException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIValidationFailedException &a, TDDIValidationFailedException &b);

std::ostream& operator<<(std::ostream& out, const TDDIValidationFailedException& obj);

typedef struct _TDDIValidationResult__isset {
  _TDDIValidationResult__isset() : ValidationViolationOccurred(true), ValidationViolationMessages(true) {}
  bool ValidationViolationOccurred :1;
  bool ValidationViolationMessages :1;
} _TDDIValidationResult__isset;

class TDDIValidationResult : public virtual ::apache::thrift::TBase {
 public:

  TDDIValidationResult(const TDDIValidationResult&);
  TDDIValidationResult& operator=(const TDDIValidationResult&);
  TDDIValidationResult() : ValidationViolationOccurred(false) {

  }

  virtual ~TDDIValidationResult() throw();
  bool ValidationViolationOccurred;
  std::vector<TDDIValidationViolationMessage>  ValidationViolationMessages;

  _TDDIValidationResult__isset __isset;

  void __set_ValidationViolationOccurred(const bool val);

  void __set_ValidationViolationMessages(const std::vector<TDDIValidationViolationMessage> & val);

  bool operator == (const TDDIValidationResult & rhs) const
  {
    if (!(ValidationViolationOccurred == rhs.ValidationViolationOccurred))
      return false;
    if (!(ValidationViolationMessages == rhs.ValidationViolationMessages))
      return false;
    return true;
  }
  bool operator != (const TDDIValidationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIValidationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIValidationResult &a, TDDIValidationResult &b);

std::ostream& operator<<(std::ostream& out, const TDDIValidationResult& obj);

typedef struct _TDDIValidationViolationMessage__isset {
  _TDDIValidationViolationMessage__isset() : Context(true), Message(true) {}
  bool Context :1;
  bool Message :1;
} _TDDIValidationViolationMessage__isset;

class TDDIValidationViolationMessage : public virtual ::apache::thrift::TBase {
 public:

  TDDIValidationViolationMessage(const TDDIValidationViolationMessage&);
  TDDIValidationViolationMessage& operator=(const TDDIValidationViolationMessage&);
  TDDIValidationViolationMessage() : Context(""), Message("") {
  }

  virtual ~TDDIValidationViolationMessage() throw();
  std::string Context;
  std::string Message;

  _TDDIValidationViolationMessage__isset __isset;

  void __set_Context(const std::string& val);

  void __set_Message(const std::string& val);

  bool operator == (const TDDIValidationViolationMessage & rhs) const
  {
    if (!(Context == rhs.Context))
      return false;
    if (!(Message == rhs.Message))
      return false;
    return true;
  }
  bool operator != (const TDDIValidationViolationMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIValidationViolationMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIValidationViolationMessage &a, TDDIValidationViolationMessage &b);

std::ostream& operator<<(std::ostream& out, const TDDIValidationViolationMessage& obj);

typedef struct _TDDIServiceConfig__isset {
  _TDDIServiceConfig__isset() : DDIFilePath(true), EpsilonScriptExecutionConfig(true) {}
  bool DDIFilePath :1;
  bool EpsilonScriptExecutionConfig :1;
} _TDDIServiceConfig__isset;

class TDDIServiceConfig : public virtual ::apache::thrift::TBase {
 public:

  TDDIServiceConfig(const TDDIServiceConfig&);
  TDDIServiceConfig& operator=(const TDDIServiceConfig&);
  TDDIServiceConfig() : DDIFilePath("") {

  }

  virtual ~TDDIServiceConfig() throw();
  std::string DDIFilePath;
  std::vector<TDDIEpsilonScriptExecutionConfig>  EpsilonScriptExecutionConfig;

  _TDDIServiceConfig__isset __isset;

  void __set_DDIFilePath(const std::string& val);

  void __set_EpsilonScriptExecutionConfig(const std::vector<TDDIEpsilonScriptExecutionConfig> & val);

  bool operator == (const TDDIServiceConfig & rhs) const
  {
    if (!(DDIFilePath == rhs.DDIFilePath))
      return false;
    if (!(EpsilonScriptExecutionConfig == rhs.EpsilonScriptExecutionConfig))
      return false;
    return true;
  }
  bool operator != (const TDDIServiceConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIServiceConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIServiceConfig &a, TDDIServiceConfig &b);

std::ostream& operator<<(std::ostream& out, const TDDIServiceConfig& obj);

typedef struct _TDDIEpsilonScriptExecutionConfig__isset {
  _TDDIEpsilonScriptExecutionConfig__isset() : ScriptFilePath(true), ScriptContent(true), ExecuteWithScriptFile(false), EpsilonLanguage(false), ModelConfigs(true), ExportParameters(true), ImportParameters(true), VariableNameOfReturnValue(true) {}
  bool ScriptFilePath :1;
  bool ScriptContent :1;
  bool ExecuteWithScriptFile :1;
  bool EpsilonLanguage :1;
  bool ModelConfigs :1;
  bool ExportParameters :1;
  bool ImportParameters :1;
  bool VariableNameOfReturnValue :1;
} _TDDIEpsilonScriptExecutionConfig__isset;

class TDDIEpsilonScriptExecutionConfig : public virtual ::apache::thrift::TBase {
 public:

  TDDIEpsilonScriptExecutionConfig(const TDDIEpsilonScriptExecutionConfig&);
  TDDIEpsilonScriptExecutionConfig& operator=(const TDDIEpsilonScriptExecutionConfig&);
  TDDIEpsilonScriptExecutionConfig() : ScriptFilePath(""), ScriptContent(""), ExecuteWithScriptFile(0), EpsilonLanguage((TDDIEpsilonLanguage)0), VariableNameOfReturnValue("") {



  }

  virtual ~TDDIEpsilonScriptExecutionConfig() throw();
  std::string ScriptFilePath;
  std::string ScriptContent;
  bool ExecuteWithScriptFile;
  TDDIEpsilonLanguage EpsilonLanguage;
  std::vector<TDDIEpsilonScriptModelConfig>  ModelConfigs;
  std::vector<TDDIEpsilonParameter>  ExportParameters;
  std::vector<TDDIEpsilonParameter>  ImportParameters;
  std::string VariableNameOfReturnValue;

  _TDDIEpsilonScriptExecutionConfig__isset __isset;

  void __set_ScriptFilePath(const std::string& val);

  void __set_ScriptContent(const std::string& val);

  void __set_ExecuteWithScriptFile(const bool val);

  void __set_EpsilonLanguage(const TDDIEpsilonLanguage val);

  void __set_ModelConfigs(const std::vector<TDDIEpsilonScriptModelConfig> & val);

  void __set_ExportParameters(const std::vector<TDDIEpsilonParameter> & val);

  void __set_ImportParameters(const std::vector<TDDIEpsilonParameter> & val);

  void __set_VariableNameOfReturnValue(const std::string& val);

  bool operator == (const TDDIEpsilonScriptExecutionConfig & rhs) const
  {
    if (!(ScriptFilePath == rhs.ScriptFilePath))
      return false;
    if (!(ScriptContent == rhs.ScriptContent))
      return false;
    if (!(ExecuteWithScriptFile == rhs.ExecuteWithScriptFile))
      return false;
    if (!(EpsilonLanguage == rhs.EpsilonLanguage))
      return false;
    if (!(ModelConfigs == rhs.ModelConfigs))
      return false;
    if (!(ExportParameters == rhs.ExportParameters))
      return false;
    if (!(ImportParameters == rhs.ImportParameters))
      return false;
    if (!(VariableNameOfReturnValue == rhs.VariableNameOfReturnValue))
      return false;
    return true;
  }
  bool operator != (const TDDIEpsilonScriptExecutionConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIEpsilonScriptExecutionConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIEpsilonScriptExecutionConfig &a, TDDIEpsilonScriptExecutionConfig &b);

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptExecutionConfig& obj);

typedef struct _TDDIEpsilonScriptModelConfig__isset {
  _TDDIEpsilonScriptModelConfig__isset() : ModelUri(true), ModelName(true), Alias(true), ReadOnLoad(false), StoreOnDisposal(false) {}
  bool ModelUri :1;
  bool ModelName :1;
  bool Alias :1;
  bool ReadOnLoad :1;
  bool StoreOnDisposal :1;
} _TDDIEpsilonScriptModelConfig__isset;

class TDDIEpsilonScriptModelConfig : public virtual ::apache::thrift::TBase {
 public:

  TDDIEpsilonScriptModelConfig(const TDDIEpsilonScriptModelConfig&);
  TDDIEpsilonScriptModelConfig& operator=(const TDDIEpsilonScriptModelConfig&);
  TDDIEpsilonScriptModelConfig() : ModelUri(""), ModelName(""), Alias(""), ReadOnLoad(0), StoreOnDisposal(0) {
  }

  virtual ~TDDIEpsilonScriptModelConfig() throw();
  std::string ModelUri;
  std::string ModelName;
  std::string Alias;
  bool ReadOnLoad;
  bool StoreOnDisposal;

  _TDDIEpsilonScriptModelConfig__isset __isset;

  void __set_ModelUri(const std::string& val);

  void __set_ModelName(const std::string& val);

  void __set_Alias(const std::string& val);

  void __set_ReadOnLoad(const bool val);

  void __set_StoreOnDisposal(const bool val);

  bool operator == (const TDDIEpsilonScriptModelConfig & rhs) const
  {
    if (!(ModelUri == rhs.ModelUri))
      return false;
    if (!(ModelName == rhs.ModelName))
      return false;
    if (!(Alias == rhs.Alias))
      return false;
    if (!(ReadOnLoad == rhs.ReadOnLoad))
      return false;
    if (!(StoreOnDisposal == rhs.StoreOnDisposal))
      return false;
    return true;
  }
  bool operator != (const TDDIEpsilonScriptModelConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIEpsilonScriptModelConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIEpsilonScriptModelConfig &a, TDDIEpsilonScriptModelConfig &b);

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonScriptModelConfig& obj);

typedef struct _TDDIEpsilonParameter__isset {
  _TDDIEpsilonParameter__isset() : Name(true), Alias(true) {}
  bool Name :1;
  bool Alias :1;
} _TDDIEpsilonParameter__isset;

class TDDIEpsilonParameter : public virtual ::apache::thrift::TBase {
 public:

  TDDIEpsilonParameter(const TDDIEpsilonParameter&);
  TDDIEpsilonParameter& operator=(const TDDIEpsilonParameter&);
  TDDIEpsilonParameter() : Name(""), Alias("") {
  }

  virtual ~TDDIEpsilonParameter() throw();
  std::string Name;
  std::string Alias;

  _TDDIEpsilonParameter__isset __isset;

  void __set_Name(const std::string& val);

  void __set_Alias(const std::string& val);

  bool operator == (const TDDIEpsilonParameter & rhs) const
  {
    if (!(Name == rhs.Name))
      return false;
    if (!(Alias == rhs.Alias))
      return false;
    return true;
  }
  bool operator != (const TDDIEpsilonParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIEpsilonParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIEpsilonParameter &a, TDDIEpsilonParameter &b);

std::ostream& operator<<(std::ostream& out, const TDDIEpsilonParameter& obj);

typedef struct _TDDIExternalServiceParameter__isset {
  _TDDIExternalServiceParameter__isset() : Name(true), Value(false) {}
  bool Name :1;
  bool Value :1;
} _TDDIExternalServiceParameter__isset;

class TDDIExternalServiceParameter : public virtual ::apache::thrift::TBase {
 public:

  TDDIExternalServiceParameter(const TDDIExternalServiceParameter&);
  TDDIExternalServiceParameter& operator=(const TDDIExternalServiceParameter&);
  TDDIExternalServiceParameter() : Name(""), Value() {
  }

  virtual ~TDDIExternalServiceParameter() throw();
  std::string Name;
  std::string Value;

  _TDDIExternalServiceParameter__isset __isset;

  void __set_Name(const std::string& val);

  void __set_Value(const std::string& val);

  bool operator == (const TDDIExternalServiceParameter & rhs) const
  {
    if (!(Name == rhs.Name))
      return false;
    if (!(Value == rhs.Value))
      return false;
    return true;
  }
  bool operator != (const TDDIExternalServiceParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIExternalServiceParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIExternalServiceParameter &a, TDDIExternalServiceParameter &b);

std::ostream& operator<<(std::ostream& out, const TDDIExternalServiceParameter& obj);

typedef struct _TDDIVulnerability__isset {
  _TDDIVulnerability__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Category(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Category :1;
} _TDDIVulnerability__isset;

class TDDIVulnerability : public virtual ::apache::thrift::TBase {
 public:

  TDDIVulnerability(const TDDIVulnerability&);
  TDDIVulnerability& operator=(const TDDIVulnerability&);
  TDDIVulnerability() : Id(0), Name(""), Description(""), Category("") {

  }

  virtual ~TDDIVulnerability() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Category;

  _TDDIVulnerability__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Category(const std::string& val);

  bool operator == (const TDDIVulnerability & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Category == rhs.Category))
      return false;
    return true;
  }
  bool operator != (const TDDIVulnerability &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIVulnerability & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIVulnerability &a, TDDIVulnerability &b);

std::ostream& operator<<(std::ostream& out, const TDDIVulnerability& obj);

typedef struct _TDDIAsset__isset {
  _TDDIAsset__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), FinancialValue(true), FinancialCostType(true), OperationalCost(true), OperationalCostType(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool FinancialValue :1;
  bool FinancialCostType :1;
  bool OperationalCost :1;
  bool OperationalCostType :1;
} _TDDIAsset__isset;

class TDDIAsset : public virtual ::apache::thrift::TBase {
 public:

  TDDIAsset(const TDDIAsset&);
  TDDIAsset& operator=(const TDDIAsset&);
  TDDIAsset() : Id(0), Name(""), Description(""), FinancialValue(0), FinancialCostType((TDDIFinancialCostType)1), OperationalCost(0), OperationalCostType((TDDIOperationalCostType)1) {

    FinancialCostType = (TDDIFinancialCostType)1;

    OperationalCostType = (TDDIOperationalCostType)1;

  }

  virtual ~TDDIAsset() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double FinancialValue;
  TDDIFinancialCostType FinancialCostType;
  double OperationalCost;
  TDDIOperationalCostType OperationalCostType;

  _TDDIAsset__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_FinancialValue(const double val);

  void __set_FinancialCostType(const TDDIFinancialCostType val);

  void __set_OperationalCost(const double val);

  void __set_OperationalCostType(const TDDIOperationalCostType val);

  bool operator == (const TDDIAsset & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(FinancialValue == rhs.FinancialValue))
      return false;
    if (!(FinancialCostType == rhs.FinancialCostType))
      return false;
    if (!(OperationalCost == rhs.OperationalCost))
      return false;
    if (!(OperationalCostType == rhs.OperationalCostType))
      return false;
    return true;
  }
  bool operator != (const TDDIAsset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAsset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAsset &a, TDDIAsset &b);

std::ostream& operator<<(std::ostream& out, const TDDIAsset& obj);

typedef struct _TDDIVulnerableItem__isset {
  _TDDIVulnerableItem__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), FinancialValue(true), FinancialCostType(true), OperationalCost(true), OperationalCostType(true), Vulnerabilities(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool FinancialValue :1;
  bool FinancialCostType :1;
  bool OperationalCost :1;
  bool OperationalCostType :1;
  bool Vulnerabilities :1;
} _TDDIVulnerableItem__isset;

class TDDIVulnerableItem : public virtual ::apache::thrift::TBase {
 public:

  TDDIVulnerableItem(const TDDIVulnerableItem&);
  TDDIVulnerableItem& operator=(const TDDIVulnerableItem&);
  TDDIVulnerableItem() : Id(0), Name(""), Description(""), FinancialValue(0), FinancialCostType((TDDIFinancialCostType)1), OperationalCost(0), OperationalCostType((TDDIOperationalCostType)1) {

    FinancialCostType = (TDDIFinancialCostType)1;

    OperationalCostType = (TDDIOperationalCostType)1;


  }

  virtual ~TDDIVulnerableItem() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double FinancialValue;
  TDDIFinancialCostType FinancialCostType;
  double OperationalCost;
  TDDIOperationalCostType OperationalCostType;
  std::vector<TDDIVulnerability>  Vulnerabilities;

  _TDDIVulnerableItem__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_FinancialValue(const double val);

  void __set_FinancialCostType(const TDDIFinancialCostType val);

  void __set_OperationalCost(const double val);

  void __set_OperationalCostType(const TDDIOperationalCostType val);

  void __set_Vulnerabilities(const std::vector<TDDIVulnerability> & val);

  bool operator == (const TDDIVulnerableItem & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(FinancialValue == rhs.FinancialValue))
      return false;
    if (!(FinancialCostType == rhs.FinancialCostType))
      return false;
    if (!(OperationalCost == rhs.OperationalCost))
      return false;
    if (!(OperationalCostType == rhs.OperationalCostType))
      return false;
    if (!(Vulnerabilities == rhs.Vulnerabilities))
      return false;
    return true;
  }
  bool operator != (const TDDIVulnerableItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIVulnerableItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIVulnerableItem &a, TDDIVulnerableItem &b);

std::ostream& operator<<(std::ostream& out, const TDDIVulnerableItem& obj);

typedef struct _TDDIAbstractAssetUnion__isset {
  _TDDIAbstractAssetUnion__isset() : Asset(false), VulnerableItem(false) {}
  bool Asset :1;
  bool VulnerableItem :1;
} _TDDIAbstractAssetUnion__isset;

class TDDIAbstractAssetUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAssetUnion(const TDDIAbstractAssetUnion&);
  TDDIAbstractAssetUnion& operator=(const TDDIAbstractAssetUnion&);
  TDDIAbstractAssetUnion() : Asset(), VulnerableItem() {
  }

  virtual ~TDDIAbstractAssetUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAsset> Asset;
  ::apache::thrift::stdcxx::shared_ptr<TDDIVulnerableItem> VulnerableItem;

  _TDDIAbstractAssetUnion__isset __isset;

  void __set_Asset(::apache::thrift::stdcxx::shared_ptr<TDDIAsset> val);

  void __set_VulnerableItem(::apache::thrift::stdcxx::shared_ptr<TDDIVulnerableItem> val);

  bool operator == (const TDDIAbstractAssetUnion & rhs) const
  {
    if (__isset.Asset != rhs.__isset.Asset)
      return false;
    else if (__isset.Asset && !(Asset == rhs.Asset))
      return false;
    if (__isset.VulnerableItem != rhs.__isset.VulnerableItem)
      return false;
    else if (__isset.VulnerableItem && !(VulnerableItem == rhs.VulnerableItem))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAssetUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAssetUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAssetUnion &a, TDDIAbstractAssetUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAssetUnion& obj);

typedef struct _TDDIAbstractAsset__isset {
  _TDDIAbstractAsset__isset() : UsedAsset(false), UsedAssetType(false) {}
  bool UsedAsset :1;
  bool UsedAssetType :1;
} _TDDIAbstractAsset__isset;

class TDDIAbstractAsset : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAsset(const TDDIAbstractAsset&);
  TDDIAbstractAsset& operator=(const TDDIAbstractAsset&);
  TDDIAbstractAsset() : UsedAssetType((TDDIAbstractAssetUnionType)0) {
  }

  virtual ~TDDIAbstractAsset() throw();
  TDDIAbstractAssetUnion UsedAsset;
  TDDIAbstractAssetUnionType UsedAssetType;

  _TDDIAbstractAsset__isset __isset;

  void __set_UsedAsset(const TDDIAbstractAssetUnion& val);

  void __set_UsedAssetType(const TDDIAbstractAssetUnionType val);

  bool operator == (const TDDIAbstractAsset & rhs) const
  {
    if (!(UsedAsset == rhs.UsedAsset))
      return false;
    if (!(UsedAssetType == rhs.UsedAssetType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAsset &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAsset & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAsset &a, TDDIAbstractAsset &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAsset& obj);

typedef struct _TDDISecurityControl__isset {
  _TDDISecurityControl__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), IntrinsicSafety(true), SafeGuard(true), ApplierInformation(true), RiskAcceptability(true), FurtherAction(true), Source(true), AssuranceLevel(false), MeasureType(false), Category(true), Type(true), Vulnerabilities(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool IntrinsicSafety :1;
  bool SafeGuard :1;
  bool ApplierInformation :1;
  bool RiskAcceptability :1;
  bool FurtherAction :1;
  bool Source :1;
  bool AssuranceLevel :1;
  bool MeasureType :1;
  bool Category :1;
  bool Type :1;
  bool Vulnerabilities :1;
} _TDDISecurityControl__isset;

class TDDISecurityControl : public virtual ::apache::thrift::TBase {
 public:

  TDDISecurityControl(const TDDISecurityControl&);
  TDDISecurityControl& operator=(const TDDISecurityControl&);
  TDDISecurityControl() : Id(0), Name(""), Description(""), IntrinsicSafety(""), SafeGuard(""), ApplierInformation(""), RiskAcceptability(false), FurtherAction(""), Source(""), AssuranceLevel(), MeasureType(), Category(""), Type((TDDISecurityApplicationType)0) {

    Type = (TDDISecurityApplicationType)0;


  }

  virtual ~TDDISecurityControl() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string IntrinsicSafety;
  std::string SafeGuard;
  std::string ApplierInformation;
  bool RiskAcceptability;
  std::string FurtherAction;
  std::string Source;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> AssuranceLevel;
  ::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> MeasureType;
  std::string Category;
  TDDISecurityApplicationType Type;
  std::vector<TDDIVulnerabilityRef>  Vulnerabilities;

  _TDDISecurityControl__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_IntrinsicSafety(const std::string& val);

  void __set_SafeGuard(const std::string& val);

  void __set_ApplierInformation(const std::string& val);

  void __set_RiskAcceptability(const bool val);

  void __set_FurtherAction(const std::string& val);

  void __set_Source(const std::string& val);

  void __set_AssuranceLevel(::apache::thrift::stdcxx::shared_ptr<TDDIAssuranceLevel> val);

  void __set_MeasureType(::apache::thrift::stdcxx::shared_ptr<TDDIMeasureType> val);

  void __set_Category(const std::string& val);

  void __set_Type(const TDDISecurityApplicationType val);

  void __set_Vulnerabilities(const std::vector<TDDIVulnerabilityRef> & val);

  bool operator == (const TDDISecurityControl & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(IntrinsicSafety == rhs.IntrinsicSafety))
      return false;
    if (!(SafeGuard == rhs.SafeGuard))
      return false;
    if (!(ApplierInformation == rhs.ApplierInformation))
      return false;
    if (!(RiskAcceptability == rhs.RiskAcceptability))
      return false;
    if (!(FurtherAction == rhs.FurtherAction))
      return false;
    if (!(Source == rhs.Source))
      return false;
    if (!(AssuranceLevel == rhs.AssuranceLevel))
      return false;
    if (!(MeasureType == rhs.MeasureType))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(Vulnerabilities == rhs.Vulnerabilities))
      return false;
    return true;
  }
  bool operator != (const TDDISecurityControl &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISecurityControl & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISecurityControl &a, TDDISecurityControl &b);

std::ostream& operator<<(std::ostream& out, const TDDISecurityControl& obj);

typedef struct _TDDISecurityCapability__isset {
  _TDDISecurityCapability__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Category(true), Type(true), ImplementedBy(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Category :1;
  bool Type :1;
  bool ImplementedBy :1;
} _TDDISecurityCapability__isset;

class TDDISecurityCapability : public virtual ::apache::thrift::TBase {
 public:

  TDDISecurityCapability(const TDDISecurityCapability&);
  TDDISecurityCapability& operator=(const TDDISecurityCapability&);
  TDDISecurityCapability() : Id(0), Name(""), Description(""), Category(""), Type((TDDISecurityApplicationType)0) {

    Type = (TDDISecurityApplicationType)0;


  }

  virtual ~TDDISecurityCapability() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Category;
  TDDISecurityApplicationType Type;
  std::vector<TDDISecurityControlRef>  ImplementedBy;

  _TDDISecurityCapability__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Category(const std::string& val);

  void __set_Type(const TDDISecurityApplicationType val);

  void __set_ImplementedBy(const std::vector<TDDISecurityControlRef> & val);

  bool operator == (const TDDISecurityCapability & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(Type == rhs.Type))
      return false;
    if (!(ImplementedBy == rhs.ImplementedBy))
      return false;
    return true;
  }
  bool operator != (const TDDISecurityCapability &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISecurityCapability & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISecurityCapability &a, TDDISecurityCapability &b);

std::ostream& operator<<(std::ostream& out, const TDDISecurityCapability& obj);

typedef struct _TDDISecurityRisk__isset {
  _TDDISecurityRisk__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Likelihood(true), ImpactAsset(true), ImpactIndividuals(true), ImpactBusiness(true), AttackerGoals(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Likelihood :1;
  bool ImpactAsset :1;
  bool ImpactIndividuals :1;
  bool ImpactBusiness :1;
  bool AttackerGoals :1;
} _TDDISecurityRisk__isset;

class TDDISecurityRisk : public virtual ::apache::thrift::TBase {
 public:

  TDDISecurityRisk(const TDDISecurityRisk&);
  TDDISecurityRisk& operator=(const TDDISecurityRisk&);
  TDDISecurityRisk() : Id(0), Name(""), Description(""), Likelihood(0), ImpactAsset(""), ImpactIndividuals(""), ImpactBusiness("") {


  }

  virtual ~TDDISecurityRisk() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  double Likelihood;
  std::string ImpactAsset;
  std::string ImpactIndividuals;
  std::string ImpactBusiness;
  std::vector<TDDIAttackerGoalRef>  AttackerGoals;

  _TDDISecurityRisk__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Likelihood(const double val);

  void __set_ImpactAsset(const std::string& val);

  void __set_ImpactIndividuals(const std::string& val);

  void __set_ImpactBusiness(const std::string& val);

  void __set_AttackerGoals(const std::vector<TDDIAttackerGoalRef> & val);

  bool operator == (const TDDISecurityRisk & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Likelihood == rhs.Likelihood))
      return false;
    if (!(ImpactAsset == rhs.ImpactAsset))
      return false;
    if (!(ImpactIndividuals == rhs.ImpactIndividuals))
      return false;
    if (!(ImpactBusiness == rhs.ImpactBusiness))
      return false;
    if (!(AttackerGoals == rhs.AttackerGoals))
      return false;
    return true;
  }
  bool operator != (const TDDISecurityRisk &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDISecurityRisk & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDISecurityRisk &a, TDDISecurityRisk &b);

std::ostream& operator<<(std::ostream& out, const TDDISecurityRisk& obj);

typedef struct _TDDIAttack__isset {
  _TDDIAttack__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Category(true), FinancialCost(true), FinancialCostType(true), TimeRequired(true), TimeUnit(true), Difficulty(true), Detectability(true), ExploitedVulnerabilities(true), Violations(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Category :1;
  bool FinancialCost :1;
  bool FinancialCostType :1;
  bool TimeRequired :1;
  bool TimeUnit :1;
  bool Difficulty :1;
  bool Detectability :1;
  bool ExploitedVulnerabilities :1;
  bool Violations :1;
} _TDDIAttack__isset;

class TDDIAttack : public virtual ::apache::thrift::TBase {
 public:

  TDDIAttack(const TDDIAttack&);
  TDDIAttack& operator=(const TDDIAttack&);
  TDDIAttack() : Id(0), Name(""), Description(""), Category(""), FinancialCost(0), FinancialCostType((TDDIFinancialCostType)1), TimeRequired(0), TimeUnit((TDDITimeUnit)2), Difficulty(""), Detectability("") {

    FinancialCostType = (TDDIFinancialCostType)1;

    TimeUnit = (TDDITimeUnit)2;



  }

  virtual ~TDDIAttack() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Category;
  double FinancialCost;
  TDDIFinancialCostType FinancialCostType;
  double TimeRequired;
  TDDITimeUnit TimeUnit;
  std::string Difficulty;
  std::string Detectability;
  std::vector<TDDIVulnerabilityRef>  ExploitedVulnerabilities;
  std::vector<TDDISecurityViolationRef>  Violations;

  _TDDIAttack__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Category(const std::string& val);

  void __set_FinancialCost(const double val);

  void __set_FinancialCostType(const TDDIFinancialCostType val);

  void __set_TimeRequired(const double val);

  void __set_TimeUnit(const TDDITimeUnit val);

  void __set_Difficulty(const std::string& val);

  void __set_Detectability(const std::string& val);

  void __set_ExploitedVulnerabilities(const std::vector<TDDIVulnerabilityRef> & val);

  void __set_Violations(const std::vector<TDDISecurityViolationRef> & val);

  bool operator == (const TDDIAttack & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(FinancialCost == rhs.FinancialCost))
      return false;
    if (!(FinancialCostType == rhs.FinancialCostType))
      return false;
    if (!(TimeRequired == rhs.TimeRequired))
      return false;
    if (!(TimeUnit == rhs.TimeUnit))
      return false;
    if (!(Difficulty == rhs.Difficulty))
      return false;
    if (!(Detectability == rhs.Detectability))
      return false;
    if (!(ExploitedVulnerabilities == rhs.ExploitedVulnerabilities))
      return false;
    if (!(Violations == rhs.Violations))
      return false;
    return true;
  }
  bool operator != (const TDDIAttack &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAttack & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAttack &a, TDDIAttack &b);

std::ostream& operator<<(std::ostream& out, const TDDIAttack& obj);

typedef struct _TDDIAction__isset {
  _TDDIAction__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Category(true), FinancialCost(true), FinancialCostType(true), TimeRequired(true), TimeUnit(true), Difficulty(true), Detectability(true), ExploitedVulnerabilities(true), Violations(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Category :1;
  bool FinancialCost :1;
  bool FinancialCostType :1;
  bool TimeRequired :1;
  bool TimeUnit :1;
  bool Difficulty :1;
  bool Detectability :1;
  bool ExploitedVulnerabilities :1;
  bool Violations :1;
} _TDDIAction__isset;

class TDDIAction : public virtual ::apache::thrift::TBase {
 public:

  TDDIAction(const TDDIAction&);
  TDDIAction& operator=(const TDDIAction&);
  TDDIAction() : Id(0), Name(""), Description(""), Category(""), FinancialCost(0), FinancialCostType((TDDIFinancialCostType)1), TimeRequired(0), TimeUnit((TDDITimeUnit)2), Difficulty(""), Detectability("") {

    FinancialCostType = (TDDIFinancialCostType)1;

    TimeUnit = (TDDITimeUnit)2;



  }

  virtual ~TDDIAction() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Category;
  double FinancialCost;
  TDDIFinancialCostType FinancialCostType;
  double TimeRequired;
  TDDITimeUnit TimeUnit;
  std::string Difficulty;
  std::string Detectability;
  std::vector<TDDIVulnerabilityRef>  ExploitedVulnerabilities;
  std::vector<TDDISecurityViolationRef>  Violations;

  _TDDIAction__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Category(const std::string& val);

  void __set_FinancialCost(const double val);

  void __set_FinancialCostType(const TDDIFinancialCostType val);

  void __set_TimeRequired(const double val);

  void __set_TimeUnit(const TDDITimeUnit val);

  void __set_Difficulty(const std::string& val);

  void __set_Detectability(const std::string& val);

  void __set_ExploitedVulnerabilities(const std::vector<TDDIVulnerabilityRef> & val);

  void __set_Violations(const std::vector<TDDISecurityViolationRef> & val);

  bool operator == (const TDDIAction & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(FinancialCost == rhs.FinancialCost))
      return false;
    if (!(FinancialCostType == rhs.FinancialCostType))
      return false;
    if (!(TimeRequired == rhs.TimeRequired))
      return false;
    if (!(TimeUnit == rhs.TimeUnit))
      return false;
    if (!(Difficulty == rhs.Difficulty))
      return false;
    if (!(Detectability == rhs.Detectability))
      return false;
    if (!(ExploitedVulnerabilities == rhs.ExploitedVulnerabilities))
      return false;
    if (!(Violations == rhs.Violations))
      return false;
    return true;
  }
  bool operator != (const TDDIAction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAction &a, TDDIAction &b);

std::ostream& operator<<(std::ostream& out, const TDDIAction& obj);

typedef struct _TDDIPayload__isset {
  _TDDIPayload__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Category(true), FinancialCost(true), FinancialCostType(true), TimeRequired(true), TimeUnit(true), Difficulty(true), Detectability(true), ExploitedVulnerabilities(true), Violations(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Category :1;
  bool FinancialCost :1;
  bool FinancialCostType :1;
  bool TimeRequired :1;
  bool TimeUnit :1;
  bool Difficulty :1;
  bool Detectability :1;
  bool ExploitedVulnerabilities :1;
  bool Violations :1;
} _TDDIPayload__isset;

class TDDIPayload : public virtual ::apache::thrift::TBase {
 public:

  TDDIPayload(const TDDIPayload&);
  TDDIPayload& operator=(const TDDIPayload&);
  TDDIPayload() : Id(0), Name(""), Description(""), Category(""), FinancialCost(0), FinancialCostType((TDDIFinancialCostType)1), TimeRequired(0), TimeUnit((TDDITimeUnit)2), Difficulty(""), Detectability("") {

    FinancialCostType = (TDDIFinancialCostType)1;

    TimeUnit = (TDDITimeUnit)2;



  }

  virtual ~TDDIPayload() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Category;
  double FinancialCost;
  TDDIFinancialCostType FinancialCostType;
  double TimeRequired;
  TDDITimeUnit TimeUnit;
  std::string Difficulty;
  std::string Detectability;
  std::vector<TDDIVulnerabilityRef>  ExploitedVulnerabilities;
  std::vector<TDDISecurityViolationRef>  Violations;

  _TDDIPayload__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Category(const std::string& val);

  void __set_FinancialCost(const double val);

  void __set_FinancialCostType(const TDDIFinancialCostType val);

  void __set_TimeRequired(const double val);

  void __set_TimeUnit(const TDDITimeUnit val);

  void __set_Difficulty(const std::string& val);

  void __set_Detectability(const std::string& val);

  void __set_ExploitedVulnerabilities(const std::vector<TDDIVulnerabilityRef> & val);

  void __set_Violations(const std::vector<TDDISecurityViolationRef> & val);

  bool operator == (const TDDIPayload & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(FinancialCost == rhs.FinancialCost))
      return false;
    if (!(FinancialCostType == rhs.FinancialCostType))
      return false;
    if (!(TimeRequired == rhs.TimeRequired))
      return false;
    if (!(TimeUnit == rhs.TimeUnit))
      return false;
    if (!(Difficulty == rhs.Difficulty))
      return false;
    if (!(Detectability == rhs.Detectability))
      return false;
    if (!(ExploitedVulnerabilities == rhs.ExploitedVulnerabilities))
      return false;
    if (!(Violations == rhs.Violations))
      return false;
    return true;
  }
  bool operator != (const TDDIPayload &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIPayload & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIPayload &a, TDDIPayload &b);

std::ostream& operator<<(std::ostream& out, const TDDIPayload& obj);

typedef struct _TDDIAbstractAttackUnion__isset {
  _TDDIAbstractAttackUnion__isset() : Attack(false), Action(false), Payload(false) {}
  bool Attack :1;
  bool Action :1;
  bool Payload :1;
} _TDDIAbstractAttackUnion__isset;

class TDDIAbstractAttackUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAttackUnion(const TDDIAbstractAttackUnion&);
  TDDIAbstractAttackUnion& operator=(const TDDIAbstractAttackUnion&);
  TDDIAbstractAttackUnion() : Attack(), Action(), Payload() {
  }

  virtual ~TDDIAbstractAttackUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIAttack> Attack;
  ::apache::thrift::stdcxx::shared_ptr<TDDIAction> Action;
  ::apache::thrift::stdcxx::shared_ptr<TDDIPayload> Payload;

  _TDDIAbstractAttackUnion__isset __isset;

  void __set_Attack(::apache::thrift::stdcxx::shared_ptr<TDDIAttack> val);

  void __set_Action(::apache::thrift::stdcxx::shared_ptr<TDDIAction> val);

  void __set_Payload(::apache::thrift::stdcxx::shared_ptr<TDDIPayload> val);

  bool operator == (const TDDIAbstractAttackUnion & rhs) const
  {
    if (!(Attack == rhs.Attack))
      return false;
    if (!(Action == rhs.Action))
      return false;
    if (!(Payload == rhs.Payload))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAttackUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAttackUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAttackUnion &a, TDDIAbstractAttackUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAttackUnion& obj);

typedef struct _TDDIAbstractAttack__isset {
  _TDDIAbstractAttack__isset() : UsedAttack(false), UsedAttackType(false) {}
  bool UsedAttack :1;
  bool UsedAttackType :1;
} _TDDIAbstractAttack__isset;

class TDDIAbstractAttack : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractAttack(const TDDIAbstractAttack&);
  TDDIAbstractAttack& operator=(const TDDIAbstractAttack&);
  TDDIAbstractAttack() : UsedAttackType((TDDIAbstractAttackUnionType)0) {
  }

  virtual ~TDDIAbstractAttack() throw();
  TDDIAbstractAttackUnion UsedAttack;
  TDDIAbstractAttackUnionType UsedAttackType;

  _TDDIAbstractAttack__isset __isset;

  void __set_UsedAttack(const TDDIAbstractAttackUnion& val);

  void __set_UsedAttackType(const TDDIAbstractAttackUnionType val);

  bool operator == (const TDDIAbstractAttack & rhs) const
  {
    if (!(UsedAttack == rhs.UsedAttack))
      return false;
    if (!(UsedAttackType == rhs.UsedAttackType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractAttack &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractAttack & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractAttack &a, TDDIAbstractAttack &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractAttack& obj);

typedef struct _TDDIAttackerGoal__isset {
  _TDDIAttackerGoal__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), Category(true), Attacks(true), AddressedBy(true), AttackedItems(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool Category :1;
  bool Attacks :1;
  bool AddressedBy :1;
  bool AttackedItems :1;
} _TDDIAttackerGoal__isset;

class TDDIAttackerGoal : public virtual ::apache::thrift::TBase {
 public:

  TDDIAttackerGoal(const TDDIAttackerGoal&);
  TDDIAttackerGoal& operator=(const TDDIAttackerGoal&);
  TDDIAttackerGoal() : Id(0), Name(""), Description(""), Category("") {




  }

  virtual ~TDDIAttackerGoal() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string Category;
  std::vector<TDDIAbstractAttack>  Attacks;
  std::vector<TDDISecurityCapability>  AddressedBy;
  std::vector<TDDIVulnerableItemRef>  AttackedItems;

  _TDDIAttackerGoal__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_Category(const std::string& val);

  void __set_Attacks(const std::vector<TDDIAbstractAttack> & val);

  void __set_AddressedBy(const std::vector<TDDISecurityCapability> & val);

  void __set_AttackedItems(const std::vector<TDDIVulnerableItemRef> & val);

  bool operator == (const TDDIAttackerGoal & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(Category == rhs.Category))
      return false;
    if (!(Attacks == rhs.Attacks))
      return false;
    if (!(AddressedBy == rhs.AddressedBy))
      return false;
    if (!(AttackedItems == rhs.AttackedItems))
      return false;
    return true;
  }
  bool operator != (const TDDIAttackerGoal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAttackerGoal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAttackerGoal &a, TDDIAttackerGoal &b);

std::ostream& operator<<(std::ostream& out, const TDDIAttackerGoal& obj);

typedef struct _TDDIThreatAgent__isset {
  _TDDIThreatAgent__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), SkillLevel(true), Motivation(true), AnonymityDesire(true), AttackerGoals(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool SkillLevel :1;
  bool Motivation :1;
  bool AnonymityDesire :1;
  bool AttackerGoals :1;
} _TDDIThreatAgent__isset;

class TDDIThreatAgent : public virtual ::apache::thrift::TBase {
 public:

  TDDIThreatAgent(const TDDIThreatAgent&);
  TDDIThreatAgent& operator=(const TDDIThreatAgent&);
  TDDIThreatAgent() : Id(0), Name(""), Description(""), SkillLevel(""), Motivation(""), AnonymityDesire("") {


  }

  virtual ~TDDIThreatAgent() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string SkillLevel;
  std::string Motivation;
  std::string AnonymityDesire;
  std::vector<TDDIAttackerGoal>  AttackerGoals;

  _TDDIThreatAgent__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_SkillLevel(const std::string& val);

  void __set_Motivation(const std::string& val);

  void __set_AnonymityDesire(const std::string& val);

  void __set_AttackerGoals(const std::vector<TDDIAttackerGoal> & val);

  bool operator == (const TDDIThreatAgent & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(SkillLevel == rhs.SkillLevel))
      return false;
    if (!(Motivation == rhs.Motivation))
      return false;
    if (!(AnonymityDesire == rhs.AnonymityDesire))
      return false;
    if (!(AttackerGoals == rhs.AttackerGoals))
      return false;
    return true;
  }
  bool operator != (const TDDIThreatAgent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIThreatAgent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIThreatAgent &a, TDDIThreatAgent &b);

std::ostream& operator<<(std::ostream& out, const TDDIThreatAgent& obj);

typedef struct _TDDIHuman__isset {
  _TDDIHuman__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), SkillLevel(true), Motivation(true), AnonymityDesire(true), AttackerGoals(true), Actions(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool SkillLevel :1;
  bool Motivation :1;
  bool AnonymityDesire :1;
  bool AttackerGoals :1;
  bool Actions :1;
} _TDDIHuman__isset;

class TDDIHuman : public virtual ::apache::thrift::TBase {
 public:

  TDDIHuman(const TDDIHuman&);
  TDDIHuman& operator=(const TDDIHuman&);
  TDDIHuman() : Id(0), Name(""), Description(""), SkillLevel(""), Motivation(""), AnonymityDesire("") {



  }

  virtual ~TDDIHuman() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string SkillLevel;
  std::string Motivation;
  std::string AnonymityDesire;
  std::vector<TDDIAttackerGoal>  AttackerGoals;
  std::vector<TDDIActionRef>  Actions;

  _TDDIHuman__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_SkillLevel(const std::string& val);

  void __set_Motivation(const std::string& val);

  void __set_AnonymityDesire(const std::string& val);

  void __set_AttackerGoals(const std::vector<TDDIAttackerGoal> & val);

  void __set_Actions(const std::vector<TDDIActionRef> & val);

  bool operator == (const TDDIHuman & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(SkillLevel == rhs.SkillLevel))
      return false;
    if (!(Motivation == rhs.Motivation))
      return false;
    if (!(AnonymityDesire == rhs.AnonymityDesire))
      return false;
    if (!(AttackerGoals == rhs.AttackerGoals))
      return false;
    if (!(Actions == rhs.Actions))
      return false;
    return true;
  }
  bool operator != (const TDDIHuman &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIHuman & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIHuman &a, TDDIHuman &b);

std::ostream& operator<<(std::ostream& out, const TDDIHuman& obj);

typedef struct _TDDINonHuman__isset {
  _TDDINonHuman__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), SkillLevel(true), Motivation(true), AnonymityDesire(true), AttackerGoals(true), Payloads(true) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool SkillLevel :1;
  bool Motivation :1;
  bool AnonymityDesire :1;
  bool AttackerGoals :1;
  bool Payloads :1;
} _TDDINonHuman__isset;

class TDDINonHuman : public virtual ::apache::thrift::TBase {
 public:

  TDDINonHuman(const TDDINonHuman&);
  TDDINonHuman& operator=(const TDDINonHuman&);
  TDDINonHuman() : Id(0), Name(""), Description(""), SkillLevel(""), Motivation(""), AnonymityDesire("") {



  }

  virtual ~TDDINonHuman() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::string SkillLevel;
  std::string Motivation;
  std::string AnonymityDesire;
  std::vector<TDDIAttackerGoal>  AttackerGoals;
  std::vector<TDDIPayloadRef>  Payloads;

  _TDDINonHuman__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_SkillLevel(const std::string& val);

  void __set_Motivation(const std::string& val);

  void __set_AnonymityDesire(const std::string& val);

  void __set_AttackerGoals(const std::vector<TDDIAttackerGoal> & val);

  void __set_Payloads(const std::vector<TDDIPayloadRef> & val);

  bool operator == (const TDDINonHuman & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(SkillLevel == rhs.SkillLevel))
      return false;
    if (!(Motivation == rhs.Motivation))
      return false;
    if (!(AnonymityDesire == rhs.AnonymityDesire))
      return false;
    if (!(AttackerGoals == rhs.AttackerGoals))
      return false;
    if (!(Payloads == rhs.Payloads))
      return false;
    return true;
  }
  bool operator != (const TDDINonHuman &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDINonHuman & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDINonHuman &a, TDDINonHuman &b);

std::ostream& operator<<(std::ostream& out, const TDDINonHuman& obj);

typedef struct _TDDIAbstractThreatAgentUnion__isset {
  _TDDIAbstractThreatAgentUnion__isset() : ThreatAgent(false), Human(false), NonHuman(false) {}
  bool ThreatAgent :1;
  bool Human :1;
  bool NonHuman :1;
} _TDDIAbstractThreatAgentUnion__isset;

class TDDIAbstractThreatAgentUnion : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractThreatAgentUnion(const TDDIAbstractThreatAgentUnion&);
  TDDIAbstractThreatAgentUnion& operator=(const TDDIAbstractThreatAgentUnion&);
  TDDIAbstractThreatAgentUnion() : ThreatAgent(), Human(), NonHuman() {
  }

  virtual ~TDDIAbstractThreatAgentUnion() throw();
  ::apache::thrift::stdcxx::shared_ptr<TDDIThreatAgent> ThreatAgent;
  ::apache::thrift::stdcxx::shared_ptr<TDDIHuman> Human;
  ::apache::thrift::stdcxx::shared_ptr<TDDINonHuman> NonHuman;

  _TDDIAbstractThreatAgentUnion__isset __isset;

  void __set_ThreatAgent(::apache::thrift::stdcxx::shared_ptr<TDDIThreatAgent> val);

  void __set_Human(::apache::thrift::stdcxx::shared_ptr<TDDIHuman> val);

  void __set_NonHuman(::apache::thrift::stdcxx::shared_ptr<TDDINonHuman> val);

  bool operator == (const TDDIAbstractThreatAgentUnion & rhs) const
  {
    if (__isset.ThreatAgent != rhs.__isset.ThreatAgent)
      return false;
    else if (__isset.ThreatAgent && !(ThreatAgent == rhs.ThreatAgent))
      return false;
    if (__isset.Human != rhs.__isset.Human)
      return false;
    else if (__isset.Human && !(Human == rhs.Human))
      return false;
    if (__isset.NonHuman != rhs.__isset.NonHuman)
      return false;
    else if (__isset.NonHuman && !(NonHuman == rhs.NonHuman))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractThreatAgentUnion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractThreatAgentUnion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractThreatAgentUnion &a, TDDIAbstractThreatAgentUnion &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractThreatAgentUnion& obj);

typedef struct _TDDIAbstractThreatAgent__isset {
  _TDDIAbstractThreatAgent__isset() : UsedThreatAgent(false), UsedThreatAgentType(false) {}
  bool UsedThreatAgent :1;
  bool UsedThreatAgentType :1;
} _TDDIAbstractThreatAgent__isset;

class TDDIAbstractThreatAgent : public virtual ::apache::thrift::TBase {
 public:

  TDDIAbstractThreatAgent(const TDDIAbstractThreatAgent&);
  TDDIAbstractThreatAgent& operator=(const TDDIAbstractThreatAgent&);
  TDDIAbstractThreatAgent() : UsedThreatAgentType((TDDIAbstractThreatAgentUnionType)0) {
  }

  virtual ~TDDIAbstractThreatAgent() throw();
  TDDIAbstractThreatAgentUnion UsedThreatAgent;
  TDDIAbstractThreatAgentUnionType UsedThreatAgentType;

  _TDDIAbstractThreatAgent__isset __isset;

  void __set_UsedThreatAgent(const TDDIAbstractThreatAgentUnion& val);

  void __set_UsedThreatAgentType(const TDDIAbstractThreatAgentUnionType val);

  bool operator == (const TDDIAbstractThreatAgent & rhs) const
  {
    if (!(UsedThreatAgent == rhs.UsedThreatAgent))
      return false;
    if (!(UsedThreatAgentType == rhs.UsedThreatAgentType))
      return false;
    return true;
  }
  bool operator != (const TDDIAbstractThreatAgent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDIAbstractThreatAgent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDIAbstractThreatAgent &a, TDDIAbstractThreatAgent &b);

std::ostream& operator<<(std::ostream& out, const TDDIAbstractThreatAgent& obj);

typedef struct _TDDITARAPackage__isset {
  _TDDITARAPackage__isset() : Id(false), Name(true), Description(true), KeyValueMaps(true), IdentifiedRisks(false), Controls(false), ConsideredAssets(false), ConsideredThreatAgents(false) {}
  bool Id :1;
  bool Name :1;
  bool Description :1;
  bool KeyValueMaps :1;
  bool IdentifiedRisks :1;
  bool Controls :1;
  bool ConsideredAssets :1;
  bool ConsideredThreatAgents :1;
} _TDDITARAPackage__isset;

class TDDITARAPackage : public virtual ::apache::thrift::TBase {
 public:

  TDDITARAPackage(const TDDITARAPackage&);
  TDDITARAPackage& operator=(const TDDITARAPackage&);
  TDDITARAPackage() : Id(0), Name(""), Description("") {

  }

  virtual ~TDDITARAPackage() throw();
  int64_t Id;
  std::string Name;
  std::string Description;
  std::vector<TDDIKeyValueMap>  KeyValueMaps;
  std::vector<TDDISecurityRisk>  IdentifiedRisks;
  std::vector<TDDISecurityControl>  Controls;
  std::vector<TDDIAbstractAsset>  ConsideredAssets;
  std::vector<TDDIAbstractThreatAgent>  ConsideredThreatAgents;

  _TDDITARAPackage__isset __isset;

  void __set_Id(const int64_t val);

  void __set_Name(const std::string& val);

  void __set_Description(const std::string& val);

  void __set_KeyValueMaps(const std::vector<TDDIKeyValueMap> & val);

  void __set_IdentifiedRisks(const std::vector<TDDISecurityRisk> & val);

  void __set_Controls(const std::vector<TDDISecurityControl> & val);

  void __set_ConsideredAssets(const std::vector<TDDIAbstractAsset> & val);

  void __set_ConsideredThreatAgents(const std::vector<TDDIAbstractThreatAgent> & val);

  bool operator == (const TDDITARAPackage & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Description == rhs.Description))
      return false;
    if (!(KeyValueMaps == rhs.KeyValueMaps))
      return false;
    if (!(IdentifiedRisks == rhs.IdentifiedRisks))
      return false;
    if (!(Controls == rhs.Controls))
      return false;
    if (!(ConsideredAssets == rhs.ConsideredAssets))
      return false;
    if (!(ConsideredThreatAgents == rhs.ConsideredThreatAgents))
      return false;
    return true;
  }
  bool operator != (const TDDITARAPackage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDDITARAPackage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDDITARAPackage &a, TDDITARAPackage &b);

std::ostream& operator<<(std::ostream& out, const TDDITARAPackage& obj);

} // namespace

#endif
