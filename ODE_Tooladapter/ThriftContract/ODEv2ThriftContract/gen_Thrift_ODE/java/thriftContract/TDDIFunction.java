/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-13")
public class TDDIFunction implements org.apache.thrift.TBase<TDDIFunction, TDDIFunction._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIFunction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIFunction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_REQUIREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityRequirements", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ASSURANCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceLevel", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("SubFunctions", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ports", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SIGNALS_FIELD_DESC = new org.apache.thrift.protocol.TField("Signals", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PERF_CHARS_FIELD_DESC = new org.apache.thrift.protocol.TField("PerfChars", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField FAILURE_MODELS_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureModels", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField MALFUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Malfunctions", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField AS_ASSET_FIELD_DESC = new org.apache.thrift.protocol.TField("AsAsset", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIFunctionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIFunctionTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements; // required
  public TDDIAssuranceLevel AssuranceLevel; // required
  public java.util.List<TDDIAbstractFunctionRef> SubFunctions; // required
  public java.util.List<TDDIPort> Ports; // required
  public java.util.List<TDDISignal> Signals; // required
  public TDDIPerfChars PerfChars; // required
  public java.util.List<TDDIAbstractFailureModelRef> FailureModels; // required
  public java.util.List<TDDIMalfunctionRef> Malfunctions; // required
  public TDDIAbstractAsset AsAsset; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    DEPENDABILITY_REQUIREMENTS((short)5, "DependabilityRequirements"),
    ASSURANCE_LEVEL((short)6, "AssuranceLevel"),
    SUB_FUNCTIONS((short)7, "SubFunctions"),
    PORTS((short)8, "Ports"),
    SIGNALS((short)9, "Signals"),
    PERF_CHARS((short)10, "PerfChars"),
    FAILURE_MODELS((short)11, "FailureModels"),
    MALFUNCTIONS((short)12, "Malfunctions"),
    AS_ASSET((short)13, "AsAsset");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // DEPENDABILITY_REQUIREMENTS
          return DEPENDABILITY_REQUIREMENTS;
        case 6: // ASSURANCE_LEVEL
          return ASSURANCE_LEVEL;
        case 7: // SUB_FUNCTIONS
          return SUB_FUNCTIONS;
        case 8: // PORTS
          return PORTS;
        case 9: // SIGNALS
          return SIGNALS;
        case 10: // PERF_CHARS
          return PERF_CHARS;
        case 11: // FAILURE_MODELS
          return FAILURE_MODELS;
        case 12: // MALFUNCTIONS
          return MALFUNCTIONS;
        case 13: // AS_ASSET
          return AS_ASSET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.DEPENDABILITY_REQUIREMENTS, new org.apache.thrift.meta_data.FieldMetaData("DependabilityRequirements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractDependabilityRequirementRef.class))));
    tmpMap.put(_Fields.ASSURANCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("AssuranceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAssuranceLevel")));
    tmpMap.put(_Fields.SUB_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("SubFunctions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFunctionRef.class))));
    tmpMap.put(_Fields.PORTS, new org.apache.thrift.meta_data.FieldMetaData("Ports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPort.class))));
    tmpMap.put(_Fields.SIGNALS, new org.apache.thrift.meta_data.FieldMetaData("Signals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISignal.class))));
    tmpMap.put(_Fields.PERF_CHARS, new org.apache.thrift.meta_data.FieldMetaData("PerfChars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPerfChars.class)));
    tmpMap.put(_Fields.FAILURE_MODELS, new org.apache.thrift.meta_data.FieldMetaData("FailureModels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureModelRef.class))));
    tmpMap.put(_Fields.MALFUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("Malfunctions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMalfunctionRef.class))));
    tmpMap.put(_Fields.AS_ASSET, new org.apache.thrift.meta_data.FieldMetaData("AsAsset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractAsset")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIFunction.class, metaDataMap);
  }

  public TDDIFunction() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();

    this.Ports = new java.util.ArrayList<TDDIPort>();

    this.Signals = new java.util.ArrayList<TDDISignal>();

    this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();

    this.Malfunctions = new java.util.ArrayList<TDDIMalfunctionRef>();

  }

  public TDDIFunction(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements,
    TDDIAssuranceLevel AssuranceLevel,
    java.util.List<TDDIAbstractFunctionRef> SubFunctions,
    java.util.List<TDDIPort> Ports,
    java.util.List<TDDISignal> Signals,
    TDDIPerfChars PerfChars,
    java.util.List<TDDIAbstractFailureModelRef> FailureModels,
    java.util.List<TDDIMalfunctionRef> Malfunctions,
    TDDIAbstractAsset AsAsset)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.DependabilityRequirements = DependabilityRequirements;
    this.AssuranceLevel = AssuranceLevel;
    this.SubFunctions = SubFunctions;
    this.Ports = Ports;
    this.Signals = Signals;
    this.PerfChars = PerfChars;
    this.FailureModels = FailureModels;
    this.Malfunctions = Malfunctions;
    this.AsAsset = AsAsset;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIFunction(TDDIFunction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetDependabilityRequirements()) {
      java.util.List<TDDIAbstractDependabilityRequirementRef> __this__DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(other.DependabilityRequirements.size());
      for (TDDIAbstractDependabilityRequirementRef other_element : other.DependabilityRequirements) {
        __this__DependabilityRequirements.add(new TDDIAbstractDependabilityRequirementRef(other_element));
      }
      this.DependabilityRequirements = __this__DependabilityRequirements;
    }
    if (other.isSetAssuranceLevel()) {
      this.AssuranceLevel = new TDDIAssuranceLevel(other.AssuranceLevel);
    }
    if (other.isSetSubFunctions()) {
      java.util.List<TDDIAbstractFunctionRef> __this__SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(other.SubFunctions.size());
      for (TDDIAbstractFunctionRef other_element : other.SubFunctions) {
        __this__SubFunctions.add(new TDDIAbstractFunctionRef(other_element));
      }
      this.SubFunctions = __this__SubFunctions;
    }
    if (other.isSetPorts()) {
      java.util.List<TDDIPort> __this__Ports = new java.util.ArrayList<TDDIPort>(other.Ports.size());
      for (TDDIPort other_element : other.Ports) {
        __this__Ports.add(new TDDIPort(other_element));
      }
      this.Ports = __this__Ports;
    }
    if (other.isSetSignals()) {
      java.util.List<TDDISignal> __this__Signals = new java.util.ArrayList<TDDISignal>(other.Signals.size());
      for (TDDISignal other_element : other.Signals) {
        __this__Signals.add(new TDDISignal(other_element));
      }
      this.Signals = __this__Signals;
    }
    if (other.isSetPerfChars()) {
      this.PerfChars = new TDDIPerfChars(other.PerfChars);
    }
    if (other.isSetFailureModels()) {
      java.util.List<TDDIAbstractFailureModelRef> __this__FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(other.FailureModels.size());
      for (TDDIAbstractFailureModelRef other_element : other.FailureModels) {
        __this__FailureModels.add(new TDDIAbstractFailureModelRef(other_element));
      }
      this.FailureModels = __this__FailureModels;
    }
    if (other.isSetMalfunctions()) {
      java.util.List<TDDIMalfunctionRef> __this__Malfunctions = new java.util.ArrayList<TDDIMalfunctionRef>(other.Malfunctions.size());
      for (TDDIMalfunctionRef other_element : other.Malfunctions) {
        __this__Malfunctions.add(new TDDIMalfunctionRef(other_element));
      }
      this.Malfunctions = __this__Malfunctions;
    }
    if (other.isSetAsAsset()) {
      this.AsAsset = new TDDIAbstractAsset(other.AsAsset);
    }
  }

  public TDDIFunction deepCopy() {
    return new TDDIFunction(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.AssuranceLevel = null;
    this.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();

    this.Ports = new java.util.ArrayList<TDDIPort>();

    this.Signals = new java.util.ArrayList<TDDISignal>();

    this.PerfChars = null;
    this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();

    this.Malfunctions = new java.util.ArrayList<TDDIMalfunctionRef>();

    this.AsAsset = null;
  }

  public long getId() {
    return this.Id;
  }

  public TDDIFunction setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIFunction setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIFunction setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIFunction setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public int getDependabilityRequirementsSize() {
    return (this.DependabilityRequirements == null) ? 0 : this.DependabilityRequirements.size();
  }

  public java.util.Iterator<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirementsIterator() {
    return (this.DependabilityRequirements == null) ? null : this.DependabilityRequirements.iterator();
  }

  public void addToDependabilityRequirements(TDDIAbstractDependabilityRequirementRef elem) {
    if (this.DependabilityRequirements == null) {
      this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();
    }
    this.DependabilityRequirements.add(elem);
  }

  public java.util.List<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirements() {
    return this.DependabilityRequirements;
  }

  public TDDIFunction setDependabilityRequirements(java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements) {
    this.DependabilityRequirements = DependabilityRequirements;
    return this;
  }

  public void unsetDependabilityRequirements() {
    this.DependabilityRequirements = null;
  }

  /** Returns true if field DependabilityRequirements is set (has been assigned a value) and false otherwise */
  public boolean isSetDependabilityRequirements() {
    return this.DependabilityRequirements != null;
  }

  public void setDependabilityRequirementsIsSet(boolean value) {
    if (!value) {
      this.DependabilityRequirements = null;
    }
  }

  public TDDIAssuranceLevel getAssuranceLevel() {
    return this.AssuranceLevel;
  }

  public TDDIFunction setAssuranceLevel(TDDIAssuranceLevel AssuranceLevel) {
    this.AssuranceLevel = AssuranceLevel;
    return this;
  }

  public void unsetAssuranceLevel() {
    this.AssuranceLevel = null;
  }

  /** Returns true if field AssuranceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceLevel() {
    return this.AssuranceLevel != null;
  }

  public void setAssuranceLevelIsSet(boolean value) {
    if (!value) {
      this.AssuranceLevel = null;
    }
  }

  public int getSubFunctionsSize() {
    return (this.SubFunctions == null) ? 0 : this.SubFunctions.size();
  }

  public java.util.Iterator<TDDIAbstractFunctionRef> getSubFunctionsIterator() {
    return (this.SubFunctions == null) ? null : this.SubFunctions.iterator();
  }

  public void addToSubFunctions(TDDIAbstractFunctionRef elem) {
    if (this.SubFunctions == null) {
      this.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>();
    }
    this.SubFunctions.add(elem);
  }

  public java.util.List<TDDIAbstractFunctionRef> getSubFunctions() {
    return this.SubFunctions;
  }

  public TDDIFunction setSubFunctions(java.util.List<TDDIAbstractFunctionRef> SubFunctions) {
    this.SubFunctions = SubFunctions;
    return this;
  }

  public void unsetSubFunctions() {
    this.SubFunctions = null;
  }

  /** Returns true if field SubFunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetSubFunctions() {
    return this.SubFunctions != null;
  }

  public void setSubFunctionsIsSet(boolean value) {
    if (!value) {
      this.SubFunctions = null;
    }
  }

  public int getPortsSize() {
    return (this.Ports == null) ? 0 : this.Ports.size();
  }

  public java.util.Iterator<TDDIPort> getPortsIterator() {
    return (this.Ports == null) ? null : this.Ports.iterator();
  }

  public void addToPorts(TDDIPort elem) {
    if (this.Ports == null) {
      this.Ports = new java.util.ArrayList<TDDIPort>();
    }
    this.Ports.add(elem);
  }

  public java.util.List<TDDIPort> getPorts() {
    return this.Ports;
  }

  public TDDIFunction setPorts(java.util.List<TDDIPort> Ports) {
    this.Ports = Ports;
    return this;
  }

  public void unsetPorts() {
    this.Ports = null;
  }

  /** Returns true if field Ports is set (has been assigned a value) and false otherwise */
  public boolean isSetPorts() {
    return this.Ports != null;
  }

  public void setPortsIsSet(boolean value) {
    if (!value) {
      this.Ports = null;
    }
  }

  public int getSignalsSize() {
    return (this.Signals == null) ? 0 : this.Signals.size();
  }

  public java.util.Iterator<TDDISignal> getSignalsIterator() {
    return (this.Signals == null) ? null : this.Signals.iterator();
  }

  public void addToSignals(TDDISignal elem) {
    if (this.Signals == null) {
      this.Signals = new java.util.ArrayList<TDDISignal>();
    }
    this.Signals.add(elem);
  }

  public java.util.List<TDDISignal> getSignals() {
    return this.Signals;
  }

  public TDDIFunction setSignals(java.util.List<TDDISignal> Signals) {
    this.Signals = Signals;
    return this;
  }

  public void unsetSignals() {
    this.Signals = null;
  }

  /** Returns true if field Signals is set (has been assigned a value) and false otherwise */
  public boolean isSetSignals() {
    return this.Signals != null;
  }

  public void setSignalsIsSet(boolean value) {
    if (!value) {
      this.Signals = null;
    }
  }

  public TDDIPerfChars getPerfChars() {
    return this.PerfChars;
  }

  public TDDIFunction setPerfChars(TDDIPerfChars PerfChars) {
    this.PerfChars = PerfChars;
    return this;
  }

  public void unsetPerfChars() {
    this.PerfChars = null;
  }

  /** Returns true if field PerfChars is set (has been assigned a value) and false otherwise */
  public boolean isSetPerfChars() {
    return this.PerfChars != null;
  }

  public void setPerfCharsIsSet(boolean value) {
    if (!value) {
      this.PerfChars = null;
    }
  }

  public int getFailureModelsSize() {
    return (this.FailureModels == null) ? 0 : this.FailureModels.size();
  }

  public java.util.Iterator<TDDIAbstractFailureModelRef> getFailureModelsIterator() {
    return (this.FailureModels == null) ? null : this.FailureModels.iterator();
  }

  public void addToFailureModels(TDDIAbstractFailureModelRef elem) {
    if (this.FailureModels == null) {
      this.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();
    }
    this.FailureModels.add(elem);
  }

  public java.util.List<TDDIAbstractFailureModelRef> getFailureModels() {
    return this.FailureModels;
  }

  public TDDIFunction setFailureModels(java.util.List<TDDIAbstractFailureModelRef> FailureModels) {
    this.FailureModels = FailureModels;
    return this;
  }

  public void unsetFailureModels() {
    this.FailureModels = null;
  }

  /** Returns true if field FailureModels is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureModels() {
    return this.FailureModels != null;
  }

  public void setFailureModelsIsSet(boolean value) {
    if (!value) {
      this.FailureModels = null;
    }
  }

  public int getMalfunctionsSize() {
    return (this.Malfunctions == null) ? 0 : this.Malfunctions.size();
  }

  public java.util.Iterator<TDDIMalfunctionRef> getMalfunctionsIterator() {
    return (this.Malfunctions == null) ? null : this.Malfunctions.iterator();
  }

  public void addToMalfunctions(TDDIMalfunctionRef elem) {
    if (this.Malfunctions == null) {
      this.Malfunctions = new java.util.ArrayList<TDDIMalfunctionRef>();
    }
    this.Malfunctions.add(elem);
  }

  public java.util.List<TDDIMalfunctionRef> getMalfunctions() {
    return this.Malfunctions;
  }

  public TDDIFunction setMalfunctions(java.util.List<TDDIMalfunctionRef> Malfunctions) {
    this.Malfunctions = Malfunctions;
    return this;
  }

  public void unsetMalfunctions() {
    this.Malfunctions = null;
  }

  /** Returns true if field Malfunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetMalfunctions() {
    return this.Malfunctions != null;
  }

  public void setMalfunctionsIsSet(boolean value) {
    if (!value) {
      this.Malfunctions = null;
    }
  }

  public TDDIAbstractAsset getAsAsset() {
    return this.AsAsset;
  }

  public TDDIFunction setAsAsset(TDDIAbstractAsset AsAsset) {
    this.AsAsset = AsAsset;
    return this;
  }

  public void unsetAsAsset() {
    this.AsAsset = null;
  }

  /** Returns true if field AsAsset is set (has been assigned a value) and false otherwise */
  public boolean isSetAsAsset() {
    return this.AsAsset != null;
  }

  public void setAsAssetIsSet(boolean value) {
    if (!value) {
      this.AsAsset = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case DEPENDABILITY_REQUIREMENTS:
      if (value == null) {
        unsetDependabilityRequirements();
      } else {
        setDependabilityRequirements((java.util.List<TDDIAbstractDependabilityRequirementRef>)value);
      }
      break;

    case ASSURANCE_LEVEL:
      if (value == null) {
        unsetAssuranceLevel();
      } else {
        setAssuranceLevel((TDDIAssuranceLevel)value);
      }
      break;

    case SUB_FUNCTIONS:
      if (value == null) {
        unsetSubFunctions();
      } else {
        setSubFunctions((java.util.List<TDDIAbstractFunctionRef>)value);
      }
      break;

    case PORTS:
      if (value == null) {
        unsetPorts();
      } else {
        setPorts((java.util.List<TDDIPort>)value);
      }
      break;

    case SIGNALS:
      if (value == null) {
        unsetSignals();
      } else {
        setSignals((java.util.List<TDDISignal>)value);
      }
      break;

    case PERF_CHARS:
      if (value == null) {
        unsetPerfChars();
      } else {
        setPerfChars((TDDIPerfChars)value);
      }
      break;

    case FAILURE_MODELS:
      if (value == null) {
        unsetFailureModels();
      } else {
        setFailureModels((java.util.List<TDDIAbstractFailureModelRef>)value);
      }
      break;

    case MALFUNCTIONS:
      if (value == null) {
        unsetMalfunctions();
      } else {
        setMalfunctions((java.util.List<TDDIMalfunctionRef>)value);
      }
      break;

    case AS_ASSET:
      if (value == null) {
        unsetAsAsset();
      } else {
        setAsAsset((TDDIAbstractAsset)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case DEPENDABILITY_REQUIREMENTS:
      return getDependabilityRequirements();

    case ASSURANCE_LEVEL:
      return getAssuranceLevel();

    case SUB_FUNCTIONS:
      return getSubFunctions();

    case PORTS:
      return getPorts();

    case SIGNALS:
      return getSignals();

    case PERF_CHARS:
      return getPerfChars();

    case FAILURE_MODELS:
      return getFailureModels();

    case MALFUNCTIONS:
      return getMalfunctions();

    case AS_ASSET:
      return getAsAsset();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case DEPENDABILITY_REQUIREMENTS:
      return isSetDependabilityRequirements();
    case ASSURANCE_LEVEL:
      return isSetAssuranceLevel();
    case SUB_FUNCTIONS:
      return isSetSubFunctions();
    case PORTS:
      return isSetPorts();
    case SIGNALS:
      return isSetSignals();
    case PERF_CHARS:
      return isSetPerfChars();
    case FAILURE_MODELS:
      return isSetFailureModels();
    case MALFUNCTIONS:
      return isSetMalfunctions();
    case AS_ASSET:
      return isSetAsAsset();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIFunction)
      return this.equals((TDDIFunction)that);
    return false;
  }

  public boolean equals(TDDIFunction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_DependabilityRequirements = true && this.isSetDependabilityRequirements();
    boolean that_present_DependabilityRequirements = true && that.isSetDependabilityRequirements();
    if (this_present_DependabilityRequirements || that_present_DependabilityRequirements) {
      if (!(this_present_DependabilityRequirements && that_present_DependabilityRequirements))
        return false;
      if (!this.DependabilityRequirements.equals(that.DependabilityRequirements))
        return false;
    }

    boolean this_present_AssuranceLevel = true && this.isSetAssuranceLevel();
    boolean that_present_AssuranceLevel = true && that.isSetAssuranceLevel();
    if (this_present_AssuranceLevel || that_present_AssuranceLevel) {
      if (!(this_present_AssuranceLevel && that_present_AssuranceLevel))
        return false;
      if (!this.AssuranceLevel.equals(that.AssuranceLevel))
        return false;
    }

    boolean this_present_SubFunctions = true && this.isSetSubFunctions();
    boolean that_present_SubFunctions = true && that.isSetSubFunctions();
    if (this_present_SubFunctions || that_present_SubFunctions) {
      if (!(this_present_SubFunctions && that_present_SubFunctions))
        return false;
      if (!this.SubFunctions.equals(that.SubFunctions))
        return false;
    }

    boolean this_present_Ports = true && this.isSetPorts();
    boolean that_present_Ports = true && that.isSetPorts();
    if (this_present_Ports || that_present_Ports) {
      if (!(this_present_Ports && that_present_Ports))
        return false;
      if (!this.Ports.equals(that.Ports))
        return false;
    }

    boolean this_present_Signals = true && this.isSetSignals();
    boolean that_present_Signals = true && that.isSetSignals();
    if (this_present_Signals || that_present_Signals) {
      if (!(this_present_Signals && that_present_Signals))
        return false;
      if (!this.Signals.equals(that.Signals))
        return false;
    }

    boolean this_present_PerfChars = true && this.isSetPerfChars();
    boolean that_present_PerfChars = true && that.isSetPerfChars();
    if (this_present_PerfChars || that_present_PerfChars) {
      if (!(this_present_PerfChars && that_present_PerfChars))
        return false;
      if (!this.PerfChars.equals(that.PerfChars))
        return false;
    }

    boolean this_present_FailureModels = true && this.isSetFailureModels();
    boolean that_present_FailureModels = true && that.isSetFailureModels();
    if (this_present_FailureModels || that_present_FailureModels) {
      if (!(this_present_FailureModels && that_present_FailureModels))
        return false;
      if (!this.FailureModels.equals(that.FailureModels))
        return false;
    }

    boolean this_present_Malfunctions = true && this.isSetMalfunctions();
    boolean that_present_Malfunctions = true && that.isSetMalfunctions();
    if (this_present_Malfunctions || that_present_Malfunctions) {
      if (!(this_present_Malfunctions && that_present_Malfunctions))
        return false;
      if (!this.Malfunctions.equals(that.Malfunctions))
        return false;
    }

    boolean this_present_AsAsset = true && this.isSetAsAsset();
    boolean that_present_AsAsset = true && that.isSetAsAsset();
    if (this_present_AsAsset || that_present_AsAsset) {
      if (!(this_present_AsAsset && that_present_AsAsset))
        return false;
      if (!this.AsAsset.equals(that.AsAsset))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetDependabilityRequirements()) ? 131071 : 524287);
    if (isSetDependabilityRequirements())
      hashCode = hashCode * 8191 + DependabilityRequirements.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssuranceLevel()) ? 131071 : 524287);
    if (isSetAssuranceLevel())
      hashCode = hashCode * 8191 + AssuranceLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubFunctions()) ? 131071 : 524287);
    if (isSetSubFunctions())
      hashCode = hashCode * 8191 + SubFunctions.hashCode();

    hashCode = hashCode * 8191 + ((isSetPorts()) ? 131071 : 524287);
    if (isSetPorts())
      hashCode = hashCode * 8191 + Ports.hashCode();

    hashCode = hashCode * 8191 + ((isSetSignals()) ? 131071 : 524287);
    if (isSetSignals())
      hashCode = hashCode * 8191 + Signals.hashCode();

    hashCode = hashCode * 8191 + ((isSetPerfChars()) ? 131071 : 524287);
    if (isSetPerfChars())
      hashCode = hashCode * 8191 + PerfChars.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailureModels()) ? 131071 : 524287);
    if (isSetFailureModels())
      hashCode = hashCode * 8191 + FailureModels.hashCode();

    hashCode = hashCode * 8191 + ((isSetMalfunctions()) ? 131071 : 524287);
    if (isSetMalfunctions())
      hashCode = hashCode * 8191 + Malfunctions.hashCode();

    hashCode = hashCode * 8191 + ((isSetAsAsset()) ? 131071 : 524287);
    if (isSetAsAsset())
      hashCode = hashCode * 8191 + AsAsset.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIFunction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDependabilityRequirements()).compareTo(other.isSetDependabilityRequirements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependabilityRequirements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DependabilityRequirements, other.DependabilityRequirements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssuranceLevel()).compareTo(other.isSetAssuranceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssuranceLevel, other.AssuranceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubFunctions()).compareTo(other.isSetSubFunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubFunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SubFunctions, other.SubFunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPorts()).compareTo(other.isSetPorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ports, other.Ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignals()).compareTo(other.isSetSignals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Signals, other.Signals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPerfChars()).compareTo(other.isSetPerfChars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerfChars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PerfChars, other.PerfChars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailureModels()).compareTo(other.isSetFailureModels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureModels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FailureModels, other.FailureModels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMalfunctions()).compareTo(other.isSetMalfunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMalfunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Malfunctions, other.Malfunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAsAsset()).compareTo(other.isSetAsAsset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsAsset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AsAsset, other.AsAsset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIFunction(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DependabilityRequirements:");
    if (this.DependabilityRequirements == null) {
      sb.append("null");
    } else {
      sb.append(this.DependabilityRequirements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssuranceLevel:");
    if (this.AssuranceLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.AssuranceLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SubFunctions:");
    if (this.SubFunctions == null) {
      sb.append("null");
    } else {
      sb.append(this.SubFunctions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Ports:");
    if (this.Ports == null) {
      sb.append("null");
    } else {
      sb.append(this.Ports);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Signals:");
    if (this.Signals == null) {
      sb.append("null");
    } else {
      sb.append(this.Signals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PerfChars:");
    if (this.PerfChars == null) {
      sb.append("null");
    } else {
      sb.append(this.PerfChars);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FailureModels:");
    if (this.FailureModels == null) {
      sb.append("null");
    } else {
      sb.append(this.FailureModels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Malfunctions:");
    if (this.Malfunctions == null) {
      sb.append("null");
    } else {
      sb.append(this.Malfunctions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AsAsset:");
    if (this.AsAsset == null) {
      sb.append("null");
    } else {
      sb.append(this.AsAsset);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (PerfChars != null) {
      PerfChars.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIFunctionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIFunctionStandardScheme getScheme() {
      return new TDDIFunctionStandardScheme();
    }
  }

  private static class TDDIFunctionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIFunction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list168.size);
                TDDIKeyValueMap _elem169;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = new TDDIKeyValueMap();
                  _elem169.read(iprot);
                  struct.KeyValueMaps.add(_elem169);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPENDABILITY_REQUIREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list171 = iprot.readListBegin();
                struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list171.size);
                TDDIAbstractDependabilityRequirementRef _elem172;
                for (int _i173 = 0; _i173 < _list171.size; ++_i173)
                {
                  _elem172 = new TDDIAbstractDependabilityRequirementRef();
                  _elem172.read(iprot);
                  struct.DependabilityRequirements.add(_elem172);
                }
                iprot.readListEnd();
              }
              struct.setDependabilityRequirementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASSURANCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AssuranceLevel = new TDDIAssuranceLevel();
              struct.AssuranceLevel.read(iprot);
              struct.setAssuranceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
                struct.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(_list174.size);
                TDDIAbstractFunctionRef _elem175;
                for (int _i176 = 0; _i176 < _list174.size; ++_i176)
                {
                  _elem175 = new TDDIAbstractFunctionRef();
                  _elem175.read(iprot);
                  struct.SubFunctions.add(_elem175);
                }
                iprot.readListEnd();
              }
              struct.setSubFunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list177 = iprot.readListBegin();
                struct.Ports = new java.util.ArrayList<TDDIPort>(_list177.size);
                TDDIPort _elem178;
                for (int _i179 = 0; _i179 < _list177.size; ++_i179)
                {
                  _elem178 = new TDDIPort();
                  _elem178.read(iprot);
                  struct.Ports.add(_elem178);
                }
                iprot.readListEnd();
              }
              struct.setPortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SIGNALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list180 = iprot.readListBegin();
                struct.Signals = new java.util.ArrayList<TDDISignal>(_list180.size);
                TDDISignal _elem181;
                for (int _i182 = 0; _i182 < _list180.size; ++_i182)
                {
                  _elem181 = new TDDISignal();
                  _elem181.read(iprot);
                  struct.Signals.add(_elem181);
                }
                iprot.readListEnd();
              }
              struct.setSignalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PERF_CHARS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.PerfChars = new TDDIPerfChars();
              struct.PerfChars.read(iprot);
              struct.setPerfCharsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FAILURE_MODELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list183 = iprot.readListBegin();
                struct.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(_list183.size);
                TDDIAbstractFailureModelRef _elem184;
                for (int _i185 = 0; _i185 < _list183.size; ++_i185)
                {
                  _elem184 = new TDDIAbstractFailureModelRef();
                  _elem184.read(iprot);
                  struct.FailureModels.add(_elem184);
                }
                iprot.readListEnd();
              }
              struct.setFailureModelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MALFUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                struct.Malfunctions = new java.util.ArrayList<TDDIMalfunctionRef>(_list186.size);
                TDDIMalfunctionRef _elem187;
                for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                {
                  _elem187 = new TDDIMalfunctionRef();
                  _elem187.read(iprot);
                  struct.Malfunctions.add(_elem187);
                }
                iprot.readListEnd();
              }
              struct.setMalfunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AS_ASSET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AsAsset = new TDDIAbstractAsset();
              struct.AsAsset.read(iprot);
              struct.setAsAssetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIFunction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter189 : struct.KeyValueMaps)
          {
            _iter189.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.DependabilityRequirements != null) {
        oprot.writeFieldBegin(DEPENDABILITY_REQUIREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DependabilityRequirements.size()));
          for (TDDIAbstractDependabilityRequirementRef _iter190 : struct.DependabilityRequirements)
          {
            _iter190.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AssuranceLevel != null) {
        oprot.writeFieldBegin(ASSURANCE_LEVEL_FIELD_DESC);
        struct.AssuranceLevel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.SubFunctions != null) {
        oprot.writeFieldBegin(SUB_FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SubFunctions.size()));
          for (TDDIAbstractFunctionRef _iter191 : struct.SubFunctions)
          {
            _iter191.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Ports != null) {
        oprot.writeFieldBegin(PORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Ports.size()));
          for (TDDIPort _iter192 : struct.Ports)
          {
            _iter192.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Signals != null) {
        oprot.writeFieldBegin(SIGNALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Signals.size()));
          for (TDDISignal _iter193 : struct.Signals)
          {
            _iter193.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.PerfChars != null) {
        oprot.writeFieldBegin(PERF_CHARS_FIELD_DESC);
        struct.PerfChars.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.FailureModels != null) {
        oprot.writeFieldBegin(FAILURE_MODELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.FailureModels.size()));
          for (TDDIAbstractFailureModelRef _iter194 : struct.FailureModels)
          {
            _iter194.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Malfunctions != null) {
        oprot.writeFieldBegin(MALFUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Malfunctions.size()));
          for (TDDIMalfunctionRef _iter195 : struct.Malfunctions)
          {
            _iter195.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AsAsset != null) {
        oprot.writeFieldBegin(AS_ASSET_FIELD_DESC);
        struct.AsAsset.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIFunctionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIFunctionTupleScheme getScheme() {
      return new TDDIFunctionTupleScheme();
    }
  }

  private static class TDDIFunctionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIFunction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetDependabilityRequirements()) {
        optionals.set(4);
      }
      if (struct.isSetAssuranceLevel()) {
        optionals.set(5);
      }
      if (struct.isSetSubFunctions()) {
        optionals.set(6);
      }
      if (struct.isSetPorts()) {
        optionals.set(7);
      }
      if (struct.isSetSignals()) {
        optionals.set(8);
      }
      if (struct.isSetPerfChars()) {
        optionals.set(9);
      }
      if (struct.isSetFailureModels()) {
        optionals.set(10);
      }
      if (struct.isSetMalfunctions()) {
        optionals.set(11);
      }
      if (struct.isSetAsAsset()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter196 : struct.KeyValueMaps)
          {
            _iter196.write(oprot);
          }
        }
      }
      if (struct.isSetDependabilityRequirements()) {
        {
          oprot.writeI32(struct.DependabilityRequirements.size());
          for (TDDIAbstractDependabilityRequirementRef _iter197 : struct.DependabilityRequirements)
          {
            _iter197.write(oprot);
          }
        }
      }
      if (struct.isSetAssuranceLevel()) {
        struct.AssuranceLevel.write(oprot);
      }
      if (struct.isSetSubFunctions()) {
        {
          oprot.writeI32(struct.SubFunctions.size());
          for (TDDIAbstractFunctionRef _iter198 : struct.SubFunctions)
          {
            _iter198.write(oprot);
          }
        }
      }
      if (struct.isSetPorts()) {
        {
          oprot.writeI32(struct.Ports.size());
          for (TDDIPort _iter199 : struct.Ports)
          {
            _iter199.write(oprot);
          }
        }
      }
      if (struct.isSetSignals()) {
        {
          oprot.writeI32(struct.Signals.size());
          for (TDDISignal _iter200 : struct.Signals)
          {
            _iter200.write(oprot);
          }
        }
      }
      if (struct.isSetPerfChars()) {
        struct.PerfChars.write(oprot);
      }
      if (struct.isSetFailureModels()) {
        {
          oprot.writeI32(struct.FailureModels.size());
          for (TDDIAbstractFailureModelRef _iter201 : struct.FailureModels)
          {
            _iter201.write(oprot);
          }
        }
      }
      if (struct.isSetMalfunctions()) {
        {
          oprot.writeI32(struct.Malfunctions.size());
          for (TDDIMalfunctionRef _iter202 : struct.Malfunctions)
          {
            _iter202.write(oprot);
          }
        }
      }
      if (struct.isSetAsAsset()) {
        struct.AsAsset.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIFunction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list203 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list203.size);
          TDDIKeyValueMap _elem204;
          for (int _i205 = 0; _i205 < _list203.size; ++_i205)
          {
            _elem204 = new TDDIKeyValueMap();
            _elem204.read(iprot);
            struct.KeyValueMaps.add(_elem204);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list206 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list206.size);
          TDDIAbstractDependabilityRequirementRef _elem207;
          for (int _i208 = 0; _i208 < _list206.size; ++_i208)
          {
            _elem207 = new TDDIAbstractDependabilityRequirementRef();
            _elem207.read(iprot);
            struct.DependabilityRequirements.add(_elem207);
          }
        }
        struct.setDependabilityRequirementsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.AssuranceLevel = new TDDIAssuranceLevel();
        struct.AssuranceLevel.read(iprot);
        struct.setAssuranceLevelIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list209 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SubFunctions = new java.util.ArrayList<TDDIAbstractFunctionRef>(_list209.size);
          TDDIAbstractFunctionRef _elem210;
          for (int _i211 = 0; _i211 < _list209.size; ++_i211)
          {
            _elem210 = new TDDIAbstractFunctionRef();
            _elem210.read(iprot);
            struct.SubFunctions.add(_elem210);
          }
        }
        struct.setSubFunctionsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list212 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Ports = new java.util.ArrayList<TDDIPort>(_list212.size);
          TDDIPort _elem213;
          for (int _i214 = 0; _i214 < _list212.size; ++_i214)
          {
            _elem213 = new TDDIPort();
            _elem213.read(iprot);
            struct.Ports.add(_elem213);
          }
        }
        struct.setPortsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list215 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Signals = new java.util.ArrayList<TDDISignal>(_list215.size);
          TDDISignal _elem216;
          for (int _i217 = 0; _i217 < _list215.size; ++_i217)
          {
            _elem216 = new TDDISignal();
            _elem216.read(iprot);
            struct.Signals.add(_elem216);
          }
        }
        struct.setSignalsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.PerfChars = new TDDIPerfChars();
        struct.PerfChars.read(iprot);
        struct.setPerfCharsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list218 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.FailureModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(_list218.size);
          TDDIAbstractFailureModelRef _elem219;
          for (int _i220 = 0; _i220 < _list218.size; ++_i220)
          {
            _elem219 = new TDDIAbstractFailureModelRef();
            _elem219.read(iprot);
            struct.FailureModels.add(_elem219);
          }
        }
        struct.setFailureModelsIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Malfunctions = new java.util.ArrayList<TDDIMalfunctionRef>(_list221.size);
          TDDIMalfunctionRef _elem222;
          for (int _i223 = 0; _i223 < _list221.size; ++_i223)
          {
            _elem222 = new TDDIMalfunctionRef();
            _elem222.read(iprot);
            struct.Malfunctions.add(_elem222);
          }
        }
        struct.setMalfunctionsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.AsAsset = new TDDIAbstractAsset();
        struct.AsAsset.read(iprot);
        struct.setAsAssetIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

