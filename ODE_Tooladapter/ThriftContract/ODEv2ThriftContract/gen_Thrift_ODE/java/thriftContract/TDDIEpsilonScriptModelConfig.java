/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-13")
public class TDDIEpsilonScriptModelConfig implements org.apache.thrift.TBase<TDDIEpsilonScriptModelConfig, TDDIEpsilonScriptModelConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIEpsilonScriptModelConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIEpsilonScriptModelConfig");

  private static final org.apache.thrift.protocol.TField MODEL_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("ModelUri", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ModelName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("Alias", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField READ_ON_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("ReadOnLoad", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField STORE_ON_DISPOSAL_FIELD_DESC = new org.apache.thrift.protocol.TField("StoreOnDisposal", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIEpsilonScriptModelConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIEpsilonScriptModelConfigTupleSchemeFactory();

  public java.lang.String ModelUri; // required
  public java.lang.String ModelName; // required
  public java.lang.String Alias; // required
  public boolean ReadOnLoad; // required
  public boolean StoreOnDisposal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL_URI((short)1, "ModelUri"),
    MODEL_NAME((short)2, "ModelName"),
    ALIAS((short)3, "Alias"),
    READ_ON_LOAD((short)4, "ReadOnLoad"),
    STORE_ON_DISPOSAL((short)5, "StoreOnDisposal");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL_URI
          return MODEL_URI;
        case 2: // MODEL_NAME
          return MODEL_NAME;
        case 3: // ALIAS
          return ALIAS;
        case 4: // READ_ON_LOAD
          return READ_ON_LOAD;
        case 5: // STORE_ON_DISPOSAL
          return STORE_ON_DISPOSAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READONLOAD_ISSET_ID = 0;
  private static final int __STOREONDISPOSAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL_URI, new org.apache.thrift.meta_data.FieldMetaData("ModelUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("ModelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIAS, new org.apache.thrift.meta_data.FieldMetaData("Alias", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.READ_ON_LOAD, new org.apache.thrift.meta_data.FieldMetaData("ReadOnLoad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STORE_ON_DISPOSAL, new org.apache.thrift.meta_data.FieldMetaData("StoreOnDisposal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIEpsilonScriptModelConfig.class, metaDataMap);
  }

  public TDDIEpsilonScriptModelConfig() {
    this.ModelUri = "";

    this.ModelName = "";

    this.Alias = "";

  }

  public TDDIEpsilonScriptModelConfig(
    java.lang.String ModelUri,
    java.lang.String ModelName,
    java.lang.String Alias,
    boolean ReadOnLoad,
    boolean StoreOnDisposal)
  {
    this();
    this.ModelUri = ModelUri;
    this.ModelName = ModelName;
    this.Alias = Alias;
    this.ReadOnLoad = ReadOnLoad;
    setReadOnLoadIsSet(true);
    this.StoreOnDisposal = StoreOnDisposal;
    setStoreOnDisposalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIEpsilonScriptModelConfig(TDDIEpsilonScriptModelConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetModelUri()) {
      this.ModelUri = other.ModelUri;
    }
    if (other.isSetModelName()) {
      this.ModelName = other.ModelName;
    }
    if (other.isSetAlias()) {
      this.Alias = other.Alias;
    }
    this.ReadOnLoad = other.ReadOnLoad;
    this.StoreOnDisposal = other.StoreOnDisposal;
  }

  public TDDIEpsilonScriptModelConfig deepCopy() {
    return new TDDIEpsilonScriptModelConfig(this);
  }

  @Override
  public void clear() {
    this.ModelUri = "";

    this.ModelName = "";

    this.Alias = "";

    setReadOnLoadIsSet(false);
    this.ReadOnLoad = false;
    setStoreOnDisposalIsSet(false);
    this.StoreOnDisposal = false;
  }

  public java.lang.String getModelUri() {
    return this.ModelUri;
  }

  public TDDIEpsilonScriptModelConfig setModelUri(java.lang.String ModelUri) {
    this.ModelUri = ModelUri;
    return this;
  }

  public void unsetModelUri() {
    this.ModelUri = null;
  }

  /** Returns true if field ModelUri is set (has been assigned a value) and false otherwise */
  public boolean isSetModelUri() {
    return this.ModelUri != null;
  }

  public void setModelUriIsSet(boolean value) {
    if (!value) {
      this.ModelUri = null;
    }
  }

  public java.lang.String getModelName() {
    return this.ModelName;
  }

  public TDDIEpsilonScriptModelConfig setModelName(java.lang.String ModelName) {
    this.ModelName = ModelName;
    return this;
  }

  public void unsetModelName() {
    this.ModelName = null;
  }

  /** Returns true if field ModelName is set (has been assigned a value) and false otherwise */
  public boolean isSetModelName() {
    return this.ModelName != null;
  }

  public void setModelNameIsSet(boolean value) {
    if (!value) {
      this.ModelName = null;
    }
  }

  public java.lang.String getAlias() {
    return this.Alias;
  }

  public TDDIEpsilonScriptModelConfig setAlias(java.lang.String Alias) {
    this.Alias = Alias;
    return this;
  }

  public void unsetAlias() {
    this.Alias = null;
  }

  /** Returns true if field Alias is set (has been assigned a value) and false otherwise */
  public boolean isSetAlias() {
    return this.Alias != null;
  }

  public void setAliasIsSet(boolean value) {
    if (!value) {
      this.Alias = null;
    }
  }

  public boolean isReadOnLoad() {
    return this.ReadOnLoad;
  }

  public TDDIEpsilonScriptModelConfig setReadOnLoad(boolean ReadOnLoad) {
    this.ReadOnLoad = ReadOnLoad;
    setReadOnLoadIsSet(true);
    return this;
  }

  public void unsetReadOnLoad() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READONLOAD_ISSET_ID);
  }

  /** Returns true if field ReadOnLoad is set (has been assigned a value) and false otherwise */
  public boolean isSetReadOnLoad() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READONLOAD_ISSET_ID);
  }

  public void setReadOnLoadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READONLOAD_ISSET_ID, value);
  }

  public boolean isStoreOnDisposal() {
    return this.StoreOnDisposal;
  }

  public TDDIEpsilonScriptModelConfig setStoreOnDisposal(boolean StoreOnDisposal) {
    this.StoreOnDisposal = StoreOnDisposal;
    setStoreOnDisposalIsSet(true);
    return this;
  }

  public void unsetStoreOnDisposal() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOREONDISPOSAL_ISSET_ID);
  }

  /** Returns true if field StoreOnDisposal is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreOnDisposal() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOREONDISPOSAL_ISSET_ID);
  }

  public void setStoreOnDisposalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOREONDISPOSAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case MODEL_URI:
      if (value == null) {
        unsetModelUri();
      } else {
        setModelUri((java.lang.String)value);
      }
      break;

    case MODEL_NAME:
      if (value == null) {
        unsetModelName();
      } else {
        setModelName((java.lang.String)value);
      }
      break;

    case ALIAS:
      if (value == null) {
        unsetAlias();
      } else {
        setAlias((java.lang.String)value);
      }
      break;

    case READ_ON_LOAD:
      if (value == null) {
        unsetReadOnLoad();
      } else {
        setReadOnLoad((java.lang.Boolean)value);
      }
      break;

    case STORE_ON_DISPOSAL:
      if (value == null) {
        unsetStoreOnDisposal();
      } else {
        setStoreOnDisposal((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL_URI:
      return getModelUri();

    case MODEL_NAME:
      return getModelName();

    case ALIAS:
      return getAlias();

    case READ_ON_LOAD:
      return isReadOnLoad();

    case STORE_ON_DISPOSAL:
      return isStoreOnDisposal();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MODEL_URI:
      return isSetModelUri();
    case MODEL_NAME:
      return isSetModelName();
    case ALIAS:
      return isSetAlias();
    case READ_ON_LOAD:
      return isSetReadOnLoad();
    case STORE_ON_DISPOSAL:
      return isSetStoreOnDisposal();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIEpsilonScriptModelConfig)
      return this.equals((TDDIEpsilonScriptModelConfig)that);
    return false;
  }

  public boolean equals(TDDIEpsilonScriptModelConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ModelUri = true && this.isSetModelUri();
    boolean that_present_ModelUri = true && that.isSetModelUri();
    if (this_present_ModelUri || that_present_ModelUri) {
      if (!(this_present_ModelUri && that_present_ModelUri))
        return false;
      if (!this.ModelUri.equals(that.ModelUri))
        return false;
    }

    boolean this_present_ModelName = true && this.isSetModelName();
    boolean that_present_ModelName = true && that.isSetModelName();
    if (this_present_ModelName || that_present_ModelName) {
      if (!(this_present_ModelName && that_present_ModelName))
        return false;
      if (!this.ModelName.equals(that.ModelName))
        return false;
    }

    boolean this_present_Alias = true && this.isSetAlias();
    boolean that_present_Alias = true && that.isSetAlias();
    if (this_present_Alias || that_present_Alias) {
      if (!(this_present_Alias && that_present_Alias))
        return false;
      if (!this.Alias.equals(that.Alias))
        return false;
    }

    boolean this_present_ReadOnLoad = true;
    boolean that_present_ReadOnLoad = true;
    if (this_present_ReadOnLoad || that_present_ReadOnLoad) {
      if (!(this_present_ReadOnLoad && that_present_ReadOnLoad))
        return false;
      if (this.ReadOnLoad != that.ReadOnLoad)
        return false;
    }

    boolean this_present_StoreOnDisposal = true;
    boolean that_present_StoreOnDisposal = true;
    if (this_present_StoreOnDisposal || that_present_StoreOnDisposal) {
      if (!(this_present_StoreOnDisposal && that_present_StoreOnDisposal))
        return false;
      if (this.StoreOnDisposal != that.StoreOnDisposal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetModelUri()) ? 131071 : 524287);
    if (isSetModelUri())
      hashCode = hashCode * 8191 + ModelUri.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelName()) ? 131071 : 524287);
    if (isSetModelName())
      hashCode = hashCode * 8191 + ModelName.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlias()) ? 131071 : 524287);
    if (isSetAlias())
      hashCode = hashCode * 8191 + Alias.hashCode();

    hashCode = hashCode * 8191 + ((ReadOnLoad) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((StoreOnDisposal) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TDDIEpsilonScriptModelConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetModelUri()).compareTo(other.isSetModelUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ModelUri, other.ModelUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelName()).compareTo(other.isSetModelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ModelName, other.ModelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAlias()).compareTo(other.isSetAlias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Alias, other.Alias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadOnLoad()).compareTo(other.isSetReadOnLoad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadOnLoad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReadOnLoad, other.ReadOnLoad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStoreOnDisposal()).compareTo(other.isSetStoreOnDisposal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreOnDisposal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StoreOnDisposal, other.StoreOnDisposal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIEpsilonScriptModelConfig(");
    boolean first = true;

    sb.append("ModelUri:");
    if (this.ModelUri == null) {
      sb.append("null");
    } else {
      sb.append(this.ModelUri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ModelName:");
    if (this.ModelName == null) {
      sb.append("null");
    } else {
      sb.append(this.ModelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Alias:");
    if (this.Alias == null) {
      sb.append("null");
    } else {
      sb.append(this.Alias);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ReadOnLoad:");
    sb.append(this.ReadOnLoad);
    first = false;
    if (!first) sb.append(", ");
    sb.append("StoreOnDisposal:");
    sb.append(this.StoreOnDisposal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIEpsilonScriptModelConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIEpsilonScriptModelConfigStandardScheme getScheme() {
      return new TDDIEpsilonScriptModelConfigStandardScheme();
    }
  }

  private static class TDDIEpsilonScriptModelConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIEpsilonScriptModelConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIEpsilonScriptModelConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ModelUri = iprot.readString();
              struct.setModelUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ModelName = iprot.readString();
              struct.setModelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Alias = iprot.readString();
              struct.setAliasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // READ_ON_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ReadOnLoad = iprot.readBool();
              struct.setReadOnLoadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STORE_ON_DISPOSAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.StoreOnDisposal = iprot.readBool();
              struct.setStoreOnDisposalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIEpsilonScriptModelConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ModelUri != null) {
        oprot.writeFieldBegin(MODEL_URI_FIELD_DESC);
        oprot.writeString(struct.ModelUri);
        oprot.writeFieldEnd();
      }
      if (struct.ModelName != null) {
        oprot.writeFieldBegin(MODEL_NAME_FIELD_DESC);
        oprot.writeString(struct.ModelName);
        oprot.writeFieldEnd();
      }
      if (struct.Alias != null) {
        oprot.writeFieldBegin(ALIAS_FIELD_DESC);
        oprot.writeString(struct.Alias);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READ_ON_LOAD_FIELD_DESC);
      oprot.writeBool(struct.ReadOnLoad);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STORE_ON_DISPOSAL_FIELD_DESC);
      oprot.writeBool(struct.StoreOnDisposal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIEpsilonScriptModelConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIEpsilonScriptModelConfigTupleScheme getScheme() {
      return new TDDIEpsilonScriptModelConfigTupleScheme();
    }
  }

  private static class TDDIEpsilonScriptModelConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIEpsilonScriptModelConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIEpsilonScriptModelConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetModelUri()) {
        optionals.set(0);
      }
      if (struct.isSetModelName()) {
        optionals.set(1);
      }
      if (struct.isSetAlias()) {
        optionals.set(2);
      }
      if (struct.isSetReadOnLoad()) {
        optionals.set(3);
      }
      if (struct.isSetStoreOnDisposal()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetModelUri()) {
        oprot.writeString(struct.ModelUri);
      }
      if (struct.isSetModelName()) {
        oprot.writeString(struct.ModelName);
      }
      if (struct.isSetAlias()) {
        oprot.writeString(struct.Alias);
      }
      if (struct.isSetReadOnLoad()) {
        oprot.writeBool(struct.ReadOnLoad);
      }
      if (struct.isSetStoreOnDisposal()) {
        oprot.writeBool(struct.StoreOnDisposal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIEpsilonScriptModelConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ModelUri = iprot.readString();
        struct.setModelUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ModelName = iprot.readString();
        struct.setModelNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Alias = iprot.readString();
        struct.setAliasIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ReadOnLoad = iprot.readBool();
        struct.setReadOnLoadIsSet(true);
      }
      if (incoming.get(4)) {
        struct.StoreOnDisposal = iprot.readBool();
        struct.setStoreOnDisposalIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

