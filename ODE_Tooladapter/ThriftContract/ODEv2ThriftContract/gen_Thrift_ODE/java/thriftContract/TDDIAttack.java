/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-13")
public class TDDIAttack implements org.apache.thrift.TBase<TDDIAttack, TDDIAttack._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAttack> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAttack");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("Category", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FINANCIAL_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("FinancialCost", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField FINANCIAL_COST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("FinancialCostType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TIME_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("TimeRequired", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("TimeUnit", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DIFFICULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("Difficulty", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DETECTABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("Detectability", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXPLOITED_VULNERABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("ExploitedVulnerabilities", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField VIOLATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("Violations", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAttackStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAttackTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.lang.String Category; // required
  public double FinancialCost; // required
  /**
   * 
   * @see TDDIFinancialCostType
   */
  public TDDIFinancialCostType FinancialCostType; // required
  public double TimeRequired; // required
  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDITimeUnit TimeUnit; // required
  public java.lang.String Difficulty; // required
  public java.lang.String Detectability; // required
  public java.util.List<TDDIVulnerabilityRef> ExploitedVulnerabilities; // required
  public java.util.List<TDDISecurityViolationRef> Violations; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    CATEGORY((short)5, "Category"),
    FINANCIAL_COST((short)6, "FinancialCost"),
    /**
     * 
     * @see TDDIFinancialCostType
     */
    FINANCIAL_COST_TYPE((short)7, "FinancialCostType"),
    TIME_REQUIRED((short)8, "TimeRequired"),
    /**
     * 
     * @see TDDITimeUnit
     */
    TIME_UNIT((short)9, "TimeUnit"),
    DIFFICULTY((short)10, "Difficulty"),
    DETECTABILITY((short)11, "Detectability"),
    EXPLOITED_VULNERABILITIES((short)12, "ExploitedVulnerabilities"),
    VIOLATIONS((short)13, "Violations");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // CATEGORY
          return CATEGORY;
        case 6: // FINANCIAL_COST
          return FINANCIAL_COST;
        case 7: // FINANCIAL_COST_TYPE
          return FINANCIAL_COST_TYPE;
        case 8: // TIME_REQUIRED
          return TIME_REQUIRED;
        case 9: // TIME_UNIT
          return TIME_UNIT;
        case 10: // DIFFICULTY
          return DIFFICULTY;
        case 11: // DETECTABILITY
          return DETECTABILITY;
        case 12: // EXPLOITED_VULNERABILITIES
          return EXPLOITED_VULNERABILITIES;
        case 13: // VIOLATIONS
          return VIOLATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FINANCIALCOST_ISSET_ID = 1;
  private static final int __TIMEREQUIRED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("Category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINANCIAL_COST, new org.apache.thrift.meta_data.FieldMetaData("FinancialCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINANCIAL_COST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("FinancialCostType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIFinancialCostType.class)));
    tmpMap.put(_Fields.TIME_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("TimeRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME_UNIT, new org.apache.thrift.meta_data.FieldMetaData("TimeUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDITimeUnit.class)));
    tmpMap.put(_Fields.DIFFICULTY, new org.apache.thrift.meta_data.FieldMetaData("Difficulty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETECTABILITY, new org.apache.thrift.meta_data.FieldMetaData("Detectability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPLOITED_VULNERABILITIES, new org.apache.thrift.meta_data.FieldMetaData("ExploitedVulnerabilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIVulnerabilityRef.class))));
    tmpMap.put(_Fields.VIOLATIONS, new org.apache.thrift.meta_data.FieldMetaData("Violations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISecurityViolationRef.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAttack.class, metaDataMap);
  }

  public TDDIAttack() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.Category = "";

    this.FinancialCost = 0;

    this.FinancialCostType = thriftContract.TDDIFinancialCostType.FCTEUR;

    this.TimeRequired = 0;

    this.TimeUnit = thriftContract.TDDITimeUnit.TUMinute;

    this.Difficulty = "";

    this.Detectability = "";

    this.ExploitedVulnerabilities = new java.util.ArrayList<TDDIVulnerabilityRef>();

    this.Violations = new java.util.ArrayList<TDDISecurityViolationRef>();

  }

  public TDDIAttack(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.lang.String Category,
    double FinancialCost,
    TDDIFinancialCostType FinancialCostType,
    double TimeRequired,
    TDDITimeUnit TimeUnit,
    java.lang.String Difficulty,
    java.lang.String Detectability,
    java.util.List<TDDIVulnerabilityRef> ExploitedVulnerabilities,
    java.util.List<TDDISecurityViolationRef> Violations)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.Category = Category;
    this.FinancialCost = FinancialCost;
    setFinancialCostIsSet(true);
    this.FinancialCostType = FinancialCostType;
    this.TimeRequired = TimeRequired;
    setTimeRequiredIsSet(true);
    this.TimeUnit = TimeUnit;
    this.Difficulty = Difficulty;
    this.Detectability = Detectability;
    this.ExploitedVulnerabilities = ExploitedVulnerabilities;
    this.Violations = Violations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAttack(TDDIAttack other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetCategory()) {
      this.Category = other.Category;
    }
    this.FinancialCost = other.FinancialCost;
    if (other.isSetFinancialCostType()) {
      this.FinancialCostType = other.FinancialCostType;
    }
    this.TimeRequired = other.TimeRequired;
    if (other.isSetTimeUnit()) {
      this.TimeUnit = other.TimeUnit;
    }
    if (other.isSetDifficulty()) {
      this.Difficulty = other.Difficulty;
    }
    if (other.isSetDetectability()) {
      this.Detectability = other.Detectability;
    }
    if (other.isSetExploitedVulnerabilities()) {
      java.util.List<TDDIVulnerabilityRef> __this__ExploitedVulnerabilities = new java.util.ArrayList<TDDIVulnerabilityRef>(other.ExploitedVulnerabilities.size());
      for (TDDIVulnerabilityRef other_element : other.ExploitedVulnerabilities) {
        __this__ExploitedVulnerabilities.add(new TDDIVulnerabilityRef(other_element));
      }
      this.ExploitedVulnerabilities = __this__ExploitedVulnerabilities;
    }
    if (other.isSetViolations()) {
      java.util.List<TDDISecurityViolationRef> __this__Violations = new java.util.ArrayList<TDDISecurityViolationRef>(other.Violations.size());
      for (TDDISecurityViolationRef other_element : other.Violations) {
        __this__Violations.add(new TDDISecurityViolationRef(other_element));
      }
      this.Violations = __this__Violations;
    }
  }

  public TDDIAttack deepCopy() {
    return new TDDIAttack(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.Category = "";

    this.FinancialCost = 0;

    this.FinancialCostType = thriftContract.TDDIFinancialCostType.FCTEUR;

    this.TimeRequired = 0;

    this.TimeUnit = thriftContract.TDDITimeUnit.TUMinute;

    this.Difficulty = "";

    this.Detectability = "";

    this.ExploitedVulnerabilities = new java.util.ArrayList<TDDIVulnerabilityRef>();

    this.Violations = new java.util.ArrayList<TDDISecurityViolationRef>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDIAttack setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIAttack setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIAttack setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIAttack setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public java.lang.String getCategory() {
    return this.Category;
  }

  public TDDIAttack setCategory(java.lang.String Category) {
    this.Category = Category;
    return this;
  }

  public void unsetCategory() {
    this.Category = null;
  }

  /** Returns true if field Category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.Category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.Category = null;
    }
  }

  public double getFinancialCost() {
    return this.FinancialCost;
  }

  public TDDIAttack setFinancialCost(double FinancialCost) {
    this.FinancialCost = FinancialCost;
    setFinancialCostIsSet(true);
    return this;
  }

  public void unsetFinancialCost() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINANCIALCOST_ISSET_ID);
  }

  /** Returns true if field FinancialCost is set (has been assigned a value) and false otherwise */
  public boolean isSetFinancialCost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINANCIALCOST_ISSET_ID);
  }

  public void setFinancialCostIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINANCIALCOST_ISSET_ID, value);
  }

  /**
   * 
   * @see TDDIFinancialCostType
   */
  public TDDIFinancialCostType getFinancialCostType() {
    return this.FinancialCostType;
  }

  /**
   * 
   * @see TDDIFinancialCostType
   */
  public TDDIAttack setFinancialCostType(TDDIFinancialCostType FinancialCostType) {
    this.FinancialCostType = FinancialCostType;
    return this;
  }

  public void unsetFinancialCostType() {
    this.FinancialCostType = null;
  }

  /** Returns true if field FinancialCostType is set (has been assigned a value) and false otherwise */
  public boolean isSetFinancialCostType() {
    return this.FinancialCostType != null;
  }

  public void setFinancialCostTypeIsSet(boolean value) {
    if (!value) {
      this.FinancialCostType = null;
    }
  }

  public double getTimeRequired() {
    return this.TimeRequired;
  }

  public TDDIAttack setTimeRequired(double TimeRequired) {
    this.TimeRequired = TimeRequired;
    setTimeRequiredIsSet(true);
    return this;
  }

  public void unsetTimeRequired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEREQUIRED_ISSET_ID);
  }

  /** Returns true if field TimeRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRequired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEREQUIRED_ISSET_ID);
  }

  public void setTimeRequiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEREQUIRED_ISSET_ID, value);
  }

  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDITimeUnit getTimeUnit() {
    return this.TimeUnit;
  }

  /**
   * 
   * @see TDDITimeUnit
   */
  public TDDIAttack setTimeUnit(TDDITimeUnit TimeUnit) {
    this.TimeUnit = TimeUnit;
    return this;
  }

  public void unsetTimeUnit() {
    this.TimeUnit = null;
  }

  /** Returns true if field TimeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeUnit() {
    return this.TimeUnit != null;
  }

  public void setTimeUnitIsSet(boolean value) {
    if (!value) {
      this.TimeUnit = null;
    }
  }

  public java.lang.String getDifficulty() {
    return this.Difficulty;
  }

  public TDDIAttack setDifficulty(java.lang.String Difficulty) {
    this.Difficulty = Difficulty;
    return this;
  }

  public void unsetDifficulty() {
    this.Difficulty = null;
  }

  /** Returns true if field Difficulty is set (has been assigned a value) and false otherwise */
  public boolean isSetDifficulty() {
    return this.Difficulty != null;
  }

  public void setDifficultyIsSet(boolean value) {
    if (!value) {
      this.Difficulty = null;
    }
  }

  public java.lang.String getDetectability() {
    return this.Detectability;
  }

  public TDDIAttack setDetectability(java.lang.String Detectability) {
    this.Detectability = Detectability;
    return this;
  }

  public void unsetDetectability() {
    this.Detectability = null;
  }

  /** Returns true if field Detectability is set (has been assigned a value) and false otherwise */
  public boolean isSetDetectability() {
    return this.Detectability != null;
  }

  public void setDetectabilityIsSet(boolean value) {
    if (!value) {
      this.Detectability = null;
    }
  }

  public int getExploitedVulnerabilitiesSize() {
    return (this.ExploitedVulnerabilities == null) ? 0 : this.ExploitedVulnerabilities.size();
  }

  public java.util.Iterator<TDDIVulnerabilityRef> getExploitedVulnerabilitiesIterator() {
    return (this.ExploitedVulnerabilities == null) ? null : this.ExploitedVulnerabilities.iterator();
  }

  public void addToExploitedVulnerabilities(TDDIVulnerabilityRef elem) {
    if (this.ExploitedVulnerabilities == null) {
      this.ExploitedVulnerabilities = new java.util.ArrayList<TDDIVulnerabilityRef>();
    }
    this.ExploitedVulnerabilities.add(elem);
  }

  public java.util.List<TDDIVulnerabilityRef> getExploitedVulnerabilities() {
    return this.ExploitedVulnerabilities;
  }

  public TDDIAttack setExploitedVulnerabilities(java.util.List<TDDIVulnerabilityRef> ExploitedVulnerabilities) {
    this.ExploitedVulnerabilities = ExploitedVulnerabilities;
    return this;
  }

  public void unsetExploitedVulnerabilities() {
    this.ExploitedVulnerabilities = null;
  }

  /** Returns true if field ExploitedVulnerabilities is set (has been assigned a value) and false otherwise */
  public boolean isSetExploitedVulnerabilities() {
    return this.ExploitedVulnerabilities != null;
  }

  public void setExploitedVulnerabilitiesIsSet(boolean value) {
    if (!value) {
      this.ExploitedVulnerabilities = null;
    }
  }

  public int getViolationsSize() {
    return (this.Violations == null) ? 0 : this.Violations.size();
  }

  public java.util.Iterator<TDDISecurityViolationRef> getViolationsIterator() {
    return (this.Violations == null) ? null : this.Violations.iterator();
  }

  public void addToViolations(TDDISecurityViolationRef elem) {
    if (this.Violations == null) {
      this.Violations = new java.util.ArrayList<TDDISecurityViolationRef>();
    }
    this.Violations.add(elem);
  }

  public java.util.List<TDDISecurityViolationRef> getViolations() {
    return this.Violations;
  }

  public TDDIAttack setViolations(java.util.List<TDDISecurityViolationRef> Violations) {
    this.Violations = Violations;
    return this;
  }

  public void unsetViolations() {
    this.Violations = null;
  }

  /** Returns true if field Violations is set (has been assigned a value) and false otherwise */
  public boolean isSetViolations() {
    return this.Violations != null;
  }

  public void setViolationsIsSet(boolean value) {
    if (!value) {
      this.Violations = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((java.lang.String)value);
      }
      break;

    case FINANCIAL_COST:
      if (value == null) {
        unsetFinancialCost();
      } else {
        setFinancialCost((java.lang.Double)value);
      }
      break;

    case FINANCIAL_COST_TYPE:
      if (value == null) {
        unsetFinancialCostType();
      } else {
        setFinancialCostType((TDDIFinancialCostType)value);
      }
      break;

    case TIME_REQUIRED:
      if (value == null) {
        unsetTimeRequired();
      } else {
        setTimeRequired((java.lang.Double)value);
      }
      break;

    case TIME_UNIT:
      if (value == null) {
        unsetTimeUnit();
      } else {
        setTimeUnit((TDDITimeUnit)value);
      }
      break;

    case DIFFICULTY:
      if (value == null) {
        unsetDifficulty();
      } else {
        setDifficulty((java.lang.String)value);
      }
      break;

    case DETECTABILITY:
      if (value == null) {
        unsetDetectability();
      } else {
        setDetectability((java.lang.String)value);
      }
      break;

    case EXPLOITED_VULNERABILITIES:
      if (value == null) {
        unsetExploitedVulnerabilities();
      } else {
        setExploitedVulnerabilities((java.util.List<TDDIVulnerabilityRef>)value);
      }
      break;

    case VIOLATIONS:
      if (value == null) {
        unsetViolations();
      } else {
        setViolations((java.util.List<TDDISecurityViolationRef>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case CATEGORY:
      return getCategory();

    case FINANCIAL_COST:
      return getFinancialCost();

    case FINANCIAL_COST_TYPE:
      return getFinancialCostType();

    case TIME_REQUIRED:
      return getTimeRequired();

    case TIME_UNIT:
      return getTimeUnit();

    case DIFFICULTY:
      return getDifficulty();

    case DETECTABILITY:
      return getDetectability();

    case EXPLOITED_VULNERABILITIES:
      return getExploitedVulnerabilities();

    case VIOLATIONS:
      return getViolations();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case CATEGORY:
      return isSetCategory();
    case FINANCIAL_COST:
      return isSetFinancialCost();
    case FINANCIAL_COST_TYPE:
      return isSetFinancialCostType();
    case TIME_REQUIRED:
      return isSetTimeRequired();
    case TIME_UNIT:
      return isSetTimeUnit();
    case DIFFICULTY:
      return isSetDifficulty();
    case DETECTABILITY:
      return isSetDetectability();
    case EXPLOITED_VULNERABILITIES:
      return isSetExploitedVulnerabilities();
    case VIOLATIONS:
      return isSetViolations();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAttack)
      return this.equals((TDDIAttack)that);
    return false;
  }

  public boolean equals(TDDIAttack that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_Category = true && this.isSetCategory();
    boolean that_present_Category = true && that.isSetCategory();
    if (this_present_Category || that_present_Category) {
      if (!(this_present_Category && that_present_Category))
        return false;
      if (!this.Category.equals(that.Category))
        return false;
    }

    boolean this_present_FinancialCost = true;
    boolean that_present_FinancialCost = true;
    if (this_present_FinancialCost || that_present_FinancialCost) {
      if (!(this_present_FinancialCost && that_present_FinancialCost))
        return false;
      if (this.FinancialCost != that.FinancialCost)
        return false;
    }

    boolean this_present_FinancialCostType = true && this.isSetFinancialCostType();
    boolean that_present_FinancialCostType = true && that.isSetFinancialCostType();
    if (this_present_FinancialCostType || that_present_FinancialCostType) {
      if (!(this_present_FinancialCostType && that_present_FinancialCostType))
        return false;
      if (!this.FinancialCostType.equals(that.FinancialCostType))
        return false;
    }

    boolean this_present_TimeRequired = true;
    boolean that_present_TimeRequired = true;
    if (this_present_TimeRequired || that_present_TimeRequired) {
      if (!(this_present_TimeRequired && that_present_TimeRequired))
        return false;
      if (this.TimeRequired != that.TimeRequired)
        return false;
    }

    boolean this_present_TimeUnit = true && this.isSetTimeUnit();
    boolean that_present_TimeUnit = true && that.isSetTimeUnit();
    if (this_present_TimeUnit || that_present_TimeUnit) {
      if (!(this_present_TimeUnit && that_present_TimeUnit))
        return false;
      if (!this.TimeUnit.equals(that.TimeUnit))
        return false;
    }

    boolean this_present_Difficulty = true && this.isSetDifficulty();
    boolean that_present_Difficulty = true && that.isSetDifficulty();
    if (this_present_Difficulty || that_present_Difficulty) {
      if (!(this_present_Difficulty && that_present_Difficulty))
        return false;
      if (!this.Difficulty.equals(that.Difficulty))
        return false;
    }

    boolean this_present_Detectability = true && this.isSetDetectability();
    boolean that_present_Detectability = true && that.isSetDetectability();
    if (this_present_Detectability || that_present_Detectability) {
      if (!(this_present_Detectability && that_present_Detectability))
        return false;
      if (!this.Detectability.equals(that.Detectability))
        return false;
    }

    boolean this_present_ExploitedVulnerabilities = true && this.isSetExploitedVulnerabilities();
    boolean that_present_ExploitedVulnerabilities = true && that.isSetExploitedVulnerabilities();
    if (this_present_ExploitedVulnerabilities || that_present_ExploitedVulnerabilities) {
      if (!(this_present_ExploitedVulnerabilities && that_present_ExploitedVulnerabilities))
        return false;
      if (!this.ExploitedVulnerabilities.equals(that.ExploitedVulnerabilities))
        return false;
    }

    boolean this_present_Violations = true && this.isSetViolations();
    boolean that_present_Violations = true && that.isSetViolations();
    if (this_present_Violations || that_present_Violations) {
      if (!(this_present_Violations && that_present_Violations))
        return false;
      if (!this.Violations.equals(that.Violations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + Category.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(FinancialCost);

    hashCode = hashCode * 8191 + ((isSetFinancialCostType()) ? 131071 : 524287);
    if (isSetFinancialCostType())
      hashCode = hashCode * 8191 + FinancialCostType.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(TimeRequired);

    hashCode = hashCode * 8191 + ((isSetTimeUnit()) ? 131071 : 524287);
    if (isSetTimeUnit())
      hashCode = hashCode * 8191 + TimeUnit.getValue();

    hashCode = hashCode * 8191 + ((isSetDifficulty()) ? 131071 : 524287);
    if (isSetDifficulty())
      hashCode = hashCode * 8191 + Difficulty.hashCode();

    hashCode = hashCode * 8191 + ((isSetDetectability()) ? 131071 : 524287);
    if (isSetDetectability())
      hashCode = hashCode * 8191 + Detectability.hashCode();

    hashCode = hashCode * 8191 + ((isSetExploitedVulnerabilities()) ? 131071 : 524287);
    if (isSetExploitedVulnerabilities())
      hashCode = hashCode * 8191 + ExploitedVulnerabilities.hashCode();

    hashCode = hashCode * 8191 + ((isSetViolations()) ? 131071 : 524287);
    if (isSetViolations())
      hashCode = hashCode * 8191 + Violations.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAttack other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Category, other.Category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFinancialCost()).compareTo(other.isSetFinancialCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinancialCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FinancialCost, other.FinancialCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFinancialCostType()).compareTo(other.isSetFinancialCostType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinancialCostType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FinancialCostType, other.FinancialCostType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeRequired()).compareTo(other.isSetTimeRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TimeRequired, other.TimeRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeUnit()).compareTo(other.isSetTimeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TimeUnit, other.TimeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDifficulty()).compareTo(other.isSetDifficulty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifficulty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Difficulty, other.Difficulty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDetectability()).compareTo(other.isSetDetectability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetectability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Detectability, other.Detectability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExploitedVulnerabilities()).compareTo(other.isSetExploitedVulnerabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExploitedVulnerabilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ExploitedVulnerabilities, other.ExploitedVulnerabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViolations()).compareTo(other.isSetViolations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViolations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Violations, other.Violations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAttack(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Category:");
    if (this.Category == null) {
      sb.append("null");
    } else {
      sb.append(this.Category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FinancialCost:");
    sb.append(this.FinancialCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("FinancialCostType:");
    if (this.FinancialCostType == null) {
      sb.append("null");
    } else {
      sb.append(this.FinancialCostType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TimeRequired:");
    sb.append(this.TimeRequired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TimeUnit:");
    if (this.TimeUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.TimeUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Difficulty:");
    if (this.Difficulty == null) {
      sb.append("null");
    } else {
      sb.append(this.Difficulty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Detectability:");
    if (this.Detectability == null) {
      sb.append("null");
    } else {
      sb.append(this.Detectability);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExploitedVulnerabilities:");
    if (this.ExploitedVulnerabilities == null) {
      sb.append("null");
    } else {
      sb.append(this.ExploitedVulnerabilities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Violations:");
    if (this.Violations == null) {
      sb.append("null");
    } else {
      sb.append(this.Violations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAttackStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAttackStandardScheme getScheme() {
      return new TDDIAttackStandardScheme();
    }
  }

  private static class TDDIAttackStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAttack> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAttack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2864 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list2864.size);
                TDDIKeyValueMap _elem2865;
                for (int _i2866 = 0; _i2866 < _list2864.size; ++_i2866)
                {
                  _elem2865 = new TDDIKeyValueMap();
                  _elem2865.read(iprot);
                  struct.KeyValueMaps.add(_elem2865);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FINANCIAL_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.FinancialCost = iprot.readDouble();
              struct.setFinancialCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FINANCIAL_COST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.FinancialCostType = thriftContract.TDDIFinancialCostType.findByValue(iprot.readI32());
              struct.setFinancialCostTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIME_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.TimeRequired = iprot.readDouble();
              struct.setTimeRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIME_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TimeUnit = thriftContract.TDDITimeUnit.findByValue(iprot.readI32());
              struct.setTimeUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DIFFICULTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Difficulty = iprot.readString();
              struct.setDifficultyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DETECTABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Detectability = iprot.readString();
              struct.setDetectabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXPLOITED_VULNERABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2867 = iprot.readListBegin();
                struct.ExploitedVulnerabilities = new java.util.ArrayList<TDDIVulnerabilityRef>(_list2867.size);
                TDDIVulnerabilityRef _elem2868;
                for (int _i2869 = 0; _i2869 < _list2867.size; ++_i2869)
                {
                  _elem2868 = new TDDIVulnerabilityRef();
                  _elem2868.read(iprot);
                  struct.ExploitedVulnerabilities.add(_elem2868);
                }
                iprot.readListEnd();
              }
              struct.setExploitedVulnerabilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VIOLATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2870 = iprot.readListBegin();
                struct.Violations = new java.util.ArrayList<TDDISecurityViolationRef>(_list2870.size);
                TDDISecurityViolationRef _elem2871;
                for (int _i2872 = 0; _i2872 < _list2870.size; ++_i2872)
                {
                  _elem2871 = new TDDISecurityViolationRef();
                  _elem2871.read(iprot);
                  struct.Violations.add(_elem2871);
                }
                iprot.readListEnd();
              }
              struct.setViolationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAttack struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter2873 : struct.KeyValueMaps)
          {
            _iter2873.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.Category);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINANCIAL_COST_FIELD_DESC);
      oprot.writeDouble(struct.FinancialCost);
      oprot.writeFieldEnd();
      if (struct.FinancialCostType != null) {
        oprot.writeFieldBegin(FINANCIAL_COST_TYPE_FIELD_DESC);
        oprot.writeI32(struct.FinancialCostType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_REQUIRED_FIELD_DESC);
      oprot.writeDouble(struct.TimeRequired);
      oprot.writeFieldEnd();
      if (struct.TimeUnit != null) {
        oprot.writeFieldBegin(TIME_UNIT_FIELD_DESC);
        oprot.writeI32(struct.TimeUnit.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.Difficulty != null) {
        oprot.writeFieldBegin(DIFFICULTY_FIELD_DESC);
        oprot.writeString(struct.Difficulty);
        oprot.writeFieldEnd();
      }
      if (struct.Detectability != null) {
        oprot.writeFieldBegin(DETECTABILITY_FIELD_DESC);
        oprot.writeString(struct.Detectability);
        oprot.writeFieldEnd();
      }
      if (struct.ExploitedVulnerabilities != null) {
        oprot.writeFieldBegin(EXPLOITED_VULNERABILITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ExploitedVulnerabilities.size()));
          for (TDDIVulnerabilityRef _iter2874 : struct.ExploitedVulnerabilities)
          {
            _iter2874.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Violations != null) {
        oprot.writeFieldBegin(VIOLATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Violations.size()));
          for (TDDISecurityViolationRef _iter2875 : struct.Violations)
          {
            _iter2875.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAttackTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAttackTupleScheme getScheme() {
      return new TDDIAttackTupleScheme();
    }
  }

  private static class TDDIAttackTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAttack> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAttack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetCategory()) {
        optionals.set(4);
      }
      if (struct.isSetFinancialCost()) {
        optionals.set(5);
      }
      if (struct.isSetFinancialCostType()) {
        optionals.set(6);
      }
      if (struct.isSetTimeRequired()) {
        optionals.set(7);
      }
      if (struct.isSetTimeUnit()) {
        optionals.set(8);
      }
      if (struct.isSetDifficulty()) {
        optionals.set(9);
      }
      if (struct.isSetDetectability()) {
        optionals.set(10);
      }
      if (struct.isSetExploitedVulnerabilities()) {
        optionals.set(11);
      }
      if (struct.isSetViolations()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter2876 : struct.KeyValueMaps)
          {
            _iter2876.write(oprot);
          }
        }
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.Category);
      }
      if (struct.isSetFinancialCost()) {
        oprot.writeDouble(struct.FinancialCost);
      }
      if (struct.isSetFinancialCostType()) {
        oprot.writeI32(struct.FinancialCostType.getValue());
      }
      if (struct.isSetTimeRequired()) {
        oprot.writeDouble(struct.TimeRequired);
      }
      if (struct.isSetTimeUnit()) {
        oprot.writeI32(struct.TimeUnit.getValue());
      }
      if (struct.isSetDifficulty()) {
        oprot.writeString(struct.Difficulty);
      }
      if (struct.isSetDetectability()) {
        oprot.writeString(struct.Detectability);
      }
      if (struct.isSetExploitedVulnerabilities()) {
        {
          oprot.writeI32(struct.ExploitedVulnerabilities.size());
          for (TDDIVulnerabilityRef _iter2877 : struct.ExploitedVulnerabilities)
          {
            _iter2877.write(oprot);
          }
        }
      }
      if (struct.isSetViolations()) {
        {
          oprot.writeI32(struct.Violations.size());
          for (TDDISecurityViolationRef _iter2878 : struct.Violations)
          {
            _iter2878.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAttack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list2879 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list2879.size);
          TDDIKeyValueMap _elem2880;
          for (int _i2881 = 0; _i2881 < _list2879.size; ++_i2881)
          {
            _elem2880 = new TDDIKeyValueMap();
            _elem2880.read(iprot);
            struct.KeyValueMaps.add(_elem2880);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.FinancialCost = iprot.readDouble();
        struct.setFinancialCostIsSet(true);
      }
      if (incoming.get(6)) {
        struct.FinancialCostType = thriftContract.TDDIFinancialCostType.findByValue(iprot.readI32());
        struct.setFinancialCostTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.TimeRequired = iprot.readDouble();
        struct.setTimeRequiredIsSet(true);
      }
      if (incoming.get(8)) {
        struct.TimeUnit = thriftContract.TDDITimeUnit.findByValue(iprot.readI32());
        struct.setTimeUnitIsSet(true);
      }
      if (incoming.get(9)) {
        struct.Difficulty = iprot.readString();
        struct.setDifficultyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.Detectability = iprot.readString();
        struct.setDetectabilityIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list2882 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ExploitedVulnerabilities = new java.util.ArrayList<TDDIVulnerabilityRef>(_list2882.size);
          TDDIVulnerabilityRef _elem2883;
          for (int _i2884 = 0; _i2884 < _list2882.size; ++_i2884)
          {
            _elem2883 = new TDDIVulnerabilityRef();
            _elem2883.read(iprot);
            struct.ExploitedVulnerabilities.add(_elem2883);
          }
        }
        struct.setExploitedVulnerabilitiesIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list2885 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Violations = new java.util.ArrayList<TDDISecurityViolationRef>(_list2885.size);
          TDDISecurityViolationRef _elem2886;
          for (int _i2887 = 0; _i2887 < _list2885.size; ++_i2887)
          {
            _elem2886 = new TDDISecurityViolationRef();
            _elem2886.read(iprot);
            struct.Violations.add(_elem2886);
          }
        }
        struct.setViolationsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

