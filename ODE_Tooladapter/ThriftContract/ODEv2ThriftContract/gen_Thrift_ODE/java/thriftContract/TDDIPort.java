/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-13")
public class TDDIPort implements org.apache.thrift.TBase<TDDIPort, TDDIPort._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIPort> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIPort");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_REQUIREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityRequirements", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ASSURANCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceLevel", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField FLOW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("FlowType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Direction", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REFINED_PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("RefinedPorts", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField INTERFACE_FAILURES_FIELD_DESC = new org.apache.thrift.protocol.TField("InterfaceFailures", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIPortStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIPortTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements; // required
  public TDDIAssuranceLevel AssuranceLevel; // required
  public java.lang.String FlowType; // required
  /**
   * 
   * @see TDDIPortDirection
   */
  public TDDIPortDirection Direction; // required
  public java.util.List<TDDIPortRef> RefinedPorts; // required
  public java.util.List<TDDIAbstractFailureRef> InterfaceFailures; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    DEPENDABILITY_REQUIREMENTS((short)5, "DependabilityRequirements"),
    ASSURANCE_LEVEL((short)6, "AssuranceLevel"),
    FLOW_TYPE((short)7, "FlowType"),
    /**
     * 
     * @see TDDIPortDirection
     */
    DIRECTION((short)8, "Direction"),
    REFINED_PORTS((short)9, "RefinedPorts"),
    INTERFACE_FAILURES((short)10, "InterfaceFailures");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // DEPENDABILITY_REQUIREMENTS
          return DEPENDABILITY_REQUIREMENTS;
        case 6: // ASSURANCE_LEVEL
          return ASSURANCE_LEVEL;
        case 7: // FLOW_TYPE
          return FLOW_TYPE;
        case 8: // DIRECTION
          return DIRECTION;
        case 9: // REFINED_PORTS
          return REFINED_PORTS;
        case 10: // INTERFACE_FAILURES
          return INTERFACE_FAILURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.DEPENDABILITY_REQUIREMENTS, new org.apache.thrift.meta_data.FieldMetaData("DependabilityRequirements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractDependabilityRequirementRef.class))));
    tmpMap.put(_Fields.ASSURANCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("AssuranceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAssuranceLevel")));
    tmpMap.put(_Fields.FLOW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("FlowType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("Direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIPortDirection.class)));
    tmpMap.put(_Fields.REFINED_PORTS, new org.apache.thrift.meta_data.FieldMetaData("RefinedPorts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIPortRef.class))));
    tmpMap.put(_Fields.INTERFACE_FAILURES, new org.apache.thrift.meta_data.FieldMetaData("InterfaceFailures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureRef.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIPort.class, metaDataMap);
  }

  public TDDIPort() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.FlowType = "";

    this.Direction = thriftContract.TDDIPortDirection.PDIN;

    this.RefinedPorts = new java.util.ArrayList<TDDIPortRef>();

    this.InterfaceFailures = new java.util.ArrayList<TDDIAbstractFailureRef>();

  }

  public TDDIPort(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements,
    TDDIAssuranceLevel AssuranceLevel,
    java.lang.String FlowType,
    TDDIPortDirection Direction,
    java.util.List<TDDIPortRef> RefinedPorts,
    java.util.List<TDDIAbstractFailureRef> InterfaceFailures)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.DependabilityRequirements = DependabilityRequirements;
    this.AssuranceLevel = AssuranceLevel;
    this.FlowType = FlowType;
    this.Direction = Direction;
    this.RefinedPorts = RefinedPorts;
    this.InterfaceFailures = InterfaceFailures;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIPort(TDDIPort other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetDependabilityRequirements()) {
      java.util.List<TDDIAbstractDependabilityRequirementRef> __this__DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(other.DependabilityRequirements.size());
      for (TDDIAbstractDependabilityRequirementRef other_element : other.DependabilityRequirements) {
        __this__DependabilityRequirements.add(new TDDIAbstractDependabilityRequirementRef(other_element));
      }
      this.DependabilityRequirements = __this__DependabilityRequirements;
    }
    if (other.isSetAssuranceLevel()) {
      this.AssuranceLevel = new TDDIAssuranceLevel(other.AssuranceLevel);
    }
    if (other.isSetFlowType()) {
      this.FlowType = other.FlowType;
    }
    if (other.isSetDirection()) {
      this.Direction = other.Direction;
    }
    if (other.isSetRefinedPorts()) {
      java.util.List<TDDIPortRef> __this__RefinedPorts = new java.util.ArrayList<TDDIPortRef>(other.RefinedPorts.size());
      for (TDDIPortRef other_element : other.RefinedPorts) {
        __this__RefinedPorts.add(new TDDIPortRef(other_element));
      }
      this.RefinedPorts = __this__RefinedPorts;
    }
    if (other.isSetInterfaceFailures()) {
      java.util.List<TDDIAbstractFailureRef> __this__InterfaceFailures = new java.util.ArrayList<TDDIAbstractFailureRef>(other.InterfaceFailures.size());
      for (TDDIAbstractFailureRef other_element : other.InterfaceFailures) {
        __this__InterfaceFailures.add(new TDDIAbstractFailureRef(other_element));
      }
      this.InterfaceFailures = __this__InterfaceFailures;
    }
  }

  public TDDIPort deepCopy() {
    return new TDDIPort(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.AssuranceLevel = null;
    this.FlowType = "";

    this.Direction = thriftContract.TDDIPortDirection.PDIN;

    this.RefinedPorts = new java.util.ArrayList<TDDIPortRef>();

    this.InterfaceFailures = new java.util.ArrayList<TDDIAbstractFailureRef>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDIPort setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIPort setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIPort setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIPort setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public int getDependabilityRequirementsSize() {
    return (this.DependabilityRequirements == null) ? 0 : this.DependabilityRequirements.size();
  }

  public java.util.Iterator<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirementsIterator() {
    return (this.DependabilityRequirements == null) ? null : this.DependabilityRequirements.iterator();
  }

  public void addToDependabilityRequirements(TDDIAbstractDependabilityRequirementRef elem) {
    if (this.DependabilityRequirements == null) {
      this.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();
    }
    this.DependabilityRequirements.add(elem);
  }

  public java.util.List<TDDIAbstractDependabilityRequirementRef> getDependabilityRequirements() {
    return this.DependabilityRequirements;
  }

  public TDDIPort setDependabilityRequirements(java.util.List<TDDIAbstractDependabilityRequirementRef> DependabilityRequirements) {
    this.DependabilityRequirements = DependabilityRequirements;
    return this;
  }

  public void unsetDependabilityRequirements() {
    this.DependabilityRequirements = null;
  }

  /** Returns true if field DependabilityRequirements is set (has been assigned a value) and false otherwise */
  public boolean isSetDependabilityRequirements() {
    return this.DependabilityRequirements != null;
  }

  public void setDependabilityRequirementsIsSet(boolean value) {
    if (!value) {
      this.DependabilityRequirements = null;
    }
  }

  public TDDIAssuranceLevel getAssuranceLevel() {
    return this.AssuranceLevel;
  }

  public TDDIPort setAssuranceLevel(TDDIAssuranceLevel AssuranceLevel) {
    this.AssuranceLevel = AssuranceLevel;
    return this;
  }

  public void unsetAssuranceLevel() {
    this.AssuranceLevel = null;
  }

  /** Returns true if field AssuranceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceLevel() {
    return this.AssuranceLevel != null;
  }

  public void setAssuranceLevelIsSet(boolean value) {
    if (!value) {
      this.AssuranceLevel = null;
    }
  }

  public java.lang.String getFlowType() {
    return this.FlowType;
  }

  public TDDIPort setFlowType(java.lang.String FlowType) {
    this.FlowType = FlowType;
    return this;
  }

  public void unsetFlowType() {
    this.FlowType = null;
  }

  /** Returns true if field FlowType is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowType() {
    return this.FlowType != null;
  }

  public void setFlowTypeIsSet(boolean value) {
    if (!value) {
      this.FlowType = null;
    }
  }

  /**
   * 
   * @see TDDIPortDirection
   */
  public TDDIPortDirection getDirection() {
    return this.Direction;
  }

  /**
   * 
   * @see TDDIPortDirection
   */
  public TDDIPort setDirection(TDDIPortDirection Direction) {
    this.Direction = Direction;
    return this;
  }

  public void unsetDirection() {
    this.Direction = null;
  }

  /** Returns true if field Direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.Direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.Direction = null;
    }
  }

  public int getRefinedPortsSize() {
    return (this.RefinedPorts == null) ? 0 : this.RefinedPorts.size();
  }

  public java.util.Iterator<TDDIPortRef> getRefinedPortsIterator() {
    return (this.RefinedPorts == null) ? null : this.RefinedPorts.iterator();
  }

  public void addToRefinedPorts(TDDIPortRef elem) {
    if (this.RefinedPorts == null) {
      this.RefinedPorts = new java.util.ArrayList<TDDIPortRef>();
    }
    this.RefinedPorts.add(elem);
  }

  public java.util.List<TDDIPortRef> getRefinedPorts() {
    return this.RefinedPorts;
  }

  public TDDIPort setRefinedPorts(java.util.List<TDDIPortRef> RefinedPorts) {
    this.RefinedPorts = RefinedPorts;
    return this;
  }

  public void unsetRefinedPorts() {
    this.RefinedPorts = null;
  }

  /** Returns true if field RefinedPorts is set (has been assigned a value) and false otherwise */
  public boolean isSetRefinedPorts() {
    return this.RefinedPorts != null;
  }

  public void setRefinedPortsIsSet(boolean value) {
    if (!value) {
      this.RefinedPorts = null;
    }
  }

  public int getInterfaceFailuresSize() {
    return (this.InterfaceFailures == null) ? 0 : this.InterfaceFailures.size();
  }

  public java.util.Iterator<TDDIAbstractFailureRef> getInterfaceFailuresIterator() {
    return (this.InterfaceFailures == null) ? null : this.InterfaceFailures.iterator();
  }

  public void addToInterfaceFailures(TDDIAbstractFailureRef elem) {
    if (this.InterfaceFailures == null) {
      this.InterfaceFailures = new java.util.ArrayList<TDDIAbstractFailureRef>();
    }
    this.InterfaceFailures.add(elem);
  }

  public java.util.List<TDDIAbstractFailureRef> getInterfaceFailures() {
    return this.InterfaceFailures;
  }

  public TDDIPort setInterfaceFailures(java.util.List<TDDIAbstractFailureRef> InterfaceFailures) {
    this.InterfaceFailures = InterfaceFailures;
    return this;
  }

  public void unsetInterfaceFailures() {
    this.InterfaceFailures = null;
  }

  /** Returns true if field InterfaceFailures is set (has been assigned a value) and false otherwise */
  public boolean isSetInterfaceFailures() {
    return this.InterfaceFailures != null;
  }

  public void setInterfaceFailuresIsSet(boolean value) {
    if (!value) {
      this.InterfaceFailures = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case DEPENDABILITY_REQUIREMENTS:
      if (value == null) {
        unsetDependabilityRequirements();
      } else {
        setDependabilityRequirements((java.util.List<TDDIAbstractDependabilityRequirementRef>)value);
      }
      break;

    case ASSURANCE_LEVEL:
      if (value == null) {
        unsetAssuranceLevel();
      } else {
        setAssuranceLevel((TDDIAssuranceLevel)value);
      }
      break;

    case FLOW_TYPE:
      if (value == null) {
        unsetFlowType();
      } else {
        setFlowType((java.lang.String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((TDDIPortDirection)value);
      }
      break;

    case REFINED_PORTS:
      if (value == null) {
        unsetRefinedPorts();
      } else {
        setRefinedPorts((java.util.List<TDDIPortRef>)value);
      }
      break;

    case INTERFACE_FAILURES:
      if (value == null) {
        unsetInterfaceFailures();
      } else {
        setInterfaceFailures((java.util.List<TDDIAbstractFailureRef>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case DEPENDABILITY_REQUIREMENTS:
      return getDependabilityRequirements();

    case ASSURANCE_LEVEL:
      return getAssuranceLevel();

    case FLOW_TYPE:
      return getFlowType();

    case DIRECTION:
      return getDirection();

    case REFINED_PORTS:
      return getRefinedPorts();

    case INTERFACE_FAILURES:
      return getInterfaceFailures();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case DEPENDABILITY_REQUIREMENTS:
      return isSetDependabilityRequirements();
    case ASSURANCE_LEVEL:
      return isSetAssuranceLevel();
    case FLOW_TYPE:
      return isSetFlowType();
    case DIRECTION:
      return isSetDirection();
    case REFINED_PORTS:
      return isSetRefinedPorts();
    case INTERFACE_FAILURES:
      return isSetInterfaceFailures();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIPort)
      return this.equals((TDDIPort)that);
    return false;
  }

  public boolean equals(TDDIPort that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_DependabilityRequirements = true && this.isSetDependabilityRequirements();
    boolean that_present_DependabilityRequirements = true && that.isSetDependabilityRequirements();
    if (this_present_DependabilityRequirements || that_present_DependabilityRequirements) {
      if (!(this_present_DependabilityRequirements && that_present_DependabilityRequirements))
        return false;
      if (!this.DependabilityRequirements.equals(that.DependabilityRequirements))
        return false;
    }

    boolean this_present_AssuranceLevel = true && this.isSetAssuranceLevel();
    boolean that_present_AssuranceLevel = true && that.isSetAssuranceLevel();
    if (this_present_AssuranceLevel || that_present_AssuranceLevel) {
      if (!(this_present_AssuranceLevel && that_present_AssuranceLevel))
        return false;
      if (!this.AssuranceLevel.equals(that.AssuranceLevel))
        return false;
    }

    boolean this_present_FlowType = true && this.isSetFlowType();
    boolean that_present_FlowType = true && that.isSetFlowType();
    if (this_present_FlowType || that_present_FlowType) {
      if (!(this_present_FlowType && that_present_FlowType))
        return false;
      if (!this.FlowType.equals(that.FlowType))
        return false;
    }

    boolean this_present_Direction = true && this.isSetDirection();
    boolean that_present_Direction = true && that.isSetDirection();
    if (this_present_Direction || that_present_Direction) {
      if (!(this_present_Direction && that_present_Direction))
        return false;
      if (!this.Direction.equals(that.Direction))
        return false;
    }

    boolean this_present_RefinedPorts = true && this.isSetRefinedPorts();
    boolean that_present_RefinedPorts = true && that.isSetRefinedPorts();
    if (this_present_RefinedPorts || that_present_RefinedPorts) {
      if (!(this_present_RefinedPorts && that_present_RefinedPorts))
        return false;
      if (!this.RefinedPorts.equals(that.RefinedPorts))
        return false;
    }

    boolean this_present_InterfaceFailures = true && this.isSetInterfaceFailures();
    boolean that_present_InterfaceFailures = true && that.isSetInterfaceFailures();
    if (this_present_InterfaceFailures || that_present_InterfaceFailures) {
      if (!(this_present_InterfaceFailures && that_present_InterfaceFailures))
        return false;
      if (!this.InterfaceFailures.equals(that.InterfaceFailures))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetDependabilityRequirements()) ? 131071 : 524287);
    if (isSetDependabilityRequirements())
      hashCode = hashCode * 8191 + DependabilityRequirements.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssuranceLevel()) ? 131071 : 524287);
    if (isSetAssuranceLevel())
      hashCode = hashCode * 8191 + AssuranceLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetFlowType()) ? 131071 : 524287);
    if (isSetFlowType())
      hashCode = hashCode * 8191 + FlowType.hashCode();

    hashCode = hashCode * 8191 + ((isSetDirection()) ? 131071 : 524287);
    if (isSetDirection())
      hashCode = hashCode * 8191 + Direction.getValue();

    hashCode = hashCode * 8191 + ((isSetRefinedPorts()) ? 131071 : 524287);
    if (isSetRefinedPorts())
      hashCode = hashCode * 8191 + RefinedPorts.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterfaceFailures()) ? 131071 : 524287);
    if (isSetInterfaceFailures())
      hashCode = hashCode * 8191 + InterfaceFailures.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIPort other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDependabilityRequirements()).compareTo(other.isSetDependabilityRequirements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependabilityRequirements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DependabilityRequirements, other.DependabilityRequirements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssuranceLevel()).compareTo(other.isSetAssuranceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssuranceLevel, other.AssuranceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFlowType()).compareTo(other.isSetFlowType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FlowType, other.FlowType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Direction, other.Direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRefinedPorts()).compareTo(other.isSetRefinedPorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefinedPorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RefinedPorts, other.RefinedPorts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInterfaceFailures()).compareTo(other.isSetInterfaceFailures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterfaceFailures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.InterfaceFailures, other.InterfaceFailures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIPort(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DependabilityRequirements:");
    if (this.DependabilityRequirements == null) {
      sb.append("null");
    } else {
      sb.append(this.DependabilityRequirements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssuranceLevel:");
    if (this.AssuranceLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.AssuranceLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("FlowType:");
    if (this.FlowType == null) {
      sb.append("null");
    } else {
      sb.append(this.FlowType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Direction:");
    if (this.Direction == null) {
      sb.append("null");
    } else {
      sb.append(this.Direction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RefinedPorts:");
    if (this.RefinedPorts == null) {
      sb.append("null");
    } else {
      sb.append(this.RefinedPorts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("InterfaceFailures:");
    if (this.InterfaceFailures == null) {
      sb.append("null");
    } else {
      sb.append(this.InterfaceFailures);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIPortStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIPortStandardScheme getScheme() {
      return new TDDIPortStandardScheme();
    }
  }

  private static class TDDIPortStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIPort> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIPort struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list104.size);
                TDDIKeyValueMap _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new TDDIKeyValueMap();
                  _elem105.read(iprot);
                  struct.KeyValueMaps.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPENDABILITY_REQUIREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list107.size);
                TDDIAbstractDependabilityRequirementRef _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = new TDDIAbstractDependabilityRequirementRef();
                  _elem108.read(iprot);
                  struct.DependabilityRequirements.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setDependabilityRequirementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASSURANCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AssuranceLevel = new TDDIAssuranceLevel();
              struct.AssuranceLevel.read(iprot);
              struct.setAssuranceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLOW_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FlowType = iprot.readString();
              struct.setFlowTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Direction = thriftContract.TDDIPortDirection.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REFINED_PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.RefinedPorts = new java.util.ArrayList<TDDIPortRef>(_list110.size);
                TDDIPortRef _elem111;
                for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                {
                  _elem111 = new TDDIPortRef();
                  _elem111.read(iprot);
                  struct.RefinedPorts.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setRefinedPortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INTERFACE_FAILURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list113 = iprot.readListBegin();
                struct.InterfaceFailures = new java.util.ArrayList<TDDIAbstractFailureRef>(_list113.size);
                TDDIAbstractFailureRef _elem114;
                for (int _i115 = 0; _i115 < _list113.size; ++_i115)
                {
                  _elem114 = new TDDIAbstractFailureRef();
                  _elem114.read(iprot);
                  struct.InterfaceFailures.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setInterfaceFailuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIPort struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter116 : struct.KeyValueMaps)
          {
            _iter116.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.DependabilityRequirements != null) {
        oprot.writeFieldBegin(DEPENDABILITY_REQUIREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DependabilityRequirements.size()));
          for (TDDIAbstractDependabilityRequirementRef _iter117 : struct.DependabilityRequirements)
          {
            _iter117.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AssuranceLevel != null) {
        oprot.writeFieldBegin(ASSURANCE_LEVEL_FIELD_DESC);
        struct.AssuranceLevel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.FlowType != null) {
        oprot.writeFieldBegin(FLOW_TYPE_FIELD_DESC);
        oprot.writeString(struct.FlowType);
        oprot.writeFieldEnd();
      }
      if (struct.Direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeI32(struct.Direction.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.RefinedPorts != null) {
        oprot.writeFieldBegin(REFINED_PORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.RefinedPorts.size()));
          for (TDDIPortRef _iter118 : struct.RefinedPorts)
          {
            _iter118.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.InterfaceFailures != null) {
        oprot.writeFieldBegin(INTERFACE_FAILURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.InterfaceFailures.size()));
          for (TDDIAbstractFailureRef _iter119 : struct.InterfaceFailures)
          {
            _iter119.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIPortTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIPortTupleScheme getScheme() {
      return new TDDIPortTupleScheme();
    }
  }

  private static class TDDIPortTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIPort> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIPort struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetDependabilityRequirements()) {
        optionals.set(4);
      }
      if (struct.isSetAssuranceLevel()) {
        optionals.set(5);
      }
      if (struct.isSetFlowType()) {
        optionals.set(6);
      }
      if (struct.isSetDirection()) {
        optionals.set(7);
      }
      if (struct.isSetRefinedPorts()) {
        optionals.set(8);
      }
      if (struct.isSetInterfaceFailures()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter120 : struct.KeyValueMaps)
          {
            _iter120.write(oprot);
          }
        }
      }
      if (struct.isSetDependabilityRequirements()) {
        {
          oprot.writeI32(struct.DependabilityRequirements.size());
          for (TDDIAbstractDependabilityRequirementRef _iter121 : struct.DependabilityRequirements)
          {
            _iter121.write(oprot);
          }
        }
      }
      if (struct.isSetAssuranceLevel()) {
        struct.AssuranceLevel.write(oprot);
      }
      if (struct.isSetFlowType()) {
        oprot.writeString(struct.FlowType);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.Direction.getValue());
      }
      if (struct.isSetRefinedPorts()) {
        {
          oprot.writeI32(struct.RefinedPorts.size());
          for (TDDIPortRef _iter122 : struct.RefinedPorts)
          {
            _iter122.write(oprot);
          }
        }
      }
      if (struct.isSetInterfaceFailures()) {
        {
          oprot.writeI32(struct.InterfaceFailures.size());
          for (TDDIAbstractFailureRef _iter123 : struct.InterfaceFailures)
          {
            _iter123.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIPort struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list124.size);
          TDDIKeyValueMap _elem125;
          for (int _i126 = 0; _i126 < _list124.size; ++_i126)
          {
            _elem125 = new TDDIKeyValueMap();
            _elem125.read(iprot);
            struct.KeyValueMaps.add(_elem125);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DependabilityRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list127.size);
          TDDIAbstractDependabilityRequirementRef _elem128;
          for (int _i129 = 0; _i129 < _list127.size; ++_i129)
          {
            _elem128 = new TDDIAbstractDependabilityRequirementRef();
            _elem128.read(iprot);
            struct.DependabilityRequirements.add(_elem128);
          }
        }
        struct.setDependabilityRequirementsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.AssuranceLevel = new TDDIAssuranceLevel();
        struct.AssuranceLevel.read(iprot);
        struct.setAssuranceLevelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.FlowType = iprot.readString();
        struct.setFlowTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.Direction = thriftContract.TDDIPortDirection.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.RefinedPorts = new java.util.ArrayList<TDDIPortRef>(_list130.size);
          TDDIPortRef _elem131;
          for (int _i132 = 0; _i132 < _list130.size; ++_i132)
          {
            _elem131 = new TDDIPortRef();
            _elem131.read(iprot);
            struct.RefinedPorts.add(_elem131);
          }
        }
        struct.setRefinedPortsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.InterfaceFailures = new java.util.ArrayList<TDDIAbstractFailureRef>(_list133.size);
          TDDIAbstractFailureRef _elem134;
          for (int _i135 = 0; _i135 < _list133.size; ++_i135)
          {
            _elem134 = new TDDIAbstractFailureRef();
            _elem134.read(iprot);
            struct.InterfaceFailures.add(_elem134);
          }
        }
        struct.setInterfaceFailuresIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

