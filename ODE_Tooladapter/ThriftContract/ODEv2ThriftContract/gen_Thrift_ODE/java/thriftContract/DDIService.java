/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-04")
public class DDIService {

  public interface Iface {

    public void ExportModelToDDIFile(java.lang.String DDIFilePath, TDDIDDIPackage DDIPackage) throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException;

    public TDDIDDIPackage ImportDDIModel(java.lang.String DDIFilePath) throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException;

    public TDDIValidationResult ValidateDDI(java.lang.String DDIFilePath, java.lang.String EvlFilePath) throws org.apache.thrift.TException;

    public TDDIDDIPackage ExecuteEpsilonSriptsOnDDIFile(java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs, boolean BackupDDIFile, boolean ReturnDDIPackage) throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ExportModelToDDIFile(java.lang.String DDIFilePath, TDDIDDIPackage DDIPackage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void ImportDDIModel(java.lang.String DDIFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> resultHandler) throws org.apache.thrift.TException;

    public void ValidateDDI(java.lang.String DDIFilePath, java.lang.String EvlFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> resultHandler) throws org.apache.thrift.TException;

    public void ExecuteEpsilonSriptsOnDDIFile(java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs, boolean BackupDDIFile, boolean ReturnDDIPackage, org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ExportModelToDDIFile(java.lang.String DDIFilePath, TDDIDDIPackage DDIPackage) throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException
    {
      send_ExportModelToDDIFile(DDIFilePath, DDIPackage);
      recv_ExportModelToDDIFile();
    }

    public void send_ExportModelToDDIFile(java.lang.String DDIFilePath, TDDIDDIPackage DDIPackage) throws org.apache.thrift.TException
    {
      ExportModelToDDIFile_args args = new ExportModelToDDIFile_args();
      args.setDDIFilePath(DDIFilePath);
      args.setDDIPackage(DDIPackage);
      sendBase("ExportModelToDDIFile", args);
    }

    public void recv_ExportModelToDDIFile() throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException
    {
      ExportModelToDDIFile_result result = new ExportModelToDDIFile_result();
      receiveBase(result, "ExportModelToDDIFile");
      if (result.EpsilonScriptExecutionException != null) {
        throw result.EpsilonScriptExecutionException;
      }
      return;
    }

    public TDDIDDIPackage ImportDDIModel(java.lang.String DDIFilePath) throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException
    {
      send_ImportDDIModel(DDIFilePath);
      return recv_ImportDDIModel();
    }

    public void send_ImportDDIModel(java.lang.String DDIFilePath) throws org.apache.thrift.TException
    {
      ImportDDIModel_args args = new ImportDDIModel_args();
      args.setDDIFilePath(DDIFilePath);
      sendBase("ImportDDIModel", args);
    }

    public TDDIDDIPackage recv_ImportDDIModel() throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException
    {
      ImportDDIModel_result result = new ImportDDIModel_result();
      receiveBase(result, "ImportDDIModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EpsilonScriptExecutionException != null) {
        throw result.EpsilonScriptExecutionException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ImportDDIModel failed: unknown result");
    }

    public TDDIValidationResult ValidateDDI(java.lang.String DDIFilePath, java.lang.String EvlFilePath) throws org.apache.thrift.TException
    {
      send_ValidateDDI(DDIFilePath, EvlFilePath);
      return recv_ValidateDDI();
    }

    public void send_ValidateDDI(java.lang.String DDIFilePath, java.lang.String EvlFilePath) throws org.apache.thrift.TException
    {
      ValidateDDI_args args = new ValidateDDI_args();
      args.setDDIFilePath(DDIFilePath);
      args.setEvlFilePath(EvlFilePath);
      sendBase("ValidateDDI", args);
    }

    public TDDIValidationResult recv_ValidateDDI() throws org.apache.thrift.TException
    {
      ValidateDDI_result result = new ValidateDDI_result();
      receiveBase(result, "ValidateDDI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ValidateDDI failed: unknown result");
    }

    public TDDIDDIPackage ExecuteEpsilonSriptsOnDDIFile(java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs, boolean BackupDDIFile, boolean ReturnDDIPackage) throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException
    {
      send_ExecuteEpsilonSriptsOnDDIFile(EpsilonScriptExecutionConfigs, BackupDDIFile, ReturnDDIPackage);
      return recv_ExecuteEpsilonSriptsOnDDIFile();
    }

    public void send_ExecuteEpsilonSriptsOnDDIFile(java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs, boolean BackupDDIFile, boolean ReturnDDIPackage) throws org.apache.thrift.TException
    {
      ExecuteEpsilonSriptsOnDDIFile_args args = new ExecuteEpsilonSriptsOnDDIFile_args();
      args.setEpsilonScriptExecutionConfigs(EpsilonScriptExecutionConfigs);
      args.setBackupDDIFile(BackupDDIFile);
      args.setReturnDDIPackage(ReturnDDIPackage);
      sendBase("ExecuteEpsilonSriptsOnDDIFile", args);
    }

    public TDDIDDIPackage recv_ExecuteEpsilonSriptsOnDDIFile() throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException
    {
      ExecuteEpsilonSriptsOnDDIFile_result result = new ExecuteEpsilonSriptsOnDDIFile_result();
      receiveBase(result, "ExecuteEpsilonSriptsOnDDIFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.EpsilonScriptExecutionException != null) {
        throw result.EpsilonScriptExecutionException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ExecuteEpsilonSriptsOnDDIFile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ExportModelToDDIFile(java.lang.String DDIFilePath, TDDIDDIPackage DDIPackage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ExportModelToDDIFile_call method_call = new ExportModelToDDIFile_call(DDIFilePath, DDIPackage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ExportModelToDDIFile_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String DDIFilePath;
      private TDDIDDIPackage DDIPackage;
      public ExportModelToDDIFile_call(java.lang.String DDIFilePath, TDDIDDIPackage DDIPackage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DDIFilePath = DDIFilePath;
        this.DDIPackage = DDIPackage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ExportModelToDDIFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ExportModelToDDIFile_args args = new ExportModelToDDIFile_args();
        args.setDDIFilePath(DDIFilePath);
        args.setDDIPackage(DDIPackage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void ImportDDIModel(java.lang.String DDIFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ImportDDIModel_call method_call = new ImportDDIModel_call(DDIFilePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ImportDDIModel_call extends org.apache.thrift.async.TAsyncMethodCall<TDDIDDIPackage> {
      private java.lang.String DDIFilePath;
      public ImportDDIModel_call(java.lang.String DDIFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DDIFilePath = DDIFilePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ImportDDIModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ImportDDIModel_args args = new ImportDDIModel_args();
        args.setDDIFilePath(DDIFilePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDDIDDIPackage getResult() throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ImportDDIModel();
      }
    }

    public void ValidateDDI(java.lang.String DDIFilePath, java.lang.String EvlFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ValidateDDI_call method_call = new ValidateDDI_call(DDIFilePath, EvlFilePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ValidateDDI_call extends org.apache.thrift.async.TAsyncMethodCall<TDDIValidationResult> {
      private java.lang.String DDIFilePath;
      private java.lang.String EvlFilePath;
      public ValidateDDI_call(java.lang.String DDIFilePath, java.lang.String EvlFilePath, org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DDIFilePath = DDIFilePath;
        this.EvlFilePath = EvlFilePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ValidateDDI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ValidateDDI_args args = new ValidateDDI_args();
        args.setDDIFilePath(DDIFilePath);
        args.setEvlFilePath(EvlFilePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDDIValidationResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ValidateDDI();
      }
    }

    public void ExecuteEpsilonSriptsOnDDIFile(java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs, boolean BackupDDIFile, boolean ReturnDDIPackage, org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ExecuteEpsilonSriptsOnDDIFile_call method_call = new ExecuteEpsilonSriptsOnDDIFile_call(EpsilonScriptExecutionConfigs, BackupDDIFile, ReturnDDIPackage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ExecuteEpsilonSriptsOnDDIFile_call extends org.apache.thrift.async.TAsyncMethodCall<TDDIDDIPackage> {
      private java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs;
      private boolean BackupDDIFile;
      private boolean ReturnDDIPackage;
      public ExecuteEpsilonSriptsOnDDIFile_call(java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs, boolean BackupDDIFile, boolean ReturnDDIPackage, org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.EpsilonScriptExecutionConfigs = EpsilonScriptExecutionConfigs;
        this.BackupDDIFile = BackupDDIFile;
        this.ReturnDDIPackage = ReturnDDIPackage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ExecuteEpsilonSriptsOnDDIFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ExecuteEpsilonSriptsOnDDIFile_args args = new ExecuteEpsilonSriptsOnDDIFile_args();
        args.setEpsilonScriptExecutionConfigs(EpsilonScriptExecutionConfigs);
        args.setBackupDDIFile(BackupDDIFile);
        args.setReturnDDIPackage(ReturnDDIPackage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDDIDDIPackage getResult() throws TDDIAbstractEpsilonScriptExecutionException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ExecuteEpsilonSriptsOnDDIFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ExportModelToDDIFile", new ExportModelToDDIFile());
      processMap.put("ImportDDIModel", new ImportDDIModel());
      processMap.put("ValidateDDI", new ValidateDDI());
      processMap.put("ExecuteEpsilonSriptsOnDDIFile", new ExecuteEpsilonSriptsOnDDIFile());
      return processMap;
    }

    public static class ExportModelToDDIFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ExportModelToDDIFile_args> {
      public ExportModelToDDIFile() {
        super("ExportModelToDDIFile");
      }

      public ExportModelToDDIFile_args getEmptyArgsInstance() {
        return new ExportModelToDDIFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ExportModelToDDIFile_result getResult(I iface, ExportModelToDDIFile_args args) throws org.apache.thrift.TException {
        ExportModelToDDIFile_result result = new ExportModelToDDIFile_result();
        try {
          iface.ExportModelToDDIFile(args.DDIFilePath, args.DDIPackage);
        } catch (TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException) {
          result.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
        }
        return result;
      }
    }

    public static class ImportDDIModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ImportDDIModel_args> {
      public ImportDDIModel() {
        super("ImportDDIModel");
      }

      public ImportDDIModel_args getEmptyArgsInstance() {
        return new ImportDDIModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ImportDDIModel_result getResult(I iface, ImportDDIModel_args args) throws org.apache.thrift.TException {
        ImportDDIModel_result result = new ImportDDIModel_result();
        try {
          result.success = iface.ImportDDIModel(args.DDIFilePath);
        } catch (TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException) {
          result.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
        }
        return result;
      }
    }

    public static class ValidateDDI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ValidateDDI_args> {
      public ValidateDDI() {
        super("ValidateDDI");
      }

      public ValidateDDI_args getEmptyArgsInstance() {
        return new ValidateDDI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ValidateDDI_result getResult(I iface, ValidateDDI_args args) throws org.apache.thrift.TException {
        ValidateDDI_result result = new ValidateDDI_result();
        result.success = iface.ValidateDDI(args.DDIFilePath, args.EvlFilePath);
        return result;
      }
    }

    public static class ExecuteEpsilonSriptsOnDDIFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ExecuteEpsilonSriptsOnDDIFile_args> {
      public ExecuteEpsilonSriptsOnDDIFile() {
        super("ExecuteEpsilonSriptsOnDDIFile");
      }

      public ExecuteEpsilonSriptsOnDDIFile_args getEmptyArgsInstance() {
        return new ExecuteEpsilonSriptsOnDDIFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ExecuteEpsilonSriptsOnDDIFile_result getResult(I iface, ExecuteEpsilonSriptsOnDDIFile_args args) throws org.apache.thrift.TException {
        ExecuteEpsilonSriptsOnDDIFile_result result = new ExecuteEpsilonSriptsOnDDIFile_result();
        try {
          result.success = iface.ExecuteEpsilonSriptsOnDDIFile(args.EpsilonScriptExecutionConfigs, args.BackupDDIFile, args.ReturnDDIPackage);
        } catch (TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException) {
          result.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ExportModelToDDIFile", new ExportModelToDDIFile());
      processMap.put("ImportDDIModel", new ImportDDIModel());
      processMap.put("ValidateDDI", new ValidateDDI());
      processMap.put("ExecuteEpsilonSriptsOnDDIFile", new ExecuteEpsilonSriptsOnDDIFile());
      return processMap;
    }

    public static class ExportModelToDDIFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ExportModelToDDIFile_args, Void> {
      public ExportModelToDDIFile() {
        super("ExportModelToDDIFile");
      }

      public ExportModelToDDIFile_args getEmptyArgsInstance() {
        return new ExportModelToDDIFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ExportModelToDDIFile_result result = new ExportModelToDDIFile_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ExportModelToDDIFile_result result = new ExportModelToDDIFile_result();
            if (e instanceof TDDIAbstractEpsilonScriptExecutionException) {
              result.EpsilonScriptExecutionException = (TDDIAbstractEpsilonScriptExecutionException) e;
              result.setEpsilonScriptExecutionExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ExportModelToDDIFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ExportModelToDDIFile(args.DDIFilePath, args.DDIPackage,resultHandler);
      }
    }

    public static class ImportDDIModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ImportDDIModel_args, TDDIDDIPackage> {
      public ImportDDIModel() {
        super("ImportDDIModel");
      }

      public ImportDDIModel_args getEmptyArgsInstance() {
        return new ImportDDIModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage>() { 
          public void onComplete(TDDIDDIPackage o) {
            ImportDDIModel_result result = new ImportDDIModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ImportDDIModel_result result = new ImportDDIModel_result();
            if (e instanceof TDDIAbstractEpsilonScriptExecutionException) {
              result.EpsilonScriptExecutionException = (TDDIAbstractEpsilonScriptExecutionException) e;
              result.setEpsilonScriptExecutionExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ImportDDIModel_args args, org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> resultHandler) throws org.apache.thrift.TException {
        iface.ImportDDIModel(args.DDIFilePath,resultHandler);
      }
    }

    public static class ValidateDDI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ValidateDDI_args, TDDIValidationResult> {
      public ValidateDDI() {
        super("ValidateDDI");
      }

      public ValidateDDI_args getEmptyArgsInstance() {
        return new ValidateDDI_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult>() { 
          public void onComplete(TDDIValidationResult o) {
            ValidateDDI_result result = new ValidateDDI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ValidateDDI_result result = new ValidateDDI_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ValidateDDI_args args, org.apache.thrift.async.AsyncMethodCallback<TDDIValidationResult> resultHandler) throws org.apache.thrift.TException {
        iface.ValidateDDI(args.DDIFilePath, args.EvlFilePath,resultHandler);
      }
    }

    public static class ExecuteEpsilonSriptsOnDDIFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ExecuteEpsilonSriptsOnDDIFile_args, TDDIDDIPackage> {
      public ExecuteEpsilonSriptsOnDDIFile() {
        super("ExecuteEpsilonSriptsOnDDIFile");
      }

      public ExecuteEpsilonSriptsOnDDIFile_args getEmptyArgsInstance() {
        return new ExecuteEpsilonSriptsOnDDIFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage>() { 
          public void onComplete(TDDIDDIPackage o) {
            ExecuteEpsilonSriptsOnDDIFile_result result = new ExecuteEpsilonSriptsOnDDIFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ExecuteEpsilonSriptsOnDDIFile_result result = new ExecuteEpsilonSriptsOnDDIFile_result();
            if (e instanceof TDDIAbstractEpsilonScriptExecutionException) {
              result.EpsilonScriptExecutionException = (TDDIAbstractEpsilonScriptExecutionException) e;
              result.setEpsilonScriptExecutionExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ExecuteEpsilonSriptsOnDDIFile_args args, org.apache.thrift.async.AsyncMethodCallback<TDDIDDIPackage> resultHandler) throws org.apache.thrift.TException {
        iface.ExecuteEpsilonSriptsOnDDIFile(args.EpsilonScriptExecutionConfigs, args.BackupDDIFile, args.ReturnDDIPackage,resultHandler);
      }
    }

  }

  public static class ExportModelToDDIFile_args implements org.apache.thrift.TBase<ExportModelToDDIFile_args, ExportModelToDDIFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<ExportModelToDDIFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExportModelToDDIFile_args");

    private static final org.apache.thrift.protocol.TField DDIFILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("DDIFilePath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DDIPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("DDIPackage", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExportModelToDDIFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExportModelToDDIFile_argsTupleSchemeFactory();

    public java.lang.String DDIFilePath; // required
    public TDDIDDIPackage DDIPackage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DDIFILE_PATH((short)1, "DDIFilePath"),
      DDIPACKAGE((short)2, "DDIPackage");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DDIFILE_PATH
            return DDIFILE_PATH;
          case 2: // DDIPACKAGE
            return DDIPACKAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DDIFILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("DDIFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DDIPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("DDIPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIDDIPackage.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExportModelToDDIFile_args.class, metaDataMap);
    }

    public ExportModelToDDIFile_args() {
    }

    public ExportModelToDDIFile_args(
      java.lang.String DDIFilePath,
      TDDIDDIPackage DDIPackage)
    {
      this();
      this.DDIFilePath = DDIFilePath;
      this.DDIPackage = DDIPackage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExportModelToDDIFile_args(ExportModelToDDIFile_args other) {
      if (other.isSetDDIFilePath()) {
        this.DDIFilePath = other.DDIFilePath;
      }
      if (other.isSetDDIPackage()) {
        this.DDIPackage = new TDDIDDIPackage(other.DDIPackage);
      }
    }

    public ExportModelToDDIFile_args deepCopy() {
      return new ExportModelToDDIFile_args(this);
    }

    @Override
    public void clear() {
      this.DDIFilePath = null;
      this.DDIPackage = null;
    }

    public java.lang.String getDDIFilePath() {
      return this.DDIFilePath;
    }

    public ExportModelToDDIFile_args setDDIFilePath(java.lang.String DDIFilePath) {
      this.DDIFilePath = DDIFilePath;
      return this;
    }

    public void unsetDDIFilePath() {
      this.DDIFilePath = null;
    }

    /** Returns true if field DDIFilePath is set (has been assigned a value) and false otherwise */
    public boolean isSetDDIFilePath() {
      return this.DDIFilePath != null;
    }

    public void setDDIFilePathIsSet(boolean value) {
      if (!value) {
        this.DDIFilePath = null;
      }
    }

    public TDDIDDIPackage getDDIPackage() {
      return this.DDIPackage;
    }

    public ExportModelToDDIFile_args setDDIPackage(TDDIDDIPackage DDIPackage) {
      this.DDIPackage = DDIPackage;
      return this;
    }

    public void unsetDDIPackage() {
      this.DDIPackage = null;
    }

    /** Returns true if field DDIPackage is set (has been assigned a value) and false otherwise */
    public boolean isSetDDIPackage() {
      return this.DDIPackage != null;
    }

    public void setDDIPackageIsSet(boolean value) {
      if (!value) {
        this.DDIPackage = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DDIFILE_PATH:
        if (value == null) {
          unsetDDIFilePath();
        } else {
          setDDIFilePath((java.lang.String)value);
        }
        break;

      case DDIPACKAGE:
        if (value == null) {
          unsetDDIPackage();
        } else {
          setDDIPackage((TDDIDDIPackage)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DDIFILE_PATH:
        return getDDIFilePath();

      case DDIPACKAGE:
        return getDDIPackage();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DDIFILE_PATH:
        return isSetDDIFilePath();
      case DDIPACKAGE:
        return isSetDDIPackage();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExportModelToDDIFile_args)
        return this.equals((ExportModelToDDIFile_args)that);
      return false;
    }

    public boolean equals(ExportModelToDDIFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DDIFilePath = true && this.isSetDDIFilePath();
      boolean that_present_DDIFilePath = true && that.isSetDDIFilePath();
      if (this_present_DDIFilePath || that_present_DDIFilePath) {
        if (!(this_present_DDIFilePath && that_present_DDIFilePath))
          return false;
        if (!this.DDIFilePath.equals(that.DDIFilePath))
          return false;
      }

      boolean this_present_DDIPackage = true && this.isSetDDIPackage();
      boolean that_present_DDIPackage = true && that.isSetDDIPackage();
      if (this_present_DDIPackage || that_present_DDIPackage) {
        if (!(this_present_DDIPackage && that_present_DDIPackage))
          return false;
        if (!this.DDIPackage.equals(that.DDIPackage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDDIFilePath()) ? 131071 : 524287);
      if (isSetDDIFilePath())
        hashCode = hashCode * 8191 + DDIFilePath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDDIPackage()) ? 131071 : 524287);
      if (isSetDDIPackage())
        hashCode = hashCode * 8191 + DDIPackage.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExportModelToDDIFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDDIFilePath()).compareTo(other.isSetDDIFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDDIFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DDIFilePath, other.DDIFilePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDDIPackage()).compareTo(other.isSetDDIPackage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDDIPackage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DDIPackage, other.DDIPackage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExportModelToDDIFile_args(");
      boolean first = true;

      sb.append("DDIFilePath:");
      if (this.DDIFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.DDIFilePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("DDIPackage:");
      if (this.DDIPackage == null) {
        sb.append("null");
      } else {
        sb.append(this.DDIPackage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (DDIPackage != null) {
        DDIPackage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExportModelToDDIFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExportModelToDDIFile_argsStandardScheme getScheme() {
        return new ExportModelToDDIFile_argsStandardScheme();
      }
    }

    private static class ExportModelToDDIFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExportModelToDDIFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExportModelToDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DDIFILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.DDIFilePath = iprot.readString();
                struct.setDDIFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DDIPACKAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.DDIPackage = new TDDIDDIPackage();
                struct.DDIPackage.read(iprot);
                struct.setDDIPackageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExportModelToDDIFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.DDIFilePath != null) {
          oprot.writeFieldBegin(DDIFILE_PATH_FIELD_DESC);
          oprot.writeString(struct.DDIFilePath);
          oprot.writeFieldEnd();
        }
        if (struct.DDIPackage != null) {
          oprot.writeFieldBegin(DDIPACKAGE_FIELD_DESC);
          struct.DDIPackage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExportModelToDDIFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExportModelToDDIFile_argsTupleScheme getScheme() {
        return new ExportModelToDDIFile_argsTupleScheme();
      }
    }

    private static class ExportModelToDDIFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExportModelToDDIFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExportModelToDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDDIFilePath()) {
          optionals.set(0);
        }
        if (struct.isSetDDIPackage()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDDIFilePath()) {
          oprot.writeString(struct.DDIFilePath);
        }
        if (struct.isSetDDIPackage()) {
          struct.DDIPackage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExportModelToDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.DDIFilePath = iprot.readString();
          struct.setDDIFilePathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.DDIPackage = new TDDIDDIPackage();
          struct.DDIPackage.read(iprot);
          struct.setDDIPackageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ExportModelToDDIFile_result implements org.apache.thrift.TBase<ExportModelToDDIFile_result, ExportModelToDDIFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<ExportModelToDDIFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExportModelToDDIFile_result");

    private static final org.apache.thrift.protocol.TField EPSILON_SCRIPT_EXECUTION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EpsilonScriptExecutionException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExportModelToDDIFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExportModelToDDIFile_resultTupleSchemeFactory();

    public TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EPSILON_SCRIPT_EXECUTION_EXCEPTION((short)1, "EpsilonScriptExecutionException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EPSILON_SCRIPT_EXECUTION_EXCEPTION
            return EPSILON_SCRIPT_EXECUTION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EPSILON_SCRIPT_EXECUTION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EpsilonScriptExecutionException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractEpsilonScriptExecutionException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExportModelToDDIFile_result.class, metaDataMap);
    }

    public ExportModelToDDIFile_result() {
    }

    public ExportModelToDDIFile_result(
      TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException)
    {
      this();
      this.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExportModelToDDIFile_result(ExportModelToDDIFile_result other) {
      if (other.isSetEpsilonScriptExecutionException()) {
        this.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException(other.EpsilonScriptExecutionException);
      }
    }

    public ExportModelToDDIFile_result deepCopy() {
      return new ExportModelToDDIFile_result(this);
    }

    @Override
    public void clear() {
      this.EpsilonScriptExecutionException = null;
    }

    public TDDIAbstractEpsilonScriptExecutionException getEpsilonScriptExecutionException() {
      return this.EpsilonScriptExecutionException;
    }

    public ExportModelToDDIFile_result setEpsilonScriptExecutionException(TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException) {
      this.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
      return this;
    }

    public void unsetEpsilonScriptExecutionException() {
      this.EpsilonScriptExecutionException = null;
    }

    /** Returns true if field EpsilonScriptExecutionException is set (has been assigned a value) and false otherwise */
    public boolean isSetEpsilonScriptExecutionException() {
      return this.EpsilonScriptExecutionException != null;
    }

    public void setEpsilonScriptExecutionExceptionIsSet(boolean value) {
      if (!value) {
        this.EpsilonScriptExecutionException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        if (value == null) {
          unsetEpsilonScriptExecutionException();
        } else {
          setEpsilonScriptExecutionException((TDDIAbstractEpsilonScriptExecutionException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        return getEpsilonScriptExecutionException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        return isSetEpsilonScriptExecutionException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExportModelToDDIFile_result)
        return this.equals((ExportModelToDDIFile_result)that);
      return false;
    }

    public boolean equals(ExportModelToDDIFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_EpsilonScriptExecutionException = true && this.isSetEpsilonScriptExecutionException();
      boolean that_present_EpsilonScriptExecutionException = true && that.isSetEpsilonScriptExecutionException();
      if (this_present_EpsilonScriptExecutionException || that_present_EpsilonScriptExecutionException) {
        if (!(this_present_EpsilonScriptExecutionException && that_present_EpsilonScriptExecutionException))
          return false;
        if (!this.EpsilonScriptExecutionException.equals(that.EpsilonScriptExecutionException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEpsilonScriptExecutionException()) ? 131071 : 524287);
      if (isSetEpsilonScriptExecutionException())
        hashCode = hashCode * 8191 + EpsilonScriptExecutionException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExportModelToDDIFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEpsilonScriptExecutionException()).compareTo(other.isSetEpsilonScriptExecutionException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEpsilonScriptExecutionException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EpsilonScriptExecutionException, other.EpsilonScriptExecutionException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExportModelToDDIFile_result(");
      boolean first = true;

      sb.append("EpsilonScriptExecutionException:");
      if (this.EpsilonScriptExecutionException == null) {
        sb.append("null");
      } else {
        sb.append(this.EpsilonScriptExecutionException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExportModelToDDIFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExportModelToDDIFile_resultStandardScheme getScheme() {
        return new ExportModelToDDIFile_resultStandardScheme();
      }
    }

    private static class ExportModelToDDIFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExportModelToDDIFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExportModelToDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EPSILON_SCRIPT_EXECUTION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException();
                struct.EpsilonScriptExecutionException.read(iprot);
                struct.setEpsilonScriptExecutionExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExportModelToDDIFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.EpsilonScriptExecutionException != null) {
          oprot.writeFieldBegin(EPSILON_SCRIPT_EXECUTION_EXCEPTION_FIELD_DESC);
          struct.EpsilonScriptExecutionException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExportModelToDDIFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExportModelToDDIFile_resultTupleScheme getScheme() {
        return new ExportModelToDDIFile_resultTupleScheme();
      }
    }

    private static class ExportModelToDDIFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExportModelToDDIFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExportModelToDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEpsilonScriptExecutionException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEpsilonScriptExecutionException()) {
          struct.EpsilonScriptExecutionException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExportModelToDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException();
          struct.EpsilonScriptExecutionException.read(iprot);
          struct.setEpsilonScriptExecutionExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ImportDDIModel_args implements org.apache.thrift.TBase<ImportDDIModel_args, ImportDDIModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<ImportDDIModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImportDDIModel_args");

    private static final org.apache.thrift.protocol.TField DDIFILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("DDIFilePath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImportDDIModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImportDDIModel_argsTupleSchemeFactory();

    public java.lang.String DDIFilePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DDIFILE_PATH((short)1, "DDIFilePath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DDIFILE_PATH
            return DDIFILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DDIFILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("DDIFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImportDDIModel_args.class, metaDataMap);
    }

    public ImportDDIModel_args() {
    }

    public ImportDDIModel_args(
      java.lang.String DDIFilePath)
    {
      this();
      this.DDIFilePath = DDIFilePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ImportDDIModel_args(ImportDDIModel_args other) {
      if (other.isSetDDIFilePath()) {
        this.DDIFilePath = other.DDIFilePath;
      }
    }

    public ImportDDIModel_args deepCopy() {
      return new ImportDDIModel_args(this);
    }

    @Override
    public void clear() {
      this.DDIFilePath = null;
    }

    public java.lang.String getDDIFilePath() {
      return this.DDIFilePath;
    }

    public ImportDDIModel_args setDDIFilePath(java.lang.String DDIFilePath) {
      this.DDIFilePath = DDIFilePath;
      return this;
    }

    public void unsetDDIFilePath() {
      this.DDIFilePath = null;
    }

    /** Returns true if field DDIFilePath is set (has been assigned a value) and false otherwise */
    public boolean isSetDDIFilePath() {
      return this.DDIFilePath != null;
    }

    public void setDDIFilePathIsSet(boolean value) {
      if (!value) {
        this.DDIFilePath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DDIFILE_PATH:
        if (value == null) {
          unsetDDIFilePath();
        } else {
          setDDIFilePath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DDIFILE_PATH:
        return getDDIFilePath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DDIFILE_PATH:
        return isSetDDIFilePath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ImportDDIModel_args)
        return this.equals((ImportDDIModel_args)that);
      return false;
    }

    public boolean equals(ImportDDIModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DDIFilePath = true && this.isSetDDIFilePath();
      boolean that_present_DDIFilePath = true && that.isSetDDIFilePath();
      if (this_present_DDIFilePath || that_present_DDIFilePath) {
        if (!(this_present_DDIFilePath && that_present_DDIFilePath))
          return false;
        if (!this.DDIFilePath.equals(that.DDIFilePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDDIFilePath()) ? 131071 : 524287);
      if (isSetDDIFilePath())
        hashCode = hashCode * 8191 + DDIFilePath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ImportDDIModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDDIFilePath()).compareTo(other.isSetDDIFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDDIFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DDIFilePath, other.DDIFilePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ImportDDIModel_args(");
      boolean first = true;

      sb.append("DDIFilePath:");
      if (this.DDIFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.DDIFilePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ImportDDIModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ImportDDIModel_argsStandardScheme getScheme() {
        return new ImportDDIModel_argsStandardScheme();
      }
    }

    private static class ImportDDIModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImportDDIModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ImportDDIModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DDIFILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.DDIFilePath = iprot.readString();
                struct.setDDIFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ImportDDIModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.DDIFilePath != null) {
          oprot.writeFieldBegin(DDIFILE_PATH_FIELD_DESC);
          oprot.writeString(struct.DDIFilePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ImportDDIModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ImportDDIModel_argsTupleScheme getScheme() {
        return new ImportDDIModel_argsTupleScheme();
      }
    }

    private static class ImportDDIModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImportDDIModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ImportDDIModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDDIFilePath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDDIFilePath()) {
          oprot.writeString(struct.DDIFilePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ImportDDIModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.DDIFilePath = iprot.readString();
          struct.setDDIFilePathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ImportDDIModel_result implements org.apache.thrift.TBase<ImportDDIModel_result, ImportDDIModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<ImportDDIModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImportDDIModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EPSILON_SCRIPT_EXECUTION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EpsilonScriptExecutionException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImportDDIModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImportDDIModel_resultTupleSchemeFactory();

    public TDDIDDIPackage success; // required
    public TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EPSILON_SCRIPT_EXECUTION_EXCEPTION((short)1, "EpsilonScriptExecutionException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EPSILON_SCRIPT_EXECUTION_EXCEPTION
            return EPSILON_SCRIPT_EXECUTION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIDDIPackage.class)));
      tmpMap.put(_Fields.EPSILON_SCRIPT_EXECUTION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EpsilonScriptExecutionException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractEpsilonScriptExecutionException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImportDDIModel_result.class, metaDataMap);
    }

    public ImportDDIModel_result() {
    }

    public ImportDDIModel_result(
      TDDIDDIPackage success,
      TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException)
    {
      this();
      this.success = success;
      this.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ImportDDIModel_result(ImportDDIModel_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDDIDDIPackage(other.success);
      }
      if (other.isSetEpsilonScriptExecutionException()) {
        this.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException(other.EpsilonScriptExecutionException);
      }
    }

    public ImportDDIModel_result deepCopy() {
      return new ImportDDIModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EpsilonScriptExecutionException = null;
    }

    public TDDIDDIPackage getSuccess() {
      return this.success;
    }

    public ImportDDIModel_result setSuccess(TDDIDDIPackage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDDIAbstractEpsilonScriptExecutionException getEpsilonScriptExecutionException() {
      return this.EpsilonScriptExecutionException;
    }

    public ImportDDIModel_result setEpsilonScriptExecutionException(TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException) {
      this.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
      return this;
    }

    public void unsetEpsilonScriptExecutionException() {
      this.EpsilonScriptExecutionException = null;
    }

    /** Returns true if field EpsilonScriptExecutionException is set (has been assigned a value) and false otherwise */
    public boolean isSetEpsilonScriptExecutionException() {
      return this.EpsilonScriptExecutionException != null;
    }

    public void setEpsilonScriptExecutionExceptionIsSet(boolean value) {
      if (!value) {
        this.EpsilonScriptExecutionException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDDIDDIPackage)value);
        }
        break;

      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        if (value == null) {
          unsetEpsilonScriptExecutionException();
        } else {
          setEpsilonScriptExecutionException((TDDIAbstractEpsilonScriptExecutionException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        return getEpsilonScriptExecutionException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        return isSetEpsilonScriptExecutionException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ImportDDIModel_result)
        return this.equals((ImportDDIModel_result)that);
      return false;
    }

    public boolean equals(ImportDDIModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EpsilonScriptExecutionException = true && this.isSetEpsilonScriptExecutionException();
      boolean that_present_EpsilonScriptExecutionException = true && that.isSetEpsilonScriptExecutionException();
      if (this_present_EpsilonScriptExecutionException || that_present_EpsilonScriptExecutionException) {
        if (!(this_present_EpsilonScriptExecutionException && that_present_EpsilonScriptExecutionException))
          return false;
        if (!this.EpsilonScriptExecutionException.equals(that.EpsilonScriptExecutionException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEpsilonScriptExecutionException()) ? 131071 : 524287);
      if (isSetEpsilonScriptExecutionException())
        hashCode = hashCode * 8191 + EpsilonScriptExecutionException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ImportDDIModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEpsilonScriptExecutionException()).compareTo(other.isSetEpsilonScriptExecutionException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEpsilonScriptExecutionException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EpsilonScriptExecutionException, other.EpsilonScriptExecutionException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ImportDDIModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EpsilonScriptExecutionException:");
      if (this.EpsilonScriptExecutionException == null) {
        sb.append("null");
      } else {
        sb.append(this.EpsilonScriptExecutionException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ImportDDIModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ImportDDIModel_resultStandardScheme getScheme() {
        return new ImportDDIModel_resultStandardScheme();
      }
    }

    private static class ImportDDIModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImportDDIModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ImportDDIModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDDIDDIPackage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EPSILON_SCRIPT_EXECUTION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException();
                struct.EpsilonScriptExecutionException.read(iprot);
                struct.setEpsilonScriptExecutionExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ImportDDIModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EpsilonScriptExecutionException != null) {
          oprot.writeFieldBegin(EPSILON_SCRIPT_EXECUTION_EXCEPTION_FIELD_DESC);
          struct.EpsilonScriptExecutionException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ImportDDIModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ImportDDIModel_resultTupleScheme getScheme() {
        return new ImportDDIModel_resultTupleScheme();
      }
    }

    private static class ImportDDIModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImportDDIModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ImportDDIModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEpsilonScriptExecutionException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEpsilonScriptExecutionException()) {
          struct.EpsilonScriptExecutionException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ImportDDIModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TDDIDDIPackage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException();
          struct.EpsilonScriptExecutionException.read(iprot);
          struct.setEpsilonScriptExecutionExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ValidateDDI_args implements org.apache.thrift.TBase<ValidateDDI_args, ValidateDDI_args._Fields>, java.io.Serializable, Cloneable, Comparable<ValidateDDI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ValidateDDI_args");

    private static final org.apache.thrift.protocol.TField DDIFILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("DDIFilePath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EVL_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("EvlFilePath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ValidateDDI_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ValidateDDI_argsTupleSchemeFactory();

    public java.lang.String DDIFilePath; // required
    public java.lang.String EvlFilePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DDIFILE_PATH((short)1, "DDIFilePath"),
      EVL_FILE_PATH((short)2, "EvlFilePath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DDIFILE_PATH
            return DDIFILE_PATH;
          case 2: // EVL_FILE_PATH
            return EVL_FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DDIFILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("DDIFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EVL_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("EvlFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ValidateDDI_args.class, metaDataMap);
    }

    public ValidateDDI_args() {
    }

    public ValidateDDI_args(
      java.lang.String DDIFilePath,
      java.lang.String EvlFilePath)
    {
      this();
      this.DDIFilePath = DDIFilePath;
      this.EvlFilePath = EvlFilePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ValidateDDI_args(ValidateDDI_args other) {
      if (other.isSetDDIFilePath()) {
        this.DDIFilePath = other.DDIFilePath;
      }
      if (other.isSetEvlFilePath()) {
        this.EvlFilePath = other.EvlFilePath;
      }
    }

    public ValidateDDI_args deepCopy() {
      return new ValidateDDI_args(this);
    }

    @Override
    public void clear() {
      this.DDIFilePath = null;
      this.EvlFilePath = null;
    }

    public java.lang.String getDDIFilePath() {
      return this.DDIFilePath;
    }

    public ValidateDDI_args setDDIFilePath(java.lang.String DDIFilePath) {
      this.DDIFilePath = DDIFilePath;
      return this;
    }

    public void unsetDDIFilePath() {
      this.DDIFilePath = null;
    }

    /** Returns true if field DDIFilePath is set (has been assigned a value) and false otherwise */
    public boolean isSetDDIFilePath() {
      return this.DDIFilePath != null;
    }

    public void setDDIFilePathIsSet(boolean value) {
      if (!value) {
        this.DDIFilePath = null;
      }
    }

    public java.lang.String getEvlFilePath() {
      return this.EvlFilePath;
    }

    public ValidateDDI_args setEvlFilePath(java.lang.String EvlFilePath) {
      this.EvlFilePath = EvlFilePath;
      return this;
    }

    public void unsetEvlFilePath() {
      this.EvlFilePath = null;
    }

    /** Returns true if field EvlFilePath is set (has been assigned a value) and false otherwise */
    public boolean isSetEvlFilePath() {
      return this.EvlFilePath != null;
    }

    public void setEvlFilePathIsSet(boolean value) {
      if (!value) {
        this.EvlFilePath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DDIFILE_PATH:
        if (value == null) {
          unsetDDIFilePath();
        } else {
          setDDIFilePath((java.lang.String)value);
        }
        break;

      case EVL_FILE_PATH:
        if (value == null) {
          unsetEvlFilePath();
        } else {
          setEvlFilePath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DDIFILE_PATH:
        return getDDIFilePath();

      case EVL_FILE_PATH:
        return getEvlFilePath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DDIFILE_PATH:
        return isSetDDIFilePath();
      case EVL_FILE_PATH:
        return isSetEvlFilePath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ValidateDDI_args)
        return this.equals((ValidateDDI_args)that);
      return false;
    }

    public boolean equals(ValidateDDI_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DDIFilePath = true && this.isSetDDIFilePath();
      boolean that_present_DDIFilePath = true && that.isSetDDIFilePath();
      if (this_present_DDIFilePath || that_present_DDIFilePath) {
        if (!(this_present_DDIFilePath && that_present_DDIFilePath))
          return false;
        if (!this.DDIFilePath.equals(that.DDIFilePath))
          return false;
      }

      boolean this_present_EvlFilePath = true && this.isSetEvlFilePath();
      boolean that_present_EvlFilePath = true && that.isSetEvlFilePath();
      if (this_present_EvlFilePath || that_present_EvlFilePath) {
        if (!(this_present_EvlFilePath && that_present_EvlFilePath))
          return false;
        if (!this.EvlFilePath.equals(that.EvlFilePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDDIFilePath()) ? 131071 : 524287);
      if (isSetDDIFilePath())
        hashCode = hashCode * 8191 + DDIFilePath.hashCode();

      hashCode = hashCode * 8191 + ((isSetEvlFilePath()) ? 131071 : 524287);
      if (isSetEvlFilePath())
        hashCode = hashCode * 8191 + EvlFilePath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ValidateDDI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDDIFilePath()).compareTo(other.isSetDDIFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDDIFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DDIFilePath, other.DDIFilePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEvlFilePath()).compareTo(other.isSetEvlFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvlFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EvlFilePath, other.EvlFilePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ValidateDDI_args(");
      boolean first = true;

      sb.append("DDIFilePath:");
      if (this.DDIFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.DDIFilePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EvlFilePath:");
      if (this.EvlFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.EvlFilePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ValidateDDI_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ValidateDDI_argsStandardScheme getScheme() {
        return new ValidateDDI_argsStandardScheme();
      }
    }

    private static class ValidateDDI_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ValidateDDI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ValidateDDI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DDIFILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.DDIFilePath = iprot.readString();
                struct.setDDIFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVL_FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.EvlFilePath = iprot.readString();
                struct.setEvlFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ValidateDDI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.DDIFilePath != null) {
          oprot.writeFieldBegin(DDIFILE_PATH_FIELD_DESC);
          oprot.writeString(struct.DDIFilePath);
          oprot.writeFieldEnd();
        }
        if (struct.EvlFilePath != null) {
          oprot.writeFieldBegin(EVL_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.EvlFilePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ValidateDDI_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ValidateDDI_argsTupleScheme getScheme() {
        return new ValidateDDI_argsTupleScheme();
      }
    }

    private static class ValidateDDI_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ValidateDDI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ValidateDDI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDDIFilePath()) {
          optionals.set(0);
        }
        if (struct.isSetEvlFilePath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDDIFilePath()) {
          oprot.writeString(struct.DDIFilePath);
        }
        if (struct.isSetEvlFilePath()) {
          oprot.writeString(struct.EvlFilePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ValidateDDI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.DDIFilePath = iprot.readString();
          struct.setDDIFilePathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EvlFilePath = iprot.readString();
          struct.setEvlFilePathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ValidateDDI_result implements org.apache.thrift.TBase<ValidateDDI_result, ValidateDDI_result._Fields>, java.io.Serializable, Cloneable, Comparable<ValidateDDI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ValidateDDI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ValidateDDI_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ValidateDDI_resultTupleSchemeFactory();

    public TDDIValidationResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIValidationResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ValidateDDI_result.class, metaDataMap);
    }

    public ValidateDDI_result() {
    }

    public ValidateDDI_result(
      TDDIValidationResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ValidateDDI_result(ValidateDDI_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDDIValidationResult(other.success);
      }
    }

    public ValidateDDI_result deepCopy() {
      return new ValidateDDI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TDDIValidationResult getSuccess() {
      return this.success;
    }

    public ValidateDDI_result setSuccess(TDDIValidationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDDIValidationResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ValidateDDI_result)
        return this.equals((ValidateDDI_result)that);
      return false;
    }

    public boolean equals(ValidateDDI_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ValidateDDI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ValidateDDI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ValidateDDI_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ValidateDDI_resultStandardScheme getScheme() {
        return new ValidateDDI_resultStandardScheme();
      }
    }

    private static class ValidateDDI_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ValidateDDI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ValidateDDI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDDIValidationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ValidateDDI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ValidateDDI_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ValidateDDI_resultTupleScheme getScheme() {
        return new ValidateDDI_resultTupleScheme();
      }
    }

    private static class ValidateDDI_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ValidateDDI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ValidateDDI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ValidateDDI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TDDIValidationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ExecuteEpsilonSriptsOnDDIFile_args implements org.apache.thrift.TBase<ExecuteEpsilonSriptsOnDDIFile_args, ExecuteEpsilonSriptsOnDDIFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteEpsilonSriptsOnDDIFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteEpsilonSriptsOnDDIFile_args");

    private static final org.apache.thrift.protocol.TField EPSILON_SCRIPT_EXECUTION_CONFIGS_FIELD_DESC = new org.apache.thrift.protocol.TField("EpsilonScriptExecutionConfigs", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField BACKUP_DDIFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("BackupDDIFile", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField RETURN_DDIPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ReturnDDIPackage", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExecuteEpsilonSriptsOnDDIFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExecuteEpsilonSriptsOnDDIFile_argsTupleSchemeFactory();

    public java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs; // required
    public boolean BackupDDIFile; // required
    public boolean ReturnDDIPackage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EPSILON_SCRIPT_EXECUTION_CONFIGS((short)1, "EpsilonScriptExecutionConfigs"),
      BACKUP_DDIFILE((short)2, "BackupDDIFile"),
      RETURN_DDIPACKAGE((short)3, "ReturnDDIPackage");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EPSILON_SCRIPT_EXECUTION_CONFIGS
            return EPSILON_SCRIPT_EXECUTION_CONFIGS;
          case 2: // BACKUP_DDIFILE
            return BACKUP_DDIFILE;
          case 3: // RETURN_DDIPACKAGE
            return RETURN_DDIPACKAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BACKUPDDIFILE_ISSET_ID = 0;
    private static final int __RETURNDDIPACKAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EPSILON_SCRIPT_EXECUTION_CONFIGS, new org.apache.thrift.meta_data.FieldMetaData("EpsilonScriptExecutionConfigs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIEpsilonScriptExecutionConfig.class))));
      tmpMap.put(_Fields.BACKUP_DDIFILE, new org.apache.thrift.meta_data.FieldMetaData("BackupDDIFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.RETURN_DDIPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ReturnDDIPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteEpsilonSriptsOnDDIFile_args.class, metaDataMap);
    }

    public ExecuteEpsilonSriptsOnDDIFile_args() {
    }

    public ExecuteEpsilonSriptsOnDDIFile_args(
      java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs,
      boolean BackupDDIFile,
      boolean ReturnDDIPackage)
    {
      this();
      this.EpsilonScriptExecutionConfigs = EpsilonScriptExecutionConfigs;
      this.BackupDDIFile = BackupDDIFile;
      setBackupDDIFileIsSet(true);
      this.ReturnDDIPackage = ReturnDDIPackage;
      setReturnDDIPackageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExecuteEpsilonSriptsOnDDIFile_args(ExecuteEpsilonSriptsOnDDIFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEpsilonScriptExecutionConfigs()) {
        java.util.List<TDDIEpsilonScriptExecutionConfig> __this__EpsilonScriptExecutionConfigs = new java.util.ArrayList<TDDIEpsilonScriptExecutionConfig>(other.EpsilonScriptExecutionConfigs.size());
        for (TDDIEpsilonScriptExecutionConfig other_element : other.EpsilonScriptExecutionConfigs) {
          __this__EpsilonScriptExecutionConfigs.add(new TDDIEpsilonScriptExecutionConfig(other_element));
        }
        this.EpsilonScriptExecutionConfigs = __this__EpsilonScriptExecutionConfigs;
      }
      this.BackupDDIFile = other.BackupDDIFile;
      this.ReturnDDIPackage = other.ReturnDDIPackage;
    }

    public ExecuteEpsilonSriptsOnDDIFile_args deepCopy() {
      return new ExecuteEpsilonSriptsOnDDIFile_args(this);
    }

    @Override
    public void clear() {
      this.EpsilonScriptExecutionConfigs = null;
      setBackupDDIFileIsSet(false);
      this.BackupDDIFile = false;
      setReturnDDIPackageIsSet(false);
      this.ReturnDDIPackage = false;
    }

    public int getEpsilonScriptExecutionConfigsSize() {
      return (this.EpsilonScriptExecutionConfigs == null) ? 0 : this.EpsilonScriptExecutionConfigs.size();
    }

    public java.util.Iterator<TDDIEpsilonScriptExecutionConfig> getEpsilonScriptExecutionConfigsIterator() {
      return (this.EpsilonScriptExecutionConfigs == null) ? null : this.EpsilonScriptExecutionConfigs.iterator();
    }

    public void addToEpsilonScriptExecutionConfigs(TDDIEpsilonScriptExecutionConfig elem) {
      if (this.EpsilonScriptExecutionConfigs == null) {
        this.EpsilonScriptExecutionConfigs = new java.util.ArrayList<TDDIEpsilonScriptExecutionConfig>();
      }
      this.EpsilonScriptExecutionConfigs.add(elem);
    }

    public java.util.List<TDDIEpsilonScriptExecutionConfig> getEpsilonScriptExecutionConfigs() {
      return this.EpsilonScriptExecutionConfigs;
    }

    public ExecuteEpsilonSriptsOnDDIFile_args setEpsilonScriptExecutionConfigs(java.util.List<TDDIEpsilonScriptExecutionConfig> EpsilonScriptExecutionConfigs) {
      this.EpsilonScriptExecutionConfigs = EpsilonScriptExecutionConfigs;
      return this;
    }

    public void unsetEpsilonScriptExecutionConfigs() {
      this.EpsilonScriptExecutionConfigs = null;
    }

    /** Returns true if field EpsilonScriptExecutionConfigs is set (has been assigned a value) and false otherwise */
    public boolean isSetEpsilonScriptExecutionConfigs() {
      return this.EpsilonScriptExecutionConfigs != null;
    }

    public void setEpsilonScriptExecutionConfigsIsSet(boolean value) {
      if (!value) {
        this.EpsilonScriptExecutionConfigs = null;
      }
    }

    public boolean isBackupDDIFile() {
      return this.BackupDDIFile;
    }

    public ExecuteEpsilonSriptsOnDDIFile_args setBackupDDIFile(boolean BackupDDIFile) {
      this.BackupDDIFile = BackupDDIFile;
      setBackupDDIFileIsSet(true);
      return this;
    }

    public void unsetBackupDDIFile() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKUPDDIFILE_ISSET_ID);
    }

    /** Returns true if field BackupDDIFile is set (has been assigned a value) and false otherwise */
    public boolean isSetBackupDDIFile() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKUPDDIFILE_ISSET_ID);
    }

    public void setBackupDDIFileIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKUPDDIFILE_ISSET_ID, value);
    }

    public boolean isReturnDDIPackage() {
      return this.ReturnDDIPackage;
    }

    public ExecuteEpsilonSriptsOnDDIFile_args setReturnDDIPackage(boolean ReturnDDIPackage) {
      this.ReturnDDIPackage = ReturnDDIPackage;
      setReturnDDIPackageIsSet(true);
      return this;
    }

    public void unsetReturnDDIPackage() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETURNDDIPACKAGE_ISSET_ID);
    }

    /** Returns true if field ReturnDDIPackage is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnDDIPackage() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETURNDDIPACKAGE_ISSET_ID);
    }

    public void setReturnDDIPackageIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETURNDDIPACKAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EPSILON_SCRIPT_EXECUTION_CONFIGS:
        if (value == null) {
          unsetEpsilonScriptExecutionConfigs();
        } else {
          setEpsilonScriptExecutionConfigs((java.util.List<TDDIEpsilonScriptExecutionConfig>)value);
        }
        break;

      case BACKUP_DDIFILE:
        if (value == null) {
          unsetBackupDDIFile();
        } else {
          setBackupDDIFile((java.lang.Boolean)value);
        }
        break;

      case RETURN_DDIPACKAGE:
        if (value == null) {
          unsetReturnDDIPackage();
        } else {
          setReturnDDIPackage((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EPSILON_SCRIPT_EXECUTION_CONFIGS:
        return getEpsilonScriptExecutionConfigs();

      case BACKUP_DDIFILE:
        return isBackupDDIFile();

      case RETURN_DDIPACKAGE:
        return isReturnDDIPackage();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EPSILON_SCRIPT_EXECUTION_CONFIGS:
        return isSetEpsilonScriptExecutionConfigs();
      case BACKUP_DDIFILE:
        return isSetBackupDDIFile();
      case RETURN_DDIPACKAGE:
        return isSetReturnDDIPackage();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExecuteEpsilonSriptsOnDDIFile_args)
        return this.equals((ExecuteEpsilonSriptsOnDDIFile_args)that);
      return false;
    }

    public boolean equals(ExecuteEpsilonSriptsOnDDIFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_EpsilonScriptExecutionConfigs = true && this.isSetEpsilonScriptExecutionConfigs();
      boolean that_present_EpsilonScriptExecutionConfigs = true && that.isSetEpsilonScriptExecutionConfigs();
      if (this_present_EpsilonScriptExecutionConfigs || that_present_EpsilonScriptExecutionConfigs) {
        if (!(this_present_EpsilonScriptExecutionConfigs && that_present_EpsilonScriptExecutionConfigs))
          return false;
        if (!this.EpsilonScriptExecutionConfigs.equals(that.EpsilonScriptExecutionConfigs))
          return false;
      }

      boolean this_present_BackupDDIFile = true;
      boolean that_present_BackupDDIFile = true;
      if (this_present_BackupDDIFile || that_present_BackupDDIFile) {
        if (!(this_present_BackupDDIFile && that_present_BackupDDIFile))
          return false;
        if (this.BackupDDIFile != that.BackupDDIFile)
          return false;
      }

      boolean this_present_ReturnDDIPackage = true;
      boolean that_present_ReturnDDIPackage = true;
      if (this_present_ReturnDDIPackage || that_present_ReturnDDIPackage) {
        if (!(this_present_ReturnDDIPackage && that_present_ReturnDDIPackage))
          return false;
        if (this.ReturnDDIPackage != that.ReturnDDIPackage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEpsilonScriptExecutionConfigs()) ? 131071 : 524287);
      if (isSetEpsilonScriptExecutionConfigs())
        hashCode = hashCode * 8191 + EpsilonScriptExecutionConfigs.hashCode();

      hashCode = hashCode * 8191 + ((BackupDDIFile) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((ReturnDDIPackage) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(ExecuteEpsilonSriptsOnDDIFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEpsilonScriptExecutionConfigs()).compareTo(other.isSetEpsilonScriptExecutionConfigs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEpsilonScriptExecutionConfigs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EpsilonScriptExecutionConfigs, other.EpsilonScriptExecutionConfigs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBackupDDIFile()).compareTo(other.isSetBackupDDIFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBackupDDIFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BackupDDIFile, other.BackupDDIFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReturnDDIPackage()).compareTo(other.isSetReturnDDIPackage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnDDIPackage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReturnDDIPackage, other.ReturnDDIPackage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExecuteEpsilonSriptsOnDDIFile_args(");
      boolean first = true;

      sb.append("EpsilonScriptExecutionConfigs:");
      if (this.EpsilonScriptExecutionConfigs == null) {
        sb.append("null");
      } else {
        sb.append(this.EpsilonScriptExecutionConfigs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("BackupDDIFile:");
      sb.append(this.BackupDDIFile);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ReturnDDIPackage:");
      sb.append(this.ReturnDDIPackage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExecuteEpsilonSriptsOnDDIFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteEpsilonSriptsOnDDIFile_argsStandardScheme getScheme() {
        return new ExecuteEpsilonSriptsOnDDIFile_argsStandardScheme();
      }
    }

    private static class ExecuteEpsilonSriptsOnDDIFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExecuteEpsilonSriptsOnDDIFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteEpsilonSriptsOnDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EPSILON_SCRIPT_EXECUTION_CONFIGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3064 = iprot.readListBegin();
                  struct.EpsilonScriptExecutionConfigs = new java.util.ArrayList<TDDIEpsilonScriptExecutionConfig>(_list3064.size);
                  TDDIEpsilonScriptExecutionConfig _elem3065;
                  for (int _i3066 = 0; _i3066 < _list3064.size; ++_i3066)
                  {
                    _elem3065 = new TDDIEpsilonScriptExecutionConfig();
                    _elem3065.read(iprot);
                    struct.EpsilonScriptExecutionConfigs.add(_elem3065);
                  }
                  iprot.readListEnd();
                }
                struct.setEpsilonScriptExecutionConfigsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BACKUP_DDIFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.BackupDDIFile = iprot.readBool();
                struct.setBackupDDIFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RETURN_DDIPACKAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.ReturnDDIPackage = iprot.readBool();
                struct.setReturnDDIPackageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteEpsilonSriptsOnDDIFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.EpsilonScriptExecutionConfigs != null) {
          oprot.writeFieldBegin(EPSILON_SCRIPT_EXECUTION_CONFIGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.EpsilonScriptExecutionConfigs.size()));
            for (TDDIEpsilonScriptExecutionConfig _iter3067 : struct.EpsilonScriptExecutionConfigs)
            {
              _iter3067.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BACKUP_DDIFILE_FIELD_DESC);
        oprot.writeBool(struct.BackupDDIFile);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RETURN_DDIPACKAGE_FIELD_DESC);
        oprot.writeBool(struct.ReturnDDIPackage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExecuteEpsilonSriptsOnDDIFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteEpsilonSriptsOnDDIFile_argsTupleScheme getScheme() {
        return new ExecuteEpsilonSriptsOnDDIFile_argsTupleScheme();
      }
    }

    private static class ExecuteEpsilonSriptsOnDDIFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExecuteEpsilonSriptsOnDDIFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteEpsilonSriptsOnDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEpsilonScriptExecutionConfigs()) {
          optionals.set(0);
        }
        if (struct.isSetBackupDDIFile()) {
          optionals.set(1);
        }
        if (struct.isSetReturnDDIPackage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEpsilonScriptExecutionConfigs()) {
          {
            oprot.writeI32(struct.EpsilonScriptExecutionConfigs.size());
            for (TDDIEpsilonScriptExecutionConfig _iter3068 : struct.EpsilonScriptExecutionConfigs)
            {
              _iter3068.write(oprot);
            }
          }
        }
        if (struct.isSetBackupDDIFile()) {
          oprot.writeBool(struct.BackupDDIFile);
        }
        if (struct.isSetReturnDDIPackage()) {
          oprot.writeBool(struct.ReturnDDIPackage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteEpsilonSriptsOnDDIFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list3069 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.EpsilonScriptExecutionConfigs = new java.util.ArrayList<TDDIEpsilonScriptExecutionConfig>(_list3069.size);
            TDDIEpsilonScriptExecutionConfig _elem3070;
            for (int _i3071 = 0; _i3071 < _list3069.size; ++_i3071)
            {
              _elem3070 = new TDDIEpsilonScriptExecutionConfig();
              _elem3070.read(iprot);
              struct.EpsilonScriptExecutionConfigs.add(_elem3070);
            }
          }
          struct.setEpsilonScriptExecutionConfigsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.BackupDDIFile = iprot.readBool();
          struct.setBackupDDIFileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ReturnDDIPackage = iprot.readBool();
          struct.setReturnDDIPackageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ExecuteEpsilonSriptsOnDDIFile_result implements org.apache.thrift.TBase<ExecuteEpsilonSriptsOnDDIFile_result, ExecuteEpsilonSriptsOnDDIFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<ExecuteEpsilonSriptsOnDDIFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecuteEpsilonSriptsOnDDIFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EPSILON_SCRIPT_EXECUTION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("EpsilonScriptExecutionException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExecuteEpsilonSriptsOnDDIFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExecuteEpsilonSriptsOnDDIFile_resultTupleSchemeFactory();

    public TDDIDDIPackage success; // required
    public TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EPSILON_SCRIPT_EXECUTION_EXCEPTION((short)1, "EpsilonScriptExecutionException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EPSILON_SCRIPT_EXECUTION_EXCEPTION
            return EPSILON_SCRIPT_EXECUTION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIDDIPackage.class)));
      tmpMap.put(_Fields.EPSILON_SCRIPT_EXECUTION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("EpsilonScriptExecutionException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractEpsilonScriptExecutionException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteEpsilonSriptsOnDDIFile_result.class, metaDataMap);
    }

    public ExecuteEpsilonSriptsOnDDIFile_result() {
    }

    public ExecuteEpsilonSriptsOnDDIFile_result(
      TDDIDDIPackage success,
      TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException)
    {
      this();
      this.success = success;
      this.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ExecuteEpsilonSriptsOnDDIFile_result(ExecuteEpsilonSriptsOnDDIFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDDIDDIPackage(other.success);
      }
      if (other.isSetEpsilonScriptExecutionException()) {
        this.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException(other.EpsilonScriptExecutionException);
      }
    }

    public ExecuteEpsilonSriptsOnDDIFile_result deepCopy() {
      return new ExecuteEpsilonSriptsOnDDIFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.EpsilonScriptExecutionException = null;
    }

    public TDDIDDIPackage getSuccess() {
      return this.success;
    }

    public ExecuteEpsilonSriptsOnDDIFile_result setSuccess(TDDIDDIPackage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TDDIAbstractEpsilonScriptExecutionException getEpsilonScriptExecutionException() {
      return this.EpsilonScriptExecutionException;
    }

    public ExecuteEpsilonSriptsOnDDIFile_result setEpsilonScriptExecutionException(TDDIAbstractEpsilonScriptExecutionException EpsilonScriptExecutionException) {
      this.EpsilonScriptExecutionException = EpsilonScriptExecutionException;
      return this;
    }

    public void unsetEpsilonScriptExecutionException() {
      this.EpsilonScriptExecutionException = null;
    }

    /** Returns true if field EpsilonScriptExecutionException is set (has been assigned a value) and false otherwise */
    public boolean isSetEpsilonScriptExecutionException() {
      return this.EpsilonScriptExecutionException != null;
    }

    public void setEpsilonScriptExecutionExceptionIsSet(boolean value) {
      if (!value) {
        this.EpsilonScriptExecutionException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDDIDDIPackage)value);
        }
        break;

      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        if (value == null) {
          unsetEpsilonScriptExecutionException();
        } else {
          setEpsilonScriptExecutionException((TDDIAbstractEpsilonScriptExecutionException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        return getEpsilonScriptExecutionException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EPSILON_SCRIPT_EXECUTION_EXCEPTION:
        return isSetEpsilonScriptExecutionException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ExecuteEpsilonSriptsOnDDIFile_result)
        return this.equals((ExecuteEpsilonSriptsOnDDIFile_result)that);
      return false;
    }

    public boolean equals(ExecuteEpsilonSriptsOnDDIFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_EpsilonScriptExecutionException = true && this.isSetEpsilonScriptExecutionException();
      boolean that_present_EpsilonScriptExecutionException = true && that.isSetEpsilonScriptExecutionException();
      if (this_present_EpsilonScriptExecutionException || that_present_EpsilonScriptExecutionException) {
        if (!(this_present_EpsilonScriptExecutionException && that_present_EpsilonScriptExecutionException))
          return false;
        if (!this.EpsilonScriptExecutionException.equals(that.EpsilonScriptExecutionException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEpsilonScriptExecutionException()) ? 131071 : 524287);
      if (isSetEpsilonScriptExecutionException())
        hashCode = hashCode * 8191 + EpsilonScriptExecutionException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ExecuteEpsilonSriptsOnDDIFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEpsilonScriptExecutionException()).compareTo(other.isSetEpsilonScriptExecutionException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEpsilonScriptExecutionException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EpsilonScriptExecutionException, other.EpsilonScriptExecutionException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ExecuteEpsilonSriptsOnDDIFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("EpsilonScriptExecutionException:");
      if (this.EpsilonScriptExecutionException == null) {
        sb.append("null");
      } else {
        sb.append(this.EpsilonScriptExecutionException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ExecuteEpsilonSriptsOnDDIFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteEpsilonSriptsOnDDIFile_resultStandardScheme getScheme() {
        return new ExecuteEpsilonSriptsOnDDIFile_resultStandardScheme();
      }
    }

    private static class ExecuteEpsilonSriptsOnDDIFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExecuteEpsilonSriptsOnDDIFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ExecuteEpsilonSriptsOnDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDDIDDIPackage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EPSILON_SCRIPT_EXECUTION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException();
                struct.EpsilonScriptExecutionException.read(iprot);
                struct.setEpsilonScriptExecutionExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ExecuteEpsilonSriptsOnDDIFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.EpsilonScriptExecutionException != null) {
          oprot.writeFieldBegin(EPSILON_SCRIPT_EXECUTION_EXCEPTION_FIELD_DESC);
          struct.EpsilonScriptExecutionException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ExecuteEpsilonSriptsOnDDIFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ExecuteEpsilonSriptsOnDDIFile_resultTupleScheme getScheme() {
        return new ExecuteEpsilonSriptsOnDDIFile_resultTupleScheme();
      }
    }

    private static class ExecuteEpsilonSriptsOnDDIFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExecuteEpsilonSriptsOnDDIFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ExecuteEpsilonSriptsOnDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEpsilonScriptExecutionException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEpsilonScriptExecutionException()) {
          struct.EpsilonScriptExecutionException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ExecuteEpsilonSriptsOnDDIFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TDDIDDIPackage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.EpsilonScriptExecutionException = new TDDIAbstractEpsilonScriptExecutionException();
          struct.EpsilonScriptExecutionException.read(iprot);
          struct.setEpsilonScriptExecutionExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
