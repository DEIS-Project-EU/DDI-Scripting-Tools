/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-04")
public class TDDISecurityRequirement implements org.apache.thrift.TBase<TDDISecurityRequirement, TDDISecurityRequirement._Fields>, java.io.Serializable, Cloneable, Comparable<TDDISecurityRequirement> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDISecurityRequirement");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DECOMPOSITION_ARGUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("DecompositionArgument", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REFINED_REQUIREMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("RefinedRequirements", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("RequirementSource", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField MEASURES_FIELD_DESC = new org.apache.thrift.protocol.TField("Measures", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField FAILURES_FIELD_DESC = new org.apache.thrift.protocol.TField("Failures", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ASSURANCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceLevel", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_PROCEDURES_FIELD_DESC = new org.apache.thrift.protocol.TField("MaintenanceProcedures", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SECURITY_CAPABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("SecurityCapabilities", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDISecurityRequirementStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDISecurityRequirementTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.lang.String DecompositionArgument; // required
  public java.util.List<TDDIAbstractDependabilityRequirementRef> RefinedRequirements; // required
  public TDDIAbstractRequirementSource RequirementSource; // required
  public java.util.List<TDDIAbstractMeasureRef> Measures; // required
  public java.util.List<TDDIAbstractFailureRef> Failures; // required
  public TDDIAssuranceLevel AssuranceLevel; // required
  public java.util.List<TDDIMaintenanceProcedureRef> MaintenanceProcedures; // required
  public java.util.List<TDDISecurityCapabilityRef> SecurityCapabilities; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    DECOMPOSITION_ARGUMENT((short)5, "DecompositionArgument"),
    REFINED_REQUIREMENTS((short)6, "RefinedRequirements"),
    REQUIREMENT_SOURCE((short)7, "RequirementSource"),
    MEASURES((short)8, "Measures"),
    FAILURES((short)9, "Failures"),
    ASSURANCE_LEVEL((short)10, "AssuranceLevel"),
    MAINTENANCE_PROCEDURES((short)11, "MaintenanceProcedures"),
    SECURITY_CAPABILITIES((short)12, "SecurityCapabilities");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // DECOMPOSITION_ARGUMENT
          return DECOMPOSITION_ARGUMENT;
        case 6: // REFINED_REQUIREMENTS
          return REFINED_REQUIREMENTS;
        case 7: // REQUIREMENT_SOURCE
          return REQUIREMENT_SOURCE;
        case 8: // MEASURES
          return MEASURES;
        case 9: // FAILURES
          return FAILURES;
        case 10: // ASSURANCE_LEVEL
          return ASSURANCE_LEVEL;
        case 11: // MAINTENANCE_PROCEDURES
          return MAINTENANCE_PROCEDURES;
        case 12: // SECURITY_CAPABILITIES
          return SECURITY_CAPABILITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.DECOMPOSITION_ARGUMENT, new org.apache.thrift.meta_data.FieldMetaData("DecompositionArgument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFINED_REQUIREMENTS, new org.apache.thrift.meta_data.FieldMetaData("RefinedRequirements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractDependabilityRequirementRef.class))));
    tmpMap.put(_Fields.REQUIREMENT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("RequirementSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractRequirementSource.class)));
    tmpMap.put(_Fields.MEASURES, new org.apache.thrift.meta_data.FieldMetaData("Measures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractMeasureRef.class))));
    tmpMap.put(_Fields.FAILURES, new org.apache.thrift.meta_data.FieldMetaData("Failures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureRef.class))));
    tmpMap.put(_Fields.ASSURANCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("AssuranceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssuranceLevel.class)));
    tmpMap.put(_Fields.MAINTENANCE_PROCEDURES, new org.apache.thrift.meta_data.FieldMetaData("MaintenanceProcedures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMaintenanceProcedureRef.class))));
    tmpMap.put(_Fields.SECURITY_CAPABILITIES, new org.apache.thrift.meta_data.FieldMetaData("SecurityCapabilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDISecurityCapabilityRef.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDISecurityRequirement.class, metaDataMap);
  }

  public TDDISecurityRequirement() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.DecompositionArgument = "";

    this.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>();

    this.Failures = new java.util.ArrayList<TDDIAbstractFailureRef>();

    this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>();

    this.SecurityCapabilities = new java.util.ArrayList<TDDISecurityCapabilityRef>();

  }

  public TDDISecurityRequirement(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.lang.String DecompositionArgument,
    java.util.List<TDDIAbstractDependabilityRequirementRef> RefinedRequirements,
    TDDIAbstractRequirementSource RequirementSource,
    java.util.List<TDDIAbstractMeasureRef> Measures,
    java.util.List<TDDIAbstractFailureRef> Failures,
    TDDIAssuranceLevel AssuranceLevel,
    java.util.List<TDDIMaintenanceProcedureRef> MaintenanceProcedures,
    java.util.List<TDDISecurityCapabilityRef> SecurityCapabilities)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.DecompositionArgument = DecompositionArgument;
    this.RefinedRequirements = RefinedRequirements;
    this.RequirementSource = RequirementSource;
    this.Measures = Measures;
    this.Failures = Failures;
    this.AssuranceLevel = AssuranceLevel;
    this.MaintenanceProcedures = MaintenanceProcedures;
    this.SecurityCapabilities = SecurityCapabilities;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDISecurityRequirement(TDDISecurityRequirement other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetDecompositionArgument()) {
      this.DecompositionArgument = other.DecompositionArgument;
    }
    if (other.isSetRefinedRequirements()) {
      java.util.List<TDDIAbstractDependabilityRequirementRef> __this__RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(other.RefinedRequirements.size());
      for (TDDIAbstractDependabilityRequirementRef other_element : other.RefinedRequirements) {
        __this__RefinedRequirements.add(new TDDIAbstractDependabilityRequirementRef(other_element));
      }
      this.RefinedRequirements = __this__RefinedRequirements;
    }
    if (other.isSetRequirementSource()) {
      this.RequirementSource = new TDDIAbstractRequirementSource(other.RequirementSource);
    }
    if (other.isSetMeasures()) {
      java.util.List<TDDIAbstractMeasureRef> __this__Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>(other.Measures.size());
      for (TDDIAbstractMeasureRef other_element : other.Measures) {
        __this__Measures.add(new TDDIAbstractMeasureRef(other_element));
      }
      this.Measures = __this__Measures;
    }
    if (other.isSetFailures()) {
      java.util.List<TDDIAbstractFailureRef> __this__Failures = new java.util.ArrayList<TDDIAbstractFailureRef>(other.Failures.size());
      for (TDDIAbstractFailureRef other_element : other.Failures) {
        __this__Failures.add(new TDDIAbstractFailureRef(other_element));
      }
      this.Failures = __this__Failures;
    }
    if (other.isSetAssuranceLevel()) {
      this.AssuranceLevel = new TDDIAssuranceLevel(other.AssuranceLevel);
    }
    if (other.isSetMaintenanceProcedures()) {
      java.util.List<TDDIMaintenanceProcedureRef> __this__MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>(other.MaintenanceProcedures.size());
      for (TDDIMaintenanceProcedureRef other_element : other.MaintenanceProcedures) {
        __this__MaintenanceProcedures.add(new TDDIMaintenanceProcedureRef(other_element));
      }
      this.MaintenanceProcedures = __this__MaintenanceProcedures;
    }
    if (other.isSetSecurityCapabilities()) {
      java.util.List<TDDISecurityCapabilityRef> __this__SecurityCapabilities = new java.util.ArrayList<TDDISecurityCapabilityRef>(other.SecurityCapabilities.size());
      for (TDDISecurityCapabilityRef other_element : other.SecurityCapabilities) {
        __this__SecurityCapabilities.add(new TDDISecurityCapabilityRef(other_element));
      }
      this.SecurityCapabilities = __this__SecurityCapabilities;
    }
  }

  public TDDISecurityRequirement deepCopy() {
    return new TDDISecurityRequirement(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.DecompositionArgument = "";

    this.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();

    this.RequirementSource = null;
    this.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>();

    this.Failures = new java.util.ArrayList<TDDIAbstractFailureRef>();

    this.AssuranceLevel = null;
    this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>();

    this.SecurityCapabilities = new java.util.ArrayList<TDDISecurityCapabilityRef>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDISecurityRequirement setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDISecurityRequirement setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDISecurityRequirement setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDISecurityRequirement setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public java.lang.String getDecompositionArgument() {
    return this.DecompositionArgument;
  }

  public TDDISecurityRequirement setDecompositionArgument(java.lang.String DecompositionArgument) {
    this.DecompositionArgument = DecompositionArgument;
    return this;
  }

  public void unsetDecompositionArgument() {
    this.DecompositionArgument = null;
  }

  /** Returns true if field DecompositionArgument is set (has been assigned a value) and false otherwise */
  public boolean isSetDecompositionArgument() {
    return this.DecompositionArgument != null;
  }

  public void setDecompositionArgumentIsSet(boolean value) {
    if (!value) {
      this.DecompositionArgument = null;
    }
  }

  public int getRefinedRequirementsSize() {
    return (this.RefinedRequirements == null) ? 0 : this.RefinedRequirements.size();
  }

  public java.util.Iterator<TDDIAbstractDependabilityRequirementRef> getRefinedRequirementsIterator() {
    return (this.RefinedRequirements == null) ? null : this.RefinedRequirements.iterator();
  }

  public void addToRefinedRequirements(TDDIAbstractDependabilityRequirementRef elem) {
    if (this.RefinedRequirements == null) {
      this.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>();
    }
    this.RefinedRequirements.add(elem);
  }

  public java.util.List<TDDIAbstractDependabilityRequirementRef> getRefinedRequirements() {
    return this.RefinedRequirements;
  }

  public TDDISecurityRequirement setRefinedRequirements(java.util.List<TDDIAbstractDependabilityRequirementRef> RefinedRequirements) {
    this.RefinedRequirements = RefinedRequirements;
    return this;
  }

  public void unsetRefinedRequirements() {
    this.RefinedRequirements = null;
  }

  /** Returns true if field RefinedRequirements is set (has been assigned a value) and false otherwise */
  public boolean isSetRefinedRequirements() {
    return this.RefinedRequirements != null;
  }

  public void setRefinedRequirementsIsSet(boolean value) {
    if (!value) {
      this.RefinedRequirements = null;
    }
  }

  public TDDIAbstractRequirementSource getRequirementSource() {
    return this.RequirementSource;
  }

  public TDDISecurityRequirement setRequirementSource(TDDIAbstractRequirementSource RequirementSource) {
    this.RequirementSource = RequirementSource;
    return this;
  }

  public void unsetRequirementSource() {
    this.RequirementSource = null;
  }

  /** Returns true if field RequirementSource is set (has been assigned a value) and false otherwise */
  public boolean isSetRequirementSource() {
    return this.RequirementSource != null;
  }

  public void setRequirementSourceIsSet(boolean value) {
    if (!value) {
      this.RequirementSource = null;
    }
  }

  public int getMeasuresSize() {
    return (this.Measures == null) ? 0 : this.Measures.size();
  }

  public java.util.Iterator<TDDIAbstractMeasureRef> getMeasuresIterator() {
    return (this.Measures == null) ? null : this.Measures.iterator();
  }

  public void addToMeasures(TDDIAbstractMeasureRef elem) {
    if (this.Measures == null) {
      this.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>();
    }
    this.Measures.add(elem);
  }

  public java.util.List<TDDIAbstractMeasureRef> getMeasures() {
    return this.Measures;
  }

  public TDDISecurityRequirement setMeasures(java.util.List<TDDIAbstractMeasureRef> Measures) {
    this.Measures = Measures;
    return this;
  }

  public void unsetMeasures() {
    this.Measures = null;
  }

  /** Returns true if field Measures is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasures() {
    return this.Measures != null;
  }

  public void setMeasuresIsSet(boolean value) {
    if (!value) {
      this.Measures = null;
    }
  }

  public int getFailuresSize() {
    return (this.Failures == null) ? 0 : this.Failures.size();
  }

  public java.util.Iterator<TDDIAbstractFailureRef> getFailuresIterator() {
    return (this.Failures == null) ? null : this.Failures.iterator();
  }

  public void addToFailures(TDDIAbstractFailureRef elem) {
    if (this.Failures == null) {
      this.Failures = new java.util.ArrayList<TDDIAbstractFailureRef>();
    }
    this.Failures.add(elem);
  }

  public java.util.List<TDDIAbstractFailureRef> getFailures() {
    return this.Failures;
  }

  public TDDISecurityRequirement setFailures(java.util.List<TDDIAbstractFailureRef> Failures) {
    this.Failures = Failures;
    return this;
  }

  public void unsetFailures() {
    this.Failures = null;
  }

  /** Returns true if field Failures is set (has been assigned a value) and false otherwise */
  public boolean isSetFailures() {
    return this.Failures != null;
  }

  public void setFailuresIsSet(boolean value) {
    if (!value) {
      this.Failures = null;
    }
  }

  public TDDIAssuranceLevel getAssuranceLevel() {
    return this.AssuranceLevel;
  }

  public TDDISecurityRequirement setAssuranceLevel(TDDIAssuranceLevel AssuranceLevel) {
    this.AssuranceLevel = AssuranceLevel;
    return this;
  }

  public void unsetAssuranceLevel() {
    this.AssuranceLevel = null;
  }

  /** Returns true if field AssuranceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceLevel() {
    return this.AssuranceLevel != null;
  }

  public void setAssuranceLevelIsSet(boolean value) {
    if (!value) {
      this.AssuranceLevel = null;
    }
  }

  public int getMaintenanceProceduresSize() {
    return (this.MaintenanceProcedures == null) ? 0 : this.MaintenanceProcedures.size();
  }

  public java.util.Iterator<TDDIMaintenanceProcedureRef> getMaintenanceProceduresIterator() {
    return (this.MaintenanceProcedures == null) ? null : this.MaintenanceProcedures.iterator();
  }

  public void addToMaintenanceProcedures(TDDIMaintenanceProcedureRef elem) {
    if (this.MaintenanceProcedures == null) {
      this.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>();
    }
    this.MaintenanceProcedures.add(elem);
  }

  public java.util.List<TDDIMaintenanceProcedureRef> getMaintenanceProcedures() {
    return this.MaintenanceProcedures;
  }

  public TDDISecurityRequirement setMaintenanceProcedures(java.util.List<TDDIMaintenanceProcedureRef> MaintenanceProcedures) {
    this.MaintenanceProcedures = MaintenanceProcedures;
    return this;
  }

  public void unsetMaintenanceProcedures() {
    this.MaintenanceProcedures = null;
  }

  /** Returns true if field MaintenanceProcedures is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceProcedures() {
    return this.MaintenanceProcedures != null;
  }

  public void setMaintenanceProceduresIsSet(boolean value) {
    if (!value) {
      this.MaintenanceProcedures = null;
    }
  }

  public int getSecurityCapabilitiesSize() {
    return (this.SecurityCapabilities == null) ? 0 : this.SecurityCapabilities.size();
  }

  public java.util.Iterator<TDDISecurityCapabilityRef> getSecurityCapabilitiesIterator() {
    return (this.SecurityCapabilities == null) ? null : this.SecurityCapabilities.iterator();
  }

  public void addToSecurityCapabilities(TDDISecurityCapabilityRef elem) {
    if (this.SecurityCapabilities == null) {
      this.SecurityCapabilities = new java.util.ArrayList<TDDISecurityCapabilityRef>();
    }
    this.SecurityCapabilities.add(elem);
  }

  public java.util.List<TDDISecurityCapabilityRef> getSecurityCapabilities() {
    return this.SecurityCapabilities;
  }

  public TDDISecurityRequirement setSecurityCapabilities(java.util.List<TDDISecurityCapabilityRef> SecurityCapabilities) {
    this.SecurityCapabilities = SecurityCapabilities;
    return this;
  }

  public void unsetSecurityCapabilities() {
    this.SecurityCapabilities = null;
  }

  /** Returns true if field SecurityCapabilities is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityCapabilities() {
    return this.SecurityCapabilities != null;
  }

  public void setSecurityCapabilitiesIsSet(boolean value) {
    if (!value) {
      this.SecurityCapabilities = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case DECOMPOSITION_ARGUMENT:
      if (value == null) {
        unsetDecompositionArgument();
      } else {
        setDecompositionArgument((java.lang.String)value);
      }
      break;

    case REFINED_REQUIREMENTS:
      if (value == null) {
        unsetRefinedRequirements();
      } else {
        setRefinedRequirements((java.util.List<TDDIAbstractDependabilityRequirementRef>)value);
      }
      break;

    case REQUIREMENT_SOURCE:
      if (value == null) {
        unsetRequirementSource();
      } else {
        setRequirementSource((TDDIAbstractRequirementSource)value);
      }
      break;

    case MEASURES:
      if (value == null) {
        unsetMeasures();
      } else {
        setMeasures((java.util.List<TDDIAbstractMeasureRef>)value);
      }
      break;

    case FAILURES:
      if (value == null) {
        unsetFailures();
      } else {
        setFailures((java.util.List<TDDIAbstractFailureRef>)value);
      }
      break;

    case ASSURANCE_LEVEL:
      if (value == null) {
        unsetAssuranceLevel();
      } else {
        setAssuranceLevel((TDDIAssuranceLevel)value);
      }
      break;

    case MAINTENANCE_PROCEDURES:
      if (value == null) {
        unsetMaintenanceProcedures();
      } else {
        setMaintenanceProcedures((java.util.List<TDDIMaintenanceProcedureRef>)value);
      }
      break;

    case SECURITY_CAPABILITIES:
      if (value == null) {
        unsetSecurityCapabilities();
      } else {
        setSecurityCapabilities((java.util.List<TDDISecurityCapabilityRef>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case DECOMPOSITION_ARGUMENT:
      return getDecompositionArgument();

    case REFINED_REQUIREMENTS:
      return getRefinedRequirements();

    case REQUIREMENT_SOURCE:
      return getRequirementSource();

    case MEASURES:
      return getMeasures();

    case FAILURES:
      return getFailures();

    case ASSURANCE_LEVEL:
      return getAssuranceLevel();

    case MAINTENANCE_PROCEDURES:
      return getMaintenanceProcedures();

    case SECURITY_CAPABILITIES:
      return getSecurityCapabilities();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case DECOMPOSITION_ARGUMENT:
      return isSetDecompositionArgument();
    case REFINED_REQUIREMENTS:
      return isSetRefinedRequirements();
    case REQUIREMENT_SOURCE:
      return isSetRequirementSource();
    case MEASURES:
      return isSetMeasures();
    case FAILURES:
      return isSetFailures();
    case ASSURANCE_LEVEL:
      return isSetAssuranceLevel();
    case MAINTENANCE_PROCEDURES:
      return isSetMaintenanceProcedures();
    case SECURITY_CAPABILITIES:
      return isSetSecurityCapabilities();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDISecurityRequirement)
      return this.equals((TDDISecurityRequirement)that);
    return false;
  }

  public boolean equals(TDDISecurityRequirement that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_DecompositionArgument = true && this.isSetDecompositionArgument();
    boolean that_present_DecompositionArgument = true && that.isSetDecompositionArgument();
    if (this_present_DecompositionArgument || that_present_DecompositionArgument) {
      if (!(this_present_DecompositionArgument && that_present_DecompositionArgument))
        return false;
      if (!this.DecompositionArgument.equals(that.DecompositionArgument))
        return false;
    }

    boolean this_present_RefinedRequirements = true && this.isSetRefinedRequirements();
    boolean that_present_RefinedRequirements = true && that.isSetRefinedRequirements();
    if (this_present_RefinedRequirements || that_present_RefinedRequirements) {
      if (!(this_present_RefinedRequirements && that_present_RefinedRequirements))
        return false;
      if (!this.RefinedRequirements.equals(that.RefinedRequirements))
        return false;
    }

    boolean this_present_RequirementSource = true && this.isSetRequirementSource();
    boolean that_present_RequirementSource = true && that.isSetRequirementSource();
    if (this_present_RequirementSource || that_present_RequirementSource) {
      if (!(this_present_RequirementSource && that_present_RequirementSource))
        return false;
      if (!this.RequirementSource.equals(that.RequirementSource))
        return false;
    }

    boolean this_present_Measures = true && this.isSetMeasures();
    boolean that_present_Measures = true && that.isSetMeasures();
    if (this_present_Measures || that_present_Measures) {
      if (!(this_present_Measures && that_present_Measures))
        return false;
      if (!this.Measures.equals(that.Measures))
        return false;
    }

    boolean this_present_Failures = true && this.isSetFailures();
    boolean that_present_Failures = true && that.isSetFailures();
    if (this_present_Failures || that_present_Failures) {
      if (!(this_present_Failures && that_present_Failures))
        return false;
      if (!this.Failures.equals(that.Failures))
        return false;
    }

    boolean this_present_AssuranceLevel = true && this.isSetAssuranceLevel();
    boolean that_present_AssuranceLevel = true && that.isSetAssuranceLevel();
    if (this_present_AssuranceLevel || that_present_AssuranceLevel) {
      if (!(this_present_AssuranceLevel && that_present_AssuranceLevel))
        return false;
      if (!this.AssuranceLevel.equals(that.AssuranceLevel))
        return false;
    }

    boolean this_present_MaintenanceProcedures = true && this.isSetMaintenanceProcedures();
    boolean that_present_MaintenanceProcedures = true && that.isSetMaintenanceProcedures();
    if (this_present_MaintenanceProcedures || that_present_MaintenanceProcedures) {
      if (!(this_present_MaintenanceProcedures && that_present_MaintenanceProcedures))
        return false;
      if (!this.MaintenanceProcedures.equals(that.MaintenanceProcedures))
        return false;
    }

    boolean this_present_SecurityCapabilities = true && this.isSetSecurityCapabilities();
    boolean that_present_SecurityCapabilities = true && that.isSetSecurityCapabilities();
    if (this_present_SecurityCapabilities || that_present_SecurityCapabilities) {
      if (!(this_present_SecurityCapabilities && that_present_SecurityCapabilities))
        return false;
      if (!this.SecurityCapabilities.equals(that.SecurityCapabilities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetDecompositionArgument()) ? 131071 : 524287);
    if (isSetDecompositionArgument())
      hashCode = hashCode * 8191 + DecompositionArgument.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefinedRequirements()) ? 131071 : 524287);
    if (isSetRefinedRequirements())
      hashCode = hashCode * 8191 + RefinedRequirements.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequirementSource()) ? 131071 : 524287);
    if (isSetRequirementSource())
      hashCode = hashCode * 8191 + RequirementSource.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeasures()) ? 131071 : 524287);
    if (isSetMeasures())
      hashCode = hashCode * 8191 + Measures.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailures()) ? 131071 : 524287);
    if (isSetFailures())
      hashCode = hashCode * 8191 + Failures.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssuranceLevel()) ? 131071 : 524287);
    if (isSetAssuranceLevel())
      hashCode = hashCode * 8191 + AssuranceLevel.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaintenanceProcedures()) ? 131071 : 524287);
    if (isSetMaintenanceProcedures())
      hashCode = hashCode * 8191 + MaintenanceProcedures.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecurityCapabilities()) ? 131071 : 524287);
    if (isSetSecurityCapabilities())
      hashCode = hashCode * 8191 + SecurityCapabilities.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDISecurityRequirement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDecompositionArgument()).compareTo(other.isSetDecompositionArgument());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecompositionArgument()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DecompositionArgument, other.DecompositionArgument);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRefinedRequirements()).compareTo(other.isSetRefinedRequirements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefinedRequirements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RefinedRequirements, other.RefinedRequirements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequirementSource()).compareTo(other.isSetRequirementSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequirementSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RequirementSource, other.RequirementSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMeasures()).compareTo(other.isSetMeasures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Measures, other.Measures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailures()).compareTo(other.isSetFailures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Failures, other.Failures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssuranceLevel()).compareTo(other.isSetAssuranceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AssuranceLevel, other.AssuranceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaintenanceProcedures()).compareTo(other.isSetMaintenanceProcedures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceProcedures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MaintenanceProcedures, other.MaintenanceProcedures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecurityCapabilities()).compareTo(other.isSetSecurityCapabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityCapabilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SecurityCapabilities, other.SecurityCapabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDISecurityRequirement(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DecompositionArgument:");
    if (this.DecompositionArgument == null) {
      sb.append("null");
    } else {
      sb.append(this.DecompositionArgument);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RefinedRequirements:");
    if (this.RefinedRequirements == null) {
      sb.append("null");
    } else {
      sb.append(this.RefinedRequirements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequirementSource:");
    if (this.RequirementSource == null) {
      sb.append("null");
    } else {
      sb.append(this.RequirementSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Measures:");
    if (this.Measures == null) {
      sb.append("null");
    } else {
      sb.append(this.Measures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Failures:");
    if (this.Failures == null) {
      sb.append("null");
    } else {
      sb.append(this.Failures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AssuranceLevel:");
    if (this.AssuranceLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.AssuranceLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MaintenanceProcedures:");
    if (this.MaintenanceProcedures == null) {
      sb.append("null");
    } else {
      sb.append(this.MaintenanceProcedures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SecurityCapabilities:");
    if (this.SecurityCapabilities == null) {
      sb.append("null");
    } else {
      sb.append(this.SecurityCapabilities);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (RequirementSource != null) {
      RequirementSource.validate();
    }
    if (AssuranceLevel != null) {
      AssuranceLevel.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDISecurityRequirementStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDISecurityRequirementStandardScheme getScheme() {
      return new TDDISecurityRequirementStandardScheme();
    }
  }

  private static class TDDISecurityRequirementStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDISecurityRequirement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDISecurityRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1360 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list1360.size);
                TDDIKeyValueMap _elem1361;
                for (int _i1362 = 0; _i1362 < _list1360.size; ++_i1362)
                {
                  _elem1361 = new TDDIKeyValueMap();
                  _elem1361.read(iprot);
                  struct.KeyValueMaps.add(_elem1361);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DECOMPOSITION_ARGUMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.DecompositionArgument = iprot.readString();
              struct.setDecompositionArgumentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REFINED_REQUIREMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1363 = iprot.readListBegin();
                struct.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list1363.size);
                TDDIAbstractDependabilityRequirementRef _elem1364;
                for (int _i1365 = 0; _i1365 < _list1363.size; ++_i1365)
                {
                  _elem1364 = new TDDIAbstractDependabilityRequirementRef();
                  _elem1364.read(iprot);
                  struct.RefinedRequirements.add(_elem1364);
                }
                iprot.readListEnd();
              }
              struct.setRefinedRequirementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUIREMENT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.RequirementSource = new TDDIAbstractRequirementSource();
              struct.RequirementSource.read(iprot);
              struct.setRequirementSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEASURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1366 = iprot.readListBegin();
                struct.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>(_list1366.size);
                TDDIAbstractMeasureRef _elem1367;
                for (int _i1368 = 0; _i1368 < _list1366.size; ++_i1368)
                {
                  _elem1367 = new TDDIAbstractMeasureRef();
                  _elem1367.read(iprot);
                  struct.Measures.add(_elem1367);
                }
                iprot.readListEnd();
              }
              struct.setMeasuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FAILURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1369 = iprot.readListBegin();
                struct.Failures = new java.util.ArrayList<TDDIAbstractFailureRef>(_list1369.size);
                TDDIAbstractFailureRef _elem1370;
                for (int _i1371 = 0; _i1371 < _list1369.size; ++_i1371)
                {
                  _elem1370 = new TDDIAbstractFailureRef();
                  _elem1370.read(iprot);
                  struct.Failures.add(_elem1370);
                }
                iprot.readListEnd();
              }
              struct.setFailuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ASSURANCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.AssuranceLevel = new TDDIAssuranceLevel();
              struct.AssuranceLevel.read(iprot);
              struct.setAssuranceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAINTENANCE_PROCEDURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1372 = iprot.readListBegin();
                struct.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>(_list1372.size);
                TDDIMaintenanceProcedureRef _elem1373;
                for (int _i1374 = 0; _i1374 < _list1372.size; ++_i1374)
                {
                  _elem1373 = new TDDIMaintenanceProcedureRef();
                  _elem1373.read(iprot);
                  struct.MaintenanceProcedures.add(_elem1373);
                }
                iprot.readListEnd();
              }
              struct.setMaintenanceProceduresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SECURITY_CAPABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1375 = iprot.readListBegin();
                struct.SecurityCapabilities = new java.util.ArrayList<TDDISecurityCapabilityRef>(_list1375.size);
                TDDISecurityCapabilityRef _elem1376;
                for (int _i1377 = 0; _i1377 < _list1375.size; ++_i1377)
                {
                  _elem1376 = new TDDISecurityCapabilityRef();
                  _elem1376.read(iprot);
                  struct.SecurityCapabilities.add(_elem1376);
                }
                iprot.readListEnd();
              }
              struct.setSecurityCapabilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDISecurityRequirement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter1378 : struct.KeyValueMaps)
          {
            _iter1378.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.DecompositionArgument != null) {
        oprot.writeFieldBegin(DECOMPOSITION_ARGUMENT_FIELD_DESC);
        oprot.writeString(struct.DecompositionArgument);
        oprot.writeFieldEnd();
      }
      if (struct.RefinedRequirements != null) {
        oprot.writeFieldBegin(REFINED_REQUIREMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.RefinedRequirements.size()));
          for (TDDIAbstractDependabilityRequirementRef _iter1379 : struct.RefinedRequirements)
          {
            _iter1379.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.RequirementSource != null) {
        oprot.writeFieldBegin(REQUIREMENT_SOURCE_FIELD_DESC);
        struct.RequirementSource.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Measures != null) {
        oprot.writeFieldBegin(MEASURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Measures.size()));
          for (TDDIAbstractMeasureRef _iter1380 : struct.Measures)
          {
            _iter1380.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Failures != null) {
        oprot.writeFieldBegin(FAILURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Failures.size()));
          for (TDDIAbstractFailureRef _iter1381 : struct.Failures)
          {
            _iter1381.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AssuranceLevel != null) {
        oprot.writeFieldBegin(ASSURANCE_LEVEL_FIELD_DESC);
        struct.AssuranceLevel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.MaintenanceProcedures != null) {
        oprot.writeFieldBegin(MAINTENANCE_PROCEDURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.MaintenanceProcedures.size()));
          for (TDDIMaintenanceProcedureRef _iter1382 : struct.MaintenanceProcedures)
          {
            _iter1382.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SecurityCapabilities != null) {
        oprot.writeFieldBegin(SECURITY_CAPABILITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SecurityCapabilities.size()));
          for (TDDISecurityCapabilityRef _iter1383 : struct.SecurityCapabilities)
          {
            _iter1383.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDISecurityRequirementTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDISecurityRequirementTupleScheme getScheme() {
      return new TDDISecurityRequirementTupleScheme();
    }
  }

  private static class TDDISecurityRequirementTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDISecurityRequirement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDISecurityRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetDecompositionArgument()) {
        optionals.set(4);
      }
      if (struct.isSetRefinedRequirements()) {
        optionals.set(5);
      }
      if (struct.isSetRequirementSource()) {
        optionals.set(6);
      }
      if (struct.isSetMeasures()) {
        optionals.set(7);
      }
      if (struct.isSetFailures()) {
        optionals.set(8);
      }
      if (struct.isSetAssuranceLevel()) {
        optionals.set(9);
      }
      if (struct.isSetMaintenanceProcedures()) {
        optionals.set(10);
      }
      if (struct.isSetSecurityCapabilities()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter1384 : struct.KeyValueMaps)
          {
            _iter1384.write(oprot);
          }
        }
      }
      if (struct.isSetDecompositionArgument()) {
        oprot.writeString(struct.DecompositionArgument);
      }
      if (struct.isSetRefinedRequirements()) {
        {
          oprot.writeI32(struct.RefinedRequirements.size());
          for (TDDIAbstractDependabilityRequirementRef _iter1385 : struct.RefinedRequirements)
          {
            _iter1385.write(oprot);
          }
        }
      }
      if (struct.isSetRequirementSource()) {
        struct.RequirementSource.write(oprot);
      }
      if (struct.isSetMeasures()) {
        {
          oprot.writeI32(struct.Measures.size());
          for (TDDIAbstractMeasureRef _iter1386 : struct.Measures)
          {
            _iter1386.write(oprot);
          }
        }
      }
      if (struct.isSetFailures()) {
        {
          oprot.writeI32(struct.Failures.size());
          for (TDDIAbstractFailureRef _iter1387 : struct.Failures)
          {
            _iter1387.write(oprot);
          }
        }
      }
      if (struct.isSetAssuranceLevel()) {
        struct.AssuranceLevel.write(oprot);
      }
      if (struct.isSetMaintenanceProcedures()) {
        {
          oprot.writeI32(struct.MaintenanceProcedures.size());
          for (TDDIMaintenanceProcedureRef _iter1388 : struct.MaintenanceProcedures)
          {
            _iter1388.write(oprot);
          }
        }
      }
      if (struct.isSetSecurityCapabilities()) {
        {
          oprot.writeI32(struct.SecurityCapabilities.size());
          for (TDDISecurityCapabilityRef _iter1389 : struct.SecurityCapabilities)
          {
            _iter1389.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDISecurityRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list1390 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list1390.size);
          TDDIKeyValueMap _elem1391;
          for (int _i1392 = 0; _i1392 < _list1390.size; ++_i1392)
          {
            _elem1391 = new TDDIKeyValueMap();
            _elem1391.read(iprot);
            struct.KeyValueMaps.add(_elem1391);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.DecompositionArgument = iprot.readString();
        struct.setDecompositionArgumentIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list1393 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.RefinedRequirements = new java.util.ArrayList<TDDIAbstractDependabilityRequirementRef>(_list1393.size);
          TDDIAbstractDependabilityRequirementRef _elem1394;
          for (int _i1395 = 0; _i1395 < _list1393.size; ++_i1395)
          {
            _elem1394 = new TDDIAbstractDependabilityRequirementRef();
            _elem1394.read(iprot);
            struct.RefinedRequirements.add(_elem1394);
          }
        }
        struct.setRefinedRequirementsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.RequirementSource = new TDDIAbstractRequirementSource();
        struct.RequirementSource.read(iprot);
        struct.setRequirementSourceIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list1396 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Measures = new java.util.ArrayList<TDDIAbstractMeasureRef>(_list1396.size);
          TDDIAbstractMeasureRef _elem1397;
          for (int _i1398 = 0; _i1398 < _list1396.size; ++_i1398)
          {
            _elem1397 = new TDDIAbstractMeasureRef();
            _elem1397.read(iprot);
            struct.Measures.add(_elem1397);
          }
        }
        struct.setMeasuresIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list1399 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Failures = new java.util.ArrayList<TDDIAbstractFailureRef>(_list1399.size);
          TDDIAbstractFailureRef _elem1400;
          for (int _i1401 = 0; _i1401 < _list1399.size; ++_i1401)
          {
            _elem1400 = new TDDIAbstractFailureRef();
            _elem1400.read(iprot);
            struct.Failures.add(_elem1400);
          }
        }
        struct.setFailuresIsSet(true);
      }
      if (incoming.get(9)) {
        struct.AssuranceLevel = new TDDIAssuranceLevel();
        struct.AssuranceLevel.read(iprot);
        struct.setAssuranceLevelIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list1402 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.MaintenanceProcedures = new java.util.ArrayList<TDDIMaintenanceProcedureRef>(_list1402.size);
          TDDIMaintenanceProcedureRef _elem1403;
          for (int _i1404 = 0; _i1404 < _list1402.size; ++_i1404)
          {
            _elem1403 = new TDDIMaintenanceProcedureRef();
            _elem1403.read(iprot);
            struct.MaintenanceProcedures.add(_elem1403);
          }
        }
        struct.setMaintenanceProceduresIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list1405 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SecurityCapabilities = new java.util.ArrayList<TDDISecurityCapabilityRef>(_list1405.size);
          TDDISecurityCapabilityRef _elem1406;
          for (int _i1407 = 0; _i1407 < _list1405.size; ++_i1407)
          {
            _elem1406 = new TDDISecurityCapabilityRef();
            _elem1406.read(iprot);
            struct.SecurityCapabilities.add(_elem1406);
          }
        }
        struct.setSecurityCapabilitiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

