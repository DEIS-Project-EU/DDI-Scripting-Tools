/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-04")
public class TDDIEpsilonScriptExecutionConfig implements org.apache.thrift.TBase<TDDIEpsilonScriptExecutionConfig, TDDIEpsilonScriptExecutionConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIEpsilonScriptExecutionConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIEpsilonScriptExecutionConfig");

  private static final org.apache.thrift.protocol.TField SCRIPT_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("ScriptFilePath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCRIPT_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ScriptContent", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXECUTE_WITH_SCRIPT_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("ExecuteWithScriptFile", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField EPSILON_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("EpsilonLanguage", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MODEL_CONFIGS_FIELD_DESC = new org.apache.thrift.protocol.TField("ModelConfigs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField EXPORT_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("ExportParameters", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField IMPORT_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("ImportParameters", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField VARIABLE_NAME_OF_RETURN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("VariableNameOfReturnValue", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIEpsilonScriptExecutionConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIEpsilonScriptExecutionConfigTupleSchemeFactory();

  public java.lang.String ScriptFilePath; // required
  public java.lang.String ScriptContent; // required
  public boolean ExecuteWithScriptFile; // required
  /**
   * 
   * @see TDDIEpsilonLanguage
   */
  public TDDIEpsilonLanguage EpsilonLanguage; // required
  public java.util.List<TDDIEpsilonScriptModelConfig> ModelConfigs; // required
  public java.util.List<TDDIEpsilonParameter> ExportParameters; // required
  public java.util.List<TDDIEpsilonParameter> ImportParameters; // required
  public java.lang.String VariableNameOfReturnValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCRIPT_FILE_PATH((short)1, "ScriptFilePath"),
    SCRIPT_CONTENT((short)2, "ScriptContent"),
    EXECUTE_WITH_SCRIPT_FILE((short)3, "ExecuteWithScriptFile"),
    /**
     * 
     * @see TDDIEpsilonLanguage
     */
    EPSILON_LANGUAGE((short)4, "EpsilonLanguage"),
    MODEL_CONFIGS((short)5, "ModelConfigs"),
    EXPORT_PARAMETERS((short)6, "ExportParameters"),
    IMPORT_PARAMETERS((short)7, "ImportParameters"),
    VARIABLE_NAME_OF_RETURN_VALUE((short)8, "VariableNameOfReturnValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCRIPT_FILE_PATH
          return SCRIPT_FILE_PATH;
        case 2: // SCRIPT_CONTENT
          return SCRIPT_CONTENT;
        case 3: // EXECUTE_WITH_SCRIPT_FILE
          return EXECUTE_WITH_SCRIPT_FILE;
        case 4: // EPSILON_LANGUAGE
          return EPSILON_LANGUAGE;
        case 5: // MODEL_CONFIGS
          return MODEL_CONFIGS;
        case 6: // EXPORT_PARAMETERS
          return EXPORT_PARAMETERS;
        case 7: // IMPORT_PARAMETERS
          return IMPORT_PARAMETERS;
        case 8: // VARIABLE_NAME_OF_RETURN_VALUE
          return VARIABLE_NAME_OF_RETURN_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTEWITHSCRIPTFILE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCRIPT_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("ScriptFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("ScriptContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTE_WITH_SCRIPT_FILE, new org.apache.thrift.meta_data.FieldMetaData("ExecuteWithScriptFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EPSILON_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("EpsilonLanguage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIEpsilonLanguage.class)));
    tmpMap.put(_Fields.MODEL_CONFIGS, new org.apache.thrift.meta_data.FieldMetaData("ModelConfigs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIEpsilonScriptModelConfig.class))));
    tmpMap.put(_Fields.EXPORT_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("ExportParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIEpsilonParameter.class))));
    tmpMap.put(_Fields.IMPORT_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("ImportParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIEpsilonParameter.class))));
    tmpMap.put(_Fields.VARIABLE_NAME_OF_RETURN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("VariableNameOfReturnValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIEpsilonScriptExecutionConfig.class, metaDataMap);
  }

  public TDDIEpsilonScriptExecutionConfig() {
    this.ScriptFilePath = "";

    this.ScriptContent = "";

    this.ModelConfigs = new java.util.ArrayList<TDDIEpsilonScriptModelConfig>();

    this.ExportParameters = new java.util.ArrayList<TDDIEpsilonParameter>();

    this.ImportParameters = new java.util.ArrayList<TDDIEpsilonParameter>();

    this.VariableNameOfReturnValue = "";

  }

  public TDDIEpsilonScriptExecutionConfig(
    java.lang.String ScriptFilePath,
    java.lang.String ScriptContent,
    boolean ExecuteWithScriptFile,
    TDDIEpsilonLanguage EpsilonLanguage,
    java.util.List<TDDIEpsilonScriptModelConfig> ModelConfigs,
    java.util.List<TDDIEpsilonParameter> ExportParameters,
    java.util.List<TDDIEpsilonParameter> ImportParameters,
    java.lang.String VariableNameOfReturnValue)
  {
    this();
    this.ScriptFilePath = ScriptFilePath;
    this.ScriptContent = ScriptContent;
    this.ExecuteWithScriptFile = ExecuteWithScriptFile;
    setExecuteWithScriptFileIsSet(true);
    this.EpsilonLanguage = EpsilonLanguage;
    this.ModelConfigs = ModelConfigs;
    this.ExportParameters = ExportParameters;
    this.ImportParameters = ImportParameters;
    this.VariableNameOfReturnValue = VariableNameOfReturnValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIEpsilonScriptExecutionConfig(TDDIEpsilonScriptExecutionConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetScriptFilePath()) {
      this.ScriptFilePath = other.ScriptFilePath;
    }
    if (other.isSetScriptContent()) {
      this.ScriptContent = other.ScriptContent;
    }
    this.ExecuteWithScriptFile = other.ExecuteWithScriptFile;
    if (other.isSetEpsilonLanguage()) {
      this.EpsilonLanguage = other.EpsilonLanguage;
    }
    if (other.isSetModelConfigs()) {
      java.util.List<TDDIEpsilonScriptModelConfig> __this__ModelConfigs = new java.util.ArrayList<TDDIEpsilonScriptModelConfig>(other.ModelConfigs.size());
      for (TDDIEpsilonScriptModelConfig other_element : other.ModelConfigs) {
        __this__ModelConfigs.add(new TDDIEpsilonScriptModelConfig(other_element));
      }
      this.ModelConfigs = __this__ModelConfigs;
    }
    if (other.isSetExportParameters()) {
      java.util.List<TDDIEpsilonParameter> __this__ExportParameters = new java.util.ArrayList<TDDIEpsilonParameter>(other.ExportParameters.size());
      for (TDDIEpsilonParameter other_element : other.ExportParameters) {
        __this__ExportParameters.add(new TDDIEpsilonParameter(other_element));
      }
      this.ExportParameters = __this__ExportParameters;
    }
    if (other.isSetImportParameters()) {
      java.util.List<TDDIEpsilonParameter> __this__ImportParameters = new java.util.ArrayList<TDDIEpsilonParameter>(other.ImportParameters.size());
      for (TDDIEpsilonParameter other_element : other.ImportParameters) {
        __this__ImportParameters.add(new TDDIEpsilonParameter(other_element));
      }
      this.ImportParameters = __this__ImportParameters;
    }
    if (other.isSetVariableNameOfReturnValue()) {
      this.VariableNameOfReturnValue = other.VariableNameOfReturnValue;
    }
  }

  public TDDIEpsilonScriptExecutionConfig deepCopy() {
    return new TDDIEpsilonScriptExecutionConfig(this);
  }

  @Override
  public void clear() {
    this.ScriptFilePath = "";

    this.ScriptContent = "";

    setExecuteWithScriptFileIsSet(false);
    this.ExecuteWithScriptFile = false;
    this.EpsilonLanguage = null;
    this.ModelConfigs = new java.util.ArrayList<TDDIEpsilonScriptModelConfig>();

    this.ExportParameters = new java.util.ArrayList<TDDIEpsilonParameter>();

    this.ImportParameters = new java.util.ArrayList<TDDIEpsilonParameter>();

    this.VariableNameOfReturnValue = "";

  }

  public java.lang.String getScriptFilePath() {
    return this.ScriptFilePath;
  }

  public TDDIEpsilonScriptExecutionConfig setScriptFilePath(java.lang.String ScriptFilePath) {
    this.ScriptFilePath = ScriptFilePath;
    return this;
  }

  public void unsetScriptFilePath() {
    this.ScriptFilePath = null;
  }

  /** Returns true if field ScriptFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptFilePath() {
    return this.ScriptFilePath != null;
  }

  public void setScriptFilePathIsSet(boolean value) {
    if (!value) {
      this.ScriptFilePath = null;
    }
  }

  public java.lang.String getScriptContent() {
    return this.ScriptContent;
  }

  public TDDIEpsilonScriptExecutionConfig setScriptContent(java.lang.String ScriptContent) {
    this.ScriptContent = ScriptContent;
    return this;
  }

  public void unsetScriptContent() {
    this.ScriptContent = null;
  }

  /** Returns true if field ScriptContent is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptContent() {
    return this.ScriptContent != null;
  }

  public void setScriptContentIsSet(boolean value) {
    if (!value) {
      this.ScriptContent = null;
    }
  }

  public boolean isExecuteWithScriptFile() {
    return this.ExecuteWithScriptFile;
  }

  public TDDIEpsilonScriptExecutionConfig setExecuteWithScriptFile(boolean ExecuteWithScriptFile) {
    this.ExecuteWithScriptFile = ExecuteWithScriptFile;
    setExecuteWithScriptFileIsSet(true);
    return this;
  }

  public void unsetExecuteWithScriptFile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTEWITHSCRIPTFILE_ISSET_ID);
  }

  /** Returns true if field ExecuteWithScriptFile is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteWithScriptFile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTEWITHSCRIPTFILE_ISSET_ID);
  }

  public void setExecuteWithScriptFileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTEWITHSCRIPTFILE_ISSET_ID, value);
  }

  /**
   * 
   * @see TDDIEpsilonLanguage
   */
  public TDDIEpsilonLanguage getEpsilonLanguage() {
    return this.EpsilonLanguage;
  }

  /**
   * 
   * @see TDDIEpsilonLanguage
   */
  public TDDIEpsilonScriptExecutionConfig setEpsilonLanguage(TDDIEpsilonLanguage EpsilonLanguage) {
    this.EpsilonLanguage = EpsilonLanguage;
    return this;
  }

  public void unsetEpsilonLanguage() {
    this.EpsilonLanguage = null;
  }

  /** Returns true if field EpsilonLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetEpsilonLanguage() {
    return this.EpsilonLanguage != null;
  }

  public void setEpsilonLanguageIsSet(boolean value) {
    if (!value) {
      this.EpsilonLanguage = null;
    }
  }

  public int getModelConfigsSize() {
    return (this.ModelConfigs == null) ? 0 : this.ModelConfigs.size();
  }

  public java.util.Iterator<TDDIEpsilonScriptModelConfig> getModelConfigsIterator() {
    return (this.ModelConfigs == null) ? null : this.ModelConfigs.iterator();
  }

  public void addToModelConfigs(TDDIEpsilonScriptModelConfig elem) {
    if (this.ModelConfigs == null) {
      this.ModelConfigs = new java.util.ArrayList<TDDIEpsilonScriptModelConfig>();
    }
    this.ModelConfigs.add(elem);
  }

  public java.util.List<TDDIEpsilonScriptModelConfig> getModelConfigs() {
    return this.ModelConfigs;
  }

  public TDDIEpsilonScriptExecutionConfig setModelConfigs(java.util.List<TDDIEpsilonScriptModelConfig> ModelConfigs) {
    this.ModelConfigs = ModelConfigs;
    return this;
  }

  public void unsetModelConfigs() {
    this.ModelConfigs = null;
  }

  /** Returns true if field ModelConfigs is set (has been assigned a value) and false otherwise */
  public boolean isSetModelConfigs() {
    return this.ModelConfigs != null;
  }

  public void setModelConfigsIsSet(boolean value) {
    if (!value) {
      this.ModelConfigs = null;
    }
  }

  public int getExportParametersSize() {
    return (this.ExportParameters == null) ? 0 : this.ExportParameters.size();
  }

  public java.util.Iterator<TDDIEpsilonParameter> getExportParametersIterator() {
    return (this.ExportParameters == null) ? null : this.ExportParameters.iterator();
  }

  public void addToExportParameters(TDDIEpsilonParameter elem) {
    if (this.ExportParameters == null) {
      this.ExportParameters = new java.util.ArrayList<TDDIEpsilonParameter>();
    }
    this.ExportParameters.add(elem);
  }

  public java.util.List<TDDIEpsilonParameter> getExportParameters() {
    return this.ExportParameters;
  }

  public TDDIEpsilonScriptExecutionConfig setExportParameters(java.util.List<TDDIEpsilonParameter> ExportParameters) {
    this.ExportParameters = ExportParameters;
    return this;
  }

  public void unsetExportParameters() {
    this.ExportParameters = null;
  }

  /** Returns true if field ExportParameters is set (has been assigned a value) and false otherwise */
  public boolean isSetExportParameters() {
    return this.ExportParameters != null;
  }

  public void setExportParametersIsSet(boolean value) {
    if (!value) {
      this.ExportParameters = null;
    }
  }

  public int getImportParametersSize() {
    return (this.ImportParameters == null) ? 0 : this.ImportParameters.size();
  }

  public java.util.Iterator<TDDIEpsilonParameter> getImportParametersIterator() {
    return (this.ImportParameters == null) ? null : this.ImportParameters.iterator();
  }

  public void addToImportParameters(TDDIEpsilonParameter elem) {
    if (this.ImportParameters == null) {
      this.ImportParameters = new java.util.ArrayList<TDDIEpsilonParameter>();
    }
    this.ImportParameters.add(elem);
  }

  public java.util.List<TDDIEpsilonParameter> getImportParameters() {
    return this.ImportParameters;
  }

  public TDDIEpsilonScriptExecutionConfig setImportParameters(java.util.List<TDDIEpsilonParameter> ImportParameters) {
    this.ImportParameters = ImportParameters;
    return this;
  }

  public void unsetImportParameters() {
    this.ImportParameters = null;
  }

  /** Returns true if field ImportParameters is set (has been assigned a value) and false otherwise */
  public boolean isSetImportParameters() {
    return this.ImportParameters != null;
  }

  public void setImportParametersIsSet(boolean value) {
    if (!value) {
      this.ImportParameters = null;
    }
  }

  public java.lang.String getVariableNameOfReturnValue() {
    return this.VariableNameOfReturnValue;
  }

  public TDDIEpsilonScriptExecutionConfig setVariableNameOfReturnValue(java.lang.String VariableNameOfReturnValue) {
    this.VariableNameOfReturnValue = VariableNameOfReturnValue;
    return this;
  }

  public void unsetVariableNameOfReturnValue() {
    this.VariableNameOfReturnValue = null;
  }

  /** Returns true if field VariableNameOfReturnValue is set (has been assigned a value) and false otherwise */
  public boolean isSetVariableNameOfReturnValue() {
    return this.VariableNameOfReturnValue != null;
  }

  public void setVariableNameOfReturnValueIsSet(boolean value) {
    if (!value) {
      this.VariableNameOfReturnValue = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SCRIPT_FILE_PATH:
      if (value == null) {
        unsetScriptFilePath();
      } else {
        setScriptFilePath((java.lang.String)value);
      }
      break;

    case SCRIPT_CONTENT:
      if (value == null) {
        unsetScriptContent();
      } else {
        setScriptContent((java.lang.String)value);
      }
      break;

    case EXECUTE_WITH_SCRIPT_FILE:
      if (value == null) {
        unsetExecuteWithScriptFile();
      } else {
        setExecuteWithScriptFile((java.lang.Boolean)value);
      }
      break;

    case EPSILON_LANGUAGE:
      if (value == null) {
        unsetEpsilonLanguage();
      } else {
        setEpsilonLanguage((TDDIEpsilonLanguage)value);
      }
      break;

    case MODEL_CONFIGS:
      if (value == null) {
        unsetModelConfigs();
      } else {
        setModelConfigs((java.util.List<TDDIEpsilonScriptModelConfig>)value);
      }
      break;

    case EXPORT_PARAMETERS:
      if (value == null) {
        unsetExportParameters();
      } else {
        setExportParameters((java.util.List<TDDIEpsilonParameter>)value);
      }
      break;

    case IMPORT_PARAMETERS:
      if (value == null) {
        unsetImportParameters();
      } else {
        setImportParameters((java.util.List<TDDIEpsilonParameter>)value);
      }
      break;

    case VARIABLE_NAME_OF_RETURN_VALUE:
      if (value == null) {
        unsetVariableNameOfReturnValue();
      } else {
        setVariableNameOfReturnValue((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCRIPT_FILE_PATH:
      return getScriptFilePath();

    case SCRIPT_CONTENT:
      return getScriptContent();

    case EXECUTE_WITH_SCRIPT_FILE:
      return isExecuteWithScriptFile();

    case EPSILON_LANGUAGE:
      return getEpsilonLanguage();

    case MODEL_CONFIGS:
      return getModelConfigs();

    case EXPORT_PARAMETERS:
      return getExportParameters();

    case IMPORT_PARAMETERS:
      return getImportParameters();

    case VARIABLE_NAME_OF_RETURN_VALUE:
      return getVariableNameOfReturnValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCRIPT_FILE_PATH:
      return isSetScriptFilePath();
    case SCRIPT_CONTENT:
      return isSetScriptContent();
    case EXECUTE_WITH_SCRIPT_FILE:
      return isSetExecuteWithScriptFile();
    case EPSILON_LANGUAGE:
      return isSetEpsilonLanguage();
    case MODEL_CONFIGS:
      return isSetModelConfigs();
    case EXPORT_PARAMETERS:
      return isSetExportParameters();
    case IMPORT_PARAMETERS:
      return isSetImportParameters();
    case VARIABLE_NAME_OF_RETURN_VALUE:
      return isSetVariableNameOfReturnValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIEpsilonScriptExecutionConfig)
      return this.equals((TDDIEpsilonScriptExecutionConfig)that);
    return false;
  }

  public boolean equals(TDDIEpsilonScriptExecutionConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ScriptFilePath = true && this.isSetScriptFilePath();
    boolean that_present_ScriptFilePath = true && that.isSetScriptFilePath();
    if (this_present_ScriptFilePath || that_present_ScriptFilePath) {
      if (!(this_present_ScriptFilePath && that_present_ScriptFilePath))
        return false;
      if (!this.ScriptFilePath.equals(that.ScriptFilePath))
        return false;
    }

    boolean this_present_ScriptContent = true && this.isSetScriptContent();
    boolean that_present_ScriptContent = true && that.isSetScriptContent();
    if (this_present_ScriptContent || that_present_ScriptContent) {
      if (!(this_present_ScriptContent && that_present_ScriptContent))
        return false;
      if (!this.ScriptContent.equals(that.ScriptContent))
        return false;
    }

    boolean this_present_ExecuteWithScriptFile = true;
    boolean that_present_ExecuteWithScriptFile = true;
    if (this_present_ExecuteWithScriptFile || that_present_ExecuteWithScriptFile) {
      if (!(this_present_ExecuteWithScriptFile && that_present_ExecuteWithScriptFile))
        return false;
      if (this.ExecuteWithScriptFile != that.ExecuteWithScriptFile)
        return false;
    }

    boolean this_present_EpsilonLanguage = true && this.isSetEpsilonLanguage();
    boolean that_present_EpsilonLanguage = true && that.isSetEpsilonLanguage();
    if (this_present_EpsilonLanguage || that_present_EpsilonLanguage) {
      if (!(this_present_EpsilonLanguage && that_present_EpsilonLanguage))
        return false;
      if (!this.EpsilonLanguage.equals(that.EpsilonLanguage))
        return false;
    }

    boolean this_present_ModelConfigs = true && this.isSetModelConfigs();
    boolean that_present_ModelConfigs = true && that.isSetModelConfigs();
    if (this_present_ModelConfigs || that_present_ModelConfigs) {
      if (!(this_present_ModelConfigs && that_present_ModelConfigs))
        return false;
      if (!this.ModelConfigs.equals(that.ModelConfigs))
        return false;
    }

    boolean this_present_ExportParameters = true && this.isSetExportParameters();
    boolean that_present_ExportParameters = true && that.isSetExportParameters();
    if (this_present_ExportParameters || that_present_ExportParameters) {
      if (!(this_present_ExportParameters && that_present_ExportParameters))
        return false;
      if (!this.ExportParameters.equals(that.ExportParameters))
        return false;
    }

    boolean this_present_ImportParameters = true && this.isSetImportParameters();
    boolean that_present_ImportParameters = true && that.isSetImportParameters();
    if (this_present_ImportParameters || that_present_ImportParameters) {
      if (!(this_present_ImportParameters && that_present_ImportParameters))
        return false;
      if (!this.ImportParameters.equals(that.ImportParameters))
        return false;
    }

    boolean this_present_VariableNameOfReturnValue = true && this.isSetVariableNameOfReturnValue();
    boolean that_present_VariableNameOfReturnValue = true && that.isSetVariableNameOfReturnValue();
    if (this_present_VariableNameOfReturnValue || that_present_VariableNameOfReturnValue) {
      if (!(this_present_VariableNameOfReturnValue && that_present_VariableNameOfReturnValue))
        return false;
      if (!this.VariableNameOfReturnValue.equals(that.VariableNameOfReturnValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetScriptFilePath()) ? 131071 : 524287);
    if (isSetScriptFilePath())
      hashCode = hashCode * 8191 + ScriptFilePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetScriptContent()) ? 131071 : 524287);
    if (isSetScriptContent())
      hashCode = hashCode * 8191 + ScriptContent.hashCode();

    hashCode = hashCode * 8191 + ((ExecuteWithScriptFile) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEpsilonLanguage()) ? 131071 : 524287);
    if (isSetEpsilonLanguage())
      hashCode = hashCode * 8191 + EpsilonLanguage.getValue();

    hashCode = hashCode * 8191 + ((isSetModelConfigs()) ? 131071 : 524287);
    if (isSetModelConfigs())
      hashCode = hashCode * 8191 + ModelConfigs.hashCode();

    hashCode = hashCode * 8191 + ((isSetExportParameters()) ? 131071 : 524287);
    if (isSetExportParameters())
      hashCode = hashCode * 8191 + ExportParameters.hashCode();

    hashCode = hashCode * 8191 + ((isSetImportParameters()) ? 131071 : 524287);
    if (isSetImportParameters())
      hashCode = hashCode * 8191 + ImportParameters.hashCode();

    hashCode = hashCode * 8191 + ((isSetVariableNameOfReturnValue()) ? 131071 : 524287);
    if (isSetVariableNameOfReturnValue())
      hashCode = hashCode * 8191 + VariableNameOfReturnValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIEpsilonScriptExecutionConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetScriptFilePath()).compareTo(other.isSetScriptFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ScriptFilePath, other.ScriptFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScriptContent()).compareTo(other.isSetScriptContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ScriptContent, other.ScriptContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecuteWithScriptFile()).compareTo(other.isSetExecuteWithScriptFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteWithScriptFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ExecuteWithScriptFile, other.ExecuteWithScriptFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEpsilonLanguage()).compareTo(other.isSetEpsilonLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpsilonLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EpsilonLanguage, other.EpsilonLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelConfigs()).compareTo(other.isSetModelConfigs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelConfigs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ModelConfigs, other.ModelConfigs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExportParameters()).compareTo(other.isSetExportParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExportParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ExportParameters, other.ExportParameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImportParameters()).compareTo(other.isSetImportParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ImportParameters, other.ImportParameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVariableNameOfReturnValue()).compareTo(other.isSetVariableNameOfReturnValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariableNameOfReturnValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VariableNameOfReturnValue, other.VariableNameOfReturnValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIEpsilonScriptExecutionConfig(");
    boolean first = true;

    sb.append("ScriptFilePath:");
    if (this.ScriptFilePath == null) {
      sb.append("null");
    } else {
      sb.append(this.ScriptFilePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ScriptContent:");
    if (this.ScriptContent == null) {
      sb.append("null");
    } else {
      sb.append(this.ScriptContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExecuteWithScriptFile:");
    sb.append(this.ExecuteWithScriptFile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("EpsilonLanguage:");
    if (this.EpsilonLanguage == null) {
      sb.append("null");
    } else {
      sb.append(this.EpsilonLanguage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ModelConfigs:");
    if (this.ModelConfigs == null) {
      sb.append("null");
    } else {
      sb.append(this.ModelConfigs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExportParameters:");
    if (this.ExportParameters == null) {
      sb.append("null");
    } else {
      sb.append(this.ExportParameters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ImportParameters:");
    if (this.ImportParameters == null) {
      sb.append("null");
    } else {
      sb.append(this.ImportParameters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("VariableNameOfReturnValue:");
    if (this.VariableNameOfReturnValue == null) {
      sb.append("null");
    } else {
      sb.append(this.VariableNameOfReturnValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIEpsilonScriptExecutionConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIEpsilonScriptExecutionConfigStandardScheme getScheme() {
      return new TDDIEpsilonScriptExecutionConfigStandardScheme();
    }
  }

  private static class TDDIEpsilonScriptExecutionConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIEpsilonScriptExecutionConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIEpsilonScriptExecutionConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCRIPT_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ScriptFilePath = iprot.readString();
              struct.setScriptFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCRIPT_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ScriptContent = iprot.readString();
              struct.setScriptContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXECUTE_WITH_SCRIPT_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ExecuteWithScriptFile = iprot.readBool();
              struct.setExecuteWithScriptFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EPSILON_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.EpsilonLanguage = thriftContract.TDDIEpsilonLanguage.findByValue(iprot.readI32());
              struct.setEpsilonLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODEL_CONFIGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2752 = iprot.readListBegin();
                struct.ModelConfigs = new java.util.ArrayList<TDDIEpsilonScriptModelConfig>(_list2752.size);
                TDDIEpsilonScriptModelConfig _elem2753;
                for (int _i2754 = 0; _i2754 < _list2752.size; ++_i2754)
                {
                  _elem2753 = new TDDIEpsilonScriptModelConfig();
                  _elem2753.read(iprot);
                  struct.ModelConfigs.add(_elem2753);
                }
                iprot.readListEnd();
              }
              struct.setModelConfigsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPORT_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2755 = iprot.readListBegin();
                struct.ExportParameters = new java.util.ArrayList<TDDIEpsilonParameter>(_list2755.size);
                TDDIEpsilonParameter _elem2756;
                for (int _i2757 = 0; _i2757 < _list2755.size; ++_i2757)
                {
                  _elem2756 = new TDDIEpsilonParameter();
                  _elem2756.read(iprot);
                  struct.ExportParameters.add(_elem2756);
                }
                iprot.readListEnd();
              }
              struct.setExportParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMPORT_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list2758 = iprot.readListBegin();
                struct.ImportParameters = new java.util.ArrayList<TDDIEpsilonParameter>(_list2758.size);
                TDDIEpsilonParameter _elem2759;
                for (int _i2760 = 0; _i2760 < _list2758.size; ++_i2760)
                {
                  _elem2759 = new TDDIEpsilonParameter();
                  _elem2759.read(iprot);
                  struct.ImportParameters.add(_elem2759);
                }
                iprot.readListEnd();
              }
              struct.setImportParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VARIABLE_NAME_OF_RETURN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.VariableNameOfReturnValue = iprot.readString();
              struct.setVariableNameOfReturnValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIEpsilonScriptExecutionConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ScriptFilePath != null) {
        oprot.writeFieldBegin(SCRIPT_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.ScriptFilePath);
        oprot.writeFieldEnd();
      }
      if (struct.ScriptContent != null) {
        oprot.writeFieldBegin(SCRIPT_CONTENT_FIELD_DESC);
        oprot.writeString(struct.ScriptContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXECUTE_WITH_SCRIPT_FILE_FIELD_DESC);
      oprot.writeBool(struct.ExecuteWithScriptFile);
      oprot.writeFieldEnd();
      if (struct.EpsilonLanguage != null) {
        oprot.writeFieldBegin(EPSILON_LANGUAGE_FIELD_DESC);
        oprot.writeI32(struct.EpsilonLanguage.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.ModelConfigs != null) {
        oprot.writeFieldBegin(MODEL_CONFIGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ModelConfigs.size()));
          for (TDDIEpsilonScriptModelConfig _iter2761 : struct.ModelConfigs)
          {
            _iter2761.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ExportParameters != null) {
        oprot.writeFieldBegin(EXPORT_PARAMETERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ExportParameters.size()));
          for (TDDIEpsilonParameter _iter2762 : struct.ExportParameters)
          {
            _iter2762.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ImportParameters != null) {
        oprot.writeFieldBegin(IMPORT_PARAMETERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ImportParameters.size()));
          for (TDDIEpsilonParameter _iter2763 : struct.ImportParameters)
          {
            _iter2763.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.VariableNameOfReturnValue != null) {
        oprot.writeFieldBegin(VARIABLE_NAME_OF_RETURN_VALUE_FIELD_DESC);
        oprot.writeString(struct.VariableNameOfReturnValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIEpsilonScriptExecutionConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIEpsilonScriptExecutionConfigTupleScheme getScheme() {
      return new TDDIEpsilonScriptExecutionConfigTupleScheme();
    }
  }

  private static class TDDIEpsilonScriptExecutionConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIEpsilonScriptExecutionConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIEpsilonScriptExecutionConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetScriptFilePath()) {
        optionals.set(0);
      }
      if (struct.isSetScriptContent()) {
        optionals.set(1);
      }
      if (struct.isSetExecuteWithScriptFile()) {
        optionals.set(2);
      }
      if (struct.isSetEpsilonLanguage()) {
        optionals.set(3);
      }
      if (struct.isSetModelConfigs()) {
        optionals.set(4);
      }
      if (struct.isSetExportParameters()) {
        optionals.set(5);
      }
      if (struct.isSetImportParameters()) {
        optionals.set(6);
      }
      if (struct.isSetVariableNameOfReturnValue()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetScriptFilePath()) {
        oprot.writeString(struct.ScriptFilePath);
      }
      if (struct.isSetScriptContent()) {
        oprot.writeString(struct.ScriptContent);
      }
      if (struct.isSetExecuteWithScriptFile()) {
        oprot.writeBool(struct.ExecuteWithScriptFile);
      }
      if (struct.isSetEpsilonLanguage()) {
        oprot.writeI32(struct.EpsilonLanguage.getValue());
      }
      if (struct.isSetModelConfigs()) {
        {
          oprot.writeI32(struct.ModelConfigs.size());
          for (TDDIEpsilonScriptModelConfig _iter2764 : struct.ModelConfigs)
          {
            _iter2764.write(oprot);
          }
        }
      }
      if (struct.isSetExportParameters()) {
        {
          oprot.writeI32(struct.ExportParameters.size());
          for (TDDIEpsilonParameter _iter2765 : struct.ExportParameters)
          {
            _iter2765.write(oprot);
          }
        }
      }
      if (struct.isSetImportParameters()) {
        {
          oprot.writeI32(struct.ImportParameters.size());
          for (TDDIEpsilonParameter _iter2766 : struct.ImportParameters)
          {
            _iter2766.write(oprot);
          }
        }
      }
      if (struct.isSetVariableNameOfReturnValue()) {
        oprot.writeString(struct.VariableNameOfReturnValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIEpsilonScriptExecutionConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.ScriptFilePath = iprot.readString();
        struct.setScriptFilePathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ScriptContent = iprot.readString();
        struct.setScriptContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ExecuteWithScriptFile = iprot.readBool();
        struct.setExecuteWithScriptFileIsSet(true);
      }
      if (incoming.get(3)) {
        struct.EpsilonLanguage = thriftContract.TDDIEpsilonLanguage.findByValue(iprot.readI32());
        struct.setEpsilonLanguageIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list2767 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ModelConfigs = new java.util.ArrayList<TDDIEpsilonScriptModelConfig>(_list2767.size);
          TDDIEpsilonScriptModelConfig _elem2768;
          for (int _i2769 = 0; _i2769 < _list2767.size; ++_i2769)
          {
            _elem2768 = new TDDIEpsilonScriptModelConfig();
            _elem2768.read(iprot);
            struct.ModelConfigs.add(_elem2768);
          }
        }
        struct.setModelConfigsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list2770 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ExportParameters = new java.util.ArrayList<TDDIEpsilonParameter>(_list2770.size);
          TDDIEpsilonParameter _elem2771;
          for (int _i2772 = 0; _i2772 < _list2770.size; ++_i2772)
          {
            _elem2771 = new TDDIEpsilonParameter();
            _elem2771.read(iprot);
            struct.ExportParameters.add(_elem2771);
          }
        }
        struct.setExportParametersIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list2773 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ImportParameters = new java.util.ArrayList<TDDIEpsilonParameter>(_list2773.size);
          TDDIEpsilonParameter _elem2774;
          for (int _i2775 = 0; _i2775 < _list2773.size; ++_i2775)
          {
            _elem2774 = new TDDIEpsilonParameter();
            _elem2774.read(iprot);
            struct.ImportParameters.add(_elem2774);
          }
        }
        struct.setImportParametersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.VariableNameOfReturnValue = iprot.readString();
        struct.setVariableNameOfReturnValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

