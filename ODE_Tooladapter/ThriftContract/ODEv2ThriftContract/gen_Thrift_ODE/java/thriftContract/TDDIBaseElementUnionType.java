/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;


public enum TDDIBaseElementUnionType implements org.apache.thrift.TEnum {
  BEUTConfiguration(0),
  BEUTSystem(1),
  BEUTFunction(2),
  BEUTPerfChars(3),
  BEUTSignal(4),
  BEUTContext(5),
  BEUTSystemBoundary(6),
  BEUTPort(7),
  BEUTLifecycleCondition(8),
  BEUTDesignPackage(9),
  BEUTMinimalCutSet(10),
  BEUTMinimalCutSets(11),
  BEUTFailureModel(12),
  BEUTFailure(13),
  BEUTProbDist(14),
  BEUTProbDistParam(15),
  BEUTFailureLogicPackage(16),
  BEUTTransition(17),
  BEUTState(18),
  BEUTCause(19),
  BEUTFMEAEntry(20),
  BEUTMeasure(21),
  BEUTMeasureType(22),
  BEUTMaintenanceProcedure(23),
  BEUTDependabilityPackage(24),
  BEUTAbstractRequirementSource(25),
  BEUTAbstractDependabilityRequirement(26),
  BEUTRequirementPackage(27),
  BEUTHazard(28),
  BEUTMalfunction(29),
  BEUTHazardType(30),
  BEUTHazardTypeSystem(31),
  BEUTRiskAssessment(32),
  BEUTRiskParameter(33),
  BEUTHARAPackage(34),
  BEUTThreatAgent(35),
  BEUTAttackerGoal(36),
  BEUTSecurityRisk(37),
  BEUTAttack(38),
  BEUTSecurityCapability(39),
  BEUTAsset(40),
  BEUTVulnerability(41),
  BEUTTARAPackage(42),
  BEUTStandard(43),
  BEUTAssuranceLevel(44),
  BEUTDomainPackage(45);

  private final int value;

  private TDDIBaseElementUnionType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static TDDIBaseElementUnionType findByValue(int value) { 
    switch (value) {
      case 0:
        return BEUTConfiguration;
      case 1:
        return BEUTSystem;
      case 2:
        return BEUTFunction;
      case 3:
        return BEUTPerfChars;
      case 4:
        return BEUTSignal;
      case 5:
        return BEUTContext;
      case 6:
        return BEUTSystemBoundary;
      case 7:
        return BEUTPort;
      case 8:
        return BEUTLifecycleCondition;
      case 9:
        return BEUTDesignPackage;
      case 10:
        return BEUTMinimalCutSet;
      case 11:
        return BEUTMinimalCutSets;
      case 12:
        return BEUTFailureModel;
      case 13:
        return BEUTFailure;
      case 14:
        return BEUTProbDist;
      case 15:
        return BEUTProbDistParam;
      case 16:
        return BEUTFailureLogicPackage;
      case 17:
        return BEUTTransition;
      case 18:
        return BEUTState;
      case 19:
        return BEUTCause;
      case 20:
        return BEUTFMEAEntry;
      case 21:
        return BEUTMeasure;
      case 22:
        return BEUTMeasureType;
      case 23:
        return BEUTMaintenanceProcedure;
      case 24:
        return BEUTDependabilityPackage;
      case 25:
        return BEUTAbstractRequirementSource;
      case 26:
        return BEUTAbstractDependabilityRequirement;
      case 27:
        return BEUTRequirementPackage;
      case 28:
        return BEUTHazard;
      case 29:
        return BEUTMalfunction;
      case 30:
        return BEUTHazardType;
      case 31:
        return BEUTHazardTypeSystem;
      case 32:
        return BEUTRiskAssessment;
      case 33:
        return BEUTRiskParameter;
      case 34:
        return BEUTHARAPackage;
      case 35:
        return BEUTThreatAgent;
      case 36:
        return BEUTAttackerGoal;
      case 37:
        return BEUTSecurityRisk;
      case 38:
        return BEUTAttack;
      case 39:
        return BEUTSecurityCapability;
      case 40:
        return BEUTAsset;
      case 41:
        return BEUTVulnerability;
      case 42:
        return BEUTTARAPackage;
      case 43:
        return BEUTStandard;
      case 44:
        return BEUTAssuranceLevel;
      case 45:
        return BEUTDomainPackage;
      default:
        return null;
    }
  }
}
