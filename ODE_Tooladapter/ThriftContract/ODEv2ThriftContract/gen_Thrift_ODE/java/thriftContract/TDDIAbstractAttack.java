/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-13")
public class TDDIAbstractAttack implements org.apache.thrift.TBase<TDDIAbstractAttack, TDDIAbstractAttack._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractAttack> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractAttack");

  private static final org.apache.thrift.protocol.TField USED_ATTACK_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedAttack", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_ATTACK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedAttackType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractAttackStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractAttackTupleSchemeFactory();

  public TDDIAbstractAttackUnion UsedAttack; // required
  /**
   * 
   * @see TDDIAbstractAttackUnionType
   */
  public TDDIAbstractAttackUnionType UsedAttackType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_ATTACK((short)1, "UsedAttack"),
    /**
     * 
     * @see TDDIAbstractAttackUnionType
     */
    USED_ATTACK_TYPE((short)2, "UsedAttackType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_ATTACK
          return USED_ATTACK;
        case 2: // USED_ATTACK_TYPE
          return USED_ATTACK_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_ATTACK, new org.apache.thrift.meta_data.FieldMetaData("UsedAttack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractAttackUnion.class)));
    tmpMap.put(_Fields.USED_ATTACK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedAttackType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIAbstractAttackUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractAttack.class, metaDataMap);
  }

  public TDDIAbstractAttack() {
  }

  public TDDIAbstractAttack(
    TDDIAbstractAttackUnion UsedAttack,
    TDDIAbstractAttackUnionType UsedAttackType)
  {
    this();
    this.UsedAttack = UsedAttack;
    this.UsedAttackType = UsedAttackType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractAttack(TDDIAbstractAttack other) {
    if (other.isSetUsedAttack()) {
      this.UsedAttack = new TDDIAbstractAttackUnion(other.UsedAttack);
    }
    if (other.isSetUsedAttackType()) {
      this.UsedAttackType = other.UsedAttackType;
    }
  }

  public TDDIAbstractAttack deepCopy() {
    return new TDDIAbstractAttack(this);
  }

  @Override
  public void clear() {
    this.UsedAttack = null;
    this.UsedAttackType = null;
  }

  public TDDIAbstractAttackUnion getUsedAttack() {
    return this.UsedAttack;
  }

  public TDDIAbstractAttack setUsedAttack(TDDIAbstractAttackUnion UsedAttack) {
    this.UsedAttack = UsedAttack;
    return this;
  }

  public void unsetUsedAttack() {
    this.UsedAttack = null;
  }

  /** Returns true if field UsedAttack is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedAttack() {
    return this.UsedAttack != null;
  }

  public void setUsedAttackIsSet(boolean value) {
    if (!value) {
      this.UsedAttack = null;
    }
  }

  /**
   * 
   * @see TDDIAbstractAttackUnionType
   */
  public TDDIAbstractAttackUnionType getUsedAttackType() {
    return this.UsedAttackType;
  }

  /**
   * 
   * @see TDDIAbstractAttackUnionType
   */
  public TDDIAbstractAttack setUsedAttackType(TDDIAbstractAttackUnionType UsedAttackType) {
    this.UsedAttackType = UsedAttackType;
    return this;
  }

  public void unsetUsedAttackType() {
    this.UsedAttackType = null;
  }

  /** Returns true if field UsedAttackType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedAttackType() {
    return this.UsedAttackType != null;
  }

  public void setUsedAttackTypeIsSet(boolean value) {
    if (!value) {
      this.UsedAttackType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_ATTACK:
      if (value == null) {
        unsetUsedAttack();
      } else {
        setUsedAttack((TDDIAbstractAttackUnion)value);
      }
      break;

    case USED_ATTACK_TYPE:
      if (value == null) {
        unsetUsedAttackType();
      } else {
        setUsedAttackType((TDDIAbstractAttackUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_ATTACK:
      return getUsedAttack();

    case USED_ATTACK_TYPE:
      return getUsedAttackType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_ATTACK:
      return isSetUsedAttack();
    case USED_ATTACK_TYPE:
      return isSetUsedAttackType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractAttack)
      return this.equals((TDDIAbstractAttack)that);
    return false;
  }

  public boolean equals(TDDIAbstractAttack that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedAttack = true && this.isSetUsedAttack();
    boolean that_present_UsedAttack = true && that.isSetUsedAttack();
    if (this_present_UsedAttack || that_present_UsedAttack) {
      if (!(this_present_UsedAttack && that_present_UsedAttack))
        return false;
      if (!this.UsedAttack.equals(that.UsedAttack))
        return false;
    }

    boolean this_present_UsedAttackType = true && this.isSetUsedAttackType();
    boolean that_present_UsedAttackType = true && that.isSetUsedAttackType();
    if (this_present_UsedAttackType || that_present_UsedAttackType) {
      if (!(this_present_UsedAttackType && that_present_UsedAttackType))
        return false;
      if (!this.UsedAttackType.equals(that.UsedAttackType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedAttack()) ? 131071 : 524287);
    if (isSetUsedAttack())
      hashCode = hashCode * 8191 + UsedAttack.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedAttackType()) ? 131071 : 524287);
    if (isSetUsedAttackType())
      hashCode = hashCode * 8191 + UsedAttackType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractAttack other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedAttack()).compareTo(other.isSetUsedAttack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedAttack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedAttack, other.UsedAttack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedAttackType()).compareTo(other.isSetUsedAttackType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedAttackType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedAttackType, other.UsedAttackType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractAttack(");
    boolean first = true;

    sb.append("UsedAttack:");
    if (this.UsedAttack == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedAttack);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedAttackType:");
    if (this.UsedAttackType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedAttackType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (UsedAttack != null) {
      UsedAttack.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractAttackStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractAttackStandardScheme getScheme() {
      return new TDDIAbstractAttackStandardScheme();
    }
  }

  private static class TDDIAbstractAttackStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractAttack> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractAttack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_ATTACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedAttack = new TDDIAbstractAttackUnion();
              struct.UsedAttack.read(iprot);
              struct.setUsedAttackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_ATTACK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedAttackType = thriftContract.TDDIAbstractAttackUnionType.findByValue(iprot.readI32());
              struct.setUsedAttackTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractAttack struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedAttack != null) {
        oprot.writeFieldBegin(USED_ATTACK_FIELD_DESC);
        struct.UsedAttack.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedAttackType != null) {
        oprot.writeFieldBegin(USED_ATTACK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedAttackType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractAttackTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractAttackTupleScheme getScheme() {
      return new TDDIAbstractAttackTupleScheme();
    }
  }

  private static class TDDIAbstractAttackTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractAttack> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractAttack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedAttack()) {
        optionals.set(0);
      }
      if (struct.isSetUsedAttackType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedAttack()) {
        struct.UsedAttack.write(oprot);
      }
      if (struct.isSetUsedAttackType()) {
        oprot.writeI32(struct.UsedAttackType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractAttack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedAttack = new TDDIAbstractAttackUnion();
        struct.UsedAttack.read(iprot);
        struct.setUsedAttackIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedAttackType = thriftContract.TDDIAbstractAttackUnionType.findByValue(iprot.readI32());
        struct.setUsedAttackTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

