/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-04")
public class TDDIFaultTree implements org.apache.thrift.TBase<TDDIFaultTree, TDDIFaultTree._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIFaultTree> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIFaultTree");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyValueMaps", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MINIMAL_CUT_SETS_FIELD_DESC = new org.apache.thrift.protocol.TField("MinimalCutSets", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField FAILURES_FIELD_DESC = new org.apache.thrift.protocol.TField("Failures", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_MODELS_FIELD_DESC = new org.apache.thrift.protocol.TField("SubModels", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CAUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("Causes", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIFaultTreeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIFaultTreeTupleSchemeFactory();

  public long Id; // required
  public java.lang.String Name; // required
  public java.lang.String Description; // required
  public java.util.List<TDDIKeyValueMap> KeyValueMaps; // required
  public java.util.List<TDDIMinimalCutSets> MinimalCutSets; // required
  public java.util.List<TDDIAbstractFailure> Failures; // required
  public java.util.List<TDDIAbstractFailureModelRef> SubModels; // required
  public java.util.List<TDDIAbstractCause> Causes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    NAME((short)2, "Name"),
    DESCRIPTION((short)3, "Description"),
    KEY_VALUE_MAPS((short)4, "KeyValueMaps"),
    MINIMAL_CUT_SETS((short)5, "MinimalCutSets"),
    FAILURES((short)6, "Failures"),
    SUB_MODELS((short)7, "SubModels"),
    CAUSES((short)8, "Causes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // KEY_VALUE_MAPS
          return KEY_VALUE_MAPS;
        case 5: // MINIMAL_CUT_SETS
          return MINIMAL_CUT_SETS;
        case 6: // FAILURES
          return FAILURES;
        case 7: // SUB_MODELS
          return SUB_MODELS;
        case 8: // CAUSES
          return CAUSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("Description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_VALUE_MAPS, new org.apache.thrift.meta_data.FieldMetaData("KeyValueMaps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIKeyValueMap.class))));
    tmpMap.put(_Fields.MINIMAL_CUT_SETS, new org.apache.thrift.meta_data.FieldMetaData("MinimalCutSets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIMinimalCutSets.class))));
    tmpMap.put(_Fields.FAILURES, new org.apache.thrift.meta_data.FieldMetaData("Failures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailure.class))));
    tmpMap.put(_Fields.SUB_MODELS, new org.apache.thrift.meta_data.FieldMetaData("SubModels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractFailureModelRef.class))));
    tmpMap.put(_Fields.CAUSES, new org.apache.thrift.meta_data.FieldMetaData("Causes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractCause.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIFaultTree.class, metaDataMap);
  }

  public TDDIFaultTree() {
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.MinimalCutSets = new java.util.ArrayList<TDDIMinimalCutSets>();

    this.Failures = new java.util.ArrayList<TDDIAbstractFailure>();

    this.SubModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();

    this.Causes = new java.util.ArrayList<TDDIAbstractCause>();

  }

  public TDDIFaultTree(
    long Id,
    java.lang.String Name,
    java.lang.String Description,
    java.util.List<TDDIKeyValueMap> KeyValueMaps,
    java.util.List<TDDIMinimalCutSets> MinimalCutSets,
    java.util.List<TDDIAbstractFailure> Failures,
    java.util.List<TDDIAbstractFailureModelRef> SubModels,
    java.util.List<TDDIAbstractCause> Causes)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.Name = Name;
    this.Description = Description;
    this.KeyValueMaps = KeyValueMaps;
    this.MinimalCutSets = MinimalCutSets;
    this.Failures = Failures;
    this.SubModels = SubModels;
    this.Causes = Causes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIFaultTree(TDDIFaultTree other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetDescription()) {
      this.Description = other.Description;
    }
    if (other.isSetKeyValueMaps()) {
      java.util.List<TDDIKeyValueMap> __this__KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(other.KeyValueMaps.size());
      for (TDDIKeyValueMap other_element : other.KeyValueMaps) {
        __this__KeyValueMaps.add(new TDDIKeyValueMap(other_element));
      }
      this.KeyValueMaps = __this__KeyValueMaps;
    }
    if (other.isSetMinimalCutSets()) {
      java.util.List<TDDIMinimalCutSets> __this__MinimalCutSets = new java.util.ArrayList<TDDIMinimalCutSets>(other.MinimalCutSets.size());
      for (TDDIMinimalCutSets other_element : other.MinimalCutSets) {
        __this__MinimalCutSets.add(new TDDIMinimalCutSets(other_element));
      }
      this.MinimalCutSets = __this__MinimalCutSets;
    }
    if (other.isSetFailures()) {
      java.util.List<TDDIAbstractFailure> __this__Failures = new java.util.ArrayList<TDDIAbstractFailure>(other.Failures.size());
      for (TDDIAbstractFailure other_element : other.Failures) {
        __this__Failures.add(new TDDIAbstractFailure(other_element));
      }
      this.Failures = __this__Failures;
    }
    if (other.isSetSubModels()) {
      java.util.List<TDDIAbstractFailureModelRef> __this__SubModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(other.SubModels.size());
      for (TDDIAbstractFailureModelRef other_element : other.SubModels) {
        __this__SubModels.add(new TDDIAbstractFailureModelRef(other_element));
      }
      this.SubModels = __this__SubModels;
    }
    if (other.isSetCauses()) {
      java.util.List<TDDIAbstractCause> __this__Causes = new java.util.ArrayList<TDDIAbstractCause>(other.Causes.size());
      for (TDDIAbstractCause other_element : other.Causes) {
        __this__Causes.add(new TDDIAbstractCause(other_element));
      }
      this.Causes = __this__Causes;
    }
  }

  public TDDIFaultTree deepCopy() {
    return new TDDIFaultTree(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    this.Name = "";

    this.Description = "";

    this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();

    this.MinimalCutSets = new java.util.ArrayList<TDDIMinimalCutSets>();

    this.Failures = new java.util.ArrayList<TDDIAbstractFailure>();

    this.SubModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();

    this.Causes = new java.util.ArrayList<TDDIAbstractCause>();

  }

  public long getId() {
    return this.Id;
  }

  public TDDIFaultTree setId(long Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.Name;
  }

  public TDDIFaultTree setName(java.lang.String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.Description;
  }

  public TDDIFaultTree setDescription(java.lang.String Description) {
    this.Description = Description;
    return this;
  }

  public void unsetDescription() {
    this.Description = null;
  }

  /** Returns true if field Description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.Description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.Description = null;
    }
  }

  public int getKeyValueMapsSize() {
    return (this.KeyValueMaps == null) ? 0 : this.KeyValueMaps.size();
  }

  public java.util.Iterator<TDDIKeyValueMap> getKeyValueMapsIterator() {
    return (this.KeyValueMaps == null) ? null : this.KeyValueMaps.iterator();
  }

  public void addToKeyValueMaps(TDDIKeyValueMap elem) {
    if (this.KeyValueMaps == null) {
      this.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>();
    }
    this.KeyValueMaps.add(elem);
  }

  public java.util.List<TDDIKeyValueMap> getKeyValueMaps() {
    return this.KeyValueMaps;
  }

  public TDDIFaultTree setKeyValueMaps(java.util.List<TDDIKeyValueMap> KeyValueMaps) {
    this.KeyValueMaps = KeyValueMaps;
    return this;
  }

  public void unsetKeyValueMaps() {
    this.KeyValueMaps = null;
  }

  /** Returns true if field KeyValueMaps is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMaps() {
    return this.KeyValueMaps != null;
  }

  public void setKeyValueMapsIsSet(boolean value) {
    if (!value) {
      this.KeyValueMaps = null;
    }
  }

  public int getMinimalCutSetsSize() {
    return (this.MinimalCutSets == null) ? 0 : this.MinimalCutSets.size();
  }

  public java.util.Iterator<TDDIMinimalCutSets> getMinimalCutSetsIterator() {
    return (this.MinimalCutSets == null) ? null : this.MinimalCutSets.iterator();
  }

  public void addToMinimalCutSets(TDDIMinimalCutSets elem) {
    if (this.MinimalCutSets == null) {
      this.MinimalCutSets = new java.util.ArrayList<TDDIMinimalCutSets>();
    }
    this.MinimalCutSets.add(elem);
  }

  public java.util.List<TDDIMinimalCutSets> getMinimalCutSets() {
    return this.MinimalCutSets;
  }

  public TDDIFaultTree setMinimalCutSets(java.util.List<TDDIMinimalCutSets> MinimalCutSets) {
    this.MinimalCutSets = MinimalCutSets;
    return this;
  }

  public void unsetMinimalCutSets() {
    this.MinimalCutSets = null;
  }

  /** Returns true if field MinimalCutSets is set (has been assigned a value) and false otherwise */
  public boolean isSetMinimalCutSets() {
    return this.MinimalCutSets != null;
  }

  public void setMinimalCutSetsIsSet(boolean value) {
    if (!value) {
      this.MinimalCutSets = null;
    }
  }

  public int getFailuresSize() {
    return (this.Failures == null) ? 0 : this.Failures.size();
  }

  public java.util.Iterator<TDDIAbstractFailure> getFailuresIterator() {
    return (this.Failures == null) ? null : this.Failures.iterator();
  }

  public void addToFailures(TDDIAbstractFailure elem) {
    if (this.Failures == null) {
      this.Failures = new java.util.ArrayList<TDDIAbstractFailure>();
    }
    this.Failures.add(elem);
  }

  public java.util.List<TDDIAbstractFailure> getFailures() {
    return this.Failures;
  }

  public TDDIFaultTree setFailures(java.util.List<TDDIAbstractFailure> Failures) {
    this.Failures = Failures;
    return this;
  }

  public void unsetFailures() {
    this.Failures = null;
  }

  /** Returns true if field Failures is set (has been assigned a value) and false otherwise */
  public boolean isSetFailures() {
    return this.Failures != null;
  }

  public void setFailuresIsSet(boolean value) {
    if (!value) {
      this.Failures = null;
    }
  }

  public int getSubModelsSize() {
    return (this.SubModels == null) ? 0 : this.SubModels.size();
  }

  public java.util.Iterator<TDDIAbstractFailureModelRef> getSubModelsIterator() {
    return (this.SubModels == null) ? null : this.SubModels.iterator();
  }

  public void addToSubModels(TDDIAbstractFailureModelRef elem) {
    if (this.SubModels == null) {
      this.SubModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>();
    }
    this.SubModels.add(elem);
  }

  public java.util.List<TDDIAbstractFailureModelRef> getSubModels() {
    return this.SubModels;
  }

  public TDDIFaultTree setSubModels(java.util.List<TDDIAbstractFailureModelRef> SubModels) {
    this.SubModels = SubModels;
    return this;
  }

  public void unsetSubModels() {
    this.SubModels = null;
  }

  /** Returns true if field SubModels is set (has been assigned a value) and false otherwise */
  public boolean isSetSubModels() {
    return this.SubModels != null;
  }

  public void setSubModelsIsSet(boolean value) {
    if (!value) {
      this.SubModels = null;
    }
  }

  public int getCausesSize() {
    return (this.Causes == null) ? 0 : this.Causes.size();
  }

  public java.util.Iterator<TDDIAbstractCause> getCausesIterator() {
    return (this.Causes == null) ? null : this.Causes.iterator();
  }

  public void addToCauses(TDDIAbstractCause elem) {
    if (this.Causes == null) {
      this.Causes = new java.util.ArrayList<TDDIAbstractCause>();
    }
    this.Causes.add(elem);
  }

  public java.util.List<TDDIAbstractCause> getCauses() {
    return this.Causes;
  }

  public TDDIFaultTree setCauses(java.util.List<TDDIAbstractCause> Causes) {
    this.Causes = Causes;
    return this;
  }

  public void unsetCauses() {
    this.Causes = null;
  }

  /** Returns true if field Causes is set (has been assigned a value) and false otherwise */
  public boolean isSetCauses() {
    return this.Causes != null;
  }

  public void setCausesIsSet(boolean value) {
    if (!value) {
      this.Causes = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case KEY_VALUE_MAPS:
      if (value == null) {
        unsetKeyValueMaps();
      } else {
        setKeyValueMaps((java.util.List<TDDIKeyValueMap>)value);
      }
      break;

    case MINIMAL_CUT_SETS:
      if (value == null) {
        unsetMinimalCutSets();
      } else {
        setMinimalCutSets((java.util.List<TDDIMinimalCutSets>)value);
      }
      break;

    case FAILURES:
      if (value == null) {
        unsetFailures();
      } else {
        setFailures((java.util.List<TDDIAbstractFailure>)value);
      }
      break;

    case SUB_MODELS:
      if (value == null) {
        unsetSubModels();
      } else {
        setSubModels((java.util.List<TDDIAbstractFailureModelRef>)value);
      }
      break;

    case CAUSES:
      if (value == null) {
        unsetCauses();
      } else {
        setCauses((java.util.List<TDDIAbstractCause>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case KEY_VALUE_MAPS:
      return getKeyValueMaps();

    case MINIMAL_CUT_SETS:
      return getMinimalCutSets();

    case FAILURES:
      return getFailures();

    case SUB_MODELS:
      return getSubModels();

    case CAUSES:
      return getCauses();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case KEY_VALUE_MAPS:
      return isSetKeyValueMaps();
    case MINIMAL_CUT_SETS:
      return isSetMinimalCutSets();
    case FAILURES:
      return isSetFailures();
    case SUB_MODELS:
      return isSetSubModels();
    case CAUSES:
      return isSetCauses();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIFaultTree)
      return this.equals((TDDIFaultTree)that);
    return false;
  }

  public boolean equals(TDDIFaultTree that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Description = true && this.isSetDescription();
    boolean that_present_Description = true && that.isSetDescription();
    if (this_present_Description || that_present_Description) {
      if (!(this_present_Description && that_present_Description))
        return false;
      if (!this.Description.equals(that.Description))
        return false;
    }

    boolean this_present_KeyValueMaps = true && this.isSetKeyValueMaps();
    boolean that_present_KeyValueMaps = true && that.isSetKeyValueMaps();
    if (this_present_KeyValueMaps || that_present_KeyValueMaps) {
      if (!(this_present_KeyValueMaps && that_present_KeyValueMaps))
        return false;
      if (!this.KeyValueMaps.equals(that.KeyValueMaps))
        return false;
    }

    boolean this_present_MinimalCutSets = true && this.isSetMinimalCutSets();
    boolean that_present_MinimalCutSets = true && that.isSetMinimalCutSets();
    if (this_present_MinimalCutSets || that_present_MinimalCutSets) {
      if (!(this_present_MinimalCutSets && that_present_MinimalCutSets))
        return false;
      if (!this.MinimalCutSets.equals(that.MinimalCutSets))
        return false;
    }

    boolean this_present_Failures = true && this.isSetFailures();
    boolean that_present_Failures = true && that.isSetFailures();
    if (this_present_Failures || that_present_Failures) {
      if (!(this_present_Failures && that_present_Failures))
        return false;
      if (!this.Failures.equals(that.Failures))
        return false;
    }

    boolean this_present_SubModels = true && this.isSetSubModels();
    boolean that_present_SubModels = true && that.isSetSubModels();
    if (this_present_SubModels || that_present_SubModels) {
      if (!(this_present_SubModels && that_present_SubModels))
        return false;
      if (!this.SubModels.equals(that.SubModels))
        return false;
    }

    boolean this_present_Causes = true && this.isSetCauses();
    boolean that_present_Causes = true && that.isSetCauses();
    if (this_present_Causes || that_present_Causes) {
      if (!(this_present_Causes && that_present_Causes))
        return false;
      if (!this.Causes.equals(that.Causes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + Name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + Description.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyValueMaps()) ? 131071 : 524287);
    if (isSetKeyValueMaps())
      hashCode = hashCode * 8191 + KeyValueMaps.hashCode();

    hashCode = hashCode * 8191 + ((isSetMinimalCutSets()) ? 131071 : 524287);
    if (isSetMinimalCutSets())
      hashCode = hashCode * 8191 + MinimalCutSets.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailures()) ? 131071 : 524287);
    if (isSetFailures())
      hashCode = hashCode * 8191 + Failures.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubModels()) ? 131071 : 524287);
    if (isSetSubModels())
      hashCode = hashCode * 8191 + SubModels.hashCode();

    hashCode = hashCode * 8191 + ((isSetCauses()) ? 131071 : 524287);
    if (isSetCauses())
      hashCode = hashCode * 8191 + Causes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIFaultTree other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Description, other.Description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMaps()).compareTo(other.isSetKeyValueMaps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMaps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyValueMaps, other.KeyValueMaps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinimalCutSets()).compareTo(other.isSetMinimalCutSets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinimalCutSets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MinimalCutSets, other.MinimalCutSets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailures()).compareTo(other.isSetFailures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Failures, other.Failures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubModels()).compareTo(other.isSetSubModels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubModels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SubModels, other.SubModels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCauses()).compareTo(other.isSetCauses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCauses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Causes, other.Causes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIFaultTree(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Description:");
    if (this.Description == null) {
      sb.append("null");
    } else {
      sb.append(this.Description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyValueMaps:");
    if (this.KeyValueMaps == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyValueMaps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MinimalCutSets:");
    if (this.MinimalCutSets == null) {
      sb.append("null");
    } else {
      sb.append(this.MinimalCutSets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Failures:");
    if (this.Failures == null) {
      sb.append("null");
    } else {
      sb.append(this.Failures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SubModels:");
    if (this.SubModels == null) {
      sb.append("null");
    } else {
      sb.append(this.SubModels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Causes:");
    if (this.Causes == null) {
      sb.append("null");
    } else {
      sb.append(this.Causes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIFaultTreeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIFaultTreeStandardScheme getScheme() {
      return new TDDIFaultTreeStandardScheme();
    }
  }

  private static class TDDIFaultTreeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIFaultTree> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIFaultTree struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY_VALUE_MAPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list992 = iprot.readListBegin();
                struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list992.size);
                TDDIKeyValueMap _elem993;
                for (int _i994 = 0; _i994 < _list992.size; ++_i994)
                {
                  _elem993 = new TDDIKeyValueMap();
                  _elem993.read(iprot);
                  struct.KeyValueMaps.add(_elem993);
                }
                iprot.readListEnd();
              }
              struct.setKeyValueMapsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MINIMAL_CUT_SETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list995 = iprot.readListBegin();
                struct.MinimalCutSets = new java.util.ArrayList<TDDIMinimalCutSets>(_list995.size);
                TDDIMinimalCutSets _elem996;
                for (int _i997 = 0; _i997 < _list995.size; ++_i997)
                {
                  _elem996 = new TDDIMinimalCutSets();
                  _elem996.read(iprot);
                  struct.MinimalCutSets.add(_elem996);
                }
                iprot.readListEnd();
              }
              struct.setMinimalCutSetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FAILURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list998 = iprot.readListBegin();
                struct.Failures = new java.util.ArrayList<TDDIAbstractFailure>(_list998.size);
                TDDIAbstractFailure _elem999;
                for (int _i1000 = 0; _i1000 < _list998.size; ++_i1000)
                {
                  _elem999 = new TDDIAbstractFailure();
                  _elem999.read(iprot);
                  struct.Failures.add(_elem999);
                }
                iprot.readListEnd();
              }
              struct.setFailuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_MODELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1001 = iprot.readListBegin();
                struct.SubModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(_list1001.size);
                TDDIAbstractFailureModelRef _elem1002;
                for (int _i1003 = 0; _i1003 < _list1001.size; ++_i1003)
                {
                  _elem1002 = new TDDIAbstractFailureModelRef();
                  _elem1002.read(iprot);
                  struct.SubModels.add(_elem1002);
                }
                iprot.readListEnd();
              }
              struct.setSubModelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CAUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1004 = iprot.readListBegin();
                struct.Causes = new java.util.ArrayList<TDDIAbstractCause>(_list1004.size);
                TDDIAbstractCause _elem1005;
                for (int _i1006 = 0; _i1006 < _list1004.size; ++_i1006)
                {
                  _elem1005 = new TDDIAbstractCause();
                  _elem1005.read(iprot);
                  struct.Causes.add(_elem1005);
                }
                iprot.readListEnd();
              }
              struct.setCausesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIFaultTree struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.Id);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.Description);
        oprot.writeFieldEnd();
      }
      if (struct.KeyValueMaps != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.KeyValueMaps.size()));
          for (TDDIKeyValueMap _iter1007 : struct.KeyValueMaps)
          {
            _iter1007.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.MinimalCutSets != null) {
        oprot.writeFieldBegin(MINIMAL_CUT_SETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.MinimalCutSets.size()));
          for (TDDIMinimalCutSets _iter1008 : struct.MinimalCutSets)
          {
            _iter1008.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Failures != null) {
        oprot.writeFieldBegin(FAILURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Failures.size()));
          for (TDDIAbstractFailure _iter1009 : struct.Failures)
          {
            _iter1009.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SubModels != null) {
        oprot.writeFieldBegin(SUB_MODELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.SubModels.size()));
          for (TDDIAbstractFailureModelRef _iter1010 : struct.SubModels)
          {
            _iter1010.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Causes != null) {
        oprot.writeFieldBegin(CAUSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Causes.size()));
          for (TDDIAbstractCause _iter1011 : struct.Causes)
          {
            _iter1011.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIFaultTreeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIFaultTreeTupleScheme getScheme() {
      return new TDDIFaultTreeTupleScheme();
    }
  }

  private static class TDDIFaultTreeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIFaultTree> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIFaultTree struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetKeyValueMaps()) {
        optionals.set(3);
      }
      if (struct.isSetMinimalCutSets()) {
        optionals.set(4);
      }
      if (struct.isSetFailures()) {
        optionals.set(5);
      }
      if (struct.isSetSubModels()) {
        optionals.set(6);
      }
      if (struct.isSetCauses()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.Id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.Description);
      }
      if (struct.isSetKeyValueMaps()) {
        {
          oprot.writeI32(struct.KeyValueMaps.size());
          for (TDDIKeyValueMap _iter1012 : struct.KeyValueMaps)
          {
            _iter1012.write(oprot);
          }
        }
      }
      if (struct.isSetMinimalCutSets()) {
        {
          oprot.writeI32(struct.MinimalCutSets.size());
          for (TDDIMinimalCutSets _iter1013 : struct.MinimalCutSets)
          {
            _iter1013.write(oprot);
          }
        }
      }
      if (struct.isSetFailures()) {
        {
          oprot.writeI32(struct.Failures.size());
          for (TDDIAbstractFailure _iter1014 : struct.Failures)
          {
            _iter1014.write(oprot);
          }
        }
      }
      if (struct.isSetSubModels()) {
        {
          oprot.writeI32(struct.SubModels.size());
          for (TDDIAbstractFailureModelRef _iter1015 : struct.SubModels)
          {
            _iter1015.write(oprot);
          }
        }
      }
      if (struct.isSetCauses()) {
        {
          oprot.writeI32(struct.Causes.size());
          for (TDDIAbstractCause _iter1016 : struct.Causes)
          {
            _iter1016.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIFaultTree struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.Id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list1017 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.KeyValueMaps = new java.util.ArrayList<TDDIKeyValueMap>(_list1017.size);
          TDDIKeyValueMap _elem1018;
          for (int _i1019 = 0; _i1019 < _list1017.size; ++_i1019)
          {
            _elem1018 = new TDDIKeyValueMap();
            _elem1018.read(iprot);
            struct.KeyValueMaps.add(_elem1018);
          }
        }
        struct.setKeyValueMapsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list1020 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.MinimalCutSets = new java.util.ArrayList<TDDIMinimalCutSets>(_list1020.size);
          TDDIMinimalCutSets _elem1021;
          for (int _i1022 = 0; _i1022 < _list1020.size; ++_i1022)
          {
            _elem1021 = new TDDIMinimalCutSets();
            _elem1021.read(iprot);
            struct.MinimalCutSets.add(_elem1021);
          }
        }
        struct.setMinimalCutSetsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list1023 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Failures = new java.util.ArrayList<TDDIAbstractFailure>(_list1023.size);
          TDDIAbstractFailure _elem1024;
          for (int _i1025 = 0; _i1025 < _list1023.size; ++_i1025)
          {
            _elem1024 = new TDDIAbstractFailure();
            _elem1024.read(iprot);
            struct.Failures.add(_elem1024);
          }
        }
        struct.setFailuresIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list1026 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.SubModels = new java.util.ArrayList<TDDIAbstractFailureModelRef>(_list1026.size);
          TDDIAbstractFailureModelRef _elem1027;
          for (int _i1028 = 0; _i1028 < _list1026.size; ++_i1028)
          {
            _elem1027 = new TDDIAbstractFailureModelRef();
            _elem1027.read(iprot);
            struct.SubModels.add(_elem1027);
          }
        }
        struct.setSubModelsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list1029 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Causes = new java.util.ArrayList<TDDIAbstractCause>(_list1029.size);
          TDDIAbstractCause _elem1030;
          for (int _i1031 = 0; _i1031 < _list1029.size; ++_i1031)
          {
            _elem1030 = new TDDIAbstractCause();
            _elem1030.read(iprot);
            struct.Causes.add(_elem1030);
          }
        }
        struct.setCausesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

