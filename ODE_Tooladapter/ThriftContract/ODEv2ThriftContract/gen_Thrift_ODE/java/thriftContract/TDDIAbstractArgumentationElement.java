/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-13")
public class TDDIAbstractArgumentationElement implements org.apache.thrift.TBase<TDDIAbstractArgumentationElement, TDDIAbstractArgumentationElement._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractArgumentationElement> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractArgumentationElement");

  private static final org.apache.thrift.protocol.TField USED_ARGUMENTATION_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedArgumentationElement", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_ARGUMENTATION_ELEMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedArgumentationElementType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractArgumentationElementStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractArgumentationElementTupleSchemeFactory();

  public TDDIArgumentationElementUnion UsedArgumentationElement; // required
  /**
   * 
   * @see TDDIArgumentationElementUnionType
   */
  public TDDIArgumentationElementUnionType UsedArgumentationElementType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_ARGUMENTATION_ELEMENT((short)1, "UsedArgumentationElement"),
    /**
     * 
     * @see TDDIArgumentationElementUnionType
     */
    USED_ARGUMENTATION_ELEMENT_TYPE((short)2, "UsedArgumentationElementType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_ARGUMENTATION_ELEMENT
          return USED_ARGUMENTATION_ELEMENT;
        case 2: // USED_ARGUMENTATION_ELEMENT_TYPE
          return USED_ARGUMENTATION_ELEMENT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_ARGUMENTATION_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("UsedArgumentationElement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIArgumentationElementUnion.class)));
    tmpMap.put(_Fields.USED_ARGUMENTATION_ELEMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedArgumentationElementType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIArgumentationElementUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractArgumentationElement.class, metaDataMap);
  }

  public TDDIAbstractArgumentationElement() {
  }

  public TDDIAbstractArgumentationElement(
    TDDIArgumentationElementUnion UsedArgumentationElement,
    TDDIArgumentationElementUnionType UsedArgumentationElementType)
  {
    this();
    this.UsedArgumentationElement = UsedArgumentationElement;
    this.UsedArgumentationElementType = UsedArgumentationElementType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractArgumentationElement(TDDIAbstractArgumentationElement other) {
    if (other.isSetUsedArgumentationElement()) {
      this.UsedArgumentationElement = new TDDIArgumentationElementUnion(other.UsedArgumentationElement);
    }
    if (other.isSetUsedArgumentationElementType()) {
      this.UsedArgumentationElementType = other.UsedArgumentationElementType;
    }
  }

  public TDDIAbstractArgumentationElement deepCopy() {
    return new TDDIAbstractArgumentationElement(this);
  }

  @Override
  public void clear() {
    this.UsedArgumentationElement = null;
    this.UsedArgumentationElementType = null;
  }

  public TDDIArgumentationElementUnion getUsedArgumentationElement() {
    return this.UsedArgumentationElement;
  }

  public TDDIAbstractArgumentationElement setUsedArgumentationElement(TDDIArgumentationElementUnion UsedArgumentationElement) {
    this.UsedArgumentationElement = UsedArgumentationElement;
    return this;
  }

  public void unsetUsedArgumentationElement() {
    this.UsedArgumentationElement = null;
  }

  /** Returns true if field UsedArgumentationElement is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedArgumentationElement() {
    return this.UsedArgumentationElement != null;
  }

  public void setUsedArgumentationElementIsSet(boolean value) {
    if (!value) {
      this.UsedArgumentationElement = null;
    }
  }

  /**
   * 
   * @see TDDIArgumentationElementUnionType
   */
  public TDDIArgumentationElementUnionType getUsedArgumentationElementType() {
    return this.UsedArgumentationElementType;
  }

  /**
   * 
   * @see TDDIArgumentationElementUnionType
   */
  public TDDIAbstractArgumentationElement setUsedArgumentationElementType(TDDIArgumentationElementUnionType UsedArgumentationElementType) {
    this.UsedArgumentationElementType = UsedArgumentationElementType;
    return this;
  }

  public void unsetUsedArgumentationElementType() {
    this.UsedArgumentationElementType = null;
  }

  /** Returns true if field UsedArgumentationElementType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedArgumentationElementType() {
    return this.UsedArgumentationElementType != null;
  }

  public void setUsedArgumentationElementTypeIsSet(boolean value) {
    if (!value) {
      this.UsedArgumentationElementType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_ARGUMENTATION_ELEMENT:
      if (value == null) {
        unsetUsedArgumentationElement();
      } else {
        setUsedArgumentationElement((TDDIArgumentationElementUnion)value);
      }
      break;

    case USED_ARGUMENTATION_ELEMENT_TYPE:
      if (value == null) {
        unsetUsedArgumentationElementType();
      } else {
        setUsedArgumentationElementType((TDDIArgumentationElementUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_ARGUMENTATION_ELEMENT:
      return getUsedArgumentationElement();

    case USED_ARGUMENTATION_ELEMENT_TYPE:
      return getUsedArgumentationElementType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_ARGUMENTATION_ELEMENT:
      return isSetUsedArgumentationElement();
    case USED_ARGUMENTATION_ELEMENT_TYPE:
      return isSetUsedArgumentationElementType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractArgumentationElement)
      return this.equals((TDDIAbstractArgumentationElement)that);
    return false;
  }

  public boolean equals(TDDIAbstractArgumentationElement that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedArgumentationElement = true && this.isSetUsedArgumentationElement();
    boolean that_present_UsedArgumentationElement = true && that.isSetUsedArgumentationElement();
    if (this_present_UsedArgumentationElement || that_present_UsedArgumentationElement) {
      if (!(this_present_UsedArgumentationElement && that_present_UsedArgumentationElement))
        return false;
      if (!this.UsedArgumentationElement.equals(that.UsedArgumentationElement))
        return false;
    }

    boolean this_present_UsedArgumentationElementType = true && this.isSetUsedArgumentationElementType();
    boolean that_present_UsedArgumentationElementType = true && that.isSetUsedArgumentationElementType();
    if (this_present_UsedArgumentationElementType || that_present_UsedArgumentationElementType) {
      if (!(this_present_UsedArgumentationElementType && that_present_UsedArgumentationElementType))
        return false;
      if (!this.UsedArgumentationElementType.equals(that.UsedArgumentationElementType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedArgumentationElement()) ? 131071 : 524287);
    if (isSetUsedArgumentationElement())
      hashCode = hashCode * 8191 + UsedArgumentationElement.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedArgumentationElementType()) ? 131071 : 524287);
    if (isSetUsedArgumentationElementType())
      hashCode = hashCode * 8191 + UsedArgumentationElementType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractArgumentationElement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedArgumentationElement()).compareTo(other.isSetUsedArgumentationElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedArgumentationElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedArgumentationElement, other.UsedArgumentationElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedArgumentationElementType()).compareTo(other.isSetUsedArgumentationElementType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedArgumentationElementType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedArgumentationElementType, other.UsedArgumentationElementType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractArgumentationElement(");
    boolean first = true;

    sb.append("UsedArgumentationElement:");
    if (this.UsedArgumentationElement == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedArgumentationElement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedArgumentationElementType:");
    if (this.UsedArgumentationElementType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedArgumentationElementType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractArgumentationElementStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractArgumentationElementStandardScheme getScheme() {
      return new TDDIAbstractArgumentationElementStandardScheme();
    }
  }

  private static class TDDIAbstractArgumentationElementStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractArgumentationElement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractArgumentationElement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_ARGUMENTATION_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedArgumentationElement = new TDDIArgumentationElementUnion();
              struct.UsedArgumentationElement.read(iprot);
              struct.setUsedArgumentationElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_ARGUMENTATION_ELEMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedArgumentationElementType = thriftContract.TDDIArgumentationElementUnionType.findByValue(iprot.readI32());
              struct.setUsedArgumentationElementTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractArgumentationElement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedArgumentationElement != null) {
        oprot.writeFieldBegin(USED_ARGUMENTATION_ELEMENT_FIELD_DESC);
        struct.UsedArgumentationElement.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedArgumentationElementType != null) {
        oprot.writeFieldBegin(USED_ARGUMENTATION_ELEMENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedArgumentationElementType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractArgumentationElementTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractArgumentationElementTupleScheme getScheme() {
      return new TDDIAbstractArgumentationElementTupleScheme();
    }
  }

  private static class TDDIAbstractArgumentationElementTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractArgumentationElement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractArgumentationElement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedArgumentationElement()) {
        optionals.set(0);
      }
      if (struct.isSetUsedArgumentationElementType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedArgumentationElement()) {
        struct.UsedArgumentationElement.write(oprot);
      }
      if (struct.isSetUsedArgumentationElementType()) {
        oprot.writeI32(struct.UsedArgumentationElementType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractArgumentationElement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedArgumentationElement = new TDDIArgumentationElementUnion();
        struct.UsedArgumentationElement.read(iprot);
        struct.setUsedArgumentationElementIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedArgumentationElementType = thriftContract.TDDIArgumentationElementUnionType.findByValue(iprot.readI32());
        struct.setUsedArgumentationElementTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

