/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIArtifactElementUnion extends org.apache.thrift.TUnion<TDDIArtifactElementUnion, TDDIArtifactElementUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIArtifactElementUnion");
  private static final org.apache.thrift.protocol.TField TERMINOLOGY_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("TerminologyElement", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ASSURANCE_CASE_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceCasePackage", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ARTIFACT_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ArtifactPackage", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ARTIFACT_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("ArtifactGroup", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ARTIFACT_ASSET_FIELD_DESC = new org.apache.thrift.protocol.TField("ArtifactAsset", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ARGUMENTATION_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ArgumentationElement", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TERMINOLOGY_ELEMENT((short)1, "TerminologyElement"),
    ASSURANCE_CASE_PACKAGE((short)2, "AssuranceCasePackage"),
    ARTIFACT_PACKAGE((short)3, "ArtifactPackage"),
    ARTIFACT_GROUP((short)4, "ArtifactGroup"),
    ARTIFACT_ASSET((short)5, "ArtifactAsset"),
    ARGUMENTATION_ELEMENT((short)6, "ArgumentationElement");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TERMINOLOGY_ELEMENT
          return TERMINOLOGY_ELEMENT;
        case 2: // ASSURANCE_CASE_PACKAGE
          return ASSURANCE_CASE_PACKAGE;
        case 3: // ARTIFACT_PACKAGE
          return ARTIFACT_PACKAGE;
        case 4: // ARTIFACT_GROUP
          return ARTIFACT_GROUP;
        case 5: // ARTIFACT_ASSET
          return ARTIFACT_ASSET;
        case 6: // ARGUMENTATION_ELEMENT
          return ARGUMENTATION_ELEMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TERMINOLOGY_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("TerminologyElement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractTerminologyElement")));
    tmpMap.put(_Fields.ASSURANCE_CASE_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("AssuranceCasePackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractAssuranceCasePackage.class)));
    tmpMap.put(_Fields.ARTIFACT_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ArtifactPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractArtifactPackage.class)));
    tmpMap.put(_Fields.ARTIFACT_GROUP, new org.apache.thrift.meta_data.FieldMetaData("ArtifactGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIArtifactGroup.class)));
    tmpMap.put(_Fields.ARTIFACT_ASSET, new org.apache.thrift.meta_data.FieldMetaData("ArtifactAsset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractArtifactAsset.class)));
    tmpMap.put(_Fields.ARGUMENTATION_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("ArgumentationElement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAbstractArgumentationElement.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIArtifactElementUnion.class, metaDataMap);
  }

  public TDDIArtifactElementUnion() {
    super();
  }

  public TDDIArtifactElementUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIArtifactElementUnion(TDDIArtifactElementUnion other) {
    super(other);
  }
  public TDDIArtifactElementUnion deepCopy() {
    return new TDDIArtifactElementUnion(this);
  }

  public static TDDIArtifactElementUnion TerminologyElement(TDDIAbstractTerminologyElement value) {
    TDDIArtifactElementUnion x = new TDDIArtifactElementUnion();
    x.setTerminologyElement(value);
    return x;
  }

  public static TDDIArtifactElementUnion AssuranceCasePackage(TDDIAbstractAssuranceCasePackage value) {
    TDDIArtifactElementUnion x = new TDDIArtifactElementUnion();
    x.setAssuranceCasePackage(value);
    return x;
  }

  public static TDDIArtifactElementUnion ArtifactPackage(TDDIAbstractArtifactPackage value) {
    TDDIArtifactElementUnion x = new TDDIArtifactElementUnion();
    x.setArtifactPackage(value);
    return x;
  }

  public static TDDIArtifactElementUnion ArtifactGroup(TDDIArtifactGroup value) {
    TDDIArtifactElementUnion x = new TDDIArtifactElementUnion();
    x.setArtifactGroup(value);
    return x;
  }

  public static TDDIArtifactElementUnion ArtifactAsset(TDDIAbstractArtifactAsset value) {
    TDDIArtifactElementUnion x = new TDDIArtifactElementUnion();
    x.setArtifactAsset(value);
    return x;
  }

  public static TDDIArtifactElementUnion ArgumentationElement(TDDIAbstractArgumentationElement value) {
    TDDIArtifactElementUnion x = new TDDIArtifactElementUnion();
    x.setArgumentationElement(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case TERMINOLOGY_ELEMENT:
        if (value instanceof TDDIAbstractTerminologyElement) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractTerminologyElement for field 'TerminologyElement', but got " + value.getClass().getSimpleName());
      case ASSURANCE_CASE_PACKAGE:
        if (value instanceof TDDIAbstractAssuranceCasePackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractAssuranceCasePackage for field 'AssuranceCasePackage', but got " + value.getClass().getSimpleName());
      case ARTIFACT_PACKAGE:
        if (value instanceof TDDIAbstractArtifactPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractArtifactPackage for field 'ArtifactPackage', but got " + value.getClass().getSimpleName());
      case ARTIFACT_GROUP:
        if (value instanceof TDDIArtifactGroup) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIArtifactGroup for field 'ArtifactGroup', but got " + value.getClass().getSimpleName());
      case ARTIFACT_ASSET:
        if (value instanceof TDDIAbstractArtifactAsset) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractArtifactAsset for field 'ArtifactAsset', but got " + value.getClass().getSimpleName());
      case ARGUMENTATION_ELEMENT:
        if (value instanceof TDDIAbstractArgumentationElement) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractArgumentationElement for field 'ArgumentationElement', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TERMINOLOGY_ELEMENT:
          if (field.type == TERMINOLOGY_ELEMENT_FIELD_DESC.type) {
            TDDIAbstractTerminologyElement TerminologyElement;
            TerminologyElement = new TDDIAbstractTerminologyElement();
            TerminologyElement.read(iprot);
            return TerminologyElement;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASSURANCE_CASE_PACKAGE:
          if (field.type == ASSURANCE_CASE_PACKAGE_FIELD_DESC.type) {
            TDDIAbstractAssuranceCasePackage AssuranceCasePackage;
            AssuranceCasePackage = new TDDIAbstractAssuranceCasePackage();
            AssuranceCasePackage.read(iprot);
            return AssuranceCasePackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARTIFACT_PACKAGE:
          if (field.type == ARTIFACT_PACKAGE_FIELD_DESC.type) {
            TDDIAbstractArtifactPackage ArtifactPackage;
            ArtifactPackage = new TDDIAbstractArtifactPackage();
            ArtifactPackage.read(iprot);
            return ArtifactPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARTIFACT_GROUP:
          if (field.type == ARTIFACT_GROUP_FIELD_DESC.type) {
            TDDIArtifactGroup ArtifactGroup;
            ArtifactGroup = new TDDIArtifactGroup();
            ArtifactGroup.read(iprot);
            return ArtifactGroup;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARTIFACT_ASSET:
          if (field.type == ARTIFACT_ASSET_FIELD_DESC.type) {
            TDDIAbstractArtifactAsset ArtifactAsset;
            ArtifactAsset = new TDDIAbstractArtifactAsset();
            ArtifactAsset.read(iprot);
            return ArtifactAsset;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARGUMENTATION_ELEMENT:
          if (field.type == ARGUMENTATION_ELEMENT_FIELD_DESC.type) {
            TDDIAbstractArgumentationElement ArgumentationElement;
            ArgumentationElement = new TDDIAbstractArgumentationElement();
            ArgumentationElement.read(iprot);
            return ArgumentationElement;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TERMINOLOGY_ELEMENT:
        TDDIAbstractTerminologyElement TerminologyElement = (TDDIAbstractTerminologyElement)value_;
        TerminologyElement.write(oprot);
        return;
      case ASSURANCE_CASE_PACKAGE:
        TDDIAbstractAssuranceCasePackage AssuranceCasePackage = (TDDIAbstractAssuranceCasePackage)value_;
        AssuranceCasePackage.write(oprot);
        return;
      case ARTIFACT_PACKAGE:
        TDDIAbstractArtifactPackage ArtifactPackage = (TDDIAbstractArtifactPackage)value_;
        ArtifactPackage.write(oprot);
        return;
      case ARTIFACT_GROUP:
        TDDIArtifactGroup ArtifactGroup = (TDDIArtifactGroup)value_;
        ArtifactGroup.write(oprot);
        return;
      case ARTIFACT_ASSET:
        TDDIAbstractArtifactAsset ArtifactAsset = (TDDIAbstractArtifactAsset)value_;
        ArtifactAsset.write(oprot);
        return;
      case ARGUMENTATION_ELEMENT:
        TDDIAbstractArgumentationElement ArgumentationElement = (TDDIAbstractArgumentationElement)value_;
        ArgumentationElement.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TERMINOLOGY_ELEMENT:
          TDDIAbstractTerminologyElement TerminologyElement;
          TerminologyElement = new TDDIAbstractTerminologyElement();
          TerminologyElement.read(iprot);
          return TerminologyElement;
        case ASSURANCE_CASE_PACKAGE:
          TDDIAbstractAssuranceCasePackage AssuranceCasePackage;
          AssuranceCasePackage = new TDDIAbstractAssuranceCasePackage();
          AssuranceCasePackage.read(iprot);
          return AssuranceCasePackage;
        case ARTIFACT_PACKAGE:
          TDDIAbstractArtifactPackage ArtifactPackage;
          ArtifactPackage = new TDDIAbstractArtifactPackage();
          ArtifactPackage.read(iprot);
          return ArtifactPackage;
        case ARTIFACT_GROUP:
          TDDIArtifactGroup ArtifactGroup;
          ArtifactGroup = new TDDIArtifactGroup();
          ArtifactGroup.read(iprot);
          return ArtifactGroup;
        case ARTIFACT_ASSET:
          TDDIAbstractArtifactAsset ArtifactAsset;
          ArtifactAsset = new TDDIAbstractArtifactAsset();
          ArtifactAsset.read(iprot);
          return ArtifactAsset;
        case ARGUMENTATION_ELEMENT:
          TDDIAbstractArgumentationElement ArgumentationElement;
          ArgumentationElement = new TDDIAbstractArgumentationElement();
          ArgumentationElement.read(iprot);
          return ArgumentationElement;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TERMINOLOGY_ELEMENT:
        TDDIAbstractTerminologyElement TerminologyElement = (TDDIAbstractTerminologyElement)value_;
        TerminologyElement.write(oprot);
        return;
      case ASSURANCE_CASE_PACKAGE:
        TDDIAbstractAssuranceCasePackage AssuranceCasePackage = (TDDIAbstractAssuranceCasePackage)value_;
        AssuranceCasePackage.write(oprot);
        return;
      case ARTIFACT_PACKAGE:
        TDDIAbstractArtifactPackage ArtifactPackage = (TDDIAbstractArtifactPackage)value_;
        ArtifactPackage.write(oprot);
        return;
      case ARTIFACT_GROUP:
        TDDIArtifactGroup ArtifactGroup = (TDDIArtifactGroup)value_;
        ArtifactGroup.write(oprot);
        return;
      case ARTIFACT_ASSET:
        TDDIAbstractArtifactAsset ArtifactAsset = (TDDIAbstractArtifactAsset)value_;
        ArtifactAsset.write(oprot);
        return;
      case ARGUMENTATION_ELEMENT:
        TDDIAbstractArgumentationElement ArgumentationElement = (TDDIAbstractArgumentationElement)value_;
        ArgumentationElement.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TERMINOLOGY_ELEMENT:
        return TERMINOLOGY_ELEMENT_FIELD_DESC;
      case ASSURANCE_CASE_PACKAGE:
        return ASSURANCE_CASE_PACKAGE_FIELD_DESC;
      case ARTIFACT_PACKAGE:
        return ARTIFACT_PACKAGE_FIELD_DESC;
      case ARTIFACT_GROUP:
        return ARTIFACT_GROUP_FIELD_DESC;
      case ARTIFACT_ASSET:
        return ARTIFACT_ASSET_FIELD_DESC;
      case ARGUMENTATION_ELEMENT:
        return ARGUMENTATION_ELEMENT_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIAbstractTerminologyElement getTerminologyElement() {
    if (getSetField() == _Fields.TERMINOLOGY_ELEMENT) {
      return (TDDIAbstractTerminologyElement)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'TerminologyElement' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTerminologyElement(TDDIAbstractTerminologyElement value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TERMINOLOGY_ELEMENT;
    value_ = value;
  }

  public TDDIAbstractAssuranceCasePackage getAssuranceCasePackage() {
    if (getSetField() == _Fields.ASSURANCE_CASE_PACKAGE) {
      return (TDDIAbstractAssuranceCasePackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AssuranceCasePackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAssuranceCasePackage(TDDIAbstractAssuranceCasePackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASSURANCE_CASE_PACKAGE;
    value_ = value;
  }

  public TDDIAbstractArtifactPackage getArtifactPackage() {
    if (getSetField() == _Fields.ARTIFACT_PACKAGE) {
      return (TDDIAbstractArtifactPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArtifactPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArtifactPackage(TDDIAbstractArtifactPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARTIFACT_PACKAGE;
    value_ = value;
  }

  public TDDIArtifactGroup getArtifactGroup() {
    if (getSetField() == _Fields.ARTIFACT_GROUP) {
      return (TDDIArtifactGroup)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArtifactGroup' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArtifactGroup(TDDIArtifactGroup value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARTIFACT_GROUP;
    value_ = value;
  }

  public TDDIAbstractArtifactAsset getArtifactAsset() {
    if (getSetField() == _Fields.ARTIFACT_ASSET) {
      return (TDDIAbstractArtifactAsset)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArtifactAsset' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArtifactAsset(TDDIAbstractArtifactAsset value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARTIFACT_ASSET;
    value_ = value;
  }

  public TDDIAbstractArgumentationElement getArgumentationElement() {
    if (getSetField() == _Fields.ARGUMENTATION_ELEMENT) {
      return (TDDIAbstractArgumentationElement)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ArgumentationElement' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArgumentationElement(TDDIAbstractArgumentationElement value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARGUMENTATION_ELEMENT;
    value_ = value;
  }

  public boolean isSetTerminologyElement() {
    return setField_ == _Fields.TERMINOLOGY_ELEMENT;
  }


  public boolean isSetAssuranceCasePackage() {
    return setField_ == _Fields.ASSURANCE_CASE_PACKAGE;
  }


  public boolean isSetArtifactPackage() {
    return setField_ == _Fields.ARTIFACT_PACKAGE;
  }


  public boolean isSetArtifactGroup() {
    return setField_ == _Fields.ARTIFACT_GROUP;
  }


  public boolean isSetArtifactAsset() {
    return setField_ == _Fields.ARTIFACT_ASSET;
  }


  public boolean isSetArgumentationElement() {
    return setField_ == _Fields.ARGUMENTATION_ELEMENT;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIArtifactElementUnion) {
      return equals((TDDIArtifactElementUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIArtifactElementUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIArtifactElementUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
