/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-04")
public class TDDIAbstractODEProductPackage implements org.apache.thrift.TBase<TDDIAbstractODEProductPackage, TDDIAbstractODEProductPackage._Fields>, java.io.Serializable, Cloneable, Comparable<TDDIAbstractODEProductPackage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAbstractODEProductPackage");

  private static final org.apache.thrift.protocol.TField USED_ODEPRODUCT_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedODEProductPackage", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USED_ODEPRODUCT_PACKAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UsedODEProductPackageType", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDDIAbstractODEProductPackageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDDIAbstractODEProductPackageTupleSchemeFactory();

  public TDDIODEProductPackageUnion UsedODEProductPackage; // required
  /**
   * 
   * @see TDDIODEProductPackageUnionType
   */
  public TDDIODEProductPackageUnionType UsedODEProductPackageType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USED_ODEPRODUCT_PACKAGE((short)1, "UsedODEProductPackage"),
    /**
     * 
     * @see TDDIODEProductPackageUnionType
     */
    USED_ODEPRODUCT_PACKAGE_TYPE((short)2, "UsedODEProductPackageType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USED_ODEPRODUCT_PACKAGE
          return USED_ODEPRODUCT_PACKAGE;
        case 2: // USED_ODEPRODUCT_PACKAGE_TYPE
          return USED_ODEPRODUCT_PACKAGE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USED_ODEPRODUCT_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("UsedODEProductPackage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIODEProductPackageUnion.class)));
    tmpMap.put(_Fields.USED_ODEPRODUCT_PACKAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UsedODEProductPackageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDDIODEProductPackageUnionType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAbstractODEProductPackage.class, metaDataMap);
  }

  public TDDIAbstractODEProductPackage() {
  }

  public TDDIAbstractODEProductPackage(
    TDDIODEProductPackageUnion UsedODEProductPackage,
    TDDIODEProductPackageUnionType UsedODEProductPackageType)
  {
    this();
    this.UsedODEProductPackage = UsedODEProductPackage;
    this.UsedODEProductPackageType = UsedODEProductPackageType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDDIAbstractODEProductPackage(TDDIAbstractODEProductPackage other) {
    if (other.isSetUsedODEProductPackage()) {
      this.UsedODEProductPackage = new TDDIODEProductPackageUnion(other.UsedODEProductPackage);
    }
    if (other.isSetUsedODEProductPackageType()) {
      this.UsedODEProductPackageType = other.UsedODEProductPackageType;
    }
  }

  public TDDIAbstractODEProductPackage deepCopy() {
    return new TDDIAbstractODEProductPackage(this);
  }

  @Override
  public void clear() {
    this.UsedODEProductPackage = null;
    this.UsedODEProductPackageType = null;
  }

  public TDDIODEProductPackageUnion getUsedODEProductPackage() {
    return this.UsedODEProductPackage;
  }

  public TDDIAbstractODEProductPackage setUsedODEProductPackage(TDDIODEProductPackageUnion UsedODEProductPackage) {
    this.UsedODEProductPackage = UsedODEProductPackage;
    return this;
  }

  public void unsetUsedODEProductPackage() {
    this.UsedODEProductPackage = null;
  }

  /** Returns true if field UsedODEProductPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedODEProductPackage() {
    return this.UsedODEProductPackage != null;
  }

  public void setUsedODEProductPackageIsSet(boolean value) {
    if (!value) {
      this.UsedODEProductPackage = null;
    }
  }

  /**
   * 
   * @see TDDIODEProductPackageUnionType
   */
  public TDDIODEProductPackageUnionType getUsedODEProductPackageType() {
    return this.UsedODEProductPackageType;
  }

  /**
   * 
   * @see TDDIODEProductPackageUnionType
   */
  public TDDIAbstractODEProductPackage setUsedODEProductPackageType(TDDIODEProductPackageUnionType UsedODEProductPackageType) {
    this.UsedODEProductPackageType = UsedODEProductPackageType;
    return this;
  }

  public void unsetUsedODEProductPackageType() {
    this.UsedODEProductPackageType = null;
  }

  /** Returns true if field UsedODEProductPackageType is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedODEProductPackageType() {
    return this.UsedODEProductPackageType != null;
  }

  public void setUsedODEProductPackageTypeIsSet(boolean value) {
    if (!value) {
      this.UsedODEProductPackageType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USED_ODEPRODUCT_PACKAGE:
      if (value == null) {
        unsetUsedODEProductPackage();
      } else {
        setUsedODEProductPackage((TDDIODEProductPackageUnion)value);
      }
      break;

    case USED_ODEPRODUCT_PACKAGE_TYPE:
      if (value == null) {
        unsetUsedODEProductPackageType();
      } else {
        setUsedODEProductPackageType((TDDIODEProductPackageUnionType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USED_ODEPRODUCT_PACKAGE:
      return getUsedODEProductPackage();

    case USED_ODEPRODUCT_PACKAGE_TYPE:
      return getUsedODEProductPackageType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USED_ODEPRODUCT_PACKAGE:
      return isSetUsedODEProductPackage();
    case USED_ODEPRODUCT_PACKAGE_TYPE:
      return isSetUsedODEProductPackageType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDDIAbstractODEProductPackage)
      return this.equals((TDDIAbstractODEProductPackage)that);
    return false;
  }

  public boolean equals(TDDIAbstractODEProductPackage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_UsedODEProductPackage = true && this.isSetUsedODEProductPackage();
    boolean that_present_UsedODEProductPackage = true && that.isSetUsedODEProductPackage();
    if (this_present_UsedODEProductPackage || that_present_UsedODEProductPackage) {
      if (!(this_present_UsedODEProductPackage && that_present_UsedODEProductPackage))
        return false;
      if (!this.UsedODEProductPackage.equals(that.UsedODEProductPackage))
        return false;
    }

    boolean this_present_UsedODEProductPackageType = true && this.isSetUsedODEProductPackageType();
    boolean that_present_UsedODEProductPackageType = true && that.isSetUsedODEProductPackageType();
    if (this_present_UsedODEProductPackageType || that_present_UsedODEProductPackageType) {
      if (!(this_present_UsedODEProductPackageType && that_present_UsedODEProductPackageType))
        return false;
      if (!this.UsedODEProductPackageType.equals(that.UsedODEProductPackageType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsedODEProductPackage()) ? 131071 : 524287);
    if (isSetUsedODEProductPackage())
      hashCode = hashCode * 8191 + UsedODEProductPackage.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsedODEProductPackageType()) ? 131071 : 524287);
    if (isSetUsedODEProductPackageType())
      hashCode = hashCode * 8191 + UsedODEProductPackageType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TDDIAbstractODEProductPackage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUsedODEProductPackage()).compareTo(other.isSetUsedODEProductPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedODEProductPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedODEProductPackage, other.UsedODEProductPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsedODEProductPackageType()).compareTo(other.isSetUsedODEProductPackageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedODEProductPackageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UsedODEProductPackageType, other.UsedODEProductPackageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDDIAbstractODEProductPackage(");
    boolean first = true;

    sb.append("UsedODEProductPackage:");
    if (this.UsedODEProductPackage == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedODEProductPackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedODEProductPackageType:");
    if (this.UsedODEProductPackageType == null) {
      sb.append("null");
    } else {
      sb.append(this.UsedODEProductPackageType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDDIAbstractODEProductPackageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractODEProductPackageStandardScheme getScheme() {
      return new TDDIAbstractODEProductPackageStandardScheme();
    }
  }

  private static class TDDIAbstractODEProductPackageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDDIAbstractODEProductPackage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDDIAbstractODEProductPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USED_ODEPRODUCT_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.UsedODEProductPackage = new TDDIODEProductPackageUnion();
              struct.UsedODEProductPackage.read(iprot);
              struct.setUsedODEProductPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USED_ODEPRODUCT_PACKAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UsedODEProductPackageType = thriftContract.TDDIODEProductPackageUnionType.findByValue(iprot.readI32());
              struct.setUsedODEProductPackageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDDIAbstractODEProductPackage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UsedODEProductPackage != null) {
        oprot.writeFieldBegin(USED_ODEPRODUCT_PACKAGE_FIELD_DESC);
        struct.UsedODEProductPackage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.UsedODEProductPackageType != null) {
        oprot.writeFieldBegin(USED_ODEPRODUCT_PACKAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.UsedODEProductPackageType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDDIAbstractODEProductPackageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDDIAbstractODEProductPackageTupleScheme getScheme() {
      return new TDDIAbstractODEProductPackageTupleScheme();
    }
  }

  private static class TDDIAbstractODEProductPackageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDDIAbstractODEProductPackage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractODEProductPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUsedODEProductPackage()) {
        optionals.set(0);
      }
      if (struct.isSetUsedODEProductPackageType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUsedODEProductPackage()) {
        struct.UsedODEProductPackage.write(oprot);
      }
      if (struct.isSetUsedODEProductPackageType()) {
        oprot.writeI32(struct.UsedODEProductPackageType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDDIAbstractODEProductPackage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.UsedODEProductPackage = new TDDIODEProductPackageUnion();
        struct.UsedODEProductPackage.read(iprot);
        struct.setUsedODEProductPackageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.UsedODEProductPackageType = thriftContract.TDDIODEProductPackageUnionType.findByValue(iprot.readI32());
        struct.setUsedODEProductPackageTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

