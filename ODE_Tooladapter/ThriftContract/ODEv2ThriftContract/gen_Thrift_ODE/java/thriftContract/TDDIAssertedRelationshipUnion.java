/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIAssertedRelationshipUnion extends org.apache.thrift.TUnion<TDDIAssertedRelationshipUnion, TDDIAssertedRelationshipUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIAssertedRelationshipUnion");
  private static final org.apache.thrift.protocol.TField ASSERTED_ARTIFACT_SUPPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("AssertedArtifactSupport", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ASSERTED_ARTIFACT_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("AssertedArtifactContext", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ASSERTED_INFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("AssertedInference", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ASSERTED_EVIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("AssertedEvidence", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ASSERTED_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("AssertedContext", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ASSERTED_ARTIFACT_SUPPORT((short)1, "AssertedArtifactSupport"),
    ASSERTED_ARTIFACT_CONTEXT((short)2, "AssertedArtifactContext"),
    ASSERTED_INFERENCE((short)3, "AssertedInference"),
    ASSERTED_EVIDENCE((short)4, "AssertedEvidence"),
    ASSERTED_CONTEXT((short)5, "AssertedContext");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ASSERTED_ARTIFACT_SUPPORT
          return ASSERTED_ARTIFACT_SUPPORT;
        case 2: // ASSERTED_ARTIFACT_CONTEXT
          return ASSERTED_ARTIFACT_CONTEXT;
        case 3: // ASSERTED_INFERENCE
          return ASSERTED_INFERENCE;
        case 4: // ASSERTED_EVIDENCE
          return ASSERTED_EVIDENCE;
        case 5: // ASSERTED_CONTEXT
          return ASSERTED_CONTEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ASSERTED_ARTIFACT_SUPPORT, new org.apache.thrift.meta_data.FieldMetaData("AssertedArtifactSupport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssertedArtifactSupport.class)));
    tmpMap.put(_Fields.ASSERTED_ARTIFACT_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("AssertedArtifactContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssertedArtifactContext.class)));
    tmpMap.put(_Fields.ASSERTED_INFERENCE, new org.apache.thrift.meta_data.FieldMetaData("AssertedInference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssertedInference.class)));
    tmpMap.put(_Fields.ASSERTED_EVIDENCE, new org.apache.thrift.meta_data.FieldMetaData("AssertedEvidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssertedEvidence.class)));
    tmpMap.put(_Fields.ASSERTED_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("AssertedContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDDIAssertedContext.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIAssertedRelationshipUnion.class, metaDataMap);
  }

  public TDDIAssertedRelationshipUnion() {
    super();
  }

  public TDDIAssertedRelationshipUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIAssertedRelationshipUnion(TDDIAssertedRelationshipUnion other) {
    super(other);
  }
  public TDDIAssertedRelationshipUnion deepCopy() {
    return new TDDIAssertedRelationshipUnion(this);
  }

  public static TDDIAssertedRelationshipUnion AssertedArtifactSupport(TDDIAssertedArtifactSupport value) {
    TDDIAssertedRelationshipUnion x = new TDDIAssertedRelationshipUnion();
    x.setAssertedArtifactSupport(value);
    return x;
  }

  public static TDDIAssertedRelationshipUnion AssertedArtifactContext(TDDIAssertedArtifactContext value) {
    TDDIAssertedRelationshipUnion x = new TDDIAssertedRelationshipUnion();
    x.setAssertedArtifactContext(value);
    return x;
  }

  public static TDDIAssertedRelationshipUnion AssertedInference(TDDIAssertedInference value) {
    TDDIAssertedRelationshipUnion x = new TDDIAssertedRelationshipUnion();
    x.setAssertedInference(value);
    return x;
  }

  public static TDDIAssertedRelationshipUnion AssertedEvidence(TDDIAssertedEvidence value) {
    TDDIAssertedRelationshipUnion x = new TDDIAssertedRelationshipUnion();
    x.setAssertedEvidence(value);
    return x;
  }

  public static TDDIAssertedRelationshipUnion AssertedContext(TDDIAssertedContext value) {
    TDDIAssertedRelationshipUnion x = new TDDIAssertedRelationshipUnion();
    x.setAssertedContext(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case ASSERTED_ARTIFACT_SUPPORT:
        if (value instanceof TDDIAssertedArtifactSupport) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAssertedArtifactSupport for field 'AssertedArtifactSupport', but got " + value.getClass().getSimpleName());
      case ASSERTED_ARTIFACT_CONTEXT:
        if (value instanceof TDDIAssertedArtifactContext) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAssertedArtifactContext for field 'AssertedArtifactContext', but got " + value.getClass().getSimpleName());
      case ASSERTED_INFERENCE:
        if (value instanceof TDDIAssertedInference) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAssertedInference for field 'AssertedInference', but got " + value.getClass().getSimpleName());
      case ASSERTED_EVIDENCE:
        if (value instanceof TDDIAssertedEvidence) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAssertedEvidence for field 'AssertedEvidence', but got " + value.getClass().getSimpleName());
      case ASSERTED_CONTEXT:
        if (value instanceof TDDIAssertedContext) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAssertedContext for field 'AssertedContext', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case ASSERTED_ARTIFACT_SUPPORT:
          if (field.type == ASSERTED_ARTIFACT_SUPPORT_FIELD_DESC.type) {
            TDDIAssertedArtifactSupport AssertedArtifactSupport;
            AssertedArtifactSupport = new TDDIAssertedArtifactSupport();
            AssertedArtifactSupport.read(iprot);
            return AssertedArtifactSupport;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASSERTED_ARTIFACT_CONTEXT:
          if (field.type == ASSERTED_ARTIFACT_CONTEXT_FIELD_DESC.type) {
            TDDIAssertedArtifactContext AssertedArtifactContext;
            AssertedArtifactContext = new TDDIAssertedArtifactContext();
            AssertedArtifactContext.read(iprot);
            return AssertedArtifactContext;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASSERTED_INFERENCE:
          if (field.type == ASSERTED_INFERENCE_FIELD_DESC.type) {
            TDDIAssertedInference AssertedInference;
            AssertedInference = new TDDIAssertedInference();
            AssertedInference.read(iprot);
            return AssertedInference;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASSERTED_EVIDENCE:
          if (field.type == ASSERTED_EVIDENCE_FIELD_DESC.type) {
            TDDIAssertedEvidence AssertedEvidence;
            AssertedEvidence = new TDDIAssertedEvidence();
            AssertedEvidence.read(iprot);
            return AssertedEvidence;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASSERTED_CONTEXT:
          if (field.type == ASSERTED_CONTEXT_FIELD_DESC.type) {
            TDDIAssertedContext AssertedContext;
            AssertedContext = new TDDIAssertedContext();
            AssertedContext.read(iprot);
            return AssertedContext;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ASSERTED_ARTIFACT_SUPPORT:
        TDDIAssertedArtifactSupport AssertedArtifactSupport = (TDDIAssertedArtifactSupport)value_;
        AssertedArtifactSupport.write(oprot);
        return;
      case ASSERTED_ARTIFACT_CONTEXT:
        TDDIAssertedArtifactContext AssertedArtifactContext = (TDDIAssertedArtifactContext)value_;
        AssertedArtifactContext.write(oprot);
        return;
      case ASSERTED_INFERENCE:
        TDDIAssertedInference AssertedInference = (TDDIAssertedInference)value_;
        AssertedInference.write(oprot);
        return;
      case ASSERTED_EVIDENCE:
        TDDIAssertedEvidence AssertedEvidence = (TDDIAssertedEvidence)value_;
        AssertedEvidence.write(oprot);
        return;
      case ASSERTED_CONTEXT:
        TDDIAssertedContext AssertedContext = (TDDIAssertedContext)value_;
        AssertedContext.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case ASSERTED_ARTIFACT_SUPPORT:
          TDDIAssertedArtifactSupport AssertedArtifactSupport;
          AssertedArtifactSupport = new TDDIAssertedArtifactSupport();
          AssertedArtifactSupport.read(iprot);
          return AssertedArtifactSupport;
        case ASSERTED_ARTIFACT_CONTEXT:
          TDDIAssertedArtifactContext AssertedArtifactContext;
          AssertedArtifactContext = new TDDIAssertedArtifactContext();
          AssertedArtifactContext.read(iprot);
          return AssertedArtifactContext;
        case ASSERTED_INFERENCE:
          TDDIAssertedInference AssertedInference;
          AssertedInference = new TDDIAssertedInference();
          AssertedInference.read(iprot);
          return AssertedInference;
        case ASSERTED_EVIDENCE:
          TDDIAssertedEvidence AssertedEvidence;
          AssertedEvidence = new TDDIAssertedEvidence();
          AssertedEvidence.read(iprot);
          return AssertedEvidence;
        case ASSERTED_CONTEXT:
          TDDIAssertedContext AssertedContext;
          AssertedContext = new TDDIAssertedContext();
          AssertedContext.read(iprot);
          return AssertedContext;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ASSERTED_ARTIFACT_SUPPORT:
        TDDIAssertedArtifactSupport AssertedArtifactSupport = (TDDIAssertedArtifactSupport)value_;
        AssertedArtifactSupport.write(oprot);
        return;
      case ASSERTED_ARTIFACT_CONTEXT:
        TDDIAssertedArtifactContext AssertedArtifactContext = (TDDIAssertedArtifactContext)value_;
        AssertedArtifactContext.write(oprot);
        return;
      case ASSERTED_INFERENCE:
        TDDIAssertedInference AssertedInference = (TDDIAssertedInference)value_;
        AssertedInference.write(oprot);
        return;
      case ASSERTED_EVIDENCE:
        TDDIAssertedEvidence AssertedEvidence = (TDDIAssertedEvidence)value_;
        AssertedEvidence.write(oprot);
        return;
      case ASSERTED_CONTEXT:
        TDDIAssertedContext AssertedContext = (TDDIAssertedContext)value_;
        AssertedContext.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case ASSERTED_ARTIFACT_SUPPORT:
        return ASSERTED_ARTIFACT_SUPPORT_FIELD_DESC;
      case ASSERTED_ARTIFACT_CONTEXT:
        return ASSERTED_ARTIFACT_CONTEXT_FIELD_DESC;
      case ASSERTED_INFERENCE:
        return ASSERTED_INFERENCE_FIELD_DESC;
      case ASSERTED_EVIDENCE:
        return ASSERTED_EVIDENCE_FIELD_DESC;
      case ASSERTED_CONTEXT:
        return ASSERTED_CONTEXT_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIAssertedArtifactSupport getAssertedArtifactSupport() {
    if (getSetField() == _Fields.ASSERTED_ARTIFACT_SUPPORT) {
      return (TDDIAssertedArtifactSupport)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AssertedArtifactSupport' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAssertedArtifactSupport(TDDIAssertedArtifactSupport value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASSERTED_ARTIFACT_SUPPORT;
    value_ = value;
  }

  public TDDIAssertedArtifactContext getAssertedArtifactContext() {
    if (getSetField() == _Fields.ASSERTED_ARTIFACT_CONTEXT) {
      return (TDDIAssertedArtifactContext)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AssertedArtifactContext' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAssertedArtifactContext(TDDIAssertedArtifactContext value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASSERTED_ARTIFACT_CONTEXT;
    value_ = value;
  }

  public TDDIAssertedInference getAssertedInference() {
    if (getSetField() == _Fields.ASSERTED_INFERENCE) {
      return (TDDIAssertedInference)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AssertedInference' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAssertedInference(TDDIAssertedInference value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASSERTED_INFERENCE;
    value_ = value;
  }

  public TDDIAssertedEvidence getAssertedEvidence() {
    if (getSetField() == _Fields.ASSERTED_EVIDENCE) {
      return (TDDIAssertedEvidence)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AssertedEvidence' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAssertedEvidence(TDDIAssertedEvidence value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASSERTED_EVIDENCE;
    value_ = value;
  }

  public TDDIAssertedContext getAssertedContext() {
    if (getSetField() == _Fields.ASSERTED_CONTEXT) {
      return (TDDIAssertedContext)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AssertedContext' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAssertedContext(TDDIAssertedContext value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASSERTED_CONTEXT;
    value_ = value;
  }

  public boolean isSetAssertedArtifactSupport() {
    return setField_ == _Fields.ASSERTED_ARTIFACT_SUPPORT;
  }


  public boolean isSetAssertedArtifactContext() {
    return setField_ == _Fields.ASSERTED_ARTIFACT_CONTEXT;
  }


  public boolean isSetAssertedInference() {
    return setField_ == _Fields.ASSERTED_INFERENCE;
  }


  public boolean isSetAssertedEvidence() {
    return setField_ == _Fields.ASSERTED_EVIDENCE;
  }


  public boolean isSetAssertedContext() {
    return setField_ == _Fields.ASSERTED_CONTEXT;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIAssertedRelationshipUnion) {
      return equals((TDDIAssertedRelationshipUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIAssertedRelationshipUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIAssertedRelationshipUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
