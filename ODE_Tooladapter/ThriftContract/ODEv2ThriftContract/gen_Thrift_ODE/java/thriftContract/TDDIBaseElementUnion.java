/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftContract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TDDIBaseElementUnion extends org.apache.thrift.TUnion<TDDIBaseElementUnion, TDDIBaseElementUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDDIBaseElementUnion");
  private static final org.apache.thrift.protocol.TField FAILURE_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MINIMAL_CUT_SETS_FIELD_DESC = new org.apache.thrift.protocol.TField("MinimalCutSets", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MINIMAL_CUT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("MinimalCutSet", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("Failure", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PROB_DIST_FIELD_DESC = new org.apache.thrift.protocol.TField("ProbDist", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PROB_DIST_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("ProbDistParam", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField FMEAENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("FMEAEntry", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TRANSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("Transition", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("State", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("Cause", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField MEASURE_FIELD_DESC = new org.apache.thrift.protocol.TField("Measure", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField MEASURE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("MeasureType", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_PROCEDURE_FIELD_DESC = new org.apache.thrift.protocol.TField("MaintenanceProcedure", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField STANDARD_FIELD_DESC = new org.apache.thrift.protocol.TField("Standard", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField ASSURANCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("AssuranceLevel", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField HAZARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("HazardType", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField HAZARD_TYPE_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("HazardTypeSystem", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField RISK_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("RiskParameter", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField HAZARD_FIELD_DESC = new org.apache.thrift.protocol.TField("Hazard", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField RISK_ASSESSMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("RiskAssessment", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField MALFUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Malfunction", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField THREAT_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ThreatAgent", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField ATTACKER_GOAL_FIELD_DESC = new org.apache.thrift.protocol.TField("AttackerGoal", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField SECURITY_RISK_FIELD_DESC = new org.apache.thrift.protocol.TField("SecurityRisk", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField ATTACK_FIELD_DESC = new org.apache.thrift.protocol.TField("Attack", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField SECURITY_CAPABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("SecurityCapability", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField ASSET_FIELD_DESC = new org.apache.thrift.protocol.TField("Asset", org.apache.thrift.protocol.TType.STRUCT, (short)27);
  private static final org.apache.thrift.protocol.TField VULNERABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("Vulnerability", org.apache.thrift.protocol.TType.STRUCT, (short)28);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("RequirementSource", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_REQUIREMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityRequirement", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("Configuration", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("System", org.apache.thrift.protocol.TType.STRUCT, (short)32);
  private static final org.apache.thrift.protocol.TField FUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("Function", org.apache.thrift.protocol.TType.STRUCT, (short)33);
  private static final org.apache.thrift.protocol.TField PERF_CHARS_FIELD_DESC = new org.apache.thrift.protocol.TField("PerfChars", org.apache.thrift.protocol.TType.STRUCT, (short)34);
  private static final org.apache.thrift.protocol.TField SIGNAL_FIELD_DESC = new org.apache.thrift.protocol.TField("Signal", org.apache.thrift.protocol.TType.STRUCT, (short)35);
  private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("Context", org.apache.thrift.protocol.TType.STRUCT, (short)36);
  private static final org.apache.thrift.protocol.TField SYSTEM_BOUNDARY_FIELD_DESC = new org.apache.thrift.protocol.TField("SystemBoundary", org.apache.thrift.protocol.TType.STRUCT, (short)37);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("Port", org.apache.thrift.protocol.TType.STRUCT, (short)38);
  private static final org.apache.thrift.protocol.TField LIFECYCLE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("LifecycleCondition", org.apache.thrift.protocol.TType.STRUCT, (short)39);
  private static final org.apache.thrift.protocol.TField DESIGN_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("DesignPackage", org.apache.thrift.protocol.TType.STRUCT, (short)40);
  private static final org.apache.thrift.protocol.TField FAILURE_LOGIC_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("FailureLogicPackage", org.apache.thrift.protocol.TType.STRUCT, (short)41);
  private static final org.apache.thrift.protocol.TField DEPENDABILITY_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("DependabilityPackage", org.apache.thrift.protocol.TType.STRUCT, (short)42);
  private static final org.apache.thrift.protocol.TField REQUIREMENT_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("RequirementPackage", org.apache.thrift.protocol.TType.STRUCT, (short)43);
  private static final org.apache.thrift.protocol.TField DOMAIN_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("DomainPackage", org.apache.thrift.protocol.TType.STRUCT, (short)44);
  private static final org.apache.thrift.protocol.TField HARAPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("HARAPackage", org.apache.thrift.protocol.TType.STRUCT, (short)45);
  private static final org.apache.thrift.protocol.TField TARAPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("TARAPackage", org.apache.thrift.protocol.TType.STRUCT, (short)46);
  private static final org.apache.thrift.protocol.TField DDIPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("DDIPackage", org.apache.thrift.protocol.TType.STRUCT, (short)47);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FAILURE_MODEL((short)1, "FailureModel"),
    MINIMAL_CUT_SETS((short)2, "MinimalCutSets"),
    MINIMAL_CUT_SET((short)3, "MinimalCutSet"),
    FAILURE((short)4, "Failure"),
    PROB_DIST((short)5, "ProbDist"),
    PROB_DIST_PARAM((short)6, "ProbDistParam"),
    FMEAENTRY((short)7, "FMEAEntry"),
    TRANSITION((short)8, "Transition"),
    STATE((short)9, "State"),
    CAUSE((short)10, "Cause"),
    MEASURE((short)11, "Measure"),
    MEASURE_TYPE((short)12, "MeasureType"),
    MAINTENANCE_PROCEDURE((short)13, "MaintenanceProcedure"),
    STANDARD((short)14, "Standard"),
    ASSURANCE_LEVEL((short)15, "AssuranceLevel"),
    HAZARD_TYPE((short)16, "HazardType"),
    HAZARD_TYPE_SYSTEM((short)17, "HazardTypeSystem"),
    RISK_PARAMETER((short)18, "RiskParameter"),
    HAZARD((short)19, "Hazard"),
    RISK_ASSESSMENT((short)20, "RiskAssessment"),
    MALFUNCTION((short)21, "Malfunction"),
    THREAT_AGENT((short)22, "ThreatAgent"),
    ATTACKER_GOAL((short)23, "AttackerGoal"),
    SECURITY_RISK((short)24, "SecurityRisk"),
    ATTACK((short)25, "Attack"),
    SECURITY_CAPABILITY((short)26, "SecurityCapability"),
    ASSET((short)27, "Asset"),
    VULNERABILITY((short)28, "Vulnerability"),
    REQUIREMENT_SOURCE((short)29, "RequirementSource"),
    DEPENDABILITY_REQUIREMENT((short)30, "DependabilityRequirement"),
    CONFIGURATION((short)31, "Configuration"),
    SYSTEM((short)32, "System"),
    FUNCTION((short)33, "Function"),
    PERF_CHARS((short)34, "PerfChars"),
    SIGNAL((short)35, "Signal"),
    CONTEXT((short)36, "Context"),
    SYSTEM_BOUNDARY((short)37, "SystemBoundary"),
    PORT((short)38, "Port"),
    LIFECYCLE_CONDITION((short)39, "LifecycleCondition"),
    DESIGN_PACKAGE((short)40, "DesignPackage"),
    FAILURE_LOGIC_PACKAGE((short)41, "FailureLogicPackage"),
    DEPENDABILITY_PACKAGE((short)42, "DependabilityPackage"),
    REQUIREMENT_PACKAGE((short)43, "RequirementPackage"),
    DOMAIN_PACKAGE((short)44, "DomainPackage"),
    HARAPACKAGE((short)45, "HARAPackage"),
    TARAPACKAGE((short)46, "TARAPackage"),
    DDIPACKAGE((short)47, "DDIPackage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FAILURE_MODEL
          return FAILURE_MODEL;
        case 2: // MINIMAL_CUT_SETS
          return MINIMAL_CUT_SETS;
        case 3: // MINIMAL_CUT_SET
          return MINIMAL_CUT_SET;
        case 4: // FAILURE
          return FAILURE;
        case 5: // PROB_DIST
          return PROB_DIST;
        case 6: // PROB_DIST_PARAM
          return PROB_DIST_PARAM;
        case 7: // FMEAENTRY
          return FMEAENTRY;
        case 8: // TRANSITION
          return TRANSITION;
        case 9: // STATE
          return STATE;
        case 10: // CAUSE
          return CAUSE;
        case 11: // MEASURE
          return MEASURE;
        case 12: // MEASURE_TYPE
          return MEASURE_TYPE;
        case 13: // MAINTENANCE_PROCEDURE
          return MAINTENANCE_PROCEDURE;
        case 14: // STANDARD
          return STANDARD;
        case 15: // ASSURANCE_LEVEL
          return ASSURANCE_LEVEL;
        case 16: // HAZARD_TYPE
          return HAZARD_TYPE;
        case 17: // HAZARD_TYPE_SYSTEM
          return HAZARD_TYPE_SYSTEM;
        case 18: // RISK_PARAMETER
          return RISK_PARAMETER;
        case 19: // HAZARD
          return HAZARD;
        case 20: // RISK_ASSESSMENT
          return RISK_ASSESSMENT;
        case 21: // MALFUNCTION
          return MALFUNCTION;
        case 22: // THREAT_AGENT
          return THREAT_AGENT;
        case 23: // ATTACKER_GOAL
          return ATTACKER_GOAL;
        case 24: // SECURITY_RISK
          return SECURITY_RISK;
        case 25: // ATTACK
          return ATTACK;
        case 26: // SECURITY_CAPABILITY
          return SECURITY_CAPABILITY;
        case 27: // ASSET
          return ASSET;
        case 28: // VULNERABILITY
          return VULNERABILITY;
        case 29: // REQUIREMENT_SOURCE
          return REQUIREMENT_SOURCE;
        case 30: // DEPENDABILITY_REQUIREMENT
          return DEPENDABILITY_REQUIREMENT;
        case 31: // CONFIGURATION
          return CONFIGURATION;
        case 32: // SYSTEM
          return SYSTEM;
        case 33: // FUNCTION
          return FUNCTION;
        case 34: // PERF_CHARS
          return PERF_CHARS;
        case 35: // SIGNAL
          return SIGNAL;
        case 36: // CONTEXT
          return CONTEXT;
        case 37: // SYSTEM_BOUNDARY
          return SYSTEM_BOUNDARY;
        case 38: // PORT
          return PORT;
        case 39: // LIFECYCLE_CONDITION
          return LIFECYCLE_CONDITION;
        case 40: // DESIGN_PACKAGE
          return DESIGN_PACKAGE;
        case 41: // FAILURE_LOGIC_PACKAGE
          return FAILURE_LOGIC_PACKAGE;
        case 42: // DEPENDABILITY_PACKAGE
          return DEPENDABILITY_PACKAGE;
        case 43: // REQUIREMENT_PACKAGE
          return REQUIREMENT_PACKAGE;
        case 44: // DOMAIN_PACKAGE
          return DOMAIN_PACKAGE;
        case 45: // HARAPACKAGE
          return HARAPACKAGE;
        case 46: // TARAPACKAGE
          return TARAPACKAGE;
        case 47: // DDIPACKAGE
          return DDIPACKAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FAILURE_MODEL, new org.apache.thrift.meta_data.FieldMetaData("FailureModel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIFailureModel")));
    tmpMap.put(_Fields.MINIMAL_CUT_SETS, new org.apache.thrift.meta_data.FieldMetaData("MinimalCutSets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIMinimalCutSets")));
    tmpMap.put(_Fields.MINIMAL_CUT_SET, new org.apache.thrift.meta_data.FieldMetaData("MinimalCutSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIMinimalCutSet")));
    tmpMap.put(_Fields.FAILURE, new org.apache.thrift.meta_data.FieldMetaData("Failure", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractFailure")));
    tmpMap.put(_Fields.PROB_DIST, new org.apache.thrift.meta_data.FieldMetaData("ProbDist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIProbDist")));
    tmpMap.put(_Fields.PROB_DIST_PARAM, new org.apache.thrift.meta_data.FieldMetaData("ProbDistParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIProbDistParam")));
    tmpMap.put(_Fields.FMEAENTRY, new org.apache.thrift.meta_data.FieldMetaData("FMEAEntry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractFMEAEntry")));
    tmpMap.put(_Fields.TRANSITION, new org.apache.thrift.meta_data.FieldMetaData("Transition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDITransition")));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("State", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIState")));
    tmpMap.put(_Fields.CAUSE, new org.apache.thrift.meta_data.FieldMetaData("Cause", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractCause")));
    tmpMap.put(_Fields.MEASURE, new org.apache.thrift.meta_data.FieldMetaData("Measure", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractMeasure")));
    tmpMap.put(_Fields.MEASURE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("MeasureType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIMeasureType")));
    tmpMap.put(_Fields.MAINTENANCE_PROCEDURE, new org.apache.thrift.meta_data.FieldMetaData("MaintenanceProcedure", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIMaintenanceProcedure")));
    tmpMap.put(_Fields.STANDARD, new org.apache.thrift.meta_data.FieldMetaData("Standard", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractStandard")));
    tmpMap.put(_Fields.ASSURANCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("AssuranceLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAssuranceLevel")));
    tmpMap.put(_Fields.HAZARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("HazardType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIHazardType")));
    tmpMap.put(_Fields.HAZARD_TYPE_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("HazardTypeSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIHazardTypeSystem")));
    tmpMap.put(_Fields.RISK_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("RiskParameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractRiskParameter")));
    tmpMap.put(_Fields.HAZARD, new org.apache.thrift.meta_data.FieldMetaData("Hazard", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIHazard")));
    tmpMap.put(_Fields.RISK_ASSESSMENT, new org.apache.thrift.meta_data.FieldMetaData("RiskAssessment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIRiskAssessment")));
    tmpMap.put(_Fields.MALFUNCTION, new org.apache.thrift.meta_data.FieldMetaData("Malfunction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIMalfunction")));
    tmpMap.put(_Fields.THREAT_AGENT, new org.apache.thrift.meta_data.FieldMetaData("ThreatAgent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractThreatAgent")));
    tmpMap.put(_Fields.ATTACKER_GOAL, new org.apache.thrift.meta_data.FieldMetaData("AttackerGoal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAttackerGoal")));
    tmpMap.put(_Fields.SECURITY_RISK, new org.apache.thrift.meta_data.FieldMetaData("SecurityRisk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDISecurityRisk")));
    tmpMap.put(_Fields.ATTACK, new org.apache.thrift.meta_data.FieldMetaData("Attack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractAttack")));
    tmpMap.put(_Fields.SECURITY_CAPABILITY, new org.apache.thrift.meta_data.FieldMetaData("SecurityCapability", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDISecurityCapability")));
    tmpMap.put(_Fields.ASSET, new org.apache.thrift.meta_data.FieldMetaData("Asset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractAsset")));
    tmpMap.put(_Fields.VULNERABILITY, new org.apache.thrift.meta_data.FieldMetaData("Vulnerability", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIVulnerability")));
    tmpMap.put(_Fields.REQUIREMENT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("RequirementSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractRequirementSource")));
    tmpMap.put(_Fields.DEPENDABILITY_REQUIREMENT, new org.apache.thrift.meta_data.FieldMetaData("DependabilityRequirement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractDependabilityRequirement")));
    tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("Configuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIConfiguration")));
    tmpMap.put(_Fields.SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("System", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractSystem")));
    tmpMap.put(_Fields.FUNCTION, new org.apache.thrift.meta_data.FieldMetaData("Function", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIAbstractFunction")));
    tmpMap.put(_Fields.PERF_CHARS, new org.apache.thrift.meta_data.FieldMetaData("PerfChars", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIPerfChars")));
    tmpMap.put(_Fields.SIGNAL, new org.apache.thrift.meta_data.FieldMetaData("Signal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDISignal")));
    tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("Context", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIContext")));
    tmpMap.put(_Fields.SYSTEM_BOUNDARY, new org.apache.thrift.meta_data.FieldMetaData("SystemBoundary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDISystemBoundary")));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("Port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIPort")));
    tmpMap.put(_Fields.LIFECYCLE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("LifecycleCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDILifecycleCondition")));
    tmpMap.put(_Fields.DESIGN_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("DesignPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIDesignPackage")));
    tmpMap.put(_Fields.FAILURE_LOGIC_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("FailureLogicPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIFailureLogicPackage")));
    tmpMap.put(_Fields.DEPENDABILITY_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("DependabilityPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIDependabilityPackage")));
    tmpMap.put(_Fields.REQUIREMENT_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("RequirementPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIRequirementPackage")));
    tmpMap.put(_Fields.DOMAIN_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("DomainPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIDomainPackage")));
    tmpMap.put(_Fields.HARAPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("HARAPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIHARAPackage")));
    tmpMap.put(_Fields.TARAPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("TARAPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDITARAPackage")));
    tmpMap.put(_Fields.DDIPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("DDIPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TDDIDDIPackage")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDDIBaseElementUnion.class, metaDataMap);
  }

  public TDDIBaseElementUnion() {
    super();
  }

  public TDDIBaseElementUnion(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TDDIBaseElementUnion(TDDIBaseElementUnion other) {
    super(other);
  }
  public TDDIBaseElementUnion deepCopy() {
    return new TDDIBaseElementUnion(this);
  }

  public static TDDIBaseElementUnion FailureModel(TDDIFailureModel value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setFailureModel(value);
    return x;
  }

  public static TDDIBaseElementUnion MinimalCutSets(TDDIMinimalCutSets value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setMinimalCutSets(value);
    return x;
  }

  public static TDDIBaseElementUnion MinimalCutSet(TDDIMinimalCutSet value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setMinimalCutSet(value);
    return x;
  }

  public static TDDIBaseElementUnion Failure(TDDIAbstractFailure value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setFailure(value);
    return x;
  }

  public static TDDIBaseElementUnion ProbDist(TDDIProbDist value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setProbDist(value);
    return x;
  }

  public static TDDIBaseElementUnion ProbDistParam(TDDIProbDistParam value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setProbDistParam(value);
    return x;
  }

  public static TDDIBaseElementUnion FMEAEntry(TDDIAbstractFMEAEntry value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setFMEAEntry(value);
    return x;
  }

  public static TDDIBaseElementUnion Transition(TDDITransition value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setTransition(value);
    return x;
  }

  public static TDDIBaseElementUnion State(TDDIState value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setState(value);
    return x;
  }

  public static TDDIBaseElementUnion Cause(TDDIAbstractCause value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setCause(value);
    return x;
  }

  public static TDDIBaseElementUnion Measure(TDDIAbstractMeasure value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setMeasure(value);
    return x;
  }

  public static TDDIBaseElementUnion MeasureType(TDDIMeasureType value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setMeasureType(value);
    return x;
  }

  public static TDDIBaseElementUnion MaintenanceProcedure(TDDIMaintenanceProcedure value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setMaintenanceProcedure(value);
    return x;
  }

  public static TDDIBaseElementUnion Standard(TDDIAbstractStandard value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setStandard(value);
    return x;
  }

  public static TDDIBaseElementUnion AssuranceLevel(TDDIAssuranceLevel value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setAssuranceLevel(value);
    return x;
  }

  public static TDDIBaseElementUnion HazardType(TDDIHazardType value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setHazardType(value);
    return x;
  }

  public static TDDIBaseElementUnion HazardTypeSystem(TDDIHazardTypeSystem value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setHazardTypeSystem(value);
    return x;
  }

  public static TDDIBaseElementUnion RiskParameter(TDDIAbstractRiskParameter value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setRiskParameter(value);
    return x;
  }

  public static TDDIBaseElementUnion Hazard(TDDIHazard value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setHazard(value);
    return x;
  }

  public static TDDIBaseElementUnion RiskAssessment(TDDIRiskAssessment value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setRiskAssessment(value);
    return x;
  }

  public static TDDIBaseElementUnion Malfunction(TDDIMalfunction value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setMalfunction(value);
    return x;
  }

  public static TDDIBaseElementUnion ThreatAgent(TDDIAbstractThreatAgent value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setThreatAgent(value);
    return x;
  }

  public static TDDIBaseElementUnion AttackerGoal(TDDIAttackerGoal value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setAttackerGoal(value);
    return x;
  }

  public static TDDIBaseElementUnion SecurityRisk(TDDISecurityRisk value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setSecurityRisk(value);
    return x;
  }

  public static TDDIBaseElementUnion Attack(TDDIAbstractAttack value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setAttack(value);
    return x;
  }

  public static TDDIBaseElementUnion SecurityCapability(TDDISecurityCapability value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setSecurityCapability(value);
    return x;
  }

  public static TDDIBaseElementUnion Asset(TDDIAbstractAsset value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setAsset(value);
    return x;
  }

  public static TDDIBaseElementUnion Vulnerability(TDDIVulnerability value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setVulnerability(value);
    return x;
  }

  public static TDDIBaseElementUnion RequirementSource(TDDIAbstractRequirementSource value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setRequirementSource(value);
    return x;
  }

  public static TDDIBaseElementUnion DependabilityRequirement(TDDIAbstractDependabilityRequirement value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setDependabilityRequirement(value);
    return x;
  }

  public static TDDIBaseElementUnion Configuration(TDDIConfiguration value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setConfiguration(value);
    return x;
  }

  public static TDDIBaseElementUnion System(TDDIAbstractSystem value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setSystem(value);
    return x;
  }

  public static TDDIBaseElementUnion Function(TDDIAbstractFunction value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setFunction(value);
    return x;
  }

  public static TDDIBaseElementUnion PerfChars(TDDIPerfChars value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setPerfChars(value);
    return x;
  }

  public static TDDIBaseElementUnion Signal(TDDISignal value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setSignal(value);
    return x;
  }

  public static TDDIBaseElementUnion Context(TDDIContext value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setContext(value);
    return x;
  }

  public static TDDIBaseElementUnion SystemBoundary(TDDISystemBoundary value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setSystemBoundary(value);
    return x;
  }

  public static TDDIBaseElementUnion Port(TDDIPort value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setPort(value);
    return x;
  }

  public static TDDIBaseElementUnion LifecycleCondition(TDDILifecycleCondition value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setLifecycleCondition(value);
    return x;
  }

  public static TDDIBaseElementUnion DesignPackage(TDDIDesignPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setDesignPackage(value);
    return x;
  }

  public static TDDIBaseElementUnion FailureLogicPackage(TDDIFailureLogicPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setFailureLogicPackage(value);
    return x;
  }

  public static TDDIBaseElementUnion DependabilityPackage(TDDIDependabilityPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setDependabilityPackage(value);
    return x;
  }

  public static TDDIBaseElementUnion RequirementPackage(TDDIRequirementPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setRequirementPackage(value);
    return x;
  }

  public static TDDIBaseElementUnion DomainPackage(TDDIDomainPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setDomainPackage(value);
    return x;
  }

  public static TDDIBaseElementUnion HARAPackage(TDDIHARAPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setHARAPackage(value);
    return x;
  }

  public static TDDIBaseElementUnion TARAPackage(TDDITARAPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setTARAPackage(value);
    return x;
  }

  public static TDDIBaseElementUnion DDIPackage(TDDIDDIPackage value) {
    TDDIBaseElementUnion x = new TDDIBaseElementUnion();
    x.setDDIPackage(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case FAILURE_MODEL:
        if (value instanceof TDDIFailureModel) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIFailureModel for field 'FailureModel', but got " + value.getClass().getSimpleName());
      case MINIMAL_CUT_SETS:
        if (value instanceof TDDIMinimalCutSets) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIMinimalCutSets for field 'MinimalCutSets', but got " + value.getClass().getSimpleName());
      case MINIMAL_CUT_SET:
        if (value instanceof TDDIMinimalCutSet) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIMinimalCutSet for field 'MinimalCutSet', but got " + value.getClass().getSimpleName());
      case FAILURE:
        if (value instanceof TDDIAbstractFailure) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractFailure for field 'Failure', but got " + value.getClass().getSimpleName());
      case PROB_DIST:
        if (value instanceof TDDIProbDist) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIProbDist for field 'ProbDist', but got " + value.getClass().getSimpleName());
      case PROB_DIST_PARAM:
        if (value instanceof TDDIProbDistParam) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIProbDistParam for field 'ProbDistParam', but got " + value.getClass().getSimpleName());
      case FMEAENTRY:
        if (value instanceof TDDIAbstractFMEAEntry) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractFMEAEntry for field 'FMEAEntry', but got " + value.getClass().getSimpleName());
      case TRANSITION:
        if (value instanceof TDDITransition) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDITransition for field 'Transition', but got " + value.getClass().getSimpleName());
      case STATE:
        if (value instanceof TDDIState) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIState for field 'State', but got " + value.getClass().getSimpleName());
      case CAUSE:
        if (value instanceof TDDIAbstractCause) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractCause for field 'Cause', but got " + value.getClass().getSimpleName());
      case MEASURE:
        if (value instanceof TDDIAbstractMeasure) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractMeasure for field 'Measure', but got " + value.getClass().getSimpleName());
      case MEASURE_TYPE:
        if (value instanceof TDDIMeasureType) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIMeasureType for field 'MeasureType', but got " + value.getClass().getSimpleName());
      case MAINTENANCE_PROCEDURE:
        if (value instanceof TDDIMaintenanceProcedure) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIMaintenanceProcedure for field 'MaintenanceProcedure', but got " + value.getClass().getSimpleName());
      case STANDARD:
        if (value instanceof TDDIAbstractStandard) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractStandard for field 'Standard', but got " + value.getClass().getSimpleName());
      case ASSURANCE_LEVEL:
        if (value instanceof TDDIAssuranceLevel) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAssuranceLevel for field 'AssuranceLevel', but got " + value.getClass().getSimpleName());
      case HAZARD_TYPE:
        if (value instanceof TDDIHazardType) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIHazardType for field 'HazardType', but got " + value.getClass().getSimpleName());
      case HAZARD_TYPE_SYSTEM:
        if (value instanceof TDDIHazardTypeSystem) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIHazardTypeSystem for field 'HazardTypeSystem', but got " + value.getClass().getSimpleName());
      case RISK_PARAMETER:
        if (value instanceof TDDIAbstractRiskParameter) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractRiskParameter for field 'RiskParameter', but got " + value.getClass().getSimpleName());
      case HAZARD:
        if (value instanceof TDDIHazard) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIHazard for field 'Hazard', but got " + value.getClass().getSimpleName());
      case RISK_ASSESSMENT:
        if (value instanceof TDDIRiskAssessment) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIRiskAssessment for field 'RiskAssessment', but got " + value.getClass().getSimpleName());
      case MALFUNCTION:
        if (value instanceof TDDIMalfunction) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIMalfunction for field 'Malfunction', but got " + value.getClass().getSimpleName());
      case THREAT_AGENT:
        if (value instanceof TDDIAbstractThreatAgent) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractThreatAgent for field 'ThreatAgent', but got " + value.getClass().getSimpleName());
      case ATTACKER_GOAL:
        if (value instanceof TDDIAttackerGoal) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAttackerGoal for field 'AttackerGoal', but got " + value.getClass().getSimpleName());
      case SECURITY_RISK:
        if (value instanceof TDDISecurityRisk) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDISecurityRisk for field 'SecurityRisk', but got " + value.getClass().getSimpleName());
      case ATTACK:
        if (value instanceof TDDIAbstractAttack) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractAttack for field 'Attack', but got " + value.getClass().getSimpleName());
      case SECURITY_CAPABILITY:
        if (value instanceof TDDISecurityCapability) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDISecurityCapability for field 'SecurityCapability', but got " + value.getClass().getSimpleName());
      case ASSET:
        if (value instanceof TDDIAbstractAsset) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractAsset for field 'Asset', but got " + value.getClass().getSimpleName());
      case VULNERABILITY:
        if (value instanceof TDDIVulnerability) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIVulnerability for field 'Vulnerability', but got " + value.getClass().getSimpleName());
      case REQUIREMENT_SOURCE:
        if (value instanceof TDDIAbstractRequirementSource) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractRequirementSource for field 'RequirementSource', but got " + value.getClass().getSimpleName());
      case DEPENDABILITY_REQUIREMENT:
        if (value instanceof TDDIAbstractDependabilityRequirement) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractDependabilityRequirement for field 'DependabilityRequirement', but got " + value.getClass().getSimpleName());
      case CONFIGURATION:
        if (value instanceof TDDIConfiguration) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIConfiguration for field 'Configuration', but got " + value.getClass().getSimpleName());
      case SYSTEM:
        if (value instanceof TDDIAbstractSystem) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractSystem for field 'System', but got " + value.getClass().getSimpleName());
      case FUNCTION:
        if (value instanceof TDDIAbstractFunction) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIAbstractFunction for field 'Function', but got " + value.getClass().getSimpleName());
      case PERF_CHARS:
        if (value instanceof TDDIPerfChars) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIPerfChars for field 'PerfChars', but got " + value.getClass().getSimpleName());
      case SIGNAL:
        if (value instanceof TDDISignal) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDISignal for field 'Signal', but got " + value.getClass().getSimpleName());
      case CONTEXT:
        if (value instanceof TDDIContext) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIContext for field 'Context', but got " + value.getClass().getSimpleName());
      case SYSTEM_BOUNDARY:
        if (value instanceof TDDISystemBoundary) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDISystemBoundary for field 'SystemBoundary', but got " + value.getClass().getSimpleName());
      case PORT:
        if (value instanceof TDDIPort) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIPort for field 'Port', but got " + value.getClass().getSimpleName());
      case LIFECYCLE_CONDITION:
        if (value instanceof TDDILifecycleCondition) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDILifecycleCondition for field 'LifecycleCondition', but got " + value.getClass().getSimpleName());
      case DESIGN_PACKAGE:
        if (value instanceof TDDIDesignPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIDesignPackage for field 'DesignPackage', but got " + value.getClass().getSimpleName());
      case FAILURE_LOGIC_PACKAGE:
        if (value instanceof TDDIFailureLogicPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIFailureLogicPackage for field 'FailureLogicPackage', but got " + value.getClass().getSimpleName());
      case DEPENDABILITY_PACKAGE:
        if (value instanceof TDDIDependabilityPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIDependabilityPackage for field 'DependabilityPackage', but got " + value.getClass().getSimpleName());
      case REQUIREMENT_PACKAGE:
        if (value instanceof TDDIRequirementPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIRequirementPackage for field 'RequirementPackage', but got " + value.getClass().getSimpleName());
      case DOMAIN_PACKAGE:
        if (value instanceof TDDIDomainPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIDomainPackage for field 'DomainPackage', but got " + value.getClass().getSimpleName());
      case HARAPACKAGE:
        if (value instanceof TDDIHARAPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIHARAPackage for field 'HARAPackage', but got " + value.getClass().getSimpleName());
      case TARAPACKAGE:
        if (value instanceof TDDITARAPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDITARAPackage for field 'TARAPackage', but got " + value.getClass().getSimpleName());
      case DDIPACKAGE:
        if (value instanceof TDDIDDIPackage) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TDDIDDIPackage for field 'DDIPackage', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case FAILURE_MODEL:
          if (field.type == FAILURE_MODEL_FIELD_DESC.type) {
            TDDIFailureModel FailureModel;
            FailureModel = new TDDIFailureModel();
            FailureModel.read(iprot);
            return FailureModel;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MINIMAL_CUT_SETS:
          if (field.type == MINIMAL_CUT_SETS_FIELD_DESC.type) {
            TDDIMinimalCutSets MinimalCutSets;
            MinimalCutSets = new TDDIMinimalCutSets();
            MinimalCutSets.read(iprot);
            return MinimalCutSets;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MINIMAL_CUT_SET:
          if (field.type == MINIMAL_CUT_SET_FIELD_DESC.type) {
            TDDIMinimalCutSet MinimalCutSet;
            MinimalCutSet = new TDDIMinimalCutSet();
            MinimalCutSet.read(iprot);
            return MinimalCutSet;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FAILURE:
          if (field.type == FAILURE_FIELD_DESC.type) {
            TDDIAbstractFailure Failure;
            Failure = new TDDIAbstractFailure();
            Failure.read(iprot);
            return Failure;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PROB_DIST:
          if (field.type == PROB_DIST_FIELD_DESC.type) {
            TDDIProbDist ProbDist;
            ProbDist = new TDDIProbDist();
            ProbDist.read(iprot);
            return ProbDist;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PROB_DIST_PARAM:
          if (field.type == PROB_DIST_PARAM_FIELD_DESC.type) {
            TDDIProbDistParam ProbDistParam;
            ProbDistParam = new TDDIProbDistParam();
            ProbDistParam.read(iprot);
            return ProbDistParam;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FMEAENTRY:
          if (field.type == FMEAENTRY_FIELD_DESC.type) {
            TDDIAbstractFMEAEntry FMEAEntry;
            FMEAEntry = new TDDIAbstractFMEAEntry();
            FMEAEntry.read(iprot);
            return FMEAEntry;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TRANSITION:
          if (field.type == TRANSITION_FIELD_DESC.type) {
            TDDITransition Transition;
            Transition = new TDDITransition();
            Transition.read(iprot);
            return Transition;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STATE:
          if (field.type == STATE_FIELD_DESC.type) {
            TDDIState State;
            State = new TDDIState();
            State.read(iprot);
            return State;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CAUSE:
          if (field.type == CAUSE_FIELD_DESC.type) {
            TDDIAbstractCause Cause;
            Cause = new TDDIAbstractCause();
            Cause.read(iprot);
            return Cause;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MEASURE:
          if (field.type == MEASURE_FIELD_DESC.type) {
            TDDIAbstractMeasure Measure;
            Measure = new TDDIAbstractMeasure();
            Measure.read(iprot);
            return Measure;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MEASURE_TYPE:
          if (field.type == MEASURE_TYPE_FIELD_DESC.type) {
            TDDIMeasureType MeasureType;
            MeasureType = new TDDIMeasureType();
            MeasureType.read(iprot);
            return MeasureType;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MAINTENANCE_PROCEDURE:
          if (field.type == MAINTENANCE_PROCEDURE_FIELD_DESC.type) {
            TDDIMaintenanceProcedure MaintenanceProcedure;
            MaintenanceProcedure = new TDDIMaintenanceProcedure();
            MaintenanceProcedure.read(iprot);
            return MaintenanceProcedure;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STANDARD:
          if (field.type == STANDARD_FIELD_DESC.type) {
            TDDIAbstractStandard Standard;
            Standard = new TDDIAbstractStandard();
            Standard.read(iprot);
            return Standard;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASSURANCE_LEVEL:
          if (field.type == ASSURANCE_LEVEL_FIELD_DESC.type) {
            TDDIAssuranceLevel AssuranceLevel;
            AssuranceLevel = new TDDIAssuranceLevel();
            AssuranceLevel.read(iprot);
            return AssuranceLevel;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HAZARD_TYPE:
          if (field.type == HAZARD_TYPE_FIELD_DESC.type) {
            TDDIHazardType HazardType;
            HazardType = new TDDIHazardType();
            HazardType.read(iprot);
            return HazardType;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HAZARD_TYPE_SYSTEM:
          if (field.type == HAZARD_TYPE_SYSTEM_FIELD_DESC.type) {
            TDDIHazardTypeSystem HazardTypeSystem;
            HazardTypeSystem = new TDDIHazardTypeSystem();
            HazardTypeSystem.read(iprot);
            return HazardTypeSystem;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RISK_PARAMETER:
          if (field.type == RISK_PARAMETER_FIELD_DESC.type) {
            TDDIAbstractRiskParameter RiskParameter;
            RiskParameter = new TDDIAbstractRiskParameter();
            RiskParameter.read(iprot);
            return RiskParameter;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HAZARD:
          if (field.type == HAZARD_FIELD_DESC.type) {
            TDDIHazard Hazard;
            Hazard = new TDDIHazard();
            Hazard.read(iprot);
            return Hazard;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RISK_ASSESSMENT:
          if (field.type == RISK_ASSESSMENT_FIELD_DESC.type) {
            TDDIRiskAssessment RiskAssessment;
            RiskAssessment = new TDDIRiskAssessment();
            RiskAssessment.read(iprot);
            return RiskAssessment;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MALFUNCTION:
          if (field.type == MALFUNCTION_FIELD_DESC.type) {
            TDDIMalfunction Malfunction;
            Malfunction = new TDDIMalfunction();
            Malfunction.read(iprot);
            return Malfunction;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case THREAT_AGENT:
          if (field.type == THREAT_AGENT_FIELD_DESC.type) {
            TDDIAbstractThreatAgent ThreatAgent;
            ThreatAgent = new TDDIAbstractThreatAgent();
            ThreatAgent.read(iprot);
            return ThreatAgent;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ATTACKER_GOAL:
          if (field.type == ATTACKER_GOAL_FIELD_DESC.type) {
            TDDIAttackerGoal AttackerGoal;
            AttackerGoal = new TDDIAttackerGoal();
            AttackerGoal.read(iprot);
            return AttackerGoal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SECURITY_RISK:
          if (field.type == SECURITY_RISK_FIELD_DESC.type) {
            TDDISecurityRisk SecurityRisk;
            SecurityRisk = new TDDISecurityRisk();
            SecurityRisk.read(iprot);
            return SecurityRisk;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ATTACK:
          if (field.type == ATTACK_FIELD_DESC.type) {
            TDDIAbstractAttack Attack;
            Attack = new TDDIAbstractAttack();
            Attack.read(iprot);
            return Attack;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SECURITY_CAPABILITY:
          if (field.type == SECURITY_CAPABILITY_FIELD_DESC.type) {
            TDDISecurityCapability SecurityCapability;
            SecurityCapability = new TDDISecurityCapability();
            SecurityCapability.read(iprot);
            return SecurityCapability;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ASSET:
          if (field.type == ASSET_FIELD_DESC.type) {
            TDDIAbstractAsset Asset;
            Asset = new TDDIAbstractAsset();
            Asset.read(iprot);
            return Asset;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case VULNERABILITY:
          if (field.type == VULNERABILITY_FIELD_DESC.type) {
            TDDIVulnerability Vulnerability;
            Vulnerability = new TDDIVulnerability();
            Vulnerability.read(iprot);
            return Vulnerability;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REQUIREMENT_SOURCE:
          if (field.type == REQUIREMENT_SOURCE_FIELD_DESC.type) {
            TDDIAbstractRequirementSource RequirementSource;
            RequirementSource = new TDDIAbstractRequirementSource();
            RequirementSource.read(iprot);
            return RequirementSource;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEPENDABILITY_REQUIREMENT:
          if (field.type == DEPENDABILITY_REQUIREMENT_FIELD_DESC.type) {
            TDDIAbstractDependabilityRequirement DependabilityRequirement;
            DependabilityRequirement = new TDDIAbstractDependabilityRequirement();
            DependabilityRequirement.read(iprot);
            return DependabilityRequirement;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONFIGURATION:
          if (field.type == CONFIGURATION_FIELD_DESC.type) {
            TDDIConfiguration Configuration;
            Configuration = new TDDIConfiguration();
            Configuration.read(iprot);
            return Configuration;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SYSTEM:
          if (field.type == SYSTEM_FIELD_DESC.type) {
            TDDIAbstractSystem System;
            System = new TDDIAbstractSystem();
            System.read(iprot);
            return System;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FUNCTION:
          if (field.type == FUNCTION_FIELD_DESC.type) {
            TDDIAbstractFunction Function;
            Function = new TDDIAbstractFunction();
            Function.read(iprot);
            return Function;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PERF_CHARS:
          if (field.type == PERF_CHARS_FIELD_DESC.type) {
            TDDIPerfChars PerfChars;
            PerfChars = new TDDIPerfChars();
            PerfChars.read(iprot);
            return PerfChars;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SIGNAL:
          if (field.type == SIGNAL_FIELD_DESC.type) {
            TDDISignal Signal;
            Signal = new TDDISignal();
            Signal.read(iprot);
            return Signal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONTEXT:
          if (field.type == CONTEXT_FIELD_DESC.type) {
            TDDIContext Context;
            Context = new TDDIContext();
            Context.read(iprot);
            return Context;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SYSTEM_BOUNDARY:
          if (field.type == SYSTEM_BOUNDARY_FIELD_DESC.type) {
            TDDISystemBoundary SystemBoundary;
            SystemBoundary = new TDDISystemBoundary();
            SystemBoundary.read(iprot);
            return SystemBoundary;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PORT:
          if (field.type == PORT_FIELD_DESC.type) {
            TDDIPort Port;
            Port = new TDDIPort();
            Port.read(iprot);
            return Port;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LIFECYCLE_CONDITION:
          if (field.type == LIFECYCLE_CONDITION_FIELD_DESC.type) {
            TDDILifecycleCondition LifecycleCondition;
            LifecycleCondition = new TDDILifecycleCondition();
            LifecycleCondition.read(iprot);
            return LifecycleCondition;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DESIGN_PACKAGE:
          if (field.type == DESIGN_PACKAGE_FIELD_DESC.type) {
            TDDIDesignPackage DesignPackage;
            DesignPackage = new TDDIDesignPackage();
            DesignPackage.read(iprot);
            return DesignPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FAILURE_LOGIC_PACKAGE:
          if (field.type == FAILURE_LOGIC_PACKAGE_FIELD_DESC.type) {
            TDDIFailureLogicPackage FailureLogicPackage;
            FailureLogicPackage = new TDDIFailureLogicPackage();
            FailureLogicPackage.read(iprot);
            return FailureLogicPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEPENDABILITY_PACKAGE:
          if (field.type == DEPENDABILITY_PACKAGE_FIELD_DESC.type) {
            TDDIDependabilityPackage DependabilityPackage;
            DependabilityPackage = new TDDIDependabilityPackage();
            DependabilityPackage.read(iprot);
            return DependabilityPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REQUIREMENT_PACKAGE:
          if (field.type == REQUIREMENT_PACKAGE_FIELD_DESC.type) {
            TDDIRequirementPackage RequirementPackage;
            RequirementPackage = new TDDIRequirementPackage();
            RequirementPackage.read(iprot);
            return RequirementPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOMAIN_PACKAGE:
          if (field.type == DOMAIN_PACKAGE_FIELD_DESC.type) {
            TDDIDomainPackage DomainPackage;
            DomainPackage = new TDDIDomainPackage();
            DomainPackage.read(iprot);
            return DomainPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HARAPACKAGE:
          if (field.type == HARAPACKAGE_FIELD_DESC.type) {
            TDDIHARAPackage HARAPackage;
            HARAPackage = new TDDIHARAPackage();
            HARAPackage.read(iprot);
            return HARAPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TARAPACKAGE:
          if (field.type == TARAPACKAGE_FIELD_DESC.type) {
            TDDITARAPackage TARAPackage;
            TARAPackage = new TDDITARAPackage();
            TARAPackage.read(iprot);
            return TARAPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DDIPACKAGE:
          if (field.type == DDIPACKAGE_FIELD_DESC.type) {
            TDDIDDIPackage DDIPackage;
            DDIPackage = new TDDIDDIPackage();
            DDIPackage.read(iprot);
            return DDIPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case FAILURE_MODEL:
        TDDIFailureModel FailureModel = (TDDIFailureModel)value_;
        FailureModel.write(oprot);
        return;
      case MINIMAL_CUT_SETS:
        TDDIMinimalCutSets MinimalCutSets = (TDDIMinimalCutSets)value_;
        MinimalCutSets.write(oprot);
        return;
      case MINIMAL_CUT_SET:
        TDDIMinimalCutSet MinimalCutSet = (TDDIMinimalCutSet)value_;
        MinimalCutSet.write(oprot);
        return;
      case FAILURE:
        TDDIAbstractFailure Failure = (TDDIAbstractFailure)value_;
        Failure.write(oprot);
        return;
      case PROB_DIST:
        TDDIProbDist ProbDist = (TDDIProbDist)value_;
        ProbDist.write(oprot);
        return;
      case PROB_DIST_PARAM:
        TDDIProbDistParam ProbDistParam = (TDDIProbDistParam)value_;
        ProbDistParam.write(oprot);
        return;
      case FMEAENTRY:
        TDDIAbstractFMEAEntry FMEAEntry = (TDDIAbstractFMEAEntry)value_;
        FMEAEntry.write(oprot);
        return;
      case TRANSITION:
        TDDITransition Transition = (TDDITransition)value_;
        Transition.write(oprot);
        return;
      case STATE:
        TDDIState State = (TDDIState)value_;
        State.write(oprot);
        return;
      case CAUSE:
        TDDIAbstractCause Cause = (TDDIAbstractCause)value_;
        Cause.write(oprot);
        return;
      case MEASURE:
        TDDIAbstractMeasure Measure = (TDDIAbstractMeasure)value_;
        Measure.write(oprot);
        return;
      case MEASURE_TYPE:
        TDDIMeasureType MeasureType = (TDDIMeasureType)value_;
        MeasureType.write(oprot);
        return;
      case MAINTENANCE_PROCEDURE:
        TDDIMaintenanceProcedure MaintenanceProcedure = (TDDIMaintenanceProcedure)value_;
        MaintenanceProcedure.write(oprot);
        return;
      case STANDARD:
        TDDIAbstractStandard Standard = (TDDIAbstractStandard)value_;
        Standard.write(oprot);
        return;
      case ASSURANCE_LEVEL:
        TDDIAssuranceLevel AssuranceLevel = (TDDIAssuranceLevel)value_;
        AssuranceLevel.write(oprot);
        return;
      case HAZARD_TYPE:
        TDDIHazardType HazardType = (TDDIHazardType)value_;
        HazardType.write(oprot);
        return;
      case HAZARD_TYPE_SYSTEM:
        TDDIHazardTypeSystem HazardTypeSystem = (TDDIHazardTypeSystem)value_;
        HazardTypeSystem.write(oprot);
        return;
      case RISK_PARAMETER:
        TDDIAbstractRiskParameter RiskParameter = (TDDIAbstractRiskParameter)value_;
        RiskParameter.write(oprot);
        return;
      case HAZARD:
        TDDIHazard Hazard = (TDDIHazard)value_;
        Hazard.write(oprot);
        return;
      case RISK_ASSESSMENT:
        TDDIRiskAssessment RiskAssessment = (TDDIRiskAssessment)value_;
        RiskAssessment.write(oprot);
        return;
      case MALFUNCTION:
        TDDIMalfunction Malfunction = (TDDIMalfunction)value_;
        Malfunction.write(oprot);
        return;
      case THREAT_AGENT:
        TDDIAbstractThreatAgent ThreatAgent = (TDDIAbstractThreatAgent)value_;
        ThreatAgent.write(oprot);
        return;
      case ATTACKER_GOAL:
        TDDIAttackerGoal AttackerGoal = (TDDIAttackerGoal)value_;
        AttackerGoal.write(oprot);
        return;
      case SECURITY_RISK:
        TDDISecurityRisk SecurityRisk = (TDDISecurityRisk)value_;
        SecurityRisk.write(oprot);
        return;
      case ATTACK:
        TDDIAbstractAttack Attack = (TDDIAbstractAttack)value_;
        Attack.write(oprot);
        return;
      case SECURITY_CAPABILITY:
        TDDISecurityCapability SecurityCapability = (TDDISecurityCapability)value_;
        SecurityCapability.write(oprot);
        return;
      case ASSET:
        TDDIAbstractAsset Asset = (TDDIAbstractAsset)value_;
        Asset.write(oprot);
        return;
      case VULNERABILITY:
        TDDIVulnerability Vulnerability = (TDDIVulnerability)value_;
        Vulnerability.write(oprot);
        return;
      case REQUIREMENT_SOURCE:
        TDDIAbstractRequirementSource RequirementSource = (TDDIAbstractRequirementSource)value_;
        RequirementSource.write(oprot);
        return;
      case DEPENDABILITY_REQUIREMENT:
        TDDIAbstractDependabilityRequirement DependabilityRequirement = (TDDIAbstractDependabilityRequirement)value_;
        DependabilityRequirement.write(oprot);
        return;
      case CONFIGURATION:
        TDDIConfiguration Configuration = (TDDIConfiguration)value_;
        Configuration.write(oprot);
        return;
      case SYSTEM:
        TDDIAbstractSystem System = (TDDIAbstractSystem)value_;
        System.write(oprot);
        return;
      case FUNCTION:
        TDDIAbstractFunction Function = (TDDIAbstractFunction)value_;
        Function.write(oprot);
        return;
      case PERF_CHARS:
        TDDIPerfChars PerfChars = (TDDIPerfChars)value_;
        PerfChars.write(oprot);
        return;
      case SIGNAL:
        TDDISignal Signal = (TDDISignal)value_;
        Signal.write(oprot);
        return;
      case CONTEXT:
        TDDIContext Context = (TDDIContext)value_;
        Context.write(oprot);
        return;
      case SYSTEM_BOUNDARY:
        TDDISystemBoundary SystemBoundary = (TDDISystemBoundary)value_;
        SystemBoundary.write(oprot);
        return;
      case PORT:
        TDDIPort Port = (TDDIPort)value_;
        Port.write(oprot);
        return;
      case LIFECYCLE_CONDITION:
        TDDILifecycleCondition LifecycleCondition = (TDDILifecycleCondition)value_;
        LifecycleCondition.write(oprot);
        return;
      case DESIGN_PACKAGE:
        TDDIDesignPackage DesignPackage = (TDDIDesignPackage)value_;
        DesignPackage.write(oprot);
        return;
      case FAILURE_LOGIC_PACKAGE:
        TDDIFailureLogicPackage FailureLogicPackage = (TDDIFailureLogicPackage)value_;
        FailureLogicPackage.write(oprot);
        return;
      case DEPENDABILITY_PACKAGE:
        TDDIDependabilityPackage DependabilityPackage = (TDDIDependabilityPackage)value_;
        DependabilityPackage.write(oprot);
        return;
      case REQUIREMENT_PACKAGE:
        TDDIRequirementPackage RequirementPackage = (TDDIRequirementPackage)value_;
        RequirementPackage.write(oprot);
        return;
      case DOMAIN_PACKAGE:
        TDDIDomainPackage DomainPackage = (TDDIDomainPackage)value_;
        DomainPackage.write(oprot);
        return;
      case HARAPACKAGE:
        TDDIHARAPackage HARAPackage = (TDDIHARAPackage)value_;
        HARAPackage.write(oprot);
        return;
      case TARAPACKAGE:
        TDDITARAPackage TARAPackage = (TDDITARAPackage)value_;
        TARAPackage.write(oprot);
        return;
      case DDIPACKAGE:
        TDDIDDIPackage DDIPackage = (TDDIDDIPackage)value_;
        DDIPackage.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case FAILURE_MODEL:
          TDDIFailureModel FailureModel;
          FailureModel = new TDDIFailureModel();
          FailureModel.read(iprot);
          return FailureModel;
        case MINIMAL_CUT_SETS:
          TDDIMinimalCutSets MinimalCutSets;
          MinimalCutSets = new TDDIMinimalCutSets();
          MinimalCutSets.read(iprot);
          return MinimalCutSets;
        case MINIMAL_CUT_SET:
          TDDIMinimalCutSet MinimalCutSet;
          MinimalCutSet = new TDDIMinimalCutSet();
          MinimalCutSet.read(iprot);
          return MinimalCutSet;
        case FAILURE:
          TDDIAbstractFailure Failure;
          Failure = new TDDIAbstractFailure();
          Failure.read(iprot);
          return Failure;
        case PROB_DIST:
          TDDIProbDist ProbDist;
          ProbDist = new TDDIProbDist();
          ProbDist.read(iprot);
          return ProbDist;
        case PROB_DIST_PARAM:
          TDDIProbDistParam ProbDistParam;
          ProbDistParam = new TDDIProbDistParam();
          ProbDistParam.read(iprot);
          return ProbDistParam;
        case FMEAENTRY:
          TDDIAbstractFMEAEntry FMEAEntry;
          FMEAEntry = new TDDIAbstractFMEAEntry();
          FMEAEntry.read(iprot);
          return FMEAEntry;
        case TRANSITION:
          TDDITransition Transition;
          Transition = new TDDITransition();
          Transition.read(iprot);
          return Transition;
        case STATE:
          TDDIState State;
          State = new TDDIState();
          State.read(iprot);
          return State;
        case CAUSE:
          TDDIAbstractCause Cause;
          Cause = new TDDIAbstractCause();
          Cause.read(iprot);
          return Cause;
        case MEASURE:
          TDDIAbstractMeasure Measure;
          Measure = new TDDIAbstractMeasure();
          Measure.read(iprot);
          return Measure;
        case MEASURE_TYPE:
          TDDIMeasureType MeasureType;
          MeasureType = new TDDIMeasureType();
          MeasureType.read(iprot);
          return MeasureType;
        case MAINTENANCE_PROCEDURE:
          TDDIMaintenanceProcedure MaintenanceProcedure;
          MaintenanceProcedure = new TDDIMaintenanceProcedure();
          MaintenanceProcedure.read(iprot);
          return MaintenanceProcedure;
        case STANDARD:
          TDDIAbstractStandard Standard;
          Standard = new TDDIAbstractStandard();
          Standard.read(iprot);
          return Standard;
        case ASSURANCE_LEVEL:
          TDDIAssuranceLevel AssuranceLevel;
          AssuranceLevel = new TDDIAssuranceLevel();
          AssuranceLevel.read(iprot);
          return AssuranceLevel;
        case HAZARD_TYPE:
          TDDIHazardType HazardType;
          HazardType = new TDDIHazardType();
          HazardType.read(iprot);
          return HazardType;
        case HAZARD_TYPE_SYSTEM:
          TDDIHazardTypeSystem HazardTypeSystem;
          HazardTypeSystem = new TDDIHazardTypeSystem();
          HazardTypeSystem.read(iprot);
          return HazardTypeSystem;
        case RISK_PARAMETER:
          TDDIAbstractRiskParameter RiskParameter;
          RiskParameter = new TDDIAbstractRiskParameter();
          RiskParameter.read(iprot);
          return RiskParameter;
        case HAZARD:
          TDDIHazard Hazard;
          Hazard = new TDDIHazard();
          Hazard.read(iprot);
          return Hazard;
        case RISK_ASSESSMENT:
          TDDIRiskAssessment RiskAssessment;
          RiskAssessment = new TDDIRiskAssessment();
          RiskAssessment.read(iprot);
          return RiskAssessment;
        case MALFUNCTION:
          TDDIMalfunction Malfunction;
          Malfunction = new TDDIMalfunction();
          Malfunction.read(iprot);
          return Malfunction;
        case THREAT_AGENT:
          TDDIAbstractThreatAgent ThreatAgent;
          ThreatAgent = new TDDIAbstractThreatAgent();
          ThreatAgent.read(iprot);
          return ThreatAgent;
        case ATTACKER_GOAL:
          TDDIAttackerGoal AttackerGoal;
          AttackerGoal = new TDDIAttackerGoal();
          AttackerGoal.read(iprot);
          return AttackerGoal;
        case SECURITY_RISK:
          TDDISecurityRisk SecurityRisk;
          SecurityRisk = new TDDISecurityRisk();
          SecurityRisk.read(iprot);
          return SecurityRisk;
        case ATTACK:
          TDDIAbstractAttack Attack;
          Attack = new TDDIAbstractAttack();
          Attack.read(iprot);
          return Attack;
        case SECURITY_CAPABILITY:
          TDDISecurityCapability SecurityCapability;
          SecurityCapability = new TDDISecurityCapability();
          SecurityCapability.read(iprot);
          return SecurityCapability;
        case ASSET:
          TDDIAbstractAsset Asset;
          Asset = new TDDIAbstractAsset();
          Asset.read(iprot);
          return Asset;
        case VULNERABILITY:
          TDDIVulnerability Vulnerability;
          Vulnerability = new TDDIVulnerability();
          Vulnerability.read(iprot);
          return Vulnerability;
        case REQUIREMENT_SOURCE:
          TDDIAbstractRequirementSource RequirementSource;
          RequirementSource = new TDDIAbstractRequirementSource();
          RequirementSource.read(iprot);
          return RequirementSource;
        case DEPENDABILITY_REQUIREMENT:
          TDDIAbstractDependabilityRequirement DependabilityRequirement;
          DependabilityRequirement = new TDDIAbstractDependabilityRequirement();
          DependabilityRequirement.read(iprot);
          return DependabilityRequirement;
        case CONFIGURATION:
          TDDIConfiguration Configuration;
          Configuration = new TDDIConfiguration();
          Configuration.read(iprot);
          return Configuration;
        case SYSTEM:
          TDDIAbstractSystem System;
          System = new TDDIAbstractSystem();
          System.read(iprot);
          return System;
        case FUNCTION:
          TDDIAbstractFunction Function;
          Function = new TDDIAbstractFunction();
          Function.read(iprot);
          return Function;
        case PERF_CHARS:
          TDDIPerfChars PerfChars;
          PerfChars = new TDDIPerfChars();
          PerfChars.read(iprot);
          return PerfChars;
        case SIGNAL:
          TDDISignal Signal;
          Signal = new TDDISignal();
          Signal.read(iprot);
          return Signal;
        case CONTEXT:
          TDDIContext Context;
          Context = new TDDIContext();
          Context.read(iprot);
          return Context;
        case SYSTEM_BOUNDARY:
          TDDISystemBoundary SystemBoundary;
          SystemBoundary = new TDDISystemBoundary();
          SystemBoundary.read(iprot);
          return SystemBoundary;
        case PORT:
          TDDIPort Port;
          Port = new TDDIPort();
          Port.read(iprot);
          return Port;
        case LIFECYCLE_CONDITION:
          TDDILifecycleCondition LifecycleCondition;
          LifecycleCondition = new TDDILifecycleCondition();
          LifecycleCondition.read(iprot);
          return LifecycleCondition;
        case DESIGN_PACKAGE:
          TDDIDesignPackage DesignPackage;
          DesignPackage = new TDDIDesignPackage();
          DesignPackage.read(iprot);
          return DesignPackage;
        case FAILURE_LOGIC_PACKAGE:
          TDDIFailureLogicPackage FailureLogicPackage;
          FailureLogicPackage = new TDDIFailureLogicPackage();
          FailureLogicPackage.read(iprot);
          return FailureLogicPackage;
        case DEPENDABILITY_PACKAGE:
          TDDIDependabilityPackage DependabilityPackage;
          DependabilityPackage = new TDDIDependabilityPackage();
          DependabilityPackage.read(iprot);
          return DependabilityPackage;
        case REQUIREMENT_PACKAGE:
          TDDIRequirementPackage RequirementPackage;
          RequirementPackage = new TDDIRequirementPackage();
          RequirementPackage.read(iprot);
          return RequirementPackage;
        case DOMAIN_PACKAGE:
          TDDIDomainPackage DomainPackage;
          DomainPackage = new TDDIDomainPackage();
          DomainPackage.read(iprot);
          return DomainPackage;
        case HARAPACKAGE:
          TDDIHARAPackage HARAPackage;
          HARAPackage = new TDDIHARAPackage();
          HARAPackage.read(iprot);
          return HARAPackage;
        case TARAPACKAGE:
          TDDITARAPackage TARAPackage;
          TARAPackage = new TDDITARAPackage();
          TARAPackage.read(iprot);
          return TARAPackage;
        case DDIPACKAGE:
          TDDIDDIPackage DDIPackage;
          DDIPackage = new TDDIDDIPackage();
          DDIPackage.read(iprot);
          return DDIPackage;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case FAILURE_MODEL:
        TDDIFailureModel FailureModel = (TDDIFailureModel)value_;
        FailureModel.write(oprot);
        return;
      case MINIMAL_CUT_SETS:
        TDDIMinimalCutSets MinimalCutSets = (TDDIMinimalCutSets)value_;
        MinimalCutSets.write(oprot);
        return;
      case MINIMAL_CUT_SET:
        TDDIMinimalCutSet MinimalCutSet = (TDDIMinimalCutSet)value_;
        MinimalCutSet.write(oprot);
        return;
      case FAILURE:
        TDDIAbstractFailure Failure = (TDDIAbstractFailure)value_;
        Failure.write(oprot);
        return;
      case PROB_DIST:
        TDDIProbDist ProbDist = (TDDIProbDist)value_;
        ProbDist.write(oprot);
        return;
      case PROB_DIST_PARAM:
        TDDIProbDistParam ProbDistParam = (TDDIProbDistParam)value_;
        ProbDistParam.write(oprot);
        return;
      case FMEAENTRY:
        TDDIAbstractFMEAEntry FMEAEntry = (TDDIAbstractFMEAEntry)value_;
        FMEAEntry.write(oprot);
        return;
      case TRANSITION:
        TDDITransition Transition = (TDDITransition)value_;
        Transition.write(oprot);
        return;
      case STATE:
        TDDIState State = (TDDIState)value_;
        State.write(oprot);
        return;
      case CAUSE:
        TDDIAbstractCause Cause = (TDDIAbstractCause)value_;
        Cause.write(oprot);
        return;
      case MEASURE:
        TDDIAbstractMeasure Measure = (TDDIAbstractMeasure)value_;
        Measure.write(oprot);
        return;
      case MEASURE_TYPE:
        TDDIMeasureType MeasureType = (TDDIMeasureType)value_;
        MeasureType.write(oprot);
        return;
      case MAINTENANCE_PROCEDURE:
        TDDIMaintenanceProcedure MaintenanceProcedure = (TDDIMaintenanceProcedure)value_;
        MaintenanceProcedure.write(oprot);
        return;
      case STANDARD:
        TDDIAbstractStandard Standard = (TDDIAbstractStandard)value_;
        Standard.write(oprot);
        return;
      case ASSURANCE_LEVEL:
        TDDIAssuranceLevel AssuranceLevel = (TDDIAssuranceLevel)value_;
        AssuranceLevel.write(oprot);
        return;
      case HAZARD_TYPE:
        TDDIHazardType HazardType = (TDDIHazardType)value_;
        HazardType.write(oprot);
        return;
      case HAZARD_TYPE_SYSTEM:
        TDDIHazardTypeSystem HazardTypeSystem = (TDDIHazardTypeSystem)value_;
        HazardTypeSystem.write(oprot);
        return;
      case RISK_PARAMETER:
        TDDIAbstractRiskParameter RiskParameter = (TDDIAbstractRiskParameter)value_;
        RiskParameter.write(oprot);
        return;
      case HAZARD:
        TDDIHazard Hazard = (TDDIHazard)value_;
        Hazard.write(oprot);
        return;
      case RISK_ASSESSMENT:
        TDDIRiskAssessment RiskAssessment = (TDDIRiskAssessment)value_;
        RiskAssessment.write(oprot);
        return;
      case MALFUNCTION:
        TDDIMalfunction Malfunction = (TDDIMalfunction)value_;
        Malfunction.write(oprot);
        return;
      case THREAT_AGENT:
        TDDIAbstractThreatAgent ThreatAgent = (TDDIAbstractThreatAgent)value_;
        ThreatAgent.write(oprot);
        return;
      case ATTACKER_GOAL:
        TDDIAttackerGoal AttackerGoal = (TDDIAttackerGoal)value_;
        AttackerGoal.write(oprot);
        return;
      case SECURITY_RISK:
        TDDISecurityRisk SecurityRisk = (TDDISecurityRisk)value_;
        SecurityRisk.write(oprot);
        return;
      case ATTACK:
        TDDIAbstractAttack Attack = (TDDIAbstractAttack)value_;
        Attack.write(oprot);
        return;
      case SECURITY_CAPABILITY:
        TDDISecurityCapability SecurityCapability = (TDDISecurityCapability)value_;
        SecurityCapability.write(oprot);
        return;
      case ASSET:
        TDDIAbstractAsset Asset = (TDDIAbstractAsset)value_;
        Asset.write(oprot);
        return;
      case VULNERABILITY:
        TDDIVulnerability Vulnerability = (TDDIVulnerability)value_;
        Vulnerability.write(oprot);
        return;
      case REQUIREMENT_SOURCE:
        TDDIAbstractRequirementSource RequirementSource = (TDDIAbstractRequirementSource)value_;
        RequirementSource.write(oprot);
        return;
      case DEPENDABILITY_REQUIREMENT:
        TDDIAbstractDependabilityRequirement DependabilityRequirement = (TDDIAbstractDependabilityRequirement)value_;
        DependabilityRequirement.write(oprot);
        return;
      case CONFIGURATION:
        TDDIConfiguration Configuration = (TDDIConfiguration)value_;
        Configuration.write(oprot);
        return;
      case SYSTEM:
        TDDIAbstractSystem System = (TDDIAbstractSystem)value_;
        System.write(oprot);
        return;
      case FUNCTION:
        TDDIAbstractFunction Function = (TDDIAbstractFunction)value_;
        Function.write(oprot);
        return;
      case PERF_CHARS:
        TDDIPerfChars PerfChars = (TDDIPerfChars)value_;
        PerfChars.write(oprot);
        return;
      case SIGNAL:
        TDDISignal Signal = (TDDISignal)value_;
        Signal.write(oprot);
        return;
      case CONTEXT:
        TDDIContext Context = (TDDIContext)value_;
        Context.write(oprot);
        return;
      case SYSTEM_BOUNDARY:
        TDDISystemBoundary SystemBoundary = (TDDISystemBoundary)value_;
        SystemBoundary.write(oprot);
        return;
      case PORT:
        TDDIPort Port = (TDDIPort)value_;
        Port.write(oprot);
        return;
      case LIFECYCLE_CONDITION:
        TDDILifecycleCondition LifecycleCondition = (TDDILifecycleCondition)value_;
        LifecycleCondition.write(oprot);
        return;
      case DESIGN_PACKAGE:
        TDDIDesignPackage DesignPackage = (TDDIDesignPackage)value_;
        DesignPackage.write(oprot);
        return;
      case FAILURE_LOGIC_PACKAGE:
        TDDIFailureLogicPackage FailureLogicPackage = (TDDIFailureLogicPackage)value_;
        FailureLogicPackage.write(oprot);
        return;
      case DEPENDABILITY_PACKAGE:
        TDDIDependabilityPackage DependabilityPackage = (TDDIDependabilityPackage)value_;
        DependabilityPackage.write(oprot);
        return;
      case REQUIREMENT_PACKAGE:
        TDDIRequirementPackage RequirementPackage = (TDDIRequirementPackage)value_;
        RequirementPackage.write(oprot);
        return;
      case DOMAIN_PACKAGE:
        TDDIDomainPackage DomainPackage = (TDDIDomainPackage)value_;
        DomainPackage.write(oprot);
        return;
      case HARAPACKAGE:
        TDDIHARAPackage HARAPackage = (TDDIHARAPackage)value_;
        HARAPackage.write(oprot);
        return;
      case TARAPACKAGE:
        TDDITARAPackage TARAPackage = (TDDITARAPackage)value_;
        TARAPackage.write(oprot);
        return;
      case DDIPACKAGE:
        TDDIDDIPackage DDIPackage = (TDDIDDIPackage)value_;
        DDIPackage.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case FAILURE_MODEL:
        return FAILURE_MODEL_FIELD_DESC;
      case MINIMAL_CUT_SETS:
        return MINIMAL_CUT_SETS_FIELD_DESC;
      case MINIMAL_CUT_SET:
        return MINIMAL_CUT_SET_FIELD_DESC;
      case FAILURE:
        return FAILURE_FIELD_DESC;
      case PROB_DIST:
        return PROB_DIST_FIELD_DESC;
      case PROB_DIST_PARAM:
        return PROB_DIST_PARAM_FIELD_DESC;
      case FMEAENTRY:
        return FMEAENTRY_FIELD_DESC;
      case TRANSITION:
        return TRANSITION_FIELD_DESC;
      case STATE:
        return STATE_FIELD_DESC;
      case CAUSE:
        return CAUSE_FIELD_DESC;
      case MEASURE:
        return MEASURE_FIELD_DESC;
      case MEASURE_TYPE:
        return MEASURE_TYPE_FIELD_DESC;
      case MAINTENANCE_PROCEDURE:
        return MAINTENANCE_PROCEDURE_FIELD_DESC;
      case STANDARD:
        return STANDARD_FIELD_DESC;
      case ASSURANCE_LEVEL:
        return ASSURANCE_LEVEL_FIELD_DESC;
      case HAZARD_TYPE:
        return HAZARD_TYPE_FIELD_DESC;
      case HAZARD_TYPE_SYSTEM:
        return HAZARD_TYPE_SYSTEM_FIELD_DESC;
      case RISK_PARAMETER:
        return RISK_PARAMETER_FIELD_DESC;
      case HAZARD:
        return HAZARD_FIELD_DESC;
      case RISK_ASSESSMENT:
        return RISK_ASSESSMENT_FIELD_DESC;
      case MALFUNCTION:
        return MALFUNCTION_FIELD_DESC;
      case THREAT_AGENT:
        return THREAT_AGENT_FIELD_DESC;
      case ATTACKER_GOAL:
        return ATTACKER_GOAL_FIELD_DESC;
      case SECURITY_RISK:
        return SECURITY_RISK_FIELD_DESC;
      case ATTACK:
        return ATTACK_FIELD_DESC;
      case SECURITY_CAPABILITY:
        return SECURITY_CAPABILITY_FIELD_DESC;
      case ASSET:
        return ASSET_FIELD_DESC;
      case VULNERABILITY:
        return VULNERABILITY_FIELD_DESC;
      case REQUIREMENT_SOURCE:
        return REQUIREMENT_SOURCE_FIELD_DESC;
      case DEPENDABILITY_REQUIREMENT:
        return DEPENDABILITY_REQUIREMENT_FIELD_DESC;
      case CONFIGURATION:
        return CONFIGURATION_FIELD_DESC;
      case SYSTEM:
        return SYSTEM_FIELD_DESC;
      case FUNCTION:
        return FUNCTION_FIELD_DESC;
      case PERF_CHARS:
        return PERF_CHARS_FIELD_DESC;
      case SIGNAL:
        return SIGNAL_FIELD_DESC;
      case CONTEXT:
        return CONTEXT_FIELD_DESC;
      case SYSTEM_BOUNDARY:
        return SYSTEM_BOUNDARY_FIELD_DESC;
      case PORT:
        return PORT_FIELD_DESC;
      case LIFECYCLE_CONDITION:
        return LIFECYCLE_CONDITION_FIELD_DESC;
      case DESIGN_PACKAGE:
        return DESIGN_PACKAGE_FIELD_DESC;
      case FAILURE_LOGIC_PACKAGE:
        return FAILURE_LOGIC_PACKAGE_FIELD_DESC;
      case DEPENDABILITY_PACKAGE:
        return DEPENDABILITY_PACKAGE_FIELD_DESC;
      case REQUIREMENT_PACKAGE:
        return REQUIREMENT_PACKAGE_FIELD_DESC;
      case DOMAIN_PACKAGE:
        return DOMAIN_PACKAGE_FIELD_DESC;
      case HARAPACKAGE:
        return HARAPACKAGE_FIELD_DESC;
      case TARAPACKAGE:
        return TARAPACKAGE_FIELD_DESC;
      case DDIPACKAGE:
        return DDIPACKAGE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TDDIFailureModel getFailureModel() {
    if (getSetField() == _Fields.FAILURE_MODEL) {
      return (TDDIFailureModel)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'FailureModel' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFailureModel(TDDIFailureModel value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FAILURE_MODEL;
    value_ = value;
  }

  public TDDIMinimalCutSets getMinimalCutSets() {
    if (getSetField() == _Fields.MINIMAL_CUT_SETS) {
      return (TDDIMinimalCutSets)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'MinimalCutSets' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMinimalCutSets(TDDIMinimalCutSets value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.MINIMAL_CUT_SETS;
    value_ = value;
  }

  public TDDIMinimalCutSet getMinimalCutSet() {
    if (getSetField() == _Fields.MINIMAL_CUT_SET) {
      return (TDDIMinimalCutSet)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'MinimalCutSet' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMinimalCutSet(TDDIMinimalCutSet value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.MINIMAL_CUT_SET;
    value_ = value;
  }

  public TDDIAbstractFailure getFailure() {
    if (getSetField() == _Fields.FAILURE) {
      return (TDDIAbstractFailure)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Failure' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFailure(TDDIAbstractFailure value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FAILURE;
    value_ = value;
  }

  public TDDIProbDist getProbDist() {
    if (getSetField() == _Fields.PROB_DIST) {
      return (TDDIProbDist)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ProbDist' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setProbDist(TDDIProbDist value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PROB_DIST;
    value_ = value;
  }

  public TDDIProbDistParam getProbDistParam() {
    if (getSetField() == _Fields.PROB_DIST_PARAM) {
      return (TDDIProbDistParam)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ProbDistParam' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setProbDistParam(TDDIProbDistParam value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PROB_DIST_PARAM;
    value_ = value;
  }

  public TDDIAbstractFMEAEntry getFMEAEntry() {
    if (getSetField() == _Fields.FMEAENTRY) {
      return (TDDIAbstractFMEAEntry)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'FMEAEntry' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFMEAEntry(TDDIAbstractFMEAEntry value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FMEAENTRY;
    value_ = value;
  }

  public TDDITransition getTransition() {
    if (getSetField() == _Fields.TRANSITION) {
      return (TDDITransition)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Transition' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTransition(TDDITransition value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TRANSITION;
    value_ = value;
  }

  public TDDIState getState() {
    if (getSetField() == _Fields.STATE) {
      return (TDDIState)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'State' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setState(TDDIState value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STATE;
    value_ = value;
  }

  public TDDIAbstractCause getCause() {
    if (getSetField() == _Fields.CAUSE) {
      return (TDDIAbstractCause)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Cause' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCause(TDDIAbstractCause value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.CAUSE;
    value_ = value;
  }

  public TDDIAbstractMeasure getMeasure() {
    if (getSetField() == _Fields.MEASURE) {
      return (TDDIAbstractMeasure)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Measure' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMeasure(TDDIAbstractMeasure value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.MEASURE;
    value_ = value;
  }

  public TDDIMeasureType getMeasureType() {
    if (getSetField() == _Fields.MEASURE_TYPE) {
      return (TDDIMeasureType)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'MeasureType' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMeasureType(TDDIMeasureType value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.MEASURE_TYPE;
    value_ = value;
  }

  public TDDIMaintenanceProcedure getMaintenanceProcedure() {
    if (getSetField() == _Fields.MAINTENANCE_PROCEDURE) {
      return (TDDIMaintenanceProcedure)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'MaintenanceProcedure' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMaintenanceProcedure(TDDIMaintenanceProcedure value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.MAINTENANCE_PROCEDURE;
    value_ = value;
  }

  public TDDIAbstractStandard getStandard() {
    if (getSetField() == _Fields.STANDARD) {
      return (TDDIAbstractStandard)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Standard' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStandard(TDDIAbstractStandard value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STANDARD;
    value_ = value;
  }

  public TDDIAssuranceLevel getAssuranceLevel() {
    if (getSetField() == _Fields.ASSURANCE_LEVEL) {
      return (TDDIAssuranceLevel)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AssuranceLevel' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAssuranceLevel(TDDIAssuranceLevel value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASSURANCE_LEVEL;
    value_ = value;
  }

  public TDDIHazardType getHazardType() {
    if (getSetField() == _Fields.HAZARD_TYPE) {
      return (TDDIHazardType)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'HazardType' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHazardType(TDDIHazardType value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HAZARD_TYPE;
    value_ = value;
  }

  public TDDIHazardTypeSystem getHazardTypeSystem() {
    if (getSetField() == _Fields.HAZARD_TYPE_SYSTEM) {
      return (TDDIHazardTypeSystem)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'HazardTypeSystem' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHazardTypeSystem(TDDIHazardTypeSystem value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HAZARD_TYPE_SYSTEM;
    value_ = value;
  }

  public TDDIAbstractRiskParameter getRiskParameter() {
    if (getSetField() == _Fields.RISK_PARAMETER) {
      return (TDDIAbstractRiskParameter)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'RiskParameter' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRiskParameter(TDDIAbstractRiskParameter value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.RISK_PARAMETER;
    value_ = value;
  }

  public TDDIHazard getHazard() {
    if (getSetField() == _Fields.HAZARD) {
      return (TDDIHazard)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Hazard' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHazard(TDDIHazard value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HAZARD;
    value_ = value;
  }

  public TDDIRiskAssessment getRiskAssessment() {
    if (getSetField() == _Fields.RISK_ASSESSMENT) {
      return (TDDIRiskAssessment)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'RiskAssessment' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRiskAssessment(TDDIRiskAssessment value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.RISK_ASSESSMENT;
    value_ = value;
  }

  public TDDIMalfunction getMalfunction() {
    if (getSetField() == _Fields.MALFUNCTION) {
      return (TDDIMalfunction)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Malfunction' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMalfunction(TDDIMalfunction value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.MALFUNCTION;
    value_ = value;
  }

  public TDDIAbstractThreatAgent getThreatAgent() {
    if (getSetField() == _Fields.THREAT_AGENT) {
      return (TDDIAbstractThreatAgent)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ThreatAgent' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setThreatAgent(TDDIAbstractThreatAgent value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.THREAT_AGENT;
    value_ = value;
  }

  public TDDIAttackerGoal getAttackerGoal() {
    if (getSetField() == _Fields.ATTACKER_GOAL) {
      return (TDDIAttackerGoal)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'AttackerGoal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAttackerGoal(TDDIAttackerGoal value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ATTACKER_GOAL;
    value_ = value;
  }

  public TDDISecurityRisk getSecurityRisk() {
    if (getSetField() == _Fields.SECURITY_RISK) {
      return (TDDISecurityRisk)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'SecurityRisk' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSecurityRisk(TDDISecurityRisk value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SECURITY_RISK;
    value_ = value;
  }

  public TDDIAbstractAttack getAttack() {
    if (getSetField() == _Fields.ATTACK) {
      return (TDDIAbstractAttack)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Attack' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAttack(TDDIAbstractAttack value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ATTACK;
    value_ = value;
  }

  public TDDISecurityCapability getSecurityCapability() {
    if (getSetField() == _Fields.SECURITY_CAPABILITY) {
      return (TDDISecurityCapability)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'SecurityCapability' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSecurityCapability(TDDISecurityCapability value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SECURITY_CAPABILITY;
    value_ = value;
  }

  public TDDIAbstractAsset getAsset() {
    if (getSetField() == _Fields.ASSET) {
      return (TDDIAbstractAsset)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Asset' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAsset(TDDIAbstractAsset value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ASSET;
    value_ = value;
  }

  public TDDIVulnerability getVulnerability() {
    if (getSetField() == _Fields.VULNERABILITY) {
      return (TDDIVulnerability)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Vulnerability' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setVulnerability(TDDIVulnerability value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.VULNERABILITY;
    value_ = value;
  }

  public TDDIAbstractRequirementSource getRequirementSource() {
    if (getSetField() == _Fields.REQUIREMENT_SOURCE) {
      return (TDDIAbstractRequirementSource)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'RequirementSource' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRequirementSource(TDDIAbstractRequirementSource value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.REQUIREMENT_SOURCE;
    value_ = value;
  }

  public TDDIAbstractDependabilityRequirement getDependabilityRequirement() {
    if (getSetField() == _Fields.DEPENDABILITY_REQUIREMENT) {
      return (TDDIAbstractDependabilityRequirement)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DependabilityRequirement' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDependabilityRequirement(TDDIAbstractDependabilityRequirement value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DEPENDABILITY_REQUIREMENT;
    value_ = value;
  }

  public TDDIConfiguration getConfiguration() {
    if (getSetField() == _Fields.CONFIGURATION) {
      return (TDDIConfiguration)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Configuration' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setConfiguration(TDDIConfiguration value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.CONFIGURATION;
    value_ = value;
  }

  public TDDIAbstractSystem getSystem() {
    if (getSetField() == _Fields.SYSTEM) {
      return (TDDIAbstractSystem)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'System' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSystem(TDDIAbstractSystem value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SYSTEM;
    value_ = value;
  }

  public TDDIAbstractFunction getFunction() {
    if (getSetField() == _Fields.FUNCTION) {
      return (TDDIAbstractFunction)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Function' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFunction(TDDIAbstractFunction value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FUNCTION;
    value_ = value;
  }

  public TDDIPerfChars getPerfChars() {
    if (getSetField() == _Fields.PERF_CHARS) {
      return (TDDIPerfChars)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'PerfChars' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPerfChars(TDDIPerfChars value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PERF_CHARS;
    value_ = value;
  }

  public TDDISignal getSignal() {
    if (getSetField() == _Fields.SIGNAL) {
      return (TDDISignal)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Signal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSignal(TDDISignal value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SIGNAL;
    value_ = value;
  }

  public TDDIContext getContext() {
    if (getSetField() == _Fields.CONTEXT) {
      return (TDDIContext)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Context' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setContext(TDDIContext value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.CONTEXT;
    value_ = value;
  }

  public TDDISystemBoundary getSystemBoundary() {
    if (getSetField() == _Fields.SYSTEM_BOUNDARY) {
      return (TDDISystemBoundary)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'SystemBoundary' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSystemBoundary(TDDISystemBoundary value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SYSTEM_BOUNDARY;
    value_ = value;
  }

  public TDDIPort getPort() {
    if (getSetField() == _Fields.PORT) {
      return (TDDIPort)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'Port' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPort(TDDIPort value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PORT;
    value_ = value;
  }

  public TDDILifecycleCondition getLifecycleCondition() {
    if (getSetField() == _Fields.LIFECYCLE_CONDITION) {
      return (TDDILifecycleCondition)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'LifecycleCondition' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLifecycleCondition(TDDILifecycleCondition value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.LIFECYCLE_CONDITION;
    value_ = value;
  }

  public TDDIDesignPackage getDesignPackage() {
    if (getSetField() == _Fields.DESIGN_PACKAGE) {
      return (TDDIDesignPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DesignPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDesignPackage(TDDIDesignPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DESIGN_PACKAGE;
    value_ = value;
  }

  public TDDIFailureLogicPackage getFailureLogicPackage() {
    if (getSetField() == _Fields.FAILURE_LOGIC_PACKAGE) {
      return (TDDIFailureLogicPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'FailureLogicPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFailureLogicPackage(TDDIFailureLogicPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.FAILURE_LOGIC_PACKAGE;
    value_ = value;
  }

  public TDDIDependabilityPackage getDependabilityPackage() {
    if (getSetField() == _Fields.DEPENDABILITY_PACKAGE) {
      return (TDDIDependabilityPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DependabilityPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDependabilityPackage(TDDIDependabilityPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DEPENDABILITY_PACKAGE;
    value_ = value;
  }

  public TDDIRequirementPackage getRequirementPackage() {
    if (getSetField() == _Fields.REQUIREMENT_PACKAGE) {
      return (TDDIRequirementPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'RequirementPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRequirementPackage(TDDIRequirementPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.REQUIREMENT_PACKAGE;
    value_ = value;
  }

  public TDDIDomainPackage getDomainPackage() {
    if (getSetField() == _Fields.DOMAIN_PACKAGE) {
      return (TDDIDomainPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DomainPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDomainPackage(TDDIDomainPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DOMAIN_PACKAGE;
    value_ = value;
  }

  public TDDIHARAPackage getHARAPackage() {
    if (getSetField() == _Fields.HARAPACKAGE) {
      return (TDDIHARAPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'HARAPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHARAPackage(TDDIHARAPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HARAPACKAGE;
    value_ = value;
  }

  public TDDITARAPackage getTARAPackage() {
    if (getSetField() == _Fields.TARAPACKAGE) {
      return (TDDITARAPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'TARAPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTARAPackage(TDDITARAPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TARAPACKAGE;
    value_ = value;
  }

  public TDDIDDIPackage getDDIPackage() {
    if (getSetField() == _Fields.DDIPACKAGE) {
      return (TDDIDDIPackage)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'DDIPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDDIPackage(TDDIDDIPackage value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DDIPACKAGE;
    value_ = value;
  }

  public boolean isSetFailureModel() {
    return setField_ == _Fields.FAILURE_MODEL;
  }


  public boolean isSetMinimalCutSets() {
    return setField_ == _Fields.MINIMAL_CUT_SETS;
  }


  public boolean isSetMinimalCutSet() {
    return setField_ == _Fields.MINIMAL_CUT_SET;
  }


  public boolean isSetFailure() {
    return setField_ == _Fields.FAILURE;
  }


  public boolean isSetProbDist() {
    return setField_ == _Fields.PROB_DIST;
  }


  public boolean isSetProbDistParam() {
    return setField_ == _Fields.PROB_DIST_PARAM;
  }


  public boolean isSetFMEAEntry() {
    return setField_ == _Fields.FMEAENTRY;
  }


  public boolean isSetTransition() {
    return setField_ == _Fields.TRANSITION;
  }


  public boolean isSetState() {
    return setField_ == _Fields.STATE;
  }


  public boolean isSetCause() {
    return setField_ == _Fields.CAUSE;
  }


  public boolean isSetMeasure() {
    return setField_ == _Fields.MEASURE;
  }


  public boolean isSetMeasureType() {
    return setField_ == _Fields.MEASURE_TYPE;
  }


  public boolean isSetMaintenanceProcedure() {
    return setField_ == _Fields.MAINTENANCE_PROCEDURE;
  }


  public boolean isSetStandard() {
    return setField_ == _Fields.STANDARD;
  }


  public boolean isSetAssuranceLevel() {
    return setField_ == _Fields.ASSURANCE_LEVEL;
  }


  public boolean isSetHazardType() {
    return setField_ == _Fields.HAZARD_TYPE;
  }


  public boolean isSetHazardTypeSystem() {
    return setField_ == _Fields.HAZARD_TYPE_SYSTEM;
  }


  public boolean isSetRiskParameter() {
    return setField_ == _Fields.RISK_PARAMETER;
  }


  public boolean isSetHazard() {
    return setField_ == _Fields.HAZARD;
  }


  public boolean isSetRiskAssessment() {
    return setField_ == _Fields.RISK_ASSESSMENT;
  }


  public boolean isSetMalfunction() {
    return setField_ == _Fields.MALFUNCTION;
  }


  public boolean isSetThreatAgent() {
    return setField_ == _Fields.THREAT_AGENT;
  }


  public boolean isSetAttackerGoal() {
    return setField_ == _Fields.ATTACKER_GOAL;
  }


  public boolean isSetSecurityRisk() {
    return setField_ == _Fields.SECURITY_RISK;
  }


  public boolean isSetAttack() {
    return setField_ == _Fields.ATTACK;
  }


  public boolean isSetSecurityCapability() {
    return setField_ == _Fields.SECURITY_CAPABILITY;
  }


  public boolean isSetAsset() {
    return setField_ == _Fields.ASSET;
  }


  public boolean isSetVulnerability() {
    return setField_ == _Fields.VULNERABILITY;
  }


  public boolean isSetRequirementSource() {
    return setField_ == _Fields.REQUIREMENT_SOURCE;
  }


  public boolean isSetDependabilityRequirement() {
    return setField_ == _Fields.DEPENDABILITY_REQUIREMENT;
  }


  public boolean isSetConfiguration() {
    return setField_ == _Fields.CONFIGURATION;
  }


  public boolean isSetSystem() {
    return setField_ == _Fields.SYSTEM;
  }


  public boolean isSetFunction() {
    return setField_ == _Fields.FUNCTION;
  }


  public boolean isSetPerfChars() {
    return setField_ == _Fields.PERF_CHARS;
  }


  public boolean isSetSignal() {
    return setField_ == _Fields.SIGNAL;
  }


  public boolean isSetContext() {
    return setField_ == _Fields.CONTEXT;
  }


  public boolean isSetSystemBoundary() {
    return setField_ == _Fields.SYSTEM_BOUNDARY;
  }


  public boolean isSetPort() {
    return setField_ == _Fields.PORT;
  }


  public boolean isSetLifecycleCondition() {
    return setField_ == _Fields.LIFECYCLE_CONDITION;
  }


  public boolean isSetDesignPackage() {
    return setField_ == _Fields.DESIGN_PACKAGE;
  }


  public boolean isSetFailureLogicPackage() {
    return setField_ == _Fields.FAILURE_LOGIC_PACKAGE;
  }


  public boolean isSetDependabilityPackage() {
    return setField_ == _Fields.DEPENDABILITY_PACKAGE;
  }


  public boolean isSetRequirementPackage() {
    return setField_ == _Fields.REQUIREMENT_PACKAGE;
  }


  public boolean isSetDomainPackage() {
    return setField_ == _Fields.DOMAIN_PACKAGE;
  }


  public boolean isSetHARAPackage() {
    return setField_ == _Fields.HARAPACKAGE;
  }


  public boolean isSetTARAPackage() {
    return setField_ == _Fields.TARAPACKAGE;
  }


  public boolean isSetDDIPackage() {
    return setField_ == _Fields.DDIPACKAGE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TDDIBaseElementUnion) {
      return equals((TDDIBaseElementUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TDDIBaseElementUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TDDIBaseElementUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
