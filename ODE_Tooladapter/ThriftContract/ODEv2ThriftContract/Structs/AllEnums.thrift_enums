// Base //

enum TDDITimeUnit{
	TUMillisecond, 
	TUSecond, 
	TUMinute,
	TUHour, 
	TUDay,
	TUWeek,
	TUMonth,
	TUYear
}

enum TDDIBaseElementUnionType {

    // Design //
    BEUTConfiguration,
    BEUTSystem, 
    BEUTFunction,
    BEUTPerfChars,
    BEUTSignal,
    BEUTContext,
    BEUTSystemBoundary,
    BEUTPort,
    BEUTLifecycleCondition,
    BEUTDesignPackage,

    // FailureLogic //
    BEUTMinimalCutSet,
    BEUTMinimalCutSets,
    BEUTFailureModel,
    BEUTFailure,
    BEUTProbDist,
    BEUTProbDistParam,
    BEUTFailureLogicPackage,

    // FailureLogic::Markov //
    BEUTTransition,
    BEUTState,

    // FailureLogic::FTA //
    BEUTCause,

    // FailureLogic::FMEA //
    BEUTFMEAEntry,

    // Dependability // 
    BEUTMeasure,
    BEUTMeasureType,
    BEUTMaintenanceProcedure,
    BEUTDependabilityPackage,

    // Dependability::Requirement //
    BEUTAbstractRequirementSource,
    BEUTAbstractDependabilityRequirement,
    BEUTRequirementPackage,

    // Dependability::HARA //
    BEUTHazard,
    BEUTMalfunction,
    BEUTHazardType,
    BEUTHazardTypeSystem,
    BEUTRiskAssessment,
    BEUTRiskParameter,
    BEUTHARAPackage,

    // Dependability::TARA //
    BEUTThreatAgent,
    BEUTAttackerGoal,
    BEUTSecurityRisk,
    BEUTAttack,
    BEUTSecurityCapability,
    BEUTAsset,
    BEUTVulnerability,
    BEUTTARAPackage,

    // Dependability::Domain //
    BEUTStandard,
    BEUTAssuranceLevel,
    BEUTDomainPackage
}

// End-Base //

// Integration //

enum TDDIODEProductPackageUnionType{
    OPPUTDesignPackage,
    OPPUTFailureLogicPackage,
    OPPUTRequirementPackage,
    OPPUTHARAPackage,
    OPPUTDependabilityPackage,
    OPPUTTARAPackage,
    OPPUTDomainPackage,
}

// End-Integration //

// Design //

enum TDDIPortDirection{
	PDIN,
	PDOUT,
	PDINOUT
}

enum TDDISystemUnionType{
	SUTSystem, 
	SUTPhysicalComponent,
	SUTLogicalComponent,
	SUTSafetyRelatedSystem
}

enum TDDIFunctionUnionType{
	FUTFunction,
	FUTSafetyFunction
}

// End-Design //

// FailureLogic //

enum TDDIFailureOriginType{
    FOTInput,
    FOTOutput, 
    FOTInternal
}

enum TDDIFailureUnionType{
    FAILUTFailure,
    FAILUTSecurityViolation
}

enum TDDIFailureModelUnionType{
    FAMUTFailureModel,
    FAMUTMarkovChain,
    FAMUTFaultTree,
    FAMUTFMEA
}

// End-FailureLogic //

// FailureLogic::FTA //

enum TDDIGateType{
    GTOR,
    GTAND,
    GTNOT,
    GTXOR,
    GTVOTE,
    GTPAND,
    GTPOR,
    GTSAND,
    InputEvent, 
    OutputEvent
}

enum TDDICauseType{
    CTInputEvent,
    CTOutputEvent,
    CTBasicEvent,
    CTGate
}

enum TDDICauseUnionType{
    CUTCause,
    CutGate
}

// End-FailureLogic::FTA //

// FailureLogic::FMEA //

enum TDDIFMEAEntryUnionType{
    FMEAEUTFMEAEntry,
    FMEAEUTFMEDAEntry
}

enum TDDIFMEAType{
    FMEA,
    FMEDA
}

// End-FailureLogic::FMEA //

// Dependability // 

enum TDDIMeasureUnionType{
    MUTMeasure,
    MUTFaultToleranceMeasure,
    MUTSecurityControl
}

// End-Dependability //

// Dependability::Domain //

enum TDDIStandardUnionType{
    SUTStandard,
    SUTSafetyStandard
}

// End-Dependability::Domain //

// Dependability::HARA // 

enum TDDIRiskParameterUnionType{
    RPUTRiskParameter,
    RPUTSituation,
    RPUTAccident,
    RPUTOperatorMeasure
}

// End-Dependability::HARA //

// Dependability::Requirement // 

enum TDDIRequirementSourceUnionType{
    RSUTLegalContract
}

enum TDDIDependabilityRequirementUnionType{
    DRUTSafetyRequirement,
    DRUTSecurityRequirement
}

// End-Dependability::Requirement //



// Dependability::TARA //

enum TDDIFinancialCostType {
	FCTUSD,
	FCTEUR,
	FCTGBP
}

enum TDDISecurityApplicationType {
	SATPreventive,
	SATActive,
	SATPassive
}

enum TDDIOperationalCostType {
	OCTWorkhours,
	OCTWorkdays,
	OCTWorkmonths
}

enum TDDIAbstractAssetUnionType {
	AAUTAsset,
	AAUTVulnerableItem
}

enum TDDIAbstractThreatAgentUnionType {
	ATAUTThreatAgent,
	ATAUTHuman,
	ATAUTNonHuman
}

enum TDDIAbstractAttackUnionType {
	AAUTAttack,
	AAUTAction,
	AAUTPayload
}

// End-Dependability::TARA //




// SACM_Argumentation //

enum TDDIAssertionDeclaration{
    ADAsserted,
    ADNeedsSupport,
    ADAssumed,
    ADAxiomatic,
    ADDefeated,
    ADAsCited
}

enum TDDIArgumentationElementUnionType{
    AEUTArgumentGroup,
    AEUTAbstractArgumentPackage,
    AEUTAbstractArgumentAsset
}

enum TDDIArgumentPackageUnionType{
    APUTArgumentPackage,
    APUTArgumentPackageInterface,
    APUTArgumentPackageBinding
}

enum TDDIArgumentAssetUnionType{
    AAUTAbstractAssertion,
    AAUTArgumentReasoning,
    AAUTArtifactReference
}

enum TDDIAssertionUnionType{
    AUTClaim,
    AUTAbstractAssertedRelationship
}

enum TDDIAssertedRelationshipUnionType{
    ARUTAssertedArtifactSupport,
    ARUTAssertedArtifactContext,
    ARUTAssertedInference,
    ARUTAssertedEvidence,
    ARUTAssertedContext
}

// End-SACM_Argumentation //

// SACM_Artifact //

enum TDDIArtifactPackageUnionType{
    APUTArtifactPackage,
    APUTArtifactPackageInterface,
    APUTArtifactPackageBinding
}

enum TDDIArtifactAssetUnionType{
    AAUTProperty,
    AAUTTechnique,
    AAUTParticipant,
    AAUTActivity,
    AAUTEvent,
    AAUTResource,
    AAUTArtifact,
    AAUTArtifactAssetRelationship
}

// End-SACM_Artifact //

// SACM_AssuranceCase //

enum TDDIAssuranceCasePackageUnionType{
    ACPUTAssuranceCasePackage,
    ACPUTAssuranceCasePackageInterface,
    ACPUTAssuranceCasePackageBinding
}

// End-SACM_AssuranceCase //

// SACM_Base //

enum TDDILangStringUnionType{
	LSUTLangString,
    LSUTExpressionLangString
}

enum TDDIUtilityElementUnionType{
    UEUTDescription,
    UEUTImplementationConstraint,
    UEUTNote,
    UEUTTaggedValue
}

enum TDDIArtifactElementUnionType{
    AEUTAbstractTerminologyElement,
    AEUTAbstractAssuranceCasePackage,
    AEUTAbstractArtifactPackage,
    AEUTArtifactGroup,
    AEUTAbstractArtifactAsset,
    AEUTAbstractArgumentationElement
}

enum TDDIModelElementUnionType{
    MEUTAbstractArtifactElement
}

enum TDDISACMElementUnionType{
    EUTAbstractUtilityElement,
    EUTAbstractModelElement
}

enum TDDIElementUnionType{
	EUTAbstractLangString,
    EUTMultiLangString,
    EUTAbstractSACMElement
}

// End-SACM_Base //

// SACM_Terminology //

enum TDDITerminologyElementUnionType{
	TEUTTerminologyGroup,
    TEUTAbstractTerminologyPackage,
    TEUTAbstractTerminologyAsset
}

enum TDDITerminologyPackageUnionType{
    TPUTTerminologyPackage,
    TPUTTerminologyPackageBinding,
    TPUTTerminologyPackageInterface
}

enum TDDIExpressionElementUnionType{
    EEUTExpression,
    EEUTTerm
}

enum TDDITerminologyAssetUnionType{
    TAUTCategory,
    TAUTAbstractExpressionElement
}

// End-SACM_Terminology //

// ServiceExecution //

enum TDDIEpsilonScriptExecutionExceptionUnionType{
    ESEEUTEpsilonScriptExecutionException,
    ESEEUTValidationFailedException
}

enum TDDIEpsilonLanguage{
	ELEOL,
	ELEVL,
	ELETL,
	ELEWL,
	ELEGL,
	ELECL,
	ELEML,
	ELEPL
}

// End-ServiceExecution //
